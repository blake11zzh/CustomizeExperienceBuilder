"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[5743],{14314:function(e,t,n){n.r(t),n.d(t,{default:function(){return m}});var a=n(28453),l=n(96540);function s(e){const t=Object.assign({p:"p",code:"code",h3:"h3",a:"a",span:"span",ul:"ul",li:"li",pre:"pre"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"Message/action is a way to support communication between widget to widget, widget to framework, and framework to widget. Widget/framework can publish a message, and they can listen to a message as well.\nA message is identified by ",l.createElement(t.code,null,"MessageType"),", which is defined by the jimu framework. There are some message types defined in jimu, such as ",l.createElement(t.code,null,"ExtentChange")," and ",l.createElement(t.code,null,"DataRecordsSelectionChange"),"."),"\n",l.createElement(t.h3,{id:"publishing-a-message",className:"group relative s:flex s:flex-nowrap"},"Publishing a message",l.createElement(t.a,{href:"#publishing-a-message","aria-label":"publishing a message permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"A widget calls ",l.createElement(t.code,null,"MessageManager.getInstance().publishMessage(message)")," to publish a message. For example, the ",l.createElement(t.code,null,"List")," widget publishes the ",l.createElement(t.code,null,"DataRecordsSelectionChange")," message when a list item is\nclicked or a ",l.createElement(t.code,null,"Map")," widget publishes the ",l.createElement(t.code,null,"ExtentChange")," message when the view is changed, which updates the ",l.createElement(t.code,null,"List")," widget content. The following ",l.createElement(t.code,null,"MessageTypes")," are supported:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.code,null,"StringSelectionChange")),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"ExtentChange")),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"DataRecordsSelectionChange")),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"DataRecordSetChange")),"\n"),"\n",l.createElement(t.p,null,"Each message has a class to define it. For example, the ",l.createElement(t.code,null,"ExtentChange")," message is defined by ",l.createElement(t.code,null,"ExtentChangeMessage")," class, this class defines the ",l.createElement(t.code,null,"extent")," property, which is the message payload."),"\n",l.createElement(t.p,null,"To publish a message, a widget should declare the published messages in the ",l.createElement(t.code,null,"manifest.json")," file."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-json"},'  "publishMessages": [\n    "DATA_RECORDS_SELECTION_CHANGE"\n  ]\n\n')),"\n",l.createElement(t.h3,{id:"creating-a-message-action",className:"group relative s:flex s:flex-nowrap"},"Creating a message action",l.createElement(t.a,{href:"#creating-a-message-action","aria-label":"creating a message action permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"To create a message action, you will need to extend ",l.createElement(t.code,null,"AbstractMessageAction")," class. There are several methods and functions that help with developing message actions."),"\n",l.createElement(t.p,null,"The ",l.createElement(t.code,null,"filterMessageDescription")," method is used to filter the available actions in the builder."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"export default class QueryAction extends AbstractMessageAction{\n  filterMessageDescription: (messageDescription: MessageDescription): boolean{\n    return [MessageType.StringSelectionChange, MessageType.DataRecordsSelectionChange].indexOf(messageDescription.messageType) > -1;\n  }\n}\n")),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"filterMessage")," method is used to filter messages in message manager."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"filterMessage(message: Message): boolean{\n    return true;\n  }\n\n")),"\n",l.createElement(t.p,null,"Some actions may need a setting UI to configure the action behavior. To achieve this, you can declare the ",l.createElement(t.code,null,"settingUri")," in manifest.json.\nIn some specific cases, you may want to skip the setting UI. To achieve this, you can override the ",l.createElement(t.code,null,"getSettingComponentUri")," method and return ",l.createElement(t.code,null,"null")," in the applicable cases."),"\n",l.createElement(t.p,null,"An action setting UI component is a React component with some injected props. When the user changes the config, you should call ",l.createElement(t.code,null,"this.props.onSettingChange")," to save the config, which will be available in the ",l.createElement(t.code,null,"onExecute")," method."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"this.props.onSettingChange({\n  actionId: this.props.actionId,\n  config: {} // the action config\n})\n")),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"onExecute")," method handles the logic for what you would like to happen for your message type. In the snippet below, it basically selects the action based on the message type and sends it from the application to the store using ",l.createElement(t.code,null,"getAppStore()")," function using the ",l.createElement(t.code,null,"dispatch")," property. This dispatches the redux action\nand allows the state to be updated. Learn more about redux actions and using the store in ",l.createElement(t.a,{href:"https://redux.js.org/tutorials/essentials/part-1-overview-concepts"},"Redux"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"onExecute(message: Message, actionConfig?: any): Promise<boolean> | boolean{\n    let q = `${(actionConfig as ConfigForStringChangeMessage).fieldName} = '${message}'`\n    switch(message.type){\n      case MessageType.StringSelectionChange:\n        q = `${(actionConfig as ConfigForStringChangeMessage).fieldName} = '${(message as StringSelectionChangeMessage).str}'`\n        break;\n      case MessageType.DataRecordsSelectionChange:\n         q = `${actionConfig.fieldName} = ` +\n          `'${(message as DataRecordsSelectionChangeMessage).records[0].getFieldValue(actionConfig.fieldName)}'`\n        break;\n    }\n    getAppStore().dispatch(appActions.widgetStatePropChange(this.widgetId, 'queryString', q));\n    return true;\n}\n\n")),"\n",l.createElement(t.p,null,"Only plain JSON objects are able to be stored in the Redux store. If you need to pass a complex JavaScript object, you can store it in a mutable store by using the ",l.createElement(t.code,null,"MutableStoreManager"),". After you update the value, your widget can be re-rendered as well.\nIn the action:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"MutableStoreManager.getInstance().updateStateValue(this.widgetId, 'theKey', theComplexObject)\n")),"\n",l.createElement(t.p,null,"In the widget, you can access the object by using:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"this.props.mutableStateProps.theKey\n")),"\n",l.createElement(t.p,null,"In the ",l.createElement(t.code,null,"manifest.json")," there is a messageActions property that provides the location and information for the message action extension."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},'\n "messageActions": [\n  {\n    "name": "query",\n    "label": "Query",\n    "uri": "actions/query-action",\n    "settingUri": "actions/query-action-setting"\n  }\n]\n\n')),"\n",l.createElement(t.h3,{id:"i18n-support",className:"group relative s:flex s:flex-nowrap"},"i18n support",l.createElement(t.a,{href:"#i18n-support","aria-label":"i18n support permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"The support for languages in your message action follows the same pattern as a ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/guide/extend-base-widget/#i18n-support"},"widget")," with one key difference. A message action has a ",l.createElement(t.code,null,"Select an action")," panel that allows users to select an action. Therefore you will need to have a file called ",l.createElement(t.code,null,"default.ts")," in the runtime/translations folder with the property names of your actions.\nThe framework handles the translations of the action label in this panel. As a result, the property of the label needs to have this naming convention ",l.createElement(t.code,null,"_action_<actionName>_label"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"\nexport default {\n  _widgetLabel: 'Message subscriber',\n  _action_query_label: 'Query'\n}\n\n")))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?l.createElement(t,e,l.createElement(s,e)):s(e)},i=n(69507),o=n(46427);const r=function(e){const{data:{topicNavigation:t}}=e;return l.createElement(i.A,null,l.createElement(o.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function m(e){return l.createElement(r,e,l.createElement(c,e))}}}]);