"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[3598],{7136:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var l=n(28453),a=n(96540);function r(e){const t=Object.assign({p:"p",ul:"ul",li:"li",code:"code",h2:"h2",a:"a",span:"span",h3:"h3",pre:"pre"},(0,l.RP)(),e.components),{Note:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Note",!0),a.createElement(a.Fragment,null,a.createElement(t.p,null,"An ArcGIS Experience Builder widget consists of the following files:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"src"),": the widget source code folder"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"runtime"),": folder"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"widget.tsx"),": main entry file"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"assets"),": folder for assets used by ",a.createElement(t.code,null,"widget.tsx")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"translations"),": folder for strings used by widget"),"\n"),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"setting"),": folder"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"setting.tsx"),": file for settings used by widget"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"assets"),": folder for assets used by settings"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"translations"),": folder for strings used by settings"),"\n"),"\n"),"\n"),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"dist"),": the compiled code folder of the widget. It uses the same structure as the source code folder."),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"icon.svg"),": the icon of the widget in the widget panel"),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"config.json"),": the widget's default config"),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,a.createElement(t.code,null,"manifest.json"),": see ",a.createElement(t.code,null,"jimu-core/WidgetManifest")," for the list of properties"),"\n"),"\n"),"\n",a.createElement(t.h2,{id:"client-server",className:"group relative s:flex s:flex-nowrap"},"Client server",a.createElement(t.a,{href:"#client-server","aria-label":"client server permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"After you install the necessary modules for the developer edition of Experience Builder, you will run ",a.createElement(t.code,null,"npm start")," in the client directory to launch the webpack server. This service will watch for any changes in the existing\nfiles and it will compile automatically. In most cases, you will not need to restart the webpack server when you edit your source code. However, in the following scenarios you will need to restart the server:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Installing a new module."),"\n",a.createElement(t.li,null,"Adding, removing or renaming of a widget."),"\n",a.createElement(t.li,null,"Editing the widget's ",a.createElement(t.code,null,"manifest.json"),"."),"\n",a.createElement(t.li,null,"Adding, removing or renaming a file or folder."),"\n"),"\n",a.createElement(n,{type:"tip"},a.createElement(t.p,null,"You can use ",a.createElement(t.code,null,"ctrl + c")," to stop the server.")),"\n",a.createElement(t.h2,{id:"creating-a-widget",className:"group relative s:flex s:flex-nowrap"},"Creating a widget",a.createElement(t.a,{href:"#creating-a-widget","aria-label":"creating a widget permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"The easiest way to create the required files for a widget is to copy the demo widget located in the ",a.createElement(t.a,{href:"https://github.com/esri/arcgis-experience-builder-sdk-resources"},"samples repo")," and paste it in the ",a.createElement(t.code,null,"client/your-extensions/widgets")," directory.\nRename the demo widget folder, change the name and label in the ",a.createElement(t.code,null,"manifest.json")," and the ",a.createElement(t.code,null,"_widgetLabel")," property in the default.ts file located in the translations folder of the widget.\nThere are two ways to create widget/react components; class and function. Below are some of the differences between the two."),"\n",a.createElement(n,{type:"tip"},a.createElement(t.p,null,"It is suggested that the ",a.createElement(t.code,null,"_widgetLabel")," in default.ts should always be the same with the ",a.createElement(t.code,null,"label")," in manifest.json")),"\n",a.createElement(t.p,null,"Class components"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Make use of ES6 class and extend the component class in React."),"\n",a.createElement(t.li,null,"Can maintain its own data with state."),"\n",a.createElement(t.li,null,"Passes props (properties) down to class components and access them with this.props."),"\n",a.createElement(t.li,null,"Uses the render() method."),"\n"),"\n",a.createElement(t.p,null,"Function components"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Basic JavaScript functions using arrows functions, but you can also use regular function keyword."),"\n",a.createElement(t.li,null,"Can accept and use props."),"\n",a.createElement(t.li,null,"Uses React Hooks to use state and other features."),"\n",a.createElement(t.li,null,"There is no render() method."),"\n"),"\n",a.createElement(t.p,null,"All the samples used in the developer documentation with the exception of one are based on class components. We will add additional samples for\nfunction components in incremental releases."),"\n",a.createElement(t.h3,{id:"creating-a-widget-using-a-class-component",className:"group relative s:flex s:flex-nowrap"},"Creating a widget using a class component",a.createElement(t.a,{href:"#creating-a-widget-using-a-class-component","aria-label":"creating a widget using a class component permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"The example below demonstrates how to create a simple hello world class widget/component by extending the ",a.createElement(t.code,null,"React.PureComponent")," class. The widget is declared with the type ",a.createElement(t.code,null,"AllWidgetProps")," as\n",a.createElement(t.code,null,"export default class Widget extends React.PureComponent<AllWidgetProps<{}>, any>"),", which uses props of the widget. The ",a.createElement(t.code,null,"render()")," method is called to return the text ",a.createElement(t.code,null,"hello world")," from the label property."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},'//a custom pragma to transform your jsx into plain JavaScript\n/** @jsx jsx */\nimport { React, AllWidgetProps, jsx } from "jimu-core";\nexport default class Widget extends React.PureComponent<AllWidgetProps<{}>, any> {\n\n    render() {\n      return (\n        <div className="widget-starter jimu-widget" style={{ overflow: "auto" }}>\n          <p>Hello world!</p>\n          <p>Widget Name: {this.props.label}</p>\n        </div>\n      );\n    }\n\n}\n\n')),"\n",a.createElement(t.h3,{id:"creating-a-widget-using-a-function-component",className:"group relative s:flex s:flex-nowrap"},"Creating a widget using a function component",a.createElement(t.a,{href:"#creating-a-widget-using-a-function-component","aria-label":"creating a widget using a function component permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"The example below loads the modules needed to create a simple hello world function widget/component. The widget is declared as a function with the type ",a.createElement(t.code,null,"AllWidgetProps")," as\n",a.createElement(t.code,null,"export default function Widget (props: AllWidgetProps) {"),", which uses props of the widget. The widget returns the text ",a.createElement(t.code,null,"hello world")," and the widget name coming from the property ",a.createElement(t.code,null,"_widgetLabel")," in the translations file."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},'/** @jsx jsx */\nimport { AllWidgetProps, jsx} from "jimu-core";\n\nexport default function Widget (props:AllWidgetProps) {\n    return <div className="widget-starter jimu-widget" style={{ overflow: "auto" }}>\n        <p>Hello world!</p>\n        <p>Widget Name: {props.label}</p>\n      </div>\n  }\n\n')),"\n",a.createElement(t.h2,{id:"creating-a-setting-ui-for-the-widget",className:"group relative s:flex s:flex-nowrap"},"Creating a setting UI for the widget",a.createElement(t.a,{href:"#creating-a-setting-ui-for-the-widget","aria-label":"creating a setting ui for the widget permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Creating the setting UI for a widget is similar to creating a widget, with one exception, there is a setting.tsx in the setting folder.\nThere are two ways to create the widget setting; class and function. Using a class component you can extend the ",a.createElement(t.code,null,"React.PureComponent")," class.\nIn this example, it demonstrates how to add a data source and interact with a config.json file in the settings panel. There are couple of imports to pay close attention to in this example including the following:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"import ",a.createElement(t.code,null,"React")," is used for the ",a.createElement(t.code,null,"React.PureComponent")," class."),"\n",a.createElement(t.li,null,"import ",a.createElement(t.code,null,"DataSourceTypes")," is used for the data source type."),"\n",a.createElement(t.li,null,"import ",a.createElement(t.code,null,"SettingSection")," and ",a.createElement(t.code,null,"SettingRow")," are some useful UI components for the settings."),"\n",a.createElement(t.li,null,"import ",a.createElement(t.code,null,"DataSourceSelector")," is another component used to select the data source."),"\n",a.createElement(t.li,null,"import ",a.createElement(t.code,null,"IMConfig")," is used for the config.json file."),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import {React, Immutable, FormattedMessage} from 'jimu-core';\nimport {AllWidgetSettingProps} from 'jimu-for-builder';\nimport {DataSourceTypes} from 'jimu-arcgis';\nimport {SettingSection, SettingRow} from 'jimu-ui/advanced/setting-components';\nimport {DataSourceSelector} from 'jimu-ui/advanced/data-source-selector';\nimport {IMConfig} from '../config';\nimport defaultI18nMessages from './translations/default'\n")),"\n",a.createElement(t.p,null,"The ",a.createElement(t.code,null,"React.PureComponent")," class is declared with the types ",a.createElement(t.code,null,"AllWidgetSettingProps")," and ",a.createElement(t.code,null,"IMConfig"),". The ",a.createElement(t.code,null,"supportedTypes")," property is used for the data source type webmap throughout the class. ",a.createElement(t.code,null,"onDataSourceSelected")," is a class property with a function to\nhandle the selection of the data source. The function ",a.createElement(t.code,null,"this.props.OnSettingChange()")," is used to notify changes in the setting UI. The ",a.createElement(t.code,null,"onP1Change")," and ",a.createElement(t.code,null,"onP2Change")," class properties use React's event handling to help with setting the value for the config.json file."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"export default class Setting extends React.PureComponent{\n  supportedTypes = Immutable([DataSourceTypes.WebMap]);\n\n  onDataSourceSelected = (useDataSources: UseDataSource[]) => {\n    this.props.onSettingChange({\n      id: this.props.id,\n      useDataSources: useDataSources\n    });\n  }\n")),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"    onP1Change = (evt: React.FormEvent<HTMLInputElement>) => {\n      this.props.onSettingChange({\n        id: this.props.id,\n        config: this.props.config.set('p1', evt.currentTarget.value)\n      });\n    }\n\n    onP2Change = (evt: React.FormEvent<HTMLInputElement>) => {\n      this.props.onSettingChange({\n        id: this.props.id,\n        config: this.props.config.set('p2', evt.currentTarget.value)\n      });\n    }\n")),"\n",a.createElement(t.p,null,"There are components in the jimu library that you can use in your widgets. For example, to help with the UI for the selection of the web map, the ",a.createElement(t.code,null,"DataSourceSelector")," component is used to handle the type, the id, and the callback for the selected data source. In addition,\n",a.createElement(t.code,null,"SettingSection")," and ",a.createElement(t.code,null,"SettingRow")," components are used to handle the formating of the container for the strings coming from the translations and the config file."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},'\nrender(){\n    return <div className="sample-map-view-setting p-2">\n      <DataSourceSelector\n        types={this.supportedTypes}\n        mustUseDataSource\n        useDataSources={this.props.useDataSources}\n        onChange={this.onDataSourceSelected}\n        widgetId={this.props.id}\n      />\n      <SettingSection>\n        <SettingRow label={<FormattedMessage id="p1" defaultMessage={defaultI18nMessages.p1}/>}> <input defaultValue={this.props.config.p1} onChange={this.onP1Change}/></SettingRow>\n        <SettingRow label={<FormattedMessage id="p2" defaultMessage={defaultI18nMessages.p2}/>}> <input defaultValue={this.props.config.p2} onChange={this.onP2Change}/></SettingRow>\n      </SettingSection>\n    </div>\n  }\n}\n\n')),"\n",a.createElement(t.h2,{id:"props",className:"group relative s:flex s:flex-nowrap"},"Props",a.createElement(t.a,{href:"#props","aria-label":"props permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"There are various props injected into a widget. You can access them through ",a.createElement(t.code,null,"this.props")," for a class component or the props parameter ",a.createElement(t.code,null,"{props}"),"for a function component.\nFor example, to access the props in the config.json for a widget using a class component, ",a.createElement(t.code,null,"this.props.config")," can be used. To access it in a function component, use ",a.createElement(t.code,null,"props.config"),".\nTo learn more about the available properties, please review ",a.createElement(t.code,null,"client/jimu-core/lib/types/props.ts")," in Experience Builder."),"\n",a.createElement(t.p,null,"In some cases, you might need to access properties that are not in ",a.createElement(t.code,null,"this.props"),", to accomplish this define a static function like the code snippet below in the widget class:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"\nstatic mapExtraStateProps = (state: IMState) => {\n    return {\n      appMode: state && state.appRuntimeInfo && state.appRuntimeInfo.appMode\n    };\n  };\n\n")),"\n",a.createElement(t.h2,{id:"i18n-support",className:"group relative s:flex s:flex-nowrap"},"i18n support",a.createElement(t.a,{href:"#i18n-support","aria-label":"i18n support permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Experience Builder uses the ",a.createElement(t.code,null,"react-intl")," library to support i18n. To enable support for languages in your widget, declare the locales for the ",a.createElement(t.code,null,"translatedLocales")," property in the widget's ",a.createElement(t.code,null,"manifest.json"),". By convention the default locale must be first.\nFor example, in the snippet below the default locale for the ",a.createElement(t.code,null,"translatedLocales")," property is English (United States), followed by Spanish, and Mandarin Chinese."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-json"},' "translatedLocales": [\n    "en",\n    "es",\n    "zh-cn"\n  ]\n')),"\n",a.createElement(t.p,null,"The translations strings must be within a file called ",a.createElement(t.code,null,"default.ts"),", which is located in the ",a.createElement(t.code,null,"runtime/translations")," and ",a.createElement(t.code,null,"settings/translations")," folders. The ",a.createElement(t.code,null,"default.ts")," defines the default strings, which you can import into your widget and use for the default message. The format of ",a.createElement(t.code,null,"default.ts")," is:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-ts"},"export default {\n  _widgetLabel: 'My Widget',\n  str1: 'String 1',\n}\n")),"\n",a.createElement(t.p,null,"For each additional language that is supported, create a file within the ",a.createElement(t.code,null,"translations")," folder named for that locale, for example ",a.createElement(t.code,null,"translations/es.js")," for Spanish. The contents of the file follow this format, with all the same properties that are defined in ",a.createElement(t.code,null,"default.ts"),", and with values as the translated strings for that locale."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"System.register([], function (_export) {return {execute: function () {_export({\n  // the strings\n  _widgetLabel: 'Translated Widget Name',\n  str1: 'Translated String 1',\n})}}});\n")),"\n",a.createElement(t.p,null,"In the widget files (for example, ",a.createElement(t.code,null,"widget.tsx"),"), here are the different ways to access the translated strings:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"// Class component\nthis.props.intl.formatMessage({id: 'str1', defaultMessage: defaultMessages.str1})\n\n// Function component\nprops.intl.formatMessage({id: 'str1', defaultMessage: defaultMessage.str1})\n\n// JSX\n<FormattedMessage id=\"str1\" defaultMessage={defaultMessages.str1}/>\n")),"\n",a.createElement(t.h2,{id:"mapviewsceneview",className:"group relative s:flex s:flex-nowrap"},"MapView/SceneView",a.createElement(t.a,{href:"#mapviewsceneview","aria-label":"mapviewsceneview permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In most experiences, a widget will need to work with a map view/scene view and also access layers in the views as well. To ensure we have a consistent extensibility model a ",a.createElement(t.code,null,"MapViewManager")," class is available in ",a.createElement(t.code,null,"jimu-arcgis")," in addition to other classes and methods to make it easier to use within the Experience Builder framework.\nBasically every widget can call the ",a.createElement(t.code,null,"createJimuMapView")," method to add a map/scene view to the ",a.createElement(t.code,null,"MapViewManager")," and make it available for use by other widgets."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"      MapViewManager.getInstance().createJimuMapView({\n        mapWidgetId: this.props.id,\n        view: new MapView(options),\n        datasourceId: webmapDs.id,\n        isActive: true\n      })\n\n")),"\n",a.createElement(t.p,null,"Other widgets that need to use the map view/scene view can use the ",a.createElement(t.code,null,"MapWidgetSelector")," to select it in the setting UI. The selected map/scene is saved in ",a.createElement(t.code,null,"WidgetJson.useMapWidgetsIds"),"."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"<MapWidgetSelector onSelect={this.onMapWidgetSelected} useMapWidgetIds={this.props.useMapWidgetIds[0]} />\n\n")),"\n",a.createElement(t.h2,{id:"modules-in-the-arcgis-maps-sdk-for-javascript",className:"group relative s:flex s:flex-nowrap"},"Modules in the ArcGIS Maps SDK for JavaScript",a.createElement(t.a,{href:"#modules-in-the-arcgis-maps-sdk-for-javascript","aria-label":"modules in the arcgis maps sdk for javascript permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"By default, Experience Builder does not load the ArcGIS Maps SDK for JavaScript (JSAPI) when the app loads. There are two options to utilize JSAPI modules:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Widgets dependent on the JSAPI (e.g., almost nothing can be done without JSAPI)","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Declare ",a.createElement(t.code,null,"jimu-arcgis")," dependency in the widget's ",a.createElement(t.code,null,"manifest.json"),"."),"\n",a.createElement(t.li,null,"Import the module you need ",a.createElement(t.code,null,"import Query from 'esri/tasks/support/Query'")," in the ",a.createElement(t.code,null,"widget.tsx"),"."),"\n"),"\n"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"  const query = new Query({\n    where: `${typeIdField} = ${graphic.attributes[objectIdField]}`,\n    outFields: ['FirstName'],\n    returnGeometry: true\n  })\n")),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Widgets dependent on JSAPI conditionally (e.g., can do something without JSAPI)","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"use ",a.createElement(t.code,null,"import {loadArcGISJSAPIModules}")," and ",a.createElement(t.code,null,"loadArcGISJSAPIModules([])")," to dynamically load modules."),"\n"),"\n"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"  loadArcGISJSAPIModules(['esri/widgets/Directions']).then(modules => {\n          [this.Directions] = modules;\n          this.setState({\n            apiLoaded: true\n         });\n        })\n")),"\n",a.createElement(t.h2,{id:"support-inline-editing",className:"group relative s:flex s:flex-nowrap"},"Support inline editing",a.createElement(t.a,{href:"#support-inline-editing","aria-label":"support inline editing permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Every configurable widget should provide a setting page to allow the configuration of a widget. However, in some configurations it will be easier to modify settings on the widget rather than the setting panel. In this workflow, a widget can support this feature by providing inline editing."),"\n",a.createElement(t.p,null,"There are a few ways to implement inline editing:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Declare ",a.createElement(t.code,null,"supportInlineEditing")," in the widget's ",a.createElement(t.code,null,"manifest.json")," under the ",a.createElement(t.code,null,"properties")," object. In this instance, the widget will have an edit toolbar when the widget is launched in builder. ",a.createElement(t.code,null,"Text")," widget is implemented this way."),"\n",a.createElement(t.li,null,"Declare ",a.createElement(t.code,null,"hasEmbeddedLayout")," in widget's ",a.createElement(t.code,null,"manifest.json")," under the ",a.createElement(t.code,null,"properties")," object. In this case, we recommend using a layout component to ensure users can drag & drop other widgets in/out of the widget. There are two layout components exported from ",a.createElement(t.code,null,"jimu-layouts/layout-builder")," and ",a.createElement(t.code,null,"jimu-layouts/layout-runtime"),". In your widget, you will need to use the layout component exported from ",a.createElement(t.code,null,"jimu-layouts/layout-runtime"),". To access the component exported from ",a.createElement(t.code,null,"jimu-layouts/layout-builder"),", use ",a.createElement(t.code,null,"this.props.builderSupportModules.LayoutClass"),". ",a.createElement(t.code,null,"List")," widget uses this technique."),"\n",a.createElement(t.li,null,"Declare ",a.createElement(t.code,null,"CONTEXT_TOOL")," extensions in the widget's ",a.createElement(t.code,null,"manifest.json"),". The declared extensions will be available in the selection toolbar. ",a.createElement(t.code,null,"Image")," widget is used in this way by adding shape and crop tools to the selection toolbar."),"\n"),"\n",a.createElement(t.p,null,"To support inline editing, the widget might have some modules that are only required when the widget is launched in the builder. In this scenario, you would place these modules in the ",a.createElement(t.code,null,"builder-support.tsx"),". This file should be in the same folder with ",a.createElement(t.code,null,"widget.tsx"),". The modules in this file will be available in ",a.createElement(t.code,null,"this.props.builderSupportModules.widgetModules")," once the widget is launched in builder."),"\n",a.createElement(t.h2,{id:"best-practices",className:"group relative s:flex s:flex-nowrap"},"Best practices",a.createElement(t.a,{href:"#best-practices","aria-label":"best practices permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Provide a root CSS class name for your widget, using ",a.createElement(t.code,null,"widget-<widget name>")," as the widget's class name and ",a.createElement(t.code,null,"widget-setting-<widget name>")," as the widget setting's class name."),"\n",a.createElement(t.li,null,"Use ",a.createElement(t.code,null,"import {} from 'jimu-core'")," to load the built in 3rd party libraries. For instance, ",a.createElement(t.code,null,"import {React} from 'jimu-core"),"; if using ",a.createElement(t.code,null,"import {} from '3rd_lib'"),", the size of your widget will be larger because the lib will be built into your widget."),"\n",a.createElement(t.li,null,"Create a Typesafe config file in the widget ",a.createElement(t.code,null,"src")," folder and use it in both ",a.createElement(t.code,null,"widget.tsx")," and ",a.createElement(t.code,null,"setting.tsx"),"."),"\n",a.createElement(t.li,null,"Utilize the out-of-box UI components whenever you can, learn more about ",a.createElement(t.a,{href:"/experience-builder/guide/widget-ui/"},"creating UI for your widgets"),"."),"\n"))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)};var o=n(69507),s=n(46427);const c=function(e){const{data:{topicNavigation:t}}=e;return a.createElement(o.A,null,a.createElement(s.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function d(e){return a.createElement(c,e,a.createElement(i,e))}}}]);