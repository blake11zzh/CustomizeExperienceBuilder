"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[3908],{78326:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var l=n(28453),a=n(96540);function r(e){const t=Object.assign({h2:"h2",a:"a",span:"span",p:"p",strong:"strong",ul:"ul",li:"li",code:"code",pre:"pre"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,{id:"general-principles-for-unit-tests",className:"group relative s:flex s:flex-nowrap"},"General principles for unit tests",a.createElement(t.a,{href:"#general-principles-for-unit-tests","aria-label":"general principles for unit tests permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"The key to good unit testing is to write ",a.createElement(t.strong,null,"testable code"),". Applying simple design principles can help. In particular:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Use a ",a.createElement(t.strong,null,"good naming")," convention and ",a.createElement(t.strong,null,"comment"),' your code (the "why?" not the "how"). Keep in mind that comments are not a substitute for bad naming or bad design.'),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"DRY"),": Don't Repeat Yourself - avoid code duplication."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Single responsibility"),": each object/function must focus on a single task."),"\n",a.createElement(t.li,null,"Keep a ",a.createElement(t.strong,null,"single level of abstraction")," in the same component. For example, do not mix business logic with lower-level technical details in the same method."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Minimize dependencies")," between components: encapsulate and interchange less information between components."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Support configurability")," rather than hard-coding. Doing this prevents having to replicate the exact same environment when testing."),"\n"),"\n",a.createElement(t.h2,{id:"unit-tests-in-arcgis-experience-builder",className:"group relative s:flex s:flex-nowrap"},"Unit tests in ArcGIS Experience Builder",a.createElement(t.a,{href:"#unit-tests-in-arcgis-experience-builder","aria-label":"unit tests in arcgis experience builder permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Unit tests files must end with ",a.createElement(t.code,null,".test.ts(x)")," or ",a.createElement(t.code,null,".spec.ts(x)")," and should be put in the ",a.createElement(t.code,null,"tests")," folder."),"\n",a.createElement(t.li,null,"Unit tests should be written in ",a.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Behavior-driven_development"},"behavior-driven development (BDD)")," style. For example:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"describe('calculator', function() {\n  // Describes a module with nested \"describe\" functions\n  describe('add', function() {\n    // Specify the expected behavior\n    it('should add 2 numbers', function() {\n      // Use assertion functions to test the expected behavior\n      expect(foo).toBeTruthy();\n      expect(foo).toBe('bar');\n    })\n  })\n})\n")),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Experience Builder uses ",a.createElement(t.a,{href:"https://jestjs.io/"},"Jest")," as the testing framework."),"\n",a.createElement(t.li,null,"Experience Builder uses ",a.createElement(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro"},"@testing-library/react")," to test React components."),"\n"),"\n",a.createElement(t.h2,{id:"write-unit-tests-in-experience-builder",className:"group relative s:flex s:flex-nowrap"},"Write unit tests in Experience Builder",a.createElement(t.a,{href:"#write-unit-tests-in-experience-builder","aria-label":"write unit tests in experience builder permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In general, you may need to write unit tests for these three kinds of code:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Native TypeScript code"),": For this kind of code, you may be able to use ",a.createElement(t.code,null,"Jest")," only. In most cases, you need to mock some components to make it easier to write the unit tests."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Native React component"),": For this kind of code, you should use ",a.createElement(t.code,null,"Jest")," and ",a.createElement(t.code,null,"@testing-library/react"),". Use Jest as a testing framework, and use the testing library to render react components then check the render result."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Experience Builder widget"),": For an Experience Builder widget, you should use ",a.createElement(t.code,null,"wrapWidget")," and ",a.createElement(t.code,null,"wrapWidgetSetting")," that are exported from ",a.createElement(t.code,null,"jimu-for-test"),"."),"\n"),"\n",a.createElement(t.p,null,"For all of the above kinds of code, ",a.createElement(t.code,null,"jimu-for-test")," provides some helper utility functions to write tests easily. For example:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Init state: you can use ",a.createElement(t.code,null,"getInitState()")," and ",a.createElement(t.code,null,"getDefaultAppConfig()")," to init store like this:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"  getAppStore().dispatch(appActions.updateStoreState(getInitState().merge({\n    appConfig: getDefaultAppConfig().merge({\n      widgets: {\n        w1: {\n          label: 'W 1'\n        }\n      }\n    })\n  })))\n")),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"To mock a feature service, you can call ",a.createElement(t.code,null,"mockFeatureLayer")," with your mock data like this:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"mockFeatureLayer(mockData)\n")),"\n",a.createElement(t.p,null,"After the feature layer is mocked, the request in the unit test will not make a network request, making the test more stable and fast."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"To render a React component, you can render it like this:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"const {queryByText} = render(<Component/>)\nconst {queryByText} = withStoreRender(<Component/>)\n")),"\n",a.createElement(t.p,null,"Then check the render result like this:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"expect(queryByText('the text')).toBeInTheDocument();\n")),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"To render a widget, you should:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"// Get the widget render, you can pass in store/theme/locale optionally\nconst render = widgetRender();\n// Wrap the widget to inject some props into widget component\nconst Widget = wrapWidget(_Widget, {config: {}});\n// Then, you can render the widget like a native react component\nconst {queryByText} = render(<Widget/>)\n")),"\n",a.createElement(t.h2,{id:"test-modules-that-use-the-arcgis-maps-sdk-for-javascript",className:"group relative s:flex s:flex-nowrap"},"Test modules that use the ArcGIS Maps SDK for JavaScript",a.createElement(t.a,{href:"#test-modules-that-use-the-arcgis-maps-sdk-for-javascript","aria-label":"test modules that use the arcgis maps sdk for javascript permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"You should mock the modules you used in your component. If you load the modules through ",a.createElement(t.code,null,"loadArcGISJSAPIModule"),", you can mock it like this:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"jest.mock('jimu-core', () => {\n  return {\n    ...jest.requireActual('jimu-core'),\n    loadArcGISJSAPIModule: jest.fn().mockImplementation(moduleId => {\n      let module\n      if(moduleId === 'esri/layers/FeatureLayer'){\n        module = jest.fn().mockImplementation(() => {\n          return {\n            queryFeatureCount: () => Promise.resolve(5)\n          }\n        })\n      }\n      return Promise.resolve(module)\n    })\n  }\n})\n")),"\n",a.createElement(t.p,null,"If you import the modules, you can use ",a.createElement(t.code,null,"jest.mock()"),"."),"\n",a.createElement(t.h2,{id:"run-unit-tests",className:"group relative s:flex s:flex-nowrap"},"Run unit tests",a.createElement(t.a,{href:"#run-unit-tests","aria-label":"run unit tests permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In the ",a.createElement(t.code,null,"client")," folder, run ",a.createElement(t.code,null,"npm test"),"."),"\n",a.createElement(t.p,null,"See the ",a.createElement(t.a,{href:"/experience-builder/sample-code/widgets/show-unit-tests/"},"show-unit-tests sample")," for an example set of unit tests."))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},i=n(69507),s=n(46427);const o=function(e){const{data:{topicNavigation:t}}=e;return a.createElement(i.A,null,a.createElement(s.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function u(e){return a.createElement(o,e,a.createElement(c,e))}}}]);