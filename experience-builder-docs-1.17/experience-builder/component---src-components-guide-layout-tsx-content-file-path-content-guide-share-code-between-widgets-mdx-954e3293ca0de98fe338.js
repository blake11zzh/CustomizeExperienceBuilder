"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[15],{55872:function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var l=n(28453),a=n(96540);function r(e){const t=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",code:"code",h2:"h2",a:"a",span:"span",pre:"pre"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"When you are developing multiple widgets for one business domain, you may want to share code between them. This page describes how Experience Builder helps you to achieve this."),"\n",a.createElement(t.p,null,"Experience Builder provides two methods to share code between widgets:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Dynamic loading"),": This method is straightforward to implement. However, it requires dynamic loading of the shared code, so you can't use the frequently-used ES6 ",a.createElement(t.code,null,"import {} from ''"),". In addition, the shared code is compiled into the 'chunks' folder, which contains numerous files and can be challenging to maintain."),"\n",a.createElement(t.li,null,a.createElement(t.strong,null,"Shared entry"),": This approach allows you to import shared code using standard ES6 imports, offering a cleaner structure. However, it requires an additional setup step."),"\n"),"\n",a.createElement(t.h2,{id:"dynamic-loading",className:"group relative s:flex s:flex-nowrap"},"Dynamic loading",a.createElement(t.a,{href:"#dynamic-loading","aria-label":"dynamic loading permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"When you need to share code between widgets using this way, the best practice is to create a folder. Place the widgets that need to share code in the folder, and then create a common folder to store the shared code.\nThe folder structure looks like this:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-sh"},"widgets/\n  your-folder/\n    common/\n    widget1/\n    widget2/\n")),"\n",a.createElement(t.p,null,"In the common folder, you can export the shared code through general ES6 exports, such as ",a.createElement(t.code,null,"export const sharedFunction = () => {}"),".\nIn the widget1 and widget2 folders, you can import the shared code using dynamic loading, such as ",a.createElement(t.code,null,"import('../../../common/my-module').then()"),"."),"\n",a.createElement(t.p,null,"After compilation, the shared code is placed into the ",a.createElement(t.code,null,"widgets/chunks")," folder."),"\n",a.createElement(t.p,null,"See the ",a.createElement(t.a,{href:"/experience-builder/sample-code/widgets/share-code-chunk/"},"dynamic-loading")," for a complete example."),"\n",a.createElement(t.h2,{id:"shared-entry",className:"group relative s:flex s:flex-nowrap"},"Shared entry",a.createElement(t.a,{href:"#shared-entry","aria-label":"shared entry permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"When you need to share code between widgets using this way, please follow the steps below:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Create a ",a.createElement(t.code,null,"shared-code")," folder under the ",a.createElement(t.code,null,"widgets")," folder. Please note that the folder name must be exactly ",a.createElement(t.code,null,"shared-code"),"."),"\n",a.createElement(t.li,null,"Put your shared code into the ",a.createElement(t.code,null,"shared-code")," folder. All ",a.createElement(t.code,null,".ts")," and ",a.createElement(t.code,null,".tsx")," files in the folder will be compiled as shared entries. The best practice folder structure is:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-sh"},"shared-code/\n  entry1.ts\n  entry2.tsx\n  lib/\n    entry1/\n      module1.ts\n      module2.ts\n    entry2/\n      module1.ts\n      module2.ts\n")),"\n",a.createElement(t.p,null,"In the above folder structure, ",a.createElement(t.code,null,"entry1")," and ",a.createElement(t.code,null,"entry2")," will be created automatically when compiling."),"\n",a.createElement(t.p,null,"To support i18n, create a ",a.createElement(t.code,null,"translations")," folder within the ",a.createElement(t.code,null,"shared-code")," folder, or within each entry folder, for example, ",a.createElement(t.code,null,"shared-code/translations")," or ",a.createElement(t.code,null,"shared-code/lib/entry1/translations"),". The ",a.createElement(t.code,null,"translations")," folder structure is the same as the widget ",a.createElement(t.code,null,"translations")," folder."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"At last, you can import the shared code using the standard ES6 imports, like this:"),"\n"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-typescript"},"import { sampleFunction } from 'widgets/shared-code/entry1'\n")),"\n",a.createElement(t.p,null,"After compilation, the shared entries are placed into the ",a.createElement(t.code,null,"widgets/shared-code")," folder."),"\n",a.createElement(t.p,null,"See the ",a.createElement(t.a,{href:"/experience-builder/sample-code/widgets/share-code-entry/"},"shared-entry")," for a complete example."))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},c=n(69507),s=n(46427);const d=function(e){const{data:{topicNavigation:t}}=e;return a.createElement(c.A,null,a.createElement(s.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function i(e){return a.createElement(d,e,a.createElement(o,e))}}}]);