"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[9638],{69062:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var a=n(28453),o=n(96540);function c(e){const t=Object.assign({p:"p",code:"code",ul:"ul",li:"li",pre:"pre"},(0,a.RP)(),e.components);return o.createElement(o.Fragment,null,o.createElement(t.p,null,"Data action provides a way to process a collection of data records in an extensible way."),"\n",o.createElement(t.p,null,"The data action is defined by the ",o.createElement(t.code,null,"DataAction")," interface, which has two important methods: ",o.createElement(t.code,null,"isSupported")," and ",o.createElement(t.code,null,"onExecute"),"."),"\n",o.createElement(t.ul,null,"\n",o.createElement(t.li,null,o.createElement(t.code,null,"isSupported")," will be invoked to check whether the action can process the data. Non-supported data actions will be hidden in the runtime."),"\n",o.createElement(t.li,null,o.createElement(t.code,null,"onExecute")," will be invoked when a user clicks the data action."),"\n"),"\n",o.createElement(t.p,null,"Both methods receive an array of ",o.createElement(t.code,null,"DataRecordSet")," instance, which contain the data source, the optional data record array, and fields.\nThese two methods receive the ",o.createElement(t.code,null,"DataLevel")," and ",o.createElement(t.code,null,"widgetId")," parameters too. The ",o.createElement(t.code,null,"DataLevel")," is used to indicate whether the ",o.createElement(t.code,null,"DataRecordSet")," contains all records or a subset of the records."),"\n",o.createElement(t.p,null,'The framework provides data actions, such as export to CSV and export to JSON. Widgets can provide data actions as well. For instance, the Map widget provides the "pan to" and "zoom to" data actions. Data actions can be implemented in a widget by declaring the data actions in the ',o.createElement(t.code,null,"manifest.json")," and creating a class that extends the ",o.createElement(t.code,null,"AbstractDataAction"),"."),"\n",o.createElement(t.p,null,"Some data actions may need to have a setting UI to configure the action behavior. To achieve this, you can declare the ",o.createElement(t.code,null,"settingUri")," in manifest.json.\nAn action setting UI component is a React component with some injected props. When the user changes the config, you should call ",o.createElement(t.code,null,"this.props.onSettingChange")," to save the config, which will be available in the ",o.createElement(t.code,null,"onExecute")," method."),"\n",o.createElement(t.pre,null,o.createElement(t.code,{className:"language-json"},'"dataActions": [\n    {\n      "name": "showOnMap",\n      "label": "Show on map",\n      "uri": "data-actions/show-on-map",\n      "settingUri": "data-actions/show-on-map-setting",\n      "icon": "runtime/assets/icons/ds-map-view.svg"\n    }\n]\n')),"\n",o.createElement(t.p,null,"Besides providing data actions, a widget can use data action as well. To use the data actions in a widget, you should declare ",o.createElement(t.code,null,"canConsumeDataAction: true")," in widget ",o.createElement(t.code,null,"manifest.json")," properties, then ",o.createElement(t.code,null,"import {DataActionList} from 'jimu-ui'")," and render the ",o.createElement(t.code,null,"DataActionList")," in the widget UI."))}var l=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?o.createElement(t,e,o.createElement(c,e)):c(e)},i=n(69507),r=n(46427);const s=function(e){const{data:{topicNavigation:t}}=e;return o.createElement(i.A,null,o.createElement(r.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function d(e){return o.createElement(s,e,o.createElement(l,e))}}}]);