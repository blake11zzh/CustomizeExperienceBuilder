"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[3638],{21934:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var a=n(28453),i=n(96540);function c(e){const t=Object.assign({p:"p",code:"code",a:"a"},(0,a.RP)(),e.components);return i.createElement(i.Fragment,null,i.createElement(t.p,null,"The ",i.createElement(t.code,null,"jimu-for-builder")," package is designed to support developing the widget setting page. The setting page is the section of the builder that the experience author adds widget configuration."),"\n",i.createElement(t.p,null,"Included in the package is the ",i.createElement(t.a,{href:"/experience-builder/api-reference/jimu-for-builder/AllWidgetSettingProps/"},i.createElement(t.code,null,"AllWidgetSettingProps"))," type, which is a union of the ",i.createElement(t.a,{href:"/experience-builder/api-reference/jimu-for-builder/WidgetSettingProps/"},i.createElement(t.code,null,"WidgetSettingProps"))," interface and ",i.createElement(t.a,{href:"/experience-builder/api-reference/jimu-for-builder/WidgetSettingInjectedProps/"},i.createElement(t.code,null,"WidgetSettingInjectedProps"))," type."),"\n",i.createElement(t.p,null,"A common use case for this package is importing the ",i.createElement(t.code,null,"AllWidgetSettingProps")," type and then making use of the ",i.createElement(t.code,null,"WidgetSettingProps")," ",i.createElement(t.code,null,"onSettingChange")," callback function. When a setting is changed via the experience author's workflow, this function is called to save the changed value into the widget configuration (e.g. ",i.createElement(t.code,null,"props.id")," and ",i.createElement(t.code,null,"props.useMapWidgetIds"),"). This pattern is usually paired with parts of the ",i.createElement(t.code,null,"jimu-ui")," package. In this example, we commonly use the ",i.createElement(t.a,{href:"/experience-builder/storybook/?path=/docs/components-jimu-ui-advanced-setting-components-mapwidgetselector--has-selected-map"},i.createElement(t.code,null,"MapWidgetSelector")),". The function is called when a Map widget item is selected and the ",i.createElement(t.code,null,"useMapWidgetIds")," array of Map widget IDs is updated with what the ",i.createElement(t.code,null,"onSelect")," function returns."),"\n",i.createElement(t.p,null,"In summary, you will use the ",i.createElement(t.code,null,"jimu-for-builder")," package when constructing a widget's setting page."))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?i.createElement(t,e,i.createElement(c,e)):c(e)},l=n(69507),o=n(46427);const d=function(e){const{data:{topicNavigation:t,searchIndex:n,apiRefMdxNav:a}}=e,c=Object.assign({},t.nav,{children:t.nav.children.concat(a.nav.children)});return i.createElement(l.A,null,i.createElement(o.S,Object.assign({},e,{topicNavigation:c,search:n,wrapInLayout:!1})))};function u(e){return i.createElement(d,e,i.createElement(r,e))}}}]);