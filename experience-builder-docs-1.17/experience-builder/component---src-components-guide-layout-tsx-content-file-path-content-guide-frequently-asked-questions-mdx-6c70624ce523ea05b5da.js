"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[961],{27382:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var a=n(28453),r=n(96540);function l(e){const t=Object.assign({p:"p",a:"a",code:"code",ul:"ul",li:"li",pre:"pre",h6:"h6",span:"span",ol:"ol"},(0,a.RP)(),e.components),{Accordion:n,AccordionItem:l}=t;return n||o("Accordion",!0),l||o("AccordionItem",!0),r.createElement(r.Fragment,null,r.createElement(n,{title:"Using developer edition of ArcGIS Experience Builder with the ArcGIS Maps SDK for JavaScript"},r.createElement(l,{title:"How do I use modules from the ArcGIS Maps SDK for JavaScript in a custom Experience Builder widget?"},r.createElement(t.p,null,"By default, Experience Builder does not load the ArcGIS Maps SDK for JavaScript (JSAPI) when the app loads. There are two options to utilize JSAPI modules. See ",r.createElement(t.a,{href:"/experience-builder/guide/extend-base-widget/#modules-in-the-arcgis-api-for-javascript"},"Modules in the ArcGIS Maps SDK for JavaScript")," for details.")),r.createElement(l,{title:"How do I access an ArcGIS Maps SDK for JavaScript MapView in a widget?"},r.createElement(t.p,null,"Accessing the ",r.createElement(t.code,null,"MapView")," from within a widget is demonstrated on the ",r.createElement(t.a,{href:"/experience-builder/api-reference/jimu-arcgis/JimuMapView/"},r.createElement(t.code,null,"jimu-arcgis/JimuMapView"))," page of the API Reference.")),r.createElement(l,{title:"Can I use widgets from the ArcGIS Maps SDK for JavaScript?"},r.createElement(t.p,null,"Yes, generally you can use ",r.createElement(t.a,{href:"https://developers.arcgis.com/javascript/latest/sample-code/?tagged=widgets"},"widgets from the ArcGIS Maps SDK for JavaScript")," within your custom Experience Builder widgets. See the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/editor/"},"Editor widget sample")," for an example.")),r.createElement(l,{title:"Is using view.ui.add() to add a widget to the map view in the out-of-the-box Map widget recommended?"},r.createElement(t.p,null,"Using ",r.createElement(t.a,{href:"https://developers.arcgis.com/javascript/latest/api-reference/esri-views-ui-DefaultUI.html#add"},r.createElement(t.code,null,"view.ui.add()"))," from a custom Experience Builder widget is not recommended. We plan to provide similar functionality in ",r.createElement(t.code,null,"JimuMapView")," in the future.")),r.createElement(l,{title:"When I add jimu-arcgis into the manifest.json dependency property, what is loaded?"},r.createElement(t.p,null,"When you add ",r.createElement(t.code,null,"jimu-arcgis"),", the ArcGIS Maps SDK for JavaScript gets loaded automatically.")),r.createElement(l,{title:"How do I use interceptors in my custom widget?"},r.createElement(t.p,null,"When importing ",r.createElement(t.code,null,"esri/config")," from the ArcGIS Maps SDK for JavaScript, using ",r.createElement(t.code,null,"esriConfig.request.interceptors.push({})")," does not work. This happens because Experience Builder has added an interceptor that matches all URLs. To use interceptors, add your interceptor to the beginning of the interceptor list like this: ",r.createElement(t.code,null,"esriConfig.request.interceptors.splice(0, 0, {})"),"."))),"\n",r.createElement(n,{title:"Node.js"},r.createElement(l,{title:"Which Node.js version should I use?"},r.createElement(t.p,null,"The current LTS version of Node.js is supported. Check the ",r.createElement(t.a,{href:"https://nodejs.org/en/about/previous-releases"},"LTS releases"),". See more information on the ",r.createElement(t.a,{href:"/experience-builder/guide/release-versions/"},"About release versions")," page.")),r.createElement(l,{title:"Why 'npm ci' should be run everytime after someone changes/upgrades Node.js version?"},r.createElement(t.p,null,"The reason why we need to run 'npm ci' if the node version changes is that some thrid party libs ExB depends on may require a specific Node.js version. When you change or upgrade NodeJS version on your machine, it is recommended to run the command 'npm ci' again under the \"server\" and \"client\" folder of Experience Builder Developer edition, so that it reflects all the new changes from the new version of NodeJS installed."))),"\n",r.createElement(n,{title:"ArcGIS Services"},r.createElement(l,{title:"How do I use feature layer data in a widget?"},r.createElement(t.p,null,"Because Experience Builder is data source based, ",r.createElement(t.code,null,"FeatureLayer")," data can be accessed in a few different ways."),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Examples of instantiating and making use of a ",r.createElement(t.code,null,"FeatureLayer"),", see the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/view-layers-toggle/"},"View Layers Toggle sample"),", the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/add-layers/"},"Add Layers sample")," and the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/clustering/"},"Clustering sample")),"\n",r.createElement(t.li,null,"For examples of making use of a ",r.createElement(t.code,null,"FeatureLayer")," as a ",r.createElement(t.code,null,"DataSource"),", see the Data Sources samples within Widgets ",r.createElement(t.a,{href:"/experience-builder/sample-code/"},"on the Sample Code page")),"\n")),r.createElement(l,{title:"How can I filter a feature layer data?"},r.createElement(t.p,null,"To filter a ",r.createElement(t.code,null,"FeatureLayer"),", there are two basic ways, depending on how the data source is configured:"),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"If the widget loads data, the recommended way is to use the ",r.createElement(t.code,null,"DataSourceComponent")," like:"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-typescript"},"<DataSourceComponent useDataSource={} widgetId={} query={}>\n{ Your render method }\n</DataSourceComponent>\n")),"\n",r.createElement(t.p,null,"You can find an example of using the ",r.createElement(t.code,null,"DataSourceComponent")," in the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/message-subscriber/"},"Message subscriber sample")," and the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/server-side-output/"},"Server-side output data source sample"),"."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"If the widget does not load data, you can use the ",r.createElement(t.code,null,"updateQueryParams()")," function of a ",r.createElement(t.code,null,"Data Source"),". See the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/filter-feature-layer/"},"Filter feature layer")," sample for an example."),"\n"),"\n")),r.createElement(l,{title:"How can I retrieve related features?"},r.createElement(t.p,null,"The ",r.createElement(t.code,null,"queryRelatedFeatures")," method is available for execution against a ",r.createElement(t.code,null,"FeatureLayer"),". Once you obtain the ",r.createElement(t.code,null,"FeatureLayer")," you wish to obtain the related features from, you can implement the query making use of the ",r.createElement(t.code,null,"relationshipId")," like in the ArcGIS Maps SDK for JavaScript ",r.createElement(t.a,{href:"https://developers.arcgis.com/javascript/latest/sample-code/query-related-features/"},"Query Related Features sample"),".")),r.createElement(l,{title:"How can I edit related features?"},r.createElement(t.p,null,'Once you have the related features as explained in the "How to retrieve related features" question, you can use the ',r.createElement(t.code,null,"applyEdits()")," method on a ",r.createElement(t.code,null,"FeatureLayer"),". This is the same method that is used on a ",r.createElement(t.code,null,"FeatureLayer")," within the Editor and Table widgets, for example. A sample of this method's executions is available in the ArcGIS Maps SDK for JavaScript ",r.createElement(t.a,{href:"https://developers.arcgis.com/javascript/latest/sample-code/editing-applyedits/"},"Update FeatureLayer using applyEdits() sample"),"."))),"\n",r.createElement(n,{title:"React"},r.createElement(l,{title:"Which React.js version should I use?"},r.createElement(t.p,null,"Please check the recommened React version in ",r.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/guide/release-versions/"},"About release versions")," page.")),r.createElement(l,{title:"Should I use class or functional style react components?"},r.createElement(t.p,null,"Both styles work well in Experience Builder, so it's up to you - you can use whichever you prefer. It seems like the React community is moving toward functional style components as the future, but class-based style components are easy to start and understand."))),"\n",r.createElement(n,{title:"Custom Widget Development"},r.createElement(l,{title:"How to communicate between widgets?"},r.createElement(t.p,null,"Please review the ",r.createElement(t.a,{href:"/experience-builder/guide/widget-communication/"},"Widget communication")," guide page for details on how to communicate between widgets. Also, see the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/control-the-widget-state/"},"Control the widget state sample")," for insight on how to use the ",r.createElement(t.code,null,"getAppStore")," method and the ",r.createElement(t.code,null,"appActions")," module from the ",r.createElement(t.code,null,"jimu-core")," package.")),r.createElement(l,{title:"What's a widget lifecycle and how do I know when a widget is opened or closed?"},r.createElement(t.p,null,"An Experience Builder widget is a React component, so we donâ€™t handle the widget instance object. Instead, we use state props to manage widget lifecycle. The state is saved in the app store and is mapped into widget props. A widget has three states defined by enum ",r.createElement(t.a,{href:"/experience-builder/api-reference/jimu-core/WidgetState/"},"WidgetState"),": Opened, Active, Closed. When a widget is added into a page, it is opened by default; when a widget is added into the widget controller widget, the end user can open and close it. For performance reasons, when an end-user clicks a widget, we donâ€™t make the widget's state Active. If a widget needs the Active state, it should declare needActiveState in manifest property, then its state will be changed to Active when the user clicks the widget."),r.createElement(t.p,null,"Developers who are familiar with the developer edition of ArcGIS Web AppBuilder may expect to see callback functions like ",r.createElement(t.code,null,"onOpen"),", ",r.createElement(t.code,null,"onClose"),", etc. Because the Experience Builder widget is a React component and the widget status is saved in the application store and is mapped to widget props, you should check ",r.createElement(t.code,null,"props.status")," instead.")),r.createElement(l,{title:"Is a widget destroyed when it is closed?"},r.createElement(t.p,null,"When a widget is closed, the only thing that the framework does is to change the widget state to Closed. As a result, in React, instead of handling the instance,  we hook it to the react component lifecycle, such as ",r.createElement(t.code,null,"componentDidUpdate()")," for class-based components or ",r.createElement(t.code,null,"useEffect()")," for functional components.")),r.createElement(l,{title:"Can I use React-redux in my widget? How?"},r.createElement(t.p,null,"Yes, you may use React-redux. You can access it via ",r.createElement(t.code,null,"import {ReactRedux} from 'jimu-core'"),".")),r.createElement(l,{title:"Can I create a no-UI widget?"},r.createElement(t.p,null,"There are a few approaches to creating widgets that have no user interface. These include:"),r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Create the ",r.createElement(t.code,null,"widget.tsx")," but return ",r.createElement(t.code,null,"null")," in the widget render."),"\n",r.createElement(t.li,null,"Create a widget without a ",r.createElement(t.code,null,"widget.tsx"),", providing functions through the: message action, data action, or extension."),"\n")),r.createElement(l,{title:"Can I do something when the app is loaded?"},r.createElement(t.p,null,"When the app is loaded, it invokes the extension point ",r.createElement(t.code,null,"AppConfigProcessor"),". So, the widget can provide an extension for this extension and logic should be placed within the extension. Please see ",r.createElement(t.a,{href:"/experience-builder/guide/extension-points/"},"Extension points"),".")),r.createElement(l,{title:"Is there a way to add custom tools into the map widget?"},r.createElement(t.p,null,"There is no way to add custom tools. We recommend that you create a custom widget that includes a map along with your custom tools.")),r.createElement(l,{title:"How do I unit test my custom widgets?"},r.createElement(t.p,null,"Please see the ",r.createElement(t.a,{href:"/experience-builder/guide/unit-testing/"},"Unit Testing")," page for instructions on how to do unit testing.")),r.createElement(l,{title:"Why does VS Code show errors in my custom widget?"},r.createElement(t.p,null,"If your widget is in a custom web extension repo, you may see errors reported by your code editor, like missing type declarations for Jimu modules. To fix this, add the folder of the web extension repo to the ",r.createElement(t.code,null,"include")," array within the ",r.createElement(t.code,null,"tsconfig.json")," file. See ",r.createElement(t.a,{href:"/experience-builder/guide/getting-started-widget/"},"Getting Started")," for more information."))),"\n",r.createElement(n,{title:"Deployment"},r.createElement(l,{title:"Can I deploy an Experience Builder application onto my specific web server (Apache, IIS, Tomcat, etc)?"},r.createElement(t.p,null,"The Experience Builder deployable export is simply a JavaScript/HTML/CSS app so it can be deployed into any web server. See the ",r.createElement(t.a,{href:"/experience-builder/guide/deployment-topics/"},"Deployment")," page for more help on deploying.")),r.createElement(l,{title:"How should I set up my web-based repo to develop widgets, themes, and apps as a team?"},r.createElement(t.p,null,"Described below are two approaches. One is for developing custom widgets and custom themes only; the other is for the combination of custom widgets, custom themes, and app configurations."),r.createElement(t.h6,{id:"custom-widgets-and-themes-only",className:"group relative s:flex s:flex-nowrap"},"Custom widgets and themes only",r.createElement(t.a,{href:"#custom-widgets-and-themes-only","aria-label":"custom widgets and themes only permalink",className:"anchor-link"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"The key is to have a ",r.createElement(t.code,null,"manifest.json")," file at the root of your repository. The following properties in your repo's ",r.createElement(t.code,null,"manifest.json")," are necessary for your repo to be integrated in your development environment. Comments pertaining to necessary properties and values are included below."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-json"},'{\n  "name": "exb-custom-widgets-themes-repo", // Required property\n  "type": "exb-web-extension-repo", // Required property/value for the repo to be compiled by webpack within client\n  "description": "This is a sample custom widgets and themes repo for the developer edition of ArcGIS Experience Builder.", // Required property\n  "copyright": "", // Required property\n  "license": "http://www.apache.org/licenses/LICENSE-2.0" // Required property\n}\n')),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Within your repo, any custom widgets must live within a ",r.createElement(t.code,null,"widgets")," child directory. Similarly, any custom themes must live within a ",r.createElement(t.code,null,"themes")," child directory."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,"Clone the repo into the ",r.createElement(t.code,null,"client")," directory, then webpack will compile the widgets automatically when executing ",r.createElement(t.code,null,"npm start"),"."),"\n"),"\n"),r.createElement(t.h6,{id:"custom-widgets-custom-themes-and-app-configurations",className:"group relative s:flex s:flex-nowrap"},"Custom widgets, custom themes, and app configurations",r.createElement(t.a,{href:"#custom-widgets-custom-themes-and-app-configurations","aria-label":"custom widgets custom themes and app configurations permalink",className:"anchor-link"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),r.createElement(t.p,null,"This approach requires two code repositories. The first repo, as described above, is for the custom widgets and themes. The second repo is for containing the app configuration directories at the root level. To use the second repo, do the following:"),r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"If an ",r.createElement(t.code,null,"./server/apps/"),' directory exists, you must rename it to something other than "apps", or remove it.'),"\n",r.createElement(t.li,null,"Your apps repo must be cloned into your installation's ",r.createElement(t.code,null,"./server/public"),' directory with the name "apps". Either: ',r.createElement(t.code,null,"git clone git@web-based-repo-manager:username/repo-name.git apps")," or ",r.createElement(t.code,null,"git clone https://web-based-repo-manager/username/repo-name.git apps")," should do."),"\n",r.createElement(t.li,null,"The app names within the ",r.createElement(t.code,null,"apps")," directory can be a string or an integer, so long as the app directory's name matches the value of the ",r.createElement(t.code,null,"id")," property within ",r.createElement(t.code,null,"info.json"),"."),"\n",r.createElement(t.li,null,"The app configurations will compile when executing ",r.createElement(t.code,null,"npm start"),"."),"\n"))),"\n",r.createElement(n,{title:"Theming"},r.createElement(l,{title:"Can I use components from Calcite?"},r.createElement(t.p,null,r.createElement(t.a,{href:"/experience-builder/api-reference/jimu-ui/"},"Jimu UI")," is the primary component library for Experience Builder, and you may want to use that first because it will keep your custom widgets and themes consistent with the rest of the Experience Builder theme. If you do have a requirement to use the Calcite Design System, you can do that - see the ",r.createElement(t.a,{href:"/experience-builder/sample-code/widgets/use-calcite-components/"},"Calcite sample widget"),". Please note that you should import the Calcite components from ",r.createElement(t.code,null,"calcite-components")," instead of ",r.createElement(t.code,null,"@esri/calcite-components"),"."))),"\n",r.createElement(n,{title:"Other"},r.createElement(l,{title:"Will ArcGIS Experience Builder reach functional parity with ArcGIS Web AppBuilder?"},r.createElement(t.p,null,"Yes. ArcGIS Experience Builder will reach most of the functional parity of ArcGIS Web AppBuilder through incremental releases. For more information, see the functionality matrix for Web AppBuilder and Experience Builder.")),r.createElement(l,{title:"Is it possible to access or modify applications belonging to other users?"},r.createElement(t.p,null,"An administrator account has the privilege to both access and update all applications across the organization."))))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?r.createElement(t,e,r.createElement(l,e)):l(e)};function o(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var c=n(69507),s=n(46427);const d=function(e){const{data:{topicNavigation:t}}=e;return r.createElement(c.A,null,r.createElement(s.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function u(e){return r.createElement(d,e,r.createElement(i,e))}}}]);