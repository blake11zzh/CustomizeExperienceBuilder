"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[9762],{6115:function(e,t,a){a.r(t),a.d(t,{default:function(){return u}});var n=a(28453),s=a(96540);function l(e){const t=Object.assign({p:"p",ol:"ol",li:"li",h3:"h3",a:"a",span:"span",code:"code",pre:"pre",ul:"ul"},(0,n.RP)(),e.components);return s.createElement(s.Fragment,null,s.createElement(t.p,null,"A widget in ArcGIS Experience Builder is a functional unit: a widget focuses on a single pice of functionality. In many cases, however, we need multiple widgets to work together to complete a task. To do this, we need ways to allow widgets to communication with each other at the framework level. This can be accomplished in Experience Builder in the following ways:"),"\n",s.createElement(t.ol,null,"\n",s.createElement(t.li,null,"Configurable:","\n",s.createElement(t.ol,null,"\n",s.createElement(t.li,null,"Use the same data source/data view between widgets"),"\n",s.createElement(t.li,null,"Use the same map widget between widgets"),"\n",s.createElement(t.li,null,"Use a widget's output data source"),"\n",s.createElement(t.li,null,"Use message/actions"),"\n",s.createElement(t.li,null,"Use data actions"),"\n"),"\n"),"\n",s.createElement(t.li,null,"Programming:","\n",s.createElement(t.ol,null,"\n",s.createElement(t.li,null,"Use widget state to share state between widgets"),"\n",s.createElement(t.li,null,"Provide your own redux store/action/reducer to share state between widgets"),"\n"),"\n"),"\n"),"\n",s.createElement(t.p,null,"Configurable means the user can config the way of communication between widgets in the builder. Programming means the communication between widgets happens in the code."),"\n",s.createElement(t.h3,{id:"11-use-the-same-data-sourcedata-view-between-widgets",className:"group relative s:flex s:flex-nowrap"},"1.1 Use the same data source/data view between widgets",s.createElement(t.a,{href:"#11-use-the-same-data-sourcedata-view-between-widgets","aria-label":"11 use the same data sourcedata view between widgets permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"If multiple widgets use the same data source or data view, they can get the same selection, the same data records, and the same data source status. Widgets can use these data to sync status. For example: multiple widgets can read the same data record but display a different view; one widget can let the user do the selection and another widget can listen to the selection to display the selected data detail."),"\n",s.createElement(t.p,null,"If multiple widgets use the different data views of the same data source, they still can get the same selection if the selection satisfies the data views filter criteria."),"\n",s.createElement(t.p,null,"See ",s.createElement(t.a,{href:"/experience-builder/guide/use-data-source-in-widget/"},"Use data source in widget")),"\n",s.createElement(t.h3,{id:"12-use-the-same-map-widget-between-widgets",className:"group relative s:flex s:flex-nowrap"},"1.2 Use the same map widget between widgets",s.createElement(t.a,{href:"#12-use-the-same-map-widget-between-widgets","aria-label":"12 use the same map widget between widgets permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"If multiple widgets use the same map widget, they can get the same ",s.createElement(t.code,null,"JimuMapView")," instance, which is a wrapper of the ArcGIS Maps SDK for JavaScript ",s.createElement(t.code,null,"MapView")," instance.\nAfter getting the ",s.createElement(t.code,null,"JimuMapView")," instance, widgets can use ",s.createElement(t.code,null,"addJimuLayerViewCreatedListener()")," and ",s.createElement(t.code,null,"addJimuLayerViewRemovedListener")," to listen to the layer view created and removed event to read the changes made by other widgets.\nFor more details, see ",s.createElement(t.a,{href:"/experience-builder/guide/use-map-widget-in-widget/"},"Use map widget in widget")),"\n",s.createElement(t.h3,{id:"13-use-a-widgets-output-data-source",className:"group relative s:flex s:flex-nowrap"},"1.3 Use a widget's output data source",s.createElement(t.a,{href:"#13-use-a-widgets-output-data-source","aria-label":"13 use a widgets output data source permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"See ",s.createElement(t.a,{href:"/experience-builder/guide/core-concepts/data-source/#widget-output-data-source"},"Widget output data source")),"\n",s.createElement(t.h3,{id:"14-use-messageactions",className:"group relative s:flex s:flex-nowrap"},"1.4 Use message/actions",s.createElement(t.a,{href:"#14-use-messageactions","aria-label":"14 use messageactions permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"See ",s.createElement(t.a,{href:"/experience-builder/guide/core-concepts/message-action/"},"Message action")," for details."),"\n",s.createElement(t.h3,{id:"15-use-data-actions",className:"group relative s:flex s:flex-nowrap"},"1.5 Use data actions",s.createElement(t.a,{href:"#15-use-data-actions","aria-label":"15 use data actions permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"See ",s.createElement(t.a,{href:"/experience-builder/guide/core-concepts/data-action/"},"Data action")," for details."),"\n",s.createElement(t.h3,{id:"21-use-widget-state-to-share-state-between-widgets",className:"group relative s:flex s:flex-nowrap"},"2.1 Use widget state to share state between widgets",s.createElement(t.a,{href:"#21-use-widget-state-to-share-state-between-widgets","aria-label":"21 use widget state to share state between widgets permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"A widget, as a React component, can have an internal state. However, other widgets cannot access this state. Jimu uses Redux as its state manager; it saves a lot of info in the Redux store. One piece of the info is called ",s.createElement(t.code,null,"widgetsState"),"; you can find the type definition at ",s.createElement(t.code,null,"jimu-core/lib/types/state"),". The info stored in ",s.createElement(t.code,null,"widgetsState")," is accessible by all of the other widgets.\nTo save some info in the ",s.createElement(t.code,null,"widgetsState"),", please refer to this code snippet:"),"\n",s.createElement(t.pre,null,s.createElement(t.code,{className:"language-tsx"},"import {appActions} from 'jimu-core';\n\n/*\n* Call this when you need to save state.\n*\n* widgetId: your widget id\n* propKey: can be a string with this format \"a.b.c\"\n* value: the info you want to store\n*/\nthis.props.dispatch(appActions.widgetStatePropChange(widgetId, propKey, value))\n\n")),"\n",s.createElement(t.p,null,"For example, if you call ",s.createElement(t.code,null,'this.props.dispatch(appActions.widgetStatePropChange("w1", "a.b1", "value1"))')," and ",s.createElement(t.code,null,'this.props.dispatch(appActions.widgetStatePropChange("w1", "a.b2", "value2"))'),", you'll get this store state in the Redux store:"),"\n",s.createElement(t.pre,null,s.createElement(t.code,{className:"language-tsx"},"widgetsState: {\n    w1: {\n        a: {\n            b1: 'value1',\n            b2: 'value2'\n        }\n    }\n}\n")),"\n",s.createElement(t.p,null,"To access the data stored by ",s.createElement(t.code,null,"w1")," in widget 2, you can select the value from store by using ",s.createElement(t.code,null,"mapExtraStateProps")," or using ",s.createElement(t.code,null,"useSelect")," hooks."),"\n",s.createElement(t.p,null,s.createElement(t.code,null,"widgetsState")," can only store plain (e.g. does not have functions) JavaScript objects. To store complex (e.g. created from a function constructor or has function members) JavaScript objects, you can use ",s.createElement(t.code,null,"this.props.dispatch(appActions.widgetMutableStatePropChange(widgetId, propKey, value))")," to store the value, and use ",s.createElement(t.code,null,"MutableStoreManager.getInstance().getStateValue()")," to access it."),"\n",s.createElement(t.h3,{id:"22-provide-your-own-redux-storeactionreducer-to-share-state-between-widgets",className:"group relative s:flex s:flex-nowrap"},"2.2 Provide your own redux store/action/reducer to share state between widgets",s.createElement(t.a,{href:"#22-provide-your-own-redux-storeactionreducer-to-share-state-between-widgets","aria-label":"22 provide your own redux storeactionreducer to share state between widgets permalink",className:"anchor-link"},s.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",s.createElement(t.p,null,"This provides a more flexible way to customize your state management. You can find this is almost the same as the Redux approach. As we know, Redux has only one store and one root reducer, which is used by jimu. To let the widget developer use the normal Redux approach to manage state, jimu defines a ",s.createElement(t.code,null,"ReduxStore")," extension point; widgets that need to use Redux can provide an extension for this extension point."),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"Create an extension class to implement the ",s.createElement(t.code,null,"ReduxStoreExtension")," interface; let's call it ",s.createElement(t.code,null,"my-store.ts"),"."),"\n"),"\n",s.createElement(t.pre,null,s.createElement(t.code,{className:"language-tsx"},"import {extensionSpec} from 'jimu-core';\n\nexport default class MyReduxStoreExtension implements extensionSpec.ReduxStoreExtension{\n    getActions(){\n        // return your redux actions.\n    }\n\n    getInitLocalState(){\n        // return your redux init local state.\n    }\n\n    getReducer(){\n        // return your redux reducer.\n    }\n\n    getStoreKey(){\n        // return your redux local key.\n    }\n}\n")),"\n",s.createElement(t.ul,null,"\n",s.createElement(t.li,null,"Declare the extension in widget manifest.json"),"\n"),"\n",s.createElement(t.pre,null,s.createElement(t.code,{className:"language-json"},'"extensions": [\n    {\n      "name": "My Store",\n      "point": "REDUX_STORE",\n      "uri": "my-store"\n    }\n]\n')))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.RP)(),e.components);return t?s.createElement(t,e,s.createElement(l,e)):l(e)},r=a(69507),c=a(46427);const o=function(e){const{data:{topicNavigation:t}}=e;return s.createElement(r.A,null,s.createElement(c.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function u(e){return s.createElement(o,e,s.createElement(i,e))}}}]);