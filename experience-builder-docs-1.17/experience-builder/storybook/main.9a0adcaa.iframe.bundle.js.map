{"version":3,"file":"main.9a0adcaa.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;;;;;;;ACucA;;;;;;;;;;;;;ACvaA;;;;;AAwGA;AAIA;;;;;AAKA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;ACxLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkBA;;;;;;;;;;;;AC8DA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;AAMA;;;;;AAmPA;;AA6CA;AACA;AACA;AACA;AACA;;;AAIA;AAlRA;;AAqMA;;;;;;;;;;;;AAvLA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;AA2CA;;;;;AAKA;;;AAGA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;;AAMA;;;AAGA;AACA;;;;;;AAnEA;AAAA;AA2EA;AACA;AACA;;;;;AAKA;;;;AAlFA;AAAA;;;AA0FA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAQA;;;;;;;;;ACrUA;;AAGA;;;;;;;;ACPA;;AAGA;;;;;;;;ACHA;;AAGA;;;;;;;;;ACHA;;AAGA;;;;;;;;;ACHA;;AAGA;;;;;;;;ACNA;;AAGA;;;;;;;;ACHA;;AAGA;;;;;;;;;ACAA;;AAGA;;;;;;;;ACJA;;AAGA;;;;;;ACXA;;AAGA;;;;;;;;;;;;;AC3BA;;;;AX6WA;AAmBA;;;;;;;;;;AWhYA;;;;;AX6WA;AAmCA;;;;;;;;;;;AYtEA;;;;;;;;;ACrSA;;;;;;;AAOA;;;;;;;;;;;;;;;;;AArBA;AAyCA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AAGA;AC/DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AA8DA;AACA;AACA;;AAGA;ACjGA;ACYA;AC6IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA8DA;AACA;;AAEA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;;AAEA;;;AAUA;;AAEA;;AAEA;;AAEA;;;AAGA;;;;;;AAMA;;;AAGA;;;;;AAKA;;;;;;;;;;;;;AC1RA;;;;;;AAOA;AAIA;AACA;;;AAGA;;AAEA;;;AAIA;AAIA;AAEA;;;;;AAQA;;;;;AAKA;;;;AAIA;;;;;AAKA;AACA;;;;;AAKA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;;;;;;;AAWA;;;AAGA;;;AAIA;AAIA;;;AAGA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;AAIA;;;;;AAKA;AACA;AACA;;;;;AAOA;AACA;AACA;;;;;AAOA;AACA;;;AAIA;AAWA;AACA;AACA;AACA;AClKA;AACA;AACA;AACA;;AAEA;AACA;;;;;;AAOA;AAIA;AACA;;;AAGA;;;AAGA;;;;;AAKA;;;;;AAKA;;;AAGA;;;;;;;AAOA;;;;;AAKA;;;AAIA;AA6BA;AAEA;;;;;;;AAsBA;;;AAGA;;;AAGA;;;;;;;;;AASA;;;;;AAKA;;;;;;AAMA;;;;;;;;AA9EA;;;;;;;;;;AAgGA;;;;;;AAMA;AACA;;;;;;;;;;;;;;;;AAiBA;;;;;;ACnKA;AAEA;;AAMA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;;;;;AAYA;AACA;;AAEA;;AAGA;;;AAGA;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;;;;AAIA;;;;;AAKA;;AAEA;;AAGA;;;AAGA;AACA;;AAGA;;;AAIA;;;;ACzFA;;;AAIA;AAGA;AACA;AAEA;;;;;;;AAiBA;AACA;;;;;;;;AAQA;;AAEA;;;;;;;AAOA;;AAEA;;;;;;AAMA;AC1DA;AACA;AAEA;;;;;;;;AAkCA;AACA;;AAEA;AACA;;;;;AAKA;;;;;;;;;;;AAWA;;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;;;AAGA;AACA;;AAEA;;;;;;;AAOA;;AAEA;;;;AAIA;;;;AC7EA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;AASA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;;;;AC2BA;;;AAGA;;;;;;;AA9EA;;;AASA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;;;;;AAOA;;;;;;;AAOA;AACA;;;;;AAKA;AACA;;;AAGA;;AAKA;;;;AAMA;;AAEA;AACA;;;;;;;;AA6BA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;AAIA;;AAEA;;;;;;;;;;AC5HA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;AAIA;;;;;;AAMA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;AAMA;;;;;;AAMA;;;;;;;AAOA;AACA;;;;;;AAMA;;;ACtIA;;;AAGA;;AAGA;;AAGA;AAIA;AAMA;;;;;;;ACrBA;;;;;;;;;AASA;;;;AAIA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;;AAQA;;;;;AAKA;;;;;;;AAOA;;;AAGA;;;;;;;AAOA;;;;AAIA;ACzEA;;AAmBA;AAaA;;AClCA;;AAEA;ACAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;AAYA;;;;;;AAMA;;;;;;;;AAQA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;AAUA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;;;;;;;AASA;;AAEA;;AC5GA;;;;;;AAMA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;AAKA;;;;;;;AAOA;AACA;;;;;;AAMA;;;;;;ACzDA;;;;;;;;;;;;;;;;;;;;AAoBA;ACKA;;AAEA;;;AAGA;;;AAOA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;;;AAGA;;;;AAOA;AACA;;;;;AAKA;AACA;AACA;;;AAGA;AAjFA;AACA;;;AAGA;;;AAMA;AACA;AACA;;;AAIA;;AAmEA;;AC5EA;;AAMA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AArBA;;;;AA2BA;;;;;;AAMA;;;AAGA;;;;AAIA;AACA;;AAEA;;;AC9CA;AACA;;;;AAIA;;AAEA;;;;AAIA;AACA;;AAEA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;;;AAGA;;;;;;;;;;;;;;;;AAgBA;;;;;;AAMA;AACA;;;;;;;;AAQA;;;;AAIA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;AC/DA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;ACzHA;;;;;;;;;;;;;;AAeA;;;;;;AAMA;AACA;;AAEA;;;;AAIA;AACA;;AC7BA;;;;;;AAaA;;;;;;;;;AASA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;AAGA;;AClDA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;;;;;;;;;;;;;;AAeA;;;;;;AC7DA;;;AAGA;;;AAGA;;;ACTA;;AAEA;;;;;AAKA;;;AAGA;;;;;;;;;;;;AAYA;;;ACsLA;AACA;AACA;;;;AAIA;AACA;;;;;;;;;AAUA;;AAgCA;AACA;AACA;AACA;AAEA;AAnBA;AACA;AACA;;;AAIA;AC9OA;AACA;;AAEA;AACA;;;;;;;;;;;;;AAaA;;;;AAKA;ACwBA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC4HA;;;;;;AAgBA;;;;;AAOA;;AC5FA;;;AAGA;;;;;;;AASA;ACgWA;AAOA;;;;;;;;;;;ACvbA;;;;;;;;AApBA;AACA;;AAEA;;;;;;;AAQA;;;;;;;AC5BA;;;;;;;;;;;;;;;;;;;AA+BA;;;AClBA;AACA;AACA;;;AAGA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;AASA;;;;;;;;;;;;;;;AAuUA;;;;;;;AC5aA;AAAA;;;AAcA;;;;;;;;;AAbA;;;;;;AAiCA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;AAKA;;AAQA;AACA;AApIA;AAAA;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;;;;;;;;;ACpHA;;;AAIA;;;;;;;AAnDA;;;;;;;;;;;;;;AAcA;;;;AAIA;;;;;;;;;;;;;;;AAeA;ACiCA;AAOA;;ACnCA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;AAIA;AACA;;;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQA;AACA;;;;AAIA;AACA;AACA;;;;;;;;;AASA;;;AAGA;;;;;AAKA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;;;AAOA;;;;;;;;;AC3IA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AAQA;;ACCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkEA;;;;;;;;ACLA;;;;;AClFA;AAcA;;;;;;;;;;;;;;;;AACA;AAkBA;;;;;;;;;;;;;;;AAlBA;AAkCA;;;;;;;;;;;AAYA;AAyEA;AACA;AACA;AACA;;;AAGA;AACA;;AAUA;AACA;AACA;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAkNA;;;;ACvaA;;;;AAIA;;;;;;;;;;;AAWA;;;AAGA;;;;;;;;;;;AAWA;;AAEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;;;AAMA;;;;;;;AAOA;AACA;;;;AAIA;;;;;;;;;;;;;;;AAeA;AACA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA","sources":["webpack://arcgis-experience-builder-design-system/../jimu-core/lib/permission-banner-list.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/oauth-error-page.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/app-root-component.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/data-actions/data-statistics.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/data-actions/related-data/related-source.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/data-actions/related-data/feature-info.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/data-actions/related-data/related-records.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/app-dialog/styles/styles.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/skew.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/grow.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/shrink.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/float.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/sink.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/rotate.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/spin.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/forward.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/backward.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/hover/effect/opacity.ts","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/app-dialog/utils/resize-utils.tsx","webpack://arcgis-experience-builder-design-system/../jimu-core/lib/app-dialog/components/fixed.tsx","webpack://arcgis-experience-builder-design-system/../jimu-theme/lib/classic/utils/pointer.ts","webpack://arcgis-experience-builder-design-system/../jimu-theme/lib/classic/utils/index.ts","webpack://arcgis-experience-builder-design-system/../jimu-theme/lib/base/assets/fonts/index.tsx","webpack://arcgis-experience-builder-design-system/../jimu-theme/lib/manager/global/font-loader/index.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/utils/style-utils.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/slider.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/button.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/nav.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/nav-button-group.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/text-input.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/text-area.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/numeric-input.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/advanced-select.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/label.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/card.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/form-group.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/form-text.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/form-feedback.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/input-group.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/multi-select.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/list-group.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/list-group-item.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/progress.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/table.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/loading.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/toast.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/resizable.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/mobile-panel.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/user-profile.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/tag-input.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/image-with-param/index.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/link/_link-tip.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/loading.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/text-input.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/text-area.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/advanced-select.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/scrollable/scrollable.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/widget-placeholder.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/data-action-list.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/multi-range-slider.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/navigation.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/multi-select.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/user-profile.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/tag.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/viewport-intersection-observer.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/add-item-dialog.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/cookie-banner/cookie-settings-window.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/components/cookie-banner/cookie-banner.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/lib/styles/components/modal.ts"],"sourcesContent":["/** @jsx jsx */\nimport { useCallback, useState } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { BrowserSizeMode } from './types/common';\nimport { getAppStore } from './store';\nimport { getModuleSync } from './module-loader';\nimport defaultI18nMessages from './translations/default';\nimport { SessionManager } from './session-manager';\nimport { getStandardPortalUrl } from './utils/portal-url-utils';\nimport downFilledSvg from 'jimu-icons/svg/filled/directional/down.svg';\nimport rightFilledSvg from 'jimu-icons/svg/filled/directional/right.svg';\nimport warningSvg from 'jimu-icons/svg/outlined/suggested/warning.svg';\nimport { getServerRootUrl, isServerUrl } from './utils/service-url-utils';\nfunction getStyle(theme) {\n    return css `\r\n    .permission-banner-list {\r\n      position: fixed;\r\n      bottom: 2px;\r\n      right: 2px;\r\n      alignItems: stretch;\r\n      flexDirection: column;\r\n      z-index: 999;\r\n      fontSize: 13px;\r\n      .banner-list-panel {\r\n        color: var(--black, #FFF);\r\n        margin-left: 27px;\r\n      }\r\n      .warning-icon {\r\n        position: absolute;\r\n        left: 10px;\r\n        width: 24px;\r\n        height: 24px;\r\n        color: var(--sys-color-warning-dark) !important;\r\n      }\r\n      .banner-list-item {\r\n      }\r\n      .banner-list-item-content {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 1px;\r\n        position: relative;\r\n        .item-info {\r\n          flex-grow: 2;\r\n          .fold-btn {\r\n            position: absolute;\r\n            left: -22px;\r\n            .directional {\r\n              width: 8px;\r\n              height: 8px;\r\n              color: var(--ref-palette-neutral-1000) !important;\r\n            }\r\n          }\r\n        }\r\n        .item-link {\r\n          display: block;\r\n          color: var(--sys-color-primary-dark);\r\n          max-width: 160px;\r\n          white-space: nowrap;\r\n          text-overflow: ellipsis;\r\n          overflow: hidden;\r\n        }\r\n        .item-link.sub-item-link {\r\n          max-width: 315px;\r\n        }\r\n        .item-operation {\r\n          display: flex;\r\n          align-items: center;\r\n        }\r\n\r\n        .button-separator {\r\n          height: 18px;\r\n          border-right-width: 1px;\r\n          border-right-style: solid;\r\n          border-right-color: var(--ref-palette-neutral-700)\r\n        }\r\n      }\r\n      .user-name {\r\n        max-width: 315px;\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: var(--ref-palette-neutral-900);\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n      }\r\n      .jimu-btn {\r\n        color: var(--ref-palette-neutral-1000)\r\n      }\r\n      .jimu-btn: hover {\r\n        background-color: transparent;\r\n        color: var(--sys-color-primary-light);\r\n      }\r\n      .ignore-all-btn {\r\n        border: 1px solid var(--ref-palette-neutral-500);\r\n        width: 100%;\r\n        height: 26px;\r\n        margin-top: 10px;\r\n      }\r\n      .left-part {\r\n        display: block !important\r\n      }\r\n    }`;\n}\nfunction getBannerList() {\n    const bannerList = {};\n    const sessionManager = SessionManager.getInstance();\n    const noPermissionResourceInfoList = SessionManager.getInstance().getNoPermissionResourceInfoList();\n    Object.entries(noPermissionResourceInfoList).forEach(entry => {\n        const resourceUrl = entry[0];\n        const noPermissionResourceInfo = entry[1];\n        if (!noPermissionResourceInfo.ignored) {\n            const isServiceUrl = !!sessionManager.getServerKeyFromUrl(resourceUrl);\n            let rootUrl;\n            if (isServiceUrl) {\n                if (noPermissionResourceInfo.owningSystemUrl) {\n                    rootUrl = getStandardPortalUrl(noPermissionResourceInfo.owningSystemUrl);\n                }\n                else {\n                    rootUrl = getServerRootUrl(resourceUrl);\n                }\n            }\n            else {\n                rootUrl = getStandardPortalUrl(resourceUrl);\n            }\n            if (!bannerList[rootUrl]) {\n                bannerList[rootUrl] = [];\n            }\n            if (rootUrl !== resourceUrl) {\n                bannerList[rootUrl].push(resourceUrl);\n            }\n        }\n    });\n    return bannerList;\n}\nexport function PermissionBannerList(props) {\n    const [unFoldFlags, setIsUnFold] = useState({});\n    const handleIgnoreAll = useCallback(() => {\n        SessionManager.getInstance().ignoreFromNoPermissionResourceInfoList();\n    }, []);\n    const handleFoldBtnClick = useCallback((isUnFold, url) => {\n        const newUnFoldFlags = Object.assign({}, unFoldFlags);\n        newUnFoldFlags[url] = isUnFold;\n        setIsUnFold(newUnFoldFlags);\n    }, [unFoldFlags]);\n    const { Alert, Button, Icon } = getModuleSync('jimu-ui');\n    const { theme, intl } = props;\n    const bannerList = getBannerList();\n    const isSmallSize = getAppStore().getState().browserSizeMode === BrowserSizeMode.Small;\n    const width = isSmallSize ? 'auto' : '400px';\n    const left = isSmallSize ? '2px' : 'auto';\n    return (jsx(\"div\", { css: getStyle(theme) },\n        jsx(Alert, { form: 'basic', type: 'info', open: Object.keys(bannerList).length > 0, className: 'permission-banner-list p-4', closable: false, withIcon: false, style: {\n                left,\n                width,\n                borderColor: theme.ref.palette.neutral[500],\n                backgroundColor: theme.ref.palette.neutral[400]\n            } },\n            jsx(\"div\", { className: 'banner-list-panel' },\n                jsx(Icon, { className: 'warning-icon', icon: warningSvg }),\n                jsx(FormattedMessage, { id: 'signInBannerListWarning', defaultMessage: defaultI18nMessages.signInBannerListWarning }),\n                jsx(\"div\", { className: 'mt-4' }, Object.entries(bannerList).map((entry, index) => {\n                    const rootUrl = entry[0];\n                    const subUrls = entry[1];\n                    return (jsx(\"div\", { key: index },\n                        jsx(BannerListItem, { url: rootUrl, resourceUrl: subUrls[0], theme: theme, intl: intl, key: index, hasSubItems: subUrls.length > 0, isUnFold: unFoldFlags[rootUrl], foldBtnClick: handleFoldBtnClick }),\n                        unFoldFlags[rootUrl] && subUrls.map((subUrl, index) => {\n                            return jsx(BannerListSubItem, { url: subUrl, theme: theme, intl: intl, key: index });\n                        })));\n                })),\n                Button && jsx(Button, { className: 'ignore-all-btn', type: 'tertiary', size: 'sm', onClick: handleIgnoreAll }, props.intl.formatMessage({ id: 'signInBannerIgnoreAll', defaultMessage: defaultI18nMessages.signInBannerIgnoreAll }))))));\n}\nfunction BannerListItem(props) {\n    var _a, _b;\n    const { url, resourceUrl, theme, intl, hasSubItems, isUnFold, foldBtnClick } = props;\n    const handleLogin = useCallback(() => {\n        const sessionManager = SessionManager.getInstance();\n        let signInUrl;\n        if (isServerUrl(resourceUrl) && getServerRootUrl(resourceUrl) === url) {\n            // non-federated service, only use service url to sign-in\n            signInUrl = resourceUrl;\n        }\n        else {\n            signInUrl = url;\n        }\n        sessionManager.signInByResourceUrl(signInUrl, null, true);\n    }, [url, resourceUrl]);\n    const handleIgnore = useCallback(() => {\n        SessionManager.getInstance().ignoreFromNoPermissionResourceInfoList(url);\n    }, [url]);\n    const handleFold = useCallback(() => {\n        foldBtnClick(!isUnFold, url);\n    }, [url, isUnFold, foldBtnClick]);\n    const { Button, Icon } = getModuleSync('jimu-ui');\n    const userName = ((_a = SessionManager.getInstance().getSessionByUrl(url)) === null || _a === void 0 ? void 0 : _a.username) || ((_b = SessionManager.getInstance().getSessionByUrl(`${url}/rest/services`)) === null || _b === void 0 ? void 0 : _b.username);\n    const currentStr = intl.formatMessage({ id: 'currentData', defaultMessage: 'current' });\n    const signInOrSwitchStr = userName ? intl.formatMessage({ id: 'switch', defaultMessage: 'Switch' }) : intl.formatMessage({ id: 'signIn', defaultMessage: 'Sign in' });\n    const ignoreStr = intl.formatMessage({ id: 'signInBannerIgnore', defaultMessage: defaultI18nMessages.signInBannerIgnore });\n    return (jsx(\"div\", { className: 'banner-list-item' },\n        jsx(\"div\", { className: 'banner-list-item-content', css: getStyle(theme) },\n            jsx(\"div\", { className: 'item-info' },\n                jsx(\"div\", null,\n                    hasSubItems && Button && jsx(Button, { className: 'fold-btn', size: 'sm', type: 'tertiary', icon: true, onClick: handleFold }, isUnFold ? jsx(Icon, { className: 'directional', icon: downFilledSvg }) : jsx(Icon, { className: 'directional', icon: rightFilledSvg })),\n                    jsx(\"a\", { className: 'item-link', href: url, target: '_blank', rel: \"noopener noreferrer\", title: url }, url))),\n            jsx(\"div\", { className: 'item-operation' },\n                Button && jsx(Button, { size: 'sm', type: 'tertiary', title: signInOrSwitchStr, onClick: handleLogin },\n                    jsx(\"div\", { className: 'text-truncate' }, signInOrSwitchStr)),\n                jsx(\"div\", { className: 'button-separator', style: {} }),\n                Button && jsx(Button, { size: 'sm', type: 'tertiary', title: ignoreStr, onClick: handleIgnore },\n                    jsx(\"div\", { className: 'text-truncate' }, ignoreStr)))),\n        userName && jsx(\"div\", { className: 'user-name' }, `${currentStr}:${userName}`)));\n}\nfunction BannerListSubItem(props) {\n    const { url, theme } = props;\n    return (jsx(\"div\", { className: 'banner-list-item-content', css: getStyle(theme) },\n        jsx(\"a\", { className: 'item-link sub-item-link', href: url, target: '_blank', rel: \"noopener noreferrer\", title: url }, url)));\n}\n","/** @jsx jsx */\nimport { useCallback } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport { getAppStore } from './store';\nimport { getModuleSync } from './module-loader';\nimport defaultI18nMessages from './translations/default';\nimport { SessionManager } from './session-manager';\nfunction getStyle(theme) {\n    return css `\r\n    .oauth-error-page {\r\n      width: 100vw;\r\n      height: 100vh;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 20px;\r\n      .sign-in-btn {\r\n        padding: 0.25rem 1rem;\r\n        font-size: 14px;\r\n        user-select: none;\r\n        line-height: 1.5;\r\n        border-radius: 2px;\r\n        color: #fff;\r\n        background: #007f94;\r\n        border-width: 1px;\r\n        border-style: solid;\r\n        border-color: #007f94;\r\n        margin-top: 20px;\r\n        outline: none;\r\n        min-width: 241px;\r\n        height: 49px;\r\n        margin: 79px 35px;\r\n        cursor: pointer;\r\n      }\r\n    }`;\n}\nexport function OAuthErrorPage(props) {\n    const { oauthErrorCode, fromUrl, intl, theme } = props;\n    const onSignInBtnClick = useCallback(() => {\n        var _a, _b;\n        const sessionManager = SessionManager.getInstance();\n        sessionManager.signIn({ fromUrl: fromUrl || ((_a = window.location) === null || _a === void 0 ? void 0 : _a.href), popup: false, desUrl: (_b = getAppStore().getState()) === null || _b === void 0 ? void 0 : _b.portalUrl });\n    }, [fromUrl]);\n    const { Button } = getModuleSync('jimu-ui');\n    const color = window.jimuConfig.isBuilder || window.jimuConfig.isSite ? 'white' : 'black';\n    const backgroundColor = window.jimuConfig.isBuilder || window.jimuConfig.isSite ? '#232323' : '#f0f0f0';\n    let errorMessage = '';\n    switch (oauthErrorCode) {\n        case 'OAUTH_0020':\n            errorMessage = intl.formatMessage({ id: 'publicUserError', defaultMessage: defaultI18nMessages.publicUserError });\n            break;\n        case 'OAUTH_0033':\n            errorMessage = intl.formatMessage({ id: 'essentialAppsLicenseErrorForBuilder', defaultMessage: defaultI18nMessages.essentialAppsLicenseErrorForBuilder });\n            break;\n        default:\n            errorMessage = intl.formatMessage({ id: 'signInErrorDefault', defaultMessage: defaultI18nMessages.signInErrorDefault });\n    }\n    return (jsx(\"div\", { css: getStyle(theme) },\n        jsx(\"div\", { id: \"oauthError\", className: 'oauth-error-page', style: { color, backgroundColor } },\n            jsx(\"div\", { id: \"foo\", dangerouslySetInnerHTML: { __html: errorMessage } }),\n            jsx(\"div\", { style: { display: 'flex' } }, Button && jsx(Button, { className: 'sign-in-btn', size: 'lg', onClick: onSignInBtnClick }, intl.formatMessage({ id: 'signIn', defaultMessage: 'Sign in' }))))));\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport * as React from 'react';\nimport { rem } from 'polished';\nimport * as Immutable from 'seamless-immutable';\nimport { connect } from 'react-redux';\nimport { request } from '@esri/arcgis-rest-request';\nimport ConfigManager from './config-manager';\nimport { PageType, DialogMode, ContainerType } from './types/app-config';\nimport * as actions from './app-actions';\nimport { getModuleSync } from './module-loader';\nimport { getAppIdPageIdFromUrl, getDialogIdFromIdOrLabel, getSectionNavInfoFromQueryObject } from './utils/url-utils';\nimport { getPortalSelfInfoUrl } from './utils/portal-url-utils';\nimport { getJimuThemeModule, getParentWindow, isDeepEqual, showApp } from './utils/utils';\nimport AppKeyboardComponent from './app-keyboard-component';\nimport * as semver from 'semver';\nimport WidgetManager from './widget-manager';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport DataSourceManager from './data-source-manager';\nimport defaultI18nMessages from './translations/default';\nimport { AppMode } from './types/common';\nimport SessionManager from './session-manager';\nimport { getAppStore } from './store';\nimport { SetDocumentTitle } from './set-document-title';\nimport { SetDocumentFavicon } from './set-document-favicon';\nimport { PermissionBannerList } from './permission-banner-list';\nimport { OAuthErrorPage } from './oauth-error-page';\nimport { AddMetaTag } from './add-meta-tag';\nimport { css, jsx } from '@emotion/react';\nimport { TrackingManager } from './tracking-manager';\nimport { LayoutItemType } from './types/layout';\nimport { focusElementInKeyboardMode } from './accessibility';\nimport { SetCanonical } from './set-canonical';\nimport { setConnectionInfoToAppConfig } from './utils/app-config-utils';\nconst currentVersion = require('../version.json');\nconst codeVersion = currentVersion.exbVersion;\nclass _AppRootComponent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.getKeyboardComponent = () => {\n            if (window.jimuConfig.isBuilder) {\n                const BuilderKeyboardComponent = getModuleSync('jimu-for-builder').BuilderKeyboardComponent;\n                return jsx(BuilderKeyboardComponent, null);\n            }\n            else if (window.jimuConfig.isInBuilder) {\n                return jsx(AppKeyboardComponent, null);\n            }\n            else {\n                return null;\n            }\n        };\n        this.renderCookieBanner = (themeVariables) => {\n            if (window.jimuConfig.isBuilder || window.jimuConfig.isSite) {\n                return null;\n            }\n            const { CookieBanner } = this.getJimuUI();\n            if (!CookieBanner) {\n                return null;\n            }\n            return jsx(CookieBanner, { theme: themeVariables });\n        };\n        this.renderVersionRemind = () => {\n            const { isVersionAlertOpened } = this.state;\n            const { appConfigVersion } = this.props;\n            const { Alert } = this.getJimuUI();\n            const appState = getAppStore().getState();\n            const appInfo = appState === null || appState === void 0 ? void 0 : appState.appInfo;\n            const isHigherVersionApp = semver.lt(codeVersion, appConfigVersion);\n            if (window.jimuConfig.isBuilder || !isHigherVersionApp || !isVersionAlertOpened) {\n                return null;\n            }\n            const isTemplate = (appInfo === null || appInfo === void 0 ? void 0 : appInfo.type) === 'Web Experience Template';\n            return (jsx(Alert, { className: 'w-100 position-absolute version-remind', open: isVersionAlertOpened, onClose: this.onVersionRemindClose, closable: true, style: {\n                    zIndex: 2\n                } }, !isTemplate\n                ? this.props.intl.formatMessage({ id: 'experienceVersionRemind', defaultMessage: defaultI18nMessages.experienceVersionRemind })\n                : this.props.intl.formatMessage({ id: 'templateVersionRemind', defaultMessage: defaultI18nMessages.templateVersionRemind })));\n        };\n        this.renderGuideRenderer = () => {\n            var _a;\n            const GuideRenderer = (_a = getModuleSync('jimu-ui/basic/guide')) === null || _a === void 0 ? void 0 : _a.GuideRenderer;\n            if (!GuideRenderer) {\n                return null;\n            }\n            return jsx(GuideRenderer, null);\n        };\n        this.onVersionRemindClose = () => {\n            this.setState({\n                isVersionAlertOpened: false\n            });\n        };\n        this.onGoToAnotherExperienceBtnClick = () => {\n            location.href = '/';\n        };\n        this.onSwitchAccountBtnClick = () => {\n            SessionManager.getInstance().switchAccount();\n        };\n        this.onSignInBtnClick = () => {\n            var _a, _b;\n            const sessionManager = SessionManager.getInstance();\n            sessionManager.signIn({ fromUrl: (_a = window.location) === null || _a === void 0 ? void 0 : _a.href, popup: false, desUrl: (_b = getAppStore().getState()) === null || _b === void 0 ? void 0 : _b.portalUrl, forceLogin: true });\n        };\n        this.getPortalVersion = (portalUrl) => {\n            return request(getPortalSelfInfoUrl(portalUrl), {\n                httpMethod: 'GET'\n            }).then(portalSelf => Number(portalSelf === null || portalSelf === void 0 ? void 0 : portalSelf.currentVersion)).catch(err => {\n                console.warn(err);\n                return null;\n            });\n        };\n        this.setClientId = (portalUrl) => __awaiter(this, void 0, void 0, function* () {\n            const clientId = this.clientIdInput.current.value;\n            const sessionManager = SessionManager.getInstance();\n            const portalVersion = yield this.getPortalVersion(portalUrl);\n            setConnectionInfoToAppConfig(portalUrl, clientId, portalVersion);\n            getAppStore().dispatch(actions.removeFromRegisterClientIdList(portalUrl));\n            sessionManager.onClientIdDialogFinished(portalUrl, clientId);\n        });\n        this.closeSetClientIdAlert = (portalUrl) => {\n            const builderAppSync = getModuleSync('jimu-for-builder').builderAppSync;\n            builderAppSync.publishSetClientIdAlertIsCancelled(portalUrl);\n            getAppStore().dispatch(actions.removeFromRegisterClientIdList(portalUrl));\n            SessionManager.getInstance().onClientIdDialogFinished(portalUrl, null, new Error('setting clientId is cancelled.'));\n        };\n        this.onDismiss = () => {\n            var _a;\n            this.props.dispatch(actions.userLocaleChanged(false));\n            if (window.jimuConfig.isBuilder && ((_a = window._appWindow) === null || _a === void 0 ? void 0 : _a._appStore)) {\n                window._appWindow._appStore.dispatch({\n                    type: 'SET_HAS_NEW_VERSION',\n                    hasNew: false\n                });\n                window._appWindow._appStore.dispatch({\n                    type: 'USER_LOCALE_CHANGED',\n                    isChanged: false\n                });\n            }\n        };\n        this.reload = () => {\n            window.location.reload();\n        };\n        const state = {};\n        const pageId = this.getPageId();\n        if (pageId) {\n            state.pageStatus = Immutable({\n                [pageId]: true\n            });\n        }\n        else {\n            state.pageStatus = Immutable({});\n        }\n        state.preloadWidgetsLoaded = false;\n        state.isVersionAlertOpened = true;\n        this.state = state;\n        this.onDismiss = this.onDismiss.bind(this);\n        this.reload = this.reload.bind(this);\n        this.setClientId = this.setClientId.bind(this);\n        this.clientIdInput = React.createRef();\n        // Builder may access the DataSourceManager before the app gets loaded, so we'll init it earlier\n        DataSourceManager.getInstance();\n    }\n    getLayoutEntryPath() {\n        let layoutEntryPath;\n        if (window.jimuConfig.isInBuilder) {\n            layoutEntryPath = 'jimu-layouts/layout-builder';\n        }\n        else {\n            layoutEntryPath = 'jimu-layouts/layout-runtime';\n        }\n        return layoutEntryPath;\n    }\n    getPageRenderClass() {\n        if (getModuleSync(this.getLayoutEntryPath())) {\n            return (getModuleSync(this.getLayoutEntryPath())).PageRenderer;\n        }\n        else {\n            console.error('Please init jimu-layouts.');\n            return null;\n        }\n    }\n    getJimuUI() {\n        if (getModuleSync('jimu-ui')) {\n            return getModuleSync('jimu-ui');\n        }\n        else {\n            console.error('Please init jimu-ui.');\n            return null;\n        }\n    }\n    componentDidMount() {\n        ConfigManager.getInstance({ intl: this.props.intl }).loadAppConfig().then(appConfig => {\n            this.props.dispatch(actions.appConfigLoaded(appConfig));\n            if (window.jimuConfig.isInBuilder) {\n                // publish app state change to builder ASAP\n                getModuleSync('jimu-for-builder').appBuilderSync.publishAppStateChangeToBuilder();\n            }\n            return appConfig;\n        }).then(appConfig => {\n            const sectionNavInfos = getSectionNavInfoFromQueryObject(this.props.queryObject, appConfig);\n            Object.keys(sectionNavInfos).forEach(sectionId => {\n                this.props.dispatch(actions.sectionNavInfoChanged(sectionId, sectionNavInfos[sectionId]));\n            });\n            this.props.dispatch(actions.currentPageChanged(this.getPageId()));\n            this.addA11yKeyboardEvent(appConfig, this.props.queryObject);\n            return appConfig;\n        }).then(appConfig => {\n            this.loadPreloadWidgets(appConfig).then(() => {\n                showApp();\n                if (window.jimuConfig.isInBuilder) {\n                    if (window.parent.isExpressBuilder) {\n                        this.selectMapWidget(appConfig);\n                    }\n                    DataSourceManager.getInstance().createAllDataSourcesByTime();\n                }\n            }).catch(err => {\n                console.error('Initializing theme manager failed.', err);\n                this.props.dispatch(actions.loadAppConfigFailed({\n                    message: (err === null || err === void 0 ? void 0 : err.message) || '',\n                    type: (err === null || err === void 0 ? void 0 : err.name) === 'ArcGISAuthError' ? err.name : 'CommonError',\n                    code: err === null || err === void 0 ? void 0 : err.code\n                }));\n            });\n            return appConfig;\n        }).then(appConfig => {\n            var _a, _b;\n            const isDraft = (((_a = this.props.queryObject) === null || _a === void 0 ? void 0 : _a.draft) === 'true') || (((_b = this.props.queryObject) === null || _b === void 0 ? void 0 : _b.draft) === '1');\n            if (!window.jimuConfig.isInBuilder && appConfig.analytics && appConfig.analytics.enable && !isDraft) {\n                TrackingManager.getInstance().initialize(appConfig === null || appConfig === void 0 ? void 0 : appConfig.analytics).then((trackingManager) => {\n                    // The first time pv event needs to log manually\n                    trackingManager.logPageView();\n                });\n            }\n            return appConfig;\n        }).catch(err => {\n            console.error('Load app config error.', err);\n            this.props.dispatch(actions.loadAppConfigFailed({\n                message: (err === null || err === void 0 ? void 0 : err.message) || '',\n                type: (err === null || err === void 0 ? void 0 : err.name) === 'ArcGISAuthError' ? err.name : 'CommonError',\n                code: err === null || err === void 0 ? void 0 : err.code\n            }));\n        });\n    }\n    componentWillUnmount() {\n        const link = document.getElementById('jimu-base-style');\n        link && link.remove();\n    }\n    selectMapWidget(appConfig) {\n        const pageId = this.getPageId();\n        const pageJson = appConfig.pages[pageId];\n        if (!pageJson) {\n            return;\n        }\n        const layoutEntry = getModuleSync('jimu-layouts/layout-runtime');\n        const mapWidgets = layoutEntry.searchUtils.getMapWidgets(appConfig, appConfig.mainSizeMode, ContainerType.Page, pageId);\n        if (mapWidgets.length === 0 || mapWidgets[0].maps.length === 0) {\n            return;\n        }\n        const mapWidgetId = mapWidgets[0].maps[0];\n        if (!appConfig.widgets[mapWidgetId]) {\n            return;\n        }\n        const layoutInfos = layoutEntry.searchUtils.getLayoutInfosHoldContent(appConfig, LayoutItemType.Widget, mapWidgetId, appConfig.mainSizeMode);\n        if (layoutInfos.length === 0) {\n            return;\n        }\n        this.props.dispatch(actions.selectionChanged(layoutInfos[0]));\n    }\n    loadPreloadWidgets(appConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const alwaysPreloadWidgets = [];\n            const preloadWidgets = ((_a = appConfig.preloadWidgets) === null || _a === void 0 ? void 0 : _a.asMutable()) || [];\n            Object.keys(appConfig.widgets).forEach(wId => {\n                const widgetJson = appConfig.widgets[wId];\n                if (alwaysPreloadWidgets.includes(widgetJson.uri) && !preloadWidgets.includes(widgetJson.uri)) {\n                    preloadWidgets.push(widgetJson.uri);\n                }\n            });\n            if (preloadWidgets.length === 0) {\n                this.setState({ preloadWidgetsLoaded: true });\n                return Promise.resolve();\n            }\n            return Promise.all(preloadWidgets.map((widgetUri) => __awaiter(this, void 0, void 0, function* () { return yield WidgetManager.getInstance().loadWidgetClassByUri(widgetUri); }))).then(() => {\n                this.setState({ preloadWidgetsLoaded: true });\n            });\n        });\n    }\n    componentDidUpdate() {\n        const pageId = this.getPageId();\n        let pages = this.state.pageStatus;\n        if (pageId && !pages[pageId]) {\n            Object.keys(pages).forEach(pId => {\n                pages = pages.set(pId, false);\n            });\n            this.setState({\n                pageStatus: pages.set(pageId, true)\n            });\n        }\n    }\n    addA11yKeyboardEvent(appConfig, queryObject) {\n        // skip all focusable DOMs inside widgets, and focus on right sidePanel directly in design mode.\n        if (window.jimuConfig.isInBuilder) {\n            const appNode = document.body;\n            appNode.setAttribute('tabindex', '0');\n            appNode.style.outlineOffset = '-2px';\n            appNode.addEventListener('keydown', (e) => {\n                if ((e.target.tagName === 'BODY' || e.target.classList.contains('app-dialog-modal')) &&\n                    e.key === 'Tab' && !e.shiftKey &&\n                    getAppStore().getState().appRuntimeInfo.appMode === AppMode.Design) {\n                    e.preventDefault();\n                    const firstNode = window.parent.document.querySelector('div.builder-dynamic-setting .jimu-btn');\n                    focusElementInKeyboardMode(firstNode, true);\n                }\n            });\n        }\n        else {\n            const parent = getParentWindow();\n            // add tabindex=0 to body to pass focus to window for embedded case.\n            if (!window.jimuConfig.isBuilder && // preview app\n                window.location !== (parent === null || parent === void 0 ? void 0 : parent.location) && // embedded\n                (queryObject === null || queryObject === void 0 ? void 0 : queryObject.disable_window_focus) === 'true' &&\n                appConfig.dialogs) {\n                const appNode = document.body;\n                appNode.setAttribute('tabindex', '0');\n                appNode.addEventListener('focus', (e) => {\n                    if (e.target.tagName === 'BODY') {\n                        appNode.setAttribute('tabindex', '-1'); // The tabindex is useless now, because user must close all windows to skip exb app embedded.\n                        const dlgModals = document.querySelectorAll('.app-dialog-modal');\n                        if (dlgModals.length) {\n                            e.preventDefault();\n                            focusElementInKeyboardMode(dlgModals[dlgModals.length - 1], true);\n                        }\n                    }\n                });\n            }\n        }\n    }\n    getPageId() {\n        if (!this.props.pages) {\n            return null;\n        }\n        const urlInfo = getAppIdPageIdFromUrl();\n        // urlInfo.pageId does not exist in pages when it's a new un-saved page and clicking on the Reload Frame item from contextmenu.\n        if (urlInfo.pageId && this.props.pages[urlInfo.pageId]) {\n            return urlInfo.pageId;\n        }\n        const defaultPageId = Object.keys(this.props.pages).find(pId => this.props.pages[pId].isDefault);\n        return defaultPageId;\n    }\n    getDialogId() {\n        if (!this.props.dialogJson) {\n            return null;\n        }\n        if (!window.jimuConfig.isInBuilder && this.props.dialogJson.mode === DialogMode.Anchored) {\n            return null;\n        }\n        // the dialog is opened by link\n        if (window.jimuConfig.isInBuilder && this.props.dialogJson.mode === DialogMode.Anchored && this.props.currentDialogId && this.props.currentDialogId !== getDialogIdFromIdOrLabel(this.props.queryObject.dlg, getAppStore().getState().appConfig)) {\n            return null;\n        }\n        return this.props.dialogJson.id;\n    }\n    render() {\n        var _a;\n        const { pageStatus } = this.state;\n        const PageRenderClass = this.getPageRenderClass();\n        const jimuUI = this.getJimuUI();\n        if (this.props.loadAppConfigError) {\n            showApp();\n            const msg = (_a = this.props.loadAppConfigError) === null || _a === void 0 ? void 0 : _a.message;\n            if (msg === 'notPublishError') {\n                const msgHTML = this.props.intl.formatMessage({ id: 'notPublishError', defaultMessage: defaultI18nMessages.notPublishError });\n                return jsx(\"div\", { id: 'not-publish-error', style: {\n                        width: '100vw',\n                        height: '100vh',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center'\n                    }, dangerouslySetInnerHTML: { __html: msgHTML } });\n            }\n            // Invalid app item errors are cached by 'init app info' in the init.tsx\n            // All auth errors for loading the app-config are caught later by 'hasPrivilege'\n        }\n        if (this.props.queryObject.oauth_error_code) {\n            showApp();\n            return this.renderOAuthError();\n        }\n        if (!this.props.hasPrivilege) {\n            showApp();\n            return this.renderPrivilegeError();\n        }\n        if (!this.props.appConfigLoaded || !PageRenderClass || !this.state.preloadWidgetsLoaded || isDeepEqual(this.props.themeVariables, {})) {\n            return null;\n        }\n        const pageId = this.getPageId();\n        if (!pageId) {\n            console.error('No page to render.');\n            return null;\n        }\n        if (!this.props.pages[pageId]) {\n            console.error('Invalid page id.', pageId);\n            return null;\n        }\n        if (this.props.pages[pageId].type === PageType.Folder) {\n            console.error('This is a folder.');\n            return null;\n        }\n        if (this.props.pages[pageId].linkUrl) {\n            window.location.assign(this.props.pages[pageId].linkUrl);\n            return null;\n        }\n        const Loading = jimuUI.Loading;\n        return (jsx(React.Fragment, null,\n            jsx(SetDocumentTitle, null),\n            jsx(SetDocumentFavicon, { themeVariables: this.props.themeVariables }),\n            jsx(AddMetaTag, null),\n            jsx(SetCanonical, null),\n            this.renderReloadAlert(this.props.themeVariables),\n            this.renderSetClientIdAlert(this.props.themeVariables),\n            this.renderVersionRemind(),\n            this.renderPermissionBannerList(this.props.themeVariables),\n            this.renderGuideRenderer(),\n            jsx(PageRenderClass, { pageStatus: pageStatus, dialogId: this.getDialogId() }),\n            jsx(\"div\", { id: 'jimu-overlays-container' }),\n            this.getKeyboardComponent(),\n            Loading && this.props.isBusy && jsx(Loading, { type: this.props.loadingType }),\n            this.renderCookieBanner(this.props.themeVariables)));\n    }\n    renderOAuthError() {\n        var _a, _b;\n        return (jsx(OAuthErrorPage, { oauthErrorCode: (_a = this.props.queryObject) === null || _a === void 0 ? void 0 : _a.oauth_error_code, fromUrl: (_b = this.props.queryObject) === null || _b === void 0 ? void 0 : _b.fromUrl, theme: this.props.themeVariables, intl: this.props.intl }));\n    }\n    renderPrivilegeError() {\n        const { Button } = this.getJimuUI();\n        const color = window.jimuConfig.isBuilder || window.jimuConfig.isSite ? 'white' : 'black';\n        const backgroundColor = window.jimuConfig.isBuilder || window.jimuConfig.isSite ? '#232323' : '#f0f0f0';\n        // temporarily modified z-index of app to cover the js-api OAuth confirm popup, no problems because all subsequent pages are redirected.\n        document.getElementById('app').style.zIndex = '800';\n        const isInvalidToken = this.props.privilegeError === 'INVALID_TOKEN';\n        const errorMessage = isInvalidToken ? this.props.intl.formatMessage({ id: 'signInErrorInvalidToken', defaultMessage: defaultI18nMessages.signInErrorInvalidToken }) : this.props.privilegeError;\n        const buttonStyle = {\n            padding: '0.25rem 1rem',\n            fontSize: '14px',\n            userSelect: 'none',\n            lineHeight: 1.5,\n            borderRadius: '2px',\n            color: '#fff',\n            background: '#007f94',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: '#007f94',\n            marginTop: '20px',\n            outline: 'none',\n            minWidth: '241px',\n            height: '49px',\n            margin: '79px 35px',\n            cursor: 'pointer'\n        };\n        const session = SessionManager.getInstance().getMainSession();\n        return (jsx(\"div\", { id: \"privilegeError\", style: { width: '100vw', height: '100vh', color: color, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', fontSize: '20px', backgroundColor } },\n            jsx(\"div\", { id: \"foo\", dangerouslySetInnerHTML: { __html: errorMessage } }),\n            jsx(\"div\", { style: { display: 'flex' } },\n                Button && !isInvalidToken && session && jsx(Button, { size: 'lg', style: buttonStyle, onClick: this.onGoToAnotherExperienceBtnClick }, this.props.intl.formatMessage({ id: 'goToAnotherExperienceBtn', defaultMessage: defaultI18nMessages.goToAnotherExperienceBtn })),\n                !window.jimuConfig.isInPortal && !isInvalidToken && session && Button && jsx(Button, { size: 'lg', style: buttonStyle, onClick: this.onSwitchAccountBtnClick }, this.props.intl.formatMessage({ id: 'switchAccountBtn', defaultMessage: defaultI18nMessages.switchAccountBtn })),\n                Button && isInvalidToken && jsx(Button, { size: 'lg', style: buttonStyle, onClick: this.onSignInBtnClick }, this.props.intl.formatMessage({ id: 'signIn', defaultMessage: 'Sign in' })))));\n    }\n    renderSetClientIdAlert(theme) {\n        if (!window.jimuConfig.isBuilder) {\n            return null;\n        }\n        const portalInfo = this.props.portalsNeedToRegisterClientId && this.props.portalsNeedToRegisterClientId[0];\n        const portalUrl = portalInfo === null || portalInfo === void 0 ? void 0 : portalInfo.portalUrl;\n        if (!portalUrl) {\n            return null;\n        }\n        const { AlertPopup, TextInput } = this.getJimuUI();\n        const setClientIdMessage1 = this.props.intl.formatMessage({ id: 'setClientIdMessage1', defaultMessage: defaultI18nMessages.setClientIdMessage1 }, { register: this.props.intl.formatMessage({ id: 'registerText', defaultMessage: defaultI18nMessages.registerText }) });\n        return (jsx(AlertPopup, { isOpen: true, title: '', onClickOk: () => { this.setClientId(portalUrl); }, onClickClose: () => { this.closeSetClientIdAlert(portalUrl); } },\n            jsx(\"div\", { style: {\n                    color: theme.ref.palette.black,\n                    fontSize: rem(16)\n                } },\n                jsx(\"p\", null, setClientIdMessage1),\n                jsx(\"p\", null,\n                    jsx(FormattedMessage, { id: 'arcgisEnterpriseText', defaultMessage: defaultI18nMessages.arcgisEnterpriseText })),\n                jsx(\"p\", { style: { color: theme.ref.palette.neutral[900] } }, portalUrl),\n                jsx(\"p\", null,\n                    jsx(FormattedMessage, { id: 'setClientIdMessage2', defaultMessage: defaultI18nMessages.setClientIdMessage2 })),\n                jsx(TextInput, { css: css `.input-wrapper {background-color: var(--ref-palette-neutral-400)}`, ref: this.clientIdInput }))));\n    }\n    renderReloadAlert(theme) {\n        if (window.jimuConfig.isInBuilder || (window.jimuConfig.isSite && this.getPageId() === 'landing')) {\n            return null;\n        }\n        if (!this.props.userLocaleChanged) {\n            return null;\n        }\n        const { Alert, Button } = this.getJimuUI();\n        return (jsx(Alert, { form: 'basic', type: 'info', open: this.props.userLocaleChanged, onClose: this.onDismiss, className: 'pl-4 pr-4', closable: true, css: css `\r\n          position: absolute;\r\n          z-index: 999;\r\n          width: 100% !important;\r\n          padding-top: 11px;\r\n          padding-bottom: 11px;\r\n          font-size: 1rem;\r\n        ` },\n            jsx(FormattedMessage, { id: 'userLocaleChangeMsg', defaultMessage: defaultI18nMessages.userLocaleChangeMsg }),\n            jsx(Button, { size: 'sm', type: 'primary', className: 'ml-4', onClick: this.reload, style: { minWidth: rem(78), height: rem(26), marginTop: rem(-2) } },\n                jsx(FormattedMessage, { id: 'doUpdate', defaultMessage: defaultI18nMessages.doUpdate }))));\n    }\n    renderPermissionBannerList(theme) {\n        if (window.jimuConfig.isBuilder || window.jimuConfig.isInBuilder || !theme) {\n            return null;\n        }\n        return (jsx(PermissionBannerList, { noPermissionResourceChangedFlag: this.props.noPermissionResourceChangedFlag, theme: theme, intl: this.props.intl }));\n    }\n}\nconst mapStateToProps = (state) => {\n    var _a;\n    if (!state.appConfig) {\n        return {\n            appConfigLoaded: false,\n            customTheme: null,\n            pages: null,\n            appPath: state.appPath,\n            queryObject: state.queryObject,\n            isRTL: state.appContext.isRTL,\n            loadingType: null,\n            isBusy: state.appRuntimeInfo.isBusy,\n            dialogJson: null,\n            currentDialogId: null,\n            userLocaleChanged: false,\n            hasPrivilege: state.hasPrivilege,\n            privilegeError: state.privilegeError,\n            portalsNeedToRegisterClientId: state.portalsNeedToRegisterClientId,\n            noPermissionResourceChangedFlag: state.noPermissionResourceChangedFlag,\n            loadAppConfigError: state.loadAppConfigError,\n            appConfigVersion: null\n        };\n    }\n    return {\n        appConfigLoaded: true,\n        customTheme: state.appConfig.customTheme,\n        pages: state.appConfig.pages,\n        appPath: state.appPath,\n        queryObject: state.queryObject,\n        isRTL: state.appContext.isRTL,\n        isBusy: state.appRuntimeInfo.isBusy,\n        loadingType: state.appRuntimeInfo.loadingType,\n        dialogJson: state.appConfig.dialogs ? state.appConfig.dialogs[getDialogIdFromIdOrLabel(state.queryObject.dlg, state.appConfig)] : null,\n        currentDialogId: state.appRuntimeInfo.currentDialogId,\n        userLocaleChanged: state.userLocaleChanged,\n        hasPrivilege: state.hasPrivilege,\n        privilegeError: state.privilegeError,\n        portalsNeedToRegisterClientId: state.portalsNeedToRegisterClientId,\n        noPermissionResourceChangedFlag: state.noPermissionResourceChangedFlag,\n        loadAppConfigError: null,\n        appConfigVersion: (_a = state.appConfig) === null || _a === void 0 ? void 0 : _a.exbVersion\n    };\n};\nconst AppRootComponent = (props) => {\n    var _a, _b;\n    const theme = (_b = (_a = getJimuThemeModule()) === null || _a === void 0 ? void 0 : _a.useTheme) === null || _b === void 0 ? void 0 : _b.call(_a, false);\n    return jsx(_AppRootComponent, Object.assign({}, props, { themeVariables: theme }));\n};\nexport default injectIntl(connect(mapStateToProps)(AppRootComponent));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport icon from 'jimu-icons/svg/outlined/editor/sum.svg';\nimport { rem } from 'polished';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport Immutable from 'seamless-immutable';\nimport { AbstractDataAction, DataLevel } from '../base-data-action';\nimport { DataSourceStatus, DataSourceTypes } from '../data-sources';\nimport { loadModule } from '../module-loader';\nimport defaultMessages from '../translations/default';\nimport { JimuFieldType, LoadingType } from '../types/common';\nimport { getFieldStatistics, getStatisticalFields, queryFieldStatistics, statTypes } from './data-statistics-util';\nimport wrongOutlined from 'jimu-icons/svg/outlined/suggested/wrong.svg';\nimport { useTranslation } from '../hooks';\nexport default class DataStatistics extends AbstractDataAction {\n    constructor(props) {\n        super(props);\n        this.dataStatisticsPopperRef = {};\n        this.isWatchingDataSetsChange = true;\n        this.icon = icon;\n    }\n    loadModules() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { FloatingPanel, Label, Loading, Icon } = yield import('jimu-ui');\n            this._modules = {\n                FloatingPanel,\n                Label,\n                Loading,\n                Icon\n            };\n        });\n    }\n    isSupported(dataSets, dataLevel) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isSupported = dataSets.length === 1 && isSupportStatistics(dataSets[0], dataLevel);\n            if (isSupported && !this._modules) {\n                yield this.loadModules();\n            }\n            return isSupported;\n        });\n    }\n    onExecute(dataSets, dataLevel, widgetId, actionConfig) {\n        if (!this._version) {\n            this._version = 0;\n        }\n        const props = Object.assign({ version: this._version++, iconRef: document.querySelector('.active-data-action-item') || {\n                getBoundingClientRect: () => ({\n                    width: 0,\n                    height: 0,\n                    left: document.body.clientWidth / 2,\n                    top: document.body.clientHeight / 2 - DEFAULT_SIZE.height / 2\n                }),\n                isVirtualElement: true\n            }, dataSet: dataSets[0], dataLevel }, this._modules);\n        this.dataStatisticsPopperRef[widgetId] = React.createRef();\n        return Promise.resolve(jsx(DataStatisticsPopper, Object.assign({ ref: this.dataStatisticsPopperRef[widgetId] }, props)));\n    }\n    onDataSetsChange(dataSets, widgetId) {\n        var _a, _b, _c;\n        const dataStatisticsPopperInstance = (_a = this.dataStatisticsPopperRef[widgetId]) === null || _a === void 0 ? void 0 : _a.current;\n        if (dataSets.length === 1 && dataStatisticsPopperInstance) {\n            (_c = (_b = this.dataStatisticsPopperRef[widgetId].current).updateDataSet) === null || _c === void 0 ? void 0 : _c.call(_b, dataSets[0]);\n        }\n    }\n}\nconst MIN_SIZE = { width: 335, height: 300 };\nconst DEFAULT_SIZE = { width: 350, height: 320 };\nconst popperStyle = css `\r\n  .component-field-selector {\r\n    .ds-name {\r\n      padding: 0 !important;\r\n      margin-bottom: 8px;\r\n      .option-label {\r\n        display: none;\r\n      }\r\n      .mt-2 {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n`;\nconst DataStatisticsPopper = React.forwardRef((props, ref) => {\n    const { FloatingPanel, Label, Loading, Icon, version, iconRef, dataSet: propDataSet, dataLevel } = props;\n    const [dataSet, setDataSet] = React.useState(propDataSet);\n    const updateDataSet = React.useCallback((newDataSet) => {\n        const oldRecordIds = dataSet.records.map(r => r.getId()).join(',');\n        const newRecordIds = newDataSet.records.map(r => r.getId()).join(',');\n        if (oldRecordIds !== newRecordIds) {\n            setDataSet(newDataSet);\n        }\n    }, [dataSet.records]);\n    React.useImperativeHandle(ref, () => {\n        return { updateDataSet, dataLevel };\n    }, [dataLevel, updateDataSet]);\n    const translate = useTranslation(defaultMessages);\n    const fieldSelectorRef = React.useRef(null);\n    const [moduleLoaded, setModuleLoaded] = React.useState(false);\n    React.useEffect(() => {\n        loadFieldSelector();\n    }, []);\n    const loadFieldSelector = () => __awaiter(void 0, void 0, void 0, function* () {\n        const { FieldSelector } = yield import('jimu-ui/advanced/data-source-selector');\n        fieldSelectorRef.current = FieldSelector;\n        setModuleLoaded(true);\n    });\n    const [size, setSize] = React.useState(DEFAULT_SIZE);\n    const [isOpen, setIsOpen] = React.useState(true);\n    React.useEffect(() => {\n        setIsOpen(true);\n    }, [version]);\n    const handleClose = () => {\n        setIsOpen(false);\n    };\n    const handleToggle = (evt, type) => {\n        if (type !== 'clickOutside') {\n            handleClose();\n        }\n    };\n    const handleResize = (size) => {\n        setSize(size);\n    };\n    const dataSources = [dataSet.dataSource];\n    const fieldTypes = Immutable([JimuFieldType.Number]);\n    const [selectedFields, setSelectedFields] = React.useState(Immutable([]));\n    const [statResult, setStatResult] = React.useState({});\n    const [loading, setLoading] = React.useState(false);\n    const intl = useIntl();\n    const preFieldName = React.useRef(null);\n    const executeStatistics = React.useCallback((dataSet, fieldName) => __awaiter(void 0, void 0, void 0, function* () {\n        setLoading(true);\n        try {\n            let result;\n            if (dataLevel === DataLevel.DataSource) {\n                if (preFieldName.current === fieldName)\n                    return;\n                result = yield queryFieldStatistics(dataSet.dataSource, fieldName);\n                preFieldName.current = fieldName;\n            }\n            else if (dataLevel === DataLevel.Records) {\n                result = getFieldStatistics(dataSet.records, fieldName);\n            }\n            const newStatResult = {};\n            statTypes.forEach(statType => {\n                const val = result[statType];\n                if (typeof val === 'number') {\n                    newStatResult[statType] = intl.formatNumber(val);\n                }\n            });\n            setStatResult(newStatResult);\n        }\n        catch (e) {\n            setStatResult(null);\n        }\n        finally {\n            setLoading(false);\n        }\n    }), [dataLevel, intl]);\n    const onChangeFields = React.useCallback((allSelectedFields, ds) => {\n        var _a;\n        const fieldName = (_a = allSelectedFields === null || allSelectedFields === void 0 ? void 0 : allSelectedFields[0]) === null || _a === void 0 ? void 0 : _a.name;\n        setSelectedFields(Immutable([fieldName]));\n    }, []);\n    const hiddenFields = React.useMemo(() => {\n        var _a;\n        const statisticalFields = getStatisticalFields(dataSet);\n        const allFields = Object.values(((_a = dataSet.dataSource.getSchema()) === null || _a === void 0 ? void 0 : _a.fields) || {}).map(f => f.name);\n        const hiddenFields = allFields.filter(fieldName => !statisticalFields.includes(fieldName));\n        return Immutable(hiddenFields);\n    }, [dataSet]);\n    const FieldSelector = fieldSelectorRef.current;\n    React.useEffect(() => {\n        const fieldName = selectedFields[0];\n        if (!dataSet || !fieldName)\n            return;\n        executeStatistics(dataSet, fieldName);\n    }, [dataSet, executeStatistics, selectedFields]);\n    return jsx(FloatingPanel, { version: version, open: isOpen, headerTitle: translate('dataAction_DataStatistics'), onHeaderClose: handleClose, minSize: MIN_SIZE, onResize: handleResize, dragBounds: \"body\", defaultSize: size, reference: iconRef, toggle: handleToggle, className: 'data-statistics-popper', css: popperStyle },\n        jsx(\"div\", { className: \"h-100 p-4 position-relative overflow-auto\" }, !moduleLoaded\n            ? jsx(Loading, { type: LoadingType.Secondary })\n            : jsx(React.Fragment, null,\n                jsx(Label, { css: css `\r\n            width: 100%;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n          `, title: dataSources[0].getLabel(), \"aria-label\": dataSources[0].getLabel() }, dataSources[0].getLabel()),\n                jsx(FieldSelector, { dataSources: dataSources, types: fieldTypes, selectedFields: selectedFields, hiddenFields: hiddenFields, useDropdown: true, isDataSourceDropDownHidden: dataSources.length === 1, placeholder: translate('pleaseSelectAField'), className: \"h-auto mb-4\", onChange: onChangeFields }),\n                statResult && !loading && jsx(\"div\", null, Object.keys(statResult).map((statType) => jsx(Label, { className: 'd-flex justify-content-between', key: statType },\n                    jsx(\"span\", { css: css `\r\n              width: ${rem(150)};\r\n              flex-shrink: 0;\r\n              overflow: hidden;\r\n              text-overflow: ellipsis;\r\n              white-space: nowrap;\r\n            ` }, translate(`${statType}Label`)),\n                    jsx(\"span\", { css: css `\r\n              overflow: hidden;\r\n              text-overflow: ellipsis;\r\n              white-space: nowrap;\r\n            `, title: statResult[statType] }, statResult[statType])))),\n                !statResult && !loading && jsx(Label, null,\n                    jsx(Icon, { icon: wrongOutlined, color: 'var(--sys-color-error-main)' }),\n                    jsx(\"span\", { className: 'ml-2' }, translate('error'))),\n                loading && jsx(Loading, { type: LoadingType.Secondary }))));\n});\nconst supportedDsTypes = [\n    DataSourceTypes.FeatureLayer,\n    DataSourceTypes.SceneLayer,\n    DataSourceTypes.BuildingComponentSubLayer,\n    DataSourceTypes.OrientedImageryLayer,\n    DataSourceTypes.ImageryLayer,\n    DataSourceTypes.SubtypeGroupLayer,\n    DataSourceTypes.SubtypeSublayer\n];\nconst isSupportStatistics = (dataSet, dataLevel) => {\n    const statisticalFields = getStatisticalFields(dataSet);\n    let isSupport = supportedDsTypes.includes(dataSet.dataSource.type) &&\n        statisticalFields.length > 0 &&\n        dataSet.dataSource.getStatus() !== DataSourceStatus.NotReady;\n    if (!isSupport)\n        return isSupport;\n    let supportsStatistics = false;\n    if (dataLevel === DataLevel.DataSource && 'getCapabilities' in dataSet.dataSource) {\n        const ds = dataSet.dataSource;\n        supportsStatistics = ds.getCapabilities().getQueryCapabilities().supportsStatistics;\n    }\n    if ((dataLevel === DataLevel.Records && dataSet.records.length === 0) ||\n        (dataLevel === DataLevel.DataSource && !supportsStatistics)) {\n        isSupport = false;\n    }\n    return isSupport;\n};\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport rightOutlined from 'jimu-icons/svg/outlined/directional/right.svg';\nconst styles = css `\r\n&.ds-item {\r\n  height: 32px;\r\n  .ds-item-label-container {\r\n    max-width: calc(100% - 20px);\r\n    .ds-item-label {\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n      margin-bottom: 0;\r\n    }\r\n    .record-count {\r\n      border-radius: 4px;\r\n      color: var(--sys-color-action-text);\r\n      background: var(--sys-color-action-hover);\r\n      padding: 1px 4px 0px 4px;\r\n      line-height: 16px;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n}\r\n`;\nexport default function RelatedSource(props) {\n    const { label, count, onSelect, uiComponents } = props;\n    const { Label, Button, Icon } = uiComponents;\n    return jsx(\"div\", { className: 'ds-item w-100 d-flex justify-content-between align-items-center', css: styles },\n        jsx(\"div\", { className: 'ds-item-label-container d-flex align-items-center' },\n            jsx(Label, { className: 'ds-item-label ml-2', title: label }, label),\n            jsx(\"div\", { className: 'record-count ml-2' }, count !== null && count !== void 0 ? count : '...')),\n        jsx(Button, { type: 'tertiary', size: 'sm', icon: true, disabled: !count, onClick: onSelect },\n            jsx(Icon, { icon: rightOutlined, size: 16 })));\n}\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\nimport classNames from 'classnames';\nimport rightFilled from 'jimu-icons/svg/filled/directional/right.svg';\nimport downFilled from 'jimu-icons/svg/filled/directional/down.svg';\nimport { loadArcGISJSAPIModules } from '../../arcgis-js-api-module-loader';\nimport { useEffectOnce, useTranslation } from '../../hooks';\nexport var LoadStatus;\n(function (LoadStatus) {\n    LoadStatus[\"Pending\"] = \"Pending\";\n    LoadStatus[\"Fulfilled\"] = \"Fulfilled\";\n    LoadStatus[\"Rejected\"] = \"Rejected\";\n})(LoadStatus || (LoadStatus = {}));\nconst style = css `\r\n  border: none;\r\n  .jimu-btn.expanded {\r\n    align-self: flex-start;\r\n  }\r\n  .esri-feature.esri-widget {\r\n    background-color: transparent;\r\n  }\r\n  .esri-feature__title {\r\n    font-size: 14px;\r\n    height: 16px;\r\n    font-weight: 500;\r\n    margin: 0;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  .esri-feature__content-element {\r\n    padding: 0;\r\n    margin-bottom: 0;\r\n    margin-top: var(--sys-spacing-1);\r\n  }\r\n  .esri-feature__loading-container {\r\n    display: none;\r\n  }\r\n  .feature-info-widget {\r\n    max-width: calc(100% - 20px);\r\n  }\r\n`;\nexport default function FeatureInfo(props) {\n    const { graphic, popupTemplate, uiComponents } = props;\n    const [showContent, setShowContent] = React.useState(false);\n    const featureRef = React.useRef(null);\n    const featureContainerRef = React.useRef(null);\n    useEffectOnce(() => {\n        loadArcGISJSAPIModules([\n            'esri/widgets/Feature'\n        ]).then(modules => {\n            var _a;\n            const [Feature] = modules;\n            const container = document && document.createElement('div');\n            container.className = 'jimu-widget';\n            (_a = featureContainerRef.current) === null || _a === void 0 ? void 0 : _a.appendChild(container);\n            const feature = featureRef.current;\n            feature && !feature.destroyed && feature.destroy();\n            graphic.popupTemplate = popupTemplate;\n            featureRef.current = new Feature({\n                container: container,\n                defaultPopupTemplateEnabled: true,\n                graphic,\n                visibleElements: {\n                    title: true,\n                    content: {\n                        fields: false\n                    },\n                    lastEditedInfo: false\n                }\n            });\n        });\n    });\n    React.useEffect(() => {\n        featureRef.current && (featureRef.current.visibleElements = {\n            title: true,\n            content: {\n                fields: showContent\n            },\n            lastEditedInfo: false\n        });\n    }, [showContent]);\n    const toggleExpanded = React.useCallback((e) => {\n        e.stopPropagation();\n        setShowContent(oldValue => !oldValue);\n    }, []);\n    const { Button, jimuUIMessages, Icon } = uiComponents;\n    const translate = useTranslation(jimuUIMessages);\n    return (jsx(\"div\", { className: 'feature-info-component d-flex align-items-center p-2', css: style },\n        jsx(Button, { \"aria-label\": translate(showContent ? 'collapse' : 'expand'), className: classNames('p-0 jimu-outline-inside', { expanded: showContent }), type: 'tertiary', icon: true, size: 'sm', onClick: toggleExpanded }, showContent ? jsx(Icon, { icon: downFilled, size: 's' }) : jsx(Icon, { icon: rightFilled, size: 's', autoFlip: true })),\n        jsx(\"div\", { className: 'feature-info-widget flex-grow-1', ref: featureContainerRef })));\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\nimport classNames from 'classnames';\nimport * as ReactRedux from 'react-redux';\nimport Immutable from 'seamless-immutable';\nimport { debounce } from 'lodash-es';\nimport arrowLeftOutlined from 'jimu-icons/svg/outlined/directional/arrow-left.svg';\nimport { useTranslation } from '../../hooks';\nimport DataSourceManager from '../../data-source-manager';\nimport defaultMessages from '../../translations/default';\nimport FeatureInfo from './feature-info';\nimport pointer from 'jimu-icons/svg/outlined/editor/pointer.svg';\nexport var SelectionModeType;\n(function (SelectionModeType) {\n    SelectionModeType[\"Single\"] = \"SINGLE\";\n    SelectionModeType[\"Multiple\"] = \"MULTIPLE\";\n})(SelectionModeType || (SelectionModeType = {}));\nconst styles = css `\r\n  .related-records-header {\r\n    height: 32px;\r\n    .related-records-title {\r\n      overflow:hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n    }\r\n    .related-record-select {\r\n      .jimu-dropdown-button {\r\n        .related-record-select-icon {\r\n          display: block !important;\r\n          margin-right: 0;\r\n        }\r\n        .related-record-select-text {\r\n          display: none;\r\n        }\r\n      }\r\n      .jimu-dropdown-menu {\r\n        max-width: 100vw !important;\r\n      }\r\n    }\r\n  }\r\n  .related-records-container {\r\n    gap: var(--sys-spacing-2);\r\n    .related-record {\r\n      border: 1px solid var(--sys-color-divider-primary);\r\n    }\r\n    .related-record-selected {\r\n      border-color: var(--sys-color-primary-main);\r\n    }\r\n  }\r\n`;\nconst RECORD_LOAD_SIZE = 20;\nexport default function RelatedRecords(props) {\n    var _a, _b;\n    const { widgetId, relatedDs, relatedIds, version, dataViewInfo, showBack, onBack, uiComponents } = props;\n    const [loading, setLoading] = React.useState(false);\n    const [selectionMode, setSelectionMode] = React.useState(SelectionModeType.Single);\n    const handleChangeSelectionMode = React.useCallback((evt) => {\n        setSelectionMode(evt.target.value);\n    }, []);\n    // create related data view\n    const [relatedDataView, setRelatedDataView] = React.useState(null);\n    React.useEffect(() => {\n        if (!relatedIds || relatedIds.length === 0)\n            return;\n        const localId = `related_popper_${version}`;\n        const dataView = relatedDs.getLocalDataSource(localId);\n        if (dataView) {\n            updateDataView(dataView);\n        }\n        else {\n            DataSourceManager.getInstance().createDataSource(Immutable({ id: relatedDs.id }), null, localId).then((newDataView) => {\n                updateDataView(newDataView);\n            });\n        }\n        function updateDataView(dataView) {\n            const idField = relatedDs.getIdField();\n            dataView.updateQueryParams({\n                where: `${idField} in (${relatedIds.join(',')})`\n            }, 'related-records');\n            setRelatedDataView(dataView);\n            // store data view, destroy them when closing popper\n            if (!dataViewInfo[version]) {\n                dataViewInfo[version] = [];\n            }\n            dataViewInfo[version].push(dataView);\n        }\n    }, [relatedDs, widgetId, relatedIds, dataViewInfo, version]);\n    // handle set-filter action\n    const [filterIds, setFilterIds] = React.useState(null);\n    const dataActionFilter = ReactRedux.useSelector((state) => { var _a, _b, _c; return (_c = (_b = (_a = state.dataSourcesInfo) === null || _a === void 0 ? void 0 : _a[relatedDataView === null || relatedDataView === void 0 ? void 0 : relatedDataView.id]) === null || _b === void 0 ? void 0 : _b.widgetQueries) === null || _c === void 0 ? void 0 : _c[`setFilter-${relatedDataView === null || relatedDataView === void 0 ? void 0 : relatedDataView.id}`]; });\n    React.useEffect(() => {\n        var _a;\n        if (!dataActionFilter || dataActionFilter.where === '1=1') {\n            setFilterIds(null);\n        }\n        else {\n            const realQuery = relatedDataView === null || relatedDataView === void 0 ? void 0 : relatedDataView.getRealQueryParams({ returnIdsOnly: true }, 'query');\n            setLoading(true);\n            (_a = relatedDataView === null || relatedDataView === void 0 ? void 0 : relatedDataView.query(realQuery)) === null || _a === void 0 ? void 0 : _a.then((result) => {\n                var _a, _b;\n                setFilterIds((_b = (_a = result === null || result === void 0 ? void 0 : result.records) === null || _a === void 0 ? void 0 : _a.map) === null || _b === void 0 ? void 0 : _b.call(_a, r => r.getId()));\n            }).catch(e => {\n                console.error(e);\n                setFilterIds(null);\n            }).finally(() => {\n                setLoading(false);\n            });\n        }\n    }, [dataActionFilter, relatedDataView]);\n    // construct actionDataSets\n    const [allLoadedRecords, setAllLoadedRecords] = React.useState([]);\n    const noSelectedIds = React.useMemo(() => [], []);\n    const selectedIds = ((_b = (_a = ReactRedux.useSelector((state) => { var _a, _b, _c; return ((_c = (_b = (_a = state.dataSourcesInfo) === null || _a === void 0 ? void 0 : _a[relatedDataView === null || relatedDataView === void 0 ? void 0 : relatedDataView.id]) === null || _b === void 0 ? void 0 : _b.selectedIds) === null || _c === void 0 ? void 0 : _c.join(',')) || ''; })) === null || _a === void 0 ? void 0 : _a.split) === null || _b === void 0 ? void 0 : _b.call(_a, ',')) || noSelectedIds;\n    const dsLabel = relatedDs.getLabel();\n    const validFields = React.useMemo(() => {\n        const allUsedFields = relatedDs.getAllUsedFields();\n        const allFields = relatedDs.getLayerDefinition().fields.map(f => f.name);\n        const validFields = allUsedFields === '*' ? allFields : allUsedFields;\n        return validFields;\n    }, [relatedDs]);\n    const actionDataSets = React.useMemo(() => {\n        if (!relatedDataView)\n            return [];\n        const loadedRecords = Array.isArray(filterIds) ? allLoadedRecords.filter(r => filterIds.includes(r.getId())) : allLoadedRecords;\n        const selectedRecords = loadedRecords.filter(r => selectedIds.includes(r.getId()));\n        return [{\n                dataSource: relatedDataView,\n                type: selectedRecords.length > 0 ? 'selected' : 'loaded',\n                records: selectedRecords.length > 0 ? selectedRecords : loadedRecords,\n                name: dsLabel,\n                fields: validFields\n            }];\n    }, [relatedDataView, filterIds, allLoadedRecords, dsLabel, validFields, selectedIds]);\n    // load related records by relatedIds\n    const loadRelatedRecords = React.useCallback((loadedRecordSize_1, ...args_1) => __awaiter(this, [loadedRecordSize_1, ...args_1], void 0, function* (loadedRecordSize, initial = false) {\n        if (!relatedDataView || !relatedIds)\n            return;\n        setLoading(true);\n        try {\n            const dataViewRecords = relatedDataView.getRecords();\n            const allLoadedRecordIds = dataViewRecords.map(r => r.getId());\n            const allLoadedRecordIdsSet = new Set(allLoadedRecordIds);\n            const loadRecordIds = relatedIds.filter(id => !allLoadedRecordIdsSet.has(id) && (!filterIds || filterIds.includes(id))).slice(0, loadedRecordSize);\n            let loadRecords;\n            if (loadRecordIds.length > 0) {\n                const queryParams = {\n                    where: `${relatedDs.getIdField()} in (${loadRecordIds.join(',')})`,\n                    outFields: validFields,\n                    returnGeometry: true\n                };\n                const queryResult = yield relatedDataView.query(queryParams);\n                loadRecords = ((queryResult === null || queryResult === void 0 ? void 0 : queryResult.records) || []);\n            }\n            else {\n                loadRecords = [];\n            }\n            let newRecords;\n            if (initial) {\n                newRecords = dataViewRecords.filter(r => relatedIds.includes(r.getId())).concat(loadRecords);\n            }\n            else {\n                newRecords = dataViewRecords.concat(loadRecords);\n            }\n            relatedDataView.setRecords(newRecords);\n            setAllLoadedRecords(relatedDataView.getRecords());\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            setLoading(false);\n        }\n    }), [filterIds, relatedDataView, relatedDs, relatedIds, validFields]);\n    // infinity scrolling\n    const handleScroll = debounce((e) => {\n        if (allLoadedRecords.length >= relatedIds.length || (filterIds && allLoadedRecords.length > filterIds.length))\n            return;\n        const div = e.target;\n        if (div.scrollHeight === div.clientHeight + div.scrollTop) {\n            loadRelatedRecords(RECORD_LOAD_SIZE);\n        }\n    }, 100);\n    // initial load\n    React.useEffect(() => {\n        loadRelatedRecords(RECORD_LOAD_SIZE, true);\n    }, [loadRelatedRecords]);\n    const filteredLoadedRecords = Array.isArray(filterIds) ? allLoadedRecords.filter(r => filterIds.includes(r.getId())) : allLoadedRecords;\n    // select records\n    const handleSelect = React.useCallback((record) => {\n        const id = record.getId();\n        let newSelectedIds = selectedIds;\n        if (selectionMode === SelectionModeType.Single) {\n            if (selectedIds.length === 1 && selectedIds.includes(id)) {\n                newSelectedIds = [];\n            }\n            else {\n                newSelectedIds = [id];\n            }\n        }\n        else if (selectionMode === SelectionModeType.Multiple) {\n            if (selectedIds.includes(id)) {\n                newSelectedIds = newSelectedIds.filter(selectedId => selectedId !== id);\n            }\n            else {\n                newSelectedIds.push(id);\n            }\n        }\n        const selectedRecords = allLoadedRecords.filter(r => newSelectedIds.includes(r.getId()));\n        relatedDataView.selectRecords({ widgetId, records: selectedRecords });\n    }, [allLoadedRecords, relatedDataView, selectedIds, selectionMode, widgetId]);\n    // popupTemplate for FeatureInfo\n    const popupTemplate = React.useMemo(() => {\n        var _a;\n        const fields = Object.values(relatedDs.getSchema().fields);\n        const fieldNames = fields.map(f => f.name);\n        const popupInfo = relatedDs.getPopupInfo();\n        let fieldInfos = ((popupInfo === null || popupInfo === void 0 ? void 0 : popupInfo.fieldInfos) || []).filter(f => f.visible && fieldNames.includes(f.fieldName))\n            .map(f => ({ fieldName: f.fieldName, label: f.label }));\n        if (fieldInfos.length === 0) {\n            fieldInfos = fields.filter(f => validFields.includes(f.name)).map(f => ({ fieldName: f.name, label: f.alias }));\n        }\n        const displayField = (_a = relatedDs.getLayerDefinition()) === null || _a === void 0 ? void 0 : _a.displayField;\n        const idField = relatedDs.getIdField();\n        const titleField = validFields.find(f => f === displayField || /(name|title|label|id)/i.test(f) || f === idField);\n        return {\n            title: `${titleField}: {${titleField}}`,\n            content: [{ type: 'fields' }],\n            fieldInfos\n        };\n    }, [relatedDs, validFields]);\n    const { Loading, LoadingType, Button, Select, Icon, DataActionList, DataActionListStyle } = uiComponents;\n    const translate = useTranslation(defaultMessages);\n    return (jsx(\"div\", { className: 'related-records h-100 d-flex flex-column', css: styles },\n        loading && jsx(Loading, { type: LoadingType.Secondary }),\n        jsx(\"div\", { className: 'related-records-header flex-shrink-0 d-flex justify-content-between align-items-center' },\n            jsx(\"div\", { className: 'related-records-title flex-grow-1' },\n                showBack && jsx(Button, { className: 'p-0 mr-2', size: 'sm', type: 'tertiary', icon: true, onClick: onBack },\n                    jsx(Icon, { icon: arrowLeftOutlined, autoFlip: true })),\n                dsLabel),\n            jsx(\"div\", { className: 'd-flex align-items-center' },\n                jsx(Select, { className: 'related-record-select', value: selectionMode, size: 'sm', appendToBody: false, onChange: handleChangeSelectionMode, title: translate('selectionMode') },\n                    jsx(\"option\", { key: SelectionModeType.Single, value: SelectionModeType.Single },\n                        jsx(Icon, { className: 'related-record-select-icon d-none', size: 12, icon: pointer }),\n                        jsx(\"span\", { className: 'related-record-select-text' }, translate('selectionModeSingle'))),\n                    jsx(\"option\", { key: SelectionModeType.Multiple, value: SelectionModeType.Multiple },\n                        jsx(Icon, { className: 'related-record-select-icon d-none', size: 12, icon: pointer }),\n                        jsx(\"span\", { className: 'related-record-select-text' }, translate('selectionModeMultiple')))),\n                jsx(DataActionList, { widgetId: widgetId, dataSets: actionDataSets, listStyle: DataActionListStyle.Dropdown, buttonSize: 'sm', buttonType: 'tertiary' }))),\n        jsx(\"div\", { className: 'related-records-container d-flex flex-column flex-grow-1 overflow-auto p-1', role: 'listbox', onScroll: handleScroll }, filteredLoadedRecords.map(r => {\n            const id = r.getId();\n            const isSelected = (selectedIds || []).includes(id);\n            return jsx(\"div\", { key: id, className: classNames('related-record', { 'related-record-selected': isSelected }), onClick: () => { handleSelect(r); } },\n                jsx(FeatureInfo, { graphic: r.feature, popupTemplate: popupTemplate, uiComponents: uiComponents }));\n        }))));\n}\n","import { css } from '@emotion/react';\nimport { DialogInteractionType, FixedPosition } from '../../types/app-config';\nimport { RESIZE_HANDLER_SIZE } from '../utils/resize-utils';\nfunction convertValue(value) {\n    if (typeof value === 'object') {\n        return `${value.distance}${value.unit}`;\n    }\n    return value;\n}\nfunction getDialogBackgroundSize(dialogBackground) {\n    let size = 'unset';\n    if (dialogBackground && dialogBackground.image) {\n        switch (dialogBackground.fillType) {\n            case 'fit':\n                size = 'contain';\n                break;\n            case 'fill':\n                size = 'cover';\n                break;\n            case 'stretch':\n                size = '100% 100%';\n                break;\n            default:\n                size = 'auto';\n                break;\n        }\n        return size;\n    }\n    return size;\n}\n// Get bg, border, shadow styles\nfunction getDialogStyles(dialogJson) {\n    var _a;\n    const { dialogBackground, border, borderRadius, boxShadow } = dialogJson;\n    let borderRadiusTopStyle = 'unset';\n    let borderRadiusBottomStyle = 'unset';\n    if (borderRadius) {\n        const lt = borderRadius.number[0];\n        const rt = borderRadius.number[1] !== undefined ? borderRadius.number[1] : lt;\n        const rb = borderRadius.number[2] !== undefined ? borderRadius.number[2] : lt;\n        const lb = borderRadius.number[3] !== undefined ? borderRadius.number[3] : lt;\n        borderRadiusTopStyle = `${lt}${borderRadius.unit} ${rt}${borderRadius.unit}`;\n        borderRadiusBottomStyle = `${rb}${borderRadius.unit} ${lb}${borderRadius.unit}`;\n    }\n    return {\n        backgroundColor: dialogBackground && dialogBackground.color ? dialogBackground.color : 'transparent',\n        backgroundImage: ((_a = dialogBackground === null || dialogBackground === void 0 ? void 0 : dialogBackground.image) === null || _a === void 0 ? void 0 : _a.url) ? `url(${dialogBackground.image.url})` : 'unset',\n        backgroundRepeat: dialogBackground && dialogBackground.image && dialogBackground.fillType === 'tile' ? 'repeat' : 'no-repeat',\n        backgroundSize: getDialogBackgroundSize(dialogBackground),\n        borderStyle: (border && border.color && border.width) ? `${convertValue(border.width)} ${border.type} ${border.color}` : 'none',\n        borderRadiusTopStyle: borderRadiusTopStyle,\n        borderRadiusBottomStyle: borderRadiusBottomStyle,\n        borderRadiusStyle: borderRadius ? `${borderRadiusTopStyle} ${borderRadiusBottomStyle}` : 'unset',\n        boxShadowStyle: boxShadow && boxShadow.color\n            ? `${convertValue(boxShadow.offsetX)} ${convertValue(boxShadow.offsetY)}\r\n      ${convertValue(boxShadow.blur)} ${convertValue(boxShadow.spread)} ${boxShadow.color}`\n            : 'none'\n    };\n}\nconst BOX_SHADOW_LIST = { none: 'shadow-none', small: 'shadow-sm', default: 'shadow', large: 'shadow-lg' };\n/**\n * Get boxShadow prop from quick style\n */\nfunction getBoxShadowByQuickStyle(quickStyle) {\n    if (quickStyle === BOX_SHADOW_LIST.none) {\n        return null;\n    }\n    const boxShadow = {\n        offsetX: '0px',\n        offsetY: '0px',\n        blur: '0px',\n        spread: '0px',\n        color: ''\n    };\n    switch (quickStyle) {\n        case BOX_SHADOW_LIST.small:\n            boxShadow.blur = '6px';\n            boxShadow.spread = '2px';\n            boxShadow.color = 'rgba(0,0,0,0.15)';\n            break;\n        case BOX_SHADOW_LIST.default:\n            boxShadow.blur = '10px';\n            boxShadow.spread = '4px';\n            boxShadow.color = 'rgba(0,0,0,0.2)';\n            break;\n        case BOX_SHADOW_LIST.large:\n            boxShadow.blur = '20px';\n            boxShadow.spread = '6px';\n            boxShadow.color = 'rgba(39,60,70,0.2)';\n            break;\n        default:\n            break;\n    }\n    return boxShadow;\n}\nfunction getDialogJsonWithQuickBoxShadow(dialogJson) {\n    var _a;\n    if ((_a = dialogJson.boxShadow) === null || _a === void 0 ? void 0 : _a.presetStyle) {\n        dialogJson = dialogJson.set('boxShadow', getBoxShadowByQuickStyle(dialogJson.boxShadow.presetStyle));\n    }\n    return dialogJson;\n}\n// Styles for fixed dialog (global)\nexport function getGlobalStylesForFixed(dialogJson, isFixedDlgOpen, browserHeight, dialogSizeMode) {\n    dialogJson = getDialogJsonWithQuickBoxShadow(dialogJson);\n    const { borderRadius, interactionType } = dialogJson;\n    const styles = getDialogStyles(dialogJson);\n    const overlayColor = dialogJson.overlayColor || (dialogJson.isOpenerDlg ? 'var(--ref-palette-neutral-1200)' : 'transparent');\n    const dlgWrapId = `app-dialog-wrap-${dialogJson.id}`;\n    const dialogContentBorderRadius = borderRadius && interactionType ? `${styles.borderRadiusTopStyle} 0 0` : styles.borderRadiusStyle;\n    const dialogFooterBorderRadius = borderRadius ? `0 0 ${styles.borderRadiusBottomStyle}` : 'unset';\n    return css `\r\n    body {\r\n\r\n      @keyframes aBlink {\r\n        from { background-color: var(--sys-color-error-dark); }\r\n        50% { background-color: var(--sys-color-error-dark); }\r\n        51%{background-color: transparent;}\r\n        to { background-color: transparent; }\r\n      }\r\n\r\n      .app-dialog-wrap{\r\n\r\n        &.${dlgWrapId}{\r\n          display: ${isFixedDlgOpen ? 'inherit' : 'none'};\r\n          &.no-backdrop {\r\n            pointer-events: none;\r\n            .modal-content {\r\n              pointer-events: auto;\r\n            }\r\n          }\r\n          .app-dialog {\r\n            margin: 0!important;\r\n            max-width: 100vw;\r\n            max-height: 100vh;\r\n\r\n            .app-dialog-content {\r\n              border: none;\r\n              box-shadow: unset;\r\n              background-color: transparent;\r\n              border-radius:  ${styles.borderRadiusStyle};\r\n\r\n              &.overflow-visible{\r\n                overflow: visible;\r\n              }\r\n\r\n              .app-dialog-animation-content {\r\n                flex-shrink: 0;\r\n                border: ${styles.borderStyle};\r\n                border-radius:  ${styles.borderRadiusStyle};\r\n                box-shadow: ${styles.boxShadowStyle};\r\n                background-color: ${styles.backgroundColor};\r\n                background-image: ${styles.backgroundImage};\r\n                background-position: center center;\r\n                background-repeat: ${styles.backgroundRepeat};\r\n                background-size: ${styles.backgroundSize};\r\n\r\n                .dialog-content{\r\n                  padding: 0;\r\n                  border-radius:  ${dialogContentBorderRadius};\r\n                }\r\n\r\n                .dialog-footer{\r\n                  overflow-x: auto;\r\n                  border-radius:  ${dialogFooterBorderRadius};\r\n                  user-select: none;\r\n                  &.has-mask {\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                    .btn {\r\n                      pointer-events: none;\r\n                    }\r\n                  }\r\n\r\n                  .cbx-animation{\r\n                    margin-right: 0.5rem;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    border: 2px solid var(--ref-palette-neutral-600);\r\n                    animation: aBlink 500ms infinite;\r\n                  }\r\n                  .btn {\r\n                    min-width: 6.25rem;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          .app-dialog-backdrop{\r\n            background-color: ${overlayColor};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\n}\n// Styles for fixed dialog\nexport function getStylesForFixed(dialogSizeMode, browserHeight, interactionType) {\n    let contentHeight = null;\n    // get pixel from percent for height\n    if (dialogSizeMode.heightMode === 'CUSTOM') {\n        const unit = dialogSizeMode.height.includes('%') ? '%' : 'px';\n        const _height = unit === '%' ? browserHeight * parseFloat(dialogSizeMode.height.split('%')[0]) / 100 + 'px' : dialogSizeMode.height;\n        if (parseFloat(_height) > browserHeight) {\n            contentHeight = _height;\n        }\n    }\n    if (interactionType) { // with footer\n        const footerHeight = interactionType === DialogInteractionType.ButtonBlock ? 95 : (interactionType === DialogInteractionType.ButtonInline ? 64 : 59);\n        contentHeight = `calc(100% - ${footerHeight}px)`;\n    }\n    return css `\r\n    &.app-dialog{\r\n      .app-dialog-content { /** modal-content */\r\n        max-width: 100vw;\r\n        max-height: 100vh;\r\n        ${convertToStyle(dialogSizeMode)}\r\n        height: ${dialogSizeMode.heightMode === 'CUSTOM' && dialogSizeMode.height};\r\n        /* transition: height 0.3s ease-in-out; */\r\n        transform: ${panelTransformStyle(dialogSizeMode)};\r\n        .app-dialog-resize-container {\r\n          width: 100%;\r\n          height: 100%;\r\n\r\n          .app-dialog-animation-content {\r\n            width: 100%;\r\n            height: 100%;\r\n            overflow-y: auto;\r\n            .modal-body { /** dialog-content, it might have scrolling-bar in height */\r\n              width: 100%;\r\n              height: 100%;\r\n              height: ${contentHeight};\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\n}\n// Styles for anchored dialog\nexport function getStylesForAnchored(dialogJson, dialogSizeMode) {\n    var _a;\n    dialogJson = getDialogJsonWithQuickBoxShadow(dialogJson);\n    const styles = getDialogStyles(dialogJson);\n    const backgroundColor = styles.backgroundColor === 'transparent' ? 'var(--ref-palette-neutral-200)' : styles.backgroundColor;\n    /**\n     * Use shadow styles of Popper by default.\n     * Show custom shadow if it's set. And at this case, show extra outline style when no border is set.\n     *  */\n    const hasBoxShadow = (_a = dialogJson.boxShadow) === null || _a === void 0 ? void 0 : _a.color;\n    const hasBorder = dialogJson.border && dialogJson.border.width && dialogJson.border.color;\n    const defaultBoxShadowStyle = '0 0 10px 1px var(--ref-palette-neutral-600)';\n    const defaultOutlineStyle = '1px solid var(--ref-palette-neutral-600)';\n    const MARGIN = '12px';\n    let customHeight = dialogSizeMode.height;\n    let arrowBorderColor = null;\n    let arrowBorderOffset = null;\n    if (dialogJson.border && dialogJson.border.width && dialogJson.border.color) {\n        arrowBorderColor = dialogJson.border.color;\n        arrowBorderOffset = dialogJson.border.width;\n        customHeight = `calc(${customHeight} - ${arrowBorderOffset} - ${arrowBorderOffset})`;\n    }\n    const style = css `\r\n    &.app-dialog{\r\n      /* margin: 0.5rem !important; */\r\n      margin: 0 !important;\r\n      background-color: transparent;\r\n      border: none;\r\n      box-shadow: unset;\r\n\r\n      &.dialog-animation-playing{\r\n        .jimu-popper--arrow{\r\n          visibility: hidden !important;\r\n        }\r\n\r\n        .popper-box{\r\n          overflow: visible !important; /*for animation is playing*/\r\n        }\r\n      }\r\n      &.dialog-animation-end{\r\n        .app-dialog-animation-content {\r\n          border-radius: ${styles.borderRadiusStyle};\r\n        }\r\n\r\n        &[data-popper-placement^=\"top\"] .jimu-popper--arrow{\r\n          &::before{\r\n            border-top-color: ${arrowBorderColor};\r\n          }\r\n          &::after{\r\n            border-top-color: ${backgroundColor};\r\n            bottom: ${arrowBorderOffset};\r\n          }\r\n        }\r\n\r\n        &[data-popper-placement^=\"bottom\"] .jimu-popper--arrow{\r\n          &::before{\r\n            border-bottom-color: ${arrowBorderColor};\r\n          }\r\n          &::after{\r\n            border-bottom-color: ${backgroundColor};\r\n            top: ${arrowBorderOffset};\r\n          }\r\n        }\r\n\r\n        &[data-popper-placement^=\"left\"] .jimu-popper--arrow{\r\n          &::before{\r\n            border-left-color: ${arrowBorderColor};\r\n          }\r\n          &::after{\r\n            border-left-color: ${backgroundColor};\r\n            right: ${arrowBorderOffset};\r\n          }\r\n        }\r\n\r\n        &[data-popper-placement^=\"right\"] .jimu-popper--arrow{\r\n          &::before{\r\n            border-right-color: ${arrowBorderColor};\r\n          }\r\n          &::after{\r\n            border-right-color: ${backgroundColor};\r\n            left: ${arrowBorderOffset};\r\n          }\r\n        }\r\n      }\r\n\r\n      .popper-box{\r\n        max-width: calc(100vw - ${MARGIN});\r\n        max-height: calc(100vh - ${MARGIN});\r\n        width: ${dialogSizeMode.width};\r\n        height: ${dialogSizeMode.height};\r\n        border-radius:  ${styles.borderRadiusStyle};\r\n      }\r\n\r\n      .app-dialog-animation-content{\r\n        height: 100%;\r\n        box-shadow: ${hasBoxShadow ? styles.boxShadowStyle : defaultBoxShadowStyle};\r\n\r\n        .app-dialog-container{\r\n          overflow-y: auto;\r\n          max-width: calc(100vw - ${MARGIN});\r\n          max-height: calc(100vh - ${MARGIN});\r\n          width: 100%;\r\n\r\n          border: ${hasBorder ? styles.borderStyle : 'none'};\r\n          outline: ${hasBoxShadow && !hasBorder ? defaultOutlineStyle : 'unset'};\r\n          border-radius:  ${styles.borderRadiusStyle};\r\n\r\n          .app-dialog-content{\r\n            width: 100%;\r\n            height: ${customHeight};\r\n            border-radius:  ${styles.borderRadiusStyle};\r\n            background-color: ${backgroundColor} ;\r\n            background-image: ${styles.backgroundImage};\r\n            background-position: center center;\r\n            background-repeat: ${styles.backgroundRepeat};\r\n            background-size: ${styles.backgroundSize};\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  `;\n    return style;\n}\n// Styles for resize handlers\nexport function getResizeStyle() {\n    const length = 38;\n    return css `\r\n    .app-dialog-resize-handlers{\r\n      .resize-handler{\r\n        width: 100%;\r\n        height: 100%;\r\n        position: absolute;\r\n        z-index: 1;\r\n        .resize-handler-icon {\r\n          position: absolute;\r\n          background-color: var(--ref-palette-black);\r\n          border: 1px solid var(--ref-palette-white);\r\n        }\r\n        &.dialog-resize-top, &.dialog-resize-bottom {\r\n          height: ${RESIZE_HANDLER_SIZE};\r\n          cursor: ns-resize;\r\n          .resize-handler-icon{\r\n            left: min(50%, 50vw);\r\n            width: ${length}px;\r\n            margin-left: ${-length / 2}px;\r\n          }\r\n        }\r\n        &.dialog-resize-top{\r\n          top: 0;\r\n        }\r\n        &.dialog-resize-bottom{\r\n          bottom: 0;\r\n        }\r\n        &.dialog-resize-left, &.dialog-resize-right{\r\n          width: ${RESIZE_HANDLER_SIZE};\r\n          top: 0;\r\n          cursor: ew-resize;\r\n          .resize-handler-icon{\r\n            top: 50%;\r\n            height: ${length}px;\r\n            margin-top: ${-length / 2}px;\r\n          }\r\n        }\r\n        &.dialog-resize-left{\r\n          left: 0;\r\n        }\r\n        &.dialog-resize-right{\r\n          right: 0;\r\n        }\r\n      }\r\n    }\r\n  `;\n}\nfunction panelTransformStyle(dlgJson) {\n    if (dlgJson == null) {\n        return null;\n    }\n    const { position, offsetX = 0, offsetY = 0 } = dlgJson;\n    let translate;\n    if (dlgJson.widthMode !== 'STRETCH') {\n        if (offsetX !== 0) {\n            translate = `translateX(${offsetX}px)`;\n        }\n        if (position === FixedPosition.TopCenter || position === FixedPosition.MiddleCenter || position === FixedPosition.BottomCenter) {\n            translate = translate != null ? `${translate} translateX(-50%)` : 'translateX(-50%)';\n        }\n    }\n    if (dlgJson.heightMode !== 'STRETCH') {\n        if (offsetY !== 0) {\n            translate = translate != null ? `${translate} translateY(${offsetY}px)` : `translateY(${offsetY}px)`;\n        }\n        if (position === FixedPosition.MiddleLeft || position === FixedPosition.MiddleCenter || position === FixedPosition.MiddleRight) {\n            translate = translate != null ? `${translate} translateY(-50%)` : 'translateY(-50%)';\n        }\n    }\n    return translate;\n}\nfunction convertToStyle(dlgJson) {\n    let posStyle;\n    switch (dlgJson === null || dlgJson === void 0 ? void 0 : dlgJson.position) {\n        case FixedPosition.TopLeft:\n            posStyle = css `top: 0; left: 0; bottom: auto; right: auto;`;\n            break;\n        case FixedPosition.TopRight:\n            posStyle = css `top: 0; left: auto; bottom: auto; right: 0;`;\n            break;\n        case FixedPosition.BottomLeft:\n            posStyle = css `top: auto; left: 0; bottom: 0; right: auto;`;\n            break;\n        case FixedPosition.BottomRight:\n            posStyle = css `top: auto; left: auto; bottom: 0; right: 0;`;\n            break;\n        case FixedPosition.TopCenter:\n            posStyle = css `top: 0; left: 50%; bottom: auto; right: auto;`;\n            break;\n        case FixedPosition.BottomCenter:\n            posStyle = css `top: auto; left: 50%; bottom: 0; right: auto;`;\n            break;\n        case FixedPosition.MiddleLeft:\n            posStyle = css `top: 50%; left: 0; bottom: auto; right: auto;`;\n            break;\n        case FixedPosition.MiddleRight:\n            posStyle = css `top: 50%; left: auto; bottom: auto; right: 0;`;\n            break;\n        case FixedPosition.MiddleCenter:\n            posStyle = css `top: 50%; left: 50%; bottom: auto; right: auto;`;\n            break;\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        default:\n            posStyle = css `top: 0; left: 0; bottom: auto; right: auto;`;\n            break;\n    }\n    let widthModeStyle;\n    let heightModeStyle;\n    if (dlgJson.widthMode === 'STRETCH') {\n        widthModeStyle = css `width:auto;left:${dlgJson.left};right:${dlgJson.right};`;\n    }\n    if (dlgJson.heightMode === 'STRETCH') {\n        heightModeStyle = css `height:auto;top:${dlgJson.top};bottom:${dlgJson.bottom};`;\n    }\n    return css `\r\n    position: fixed;\r\n    ${posStyle}\r\n    width: ${dlgJson === null || dlgJson === void 0 ? void 0 : dlgJson.width};\r\n    height: ${dlgJson === null || dlgJson === void 0 ? void 0 : dlgJson.height};\r\n    ${widthModeStyle};\r\n    ${heightModeStyle}\r\n    overflow: visible;\r\n    z-index: 2;\r\n  `;\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Skew extends BaseHover {\n    constructor(option) {\n        super(HoverType.Skew);\n        this.x = (option === null || option === void 0 ? void 0 : option.skewX) || 0;\n        this.y = (option === null || option === void 0 ? void 0 : option.skewY) || 0;\n        if (this.x === 0 && this.y === 0) {\n            this.x = -20;\n        }\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                skewX: '0deg',\n                skewY: '0deg',\n                transform: 'perspective(1px) translateZ(0)',\n                transformOrigin: '0% 100%'\n            }),\n            to: this.generateProps({ skewX: `${this.x}deg`, skewY: `${this.y}deg` }),\n            loop: {\n                skewX: '0deg',\n                skewY: '0deg',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n      transform-origin: 0 100%;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) skew(${this.x}deg, ${this.y}deg);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Grow extends BaseHover {\n    constructor(option) {\n        super(HoverType.Grow);\n        this.x = (option === null || option === void 0 ? void 0 : option.scaleX) || 110;\n        this.y = (option === null || option === void 0 ? void 0 : option.scaleY) || 110;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                scaleX: 1,\n                scaleY: 1,\n                transform: 'perspective(1px) translateZ(0)',\n                transformOrigin: '50% 50%'\n            }),\n            to: this.generateProps({ scaleX: this.x / 100, scaleY: this.y / 100 }),\n            loop: {\n                scaleX: 1,\n                scaleY: 1,\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) scale(${this.x / 100}, ${this.y / 100});\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Shrink extends BaseHover {\n    constructor(option) {\n        super(HoverType.Shrink);\n        this.x = (option === null || option === void 0 ? void 0 : option.scaleX) || 90;\n        this.y = (option === null || option === void 0 ? void 0 : option.scaleY) || 90;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                scaleX: 1,\n                scaleY: 1,\n                transform: 'perspective(1px) translateZ(0)',\n                transformOrigin: '50% 50%'\n            }),\n            to: this.generateProps({ scaleX: this.x / 100, scaleY: this.y / 100 }),\n            loop: {\n                scaleX: 1,\n                scaleY: 1,\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) scale(${this.x / 100}, ${this.y / 100});\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Float extends BaseHover {\n    constructor(option) {\n        super(HoverType.Float);\n        this.x = (option === null || option === void 0 ? void 0 : option.offsetX) || 0;\n        this.y = (option === null || option === void 0 ? void 0 : option.offsetY) || 10;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                translateX: '0%',\n                translateY: '0%',\n                transform: 'perspective(1px) translateZ(0)'\n            }),\n            to: this.generateProps({ translateX: `${this.x}%`, translateY: `${-this.y}%` }),\n            loop: {\n                translateX: '0%',\n                translateY: '0%',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n      transition-timing-function: ease-out;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) translate(${this.x}%, ${-this.y}%);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Sink extends BaseHover {\n    constructor(option) {\n        super(HoverType.Sink);\n        this.x = (option === null || option === void 0 ? void 0 : option.offsetX) || 0;\n        this.y = (option === null || option === void 0 ? void 0 : option.offsetY) || -10;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                translateX: '0%',\n                translateY: '0%',\n                transform: 'perspective(1px) translateZ(0)'\n            }),\n            to: this.generateProps({ translateX: `${this.x}%`, translateY: `${-this.y}%` }),\n            loop: {\n                translateX: '0%',\n                translateY: '0%',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n      transition-timing-function: ease-out;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) translate(${this.x}%, ${-this.y}%);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Rotate extends BaseHover {\n    constructor(option) {\n        super(HoverType.Rotate);\n        this.rotate = (option === null || option === void 0 ? void 0 : option.rotate) || 3;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                rotate: '0deg',\n                transform: 'perspective(1px) translateZ(0)',\n                transformOrigin: '50% 50%'\n            }),\n            to: this.generateProps({ rotate: `${this.rotate}deg` }),\n            loop: {\n                rotate: '0deg',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) rotate(${this.rotate}deg);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Spin extends BaseHover {\n    constructor(option) {\n        super(HoverType.Spin);\n        this.rotate = (option === null || option === void 0 ? void 0 : option.rotate) || -720;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                rotate: '0deg',\n                transform: 'perspective(1px) translateZ(0)',\n                transformOrigin: '50% 50%'\n            }),\n            to: this.generateProps({ rotate: `${this.rotate}deg` }),\n            loop: {\n                rotate: '0deg',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) rotate(${this.rotate}deg);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Forward extends BaseHover {\n    constructor(option) {\n        super(HoverType.Forward);\n        this.x = (option === null || option === void 0 ? void 0 : option.offsetX) || 10;\n        this.y = (option === null || option === void 0 ? void 0 : option.offsetY) || 0;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                translateX: '0%',\n                translateY: '0%',\n                transform: 'perspective(1px) translateZ(0)'\n            }),\n            to: this.generateProps({ translateX: `${this.x}%`, translateY: `${this.y}%` }),\n            loop: {\n                translateX: '0%',\n                translateY: '0%',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n      transition-timing-function: ease-out;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) translate(${this.x}%, ${this.y}%);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Backward extends BaseHover {\n    constructor(option) {\n        super(HoverType.Backward);\n        this.x = (option === null || option === void 0 ? void 0 : option.offsetX) || -10;\n        this.y = (option === null || option === void 0 ? void 0 : option.offsetY) || 0;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({\n                translateX: '0%',\n                translateY: '0%',\n                transform: 'perspective(1px) translateZ(0)'\n            }),\n            to: this.generateProps({ translateX: `${this.x}%`, translateY: `${this.y}%` }),\n            loop: {\n                translateX: '0%',\n                translateY: '0%',\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      display: inline-block;\r\n      vertical-align: middle;\r\n      box-shadow: 0 0 1px rgba(0, 0, 0, 0);\r\n      transition-duration: 0.3s;\r\n      transition-property: transform;\r\n\r\n      &:hover, &:focus, &:active {\r\n        transform: perspective(1px) translateZ(0) translate(${this.x}%, ${this.y}%);\r\n      }\r\n    `;\n    }\n}\n","import { BaseHover } from './base';\nimport { HoverType } from '../types';\nimport { css } from '../../emotion';\nexport class Opacity extends BaseHover {\n    constructor(option) {\n        super(HoverType.Opacity);\n        this.opacity = (option === null || option === void 0 ? void 0 : option.opacity) || 50;\n    }\n    animateProps() {\n        return {\n            from: this.generateProps({ opacity: 1 }),\n            to: this.generateProps({ opacity: this.opacity / 100 }),\n            loop: {\n                opacity: 1,\n                reverse: true\n            }\n        };\n    }\n    cssProps() {\n        return css `\r\n      transition-duration: 0.3s;\r\n      transition-property: opacity;\r\n      opacity: 1;\r\n\r\n      &:hover, &:focus, &:active {\r\n        opacity: ${this.opacity / 100};\r\n      }\r\n    `;\n    }\n}\n","import { getAppStore } from '../../store';\nexport const RESIZE_HANDLER_SIZE = '4px';\nexport function bindResizeHandler(interact, resizeRef, dialogJson, browserSizeMode, getAppConfigAction) {\n    let dw;\n    let dh;\n    let dwForEnd;\n    let dhForEnd;\n    let initWidth;\n    let initHeight;\n    const dialogSizeMode = dialogJson.sizeMode[browserSizeMode];\n    const isRTL = getAppStore().getState().appContext.isRTL;\n    const dialogElement = document.querySelector(`div[id=\"${dialogJson.id}\"] .app-dialog-content`);\n    const resizeHandler = (dialogElement.querySelector('div.app-dialog-resize-handlers'));\n    const leftHandler = resizeHandler.querySelector('span.dialog-resize-left');\n    const rightHandler = resizeHandler.querySelector('span.dialog-resize-right');\n    const topHandler = resizeHandler.querySelector('span.dialog-resize-top');\n    const bottomHandler = resizeHandler.querySelector('span.dialog-resize-bottom');\n    const edges = {};\n    if (leftHandler) {\n        edges.left = '.dialog-resize-left';\n    }\n    if (rightHandler) {\n        edges.right = '.dialog-resize-right';\n    }\n    if (topHandler) {\n        edges.top = '.dialog-resize-top';\n    }\n    if (bottomHandler) {\n        edges.bottom = '.dialog-resize-bottom';\n    }\n    const originW = dialogSizeMode.widthMode === 'CUSTOM' &&\n        parseFloat(dialogSizeMode.width.includes('%') ? dialogSizeMode.width.split('%')[0] : dialogSizeMode.width.split('px')[0]);\n    const originH = dialogSizeMode.heightMode === 'CUSTOM' &&\n        parseFloat(dialogSizeMode.height.includes('%') ? dialogSizeMode.height.split('%')[0] : dialogSizeMode.height.split('px')[0]);\n    return interact(resizeRef)\n        .resizable({\n        edges: edges\n    })\n        .on('resizestart', event => {\n        event.stopPropagation();\n        dw = 0;\n        dh = 0;\n        const size = resizeRef.getBoundingClientRect();\n        initWidth = size.width;\n        initHeight = size.height;\n        resizeRef.style.minWidth = '0px';\n        resizeRef.style.minHeight = '0px';\n    })\n        .on('resizemove', (event, ui) => {\n        event.stopPropagation();\n        const deltaRect = event.deltaRect;\n        dw += deltaRect.width * (isRTL ? -1 : 1);\n        dh += deltaRect.height;\n        dwForEnd = dw;\n        dhForEnd = dh;\n        const w = originW && `${initWidth + dw}px`;\n        const h = originH && `${initHeight + dh}px`;\n        resizeRef.style.width = w;\n        resizeRef.style.height = h;\n        if (dialogSizeMode.widthMode === 'CUSTOM') {\n            dialogElement.style.width = w;\n        }\n        else {\n            const direction = event.edges.left ? 'left' : 'right';\n            const isPx = dialogSizeMode[direction].includes('px');\n            let value = parseFloat(dialogSizeMode[direction].split('px')[0]);\n            if (isPx) {\n                value = Math.max(0, value - dw) + 'px';\n            }\n            else {\n                value = Math.max(0, value - dw / document.body.clientWidth * 100) + '%';\n            }\n            dialogElement.style[direction] = value;\n        }\n        if (dialogSizeMode.heightMode === 'CUSTOM') {\n            dialogElement.style.height = h;\n        }\n        else {\n            const direction = event.edges.top ? 'top' : 'bottom';\n            const isPx = dialogSizeMode[direction].includes('px');\n            let value = parseFloat(dialogSizeMode[direction].split('px')[0]);\n            if (isPx) {\n                value = Math.max(0, value - dh) + 'px';\n            }\n            else {\n                value = Math.max(0, value - dh / document.body.clientHeight * 100) + '%';\n            }\n            dialogElement.style[direction] = value;\n        }\n        if (topHandler) {\n            topHandler.style.width = w;\n        }\n        if (bottomHandler) {\n            bottomHandler.style.width = w;\n        }\n        if (leftHandler) {\n            leftHandler.style.height = h;\n        }\n        if (rightHandler) {\n            rightHandler.style.height = h;\n        }\n    })\n        .on('resizeend', event => {\n        event.stopPropagation();\n        // Get latest dialog json to update new size.\n        const latestDlgJson = getAppStore().getState().appConfig.dialogs[getAppStore().getState().appRuntimeInfo.currentDialogId];\n        let newDialogJson = latestDlgJson;\n        resizeRef.style.width = null;\n        resizeRef.style.minWidth = null;\n        resizeRef.style.height = null;\n        resizeRef.style.minHeight = null;\n        // Calculate new size for custom mode, new position for stretch mode\n        if (dialogSizeMode.widthMode === 'CUSTOM') {\n            dialogElement.style.width = null;\n            const wUnit = dialogSizeMode.width.includes('px') ? 'px' : '%';\n            const newWidth = getFormattedValue(wUnit, originW * (initWidth + dwForEnd) / initWidth);\n            newDialogJson = newDialogJson.setIn(['sizeMode', browserSizeMode, 'width'], newWidth);\n        }\n        else {\n            const direction = event.edges.left ? 'left' : 'right';\n            newDialogJson = newDialogJson.setIn(['sizeMode', browserSizeMode, direction], dialogElement.style[direction]);\n            dialogElement.style[direction] = null;\n        }\n        if (dialogSizeMode.heightMode === 'CUSTOM') {\n            dialogElement.style.height = null;\n            const hUnit = dialogSizeMode.height.includes('px') ? 'px' : '%';\n            const newHeight = getFormattedValue(hUnit, originH * (initHeight + dhForEnd) / initHeight);\n            newDialogJson = newDialogJson.setIn(['sizeMode', browserSizeMode, 'height'], newHeight);\n        }\n        else {\n            const direction = event.edges.top ? 'top' : 'bottom';\n            newDialogJson = newDialogJson.setIn(['sizeMode', browserSizeMode, direction], dialogElement.style[direction]);\n            dialogElement.style[direction] = null;\n        }\n        if (topHandler) {\n            topHandler.style.width = null;\n        }\n        if (bottomHandler) {\n            bottomHandler.style.width = null;\n            bottomHandler.style.top = null;\n        }\n        if (leftHandler) {\n            leftHandler.style.height = null;\n        }\n        if (rightHandler) {\n            rightHandler.style.height = null;\n        }\n        getAppConfigAction().editDialog(newDialogJson).exec();\n    });\n}\nfunction getFormattedValue(unit, value) {\n    return value.toFixed(unit === 'px' ? 0 : 1) + unit;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { loadModule } from '../../module-loader';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { jsx } from '@emotion/react';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { FixedPosition } from '../../types/app-config';\nimport { currentDialogChanged, dialogInfosChanged, activePagePartChanged } from '../../app-actions';\nimport { changeDialog } from '../../browser-history';\nimport { useIntl } from 'react-intl';\nimport { debounce } from 'lodash-es';\nimport defaultMessages from '../../translations/default';\nimport { AppMode, BrowserSizeMode, PagePart } from '../../types/common';\nimport { SCREEN_RESOLUTIONS } from '../../constants';\nimport * as SeamlessImmutable from 'seamless-immutable';\nimport { getAppStore } from '../../store';\nimport { getGlobalStylesForFixed, getStylesForFixed, getResizeStyle } from '../styles/styles';\nimport DialogAnimation from './animation';\nimport { clearSelection, loadLayoutEntry } from '../utils/utils';\nimport { bindResizeHandler } from '../utils/resize-utils';\nimport { getJimuThemeModule, getLocalStorageAppKey, readLocalStorage, setLocalStorage } from '../../utils/utils';\nimport { getDialogIdFromIdOrLabel } from '../../utils/url-utils';\nimport { focusElementInKeyboardMode } from '../../accessibility';\nconst { useEffect, useState, useRef } = React;\nlet disableWindowFocus = null;\nfunction FixedDialog(_a) {\n    var _b, _c, _d, _e, _f;\n    var { dialogJson } = _a, props = __rest(_a, [\"dialogJson\"]);\n    const [jimuUI, setJimuUI] = useState(null);\n    const [jimuLayout, setJimuLayout] = useState(null);\n    const [getAppConfigAction, setGetAppConfigAction] = useState(null);\n    const [interact, setInteract] = useState(null);\n    const disableWindowFocusFromURL = useSelector((state) => state.queryObject.disable_window_focus);\n    if (disableWindowFocus === null) {\n        disableWindowFocus = disableWindowFocusFromURL || 'false';\n    }\n    const runtimeMode = useSelector((state) => state.queryObject.draft) ? 'draft' : 'published';\n    const timestamp = useSelector((state) => state.appConfig.timestamp);\n    const currentPageId = useSelector((state) => state.appRuntimeInfo.currentPageId);\n    const currentPageDlgId = useSelector((state) => state.appConfig.pages[currentPageId].autoOpenDialogId);\n    const currentDlgId = useSelector((state) => state.appRuntimeInfo.currentDialogId);\n    const isDesignMode = useSelector((state) => state.appRuntimeInfo.appMode !== AppMode.Run);\n    const isExpressionMode = useSelector((state) => state.appRuntimeInfo.appMode === AppMode.Express);\n    const isLayoutLock = useSelector((state) => { var _a, _b; return (_b = (_a = state.appConfig) === null || _a === void 0 ? void 0 : _a.forBuilderAttributes) === null || _b === void 0 ? void 0 : _b.lockLayout; });\n    const browserSizeMode = useSelector((state) => state.browserSizeMode);\n    const viewPort = useSelector((state) => { var _a, _b, _c; return (_c = (_b = (_a = state.appConfig) === null || _a === void 0 ? void 0 : _a.forBuilderAttributes) === null || _b === void 0 ? void 0 : _b.viewPortSize) === null || _c === void 0 ? void 0 : _c[browserSizeMode]; }) || SCREEN_RESOLUTIONS[browserSizeMode][1];\n    const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n    const browserHeight = window.jimuConfig.isInBuilder ? viewPort.height : windowHeight;\n    const dispatch = useDispatch();\n    const messages = useFormatMessage();\n    const urlDlgId = useSelector((state) => getDialogIdFromIdOrLabel(state.queryObject.dlg, state.appConfig));\n    const dialogInfos = useSelector((state) => state.appRuntimeInfo.dialogInfos); // ?? Immutable({});\n    const splashId = useSelector((state) => {\n        var _a;\n        return dialogJson.isSplash\n            ? dialogJson.id\n            : state.appConfig.dialogs && ((_a = state.appConfig.dialogs[Object.keys(state.appConfig.dialogs).find(dlgId => state.appConfig.dialogs[dlgId].isSplash)]) === null || _a === void 0 ? void 0 : _a.id);\n    }, shallowEqual);\n    // false for toc/page-click\n    const [isOpen, setIsOpen] = useState((props.isOpenByPage && currentDlgId === splashId) || (dialogJson.id === urlDlgId && (currentDlgId !== urlDlgId)) || currentDlgId === dialogJson.id);\n    const dlgId = props.isOpenByPage ? currentPageId + '-' + dialogJson.id : dialogJson.id;\n    const [isChecked, setCheckState] = useState((dialogInfos && dialogInfos[dlgId]) ? dialogInfos[dlgId].checked : false);\n    const dialogSizeMode = dialogJson.sizeMode[browserSizeMode] || dialogJson.sizeMode[BrowserSizeMode.Large];\n    const centered = dialogSizeMode.position === FixedPosition.MiddleCenter;\n    const resizeRef = useRef(null);\n    const [interactable, setInteractable] = useState(null);\n    const [fade, setFadeState] = useState(true);\n    const [cbxAnimation, setCbxAnimation] = useState(false);\n    const isDialogClosed = (dialogId) => {\n        var _a;\n        return (_a = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[dialogId]) === null || _a === void 0 ? void 0 : _a.isClosed;\n    };\n    // check if support resizing.\n    const supportResizing = () => {\n        return isDesignMode && (isExpressionMode || !isLayoutLock) && window.jimuConfig.isInBuilder;\n    };\n    const resizeHeight = () => {\n        setWindowHeight(window.innerHeight);\n    };\n    useEffect(() => {\n        if (supportResizing() && getAppConfigAction && interact) {\n            const debounceFunc = debounce(() => {\n                if (interactable) {\n                    interactable.unset();\n                }\n                if (resizeRef.current) {\n                    const currentBrowserSizeMode = dialogJson.sizeMode[browserSizeMode] ? browserSizeMode : BrowserSizeMode.Large;\n                    setInteractable(bindResizeHandler(interact, resizeRef.current, dialogJson, currentBrowserSizeMode, getAppConfigAction));\n                }\n            }, resizeRef.current ? 0 : 1000);\n            debounceFunc();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isDesignMode, isLayoutLock, currentDlgId, dialogJson.sizeMode[browserSizeMode], dialogSizeMode.position, dialogSizeMode.width, dialogSizeMode.height, getAppConfigAction, interact]);\n    useEffect(() => {\n        setCheckState(false);\n    }, [currentDlgId]);\n    useEffect(() => {\n        var _a;\n        Promise.all([loadJimuUIForFixed(), loadLayoutEntry()]).then(results => {\n            setJimuUI(results[0]);\n            setJimuLayout(results[1]);\n        });\n        if (window.jimuConfig.isInBuilder) {\n            if (!getAppConfigAction) {\n                import('jimu-for-builder').then(module => {\n                    setGetAppConfigAction(() => module.getAppConfigAction);\n                });\n            }\n            if (!interact) {\n                import('jimu-core/dnd').then(module => {\n                    setInteract(() => module.interact);\n                });\n            }\n        }\n        else if (!window.jimuConfig.isBuilder) { //for runtime\n            if ((_a = dialogSizeMode.height) === null || _a === void 0 ? void 0 : _a.includes('%')) { //no height for side dialog\n                window.addEventListener('resize', resizeHeight);\n            }\n        }\n        // dispatch dialog when:\n        // 1. splash when it's not closed by closedIds or localStorageIds.\n        // 2. page dialog when splash is closed already (in closedIds or localStorageIds).\n        const keys = getDialogUniqueKey(splashId, runtimeMode, timestamp);\n        const isInStore = readLocalStorage(keys.newKey) === 'true' || readLocalStorage(keys.oldKey) === 'true';\n        if (((dialogJson.isSplash && (!isDialogClosed(splashId) && (window.jimuConfig.isInBuilder || !isInStore))) ||\n            (props.isOpenByPage &&\n                ((splashId && (isDialogClosed(splashId) || (window.jimuConfig.isInBuilder || isInStore))) || !splashId))) &&\n            !checkIsInLocalStore({\n                currentPageId,\n                dialogProps: { dialogJson, runtime: props.runtime, isOpenByPage: props.isOpenByPage },\n                runtimeMode,\n                timestamp,\n                dialogInfos,\n                dispatch\n            }) &&\n            dialogJson.id !== urlDlgId &&\n            // (dialogJson.id !== urlDlgId || getAppStore().getState().appConfig.dialogs[currentDlgId].isSplash) && //except fixedBySplashOrPage.\n            dialogJson.id !== currentDlgId) {\n            dispatch(currentDialogChanged(dialogJson.id));\n            dispatch(activePagePartChanged(null));\n        }\n        // fixed -> fixed, only rerender\n        // splash->fixed, page->fixed, will call willUnmount.\n        return () => {\n            var _a;\n            if (isDesignMode && interactable) {\n                interactable.unset();\n            }\n            //for runtime & %\n            if (!window.jimuConfig.isBuilder && ((_a = dialogSizeMode.height) === null || _a === void 0 ? void 0 : _a.includes('%'))) {\n                window.removeEventListener('resize', resizeHeight);\n            }\n            const state = getAppStore().getState();\n            const dlgInfos = state.appRuntimeInfo.dialogInfos;\n            if (dlgInfos) {\n                const dlgInfo = dlgInfos[getDlgId()]; // get latest infos\n                if (dlgInfo === null || dlgInfo === void 0 ? void 0 : dlgInfo.canClose) { // && !dlgInfo?.isClosed){\n                    // closeDialog(dlgInfos);\n                    closeDialog(state);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const alertVersion = (_b = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[currentDlgId]) === null || _b === void 0 ? void 0 : _b.alertVersion;\n    useEffect(() => {\n        if (alertVersion >= 1) {\n            setCbxAnimation(true);\n            const debounceFunc = debounce(() => {\n                setCbxAnimation(false);\n            }, 800);\n            debounceFunc();\n        }\n    }, [alertVersion]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        const linkDialogId = readLocalStorage('exb-link-dialog');\n        if (linkDialogId) {\n            return;\n        }\n        let _isOpen = false;\n        if (dialogJson.isSplash || props.isOpenByPage || currentDlgId) {\n            const storeProps = {\n                currentPageId,\n                dialogProps: { dialogJson, runtime: props.runtime, isOpenByPage: props.isOpenByPage },\n                runtimeMode,\n                timestamp,\n                dialogInfos,\n                dispatch,\n                urlDlgId\n            };\n            _isOpen = !checkIsInLocalStore(storeProps);\n        }\n        if (_isOpen !== isOpen) {\n            setIsOpen(_isOpen);\n        }\n    });\n    // Click overlay\n    const onToggle = () => {\n        var _a, _b;\n        if (isDesignMode && !isExpressionMode) {\n            // clear current widget selection to select dialog when clicking mask.\n            clearSelection(dispatch);\n            return;\n        }\n        else if (dialogJson.interactionType && dialogJson.confirmBeforeClose && !isChecked) { // TODO: use info\n            const newDlgInfos = (dialogInfos || SeamlessImmutable({}))\n                .set(getDlgId(), {\n                canClose: false,\n                checked: false,\n                alertVersion: ((_b = (_a = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[getDlgId()]) === null || _a === void 0 ? void 0 : _a.alertVersion) !== null && _b !== void 0 ? _b : 0) + 1,\n                isClosed: false\n            });\n            dispatch(dialogInfosChanged(newDlgInfos));\n            return;\n        }\n        if (isOpen && dialogJson.closeWhenClickOverlay) {\n            closeDialog();\n        }\n        else {\n            clearSelection(dispatch);\n        }\n    };\n    const closeDialog = (state) => {\n        var _a, _b, _c;\n        disableWindowFocus = 'false';\n        if (dialogJson.isSplash || props.isOpenByPage) {\n            const storeProps = {\n                currentPageId,\n                dialogProps: { dialogJson, runtime: props.runtime },\n                runtimeMode,\n                timestamp,\n                dialogInfos: ((_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.dialogInfos) || dialogInfos,\n                dispatch\n            };\n            setDialogInLocalStore(storeProps);\n            const nextDlgId = getNextDlgId(state);\n            dispatch(currentDialogChanged(nextDlgId));\n            setIsOpen(false);\n            if (nextDlgId) {\n                // focus on first node of next dialog\n                const firstNode = (_b = document.getElementById(nextDlgId)) === null || _b === void 0 ? void 0 : _b.parentNode;\n                focusElementInKeyboardMode(firstNode);\n            }\n            else {\n                changeDialog(null); // update state to back to page tab on TOC.\n                dispatch(activePagePartChanged(PagePart.Body));\n            }\n        }\n        else {\n            setDialogInDialogInfos(((_c = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _c === void 0 ? void 0 : _c.dialogInfos) || dialogInfos, dialogJson.id, dispatch);\n            changeDialog(null);\n            dispatch(currentDialogChanged(null));\n            dispatch(activePagePartChanged(PagePart.Body));\n        }\n    };\n    /**\n     *\n     */\n    const getDlgId = () => {\n        return props.isOpenByPage ? currentPageId + '-' + dialogJson.id : dialogJson.id;\n    };\n    const getNextDlgId = (state) => {\n        var _a, _b, _c, _d, _e, _f, _g;\n        // when trying to open a fixed dlg from splash/page (no other behind dialogs), url is already changed before urlDlgId updated (use latest urlDlgId).\n        let newUrlDlg = urlDlgId;\n        let newCurrentDlgId = currentDlgId;\n        if (dialogJson.isSplash || props.isOpenByPage) {\n            newUrlDlg = state === null || state === void 0 ? void 0 : state.queryObject.dlg;\n            newCurrentDlgId = (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.currentDialogId;\n            // For TOC/dialog list, open next dlg when current is splash\n            if (window.jimuConfig.isInBuilder) { // open current currentDlgId instead of page dlgId\n                if (dialogJson.isSplash) {\n                    // open pageDlg by link or confirmation/close when splash is closed and pageDlg is set&open (when app starts).\n                    if (currentPageDlgId && !((_d = (_c = (state ? (_b = state.appRuntimeInfo) === null || _b === void 0 ? void 0 : _b.dialogInfos : dialogInfos)) === null || _c === void 0 ? void 0 : _c[currentPageId + '-' + currentPageDlgId]) === null || _d === void 0 ? void 0 : _d.isClosed)) {\n                        return currentPageDlgId;\n                    }\n                    // close splash when it `isClose` is true and not trying to open another fixed. (steps: confirmation/close triggers splash's unmount/close again.)\n                    if (dialogJson.isSplash && newUrlDlg === dialogJson.id && ((_g = (_f = (_e = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _e === void 0 ? void 0 : _e.dialogInfos) === null || _f === void 0 ? void 0 : _f[dialogJson.id]) === null || _g === void 0 ? void 0 : _g.isClosed)) {\n                        return null;\n                    }\n                }\n                return newUrlDlg;\n            }\n        }\n        let nextDlgId = (dialogJson.isSplash && (currentPageDlgId || newUrlDlg)) || (props.isOpenByPage && newCurrentDlgId !== newUrlDlg && newUrlDlg) || null;\n        // if((dialogJson.isSplash || props.isOpenByPage) && dialogJson.id !== nextDlgId){\n        // } else\n        if (newCurrentDlgId === nextDlgId) {\n            nextDlgId = null;\n        }\n        return nextDlgId;\n    };\n    const setCbxState = (checked) => {\n        setCheckState(checked);\n        const canClose = dialogJson.interactionType && dialogJson.confirmBeforeClose ? checked : true;\n        const newDlgInfos = (dialogInfos || SeamlessImmutable({})).set(getDlgId(), { canClose: canClose, checked: checked, isClosed: false });\n        dispatch(dialogInfosChanged(newDlgInfos));\n    };\n    const onModalFadeEnd = () => {\n        setFadeState(false);\n    };\n    if (!jimuUI || !jimuLayout) {\n        return null;\n    }\n    const { Modal } = jimuUI;\n    const Global = getJimuThemeModule().Global;\n    const hasBackDrop = dialogJson.blockPage || dialogJson.isOpenerDlg;\n    return (jsx(Modal, { \"aria-label\": dialogJson.label, autoFocus: disableWindowFocus !== 'true', isOpen: isOpen, fade: false, disableActivateOverlay: true, toggle: onToggle, centered: centered, css: getStylesForFixed(dialogSizeMode, browserHeight, dialogJson.interactionType), id: dialogJson.id, className: 'app-dialog w-100 h-100', wrapClassName: `app-dialog-wrap app-dialog-wrap-${dialogJson.id} ${hasBackDrop === true ? '' : 'no-backdrop'}`, modalClassName: 'app-dialog-modal', backdropClassName: 'app-dialog-backdrop', backdrop: hasBackDrop === true, \"aria-modal\": hasBackDrop || false, contentClassName: 'app-dialog-content', onOpened: onModalFadeEnd },\n        jsx(Global, { styles: getGlobalStylesForFixed(dialogJson, isOpen, browserHeight, dialogSizeMode) }),\n        jsx(\"div\", { className: 'app-dialog-resize-container', css: getResizeStyle(), ref: el => { resizeRef.current = el; } },\n            jsx(\"div\", { className: 'w-100 h-100' }, isOpen && !fade &&\n                jsx(DialogAnimation, { dialogJson: dialogJson, isOpen: isOpen, jimuUI: jimuUI, jimuLayout: jimuLayout, cbxAnimation: cbxAnimation, messages: messages, isChecked: isChecked, setCbxState: setCbxState, closeDialog: closeDialog, loadingCallBack: (loading) => null })),\n            supportResizing() &&\n                jsx(\"div\", { className: classNames('app-dialog-resize-handlers') }, isDesignMode && jsx(React.Fragment, null,\n                    (!((_c = dialogSizeMode === null || dialogSizeMode === void 0 ? void 0 : dialogSizeMode.position) === null || _c === void 0 ? void 0 : _c.includes('TOP')) || dialogSizeMode.heightMode === 'STRETCH') &&\n                        jsx(\"span\", { key: '1', className: 'resize-handler dialog-resize-top' },\n                            jsx(\"div\", { className: 'resize-handler-icon h-100' })),\n                    (!((_d = dialogSizeMode === null || dialogSizeMode === void 0 ? void 0 : dialogSizeMode.position) === null || _d === void 0 ? void 0 : _d.includes('BOTTOM')) || dialogSizeMode.heightMode === 'STRETCH') &&\n                        jsx(\"span\", { key: '2', className: 'resize-handler dialog-resize-bottom' },\n                            jsx(\"div\", { className: 'resize-handler-icon h-100' })),\n                    (!((_e = dialogSizeMode === null || dialogSizeMode === void 0 ? void 0 : dialogSizeMode.position) === null || _e === void 0 ? void 0 : _e.includes('LEFT')) || dialogSizeMode.widthMode === 'STRETCH') &&\n                        jsx(\"span\", { key: '3', className: 'resize-handler dialog-resize-left' },\n                            jsx(\"div\", { className: 'resize-handler-icon w-100' })),\n                    (!((_f = dialogSizeMode === null || dialogSizeMode === void 0 ? void 0 : dialogSizeMode.position) === null || _f === void 0 ? void 0 : _f.includes('RIGHT')) || dialogSizeMode.widthMode === 'STRETCH') &&\n                        jsx(\"span\", { key: '4', className: 'resize-handler dialog-resize-right' },\n                            jsx(\"div\", { className: 'resize-handler-icon w-100' })))))));\n}\nconst useFormatMessage = () => {\n    const intl = useIntl();\n    return React.useCallback((id, values) => {\n        return intl.formatMessage({ id: id, defaultMessage: defaultMessages[id] }, values);\n    }, [intl]);\n};\n/**\n * Check if dialog is in local storage or dialogInfos(isClosed=true)\n * Always show fixed dlg triggered by link even when it's a confirmation dlg.\n */\nfunction checkIsInLocalStore(storeProps) {\n    var _a, _b;\n    const { currentPageId, dialogProps, runtimeMode, timestamp, dialogInfos, dispatch, urlDlgId } = storeProps;\n    const { dialogJson, isOpenByPage, runtime } = dialogProps;\n    let isInStore = false;\n    // splash or page dialog can't be url dlg by design.\n    if (urlDlgId === dialogJson.id && !dialogJson.isSplash && !isOpenByPage && !dialogJson.confirmBeforeClose) {\n        return isInStore;\n    }\n    if (dialogJson.isSplash || isOpenByPage) {\n        const targetDlgId = dialogJson.isSplash ? dialogJson.id : `${currentPageId}-${dialogJson.id}`;\n        if (runtime && dialogJson.interactionType &&\n            ((dialogJson.confirmBeforeClose && !dialogJson.alwaysShowConfirmation) || !dialogJson.confirmBeforeClose)) {\n            const keys = getDialogUniqueKey(targetDlgId, runtimeMode, timestamp);\n            isInStore = readLocalStorage(keys.newKey) === 'true' || readLocalStorage(keys.oldKey) === 'true';\n            if (isInStore) {\n                setDialogInDialogInfos(dialogInfos, targetDlgId, dispatch); // save dlgInfo from localStore\n            }\n            if (!dialogJson.confirmBeforeClose && !isInStore) {\n                isInStore = (_a = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[targetDlgId]) === null || _a === void 0 ? void 0 : _a.isClosed;\n            }\n        }\n        else {\n            isInStore = (_b = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[targetDlgId]) === null || _b === void 0 ? void 0 : _b.isClosed;\n        }\n    }\n    return isInStore;\n}\nfunction setDialogInLocalStore(storeProps) {\n    var _a;\n    const { currentPageId, dialogProps, runtimeMode, timestamp, dialogInfos, dispatch } = storeProps;\n    const { dialogJson, runtime } = dialogProps;\n    const targetDlgId = dialogJson.isSplash ? dialogJson.id : `${currentPageId}-${dialogJson.id}`;\n    if (runtime && dialogJson.interactionType &&\n        ((dialogJson.confirmBeforeClose && !dialogJson.alwaysShowConfirmation) || (!dialogJson.confirmBeforeClose && ((_a = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[targetDlgId]) === null || _a === void 0 ? void 0 : _a.checked)))) {\n        setLocalStorage(getDialogUniqueKey(targetDlgId, runtimeMode, timestamp).newKey, 'true');\n    }\n    setDialogInDialogInfos(dialogInfos, targetDlgId, dispatch);\n}\nfunction setDialogInDialogInfos(dialogInfos, targetDlgId, dispatch) {\n    var _a;\n    if (!((_a = dialogInfos === null || dialogInfos === void 0 ? void 0 : dialogInfos[targetDlgId]) === null || _a === void 0 ? void 0 : _a.isClosed)) {\n        dialogInfos = (dialogInfos || SeamlessImmutable({})).setIn([targetDlgId, 'isClosed'], true);\n        dispatch(dialogInfosChanged(dialogInfos));\n    }\n}\n/**\n * Get dlg unique key\n * old: exb-appId-draft-dlgId-timestamp\n   new: exb-appId-draft-timestamp-dlgId\n * @param dialogId\n * @param runtimeMode\n * @param timestamp\n * @returns string\n */\nconst getDialogUniqueKey = (dialogId, runtimeMode, timestamp) => {\n    const localAppKey = getLocalStorageAppKey();\n    const oldKey = `${localAppKey}-${runtimeMode === 'draft' ? 'draft' : 'release'}-${dialogId}-${timestamp}`;\n    const newKey = `${localAppKey}-${runtimeMode}-${timestamp}-${dialogId}`;\n    return { oldKey, newKey };\n};\nfunction loadJimuUIForFixed() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield import('jimu-ui');\n    });\n}\nexport default FixedDialog;\n","import { css, getAppStore } from 'jimu-core';\nconst oppositePosition = {\n    left: 'right',\n    right: 'left',\n    top: 'bottom',\n    bottom: 'top'\n};\nfunction opposite(position, isRTL) {\n    if (!isRTL) {\n        return oppositePosition[position];\n    }\n    return (position === 'left' || position === 'right') ? position : oppositePosition[position];\n}\nfunction flipPlacement(position, isRTL) {\n    if (!isRTL)\n        return position;\n    if (position === 'left')\n        return 'right';\n    if (position === 'right')\n        return 'left';\n    return position;\n}\nexport function popperPointer(arrowStyle) {\n    var _a;\n    const placements = ['left', 'right', 'top', 'bottom'];\n    const isRTL = getAppStore().getState().appContext.isRTL;\n    const border = arrowStyle === null || arrowStyle === void 0 ? void 0 : arrowStyle.border;\n    const background = arrowStyle === null || arrowStyle === void 0 ? void 0 : arrowStyle.background;\n    const size = ((_a = arrowStyle === null || arrowStyle === void 0 ? void 0 : arrowStyle.size) !== null && _a !== void 0 ? _a : 12) + 'px';\n    return css `\r\n    .jimu-popper--arrow {\r\n      position: absolute;\r\n      &::before,\r\n      &::after {\r\n        content: \" \";\r\n        display: block;\r\n        width: 0;\r\n        height: 0;\r\n        border: ${size} solid transparent;\r\n        position: absolute;\r\n      }\r\n    }\r\n    &[data-popper-placement^=\"top\"],\r\n    &[data-popper-placement^=\"bottom\"] {\r\n      .jimu-popper--arrow {\r\n        ${isRTL ? 'right: 50%' : 'left: 50%'};\r\n        &::before,\r\n        &::after {\r\n          transform: translateX(-50%);\r\n        }\r\n      }\r\n    }\r\n    &[data-popper-placement^=\"left\"],\r\n    &[data-popper-placement^=\"right\"] {\r\n      .jimu-popper--arrow {\r\n        top: 50%;\r\n        &::before,\r\n        &::after {\r\n          transform: translateY(-50%);\r\n        }\r\n      }\r\n    }\r\n    ${placements.map((placement) => {\n        var _a, _b;\n        return css `\r\n      &[data-popper-placement^=\"${placement}\"] {\r\n        .jimu-popper--arrow {\r\n          ${opposite(placement, isRTL)}: -${size};\r\n          &::before,\r\n          &::after {\r\n            border-${opposite(placement, isRTL)}-width: 0;\r\n            border-${flipPlacement(placement, isRTL)}-color: ${(_a = border === null || border === void 0 ? void 0 : border.color) !== null && _a !== void 0 ? _a : 'inherit'};\r\n            ${opposite(placement, isRTL)}: 0;\r\n          }\r\n          &::after {\r\n            border-${flipPlacement(placement, isRTL)}-color: ${background !== null && background !== void 0 ? background : 'inherit'};\r\n            ${opposite(placement, isRTL)}: ${(_b = border === null || border === void 0 ? void 0 : border.width) !== null && _b !== void 0 ? _b : '1px'};\r\n          }\r\n        }\r\n      }\r\n    `;\n    })}\r\n  `;\n}\n","import { css, polished, Immutable } from 'jimu-core';\nconst toCSSTextUnderLine = (text) => {\n    if (!text) {\n        return 'none';\n    }\n    if (text.underline && text.strike) {\n        return 'underline line-through';\n    }\n    else if (text.underline) {\n        return 'underline';\n    }\n    else if (text.strike) {\n        return 'line-through';\n    }\n    return 'none';\n};\n/** get common styles for an HTML element as a CSS basic box model */\nexport function getBoxStyles(variables) {\n    var _a, _b;\n    return variables && css `\r\n    color: ${variables.color};\r\n    background-color: ${variables.bg};\r\n    ${variables.border && css `\r\n      border-width: ${variables.border.width};\r\n      ${variables.border.width && `border-style: ${(_b = (_a = variables.border) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : 'solid'};`}\r\n      border-color: ${variables.border.color};\r\n    `}\r\n    border-radius: ${variables.borderRadius};\r\n    box-shadow: ${variables.shadow};\r\n    font-weight: ${variables.bold ? 'bold' : variables.fontWeight};\r\n    text-decoration: ${variables.decoration || toCSSTextUnderLine(variables)};\r\n    font-style: ${variables.italic ? 'italic' : 'normal'};\r\n  `;\n}\n/** get common interpolation styles for an HTML element as a CSS basic box model */\nexport function getBoxInterpolationStyles(variables) {\n    var _a, _b;\n    return variables && `\r\n    color: ${variables.color};\r\n    background-color: ${variables.bg};\r\n    ${variables.border && `\r\n      border-width: ${variables.border.width};\r\n      ${variables.border.width && `border-style: ${(_b = (_a = variables.border) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : 'solid'};`}\r\n      border-color: ${variables.border.color};\r\n    `}\r\n    border-radius: ${variables.borderRadius};\r\n    box-shadow: ${variables.shadow};\r\n    font-weight: ${variables.bold ? 'bold' : variables.fontWeight};\r\n    text-decoration: ${variables.decoration || toCSSTextUnderLine(variables)};\r\n    font-style: ${variables.italic ? 'italic' : 'normal'};\r\n  `;\n}\nconst RotationMapping = {\n    up: '180deg',\n    down: null,\n    left: '90deg',\n    right: '-90deg'\n};\nexport function caret(direction) {\n    const rotationDeg = RotationMapping[direction];\n    return `\r\n    ${rotationDeg && `\r\n      transform: rotate(${rotationDeg});\r\n    `}\r\n  `;\n}\nexport function hover(content) {\n    return `\r\n    &:hover {\r\n      ${content}\r\n    }\r\n  `;\n}\nexport function hoverFocus(content) {\n    return `\r\n    &:hover,\r\n    &:focus {\r\n      ${content}\r\n    }\r\n  `;\n}\nexport function navDivider(color, margin) {\n    return `\r\n    height: 0;\r\n    margin: ${margin};\r\n    overflow: hidden;\r\n    border-top: 1px solid ${color};\r\n  `;\n}\nexport function formValidation(isValid, theme) {\n    const stateColor = theme && theme.colors\n        ? isValid ? theme.colors.success : theme.colors.danger\n        : isValid ? 'green' : 'red';\n    const baseClassName = isValid ? 'valid' : 'invalid';\n    return css `\r\n  &.is-${baseClassName} {\r\n    border-color: ${stateColor || (isValid ? 'green' : 'red')};\r\n    ${!isValid && `background: ${polished.rgba(stateColor, 0.1)}`};\r\n  }\r\n  `;\n}\nexport const createFocusedStyles = (colors) => {\n    return Immutable({\n        color: colors.palette.primary[700],\n        width: '2px',\n        offset: '2px'\n    });\n};\nexport * from './pointer';\nexport * from './coloration';\n","import { css, urlUtils } from 'jimu-core';\nexport const getFontFaces = () => {\n    return css `\r\n    @import url('${urlUtils.getFixedRootPath()}jimu-theme/base/assets/fonts/avenir/fonts.css');\r\n  `;\n};\n","import { React } from 'jimu-core';\nimport { GlobalStyle } from '../../../__emotion__';\nimport { getFontFaces } from '../../../base/assets/fonts';\nexport const defaultFonts = [\n    'Avenir Next',\n    'Calibri',\n    'PmingLiu',\n    'Impact',\n    'Georgia',\n    'Arial',\n    'Times New Roman',\n    'SimHei',\n    'Microsoft YaHei'\n];\nconst fontStyle = getFontFaces();\nconst CacheFonts = {};\nexport const loadFontStyleSheet = (font) => {\n    const { name, url } = font;\n    if (CacheFonts[name])\n        return Promise.resolve(CacheFonts[name]);\n    return fetch(url).then(() => {\n        CacheFonts[name] = name;\n        return name;\n    });\n};\nexport const FontLoader = (props) => {\n    const { theme } = props;\n    const customFonts = theme.typography.customFonts;\n    React.useEffect(() => {\n        const promises = customFonts === null || customFonts === void 0 ? void 0 : customFonts.map(customFont => loadFontStyleSheet(customFont));\n        if (promises === null || promises === void 0 ? void 0 : promises.length) {\n            Promise.all(promises).then(() => null).catch(error => {\n                console.log(error);\n            });\n        }\n    }, [customFonts]);\n    return (React.createElement(GlobalStyle, { theme: theme, styles: fontStyle }));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { FillType } from '../types';\nimport { stringOfLinearUnit } from './utils';\nimport { classNames, lodash, polished, css } from 'jimu-core';\nexport const expandStyleArray = (dataArray) => {\n    if (!dataArray || dataArray.length === 0) {\n        return [0, 0, 0, 0];\n    }\n    else if (dataArray.length === 1) {\n        return [dataArray[0], dataArray[0], dataArray[0], dataArray[0]];\n    }\n    else if (dataArray.length === 2) { // top/bottom, left/right\n        return [dataArray[0], dataArray[1], dataArray[0], dataArray[1]];\n    }\n    else if (dataArray.length === 3) {\n        return [dataArray[0], dataArray[1], dataArray[2], 0];\n    }\n    else {\n        return [dataArray[0], dataArray[1], dataArray[2], dataArray[3]];\n    }\n};\nexport const toCSSBorder = (borderStyle) => {\n    if (!borderStyle || !borderStyle.width || !borderStyle.color) {\n        return;\n    }\n    const { width, type, color } = borderStyle;\n    return `${stringOfLinearUnit(width)} ${type} ${color}`;\n};\nexport const toCSSMargin = (marginStyle) => {\n    if (!marginStyle) {\n        return;\n    }\n    const { number, unit } = marginStyle;\n    const margin = expandStyleArray(number);\n    return `${margin[0]}${unit} ${margin[1]}${unit} ${margin[2]}${unit} ${margin[3]}${unit}`;\n};\nexport const toCSSPadding = (paddingStyle) => {\n    return toCSSMargin(paddingStyle);\n};\nexport const toCSSBoxshadow = (boxShadow) => {\n    if (!boxShadow || !boxShadow.color || boxShadow.presetStyle) {\n        return;\n    }\n    const { offsetX, offsetY, blur, spread, color } = boxShadow;\n    return `${stringOfLinearUnit(offsetX)} ${stringOfLinearUnit(offsetY)} ${stringOfLinearUnit(blur)} ${stringOfLinearUnit(spread)} ${color}`;\n};\nexport const toCSSBorderRadius = (borderRadius) => {\n    if (!borderRadius) {\n        return;\n    }\n    const { number, unit } = borderRadius;\n    const rArray = expandStyleArray(number);\n    return `${rArray[0]}${unit} ${rArray[1]}${unit} ${rArray[2]}${unit} ${rArray[3]}${unit}`;\n};\nexport const toCSSWidth = (widthStyle) => {\n    if (!(widthStyle === null || widthStyle === void 0 ? void 0 : widthStyle.value)) {\n        return;\n    }\n    const { value } = widthStyle;\n    return stringOfLinearUnit(value);\n};\nexport const toCSSHeight = (heightStyle) => {\n    if (!(heightStyle === null || heightStyle === void 0 ? void 0 : heightStyle.value)) {\n        return;\n    }\n    const { value } = heightStyle;\n    return stringOfLinearUnit(value);\n};\nexport const toCSSTextAlign = (text) => {\n    if (!text) {\n        return;\n    }\n    return `${text.align}`;\n};\nexport const toCSSTextUnderLine = (text) => {\n    if (!text) {\n        return 'none';\n    }\n    if (text.underline && text.strike) {\n        return 'underline line-through';\n    }\n    else if (text.underline) {\n        return 'underline';\n    }\n    else if (text.strike) {\n        return 'line-through';\n    }\n    return 'none';\n};\nexport const toCSSTextFontStyle = (text) => {\n    if (!text) {\n        return;\n    }\n    const fontStyle = text.italic ? 'italic' : 'normal';\n    return fontStyle;\n};\nexport const toCSSTextFontWeight = (text) => {\n    if (!text) {\n        return;\n    }\n    const fontWeight = text.bold ? 'bold' : 'normal';\n    return fontWeight;\n};\nexport const toCSSTextFontSize = (text) => {\n    if (!text) {\n        return;\n    }\n    return text.size;\n};\nexport const toCSSTextFontFamily = (text) => {\n    if (!text) {\n        return;\n    }\n    return text.font;\n};\nexport const toCSSTextColor = (text) => {\n    if (!text) {\n        return;\n    }\n    return `${text.color}`;\n};\nexport const toCSSTextStyle = (text) => {\n    if (!text)\n        return;\n    const style = {\n        fontStyle: toCSSTextFontStyle(text),\n        fontWeight: toCSSTextFontWeight(text),\n        fontSize: toCSSTextFontSize(text),\n        fontFamily: toCSSTextFontFamily(text),\n        textDecoration: toCSSTextUnderLine(text),\n        textAlign: toCSSTextAlign(text),\n        color: toCSSTextColor(text)\n    };\n    if (text === null || text === void 0 ? void 0 : text.background) {\n        style.background = text.background;\n    }\n    if (text === null || text === void 0 ? void 0 : text.letterspace) {\n        style.letterSpacing = text.letterspace;\n    }\n    if (text === null || text === void 0 ? void 0 : text.linespace) {\n        style.lineHeight = text.linespace;\n    }\n    return style;\n};\nexport const resolveTextStyle = (text = {}) => {\n    return css `\r\n    font-style: ${toCSSTextFontStyle(text)};\r\n    font-weight: ${toCSSTextFontWeight(text)};\r\n    font-size: ${toCSSTextFontSize(text)};\r\n    font-family: ${toCSSTextFontFamily(text)};\r\n    text-decoration: ${toCSSTextUnderLine(text)};\r\n    text-align: ${toCSSTextAlign(text)};\r\n    color: ${toCSSTextColor(text)};\r\n    background: ${text.background};\r\n    letter-spacing: ${text.letterspace};\r\n    line-height: ${text.linespace};\r\n  `;\n};\nexport function toCSSTransform(transform) {\n    let value = '';\n    if ((transform === null || transform === void 0 ? void 0 : transform.rotate) > 0 || (transform === null || transform === void 0 ? void 0 : transform.rotate) < 0) {\n        value = `${value} rotate(${transform.rotate}deg)`;\n    }\n    return value;\n}\nexport const toCSSStyle = (styleSettings) => {\n    if (!styleSettings) {\n        return {};\n    }\n    const { background = {}, backgroundColor, border, borderLeft, borderRight, borderTop, borderBottom, margin, padding, boxShadow, borderRadius, width, text, height, transform } = styleSettings, others = __rest(styleSettings, [\"background\", \"backgroundColor\", \"border\", \"borderLeft\", \"borderRight\", \"borderTop\", \"borderBottom\", \"margin\", \"padding\", \"boxShadow\", \"borderRadius\", \"width\", \"text\", \"height\", \"transform\"]);\n    const backgroundStyle = toBackgroundStyle(background);\n    const textStyle = toCSSTextStyle(text);\n    const styles = lodash.assign({}, Object.assign({ backgroundColor: backgroundColor, margin: toCSSMargin(margin), padding: toCSSPadding(padding), boxShadow: toCSSBoxshadow(boxShadow), borderRadius: toCSSBorderRadius(borderRadius), width: toCSSWidth(width), height: toCSSHeight(height), transform: toCSSTransform(transform), border: toCSSBorder(border) }, others), backgroundStyle, textStyle);\n    Object.keys({ borderLeft, borderRight, borderTop, borderBottom }).forEach((key) => {\n        if (styleSettings[key]) {\n            styles[key] = toCSSBorder(styleSettings[key]);\n        }\n    });\n    // remove null style\n    const keys = Object.keys(styles);\n    keys.forEach((key) => {\n        if (styles[key] == null) {\n            delete styles[key];\n        }\n    });\n    return styles;\n};\nexport const toBackgroundStyle = ({ color, image, fillType }) => {\n    if (!color && !image) {\n        return;\n    }\n    return {\n        backgroundImage: image && image.url ? `url(${image.url})` : undefined,\n        backgroundColor: color,\n        backgroundPosition: 'center',\n        backgroundRepeat: fillType === 'tile' ? 'repeat' : 'no-repeat',\n        backgroundSize: classNames({ contain: fillType === 'fit' }, { cover: fillType === 'fill' }, { auto: fillType === 'tile' || fillType === 'center' }, { '100% 100%': fillType === 'stretch' })\n    };\n};\nexport const toBackgroundEmotionStyle = ({ color, image, fillType }) => {\n    if (!color && !image) {\n        return;\n    }\n    let size;\n    switch (fillType) {\n        case FillType.FIT:\n            size = 'contain';\n            break;\n        case FillType.FILL:\n            size = 'cover';\n            break;\n        case FillType.TILE:\n        case FillType.CENTER:\n            size = 'auto';\n            break;\n        case FillType.STRETCH:\n            size = '100% 100%';\n            break;\n    }\n    return css `\r\n    background-image: ${image && image.url ? `url(${image.url})` : null};\r\n    background-color: ${color};\r\n    background-position: center;\r\n    background-repeat: ${fillType === 'tile' ? 'repeat' : 'no-repeat'};\r\n    background-size: ${size};\r\n  `;\n};\nexport const remToPixel = (pxValue, base) => {\n    const [pxNumber, pxUnit] = polished.getValueAndUnit(pxValue);\n    if (pxUnit !== 'rem')\n        return pxValue;\n    let rootFontSizeAsPx = 16;\n    const rootFontSize = base || '100%';\n    const [rootFontsizeNumber, rootFontsizeUnit] = polished.getValueAndUnit(rootFontSize);\n    if (rootFontsizeUnit === '%') {\n        rootFontSizeAsPx = rootFontsizeNumber * 0.01 * 16;\n    }\n    else if (rootFontsizeUnit === 'px') {\n        rootFontSizeAsPx = rootFontsizeNumber;\n    }\n    return pxNumber * rootFontSizeAsPx + 'px';\n};\n/**\n * The following methods are for navigation only\n */\nexport const getButtonIconStyle = (variant, useForNavLink) => {\n    var _a, _b, _c, _d, _e;\n    const className = useForNavLink ? '.jimu-nav-link-wrapper' : '.icon-btn-sizer';\n    return css `\r\n   font-size: ${(variant === null || variant === void 0 ? void 0 : variant.size) ? `${polished.rem(variant.size)}!important` : ''};\r\n   ${className} > .jimu-icon {\r\n    width: ${((_a = variant === null || variant === void 0 ? void 0 : variant.icon) === null || _a === void 0 ? void 0 : _a.size) ? polished.rem((_b = variant === null || variant === void 0 ? void 0 : variant.icon) === null || _b === void 0 ? void 0 : _b.size) : ''};\r\n    height: ${((_c = variant === null || variant === void 0 ? void 0 : variant.icon) === null || _c === void 0 ? void 0 : _c.size) ? polished.rem((_d = variant === null || variant === void 0 ? void 0 : variant.icon) === null || _d === void 0 ? void 0 : _d.size) : ''};\r\n    color: ${(_e = variant === null || variant === void 0 ? void 0 : variant.icon) === null || _e === void 0 ? void 0 : _e.color};\r\n   }\r\n `;\n};\nexport const getButtonStyleByState = (variants, useForNavLink) => {\n    const regular = variants === null || variants === void 0 ? void 0 : variants.default;\n    const active = variants === null || variants === void 0 ? void 0 : variants.active;\n    const hover = variants === null || variants === void 0 ? void 0 : variants.hover;\n    const disabled = variants === null || variants === void 0 ? void 0 : variants.disabled;\n    return css `\r\n    .jimu-btn {\r\n      &:not(:disabled):not(.disabled) {\r\n        ${getButtonIconStyle(regular, useForNavLink)};\r\n      }\r\n      ${hover && css `\r\n      &:not(:disabled):not(.disabled):hover {\r\n          ${getButtonIconStyle(hover, useForNavLink)};\r\n        }\r\n      ${active && css `\r\n        &:not(:disabled):not(.disabled).active,\r\n        &[aria-expanded=\"true\"] {\r\n          ${getButtonIconStyle(active, useForNavLink)}\r\n        }\r\n        &:not(:disabled):not(.disabled) {\r\n          cursor: pointer;\r\n        }\r\n      `}\r\n      ${disabled && css `\r\n        &.disabled,\r\n        &:disabled {\r\n          ${getButtonIconStyle(disabled, useForNavLink)}\r\n        }\r\n      `}\r\n    `}\r\n    }\r\n  `;\n};\n","import { css, polished, getAppStore } from 'jimu-core';\nimport { getBoxStyles } from 'jimu-theme';\nfunction getRootStyles(root) {\n    return css `\r\n    display: block;\r\n    width: 100%;\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    &:focus,\r\n    &:active {\r\n      outline: none;\r\n    }\r\n    &::-moz-focus-outer {\r\n      border: none;\r\n      outline: none;\r\n    }\r\n    ${getBoxStyles(root)}\r\n    padding: 0;\r\n    cursor: pointer;\r\n    &.rtl {\r\n      transform: rotate(180deg);\r\n    }\r\n  `;\n}\nfunction getThumbStyles(stateVars, hideThumb) {\n    const { default: defaultVars, hover: hoverVars } = stateVars;\n    return css `\r\n    visibility: ${hideThumb ? 'hidden' : 'visible'};\r\n    ${getBoxStyles(defaultVars)}\r\n    box-sizing: border-box;\r\n    transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; /* $btn-transition */\r\n    ${hoverVars && css `\r\n      &:hover {\r\n        ${getBoxStyles(hoverVars)}\r\n      }\r\n    `}\r\n  `;\n}\nfunction getTrackStyles(stateVars) {\n    const { default: defaultVars } = stateVars;\n    return css `\r\n    ${getBoxStyles(defaultVars)}\r\n  `;\n}\nfunction getVariantStyles(variantVars, hideThumb, isRTL) {\n    const { track, thumb, progress } = variantVars;\n    return css `\r\n  &[type=\"range\"] {\r\n    /* thumb - webkit */\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      ${getThumbStyles(thumb, hideThumb)};\r\n    }\r\n    /* thumb - moz */\r\n    &::-moz-range-thumb {\r\n      -moz-appearance: none;\r\n      ${getThumbStyles(thumb, hideThumb)};\r\n    }\r\n    /* thumb - ms */\r\n    &::-ms-thumb {\r\n      ${getThumbStyles(thumb, hideThumb)};\r\n      margin-top: 0;\r\n    }\r\n    /* track - webkit */\r\n    &::-webkit-slider-runnable-track {\r\n      ${getBoxStyles(track)};\r\n      background: linear-gradient(to ${isRTL ? 'left' : 'right'}, ${progress.default.bg}, ${progress.default.bg}) ${track.bg} no-repeat left;\r\n      background-size: 50% 100%, 100% 100%;\r\n    }\r\n    /* track - moz */\r\n    &::-moz-range-track {\r\n      ${getBoxStyles(track)};\r\n    }\r\n    /* track - ms */\r\n    &::-ms-track {\r\n      ${getBoxStyles(track)};\r\n    }\r\n    /* fill - moz */\r\n    &::-moz-range-progress {\r\n      ${getTrackStyles(progress)};\r\n    }\r\n    /* fill - ms */\r\n    &::-ms-fill-lower {\r\n      ${getTrackStyles(progress)};\r\n    }\r\n    &::-ms-fill-upper {\r\n      display: none;\r\n    }\r\n    /* tooltip - ms */\r\n    &::-ms-tooltip {\r\n      display: none;\r\n    }\r\n    &:focus {\r\n      &::-webkit-slider-thumb {\r\n        box-shadow: ${thumb.focus.shadow};\r\n      }\r\n      &::-moz-range-thumb {\r\n        box-shadow: ${thumb.focus.shadow};\r\n      }\r\n    }\r\n  }`;\n}\nfunction getSizeStyles(size) {\n    const { root, thumb } = size;\n    return css `\r\n    height: ${thumb};\r\n    /* thumb - webkit */\r\n    &::-webkit-slider-runnable-track {\r\n      height: ${root};\r\n    }\r\n    /* track - moz */\r\n    &::-moz-range-track {\r\n      height: ${root};\r\n    }\r\n    /* track - ms */\r\n    &::-ms-track {\r\n      height: ${root};\r\n    }\r\n\r\n    /* fill - moz */\r\n    &::-moz-range-progress {\r\n      height: ${root};\r\n    }\r\n    /* fill - ms */\r\n    &::-ms-fill-lower {\r\n      height: ${root};\r\n    }\r\n\r\n    /* thumb - webkit */\r\n    &::-webkit-slider-thumb {\r\n      width: ${thumb};\r\n      height: ${thumb};\r\n      margin-top: -${polished.math(`\r\n        (${thumb} - ${root}) * 0.5\r\n      `)};\r\n    }\r\n\r\n    /* thumb - moz */\r\n    &::-moz-range-thumb {\r\n      width: ${thumb};\r\n      height: ${thumb};\r\n      margin-top: - ${polished.math(`\r\n        (${thumb} - ${root}) * 0.5\r\n      `)};\r\n    }\r\n\r\n    /* thumb - ms */\r\n    &::-ms-thumb {\r\n      width: ${thumb};\r\n      height: ${thumb};\r\n      margin-top: 0;\r\n    }\r\n  `;\n}\nexport const sliderStyles = (props) => {\n    var _a, _b, _c;\n    const size = (_a = props.size) !== null && _a !== void 0 ? _a : 'default';\n    const theme = props.theme;\n    const hideThumb = props.hideThumb;\n    const sliderVars = (_b = theme === null || theme === void 0 ? void 0 : theme.components) === null || _b === void 0 ? void 0 : _b.slider;\n    const { sizes, variants } = sliderVars;\n    const type = 'default';\n    const isRTL = getAppStore().getState().appContext.isRTL;\n    return sliderVars && css `\r\n    ${getRootStyles((_c = variants[type]) === null || _c === void 0 ? void 0 : _c.root)}\r\n    ${getSizeStyles(sizes[size])}\r\n    ${getVariantStyles(variants[type], hideThumb, isRTL)}\r\n  `;\n};\nexport const sliderStyleUtils = { getRootStyles, getThumbStyles, getTrackStyles, getVariantStyles, getSizeStyles };\n","/* eslint-disable prefer-const */\nimport { css, polished } from 'jimu-core';\nimport { hoverFocus, getBoxStyles } from 'jimu-theme';\nexport function buttonSize(sizeVars) {\n    return sizeVars && css `\r\n    padding: ${sizeVars.paddingY} ${sizeVars.paddingX};\r\n    font-size: ${sizeVars.fontSize};\r\n    line-height: ${sizeVars.lineHeight};\r\n    border-radius: ${sizeVars.borderRadius};\r\n    > .icon-btn-sizer {\r\n      min-width: ${sizeVars.lineHeight};\r\n      min-height: ${sizeVars.lineHeight};\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin: auto;\r\n    }\r\n  `;\n}\nexport function buttonVariantStyles(buttonVars) {\n    const { default: defaultVars, hover: hoverVars, active: activeVars, focus: focusVars, disabled: disabledVars } = buttonVars;\n    return buttonVars && defaultVars && css `\r\n    ${getBoxStyles(defaultVars)};\r\n    ${hoverVars && css `\r\n      &:hover,\r\n      &[aria-expanded=\"true\"] {\r\n        ${getBoxStyles(hoverVars)};\r\n      }\r\n    `}\r\n    ${focusVars && css `\r\n      &,\r\n      &:not(:disabled):not(.disabled).active{\r\n        &:focus,\r\n        &.focus {\r\n          /* ${getBoxStyles(focusVars)}\r\n          outline: none; */\r\n        }\r\n      }\r\n    `}\r\n    ${activeVars && css `\r\n      &:not(:disabled):not(.disabled).active {\r\n      /* &[aria-expanded=\"true\"] { */\r\n        ${getBoxStyles(activeVars)}\r\n      }\r\n      &:not(:disabled):not(.disabled) {\r\n        cursor: pointer;\r\n      }\r\n    `}\r\n\r\n    ${disabledVars && css `\r\n      &.disabled,\r\n      &:disabled {\r\n        &,\r\n        &:hover {\r\n          ${getBoxStyles(disabledVars)}\r\n        }\r\n      }`}\r\n  `;\n}\nexport function getIconButtonPadding(buttonSizeVars) {\n    if (!buttonSizeVars)\n        return;\n    const { fontSize, lineHeight, paddingY } = buttonSizeVars;\n    // Assuming the units are the same for font size and padding:\n    // TODO: add more check for different units?\n    let unitlessFontSize;\n    let unit;\n    let extraPadding = 0;\n    let lineHeightUnit = 0;\n    [unitlessFontSize, unit] = polished.getValueAndUnit(fontSize);\n    const [unitlessPaddingY, paddingYUnit] = polished.getValueAndUnit(paddingY);\n    lineHeightUnit = polished.getValueAndUnit(lineHeight)[1];\n    // we force line height to be 1 for icon buttons,\n    // thus need to add more space if the original line height is larger than 1\n    if ((unitlessFontSize - 1) > 0) {\n        extraPadding = (unitlessFontSize - 1) * 0.5;\n    }\n    // if line height has unit\n    if (lineHeightUnit && paddingYUnit) {\n        return `${(unitlessPaddingY)}${paddingYUnit}`;\n    }\n    return `${(extraPadding + unitlessFontSize * (lineHeight - 1) * 0.5 + unitlessPaddingY)}${unit}`;\n}\nexport const buttonStyles = (props) => {\n    const tagName = props.tag;\n    return tagName === 'a'\n        ? css `a& {\r\n    ${_baseButtonStyles(props)}\r\n  }`\n        : _baseButtonStyles(props);\n};\nfunction _baseButtonStyles(props) {\n    var _a, _b, _c, _d, _e, _f;\n    if (!(props && props.theme && props.theme.components))\n        return;\n    const theme = props.theme;\n    const buttonVars = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.button) !== null && _b !== void 0 ? _b : {};\n    const { sizes: buttonSizes, variants: buttonVariants, icon: buttonIcon } = buttonVars;\n    const type = (_c = props.type) !== null && _c !== void 0 ? _c : 'default';\n    const size = (_d = props.size) !== null && _d !== void 0 ? _d : 'default';\n    const isIcon = props.icon;\n    const isVertial = props.vertical;\n    const buttonSizeVars = (_e = buttonSizes === null || buttonSizes === void 0 ? void 0 : buttonSizes[size]) !== null && _e !== void 0 ? _e : {};\n    const buttonVariantVars = (_f = buttonVariants === null || buttonVariants === void 0 ? void 0 : buttonVariants[type]) !== null && _f !== void 0 ? _f : {};\n    return css `\r\n    display: inline-block;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    user-select: none;\r\n    transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; /* $btn-transition */\r\n\r\n    ${hoverFocus('text-decoration: none;')}\r\n\r\n    /* Sizing: */\r\n    ${buttonSize(buttonSizeVars)}\r\n\r\n    /* Variant: */\r\n    ${buttonVariantStyles(buttonVariantVars)}\r\n\r\n    /* Icons in button: */\r\n    .jimu-icon {\r\n      pointer-events: none;\r\n      flex-shrink: 0;\r\n    }\r\n    .jimu-icon,\r\n    .left-icon {\r\n      margin-right: ${buttonIcon ? buttonIcon.spacing : '.5rem'};\r\n    }\r\n    .right-icon {\r\n      &,\r\n      &.jimu-icon {\r\n        margin-left: ${buttonIcon ? buttonIcon.spacing : '.5rem'};\r\n        margin-right: auto;\r\n      }\r\n    }\r\n\r\n    /* Icon button */\r\n    ${isIcon && css `\r\n      &.icon-btn {\r\n        line-height: 1;\r\n        .jimu-icon {\r\n          display: block;\r\n          margin-left: auto;\r\n          margin-right: auto;\r\n        }\r\n        padding: ${getIconButtonPadding(buttonSizeVars)}\r\n      }\r\n      &.dropdown-button {\r\n        .jimu-icon {\r\n          margin-right: auto;\r\n        }\r\n      }\r\n    `}\r\n\r\n    /* Vertical Button */\r\n    ${isVertial && !isIcon && css `\r\n      .jimu-icon {\r\n        &,\r\n        &.right-icon {\r\n          display: block;\r\n          margin: 0 auto;\r\n          margin-top: ${buttonIcon ? buttonIcon.spacing : '.5rem'};\r\n          margin-bottom: ${buttonIcon ? buttonIcon.spacing : '.5rem'};\r\n        }\r\n      }\r\n    `}\r\n\r\n    /* handle truncated text */\r\n    &.text-truncate .jimu-btn-text {\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    &.btn-block {\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n  `;\n}\n","import { css, polished } from 'jimu-core';\nimport { buttonSize, buttonVariantStyles } from './button';\nimport { getBoxStyles } from 'jimu-theme';\nfunction _getBorderWidths(isVertical, isRight) {\n    const sideWithWidth = isVertical ? isRight ? 'left' : 'right' : 'bottom';\n    return css `${['top', 'bottom', 'left', 'right'].map(side => {\n        return sideWithWidth === side ? undefined : `border-${side}-width: 0 !important;`;\n    })}`;\n}\nfunction getRootStyles(rootVars) {\n    return css `\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    padding-left: 0;\r\n    margin-bottom: 0;\r\n    list-style: none;\r\n    ${getBoxStyles(rootVars)}\r\n  `;\n}\nfunction getVariantStyles(type, variantVars, isVertical, isRight) {\n    var _a, _b, _c, _d;\n    const { root, item, size } = variantVars;\n    return css `\r\n    .nav-link {\r\n      ${buttonVariantStyles(item)}\r\n      ${buttonSize(size)}\r\n    }\r\n    ${type === 'pills' && css `\r\n      &.nav-pills {\r\n        ${_getBorderWidths(isVertical, isRight)}\r\n      }\r\n    `}\r\n    ${type === 'tabs' && css `\r\n      &.nav-tabs {\r\n        ${_getBorderWidths(isVertical, isRight)}\r\n        .nav-item {\r\n          user-select: none;\r\n          ${!isVertical && css `\r\n            margin-bottom: -${(_a = root === null || root === void 0 ? void 0 : root.border) === null || _a === void 0 ? void 0 : _a.width};\r\n          `}\r\n        }\r\n        .nav-link {\r\n          ${!isVertical && css `\r\n            ${polished.borderRadius('top', root === null || root === void 0 ? void 0 : root.borderRadius)};\r\n            /* &:not(:focus).active { */\r\n            &.active {\r\n              border-bottom-color: transparent !important;\r\n            }\r\n          `}\r\n          &.active,\r\n          &.disabled {\r\n            cursor: default;\r\n          }\r\n        }\r\n        .dropdown-menu {\r\n          margin-top: -${(_b = root === null || root === void 0 ? void 0 : root.border) === null || _b === void 0 ? void 0 : _b.width};\r\n          ${polished.borderRadius('top', 0)}\r\n        }\r\n        ${isVertical\n        ? css `\r\n          .nav-item {\r\n            margin-${isRight ? 'left' : 'right'}: -${(_c = root === null || root === void 0 ? void 0 : root.border) === null || _c === void 0 ? void 0 : _c.width};\r\n          }\r\n          .nav-link {\r\n            ${polished.borderRadius(isRight ? 'right' : 'left', root === null || root === void 0 ? void 0 : root.borderRadius)};\r\n          }\r\n        `\n        : ''}\r\n      }\r\n    `}\r\n    ${type === 'underline' && css `\r\n      &.nav-underline {\r\n        ${_getBorderWidths(isVertical, isRight)}\r\n        .nav-item {\r\n          ${!isVertical && css `\r\n            margin-bottom: -${(_d = root === null || root === void 0 ? void 0 : root.border) === null || _d === void 0 ? void 0 : _d.width};\r\n          `}\r\n        }\r\n        .nav-link {\r\n          ${_getBorderWidths(isVertical, isRight)}\r\n          &:not(:disabled):not(.disabled):active,\r\n          &[aria-expanded=\"true\"] {\r\n            border-bottom-color: transparent;\r\n          }\r\n          /* ${!isVertical && polished.borderRadius('bottom', 0)} */\r\n        }\r\n        ${isVertical\n        ? css `\r\n          .nav-item {\r\n            margin-${isRight ? 'left' : 'right'}: -1px;\r\n          }\r\n          .nav-link {\r\n            /* ${polished.borderRadius(isRight ? 'left' : 'right', 0)} */\r\n            border-${isRight ? 'left' : 'right'}-width: ${item.active.border.width} !important;\r\n          }\r\n        `\n        : ''}\r\n      }\r\n    `}\r\n  `;\n}\nexport const navStyles = (props) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const isTabs = props.tabs;\n    const isUnderline = props.underline;\n    const isPills = props.pills;\n    const isfill = props.fill;\n    const isJustified = props.justified;\n    const isVertical = props.vertical;\n    const isRight = props.right;\n    const iconPosition = props.iconPosition;\n    const type = isUnderline ? 'underline' : (isTabs ? 'tabs' : (isPills ? 'pills' : 'default'));\n    const textAlign = props.textAlign;\n    const showText = (_a = props.showText) !== null && _a !== void 0 ? _a : true;\n    const theme = props.theme;\n    const navVars = (_b = theme === null || theme === void 0 ? void 0 : theme.components) === null || _b === void 0 ? void 0 : _b.nav;\n    const { variants: navVariants } = navVars;\n    const mode = props.mode;\n    const navVariantVars = (_c = navVariants === null || navVariants === void 0 ? void 0 : navVariants[type]) !== null && _c !== void 0 ? _c : {};\n    const navSizeVars = (_d = navVariantVars === null || navVariantVars === void 0 ? void 0 : navVariantVars.size) !== null && _d !== void 0 ? _d : {};\n    const gap = (_f = (_e = props.gap) !== null && _e !== void 0 ? _e : navVariantVars.gutter) !== null && _f !== void 0 ? _f : 0;\n    const childrenCount = (_g = props.children) === null || _g === void 0 ? void 0 : _g.length;\n    return navVars && css `\r\n    ${getRootStyles(navVariantVars === null || navVariantVars === void 0 ? void 0 : navVariantVars.root)}\r\n\r\n    .jimu-nav-link-wrapper {\r\n      display: block;\r\n      width: 100%;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .nav-item {\r\n      > .nav-link {\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    }\r\n    /* Variants: */\r\n    ${getVariantStyles(type, navVariantVars, isVertical, isRight)}\r\n\r\n    /* Vertical Mode */\r\n    ${isVertical && css `\r\n      &.vertical {\r\n        .nav-item {\r\n          &,\r\n          > .nav-link {\r\n          width: 100%;\r\n          height: auto;\r\n        }\r\n      }\r\n    `}\r\n\r\n    /* Gap between nav items */\r\n    ${gap && (isVertical\n        ? css `\r\n      .nav-item + .nav-item {\r\n        margin-top: ${gap};\r\n      }\r\n      .nav-item ul.dropdown-menu-inline {\r\n        margin-top: ${gap};\r\n      }\r\n    `\n        : css `\r\n      .nav-item + .nav-item {\r\n        margin-left: ${gap};\r\n      }\r\n    `)}\r\n\r\n    /* Text alignment in nav items */\r\n    ${textAlign && css `\r\n      .nav-item, .nav-item .jimu-link {\r\n        text-align: ${textAlign};\r\n        > .btn {\r\n          justify-content: ${textAlign === 'left' ? 'flex-start' : textAlign === 'right' ? 'flex-end' : 'flex-start'};\r\n        }\r\n      }\r\n    `}\r\n\r\n    /* Fill */\r\n    ${isfill && css `\r\n      &.nav-fill {\r\n        .nav-item {\r\n          flex: 1 1 ${!isNaN(childrenCount) ? `${100 / childrenCount}%` : 'auto'};\r\n          overflow: auto;\r\n          text-align: ${textAlign || 'center'};\r\n          .nav-link {\r\n            width: 100%;\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\r\n    ${isJustified && css `\r\n      &.nav-justified {\r\n        .nav-item {\r\n          flex-basis: 0;\r\n          flex-grow: 1;\r\n          text-align: ${textAlign || 'center'};\r\n        }\r\n      }\r\n    `}\r\n\r\n    ${mode === 'toggle' && css `\r\n      &.navbar-nav {\r\n        font-size: large;\r\n        .right-icon.jimu-icon {\r\n          margin-right: unset !important;\r\n          width: 12px;\r\n          height: 12px;\r\n        }\r\n        &.nav-tabs .nav-link.active {\r\n          background-color: unset !important;\r\n        }\r\n      }\r\n      .nav-item {\r\n        .nav-link {\r\n          width: 100%;\r\n          justify-content: space-between;\r\n        }\r\n        + .nav-item {\r\n          margin-left: 0;\r\n        }\r\n      }\r\n      .nav-link {\r\n        display: flex;\r\n        width: 100%;\r\n        justify-content: center;\r\n        + .nav-link {\r\n          margin-left: 0;\r\n        }\r\n      }\r\n    `}\r\n\r\n    .jimu-icon,\r\n    .left-icon {\r\n      margin-right: ${showText ? (_h = navVariantVars === null || navVariantVars === void 0 ? void 0 : navVariantVars.icon.spacing) !== null && _h !== void 0 ? _h : '.5rem' : 'unset'};\r\n    }\r\n    .right-icon {\r\n      &,\r\n      &.jimu-icon {\r\n        margin-left: ${showText ? (_j = navVariantVars === null || navVariantVars === void 0 ? void 0 : navVariantVars.icon.spacing) !== null && _j !== void 0 ? _j : '.5rem' : 'unset'};\r\n        margin-right: auto;\r\n      }\r\n    }\r\n    ${iconPosition === 'above' && css `\r\n      display: flex;\r\n      flex-direction: column;\r\n      .jimu-icon {\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        margin-bottom: ${showText ? (_k = navVariantVars === null || navVariantVars === void 0 ? void 0 : navVariantVars.icon.spacing) !== null && _k !== void 0 ? _k : '.5rem' : 'unset'};\r\n      }\r\n    `}\r\n    .nav-link-caret-btn {\r\n      display: inline-block;\r\n      padding: .3125rem;\r\n      margin: -.3125rem ${navVariantVars.icon.spacing};\r\n      border-radius: 50%;\r\n      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; /* $btn-transition */\r\n      background: transparent;\r\n      border: none;\r\n      color: inherit;\r\n\r\n      .caret-icon {\r\n        display: block;\r\n        margin-left: 0;\r\n        margin-right: 0;\r\n      }\r\n      &:hover {\r\n        background-color: rgba(0,0,0,0.1);\r\n      }\r\n    }\r\n\r\n    ${isVertical && css `\r\n      .nav-link.with-caret {\r\n        position: relative;\r\n        padding-right: ${navSizeVars === null || navSizeVars === void 0 ? void 0 : navSizeVars.paddingX};\r\n        .nav-link-caret-btn {\r\n          position: absolute;\r\n          ${textAlign === 'right' ? `left: ${navSizeVars.paddingX};` : `right: ${navSizeVars.paddingX};`}\r\n          height: 20px;\r\n          width: 20px;\r\n          border-radius: 0;\r\n          top: calc(50% - 10px);\r\n          bottom: calc(50% - 10px);\r\n          padding: 0;\r\n          margin: 0;\r\n          display: inline-flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n        }\r\n      }\r\n      .nav-link.padding-plus-20 {\r\n        ${textAlign === 'right' ? `padding-left: calc(${navSizeVars.paddingX} + 20px);` : `padding-right: calc(${navSizeVars.paddingX} + 20px);`}\r\n      }\r\n    `}\r\n  `;\n};\nexport const navStyleUtils = { getRootStyles, getVariantStyles };\n","import { css } from 'jimu-core';\nimport { buttonVariantStyles } from './button';\nimport { getBoxStyles } from 'jimu-theme';\nfunction getRootStyles(rootVars) {\n    return getBoxStyles(rootVars);\n}\nfunction getItemStyles(stateVars) {\n    return stateVars && css `\r\n    .jimu-btn {\r\n      &.previous,\r\n      &.next {\r\n        ${buttonVariantStyles(stateVars)}\r\n      }\r\n    }\r\n  `;\n}\nfunction getVariantStyles(variantVars) {\n    return variantVars && css `\r\n    ${getRootStyles(variantVars === null || variantVars === void 0 ? void 0 : variantVars.root)}\r\n    ${getItemStyles(variantVars === null || variantVars === void 0 ? void 0 : variantVars.item)}\r\n  `;\n}\nconst iconSpace = '5px';\nexport const navButtonGroupStyles = (props) => {\n    var _a, _b, _c, _d;\n    const theme = props.theme;\n    const type = (_a = props === null || props === void 0 ? void 0 : props.type) !== null && _a !== void 0 ? _a : 'default';\n    const vertical = props === null || props === void 0 ? void 0 : props.vertical;\n    const previous = (props === null || props === void 0 ? void 0 : props.previousText) && (props === null || props === void 0 ? void 0 : props.previousIcon);\n    const next = (props === null || props === void 0 ? void 0 : props.nextText) && (props === null || props === void 0 ? void 0 : props.nextIcon);\n    const variant = (_d = (_c = (_b = theme === null || theme === void 0 ? void 0 : theme.components) === null || _b === void 0 ? void 0 : _b.navButtonGroup) === null || _c === void 0 ? void 0 : _c.variants) === null || _d === void 0 ? void 0 : _d[type];\n    return css `\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-direction: ${vertical ? 'column' : 'row'};\r\n    ${getVariantStyles(variant)};\r\n    .jimu-keyboard-nav & .direction-button:focus {\r\n      outline: auto\r\n    }\r\n    > .jimu-btn.icon-btn.btn {\r\n      padding: 0.125rem;\r\n      &.previous {\r\n        > .icon-btn-sizer {\r\n          justify-content:${previous ? 'flex-start' : 'center'};;\r\n          >.jimu-icon {\r\n            margin-right: ${previous ? iconSpace : 'unset'};\r\n            margin-left: unset;\r\n          }\r\n        }\r\n      }\r\n      &.next {\r\n        > .icon-btn-sizer {\r\n          justify-content:${next ? 'flex-end' : 'center'};;\r\n          >.jimu-icon {\r\n            margin-left: ${next ? iconSpace : 'unset'};\r\n            margin-right: unset;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\n};\nexport const navButtonGroupStyleUtils = { getRootStyles, getItemStyles, getVariantStyles };\n","import { css, polished } from 'jimu-core';\nexport function formValidation(isValid, theme) {\n    const stateColor = (theme === null || theme === void 0 ? void 0 : theme.sys)\n        ? isValid ? theme.sys.color.success.main : theme.sys.color.error.main\n        : isValid ? 'green' : 'red';\n    return css `\r\n    border-color: ${stateColor || (isValid ? 'green' : 'red')};\r\n    ${!isValid && `background: ${polished.rgba(stateColor, 0.1)}`};\r\n  `;\n}\nexport function getInputHeight(inputVarsBySize, inputBorderWidth) {\n    const heightInner = polished.math(`\r\n    ${inputVarsBySize.fontSize} * ${inputVarsBySize.lineHeight} +\r\n    ${inputVarsBySize.paddingY} * 2`);\n    return inputBorderWidth.toString() === '0'\n        ? heightInner\n        : `calc(${heightInner} + ${inputBorderWidth} * 2)`;\n}\nfunction getInputSizingStyles(inputVars, size) {\n    const inputVarsBySize = inputVars.sizes[size];\n    return `\r\n    height: ${inputVarsBySize.height !== 'auto'\n        ? inputVarsBySize.height\n        : getInputHeight(inputVarsBySize, inputVars.border.width)};\r\n    padding: ${inputVarsBySize.paddingY} ${inputVarsBySize.paddingX};\r\n    font-size: ${inputVarsBySize.fontSize};\r\n    line-height: ${inputVarsBySize.lineHeight};\r\n    border-radius: ${inputVarsBySize.borderRadius};\r\n  `;\n}\nexport const textInputStyles = (props) => {\n    var _a;\n    const size = props.bsSize || props.size;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    return inputVars && css `\r\n    &::-ms-expand {\r\n      background-color: transparent;\r\n      border: 0;\r\n    }\r\n\r\n    &.disabled .input-wrapper,\r\n    &.readonly .input-wrapper {\r\n      background: ${inputVars.disabled.bg};\r\n      border-color: ${inputVars.disabled.borderColor};\r\n      opacity: 1;\r\n      color: ${inputVars.disabled.color};\r\n      -webkit-text-fill-color: ${inputVars.disabled.color};\r\n    }\r\n\r\n    /* Form validation */\r\n    &.is-invalid .input-wrapper {\r\n      ${formValidation(false, theme)}\r\n    }\r\n\r\n    .error-msg {\r\n      color: var(--sys-color-error-main);\r\n    }\r\n\r\n    &.no-border {\r\n      .input-wrapper {\r\n        border-color: transparent !important;\r\n        &:focus-within {\r\n          outline: 1px solid ${inputVars.focus.borderColor};\r\n        }\r\n        &:hover:not(:focus-within) {\r\n          outline: 1px solid var(--ref-palette-neutral-700);\r\n        }\r\n      }\r\n    }\r\n\r\n    .input-wrapper {\r\n      width: 100%;\r\n      color: ${inputVars.color};\r\n      background-color: ${inputVars.bg};\r\n      background-clip: padding-box;\r\n      border: ${inputVars.border.width} solid ${theme.sys.color.divider.input};\r\n      box-shadow: ${inputVars.boxShadow};\r\n      transition: ${inputVars.transition};\r\n      outline-offset: -1px;\r\n      ${!size && getInputSizingStyles(inputVars, 'default')}\r\n\r\n      /* Form control sizing */\r\n\r\n      ${size === 'sm' && getInputSizingStyles(inputVars, 'sm')}\r\n\r\n      ${size === 'lg' && getInputSizingStyles(inputVars, 'lg')}\r\n\r\n      &:focus-within {\r\n        color: ${inputVars.focus.color};\r\n        outline: 1px solid ${inputVars.focus.borderColor};\r\n        /** !important is needed for the case dynamic-setting/title-input */\r\n        background-color: ${inputVars.focus.bg} !important;\r\n      }\r\n\r\n      .text-input-clear{\r\n        outline: none;\r\n        padding: 0.125rem;\r\n        &:focus .icon-btn-sizer {\r\n          box-shadow: ${size === 'lg' ? '0px 0px 2px' : '0px 0px 3px 1px'} ${inputVars.focus.borderColor};\r\n          border-radius: 10px;\r\n          border: ${size === 'lg' ? `1px solid ${inputVars.focus.borderColor}` : 'none'};\r\n        }\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nimport { formValidation } from 'jimu-theme';\nexport function getInputHeight(inputVarsBySize, inputBorderWidth) {\n    const heightInner = polished.math(`\r\n    ${inputVarsBySize.fontSize} * ${inputVarsBySize.lineHeight} +\r\n    ${inputVarsBySize.paddingY} * 2`);\n    return inputBorderWidth.toString() === '0'\n        ? heightInner\n        : `calc(${heightInner} + ${inputBorderWidth} * 2)`;\n}\nfunction getInputSizingStyles(inputVars, size) {\n    const inputVarsBySize = inputVars.sizes[size];\n    return `\r\n    padding: ${inputVarsBySize.paddingY} ${inputVarsBySize.paddingX};\r\n    font-size: ${inputVarsBySize.fontSize};\r\n    line-height: ${inputVarsBySize.lineHeight};\r\n    border-radius: ${inputVarsBySize.borderRadius};\r\n  `;\n}\nexport const textAreaStyles = (props) => {\n    var _a;\n    const size = props.bsSize || props.size;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    return inputVars && css `\r\n    textarea {\r\n      display: block;\r\n      width: 100%;\r\n      color: ${inputVars.color};\r\n      background-color: ${inputVars.bg};\r\n      background-clip: padding-box;\r\n      border: ${inputVars.border.width} solid ${inputVars.border.color};\r\n      box-shadow: ${inputVars.boxShadow};\r\n      transition: ${inputVars.transition};\r\n      ${!size && getInputSizingStyles(inputVars, 'default')}\r\n\r\n      &.is-invalid {\r\n        ${formValidation(false, theme)}\r\n      }\r\n\r\n      &::-ms-expand {\r\n        background-color: transparent;\r\n        border: 0;\r\n      }\r\n\r\n      &:focus {\r\n        color: ${inputVars.focus.color};\r\n        background-color: ${inputVars.focus.bg};\r\n        outline: 1px solid ${inputVars.focus.borderColor};\r\n        box-shadow: ${inputVars.boxShadow}, ${inputVars.focus.boxShadow};\r\n      }\r\n\r\n      /* Placeholder */\r\n      &::placeholder {\r\n        color: ${inputVars.placeHolderColor};\r\n        opacity: 1;\r\n      }\r\n\r\n      /* Disabled and read-only inputs */\r\n      &:disabled,\r\n      &[readonly] {\r\n        background: ${inputVars.disabled.bg};\r\n        border-color: ${inputVars.disabled.borderColor};\r\n        opacity: 1;\r\n      }\r\n\r\n      &:disabled {\r\n        color: ${inputVars.disabled.color};\r\n        -webkit-text-fill-color: ${inputVars.disabled.color};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nimport { buttonStyles } from './button';\nimport { formValidation } from './text-input';\nfunction getInputHeight(inputVarsBySize, inputBorderWidth) {\n    const heightInner = polished.math(`\r\n    ${inputVarsBySize.fontSize} * ${inputVarsBySize.lineHeight} +\r\n    ${inputVarsBySize.paddingY} * 2`);\n    return inputBorderWidth.toString() === '0'\n        ? heightInner\n        : `calc(${heightInner} + ${inputBorderWidth} * 2)`;\n}\nfunction getInputSizingStyles(inputVars, size) {\n    const inputVarsBySize = inputVars.sizes[size];\n    return `\r\n    height: ${inputVarsBySize.height !== 'auto'\n        ? inputVarsBySize.height\n        : getInputHeight(inputVarsBySize, inputVars.border.width)};\r\n    padding: ${inputVarsBySize.paddingY} ${inputVarsBySize.paddingX};\r\n    font-size: ${inputVarsBySize.fontSize};\r\n    line-height: ${inputVarsBySize.lineHeight};\r\n    border-radius: ${inputVarsBySize.borderRadius};\r\n  `;\n}\nconst textInputStyles = (props) => {\n    var _a;\n    const size = props.bsSize || props.size;\n    const type = props.type;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    return inputVars && css `\r\n    display: block;\r\n    width: 100%;\r\n    color: ${inputVars.color};\r\n    background-color: ${inputVars.bg};\r\n    background-clip: padding-box;\r\n    border: ${inputVars.border.width} solid ${theme.sys.color.divider.input};\r\n    box-shadow: ${inputVars.boxShadow};\r\n    transition: ${inputVars.transition};\r\n    ${!size && getInputSizingStyles(inputVars, 'default')}\r\n\r\n    -moz-appearance:textfield;\r\n\r\n    &::-ms-expand {\r\n      background-color: transparent;\r\n      border: 0;\r\n    }\r\n\r\n    &:focus {\r\n      color: ${inputVars.focus.color};\r\n      background-color: ${inputVars.focus.bg};\r\n      outline: none !important;\r\n      box-shadow: none !important;\r\n    }\r\n\r\n    /* Placeholder */\r\n    &::placeholder {\r\n      color: ${inputVars.placeHolderColor};\r\n      opacity: 1;\r\n    }\r\n\r\n    /* Disabled and read-only inputs */\r\n    &:disabled,\r\n    &[readonly] {\r\n      background: ${inputVars.disabled.bg};\r\n      border-color: ${inputVars.disabled.borderColor};\r\n      opacity: 1;\r\n    }\r\n\r\n    &:disabled {\r\n      color: ${inputVars.disabled.color};\r\n      -webkit-text-fill-color: ${inputVars.disabled.color};\r\n    }\r\n\r\n    ${(type === 'file' || type === 'range') && `\r\n      display: block;\r\n      width: 100%;\r\n    `}\r\n\r\n    ${type === 'textarea' && `\r\n      height: auto;\r\n    `}\r\n\r\n    /* Form control sizing */\r\n\r\n    ${size === 'sm' && getInputSizingStyles(inputVars, 'sm')}\r\n\r\n    ${size === 'lg' && getInputSizingStyles(inputVars, 'lg')}\r\n  `;\n};\nexport const numericInputStyles = (props) => {\n    var _a, _b, _c;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    const inputVarsBySize = inputVars.sizes[(_b = props.size) !== null && _b !== void 0 ? _b : 'default'];\n    return inputVars && css `\r\n    display: flex;\r\n    flex-direction: row-reverse;\r\n    position: relative;\r\n    height: ${inputVarsBySize.height !== 'auto' ? inputVarsBySize.height : getInputHeight(inputVarsBySize, inputVars.border.width)};\r\n\r\n    &:focus-within {\r\n      outline: 1px solid ${inputVars.focus.borderColor};\r\n    }\r\n\r\n    .jimu-numeric-input-input-wrap {\r\n      flex: 1;\r\n    }\r\n    .jimu-numeric-input-input {\r\n      ${textInputStyles(props)}\r\n    }\r\n    .jimu-numeric-input-handler-wrap {\r\n      width: 1.25rem;\r\n      display: none;\r\n      flex-direction: column;\r\n      align-content: stretch;\r\n      margin-left: -1px;\r\n      border-left: 1px solid ${theme.sys.color.divider.input};\r\n      position: absolute;\r\n      top: 1px;\r\n      bottom: 1px;\r\n      right: 1px;\r\n    }\r\n    &.show-handlers {\r\n      .jimu-numeric-input-handler-wrap {\r\n        display: flex;\r\n      }\r\n    }\r\n    .jimu-numeric-input-handler {\r\n      ${buttonStyles({\n        theme: theme,\n        size: 'sm'\n    })}\r\n      flex: 1;\r\n      padding: 0;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      .jimu-icon {\r\n        margin: 0;\r\n      }\r\n    }\r\n    .jimu-numeric-input-handler-up,\r\n    .jimu-numeric-input-handler-down {\r\n      border: 0;\r\n    }\r\n    .jimu-numeric-input-handler-up {\r\n      border-top-left-radius: 0;\r\n      border-bottom-left-radius: 0;\r\n      border-bottom-right-radius: 0;\r\n    }\r\n    .jimu-numeric-input-handler-down {\r\n      margin-top: -1px;\r\n      border-bottom-left-radius: 0;\r\n      border-top-left-radius: 0;\r\n      border-top-right-radius: 0;\r\n      border-top: 1px solid ${(_c = inputVars === null || inputVars === void 0 ? void 0 : inputVars.border) === null || _c === void 0 ? void 0 : _c.color};\r\n    }\r\n\r\n    &.is-invalid .jimu-numeric-input-input {\r\n      ${formValidation(false, theme)}\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nfunction getInputHeight(inputVarsBySize, inputBorderWidth) {\n    const heightInner = polished.math(`\r\n    ${inputVarsBySize.fontSize} * ${inputVarsBySize.lineHeight} +\r\n    ${inputVarsBySize.paddingY} * 2`);\n    return inputBorderWidth.toString() === '0'\n        ? heightInner\n        : `calc(${heightInner} + ${inputBorderWidth} * 2)`;\n}\nfunction getInputSizingStyles(inputVars, size) {\n    const inputVarsBySize = inputVars.sizes[size];\n    return `\r\n    height: ${inputVarsBySize.height !== 'auto'\n        ? inputVarsBySize.height\n        : getInputHeight(inputVarsBySize, inputVars.border.width)};\r\n    padding: ${inputVarsBySize.paddingY} ${inputVarsBySize.paddingX};\r\n    font-size: ${inputVarsBySize.fontSize};\r\n    line-height: ${inputVarsBySize.lineHeight};\r\n    border-radius: ${inputVarsBySize.borderRadius};\r\n  `;\n}\nexport const advancedSelectStyles = (props) => {\n    var _a, _b, _c;\n    const size = props.bsSize || props.size || 'default';\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    const buttonProps = props === null || props === void 0 ? void 0 : props.buttonProps;\n    return css `\r\n    width: 100%;\r\n    &.advanced-select-menu{\r\n      max-width: 100vw;\r\n      min-width: 200px;\r\n\r\n      .output-warning-container{\r\n        width: 240px;\r\n\r\n        .output-warning-color{\r\n          color: ${theme.sys.color.info.main};\r\n        }\r\n        .select-item{\r\n          padding: 0.5rem 0;\r\n          border-bottom: 1px solid ${theme.ref.palette.neutral[600]};\r\n\r\n          &.active{\r\n            color: inherit;\r\n            background: inherit;\r\n          }\r\n          .select-item-placeholder{\r\n            width: 1.25rem;\r\n          }\r\n        }\r\n      }\r\n\r\n      .search-container{\r\n        padding: 0.25rem 0.5rem 0 0.5rem;\r\n      }\r\n\r\n      .list-container{\r\n        max-height: 200px;\r\n        margin-top: 0.25rem;\r\n        margin-bottom: 0.25rem;\r\n        overflow-y: auto;\r\n\r\n        .no-data-label{\r\n          text-align: left;\r\n          margin: 0.25rem 0.5rem;\r\n          font-style: italic;\r\n          color: ${theme.ref.palette.neutral[1000]};\r\n        }\r\n\r\n        .jimu-dropdown-item{\r\n          padding: 0.25rem 0.5rem;\r\n          min-height: ${polished.rem(26)};\r\n        }\r\n\r\n        .select-item{\r\n          &.multiple-item{\r\n            padding-left: 0.5rem;\r\n          }\r\n\r\n          .select-item-placeholder{\r\n            margin-right: 0.5rem;\r\n            width: 0.75rem;\r\n          }\r\n        }\r\n\r\n        .load-more-btn{\r\n          padding-left: 0.5rem;\r\n          padding-bottom: 0;\r\n          border: none;\r\n        }\r\n      }\r\n\r\n      .loading-container{\r\n        position: relative;\r\n        margin: 0.25rem 0.5rem;\r\n        height: 20px;\r\n        width: 20px;\r\n      }\r\n\r\n      .multiple-select-tool{\r\n        margin: 0 0.5rem;\r\n        padding: 0.25rem 0;\r\n        display: flex;\r\n      }\r\n      .split-line {\r\n        border-top: 1px solid ${theme.ref.palette.neutral[600]};\r\n      }\r\n    }\r\n\r\n    ${(_b = ((buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.type) || (buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.icon))) !== null && _b !== void 0 ? _b : css `\r\n    /* Button overrides */\r\n      > .dropdown{\r\n        > .dropdown-button {\r\n          &,\r\n          &:hover {\r\n            color: ${inputVars.color};\r\n            background-color: ${inputVars.bg};\r\n            background-clip: padding-box;\r\n            box-shadow: ${inputVars.boxShadow};\r\n            border-color: ${theme.sys.color.divider.input};\r\n            transition: ${inputVars.transition};\r\n            text-decoration: none;\r\n            ${size === 'default' && getInputSizingStyles(inputVars, 'default')}\r\n            ${size === 'sm' && getInputSizingStyles(inputVars, 'sm')}\r\n            ${size === 'lg' && getInputSizingStyles(inputVars, 'lg')}\r\n          }\r\n          &[aria-expanded=\"true\"] {\r\n            border-color: ${theme.sys.color.action.selected.default};\r\n          }\r\n        }\r\n      }\r\n    `}\r\n\r\n    ${(_c = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.type) !== null && _c !== void 0 ? _c : css `\r\n    /* Button overrides */\r\n      > .dropdown{\r\n        > .dropdown-button {\r\n          /* Placeholder */\r\n          .placeholder {\r\n            color: ${inputVars.placeHolderColor};\r\n            opacity: 1;\r\n          }\r\n\r\n          /* Disabled and read-only inputs */\r\n          &:disabled,\r\n          &[readonly] {\r\n            color: ${inputVars.disabled.color};\r\n            background-color: ${inputVars.disabled.bg};\r\n            opacity: 1;\r\n          }\r\n        }\r\n      }\r\n    `}\r\n  `;\n};\n","import { css } from 'jimu-core';\nfunction getColLabelStyles(fontSize, paddingY, lineHeight, borderWidth) {\n    return `\r\n    padding-top: calc(${paddingY} + ${borderWidth});\r\n    padding-bottom: calc(${paddingY} + ${borderWidth});\r\n    font-size: ${fontSize};\r\n    line-height: ${lineHeight};\r\n  `;\n}\nexport const labelStyles = (props) => {\n    var _a, _b, _c;\n    const size = (_a = props.size) !== null && _a !== void 0 ? _a : 'default';\n    const isForCheck = props.check;\n    const centric = (_b = props.centric) !== null && _b !== void 0 ? _b : false;\n    const theme = props.theme;\n    const inputVars = (_c = theme === null || theme === void 0 ? void 0 : theme.components) === null || _c === void 0 ? void 0 : _c.input;\n    return (inputVars &&\n        css `\r\n      &.col-form-label {\r\n        margin-bottom: 0;\r\n        ${getColLabelStyles('inherit', inputVars.sizes.default.paddingY, inputVars.sizes.default.lineHeight, inputVars.border.width)}\r\n      }\r\n\r\n      ${size === 'lg' &&\n            getColLabelStyles(inputVars.sizes.lg.fontSize, inputVars.sizes.lg.paddingY, inputVars.sizes.lg.lineHeight, inputVars.border.width)}\r\n\r\n      ${size === 'sm' &&\n            getColLabelStyles(inputVars.sizes.sm.fontSize, inputVars.sizes.sm.paddingY, inputVars.sizes.sm.lineHeight, inputVars.border.width)}\r\n\r\n    ${isForCheck &&\n            `\r\n      margin-bottom: 0;\r\n    `}\r\n    ${centric &&\n            `\r\n      display: inline-flex;\r\n      align-items: center;\r\n      vertical-align: middle;\r\n    `}\r\n    `);\n};\n","import { css } from 'jimu-core';\nimport { getBoxStyles } from 'jimu-theme';\nexport const cardStyles = (props) => {\n    var _a, _b, _c, _d;\n    const horizontal = props.horizontal;\n    const button = props.button;\n    const active = props.active;\n    const theme = props.theme;\n    const cardVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.card;\n    const { root, spacer, divider, headerBg, checkMark } = cardVars;\n    const innerBorderRadius = `calc(${(_b = root === null || root === void 0 ? void 0 : root.default) === null || _b === void 0 ? void 0 : _b.borderRadius} - ${(_d = (_c = root === null || root === void 0 ? void 0 : root.default) === null || _c === void 0 ? void 0 : _c.border) === null || _d === void 0 ? void 0 : _d.width})`;\n    return cardVars && css `\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 0;\r\n    word-wrap: break-word;\r\n    background-clip: border-box;\r\n    ${getBoxStyles(root === null || root === void 0 ? void 0 : root.default)};\r\n\r\n    > hr {\r\n      margin-right: 0;\r\n      margin-left: 0;\r\n    }\r\n\r\n    .card-body {\r\n      flex: 1 1 auto;\r\n      padding: ${spacer.x};\r\n    }\r\n\r\n    .card-header {\r\n      padding: ${spacer.y} ${spacer.x};\r\n      margin-bottom: 0;\r\n      background-color: ${headerBg};\r\n      border-bottom: ${divider.width} solid ${divider.color};\r\n      border-radius: ${innerBorderRadius} ${innerBorderRadius} 0 0;\r\n    }\r\n\r\n    .card-footer {\r\n      padding: ${spacer.y} 0;\r\n      margin: 0 ${spacer.x};\r\n      background-color: ${headerBg};\r\n      border-top: ${divider.width} solid ${divider.color};\r\n      border-radius: 0 0 ${innerBorderRadius} ${innerBorderRadius};\r\n    }\r\n\r\n    /* Horizontal */\r\n\r\n    ${horizontal && css `\r\n      &.card-horizontal {\r\n        flex-direction: row;\r\n      }\r\n    `}\r\n\r\n    /* Button Card */\r\n\r\n    ${button && css `\r\n      &.card-button {\r\n        cursor: pointer;\r\n        transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;\r\n        &:hover {\r\n          ${getBoxStyles(root === null || root === void 0 ? void 0 : root.hover)};\r\n        }\r\n      }\r\n    `}\r\n\r\n    /* Active Card */\r\n\r\n    ${active && css `\r\n      &.card-active {\r\n        position: relative;\r\n        ${getBoxStyles(root === null || root === void 0 ? void 0 : root.active)};\r\n        .card-checkmark {\r\n          position: absolute;\r\n          right: 0;\r\n          z-index: 1;\r\n          padding: 0.25rem;\r\n          line-height: 1;\r\n          ${getBoxStyles(checkMark)}\r\n        }\r\n      }\r\n    `}\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const formGroupStyles = (props) => {\n    var _a;\n    const isRow = props.row;\n    const isCheck = props.check;\n    const isInline = props.inline;\n    const theme = props.theme;\n    const formVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.form;\n    return formVars && css `\r\n    ${!isRow\n        ? isCheck\n            ? ''\n            : `\r\n      margin-bottom: ${formVars.group.marginBottom};\r\n    `\n        : `\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      margin-right: -5px;\r\n      margin-left: -5px;\r\n\r\n      > .col,\r\n      > [class*=\"col-\"] {\r\n        padding-right: 5px;\r\n        padding-left: 5px;\r\n      }\r\n    `}\r\n\r\n    ${isInline && `\r\n      display: inline-flex;\r\n      align-items: center;\r\n      padding-left: 0;\r\n      margin-right: ${formVars.check.inline.marginX};\r\n\r\n      .form-check-input {\r\n        position: static;\r\n        margin-top: 0;\r\n        margin-right: ${formVars.check.inline.inputMarginX};\r\n        margin-left: 0;\r\n      }\r\n    `}\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const formTextStyles = (props) => {\n    var _a;\n    const theme = props.theme;\n    const formVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.form;\n    return formVars && css `\r\n    display: block;\r\n    margin-top: ${formVars.helpText.marginTop};\r\n    font-size: 0.8125rem;\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const formFeedbackStyles = (props) => {\n    var _a, _b, _c, _d, _e;\n    const theme = props.theme;\n    const valid = props.valid;\n    const shouldDisplay = valid !== undefined;\n    const formVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.form;\n    // TODO: add theme variables for font size\n    return formVars && css `\r\n    display: ${shouldDisplay ? 'block' : 'none'};\r\n    width: 100%;\r\n    margin-top: ${formVars.helpText && formVars.helpText.marginTop};\r\n    font-size: ${formVars.helpText && formVars.helpText.fontSize};\r\n    ${shouldDisplay && css `\r\n      color: ${valid && ((_c = (_b = theme.sys.color) === null || _b === void 0 ? void 0 : _b.success.main) !== null && _c !== void 0 ? _c : 'green')};\r\n      color: ${!valid && ((_e = (_d = theme.sys.color) === null || _d === void 0 ? void 0 : _d.error.main) !== null && _e !== void 0 ? _e : 'red')};\r\n    `}\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const inputGroupStyles = (props) => {\n    var _a, _b, _c;\n    const size = props.size;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    const inputGroupVars = (_b = theme === null || theme === void 0 ? void 0 : theme.components) === null || _b === void 0 ? void 0 : _b.inputGroup;\n    return inputVars && inputGroupVars && css `\r\n    position: relative;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: stretch;\r\n    width: 100%;\r\n\r\n    > .jimu-input {\r\n      position: relative;\r\n      flex: 1 1 auto;\r\n      width: 1%;\r\n      margin-bottom: 0;\r\n\r\n      + .jimu-input {\r\n        margin-left: -${inputVars.border.width};\r\n      }\r\n    }\r\n\r\n    > .jimu-input:focus {\r\n      z-index: 3;\r\n    }\r\n\r\n    > .jimu-input {\r\n      &:not(:last-child) {\r\n        &,\r\n        .jimu-numeric-input-input {\r\n          ${polished.borderRadius('right', '0')};\r\n        }\r\n      }\r\n      &:not(:first-of-type) {\r\n        &,\r\n        .jimu-numeric-input-input {\r\n          ${polished.borderRadius('left', '0')};\r\n        }\r\n      }\r\n    }\r\n\r\n    > .jimu-btn {\r\n      &:disabled {\r\n        // use the same colors from Input for the disabled state\r\n        background: ${inputVars === null || inputVars === void 0 ? void 0 : inputVars.bg};\r\n        border-color: ${(_c = inputVars === null || inputVars === void 0 ? void 0 : inputVars.border) === null || _c === void 0 ? void 0 : _c.color};\r\n      }\r\n    }\r\n\r\n    .input-group-prepend,\r\n    .input-group-append {\r\n      display: flex;\r\n\r\n      .btn {\r\n        position: relative;\r\n        z-index: 2;\r\n      }\r\n\r\n      .btn + .btn,\r\n      .btn + .input-group-text,\r\n      .input-group-text + .input-group-text,\r\n      .input-group-text + .btn {\r\n        margin-left: -${inputVars.border.width};\r\n      }\r\n    }\r\n\r\n    .input-group-text {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: ${inputVars.sizes.default.paddingY} ${inputVars.sizes.default.paddingX};\r\n      margin-bottom: 0;\r\n      font-size: ${theme.sys.typography.body1.fontSize};\r\n      font-weight: ${theme.ref.typeface.fontWeightRegular};\r\n      line-height: ${inputVars.sizes.default.lineHeight};\r\n      color: ${inputGroupVars.addon.color};\r\n      text-align: center;\r\n      white-space: nowrap;\r\n      background-color: ${inputGroupVars.addon.bg};\r\n      border: ${inputVars.border.width} solid ${inputGroupVars.addon.borderColor};\r\n      border-radius: ${inputVars.sizes.default.borderRadius};\r\n\r\n      input[type=\"radio\"],\r\n      input[type=\"checkbox\"] {\r\n        margin-top: 0;\r\n      }\r\n    }\r\n\r\n    /* Sizing */\r\n\r\n    ${size === 'lg' && css `\r\n      > .jimu-input,\r\n      > .input-group-prepend > .input-group-text,\r\n      > .input-group-append > .input-group-text,\r\n      > .input-group-prepend > .btn,\r\n      > .input-group-append > .btn {\r\n        height: ${inputVars.sizes.lg.height};\r\n        padding: ${inputVars.sizes.lg.paddingY} ${inputVars.sizes.lg.paddingX};\r\n        font-size: ${inputVars.sizes.lg.fontSize};\r\n        line-height: ${inputVars.sizes.lg.height};\r\n        border-radius: ${inputVars.sizes.lg.borderRadius};\r\n      }\r\n    `}\r\n\r\n    ${size === 'sm' && css `\r\n      > .jimu-input,\r\n      > .input-group-prepend > .input-group-text,\r\n      > .input-group-append > .input-group-text,\r\n      > .input-group-prepend > .btn,\r\n      > .input-group-append > .btn {\r\n        height: ${inputVars.sizes.sm.height};\r\n        padding: ${inputVars.sizes.sm.paddingY} ${inputVars.sizes.sm.paddingX};\r\n        font-size: ${inputVars.sizes.sm.fontSize};\r\n        line-height: ${inputVars.sizes.sm.height};\r\n        border-radius: ${inputVars.sizes.sm.borderRadius};\r\n      }\r\n    `}\r\n\r\n    .input-group-prepend > .btn,\r\n    .input-group-prepend > .input-group-text,\r\n    .input-group-append:not(:last-child) > .btn,\r\n    .input-group-append:not(:last-child) > .input-group-text,\r\n    .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\r\n    .input-group-append:last-child > .input-group-text:not(:last-child) {\r\n      ${polished.borderRadius('right', '0')};\r\n    }\r\n    &.input-group-append > .btn,\r\n    .input-group-append > .input-group-text,\r\n    .input-group-prepend:not(:first-of-type) > .btn,\r\n    .input-group-prepend:not(:first-of-type) > .input-group-text,\r\n    .input-group-prepend:first-of-type > .btn:not(:first-of-type),\r\n    .input-group-prepend:first-of-type > .input-group-text:not(:first-of-type)\r\n    {\r\n      ${polished.borderRadius('left', '0')};\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nfunction getInputHeight(inputVarsBySize, inputBorderWidth) {\n    const heightInner = polished.math(`\r\n    ${inputVarsBySize.fontSize} * ${inputVarsBySize.lineHeight} +\r\n    ${inputVarsBySize.paddingY} * 2`);\n    return inputBorderWidth.toString() === '0'\n        ? heightInner\n        : `calc(${heightInner} + ${inputBorderWidth} * 2)`;\n}\nfunction getInputSizingStyles(inputVars, size) {\n    const inputVarsBySize = inputVars.sizes[size];\n    return `\r\n    height: ${inputVarsBySize.height !== 'auto'\n        ? inputVarsBySize.height\n        : getInputHeight(inputVarsBySize, inputVars.border.width)};\r\n    padding: ${inputVarsBySize.paddingY} ${inputVarsBySize.paddingX};\r\n    font-size: ${inputVarsBySize.fontSize};\r\n    line-height: ${inputVarsBySize.lineHeight};\r\n    border-radius: ${inputVarsBySize.borderRadius};\r\n  `;\n}\nexport const multiSelectStyles = (props) => {\n    var _a, _b;\n    const size = props.bsSize || props.size;\n    const theme = props.theme;\n    const inputVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.input;\n    const buttonProps = props === null || props === void 0 ? void 0 : props.buttonProps;\n    return css `\r\n    width: 100%;\r\n    ${(_b = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.type) !== null && _b !== void 0 ? _b : css `\r\n    /* Button overides */\r\n      > .dropdown{\r\n        > .dropdown-button {\r\n          &,\r\n          &:hover {\r\n            color: ${inputVars.color};\r\n            background-color: ${inputVars.bg};\r\n            background-clip: padding-box;\r\n            border: ${inputVars.border.width} solid ${theme.sys.color.divider.input};\r\n            box-shadow: ${inputVars.boxShadow};\r\n            transition: ${inputVars.transition};\r\n            text-decoration: none;\r\n            ${!size && getInputSizingStyles(inputVars, 'default')}\r\n            ${size === 'sm' && getInputSizingStyles(inputVars, 'sm')}\r\n            ${size === 'lg' && getInputSizingStyles(inputVars, 'lg')}\r\n          }\r\n          &[aria-expanded=\"true\"] {\r\n            border-color: ${theme.sys.color.action.selected.default};\r\n          }\r\n\r\n          /* Placeholder */\r\n          .placeholder {\r\n            color: ${inputVars.placeHolderColor};\r\n            opacity: 1;\r\n          }\r\n\r\n          /* Disabled and read-only inputs */\r\n          &:disabled,\r\n          &[readonly] {\r\n            color: ${inputVars.disabled.color};\r\n            background-color: ${inputVars.disabled.bg};\r\n            opacity: 1;\r\n          }\r\n        }\r\n      }\r\n    `}\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const listGroupStyles = (props) => {\n    const isFlush = props.flush;\n    return css `\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-left: 0;\r\n    margin-bottom: 0;\r\n\r\n    ${isFlush && css `\r\n      .list-group-item {\r\n        border-right: 0;\r\n        border-left: 0;\r\n        border-radius: 0;\r\n      }\r\n\r\n      &:first-of-type {\r\n        .list-group-item:first-of-type {\r\n          border-top: 0;\r\n        }\r\n      }\r\n\r\n      &:last-of-type {\r\n        .list-group-item:last-of-type {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    `}\r\n\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nimport { colorUtils, hoverFocus } from 'jimu-theme';\nfunction listGroupItemBariant(bg, color, activeColor) {\n    return css `\r\n    color: ${color};\r\n    background-color: ${bg};\r\n\r\n    &.list-group-item-action {\r\n      ${hoverFocus(`\r\n        color: ${color};\r\n        background-color: ${polished.darken(0.05, bg)};\r\n      `)}\r\n\r\n      &.active {\r\n        color: ${activeColor};\r\n        background-color: ${color};\r\n        border-color: ${color};\r\n      }\r\n    }\r\n  `;\n}\nexport const listGroupItemStyles = (props) => {\n    var _a;\n    const isAction = props.action;\n    const propColor = props.color;\n    const color = propColor === 'danger' ? 'error' : propColor;\n    const theme = props.theme;\n    const listGroupVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.listGroup;\n    const themeColorLevel = (color, level = 0) => {\n        const colorBase = level > 0 ? theme.ref.palette.black : theme.ref.palette.white;\n        level = Math.abs(level);\n        return polished.mix(level * 0.08, colorBase, color);\n    };\n    return listGroupVars && css `\r\n    ${isAction && css `\r\n      width: 100%;\r\n      color: ${listGroupVars.action.color};\r\n      text-align: inherit;\r\n\r\n      ${hoverFocus(`\r\n        color: ${listGroupVars.action.hover.color};\r\n        text-decoration: none;\r\n        background-color: ${listGroupVars.hover.bg};\r\n      `)}\r\n\r\n      &:active {\r\n        color: ${listGroupVars.action.active.color};\r\n        background-color: ${listGroupVars.action.active.bg};\r\n      }\r\n    `}\r\n\r\n    position: relative;\r\n    display: block;\r\n    padding: ${listGroupVars.item.paddingY} ${listGroupVars.item.paddingX};\r\n    margin-bottom: -${listGroupVars.border.width};\r\n    background-color: ${listGroupVars.bg};\r\n    border: ${listGroupVars.border.width} solid ${listGroupVars.border.color};\r\n\r\n    &:first-of-type {\r\n      ${polished.borderRadius('top', listGroupVars.borderRadius)};\r\n    }\r\n\r\n    &:last-of-type {\r\n      margin-bottom: 0;\r\n      ${polished.borderRadius('bottom', listGroupVars.borderRadius)};\r\n    }\r\n\r\n    ${hoverFocus(`\r\n      z-index: 1;\r\n      text-decoration: none;\r\n    `)}\r\n\r\n    &.disabled,\r\n    &:disabled {\r\n      color: ${listGroupVars.disabled.color};\r\n      background-color: ${listGroupVars.disabled.bg};\r\n    }\r\n\r\n    &.active {\r\n      z-index: 2;\r\n      color: ${listGroupVars.active.color};\r\n      background-color: ${listGroupVars.active.bg};\r\n      border-color: ${listGroupVars.active.borderColor};\r\n    }\r\n\r\n    ${color && listGroupItemBariant(themeColorLevel(colorUtils.getThemeColorNameColor(color, theme), -9), themeColorLevel(colorUtils.getThemeColorNameColor(color, theme), 6), theme.ref.palette.white)}\r\n\r\n  `;\n};\n","import { css } from 'jimu-core';\nimport { colorUtils } from 'jimu-theme';\nexport const progressStyles = (props) => {\n    var _a, _b, _c, _d;\n    const theme = props.theme;\n    const progressVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.progress;\n    const propColor = (_b = props.color) !== null && _b !== void 0 ? _b : 'primary';\n    const color = propColor === 'danger' ? 'error' : propColor;\n    const type = (_c = props.type) !== null && _c !== void 0 ? _c : 'linear';\n    const showProgress = (_d = props.showProgress) !== null && _d !== void 0 ? _d : false;\n    const colorValue = colorUtils.getThemeColorNameColor(color, theme);\n    const progressNumWidth = '2.5rem';\n    return progressVars && type === 'linear'\n        ? css `\r\n    display: flex;\r\n    min-width: ${progressNumWidth};\r\n    overflow: hidden;\r\n    font-size: ${progressVars.fontSize};\r\n    align-items: center;\r\n    .progress-bar-track {\r\n      height: 2px;\r\n      width: ${showProgress ? 'calc(100% - ' + progressNumWidth + ')' : '100%'};\r\n      background-color: ${progressVars.bg};\r\n      border-radius: ${progressVars.borderRadius};\r\n    }\r\n    .progress-bar {\r\n      height: 100%;\r\n      background-color: ${colorValue};\r\n      border-radius: ${progressVars.borderRadius};\r\n      transition: width 300ms ease;\r\n    }\r\n    .progress-bar-text {\r\n      display: ${showProgress ? '' : 'none'};\r\n      min-width: ${progressNumWidth};\r\n      text-align: right;\r\n      padding-left: 0.5rem;\r\n    }\r\n  `\n        : css `\r\n    display: inline-flex;\r\n    .progress-circle-bg, .progress-circle-progress {\r\n      fill: none;\r\n    }\r\n    .progress-circle-bg {\r\n      stroke: ${progressVars.bg};\r\n    }\r\n    .progress-circle-progress {\r\n      stroke: ${colorValue};\r\n      transition: stroke-dashoffset 300ms ease;\r\n    }\r\n    .progress-circle-text {\r\n      fill: ${theme.ref.palette.black};\r\n      display: ${showProgress ? '' : 'none'};\r\n    }\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const tableStyles = (props) => {\n    var _a;\n    const theme = props.theme;\n    const tableVariables = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.table;\n    return tableVariables && css `\r\n    width: 100%;\r\n    margin-bottom: 1rem;\r\n    color: ${tableVariables.color};\r\n    background-color: ${tableVariables.bg};\r\n\r\n    th,\r\n    td {\r\n      padding: ${tableVariables.cell.default.paddingY} ${tableVariables.cell.default.paddingX};\r\n      vertical-align: top;\r\n      border-top: ${tableVariables.border.width} solid ${tableVariables.border.color};\r\n    }\r\n\r\n    thead th {\r\n      font-size: ${tableVariables.head.fontSize};\r\n      background: ${tableVariables.head.bg};\r\n      vertical-align: bottom;\r\n      border-bottom: ${tableVariables.border.width} solid ${tableVariables.border.color};\r\n    }\r\n\r\n    tbody + tbody {\r\n      border-top: ${tableVariables.border.width} solid ${tableVariables.border.color};\r\n    }\r\n\r\n    &.table-sm {\r\n      th,\r\n      td {\r\n        padding: ${tableVariables.cell.sm.paddingY} ${tableVariables.cell.sm.paddingX};\r\n      }\r\n    }\r\n\r\n    /* Border versions */\r\n    &.table-bordered {\r\n      border: ${tableVariables.border.width} solid ${tableVariables.border.color};\r\n      th,\r\n      td {\r\n        border: ${tableVariables.border.width} solid ${tableVariables.border.color};\r\n      }\r\n    }\r\n\r\n    &.table-borderless {\r\n      th,\r\n      td,\r\n      thead th,\r\n      tbody + tbody {\r\n        border: 0;\r\n      }\r\n    }\r\n\r\n    /* Zebra-striping */\r\n    &.table-striped {\r\n      tbody tr:nth-of-type(even) {\r\n        background-color: ${tableVariables.variants.striped.bg};\r\n      }\r\n    }\r\n\r\n    /* Dark styles */\r\n    &.table-dark {\r\n      color: ${tableVariables.variants.dark.color};\r\n      background-color: ${tableVariables.variants.dark.bg};\r\n      th {\r\n        color: $table-dark-color;\r\n        background-color: $table-dark-bg;\r\n        border-color: $table-dark-border-color;\r\n      }\r\n      th,\r\n      td {\r\n        border-top-color: ${tableVariables.variants.dark.border.color};\r\n      }\r\n\r\n      thead th {\r\n        background: ${tableVariables.variants.dark.head.bg};\r\n        border-bottom-color: ${tableVariables.variants.dark.border.color};\r\n      }\r\n\r\n      tbody + tbody {\r\n        border-top-color: ${tableVariables.variants.dark.border.color};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, LoadingType, polished } from 'jimu-core';\nexport const loadingStyles = ({ theme, type }) => {\n    return css `\r\n    position: absolute;\r\n    z-index: 2002;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    .donut-loading {\r\n      @keyframes donut-spin {\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n\r\n        100% {\r\n          transform: rotate(360deg);\r\n        }\r\n      }\r\n\r\n      display: inline-block;\r\n      border: 2px solid ${theme.ref.palette.neutral[500]};\r\n      border-left-color: ${theme.sys.color.primary.main};\r\n      border-radius: 50%;\r\n      position: absolute;\r\n      width: ${polished.rem(32)};\r\n      height: ${polished.rem(32)};\r\n      right: calc(50% - ${polished.rem(16)});\r\n      top: calc(50% - ${polished.rem(16)});\r\n      animation: donut-spin 1.2s linear infinite;\r\n    }\r\n    .bar-loading{\r\n        width: 100%;\r\n        height: 2px;\r\n        overflow: hidden;\r\n        background-color: transparent;\r\n        position: relative;\r\n        :after{\r\n          content: ' ';\r\n          display: inline-block;\r\n          height: 100%;\r\n          width: 25%;\r\n          position: absolute;\r\n          top: 0;\r\n          background-color: ${theme.sys.color.primary.main};\r\n          animation: bar 2.6s linear infinite;\r\n        }\r\n        @keyframes bar{\r\n          0%{\r\n            transform: translateX(-25%);\r\n          }\r\n          25%{\r\n            transform: translateX(175%);\r\n          }\r\n          50%{\r\n            transform: translateX(375%);\r\n          }\r\n          75%{\r\n            transform: translateX(575%);\r\n          }\r\n          100%{\r\n            transform: translateX(775%);\r\n          }\r\n        }\r\n      }\r\n    ${(type === LoadingType.DotsPrimary || type === LoadingType.DotsSecondary) && css `\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      @keyframes ball-fall {\r\n        0%{\r\n          opacity: 0;\r\n          transform: translateY(-145%);\r\n        }\r\n        10%{\r\n          opacity: .5;\r\n        }\r\n        20%{\r\n          opacity: 1;\r\n          transform: translateY(0);\r\n        }\r\n        80%{\r\n          opacity: 1;\r\n          transform: translateY(0);\r\n        }\r\n        90%{\r\n          opacity: .5;\r\n        }\r\n        100%{\r\n          opacity: 0;\r\n          transform:translateY(145%);\r\n        }\r\n      }\r\n      &:before,\r\n      &:after,\r\n      .dot-loading {\r\n        width: 0.25rem;\r\n        height: 0.25rem;\r\n        border-radius: 0.25rem;\r\n        box-sizing: border-box;\r\n        opacity:0;\r\n        animation: ball-fall 1s ease-in-out infinite;\r\n      }\r\n      &:before,\r\n      &:after {\r\n        content: '';\r\n        display: inline-block;\r\n      }\r\n      &:before {\r\n        left: -0.375rem;\r\n        animation-delay: -200ms;\r\n      }\r\n      .dot-loading {\r\n        display: inline-block;\r\n        margin: 0 0.125rem;\r\n        animation-delay: -100ms;\r\n      }\r\n      &:after {\r\n        left: 0.375rem;\r\n        animation-delay: 0ms;\r\n      }\r\n      .dot-loading, &:before, &:after {\r\n        background: ${type === LoadingType.DotsPrimary ? theme.sys.color.primary.main : theme.ref.palette.neutral[500]};\r\n      }\r\n    `}\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const toastStyles = (props) => {\n    return css `\r\n    background-color: transparent;\r\n    border: 0;\r\n    box-shadow: 0 0 0;\r\n    position: fixed;\r\n    top: 90px;\r\n    left: 0;\r\n    right: 0;\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 2001;\r\n    .jimu-toast-common{\r\n      box-shadow: 0 2px 6px 0 ${polished.rgba(props.theme.ref.palette.white, 0.2)};\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n      border-radius: 2px;\r\n    }\r\n    .jimu-toast-error{\r\n      background-color: ${props.theme.ref.palette.black};\r\n      color: ${props.theme.sys.color.error.main};\r\n      .jimu-icon{\r\n        color: ${props.theme.sys.color.error.main};\r\n      }\r\n    }\r\n    .jimu-toast-info{\r\n      background-color: ${props.theme.sys.color.secondary.main};\r\n      color: ${props.theme.ref.palette.black};\r\n    }\r\n  `;\n};\n","import { css, getAppStore } from 'jimu-core';\nexport const resizableStyles = (props) => {\n    const theme = props.theme;\n    const gray700 = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral[1000];\n    const white = theme === null || theme === void 0 ? void 0 : theme.ref.palette.white;\n    const isRTL = getAppStore().getState().appContext.isRTL;\n    const scaleX = isRTL ? ' scaleX(-1);' : '';\n    const borderX = isRTL ? `border-left: 3px solid  ${gray700};` : `border-right: 3px solid  ${gray700};`;\n    return css `\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: ${white};\r\n    border: 1px solid transparent;\r\n    .resizer{\r\n      position: absolute;\r\n      display: flex;\r\n      z-index: 999;\r\n      &.resizer-default {\r\n        width: 10px;\r\n        height: 10px;\r\n        ${borderX}\r\n        border-bottom: 3px solid  ${gray700};\r\n      }\r\n      &.top-left {\r\n        left: 0px;\r\n        top: 0px;\r\n        cursor: ${isRTL ? 'nesw-resize' : 'nwse-resize'};\r\n        transform: rotate(180deg)${scaleX};\r\n      }\r\n      &.top-right {\r\n        top: 0px;\r\n        right: 0px;\r\n        cursor: ${isRTL ? 'nwse-resize' : 'nesw-resize'};\r\n        transform: ${isRTL ? 'rotate(90deg)' : 'rotate(270deg)'}${scaleX};\r\n      }\r\n      &.bottom-left {\r\n        left: 0px;\r\n        bottom: 0px;\r\n        cursor: ${isRTL ? 'nwse-resize' : 'nesw-resize'};\r\n        transform: ${isRTL ? 'rotate(270deg)' : 'rotate(90deg)'}${scaleX};\r\n      }\r\n      &.bottom-right {\r\n        right: 0px;\r\n        bottom: 0px;\r\n        cursor: ${isRTL ? 'nesw-resize' : 'nwse-resize'};\r\n        transform: rotate(0deg)${scaleX};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const mobilePanelStyles = (props) => {\n    const theme = props.theme;\n    return css `\r\n    .expand-mobile-panel {\r\n      background-color: ${theme.ref.palette.white};\r\n      box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 2px;\r\n      border-radius: 10px 10px 0px 0px;\r\n      overflow: hidden;\r\n      pointer-events: auto;\r\n      position: relative;\r\n      touch-action: none;\r\n      display: flex;\r\n      flex-flow: column;\r\n    }\r\n\r\n    .expand-mobile-panel-transition {\r\n      transition: height 0.3s;\r\n    }\r\n\r\n    .expand-mobile-panel-touch-container {\r\n      top: 0;\r\n      position: absolute;\r\n      z-index: 1;\r\n      width: 100%;\r\n      height: 54px;\r\n      touch-action: none;\r\n    }\r\n\r\n    .expand-mobile-panel-bar {\r\n      width: 36px;\r\n      height: 4px;\r\n      background-color: ${theme.ref.palette.black};\r\n      border-radius: 2px;\r\n      margin-top: 4px;\r\n    }\r\n\r\n    .mobile-panel-content-header {\r\n      height: 54px;\r\n      width: 100%;\r\n\r\n    }\r\n\r\n    .panel-icon {\r\n      cursor: pointer;\r\n      color: #6e6e6e;\r\n    }\r\n\r\n    .panel-icon:hover {\r\n      color: #2e2e2e;\r\n    }\r\n\r\n    .panel-title {\r\n      font-weight: bold;\r\n      font-size: ${polished.rem(16)};\r\n      color: ${theme.ref.palette.black};\r\n      padding-right: 1rem;\r\n    }\r\n\r\n    .exb-mobile-panel-content {\r\n      height: calc(100% - 30px);\r\n      overflow: auto;\r\n    }\r\n\r\n    .mobile-panel-content-header {\r\n      .panel-icon {\r\n        position: relative;\r\n        z-index: 1;\r\n      }\r\n    }\r\n  `;\n};\n","import { css } from 'jimu-core';\nexport const userProfileStyles = (props) => {\n    const theme = props.theme;\n    return css `\r\n    .header-account{\r\n      .header-login {\r\n        margin-right: 0;\r\n      }\r\n      circle{\r\n        fill: ${theme.sys.color.secondary.light};\r\n      }\r\n      svg {\r\n        color: ${theme.ref.palette.neutral[1000]};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const tagInputStyles = (props) => {\n    const theme = props.theme;\n    return css `\r\n    width: 100%;\r\n    border-radius: 2px;\r\n    background: ${theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral[300]};\r\n    box-sizing: border-box;\r\n    padding: ${polished.rem(6)};\r\n    position: relative;\r\n    .tag-input-dropdown {\r\n      width: 100%;\r\n      .tag-text-input-container {\r\n        padding-bottom: ${polished.rem(10)};\r\n        padding: 0px;\r\n        .tag-text-input {\r\n          font-size: ${polished.rem(13)};\r\n          border: none;\r\n          .input-wrapper {\r\n            outline: none;\r\n            outline-offset: -2px;\r\n            > input {\r\n              white-space: normal;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport { css, jsx, React, classNames, ReactRedux, ReactResizeDetector, AppMode, ImageDisplayQualityMode } from 'jimu-core';\nimport { getCroppedImgPositionInWidget, isIllegalUrl, updateUrlByDisplayQualityMode, canUseImageDisplayQuality, canLoadFuzzyImage, getFuzzyImageWidth } from './util';\nimport { withTheme } from 'jimu-theme';\nconst imageSizeMap = {};\n/**\n * The fill mode for image.\n */\nexport var ImageFillMode;\n(function (ImageFillMode) {\n    ImageFillMode[\"Fit\"] = \"FIT\";\n    ImageFillMode[\"Fill\"] = \"FILL\";\n})(ImageFillMode || (ImageFillMode = {}));\n/** @ignore */\nexport var ImgSourceType;\n(function (ImgSourceType) {\n    ImgSourceType[\"ByURL\"] = \"BY_URL\";\n    ImgSourceType[\"ByUpload\"] = \"BY_UPLOAD\";\n})(ImgSourceType || (ImgSourceType = {}));\nvar ImgLoadState;\n(function (ImgLoadState) {\n    ImgLoadState[\"Loading\"] = \"LOADING\";\n    ImgLoadState[\"LoadOk\"] = \"LOADOK\";\n    ImgLoadState[\"LoadError\"] = \"LOADERROR\";\n})(ImgLoadState || (ImgLoadState = {}));\n/** @ignore */\nexport var CropType;\n(function (CropType) {\n    CropType[\"Real\"] = \"REAL\";\n    CropType[\"Fake\"] = \"FAKE\";\n})(CropType || (CropType = {}));\n/** @ignore */\nexport class _ImageWithParam extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.__unmount = false;\n        this.rootRef = React.createRef();\n        this.getAdaptiveUrlFromImageParam = (imageParam) => {\n            const url = imageParam === null || imageParam === void 0 ? void 0 : imageParam.url;\n            if (isIllegalUrl(url)) { // verification here because use this method both in render() and didMount()/didUpdate()\n                // console.error('Image: illegal url: ' + url)\n                return null; // illegal url\n            }\n            if (!(imageParam === null || imageParam === void 0 ? void 0 : imageParam.isUseCompress)) {\n                return url;\n            }\n            else {\n                const isBlobCacheResourceExp = new RegExp('^blob:\\http(s?)://(.)');\n                if (isBlobCacheResourceExp.test(imageParam.url)) {\n                    return url; // imageParam.url\n                }\n                if (imageParam.imgSourceType === ImgSourceType.ByUpload) {\n                    return url.replace(imageParam.fileName, imageParam.fileName.split('.')[0] + '_compress.' + imageParam.fileName.split('.')[1]);\n                }\n                return url;\n            }\n        };\n        this.preLoadCommonImage = (imageParam, mode) => __awaiter(this, void 0, void 0, function* () {\n            const url = yield this.parseImageSrc(imageParam, mode);\n            const { width, height } = imageSizeMap[url] || {};\n            if (width && height) {\n                this.setState({\n                    imageWidth: width,\n                    imageHeight: height\n                });\n            }\n            this.imageObject = new Image();\n            this.imageObject.src = url;\n            this.imageObject.onload = () => {\n                if (!this.imageObject || this.imageParam !== imageParam || this.__unmount) {\n                    return;\n                }\n                const { width, height } = this.imageObject;\n                imageSizeMap[url] = { width, height };\n                this.setState({\n                    picLoadResult: ImgLoadState.LoadOk,\n                    imageWidth: width,\n                    imageHeight: height,\n                    imageSrc: url\n                });\n            };\n            this.imageObject.onerror = () => {\n                if (!this.imageObject || this.imageParam !== imageParam || this.__unmount) {\n                    return;\n                }\n                this.setState({\n                    picLoadResult: ImgLoadState.LoadError,\n                    imageWidth: null,\n                    imageHeight: null,\n                    imageSrc: ''\n                });\n            };\n        });\n        this.preLoadImage = (imageParam, mode) => __awaiter(this, void 0, void 0, function* () {\n            this.cancelPreLoadImage();\n            this.imageParam = imageParam;\n            if (isIllegalUrl(imageParam.url)) {\n                this.setState({\n                    picLoadResult: ImgLoadState.LoadError,\n                    imageWidth: null,\n                    imageHeight: null,\n                    imageSrc: ''\n                });\n                return;\n            }\n            if (canLoadFuzzyImage(imageParam) && mode !== ImageDisplayQualityMode.Fuzzy) {\n                const url = yield this.parseImageSrc(imageParam, ImageDisplayQualityMode.Fuzzy);\n                this.setState({\n                    picLoadResult: ImgLoadState.Loading,\n                    imageWidth: getFuzzyImageWidth()\n                }, () => {\n                    this.preLoadCommonImage(imageParam, mode).then(() => {\n                        if (this.imageParam !== imageParam)\n                            return;\n                        this.setState({\n                            imageSrc: url\n                        });\n                    });\n                });\n            }\n            else {\n                this.setState({\n                    picLoadResult: ImgLoadState.Loading\n                }, () => {\n                    this.preLoadCommonImage(imageParam, mode);\n                });\n            }\n        });\n        this.cancelPreLoadImage = () => {\n            if (this.imageObject)\n                this.imageObject.src = '';\n            this.imageObject = null;\n            this.imageParam = null;\n        };\n        this.standardUrl = (url) => {\n            if (url === '' || url === null || url === undefined) {\n                return '';\n            }\n            else {\n                return url;\n            }\n        };\n        this.onResize = ({ width, height }) => {\n            if (this.__unmount) {\n                return;\n            }\n            this.setState({\n                widgetWidth: width,\n                widgetHeight: height\n            });\n        };\n        this.getWidgetWidth = () => {\n            return (this.props.size && this.props.size.width) ? this.props.size.width : this.state.widgetWidth;\n        };\n        this.getWidgetHeight = () => {\n            return (this.props.size && this.props.size.height) ? this.props.size.height : this.state.widgetHeight;\n        };\n        this.parseImageSrc = (imageParam_1, ...args_1) => __awaiter(this, [imageParam_1, ...args_1], void 0, function* (imageParam, mode = ImageDisplayQualityMode.Original) {\n            var _a;\n            const { url, originalWidth, imgSourceType, cropParam, originalUrl = url, fileFormat = 'image/jpeg' } = imageParam;\n            const cropWidth = (_a = cropParam === null || cropParam === void 0 ? void 0 : cropParam.cropPixel) === null || _a === void 0 ? void 0 : _a.width;\n            // If url is illegal, callback param is null.\n            if (isIllegalUrl(url)) {\n                return null;\n            }\n            const adaptiveUrl = this.getAdaptiveUrlFromImageParam(imageParam);\n            if (mode === ImageDisplayQualityMode.Original || imgSourceType === ImgSourceType.ByURL ||\n                (!canLoadFuzzyImage(imageParam) && !canUseImageDisplayQuality(imageParam))) {\n                return adaptiveUrl;\n            }\n            return yield updateUrlByDisplayQualityMode({ originalUrl, originalWidth, displayUrl: adaptiveUrl, cropWidth, mode, mimeType: fileFormat });\n        });\n        this.imageParam = null;\n        this.imageObject = null;\n        const imageSize = imageSizeMap[this.props.imageParam && this.getAdaptiveUrlFromImageParam(this.props.imageParam)];\n        this.state = {\n            picLoadResult: ImgLoadState.LoadError,\n            widgetWidth: this.props.size && this.props.size.width,\n            widgetHeight: this.props.size && this.props.size.height,\n            imageWidth: imageSize && imageSize.width,\n            imageHeight: imageSize && imageSize.height,\n            isRefresh: false,\n            imageSrc: ''\n        };\n    }\n    getStyle() {\n        const { theme, imageParam } = this.props;\n        const cropParam = imageParam.cropParam;\n        let maskImage = 'none';\n        const hasMask = cropParam && cropParam.cropShape && cropParam.svgViewBox && cropParam.svgPath;\n        if (hasMask) {\n            const svg = `<svg width=\"100%\" height=\"100%\" viewBox=\"${cropParam.svgViewBox}\" preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g>\r\n          <path d=\"${cropParam.svgPath}\" />\r\n        </g>\r\n      </svg>`;\n            maskImage = `url(\"data:image/svg+xml;base64,${window.btoa(svg)}\")`;\n        }\n        return css `\r\n      width: 100%;\r\n      height: 100%;\r\n      -webkit-mask-image: ${maskImage};\r\n      mask: ${maskImage};\r\n      mask-image: ${maskImage};\r\n      mask-size: 100% 100%;\r\n\r\n      &.widget-image-default {\r\n        background: ${theme ? theme.ref.palette.neutral[300] : '#eaeaea'}\r\n          url(${require('./assets/defaultimg.svg')}) center center no-repeat;\r\n        background-size: 50% 50%;\r\n      }\r\n\r\n      transition: filter .25s ease, opacity .25s ease;\r\n      &.widget-image-loading {\r\n        filter: blur(3px);\r\n        opacity: 1;\r\n      }\r\n    `;\n    }\n    getImageStyle() {\n        const { imageParam, imageFillMode, isAutoWidth, isAutoHeight } = this.props;\n        const cropParam = imageParam.cropParam;\n        const cropPixel = cropParam && cropParam.cropPixel;\n        const cropType = cropParam && cropParam.cropType;\n        const widgetWidth = this.getWidgetWidth() || this.rootRef.current.clientWidth;\n        const widgetHeight = this.getWidgetHeight() || this.rootRef.current.clientWidth;\n        if (!cropPixel || !cropType || cropType === CropType.Real) {\n            const objectFit = (!imageFillMode || imageFillMode === ImageFillMode.Fill) ? 'cover' : 'contain';\n            const width = isAutoWidth ? 'auto' : '100%';\n            let height = isAutoHeight ? 'auto' : '100%';\n            // workaround for a Firefox and Safari issue:\n            // https://devtopia.esri.com/Beijing-R-D-Center/ExperienceBuilder/issues/17299#issuecomment-4447014\n            if (isAutoWidth && !isAutoHeight) {\n                height = widgetHeight + 'px';\n            }\n            return css `\r\n        width: ${width};\r\n        height: ${height};\r\n        object-fit: ${objectFit};\r\n        object-position: 50% 50%;\r\n        overflow-clip-margin: unset;\r\n      `;\n        }\n        else {\n            const positionInWidget = getCroppedImgPositionInWidget(cropParam, widgetWidth, widgetHeight);\n            const zoom = positionInWidget.zoom;\n            const left = positionInWidget.x;\n            const top = positionInWidget.y;\n            return css `\r\n        position: absolute;\r\n        left: ${left}px;\r\n        top: ${top}px;\r\n        width: ${this.state.imageWidth * zoom}px;\r\n        height: ${this.state.imageHeight * zoom}px;\r\n      `;\n        }\n    }\n    componentDidMount() {\n        this.__unmount = false;\n        this.preLoadImage(this.props.imageParam, this.props.imageDisplayQualityMode);\n    }\n    componentWillUnmount() {\n        this.__unmount = true;\n        this.cancelPreLoadImage();\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        var _a, _b;\n        return this.standardUrl((_a = this.props.imageParam) === null || _a === void 0 ? void 0 : _a.url) !== this.standardUrl((_b = prevProps.imageParam) === null || _b === void 0 ? void 0 : _b.url);\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        var _a, _b, _c, _d;\n        if (snapshot || this.props.imageDisplayQualityMode !== prevProps.imageDisplayQualityMode) {\n            this.setState({ isRefresh: true }, () => {\n                this.setState({ isRefresh: false }, () => {\n                    this.preLoadImage(this.props.imageParam, this.props.imageDisplayQualityMode);\n                });\n            });\n        }\n        if (((_b = (_a = this.props.imageParam) === null || _a === void 0 ? void 0 : _a.cropParam) === null || _b === void 0 ? void 0 : _b.cropShape) !== ((_d = (_c = prevProps.imageParam) === null || _c === void 0 ? void 0 : _c.cropParam) === null || _d === void 0 ? void 0 : _d.cropShape)) {\n            this.forceUpdate();\n        }\n    }\n    render() {\n        const { appMode, imageParam, toolTip, altText, size } = this.props;\n        const { picLoadResult, imageSrc } = this.state;\n        const showDefault = (appMode === AppMode.Design && picLoadResult === ImgLoadState.LoadError && !imageSrc) || !(imageParam === null || imageParam === void 0 ? void 0 : imageParam.url);\n        const showLoading = picLoadResult === ImgLoadState.Loading && this.props.useFadein;\n        return jsx(\"div\", { css: this.getStyle(), className: classNames({\n                'widget-image-default': showDefault,\n                'widget-image-loading': showLoading\n            }), ref: this.rootRef },\n            imageSrc && jsx(\"img\", { title: toolTip, src: imageSrc, alt: altText, css: this.getImageStyle() }),\n            (!size || (!size.width && !size.height)) && jsx(ReactResizeDetector, { targetRef: this.rootRef, handleWidth: true, handleHeight: true, onResize: this.onResize }));\n    }\n}\n_ImageWithParam.defaultProps = {\n    imageParam: {}\n};\nconst mapStateToProps = (state, ownProps) => {\n    var _a, _b;\n    // map appPath and queryObject to render for updating maskUrl\n    const cropParam = ownProps.imageParam && ownProps.imageParam.cropParam;\n    if (cropParam && (cropParam.cropType === CropType.Fake || cropParam.cropShape) && ownProps.isAutoHeight) {\n        return {\n            appPath: state.appPath,\n            queryObject: state.queryObject,\n            appMode: (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.appMode\n        };\n    }\n    else {\n        return {\n            appPath: null,\n            queryObject: null,\n            appMode: (_b = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _b === void 0 ? void 0 : _b.appMode\n        };\n    }\n};\n/**\n * The ImageWithParam component is used to visualize the image, it provides fill mode.\n * It can be used at runtime or in the setting page.\n * It can cooperate with ImageSelector component(jimu-ui/advanced/resource-selector).\n */\nexport const ImageWithParam = ReactRedux.connect(mapStateToProps)(withTheme(_ImageWithParam));\n","/** @jsx jsx */\nimport { React, classNames, jsx, css, polished, hooks } from 'jimu-core';\nimport { Popper } from '../overlay/popper';\nimport { useTheme } from 'jimu-theme';\nimport defaultMessages from '../../translations/default';\nconst useStyle = () => {\n    const theme = useTheme();\n    const dark = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral[1200];\n    const white = theme === null || theme === void 0 ? void 0 : theme.ref.palette.white;\n    const gray700 = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral[1000];\n    const fontSize = theme === null || theme === void 0 ? void 0 : theme.sys.typography.label2.fontSize;\n    return React.useMemo(() => {\n        return css `\r\n    background: ${white};\r\n    width: ${polished.rem(300)};\r\n    overflow: hidden;\r\n    font-size: ${fontSize};\r\n    color: ${dark};\r\n    padding: 8px;\r\n    margin-top: 10px;\r\n    z-index: 51;\r\n    .linkto {\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 3;\r\n      -webkit-box-orient: vertical;\r\n      word-break: break-all;\r\n      word-wrap: break-word;\r\n      span {\r\n        color: ${gray700};\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  `;\n    }, [dark, white, gray700, fontSize]);\n};\nexport const LinkTip = ({ open = true, reference, placement = 'bottom', className, href }) => {\n    const style = useStyle();\n    const translate = hooks.useTranslation(defaultMessages);\n    return (jsx(Popper, { open: open, reference: reference, placement: placement, className: classNames('shadow', className), css: style },\n        jsx(\"div\", { className: 'linkto' },\n            translate('linkToString'),\n            \": \",\n            jsx(\"span\", null, href)),\n        jsx(\"div\", null, translate('linkPreviewTip'))));\n};\n","/** @jsx jsx */\nimport { React, classNames, polished, css, jsx } from 'jimu-core';\nimport { LoadingType } from './types';\nimport { getLoadingStyles, withStyles, withTheme } from 'jimu-theme';\nconst prefix = 'jimu';\n/**\n * The `Loading` component can show loading state and disable interactions.\n *\n * ```ts\n * import { Loading } from 'jimu-ui'\n * ```\n */\nexport class _Loading extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        _Loading.count++;\n        this.id = `jimu-loading-${_Loading.count}`;\n    }\n    getClassFromType(type, style) {\n        /**\n         * If have style of primary loading and secondary loading, won't add css class.\n         * The reason is that style of these two loading types has conflicts with css class.\n         */\n        if (style && (type === LoadingType.Primary || type === LoadingType.Secondary)) {\n            return '';\n        }\n        switch (type) {\n            case LoadingType.Primary:\n                return 'jimu-primary-loading';\n            case LoadingType.Secondary:\n                return 'jimu-secondary-loading';\n            case LoadingType.Donut:\n                return 'donut-loading';\n            case LoadingType.Bar:\n                return 'bar-loading';\n            case LoadingType.DotsPrimary:\n                return 'dot-loading primary';\n            case LoadingType.DotsSecondary:\n                return 'dot-loading secondary';\n            default: //eslint-disable-line @typescript-eslint/switch-exhaustiveness-check\n                return 'jimu-primary-loading';\n        }\n    }\n    getStyle(width, height, type) {\n        if (typeof width !== 'number' && typeof height !== 'number') {\n            return null;\n        }\n        if (!type || type === LoadingType.Primary || type === LoadingType.Secondary) {\n            const w = typeof width === 'number' ? `${width / 3}px` : (type === LoadingType.Primary ? '0.85rem' : '0.51rem');\n            const h = typeof height === 'number' ? `${height}px` : (type === LoadingType.Primary ? '2rem' : '1.2rem');\n            const c = type === LoadingType.Primary ? this.props.theme.sys.color.primary.main : polished.rgba(this.props.theme.ref.palette.neutral[700], 0.5);\n            return getLoadingStyles(w, h, c, `${this.id}-${type}`);\n        }\n        else if (type === LoadingType.Donut) {\n            const w = typeof width === 'number' ? `${width}px` : '2rem';\n            const h = typeof height === 'number' ? `${height}px` : '2rem';\n            const r = typeof width === 'number' ? `calc(50% - ${width / 2}px)` : 'calc(50% - 1rem)';\n            const t = typeof width === 'number' ? `calc(50% - ${height / 2}px)` : 'calc(50% - 1rem)';\n            return css `\r\n        width: ${w} !important;\r\n        height: ${h} !important;\r\n        right: ${r} !important;\r\n        top: ${t} !important;\r\n      `;\n        }\n        else if (type === LoadingType.Bar) {\n            const w = typeof width === 'number' ? `${width}px` : '100%';\n            const h = typeof height === 'number' ? `${height}px` : '2px';\n            return css `\r\n        width: ${w} !important;\r\n        height: ${h} !important;\r\n      `;\n        }\n        return null;\n    }\n    render() {\n        const classes = classNames(`${prefix}-loading`, this.props.className);\n        const style = this.getStyle(this.props.width, this.props.height, this.props.type);\n        const classFromType = this.getClassFromType(this.props.type, style);\n        return (jsx(\"div\", { className: classes },\n            jsx(\"div\", { className: `justify-content-center align-content-center ${classFromType}`, css: style })));\n    }\n}\n_Loading.count = 0;\n/**\n * The `Loading` component can show loading state and disable interactions.\n *\n * ```ts\n * import { Loading } from 'jimu-ui'\n * ```\n */\nexport const Loading = withStyles(withTheme(_Loading), 'Loading');\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { Input as BSInput } from 'reactstrap';\nimport { React, jsx, css, classNames, INTERACTIVE_CLASS, hooks, focusElementInKeyboardMode } from 'jimu-core';\nimport { LoadingType } from './types';\nimport { Button } from './button';\nimport { Loading } from './loading';\nimport { fetchTextInputValidityResult } from '../utils/utils';\nimport { Popper } from './overlay';\nimport defaultMessage from '../translations/default';\nimport { withStyles } from 'jimu-theme';\nimport { CloseOutlined } from 'jimu-icons/outlined/editor/close';\nimport { WarningOutlined } from 'jimu-icons/outlined/suggested/warning';\n/**\n * Use native input dom check method to check validity.\n */\nconst TypesWithInputDomCheckValidity = ['email'];\n/**\n * The `TextInput` component provides the user with a text field to input string content.\n *\n * ```ts\n * import { TextInput } from 'jimu-ui'\n * ```\n */\nexport const _TextInput = React.forwardRef(function TextInputComponent(props, ref) {\n    const { onAcceptValue, onPressEnter, value, className, style, prefix, suffix, checkValidityOnChange, checkValidityOnAccept, borderless, allowClear = false, size = 'default' } = props, otherProps = __rest(props, [\"onAcceptValue\", \"onPressEnter\", \"value\", \"className\", \"style\", \"prefix\", \"suffix\", \"checkValidityOnChange\", \"checkValidityOnAccept\", \"borderless\", \"allowClear\", \"size\"]);\n    const isControlled = React.useMemo(() => value != null, [value]);\n    const [isValid, setIsValid] = React.useState(true); // by default input is valid\n    const [isBusy, setIsBusy] = React.useState(false);\n    const [hasFocus, setHasFocus] = React.useState(false);\n    const [hasContent, setHasContent] = React.useState((value != null && value !== '') || (props.defaultValue != null && props.defaultValue !== ''));\n    const errorMsg = React.useRef();\n    const cancelable = hooks.useCancelablePromiseMaker();\n    const refObj = React.useRef();\n    const handleRef = hooks.useForkRef(refObj, ref);\n    const getI18nMessage = hooks.useTranslation(defaultMessage);\n    // Only show validating result after user changes something.\n    const shouldShowValidResult = React.useRef(false);\n    // validate the value once when the component has been mounted\n    React.useEffect(() => {\n        let checkFunc;\n        if (typeof checkValidityOnChange === 'function' && value) {\n            checkFunc = checkValidityOnChange;\n        }\n        else if (typeof checkValidityOnAccept === 'function' && value) {\n            checkFunc = checkValidityOnAccept;\n        }\n        if (checkFunc) {\n            setIsBusy(true);\n            fetchTextInputValidityResult(value, checkFunc)\n                .then(checkResult => {\n                if (!checkResult.valid) {\n                    errorMsg.current = checkResult.msg;\n                    shouldShowValidResult.current = true;\n                    setIsValid(false);\n                }\n            })\n                .finally(() => { setIsBusy(false); });\n        }\n    }, []); //eslint-disable-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n        if (!props.defaultValue) {\n            setHasContent((value != null && value !== ''));\n        }\n    }, [value, props.defaultValue]);\n    const onChange = (evt) => __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n        let checkResult;\n        const value = evt.target.value;\n        if (typeof checkValidityOnChange === 'function') { // custom validation\n            checkResult = yield cancelable(fetchTextInputValidityResult(value, checkValidityOnChange));\n        }\n        else if (props.required || TypesWithInputDomCheckValidity.includes(props.type)) {\n            checkResult = { valid: refObj.current.checkValidity(), msg: getI18nMessage('requiredField') };\n        }\n        if (checkResult != null) {\n            errorMsg.current = checkResult.msg;\n            shouldShowValidResult.current = true;\n            setIsValid(checkResult.valid);\n        }\n        setHasContent(value !== '');\n    });\n    const onAccept = (text) => __awaiter(this, void 0, void 0, function* () {\n        setIsBusy(true);\n        let checkResult;\n        if (typeof checkValidityOnAccept === 'function') {\n            checkResult = yield cancelable(fetchTextInputValidityResult(text, checkValidityOnAccept));\n        }\n        else if (props.required || TypesWithInputDomCheckValidity.includes(props.type)) {\n            checkResult = { valid: refObj.current.checkValidity(), msg: getI18nMessage('requiredField') };\n        }\n        if (checkResult != null) {\n            errorMsg.current = checkResult.msg;\n            shouldShowValidResult.current = true;\n            setIsValid(checkResult.valid);\n        }\n        if (!checkResult || checkResult.valid) {\n            onAcceptValue === null || onAcceptValue === void 0 ? void 0 : onAcceptValue(text);\n        }\n        setIsBusy(false);\n    });\n    const onBlur = (evt) => {\n        onAccept(evt.target.value).finally(() => {\n            var _a;\n            (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n        });\n        setHasFocus(false);\n    };\n    const onFocus = (evt) => {\n        var _a;\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n        setHasFocus(true);\n    };\n    const onKeyUp = (evt) => {\n        var _a;\n        if (evt.key === 'Enter') {\n            onAccept(evt.currentTarget.value).finally(() => {\n                onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(evt);\n            });\n        }\n        (_a = props.onKeyUp) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n    };\n    const setFocus = (evt) => {\n        evt.stopPropagation();\n        if (!hasFocus) {\n            focusElementInKeyboardMode(refObj.current, true);\n        }\n    };\n    const clearText = () => {\n        var _a;\n        refObj.current.value = '';\n        setHasContent(false);\n        // mock a change event\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, {\n            target: refObj.current,\n            currentTarget: refObj.current,\n            value: '',\n            preventDefault: () => null,\n            stopPropagation: () => null\n        });\n        focusElementInKeyboardMode(refObj.current, true);\n    };\n    const classes = classNames('jimu-input', props.size && `jimu-input-${props.size}`, className, {\n        'is-valid': shouldShowValidResult.current && isValid,\n        'is-invalid': shouldShowValidResult.current && !isValid,\n        'no-border': props.borderless,\n        readonly: props.readOnly,\n        disabled: props.disabled || isBusy\n    });\n    const getStyle = () => {\n        return css `\r\n      .input-wrapper {\r\n        display: inline-flex;\r\n        align-items: center;\r\n        flex-wrap: nowrap;\r\n        position: relative;\r\n      }\r\n      input {\r\n        flex-grow: 1;\r\n        border: none;\r\n        padding: 0;\r\n        outline: none;\r\n        color: inherit;\r\n        min-width: 0;\r\n        background: transparent;\r\n        &:focus,\r\n        &:focus-visible {\r\n          outline: none !important;\r\n          box-shadow: none !important;\r\n        }\r\n      }\r\n      .clear-content {\r\n        cursor: pointer;\r\n      }\r\n    `;\n    };\n    return (jsx(\"div\", { className: classes, css: getStyle(), style: style },\n        jsx(\"span\", { className: `input-wrapper ${INTERACTIVE_CLASS}` },\n            prefix && jsx(\"span\", { className: 'text-input-prefix mr-1' }, prefix),\n            jsx(BSInput, Object.assign({}, otherProps, { className: 'text-truncate', size: props.htmlSize, bsSize: size === 'default' ? undefined : size, value: isControlled ? value : undefined, onChange: onChange, onBlur: onBlur, valid: shouldShowValidResult.current && isValid, invalid: shouldShowValidResult.current && !isValid, onFocus: onFocus, onKeyUp: onKeyUp, innerRef: handleRef })),\n            allowClear && hasContent && (jsx(Button, { className: 'text-input-clear clear-content ml-1', type: 'tertiary', \"aria-label\": getI18nMessage('clear'), title: getI18nMessage('clear'), icon: true, size: 'sm', onClick: clearText },\n                jsx(CloseOutlined, { size: 's' }))),\n            shouldShowValidResult.current && !isValid && (jsx(\"div\", { onClick: setFocus },\n                jsx(WarningOutlined, { color: 'var(--sys-color-error-main)', css: css `min-width: 16px;` }))),\n            suffix && jsx(\"span\", { className: 'text-input-suffix ml-1' }, suffix),\n            isBusy && (jsx(Loading, { type: LoadingType.Donut, width: 16, height: 16, css: css `\r\n              position: absolute;\r\n              top: 0;\r\n              left: 0;\r\n              right: 0;\r\n              bottom: 0;\r\n            ` }))),\n        shouldShowValidResult.current && !isValid && errorMsg.current &&\n            jsx(Popper, { open: hasFocus, placement: 'top-start', reference: refObj.current, trapFocus: false, autoFocus: false, zIndex: 2001, offsetOptions: 10 },\n                jsx(\"div\", { css: css `\r\n                color: var(--ref-palette-black);\r\n                background-color: var(--ref-palette-neutral-600);\r\n                border-radius: 2px;\r\n                padding: 2px 8px;\r\n              ` }, errorMsg.current))));\n});\n/**\n * The `TextInput` component provides the user with a text field to input string content.\n *\n * ```ts\n * import { TextInput } from 'jimu-ui'\n * ```\n */\nexport const TextInput = withStyles(_TextInput, 'TextInput');\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css, classNames, hooks } from 'jimu-core';\nimport { Input as BSInput } from 'reactstrap';\nimport { LoadingType } from './types';\nimport { withStyles } from 'jimu-theme';\nimport { Loading } from './loading';\nimport defaultMessage from '../translations/default';\nimport { fetchTextInputValidityResult } from '../utils/utils';\nimport { WarningOutlined } from 'jimu-icons/outlined/suggested/warning';\n/**\n * The `TextArea` input component is similar to the `TextInput` component, but creates a large input area and is intended to be used for longer texts, like messages.\n *\n * ```ts\n * import { TextArea } from 'jimu-ui'\n * ```\n */\nexport const _TextArea = React.forwardRef(function TextAreaComponent(props, ref) {\n    const { onAcceptValue, value, className, style, height, readOnly, disabled, checkValidityOnAccept, checkValidityOnChange } = props, otherProps = __rest(props, [\"onAcceptValue\", \"value\", \"className\", \"style\", \"height\", \"readOnly\", \"disabled\", \"checkValidityOnAccept\", \"checkValidityOnChange\"]);\n    const isControlled = React.useMemo(() => value != null, [value]);\n    const [isValid, setIsValid] = React.useState(true); // by default input is valid\n    const [isBusy, setIsBusy] = React.useState(false);\n    const errorMsg = React.useRef();\n    const cancelable = hooks.useCancelablePromiseMaker();\n    const refObj = React.useRef();\n    const handleRef = hooks.useForkRef(refObj, ref);\n    const textHeight = React.useRef(0);\n    const getI18nMessage = hooks.useTranslation(defaultMessage);\n    // Only show validating result after user changes something.\n    const shouldShowValidResult = React.useRef(false);\n    React.useEffect(() => {\n        let checkFunc;\n        if (typeof checkValidityOnChange === 'function' && value) {\n            checkFunc = checkValidityOnChange;\n        }\n        else if (typeof checkValidityOnAccept === 'function' && value) {\n            checkFunc = checkValidityOnAccept;\n        }\n        if (checkFunc) {\n            setIsBusy(true);\n            textHeight.current = refObj.current.clientHeight;\n            fetchTextInputValidityResult(value, checkFunc)\n                .then(checkResult => {\n                if (!checkResult.valid) {\n                    errorMsg.current = checkResult.msg;\n                    shouldShowValidResult.current = true;\n                }\n            })\n                .finally(() => { setIsBusy(false); });\n        }\n    }, []); //eslint-disable-line react-hooks/exhaustive-deps\n    const onChange = (evt) => {\n        var _a;\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n        let checkResult;\n        const value = evt.target.value;\n        if (typeof checkValidityOnChange === 'function') { // custom validation\n            checkResult = checkValidityOnChange(value);\n        }\n        else if (props.required) {\n            checkResult = { valid: refObj.current.checkValidity(), msg: getI18nMessage('requiredField') };\n        }\n        if (checkResult != null) {\n            errorMsg.current = checkResult.msg;\n            shouldShowValidResult.current = true;\n            setIsValid(checkResult.valid);\n        }\n    };\n    const onAccept = (text) => __awaiter(this, void 0, void 0, function* () {\n        textHeight.current = refObj.current.clientHeight;\n        setIsBusy(true);\n        let checkResult;\n        if (typeof checkValidityOnAccept === 'function') {\n            checkResult = yield cancelable(fetchTextInputValidityResult(text, checkValidityOnAccept));\n        }\n        else if (props.required) {\n            checkResult = { valid: refObj.current.checkValidity(), msg: getI18nMessage('requiredField') };\n        }\n        if (checkResult != null) {\n            errorMsg.current = checkResult.msg;\n            shouldShowValidResult.current = true;\n            setIsValid(checkResult.valid);\n        }\n        if (!checkResult || checkResult.valid) {\n            onAcceptValue === null || onAcceptValue === void 0 ? void 0 : onAcceptValue(text);\n        }\n        setIsBusy(false);\n    });\n    const onBlur = (evt) => {\n        var _a;\n        if (isValid) {\n            onAccept(evt.target.value).finally(() => {\n                var _a;\n                (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n            });\n        }\n        else {\n            (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n        }\n    };\n    const onFocus = (evt) => {\n        var _a;\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n    };\n    const classes = classNames('jimu-input-area w-100', className);\n    const getStyle = () => {\n        return css `\r\n      position: relative;\r\n      textarea { height: ${height > 0 ? height + 'px' : 'auto'}; }\r\n      .jimu-loading {\r\n        position: absolute;\r\n        top: ${Math.max(0, textHeight.current - 24)}px;\r\n        right: 12px;\r\n        left: auto;\r\n        bottom: auto;\r\n        width: 16px;\r\n        height: 16px;\r\n      }\r\n    `;\n    };\n    return (jsx(\"div\", { className: classes, css: getStyle(), style: style },\n        jsx(BSInput, Object.assign({}, otherProps, { className: 'w-100', type: 'textarea', size: props.htmlSize, value: isControlled ? value : undefined, onChange: onChange, onBlur: onBlur, valid: shouldShowValidResult.current && isValid, invalid: shouldShowValidResult.current && !isValid, onFocus: onFocus, innerRef: handleRef, readOnly: readOnly, disabled: disabled || isBusy })),\n        shouldShowValidResult.current && !isValid && (jsx(\"div\", { className: 'warn-icon d-flex align-items-center mt-2' },\n            jsx(WarningOutlined, { color: 'var(--sys-color-error-main)', css: css `min-width: 16px;` }),\n            jsx(\"span\", { className: 'ml-2', css: css `color: var(--sys-color-error-main)` }, errorMsg.current))),\n        isBusy && (jsx(Loading, { type: LoadingType.Donut, width: 16, height: 16 }))));\n});\n/**\n * The `TextArea` input component is similar to the `TextInput` component, but creates a large input area and is intended to be used for longer texts, like messages.\n *\n * ```ts\n * import { TextArea } from 'jimu-ui'\n * ```\n */\nexport const TextArea = withStyles(_TextArea, 'TextArea');\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css, polished, esri, classNames, injectIntl, DataSourceManager, dataSourceUtils, JimuFieldType, ReactRedux, DataSourceTypes, DataSourceStatus, EMPTY_OPTION_VALUE, getAppStore, QueryScope, lodash, ClauseOperator, ClauseLogic, focusElementInKeyboardMode, dateUtils } from 'jimu-core';\nimport { LoadingType } from './types';\nimport { TextInput } from './text-input';\nimport { Label } from './label';\nimport { Button } from './button';\nimport { Checkbox } from './switch';\nimport { Dropdown, DropdownButton, DropdownMenu, DropdownItem } from './dropdown';\nimport defaultMessages from '../translations/default';\nimport { Loading } from './loading';\nimport { QueryScopeContext } from './query-scope-context';\nimport { withStyles } from 'jimu-theme';\nimport { SearchOutlined } from 'jimu-icons/outlined/editor/search';\nimport { CheckOutlined } from 'jimu-icons/outlined/application/check';\nimport { InfoOutlined } from 'jimu-icons/outlined/suggested/info';\nimport { MenuOutlined } from 'jimu-icons/outlined/editor/menu';\nimport { ShowSelectionOutlined } from 'jimu-icons/outlined/editor/show-selection';\nimport { ShowSelectionRtlOutlined } from 'jimu-icons/outlined/editor/show-selection--rtl';\nimport { TrashCheckOutlined } from 'jimu-icons/outlined/editor/trash-check';\nconst LOCAL_DS_PREFIX = 'ADVANCED_SELECT';\nconst MIN_COUNT_FOR_SCROLLING = 8; // 7 can trigger scroll bar\nconst shiftOptions = {\n    crossAxis: true\n};\nconst numericFieldLength = {\n    esriFieldTypeOID: 32,\n    esriFieldTypeSmallInteger: 16,\n    esriFieldTypeInteger: 32,\n    esriFieldTypeSingle: 128,\n    esriFieldTypeDouble: 1024\n};\nexport class _AdvancedSelectInner extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.isDsInfoChanged = (prevProps) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            const { isMultiple, dataSourceInfo, dataSourceBelongInfo } = this.props;\n            const dsInfoChanged = dataSourceInfo !== prevProps.dataSourceInfo || dataSourceBelongInfo !== prevProps.dataSourceBelongInfo;\n            if (!dsInfoChanged ||\n                (((_a = prevProps.dataSourceInfo) === null || _a === void 0 ? void 0 : _a.status) === DataSourceStatus.Loaded && (dataSourceInfo === null || dataSourceInfo === void 0 ? void 0 : dataSourceInfo.status) === DataSourceStatus.Loading) || // loaded to loading when values are changed.\n                (((_b = prevProps.dataSourceInfo) === null || _b === void 0 ? void 0 : _b.status) === DataSourceStatus.Loading && (dataSourceInfo === null || dataSourceInfo === void 0 ? void 0 : dataSourceInfo.status) === DataSourceStatus.Loaded) || // loading to loaded after the above status.\n                (((_c = prevProps.dataSourceBelongInfo) === null || _c === void 0 ? void 0 : _c.status) === DataSourceStatus.Loaded && (dataSourceBelongInfo === null || dataSourceBelongInfo === void 0 ? void 0 : dataSourceBelongInfo.status) === DataSourceStatus.Loading) ||\n                (((_d = prevProps.dataSourceBelongInfo) === null || _d === void 0 ? void 0 : _d.status) === DataSourceStatus.Loading && (dataSourceBelongInfo === null || dataSourceBelongInfo === void 0 ? void 0 : dataSourceBelongInfo.status) === DataSourceStatus.Loaded)) {\n                return false;\n            }\n            // loaded & loaded, sql is changed by selecting values.\n            const currentWidgetQueriesChanged = ((_e = dataSourceInfo === null || dataSourceInfo === void 0 ? void 0 : dataSourceInfo.widgetQueries) === null || _e === void 0 ? void 0 : _e[this.context.widgetId]) !== ((_g = (_f = prevProps.dataSourceInfo) === null || _f === void 0 ? void 0 : _f.widgetQueries) === null || _g === void 0 ? void 0 : _g[this.context.widgetId]);\n            if (currentWidgetQueriesChanged) {\n                if (!isMultiple || this.state.isOpen) { // single, multiple & open\n                    return false;\n                }\n            }\n            return dsInfoChanged;\n        };\n        this.i18nMessage = (id, values) => {\n            return this.props.intl.formatMessage({ id: id, defaultMessage: defaultMessages[id] }, values);\n        };\n        this.showCheckAll = (staticValues) => {\n            const { hideSearchInput = false, hideCheckAll = true, hideBottomTools = false, isMultiple } = this.props;\n            return !hideCheckAll && isMultiple && hideSearchInput && hideBottomTools && (staticValues === null || staticValues === void 0 ? void 0 : staticValues.length) > 1;\n        };\n        // get checkAll states\n        this.getCheckAllStates = (currentList, selectedValues) => {\n            const checkAllChecked = (selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.length) === currentList.length;\n            const checkAllIndeterminate = (selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.length) < currentList.length && (selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.length) > 0;\n            return {\n                checkAllChecked,\n                checkAllIndeterminate\n            };\n        };\n        this.getPageSize = (includedRealStaticValues) => {\n            var _a, _b, _c;\n            return (includedRealStaticValues === null || includedRealStaticValues === void 0 ? void 0 : includedRealStaticValues.length) > 0\n                ? includedRealStaticValues.length\n                : Math.max((_c = (_b = (_a = this.props.dataSource) === null || _a === void 0 ? void 0 : _a.getDataViewConfig()) === null || _b === void 0 ? void 0 : _b.pageSize) !== null && _c !== void 0 ? _c : 0, 20);\n        };\n        this.createDataSources = () => {\n            var _a;\n            if (this.dsManager) {\n                if ((_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.id) {\n                    this.destroyDataSources();\n                }\n                this.dataSource = this.dsManager.createLocalDataSource(this.props.dataSource, this.localDsRandomId);\n                this.dataSourceForSearch = this.dsManager.createLocalDataSource(this.props.dataSource, this.localDsRandomId + '-search');\n            }\n        };\n        this.destroyDataSources = () => {\n            if (this.dsManager) {\n                this.dsManager.destroyDataSource(this.dataSource.id);\n                this.dsManager.destroyDataSource(this.dataSourceForSearch.id);\n            }\n        };\n        this.isStaticValuesChanged = (staticValues, prevStaticValues) => {\n            let isEqual = false;\n            if (!staticValues && !prevStaticValues) {\n                isEqual = true;\n            }\n            else if (staticValues && prevStaticValues && staticValues.length === prevStaticValues.length) {\n                isEqual = !staticValues.some((v, i) => v.value !== prevStaticValues[i].value || v.label !== prevStaticValues[i].label || v.disabled !== prevStaticValues[i].disabled);\n            }\n            return !isEqual;\n        };\n        /**\n         * get real static values from staticValues, or codedValues from layer.\n         */\n        this.getRealStaticValues = () => {\n            const { dataSource, field, staticValues, useCodedValues = true, sortValuesByLabel = true } = this.props;\n            const valuePairs = staticValues ||\n                (useCodedValues ? dataSource === null || dataSource === void 0 ? void 0 : dataSource.getFieldCodedValueList(field === null || field === void 0 ? void 0 : field.jimuName) : null);\n            return sortValuesByLabel ? this.sortValuePairs(valuePairs) : valuePairs;\n        };\n        /**\n         * Sort value pairs by label.\n         */\n        this.sortValuePairs = (valuePairs) => {\n            if (!valuePairs) {\n                return null;\n            }\n            // Create a copy of the valuePairs array before sorting.\n            return [...valuePairs].sort((v1, v2) => { var _a; return (_a = v1.label) === null || _a === void 0 ? void 0 : _a.localeCompare(v2.label, this.props.intl.locale, { numeric: true, sensitivity: 'base' }); });\n        };\n        this.showOutputWarningInBuilder = () => {\n            return this.showOutputWarning() && this.context.scope !== QueryScope.InRuntimeView;\n        };\n        this.showOutputWarning = () => {\n            var _a;\n            return !this.props.staticValues && ((_a = this.props.dataSource.getDataSourceJson()) === null || _a === void 0 ? void 0 : _a.isOutputFromWidget);\n        };\n        this.updateList = (page_1, ...args_1) => __awaiter(this, [page_1, ...args_1], void 0, function* (page, queryCount = false, autoTriggeredByFirstPage = false) {\n            var _a;\n            if (((_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.type) === DataSourceTypes.ImageryLayer) {\n                if (queryCount) {\n                    this.previousRecordLength = 0;\n                    this.needToQuery = true;\n                }\n                if (!this.needToQuery) {\n                    this.setState({ loaded: true });\n                    return;\n                }\n            }\n            if (this._isMounted && !this.state.staticValues) {\n                yield Promise.all([\n                    queryCount && dataSourceUtils.queryFeatureCountByField(this.props.field, this.dataSource, this.props.sqlExpression, this.context.scope, this.context.widgetId),\n                    dataSourceUtils.queryValueLabelsByFieldAndPageSize(this.props.field, this.dataSource, page * this.state.pageSize, this.props.sqlExpression, this.context.scope, this.context.widgetId)\n                ]).then(([count, result]) => {\n                    var _a;\n                    if (this._isMounted) {\n                        if (count === null || result === null) { // skip temporary process\n                            return;\n                        }\n                        // skip for imagery ds to send useless queries since it doesn't support countOnly & distinct\n                        if (((_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.type) === DataSourceTypes.ImageryLayer) {\n                            if (this.previousRecordLength === result.recordLength && result.recordLength) { // selected view: count is 0 when no feature is selected.\n                                this.needToQuery = false;\n                                this.previousRecordLength = 0;\n                                this.setState({ loaded: true });\n                                return;\n                            }\n                            this.previousRecordLength = result.recordLength;\n                        }\n                        if (!this.state.list && this.props.hideSearchInput) {\n                            this.setState({\n                                autoFocus: true\n                            });\n                        }\n                        this.setState({\n                            count: queryCount ? count : this.state.count,\n                            recordCount: result.recordLength,\n                            searchPage: queryCount ? 1 : this.state.searchCount,\n                            loaded: true,\n                            page: page,\n                            currentList: result.list,\n                            list: result.list\n                        }, () => {\n                            // Only for the first open the dropdown menu.\n                            const autoLoadNextPage = (queryCount || autoTriggeredByFirstPage) && result.recordLength < this.state.count && this.state.count !== 0 && result.list.length < MIN_COUNT_FOR_SCROLLING;\n                            if (autoLoadNextPage) {\n                                this.loadNextPageData(queryCount || autoTriggeredByFirstPage);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n        this.onTogglePopper = (evt) => {\n            // const targetClass = evt?.currentTarget?.className\n            // if (this.props.isMultiple && targetClass && targetClass.indexOf('select-item') > -1) {\n            //   return\n            // }\n            this.props.toggle && this.props.toggle(!this.state.isOpen);\n            if (this._isMounted) {\n                if (this.state.isOpen) {\n                    this.setState({\n                        isOpen: false,\n                        isSelectedListShown: false,\n                        currentList: this.state.list\n                    });\n                }\n                else {\n                    this.setState({\n                        isOpen: true\n                    });\n                }\n            }\n        };\n        this.isItemChecked = (value) => {\n            let isActive = false;\n            const valueLabels = this.props.selectedValues ? this.props.selectedValues : [];\n            if (!this.props.isMultiple && valueLabels.length === 0 && value === EMPTY_OPTION_VALUE) {\n                isActive = true;\n            }\n            else {\n                isActive = !!valueLabels.filter(item => item.value === value).length;\n            }\n            return isActive;\n        };\n        this.onItemClick = (item, willActive) => {\n            var _a;\n            let valuePairs = willActive ? [item] : [];\n            if (this.props.isMultiple) {\n                (_a = this.props.selectedValues) === null || _a === void 0 ? void 0 : _a.forEach(valueLabel => {\n                    if (willActive || (!willActive && item.value !== valueLabel.value)) {\n                        const _valueLabel = { value: valueLabel.value, label: valueLabel.label };\n                        if (valueLabel.render) {\n                            _valueLabel.render = valueLabel.render;\n                        }\n                        valuePairs.push(_valueLabel);\n                    }\n                });\n                valuePairs = this.sortValuePairs(valuePairs);\n            }\n            else {\n                if (!willActive) {\n                    return; // can't unSelect item.\n                }\n                this.setState({ isOpen: false });\n                if (valuePairs.length && valuePairs[0].value === EMPTY_OPTION_VALUE) {\n                    valuePairs = [];\n                }\n            }\n            valuePairs = valuePairs.length ? valuePairs : null;\n            this.props && this.props.onChange(valuePairs);\n            // update checkAll states\n            if (this.state.showCheckAll) {\n                const { checkAllChecked, checkAllIndeterminate } = this.getCheckAllStates(this.state.currentList, valuePairs);\n                this.setState({\n                    checkAllChecked,\n                    checkAllIndeterminate\n                });\n            }\n        };\n        this.onScroll = e => {\n            const target = e.target;\n            const isBottom = target.scrollHeight - target.clientHeight - target.scrollTop <= 10;\n            if (this.state.loaded && !this.state.isSelectedListShown && isBottom) {\n                this.loadNextPageData();\n            }\n        };\n        this.loadNextPageData = (autoTriggeredByFirstPage = false) => {\n            var _a, _b, _c;\n            if (!((_a = this.searchRef) === null || _a === void 0 ? void 0 : _a.value)) {\n                if (this.state.count > this.state.recordCount) {\n                    this.setState({\n                        loaded: false\n                    }, () => {\n                        this.updateList(this.state.page + 1, false, autoTriggeredByFirstPage);\n                    });\n                }\n            }\n            else {\n                if (this.state.count === this.state.recordCount &&\n                    !((_c = (_b = this.props.dataSource) === null || _b === void 0 ? void 0 : _b.getDataViewConfig()) === null || _c === void 0 ? void 0 : _c.maximum) // no maxCount from ds\n                ) {\n                    return; // no need to query since all features are in local now.\n                }\n                if (!this.state.searchCount || this.state.searchCount > this.state.searchRecordCount) {\n                    this.setState({\n                        loaded: false\n                    }, () => {\n                        this.updateListWithSearchKey(!this.state.searchCount);\n                    });\n                }\n            }\n        };\n        this.updateListWithSearchKey = (queryCount) => __awaiter(this, void 0, void 0, function* () {\n            const sqlExpression = this.getMergedSqlExpressionWithSearchKey();\n            const count = queryCount\n                ? yield dataSourceUtils.queryFeatureCountByField(this.props.field, this.dataSourceForSearch, sqlExpression, this.context.scope, this.context.widgetId)\n                : this.state.searchCount;\n            if (this._isMounted && this.state.isOpen) {\n                this.setState({\n                    searchCount: count,\n                    searchPage: queryCount ? 1 : this.state.searchPage\n                });\n                this.updateSearchList(sqlExpression, Math.ceil((this.state.currentList || []).length / this.state.pageSize + 1)); // result could be null\n            }\n        });\n        this.updateSearchList = (sqlExpression_1, ...args_1) => __awaiter(this, [sqlExpression_1, ...args_1], void 0, function* (sqlExpression, page = this.state.searchPage + 1) {\n            var _a, _b;\n            const result = yield dataSourceUtils.queryValueLabelsByFieldAndPageSize(this.props.field, this.dataSourceForSearch, page * this.state.pageSize, sqlExpression, this.context.scope, this.context.widgetId);\n            if (!this._isMounted || !this.state.isOpen) {\n                return;\n            }\n            // skip for imagery ds to send useless queries since it doesn't support countOnly & distinct\n            if (((_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.type) === DataSourceTypes.ImageryLayer) {\n                if (this.previousRecordLengthForSearch === result.recordLength && result.recordLength) {\n                    this.needToQueryForSearch = false;\n                    this.previousRecordLengthForSearch = 0;\n                    this.setState({ loaded: true });\n                    return;\n                }\n                this.previousRecordLengthForSearch = result.recordLength;\n            }\n            if (((_b = result === null || result === void 0 ? void 0 : result.list) === null || _b === void 0 ? void 0 : _b.length) < MIN_COUNT_FOR_SCROLLING && (result === null || result === void 0 ? void 0 : result.recordLength) < this.state.searchCount) {\n                this.updateSearchList(sqlExpression, page + 1);\n            }\n            else {\n                this.setState({\n                    loaded: result !== null, // true only for last searchKey\n                    searchRecordCount: result === null || result === void 0 ? void 0 : result.recordLength,\n                    searchPage: page,\n                    currentList: result === null || result === void 0 ? void 0 : result.list // result could be null\n                });\n            }\n        });\n        this.getMergedSqlExpressionWithSearchKey = () => {\n            var _a, _b;\n            const fieldName = (_a = this.props.field) === null || _a === void 0 ? void 0 : _a.name;\n            let searchKeySqlExpression = null;\n            let searchKey = this.searchRef.value;\n            if (searchKey) {\n                let clause;\n                if (((_b = this.props.field) === null || _b === void 0 ? void 0 : _b.type) === JimuFieldType.Number) { // CAST(objectid AS CHAR(32)) LIKE '%1%'\n                    const keyWhere = `CAST(${fieldName} AS CHAR(${this.numericFieldLength})) LIKE '%${searchKey}%'`;\n                    clause = {\n                        customSQL: keyWhere,\n                        customDisplaySQL: this.i18nMessage('containsForDisplaySQL', { fieldAlias: this.props.field.alias, value: searchKey })\n                    };\n                }\n                else {\n                    searchKey = searchKey.replace(/\\'/g, \"''\");\n                    clause = dataSourceUtils.createSQLClause(fieldName, ClauseOperator.StringOperatorContains, [{ value: searchKey, label: searchKey }]);\n                }\n                searchKeySqlExpression = dataSourceUtils.createSQLExpression(ClauseLogic.And, [clause], this.dataSourceForSearch);\n            }\n            const mergedSqlExpression = dataSourceUtils.getMergedSQLExpressions([this.props.sqlExpression, searchKeySqlExpression], this.dataSourceForSearch, ClauseLogic.And);\n            return mergedSqlExpression;\n        };\n        /**\n         * Fired when search text is changed.\n         * @param evt\n         */\n        this.onTextChange = (evt) => {\n            var _a, _b;\n            const value = evt.target.value;\n            if (this.listRef) {\n                this.listRef.scrollTop = 0;\n            }\n            if (this.state.isSelectedListShown) { // filter from selected list\n                const currentList = (_a = this.props.selectedValues) === null || _a === void 0 ? void 0 : _a.filter(item => (item.label || '').toUpperCase().includes(value.toString().toUpperCase()));\n                this.setState({\n                    currentList: currentList\n                });\n                return;\n            }\n            this.setState({\n                searchCount: 0,\n                searchPage: 1\n            });\n            if (value === '') {\n                this.setState({\n                    currentList: this.state.list\n                });\n            }\n            else { // query data from local when text is changed.\n                // item.label could be null when date feature is { value: 0, label: null}\n                const currentList = (_b = this.state.list) === null || _b === void 0 ? void 0 : _b.filter(item => (item.label || '').toUpperCase().indexOf(value.toString().toUpperCase()) >= 0);\n                this.setState({\n                    currentList: currentList\n                }, () => {\n                    var _a;\n                    // Load more when no scrolling bar, and extra features might exist.\n                    if (currentList.length < MIN_COUNT_FOR_SCROLLING) {\n                        if (((_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.type) === DataSourceTypes.ImageryLayer) {\n                            this.previousRecordLengthForSearch = 0;\n                            this.needToQueryForSearch = true;\n                        }\n                        this.loadNextPageData();\n                    }\n                });\n            }\n        };\n        this.checkAllChange = (evt) => {\n            const checked = evt.target.checked;\n            this.setState({\n                checkAllChecked: checked,\n                checkAllIndeterminate: false\n            });\n            const valuePairs = checked ? this.state.staticValues : null;\n            this.props && this.props.onChange(valuePairs);\n        };\n        this.isDataEmpty = () => {\n            var _a;\n            return ((_a = this.state.currentList) === null || _a === void 0 ? void 0 : _a.length) === 0;\n        };\n        this.getAllTag = () => {\n            return this.showOutputWarningInBuilder() && this.props.allTag ? this.props.allTag : 'allTag';\n        };\n        this.getSelectLabel = () => {\n            var _a, _b;\n            const { placeholder, selectedValues, field } = this.props;\n            const noSelectedValues = !selectedValues || selectedValues.length === 0;\n            // If don't have selected item and pass in placeholder, show the placeholder.\n            if (noSelectedValues && placeholder) {\n                return placeholder;\n            }\n            let label = '';\n            if (this.props.isMultiple) {\n                const number = selectedValues ? selectedValues.length : 0;\n                label = this.i18nMessage('numSelected', { number });\n            }\n            else {\n                const allTag = this.getAllTag();\n                const selectedClauseValuePair = selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues[0];\n                if (!this.props.isEmptyOptionHidden && (noSelectedValues || ((selectedClauseValuePair === null || selectedClauseValuePair === void 0 ? void 0 : selectedClauseValuePair.value) === EMPTY_OPTION_VALUE && (selectedClauseValuePair === null || selectedClauseValuePair === void 0 ? void 0 : selectedClauseValuePair.label) === null))) {\n                    label = this.i18nMessage(allTag);\n                }\n                else {\n                    const selectedStaticValue = (_a = this.state.staticValues) === null || _a === void 0 ? void 0 : _a.find(c => (c === null || c === void 0 ? void 0 : c.value) === (selectedClauseValuePair === null || selectedClauseValuePair === void 0 ? void 0 : selectedClauseValuePair.value));\n                    if (selectedStaticValue === null || selectedStaticValue === void 0 ? void 0 : selectedStaticValue.render) {\n                        label = selectedStaticValue.render(selectedStaticValue);\n                    }\n                    else {\n                        label = selectedClauseValuePair === null || selectedClauseValuePair === void 0 ? void 0 : selectedClauseValuePair.label;\n                        // Display date field label with timezone setting.\n                        if ((field === null || field === void 0 ? void 0 : field.type) === JimuFieldType.Date && selectedClauseValuePair && this.dataSource) {\n                            const value = selectedClauseValuePair.value;\n                            const valueWithOffset = dataSourceUtils.getDateFieldValue(value, this.dataSource);\n                            label = dateUtils.formatDateValueByEsriFormat(valueWithOffset, (_b = field.format) === null || _b === void 0 ? void 0 : _b.dateFormat, this.props.intl); // format might be undefined.\n                        }\n                    }\n                }\n            }\n            return label;\n        };\n        this.showSelectedList = (isShown) => {\n            var _a;\n            const list = isShown ? this.props.selectedValues : this.state.list;\n            // should be filtered by current searchKey.\n            const searchKey = (_a = this.searchRef) === null || _a === void 0 ? void 0 : _a.value;\n            const currentList = searchKey ? list === null || list === void 0 ? void 0 : list.filter(item => item.label.toUpperCase().indexOf(searchKey.toString().toUpperCase()) >= 0) : list;\n            this.setState({\n                isSelectedListShown: isShown,\n                currentList: currentList\n            });\n            // all local list might not trigger the scrolling bar with searchKey\n            if (!isShown && searchKey && (currentList === null || currentList === void 0 ? void 0 : currentList.length) < MIN_COUNT_FOR_SCROLLING) {\n                this.setState({\n                    searchCount: null,\n                    searchRecordCount: null\n                }, () => {\n                    this.loadNextPageData();\n                });\n            }\n        };\n        this.unCheckAll = () => {\n            this.showSelectedList(false);\n            this.props.onChange(null);\n        };\n        this.getDropdownMenuStyle = () => {\n            return css `\r\n      ${this.buttonRef\n                ? `\r\n          min-width: ${polished.rem(this.buttonRef.clientWidth)};\r\n        `\n                : ''}\r\n    `;\n        };\n        this.getOutputWarningContainer = (item) => {\n            const isItemChecked = item && this.isItemChecked(item.value);\n            return (jsx(\"div\", { className: 'd-flex flex-column ml-2 mr-2 mb-2 output-warning-container' },\n                !this.props.isMultiple && item &&\n                    jsx(DropdownItem, { className: classNames('select-item', { active: isItemChecked }), onClick: e => { this.onItemClick(item, !isItemChecked); } },\n                        jsx(\"div\", { className: classNames({ 'select-item-placeholder': !isItemChecked }) }, isItemChecked && jsx(CheckOutlined, { className: 'mr-2 flex-shrink-0', size: 's' })),\n                        jsx(\"div\", { className: classNames('flex-grow-1 text-truncate', { active: isItemChecked }) }, this.i18nMessage(this.getAllTag()))),\n                jsx(\"div\", { className: 'd-flex mt-2' },\n                    jsx(InfoOutlined, { className: 'mr-2 flex-shrink-0 output-warning-color' }),\n                    jsx(\"span\", { className: 'flex-grow-1' }, this.i18nMessage('outputNoValueWarning')))));\n        };\n        // Overwrite the tab event for dropdown menu.\n        this.handelTabEvent = (e) => {\n            const previousFocusableNode = this.state.showCheckAll ? this.checkAllRef : !this.props.hideSearchInput && this.searchRef;\n            const nextFocusableNode = this.props.isMultiple && !this.props.hideBottomTools && this.showAllRef;\n            let nextFocusNode;\n            if (e.key === 'Tab' && e.shiftKey) {\n                nextFocusNode = previousFocusableNode;\n            }\n            else if (e.key === 'Tab' && !e.shiftKey) {\n                nextFocusNode = nextFocusableNode;\n            }\n            if (nextFocusNode) {\n                e.preventDefault();\n                focusElementInKeyboardMode(nextFocusNode, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        this.showAllKeyDown = e => {\n            if (e.key === 'Tab' && e.shiftKey && this.firstMenuItem) {\n                e.preventDefault();\n                focusElementInKeyboardMode(this.firstMenuItem, true);\n            }\n            else {\n                this.toggleFromFirstNode(e);\n            }\n        };\n        this.getFirstFocusableNode = () => {\n            return this.checkAllRef || this.searchRef || this.firstMenuItem || this.showAllRef || this.noDataRef;\n        };\n        // Toggle to close menu when pressing shift+tab key on first node.\n        this.toggleFromFirstNode = e => {\n            const firstNode = this.getFirstFocusableNode();\n            if (e.key === 'Tab' && e.shiftKey && firstNode === e.target) {\n                this.toggleByCustomTabEvent(e);\n            }\n        };\n        // Toggle to close menu from first or last Node.\n        this.toggleByCustomTabEvent = e => {\n            this.onTogglePopper(e);\n            lodash.defer(() => {\n                focusElementInKeyboardMode(this.dropdownBtnRef, true);\n            });\n        };\n        // Set noDataRef as a focusable node when no interactive nodes inside.\n        this.noInteractiveNodesInside = () => {\n            const { hideBottomTools = false, hideSearchInput = false } = this.props;\n            return hideBottomTools && hideSearchInput && !this.showCheckAll(this.state.currentList) && (this.state.currentList || []).length === 0;\n        };\n        this.getFormattedLabel = (label) => {\n            var _a;\n            let formattedLabelHTML = label;\n            if (((_a = this.searchRef) === null || _a === void 0 ? void 0 : _a.value) && label) { // label could be null\n                const formattedLabel = label.replace(new RegExp(`(${this.searchRef.value})`, 'gi'), '<strong>$1</strong>');\n                formattedLabelHTML = this.sanitizer.sanitize(formattedLabel);\n            }\n            return formattedLabelHTML;\n        };\n        this.getLabelWithoutHTML = (label) => {\n            if (typeof label === 'string') {\n                label = this.sanitizer2.sanitize(label);\n            }\n            return label;\n        };\n        this.isRTL = getAppStore().getState().appContext.isRTL;\n        const Sanitizer = esri.Sanitizer;\n        this.sanitizer = new Sanitizer();\n        this.sanitizer2 = new esri.Sanitizer({\n            whiteList: {},\n            stripIgnoreTag: true\n        });\n        _AdvancedSelectInner.count++;\n        this.localDsRandomId = getLocalDsId();\n        this.previousRecordLength = 0;\n        this.needToQuery = true;\n        this.previousRecordLengthForSearch = 0;\n        this.needToQueryForSearch = true;\n        const { staticValues, field, dataSource, hideSearchInput, isOpen } = this.props;\n        if (!staticValues) {\n            this.dsManager = DataSourceManager.getInstance();\n            this.numericFieldLength = (field === null || field === void 0 ? void 0 : field.type) === JimuFieldType.Number && numericFieldLength[field === null || field === void 0 ? void 0 : field.esriType];\n            this.isHosted = dataSourceUtils.isAGOLHostedService(dataSource.url);\n        }\n        const realStaticValues = this.getRealStaticValues();\n        const showCheckAll = this.showCheckAll(realStaticValues);\n        const { checkAllChecked = false, checkAllIndeterminate = false } = showCheckAll ? this.getCheckAllStates(realStaticValues, this.props.selectedValues || []) : {};\n        this.state = {\n            autoFocus: realStaticValues !== null || !hideSearchInput,\n            loaded: !!realStaticValues,\n            isSelectedListShown: false,\n            pageSize: this.getPageSize(realStaticValues),\n            currentList: realStaticValues || [],\n            count: (realStaticValues === null || realStaticValues === void 0 ? void 0 : realStaticValues.length) || null,\n            recordCount: (realStaticValues === null || realStaticValues === void 0 ? void 0 : realStaticValues.length) || null,\n            page: 1,\n            list: realStaticValues || null,\n            searchCount: null,\n            searchRecordCount: null,\n            searchPage: 1,\n            isOpen: isOpen !== null && isOpen !== void 0 ? isOpen : false,\n            staticValues: realStaticValues,\n            showCheckAll: showCheckAll,\n            checkAllChecked,\n            checkAllIndeterminate\n        };\n        this._isMounted = false;\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        this.createDataSources();\n        if (!this.state.staticValues) {\n            const isOutputInBuilder = this.context.scope !== QueryScope.InRuntimeView && this.props.dataSource.getDataSourceJson().isOutputFromWidget;\n            if (!isOutputInBuilder) {\n                this.updateList(1, true);\n            }\n        }\n    }\n    componentDidUpdate(prevProps, prevStates) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!this._isMounted) {\n            return;\n        }\n        // It needs to focus on first node manually when low network.\n        if (this.state.isOpen && !prevStates.autoFocus && this.state.autoFocus) {\n            lodash.defer(() => {\n                focusElementInKeyboardMode(this.getFirstFocusableNode(), true);\n            });\n        }\n        const isStaticValuesChanged = this.isStaticValuesChanged(this.props.staticValues, prevProps.staticValues);\n        const dsChanged = ((_a = this.props.dataSource) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = prevProps.dataSource) === null || _b === void 0 ? void 0 : _b.id);\n        const dsInfoChanged = this.isDsInfoChanged(prevProps);\n        // Field changed or switching between userInput and unique for domain field.\n        if (this.props.field !== prevProps.field ||\n            isStaticValuesChanged ||\n            dsChanged ||\n            dsInfoChanged ||\n            this.props.version !== prevProps.version ||\n            ((_c = this.props.sqlExpression) === null || _c === void 0 ? void 0 : _c.sql) !== ((_d = prevProps.sqlExpression) === null || _d === void 0 ? void 0 : _d.sql) ||\n            this.state.staticValues !== prevStates.staticValues) {\n            if (this.props.version !== prevProps.version) {\n                this.setState({ isOpen: false });\n            }\n            else if (this.listRef && this.props.isOpen !== prevProps.isOpen) {\n                this.listRef.scrollTop = 0;\n            }\n            // update local ds when current view, or belongDsView (filters) is changed.\n            if (dsChanged || dsInfoChanged) {\n                this.createDataSources();\n            }\n            if (this.props.staticValues) {\n                if (this.props.staticValues !== prevProps.staticValues) {\n                    const realStaticValues = this.getRealStaticValues();\n                    const showCheckAll = this.showCheckAll(realStaticValues);\n                    const { checkAllChecked = false, checkAllIndeterminate = false } = showCheckAll ? this.getCheckAllStates(realStaticValues, this.props.selectedValues || []) : {};\n                    this.setState({\n                        staticValues: realStaticValues,\n                        showCheckAll,\n                        checkAllChecked,\n                        checkAllIndeterminate\n                    });\n                    return;\n                }\n                this.setState({\n                    loaded: true,\n                    pageSize: (_e = this.state.staticValues) === null || _e === void 0 ? void 0 : _e.length,\n                    count: (_f = this.state.staticValues) === null || _f === void 0 ? void 0 : _f.length,\n                    recordCount: (_g = this.state.staticValues) === null || _g === void 0 ? void 0 : _g.length,\n                    page: 1,\n                    currentList: this.state.staticValues,\n                    list: this.state.staticValues\n                });\n            }\n            else {\n                if (this.props.sqlExpression !== prevProps.sqlExpression) {\n                    this.setState({\n                        loaded: false,\n                        page: 1,\n                        list: [],\n                        currentList: []\n                    });\n                }\n                this.updateList(1, true);\n            }\n        }\n        else if ( // only for storybook\n        prevProps.hideCheckAll !== this.props.hideCheckAll ||\n            prevProps.hideBottomTools !== this.props.hideBottomTools ||\n            prevProps.hideSearchInput !== this.props.hideSearchInput ||\n            prevProps.isMultiple !== this.props.isMultiple) {\n            const showCheckAll = this.showCheckAll(this.state.staticValues);\n            const { checkAllChecked = false, checkAllIndeterminate = false } = showCheckAll ? this.getCheckAllStates(this.state.currentList, this.props.selectedValues || []) : {};\n            this.setState({\n                showCheckAll,\n                checkAllChecked,\n                checkAllIndeterminate\n            });\n        }\n    }\n    componentWillUnmount() {\n        var _a;\n        this._isMounted = false;\n        (_a = this.listRef) === null || _a === void 0 ? void 0 : _a.removeEventListener('scroll', this.onScroll);\n        this.destroyDataSources();\n    }\n    render() {\n        var _a, _b;\n        const _c = this.props, { className, style, title, fluid, autoWidth, size, appendToBody, strategy, zIndex, selectedValues, isEmptyOptionHidden, hideSearchInput, hideBottomTools, buttonProps, menuProps, useKeyUpEvent, isMultiple, customDropdownButtonContent } = _c, otherProps = __rest(_c, [\"className\", \"style\", \"title\", \"fluid\", \"autoWidth\", \"size\", \"appendToBody\", \"strategy\", \"zIndex\", \"selectedValues\", \"isEmptyOptionHidden\", \"hideSearchInput\", \"hideBottomTools\", \"buttonProps\", \"menuProps\", \"useKeyUpEvent\", \"isMultiple\", \"customDropdownButtonContent\"]);\n        const isOutputInBuilder = this.showOutputWarningInBuilder();\n        let list = this.state.currentList;\n        const isNoData = this.isDataEmpty();\n        // add -all- option\n        const isEmptyOptionShowAndIsSingle = !isEmptyOptionHidden && !isMultiple;\n        if (isEmptyOptionShowAndIsSingle) {\n            if (isOutputInBuilder) {\n                list = [{ value: EMPTY_OPTION_VALUE, label: this.i18nMessage(this.getAllTag()) }].concat(list);\n            }\n            else {\n                if (!((_a = this.searchRef) === null || _a === void 0 ? void 0 : _a.value) && !isNoData) {\n                    list = [{ value: EMPTY_OPTION_VALUE, label: this.i18nMessage('allTag') }].concat(list);\n                }\n            }\n        }\n        const selectedLabel = this.getSelectLabel();\n        const dropdownButtonClass = classNames((_b = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.className) !== null && _b !== void 0 ? _b : '', { 'flex-row-reverse': !isMultiple && (selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.length) === 1 && selectedValues[0].value === null });\n        return (jsx(\"div\", { ref: node => { this.buttonRef = node; }, style: style, className: classNames('jimu-advanced-select', className || '', fluid ? 'w-100' : '') },\n            jsx(Dropdown, { className: 'w-100', size: size, direction: 'down', fluid: fluid, autoWidth: autoWidth, menuItemCheckMode: isMultiple ? 'multiCheck' : 'singleCheck', toggle: this.onTogglePopper, isOpen: this.state.isOpen, useKeyUpEvent: useKeyUpEvent, handelTabEvent: this.handelTabEvent },\n                jsx(DropdownButton, Object.assign({ size: size }, buttonProps, { className: dropdownButtonClass, title: title || this.getLabelWithoutHTML(selectedLabel), innerRef: ref => { this.dropdownBtnRef = ref; }, \"aria-label\": otherProps['aria-label'], \"aria-describedby\": otherProps['aria-describedby'], \"a11y-description\": otherProps['a11y-description'] }), customDropdownButtonContent\n                    ? customDropdownButtonContent(selectedValues)\n                    : typeof selectedLabel === 'string' ? jsx(\"span\", { dangerouslySetInnerHTML: { __html: selectedLabel } }) : selectedLabel),\n                jsx(DropdownMenu, Object.assign({ appendToBody: appendToBody, strategy: strategy, zIndex: zIndex, className: 'shadow-3', css: this.getDropdownMenuStyle(), shiftOptions: shiftOptions, autoFocus: this.state.autoFocus, trapFocus: false }, menuProps),\n                    jsx(\"div\", { className: classNames('advanced-select-menu', className || '') }, isOutputInBuilder\n                        ? jsx(React.Fragment, null, this.getOutputWarningContainer(list === null || list === void 0 ? void 0 : list[0]))\n                        : jsx(React.Fragment, null,\n                            !hideSearchInput &&\n                                jsx(\"div\", { className: 'search-container' },\n                                    jsx(TextInput, { prefix: jsx(SearchOutlined, null), allowClear: true, size: 'sm', type: 'text', defaultValue: '', ref: ref => { this.searchRef = ref; }, onKeyDown: this.toggleFromFirstNode, placeholder: this.i18nMessage('SearchLabel'), onChange: this.onTextChange })),\n                            jsx(\"div\", { className: 'list-container', onScroll: this.onScroll, ref: ref => { this.listRef = ref; } },\n                                this.state.showCheckAll && jsx(\"div\", { className: 'ml-2 mr-2 mb-1' },\n                                    jsx(Label, { centric: true, className: 'mb-1' },\n                                        jsx(Checkbox, { className: 'mr-2', checked: this.state.checkAllChecked, indeterminate: this.state.checkAllIndeterminate, ref: ref => { this.checkAllRef = ref; }, onChange: this.checkAllChange }),\n                                        jsx(\"span\", null, this.i18nMessage('all'))),\n                                    jsx(\"div\", { className: 'w-100 split-line' })),\n                                isNoData && this.state.loaded && jsx(\"div\", { className: 'no-data-label', tabIndex: this.noInteractiveNodesInside() ? 0 : 1, ref: ref => { this.noDataRef = ref; } }, this.i18nMessage('noData')),\n                                list && list.map((item, index) => {\n                                    if (item && item.value !== null) {\n                                        const isItemChecked = this.isItemChecked(item.value);\n                                        const label = item.label || (item.value === EMPTY_OPTION_VALUE ? this.i18nMessage(this.getAllTag()) : item.value);\n                                        const labelForNoRender = !item.render && this.getFormattedLabel(label);\n                                        return (jsx(DropdownItem, { ref: ref => { if (index === 0) {\n                                                this.firstMenuItem = ref;\n                                            } }, key: index, className: classNames('select-item', { 'multiple-item': isMultiple }, { active: isItemChecked }), toggle: !isMultiple, onClick: e => { this.onItemClick(item, !isItemChecked); }, disabled: item.disabled, active: isItemChecked },\n                                            isMultiple\n                                                ? jsx(Checkbox, { checked: isItemChecked, className: 'mr-2' })\n                                                : jsx(\"div\", { className: classNames({ 'select-item-placeholder': !isItemChecked }) }, isItemChecked && jsx(CheckOutlined, { className: 'jimu-icon-auto-color mr-2 flex-shrink-0', size: 's' })),\n                                            item.render\n                                                ? item.render(item)\n                                                : jsx(\"div\", { className: classNames('flex-grow-1 text-truncate', { active: isItemChecked }), title: this.getLabelWithoutHTML(labelForNoRender), dangerouslySetInnerHTML: { __html: labelForNoRender } })));\n                                    }\n                                    else {\n                                        return null;\n                                    }\n                                }),\n                                !this.state.loaded && jsx(\"div\", { className: 'loading-container' },\n                                    jsx(Loading, { type: LoadingType.Donut, width: 16, height: 16 }))),\n                            isMultiple && !hideBottomTools && jsx(\"div\", { className: 'multiple-select-tool split-line' },\n                                jsx(\"div\", { className: 'd-flex flex-grow-1' },\n                                    jsx(Button, { icon: true, size: 'sm', type: this.state.isSelectedListShown ? 'tertiary' : 'primary', title: this.i18nMessage('showAll'), ref: ref => { this.showAllRef = ref; }, onClick: e => { this.showSelectedList(false); }, onKeyDown: this.showAllKeyDown },\n                                        jsx(MenuOutlined, null)),\n                                    jsx(Button, { icon: true, type: this.state.isSelectedListShown ? 'primary' : 'tertiary', size: 'sm', title: this.i18nMessage('showSelection'), onClick: e => { this.showSelectedList(true); }, className: 'ml-1' }, this.isRTL ? jsx(ShowSelectionRtlOutlined, null) : jsx(ShowSelectionOutlined, null))),\n                                jsx(Button, { icon: true, type: 'tertiary', size: 'sm', title: this.i18nMessage('clearSelection'), onClick: e => { this.unCheckAll(); } },\n                                    jsx(TrashCheckOutlined, null))),\n                            jsx(Button, { className: 'sr-only last-virtual-node', onFocus: this.toggleByCustomTabEvent })))))));\n    }\n}\n_AdvancedSelectInner.contextType = QueryScopeContext;\n_AdvancedSelectInner.count = -1;\n_AdvancedSelectInner.a11yCount = 0;\nconst getLocalDsId = () => {\n    return `${LOCAL_DS_PREFIX}-${_AdvancedSelectInner.count}`;\n};\nconst mapStateToProps = (state, ownProps) => {\n    const s = window.jimuConfig.isBuilder ? state.appStateInBuilder : state;\n    if (!s || !ownProps.dataSource) {\n        return {\n            dataSourceInfo: null,\n            dataSourceBelongInfo: null\n        };\n    }\n    return {\n        dataSourceInfo: s.dataSourcesInfo[ownProps.dataSource.id] || null,\n        dataSourceBelongInfo: ownProps.dataSource.isDataView ? s.dataSourcesInfo[ownProps.dataSource.belongToDataSource.id] : null\n    };\n};\n/**\n * The `AdvancedSelect` component is used to provide the ability to choose an option from a list.\n *\n * Please use this component in case of the following needs:\n *\n * - Search function.\n * - Selection tools for multiple option.\n * - Display dynamic attribute from a field of dataSource with pagination.\n *\n * ```ts\n * import { AdvancedSelect } from 'jimu-ui'\n * ```\n */\nexport const _AdvancedSelect = ReactRedux.connect(mapStateToProps)(_AdvancedSelectInner);\nexport const AdvancedSelect = withStyles(injectIntl(_AdvancedSelect), 'AdvancedSelect');\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, classNames, css, ReactRedux, lodash, hooks } from 'jimu-core';\nimport { animate } from './animate';\nimport { getNormalizedScrollLeft } from './scroll-left';\nconst { useRef, useMemo, useImperativeHandle, useState, useEffect } = React;\nconst { useSelector } = ReactRedux;\nconst scrollStyle = css `\r\n  overflow-x: scroll;\r\n  /* Firefox + Chrome */\r\n  scrollbar-width: none;\r\n  /* Safari */\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n  /* for edge */\r\n  -ms-overflow-style: none;\r\n`;\nconst useStyle = (horizontal) => {\n    return useMemo(() => {\n        return css `\r\n      overflow: hidden;\r\n      min-height: 20px;\r\n      width: 100%;\r\n      height: 100%;\r\n      /* Add iOS momentum scrolling. */\r\n      -webkit-overflow-scrolling: touch;\r\n      .scroll-root {\r\n        width: ${horizontal ? '100%' : 'unset'};\r\n        height: ${!horizontal ? '100%' : 'unset'};\r\n        white-space: nowrap;\r\n        ${scrollStyle};\r\n        > .scroll-container {\r\n          min-width: 100%;\r\n          min-height: 100%;\r\n          width: fit-content;\r\n        }\r\n      }\r\n    `;\n    }, [horizontal]);\n};\n/**\n * The `Scrollable` provides users with the ability to scroll through children without displaying the scroll bar.\n *\n * ```ts\n * import { Scrollable } from 'jimu-ui'\n * ```\n */\nexport const Scrollable = React.forwardRef((props, ref) => {\n    const { className, horizontal = false, children, version } = props, others = __rest(props, [\"className\", \"horizontal\", \"children\", \"version\"]);\n    const style = useStyle(horizontal);\n    const isRTL = useSelector((state) => state.appContext.isRTL);\n    const scrollStart = !horizontal ? 'scrollTop' : 'scrollLeft';\n    const clientSize = !horizontal ? 'clientHeight' : 'clientWidth';\n    const rootRef = useRef(null);\n    const [topping, setTopping] = useState(true);\n    const [bottoming, setBottoming] = useState(false);\n    const [scrollable, setScrollable] = useState(false);\n    const updateScrollStateRef = useRef(null);\n    const updateScrollState = hooks.useEventCallback(() => {\n        const { scrollTop, scrollHeight, clientHeight, scrollWidth, clientWidth } = rootRef.current;\n        let _topping;\n        let _bottoming;\n        let _scrollable;\n        if (!horizontal) {\n            _topping = scrollTop <= 1;\n            _bottoming = Math.abs(scrollTop - (scrollHeight - clientHeight)) <= 1;\n            _scrollable = scrollHeight > clientHeight;\n        }\n        else {\n            const scrollLeft = getNormalizedScrollLeft(rootRef.current, isRTL);\n            // use 1 for the potential rounding error with browser zooms.\n            _topping = isRTL ? Math.abs(scrollLeft - (scrollLeft - clientWidth)) <= 1 : scrollLeft <= 1;\n            _bottoming = !isRTL ? Math.abs(scrollLeft - (scrollLeft - clientWidth)) <= 1 : scrollLeft <= 1;\n            _scrollable = scrollWidth > clientWidth;\n        }\n        _topping !== topping && setTopping(_topping);\n        _bottoming !== bottoming && setBottoming(_bottoming);\n        _scrollable !== scrollable && setScrollable(_scrollable);\n    });\n    useEffect(() => {\n        updateScrollStateRef.current = lodash.debounce(updateScrollState, 300);\n        return () => {\n            var _a;\n            (_a = updateScrollStateRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n        };\n    }, [updateScrollState]);\n    // When version changed, update scroll state\n    hooks.useUpdateEffect(() => {\n        updateScrollState();\n    }, [updateScrollState, version]);\n    const scroll = (previous, duration = 200) => {\n        const delta = rootRef.current[clientSize] * (previous ? -1 : 1);\n        let scrollValue = rootRef.current[scrollStart];\n        if (!horizontal) {\n            scrollValue += delta;\n        }\n        else {\n            scrollValue += delta * (isRTL ? -1 : 1);\n            // Fix for Edge\n            // scrollValue *= isRTL && detectScrollType() === 'reverse' ? -1 : 1;\n        }\n        animate(scrollStart, rootRef.current, scrollValue, { duration }, updateScrollState);\n    };\n    useImperativeHandle(ref, () => ({\n        scrollable,\n        scroll,\n        topping,\n        bottoming,\n        ref: rootRef\n    }));\n    const handleWhell = (evt) => {\n        if (!horizontal)\n            return;\n        const previous = evt.deltaY < 0;\n        if (topping && previous)\n            return;\n        if (bottoming && !previous)\n            return;\n        scroll(previous);\n    };\n    return (jsx(\"div\", Object.assign({ css: style, className: classNames('scroll', className) }, others, { onWheel: handleWhell }),\n        jsx(\"div\", { className: 'scroll-root', ref: rootRef, onScroll: updateScrollStateRef.current }, children)));\n});\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { jsx, css, classNames } from 'jimu-core';\nimport { Icon } from './icon';\nconst useStyle = (iconSize) => {\n    return css `\r\n    pointer-events: none;\r\n    background-color: var(--ref-palette-neutral-300);\r\n    border: 1px solid var(--ref-palette-neutral-700);\r\n    width: 100%;\r\n    height: 100%;\r\n    color: var(--ref-palette-neutral-1000);\r\n    padding: ${iconSize === 'large' ? '2.5%' : '0px'};\r\n    .picture-wrapper, .thumbnail-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    .picture-wrapper {\r\n      .jimu-icon{\r\n        color: var(--ref-palette-neutral-600);\r\n      }\r\n    }\r\n    .thumbnail-wrapper {\r\n      flex-direction: column;\r\n      .jimu-icon{\r\n        color: var(--ref-palette-neutral-1000);\r\n      }\r\n    }\r\n  `;\n};\n/**\n * The `WidgetPlaceholder` component is applied in widgets prior to all settings have been chosen by the experience author.\n *\n * ```ts\n * import { WidgetPlaceholder } from 'jimu-ui'\n * ```\n */\nexport const WidgetPlaceholder = (props) => {\n    var _a;\n    const { iconSize = 'small', widgetId, className, icon, message, style, autoFlip = false } = props, others = __rest(props, [\"iconSize\", \"widgetId\", \"className\", \"icon\", \"message\", \"style\", \"autoFlip\"]);\n    const cssStyle = useStyle(iconSize);\n    const isInBuilder = (_a = window.jimuConfig) === null || _a === void 0 ? void 0 : _a.isInBuilder;\n    return (jsx(\"div\", Object.assign({ css: cssStyle }, others, { className: classNames('jimu-widget-placeholder', className) }),\n        iconSize === 'large' && jsx(\"div\", { className: 'picture-wrapper' },\n            jsx(Icon, { icon: icon, className: 'w-100 h-100', autoFlip: autoFlip })),\n        iconSize === 'small' && jsx(\"div\", { className: 'thumbnail-wrapper pt-1' },\n            jsx(Icon, { icon: icon, size: 'l', autoFlip: autoFlip }),\n            isInBuilder && jsx(\"div\", { className: 'message-wrapper text-center mt-2' }, message))));\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport { React, jsx, DataActionManager, getAppStore, i18n, ReactRedux, css, DataLevel, DataSourceTypes, classNames, MutableStoreManager, hooks } from 'jimu-core';\nimport { withTheme } from 'jimu-theme';\nimport { Icon } from './icon';\nimport { Dropdown, DropdownButton, DropdownMenu, DropdownItem } from './dropdown';\nimport { Tooltip } from './tooltip';\nimport { ActionLayersOutlined } from 'jimu-icons/outlined/application/action-layers';\nimport { ActionOutlined } from 'jimu-icons/outlined/application/action';\nimport { Loading } from 'jimu-ui';\nexport var DataActionListStyle;\n(function (DataActionListStyle) {\n    DataActionListStyle[\"IconList\"] = \"ICON_LIST\";\n    DataActionListStyle[\"List\"] = \"LIST\";\n    DataActionListStyle[\"Dropdown\"] = \"DROPDOWN\";\n})(DataActionListStyle || (DataActionListStyle = {}));\nexport var IconListDirection;\n(function (IconListDirection) {\n    IconListDirection[\"Horizontal\"] = \"HORIZONTAL\";\n    IconListDirection[\"Vertical\"] = \"VERTICAL\";\n})(IconListDirection || (IconListDirection = {}));\nconst getDropdownStyle = (theme) => {\n    var _a, _b;\n    const primaryColor = (_a = theme === null || theme === void 0 ? void 0 : theme.sys.color) === null || _a === void 0 ? void 0 : _a.primary.main;\n    return css `\r\n    .data-action-dropdown {\r\n      .jimu-dropdown-button:hover, [aria-expanded=\"true\"] {\r\n        color: ${(_b = theme === null || theme === void 0 ? void 0 : theme.ref.palette) === null || _b === void 0 ? void 0 : _b.white};\r\n        border-color: ${primaryColor};\r\n        background-color: ${primaryColor};\r\n      }\r\n    }\r\n  `;\n};\nconst getDataActionListStyle = (iconListDirection) => {\n    return css `\r\n    .jimu-data-action-icon-list {\r\n      display: flex;\r\n      flex-direction: ${iconListDirection === IconListDirection.Horizontal ? 'row' : 'column'};\r\n      .dropdown-item {\r\n        padding: 0;\r\n        width: 26px;\r\n        height: 26px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n      .jimu-dropdown-submenu-item {\r\n        padding: 0;\r\n        width: 40px;\r\n        height: 26px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        .dropdown-item {\r\n          width: 40px;\r\n          .dropdown-button-content {\r\n            flex: inherit;\r\n          }\r\n          .caret-icon {\r\n            margin-left: 4px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  `;\n};\nconst getLoadingStyle = () => {\n    return css `\r\n    @keyframes loading {\r\n      0% {transform: rotate(0deg); };\r\n      100% {transform: rotate(360deg)};\r\n    }\r\n    position: absolute;\r\n    width: 60%;\r\n    height: 60%;\r\n    top: 20%;\r\n    left: 20%;\r\n    border: 2px solid var(--sys-color-secondary-light);\r\n    border-radius: 50%;\r\n    border-top: 2px solid var(--sys-color-primary-main);\r\n    box-sizing: border-box;\r\n    animation:loading 2s infinite linear;\r\n  `;\n};\nconst headerStyle = css `\r\n  height: 2rem;\r\n  background-color: var(--ref-palette-neutral-200);\r\n  color: var(--ref-palette-neutral-1100) !important;\r\n  font-size: 14px;\r\n  line-height: 2rem;\r\n  display: flex !important;\r\n  align-items: center;\r\n`;\nconst getRecordsCount = (dataSets) => {\n    let count = 0;\n    for (const dataSet of dataSets) {\n        count += dataSet.records.length;\n    }\n    return count;\n};\nconst getAvailableActions = (dataSets, widgetId, extraActions) => __awaiter(void 0, void 0, void 0, function* () {\n    // If no records, return empty record action list\n    let recordActions = {};\n    const recordsCount = getRecordsCount(dataSets);\n    if (recordsCount !== 0) {\n        recordActions = yield DataActionManager.getInstance().getSupportedActions(widgetId, dataSets, DataLevel.Records);\n    }\n    let dsActions = {};\n    if (dataSets.length > 0) {\n        dsActions = yield DataActionManager.getInstance().getSupportedActions(widgetId, dataSets, DataLevel.DataSource);\n    }\n    // Support extra actions that are not registered in the DataActionManager\n    if (extraActions && extraActions.length > 0) {\n        for (const action of extraActions) {\n            if (yield action.isSupported(dataSets, DataLevel.Records, widgetId)) {\n                recordActions[action.id] = [action];\n            }\n            if (yield action.isSupported(dataSets, DataLevel.DataSource, widgetId)) {\n                dsActions[action.id] = [action];\n            }\n        }\n    }\n    return [recordActions, dsActions];\n});\nconst getRecordsAttributes = (dataSets) => {\n    let count = getRecordsCount(dataSets);\n    let recordLabel = i18n.getIntl().formatMessage({ id: 'data' });\n    if (dataSets.length === 0) {\n        return {\n            recordLabel,\n            count\n        };\n    }\n    switch (dataSets[0].type) {\n        case 'loaded': {\n            recordLabel = i18n.getIntl().formatMessage({ id: 'loadedData' }, { count });\n            break;\n        }\n        case 'selected': {\n            recordLabel = i18n.getIntl().formatMessage({ id: 'selectedData' }, { count });\n            break;\n        }\n        case 'current': {\n            recordLabel = i18n.getIntl().formatMessage({ id: 'currentData' });\n            count = 1;\n            break;\n        }\n    }\n    return {\n        recordLabel,\n        count\n    };\n};\nconst DataActionListComponent = (props) => {\n    const { widgetId, dataSets, listStyle = DataActionListStyle.List, buttonType = 'default', buttonSize = 'sm', theme, iconListDirection = IconListDirection.Horizontal, disableDataSourceLevelActions = false, hideGroupTitle = false, shouldHideEmptyList = false, onActionListItemClick, alwaysShowBatchIcon = false, actionPanelRefDOM, buttonClassName = '', extraActions } = props;\n    const [recordActionGroups, setRecordActionGroups] = React.useState({});\n    const [dsActionGroups, setDsActionGroups] = React.useState({});\n    const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n    const [isDropdownLoading, setIsDropdownLoading] = React.useState(false);\n    const [actionElement, setActionElement] = React.useState(null);\n    const [dsCount, setDsCount] = React.useState('...');\n    const [hasCountableLayerOnly, setHasCountableLayerOnly] = React.useState(true);\n    const [isListLoading, setIsListLoading] = React.useState(true);\n    const dropdownRef = React.useRef(null);\n    const appWidgets = ReactRedux.useSelector((state) => state.appConfig.widgets);\n    ReactRedux.useSelector((state) => state.widgetsMutableStateVersion);\n    const useBatchIcon = alwaysShowBatchIcon || dataSets.length > 1;\n    const refreshDataActionList = hooks.useEventCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        var _a, _b, _c, _d;\n        if (!dataSets) {\n            return;\n        }\n        const [newRecordActionGroups, newDsActionGroups] = yield getAvailableActions(dataSets, widgetId, extraActions);\n        const prevRecordKeys = Object.keys(recordActionGroups);\n        const prevDsKeys = Object.keys(dsActionGroups);\n        const currRecordKeys = Object.keys(newRecordActionGroups);\n        let currDsActionKeys = Object.keys(newDsActionGroups);\n        const recordKeySet = new Set(currRecordKeys);\n        const dsKeySet = new Set(currDsActionKeys);\n        if (getRecordsAttributes(dataSets).count === dsCount) {\n            // Delete actions in ds when count are the same\n            for (const action of dsKeySet) {\n                if (recordKeySet.has(action)) {\n                    delete newDsActionGroups[action];\n                }\n            }\n            currDsActionKeys = Object.keys(newDsActionGroups);\n        }\n        // Update the state when the length or order changed\n        if (prevDsKeys.length !== currDsActionKeys.length || prevRecordKeys.length !== currRecordKeys.length) {\n            if (prevDsKeys.length !== currDsActionKeys.length) {\n                setDsActionGroups(newDsActionGroups);\n            }\n            if (prevRecordKeys.length !== currRecordKeys.length) {\n                setRecordActionGroups(newRecordActionGroups);\n            }\n        }\n        else {\n            for (let i = 0; i < prevRecordKeys.length; i++) {\n                const prevKey = prevRecordKeys[i];\n                const currKey = currRecordKeys[i];\n                // Only when the action's name and length are the same\n                if (prevKey === currKey && ((_a = prevRecordKeys[prevKey]) === null || _a === void 0 ? void 0 : _a.length) === ((_b = currRecordKeys[currKey]) === null || _b === void 0 ? void 0 : _b.length)) {\n                    continue;\n                }\n                else {\n                    setRecordActionGroups(newRecordActionGroups);\n                }\n            }\n            for (let i = 0; i < prevDsKeys.length; i++) {\n                const prevKey = prevDsKeys[i];\n                const currKey = currDsActionKeys[i];\n                // Only when the action's name and length are the same\n                if (prevKey === currKey && ((_c = prevDsKeys[prevKey]) === null || _c === void 0 ? void 0 : _c.length) === ((_d = currDsActionKeys[currKey]) === null || _d === void 0 ? void 0 : _d.length)) {\n                    continue;\n                }\n                else {\n                    setDsActionGroups(newDsActionGroups);\n                }\n            }\n        }\n    }));\n    React.useEffect(() => {\n        function queryCount() {\n            return __awaiter(this, void 0, void 0, function* () {\n                // Do not query count if it's a closed dropdown style OR the title is hidden\n                if ((listStyle === DataActionListStyle.Dropdown && !isDropdownOpen) || hideGroupTitle) {\n                    return;\n                }\n                const COUNTABLE_LAYER_TYPES = [DataSourceTypes.FeatureLayer, DataSourceTypes.ImageryLayer, DataSourceTypes.OrientedImageryLayer, DataSourceTypes.SubtypeGroupLayer, DataSourceTypes.SubtypeSublayer];\n                if (dataSets.some(dataSet => {\n                    return !COUNTABLE_LAYER_TYPES.includes(dataSet.dataSource.type);\n                })) {\n                    setHasCountableLayerOnly(false);\n                    return;\n                }\n                const canUseDss = dataSets.map(dataSet => dataSet.dataSource).filter(ds => ds.loadCount);\n                const counts = yield (Promise.all(canUseDss.map(ds => ds.loadCount({}, { widgetId: 'data-action-list' }))));\n                let sum = 0;\n                for (const count of counts) {\n                    sum += count;\n                }\n                setDsCount(sum);\n            });\n        }\n        queryCount();\n    }, [dataSets, hideGroupTitle, isDropdownOpen, listStyle]);\n    React.useEffect(() => {\n        function appendObjectIdField() {\n            for (const dataSet of dataSets) {\n                if (dataSet.fields) {\n                    const ds = dataSet.dataSource;\n                    const dsIdField = ds.getIdField();\n                    if (!dataSet.fields.includes(dsIdField)) {\n                        dataSet.fields.push(dsIdField);\n                    }\n                }\n            }\n        }\n        appendObjectIdField();\n    }, [dataSets]);\n    React.useEffect(() => {\n        if (props.listStyle === DataActionListStyle.Dropdown) {\n            return;\n        }\n        const asyncRefreshHelper = () => __awaiter(void 0, void 0, void 0, function* () {\n            props.listStyle !== DataActionListStyle.Dropdown && setIsListLoading(true);\n            yield refreshDataActionList();\n            props.listStyle !== DataActionListStyle.Dropdown && setIsListLoading(false);\n        });\n        // Listen to the widgets change so it could get latest data-action list\n        asyncRefreshHelper();\n    }, [appWidgets, props.listStyle, refreshDataActionList]);\n    React.useEffect(() => {\n        const watchingActions = DataActionManager.getInstance().getActions().filter(action => action.isWatchingDataSetsChange);\n        watchingActions.forEach(action => {\n            if (action.onDataSetsChange) {\n                action.onDataSetsChange(dataSets, widgetId);\n            }\n        });\n    }, [dataSets, widgetId]);\n    const getWidget = (widgetId) => {\n        return getAppStore().getState().appConfig.widgets[widgetId];\n    };\n    const getActionLabel = (actionName, firstAction) => {\n        if (firstAction.widgetId) {\n            return firstAction.label;\n        }\n        return i18n.getIntl().formatMessage({ id: actionName });\n    };\n    const onActionItemClick = (evt, action, dataLevel) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const ACTIVE_CLASSNAME = 'active-data-action-item';\n        const prevActive = document.querySelector(`.${ACTIVE_CLASSNAME}`);\n        if (prevActive) {\n            // Clean up the active className first\n            prevActive.classList.remove(ACTIVE_CLASSNAME);\n        }\n        if (actionPanelRefDOM) {\n            // If there's a valid action panel reference, add the class name to the node directly\n            actionPanelRefDOM.classList.add(ACTIVE_CLASSNAME);\n        }\n        else if (isDropdownStyle) {\n            // When it's a dropdown style, append the class to the dropdown button, otherwise append it to the actual item\n            dropdownRef.current.className = classNames(dropdownRef.current.className, ACTIVE_CLASSNAME);\n        }\n        else {\n            // Do not use ClassNames function, it can not handle svg element\n            evt.target.classList.add(ACTIVE_CLASSNAME);\n        }\n        const widget = getWidget(widgetId);\n        const dataActionJson = (_a = widget.dataActions) === null || _a === void 0 ? void 0 : _a[action.name];\n        // Execute the data action\n        const actionElement = yield DataActionManager.getInstance().executeDataAction(action, dataSets, dataLevel, widgetId, dataActionJson === null || dataActionJson === void 0 ? void 0 : dataActionJson.config);\n        // This is used for close the modal\n        if (actionElement !== null && typeof actionElement !== 'boolean') {\n            setActionElement(React.cloneElement(actionElement, {\n                onClose: () => { setActionElement(null); },\n                onConfirm: (...args) => {\n                    !actionElement.props.keepOpenAfterConfirm && setActionElement(null);\n                    return actionElement.props.onConfirm(...args);\n                }\n            }));\n        }\n        // If custom action click handler is passed in, try to invoke it\n        onActionListItemClick && onActionListItemClick();\n        setIsDropdownOpen(false);\n    });\n    const onDropDownToggle = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (!isDropdownOpen) { // open the dropdown menu\n            setIsDropdownLoading(true);\n            try {\n                const [recordActions, dsActions] = yield getAvailableActions(dataSets, widgetId, extraActions);\n                setRecordActionGroups(recordActions);\n                setDsActionGroups(dsActions);\n            }\n            catch (err) {\n                console.error(err);\n                setRecordActionGroups({});\n                setDsActionGroups({});\n            }\n            setIsDropdownLoading(false);\n            setIsDropdownOpen(true);\n        }\n        else {\n            setIsDropdownOpen(false);\n        }\n    });\n    const createActionItem = (actionGroups, actionName, dataLevel, isIconList) => {\n        const actions = actionGroups[actionName];\n        if ((actions === null || actions === void 0 ? void 0 : actions.length) > 0 && dataSets.length > 0) {\n            const firstAction = actions[0];\n            const dsId = dataSets[0].dataSource.id;\n            const icon = MutableStoreManager.getInstance().getStateValue(['dataActions', firstAction.name, dsId, 'icon']) || firstAction.icon;\n            if (actions.length === 1) {\n                return (jsx(DropdownItem, { key: firstAction.id, header: false, \"aria-label\": firstAction.label, onClick: (e) => __awaiter(void 0, void 0, void 0, function* () { yield onActionItemClick(e, firstAction, dataLevel); }) },\n                    jsx(\"div\", { className: 'd-flex align-items-center' },\n                        icon && jsx(React.Fragment, null, (typeof icon === 'string')\n                            ? jsx(Icon, { icon: icon, className: 'jimu-icon-auto-color mr-2' })\n                            : icon),\n                        !isIconList && jsx(\"span\", null, firstAction.label))));\n            }\n            else {\n                const actionLabel = getActionLabel(actionName, firstAction);\n                return (jsx(Dropdown, { key: firstAction.id, direction: isIconList ? 'down' : 'right', isSubMenuItem: true, fluid: true },\n                    jsx(DropdownButton, { arrowRight: !isIconList, \"aria-label\": actionLabel, size: buttonSize, type: buttonType },\n                        jsx(\"div\", { className: 'd-flex align-items-center' },\n                            icon && jsx(Icon, { icon: icon, className: 'jimu-icon-auto-color' }),\n                            !isIconList && jsx(\"span\", null, actionLabel))),\n                    jsx(DropdownMenu, null, actions.map((action, index) => {\n                        var _a;\n                        let label = action.label;\n                        if (action.widgetId) {\n                            if (action.widgetId === widgetId) {\n                                label = i18n.getIntl().formatMessage({ id: 'current' });\n                            }\n                            else {\n                                const widget = getWidget(action.widgetId);\n                                label = (_a = widget === null || widget === void 0 ? void 0 : widget.label) !== null && _a !== void 0 ? _a : action.label;\n                            }\n                        }\n                        return (jsx(DropdownItem, { key: index, header: false, onClick: (e) => __awaiter(void 0, void 0, void 0, function* () { yield onActionItemClick(e, action, dataLevel); }) }, label));\n                    }))));\n            }\n        }\n        return null;\n    };\n    const recordActionNames = Object.keys(recordActionGroups);\n    const dsActionNames = Object.keys(dsActionGroups);\n    const isIconStyle = (listStyle === DataActionListStyle.IconList);\n    const isDropdownStyle = (listStyle === DataActionListStyle.Dropdown);\n    const recordActionContent = (recordActionNames === null || recordActionNames === void 0 ? void 0 : recordActionNames.length) > 0 ? recordActionNames.map(actionName => createActionItem(recordActionGroups, actionName, DataLevel.Records, isIconStyle)) : [];\n    const dsActionContent = (!disableDataSourceLevelActions && (dsActionNames === null || dsActionNames === void 0 ? void 0 : dsActionNames.length) > 0) ? dsActionNames.map(actionName => createActionItem(dsActionGroups, actionName, DataLevel.DataSource, isIconStyle)) : [];\n    const isNoActions = (disableDataSourceLevelActions && (recordActionContent === null || recordActionContent === void 0 ? void 0 : recordActionContent.length) === 0) || ((recordActionContent === null || recordActionContent === void 0 ? void 0 : recordActionContent.length) === 0 && (dsActionContent === null || dsActionContent === void 0 ? void 0 : dsActionContent.length) === 0);\n    const hideTitle = hideGroupTitle && ((recordActionContent === null || recordActionContent === void 0 ? void 0 : recordActionContent.length) === 0 || (dsActionContent === null || dsActionContent === void 0 ? void 0 : dsActionContent.length) === 0);\n    let noActionContent = null;\n    if (isNoActions && !shouldHideEmptyList) {\n        noActionContent = (jsx(DropdownItem, { header: true },\n            jsx(\"div\", { className: 'd-flex align-items-center' },\n                jsx(\"span\", null, i18n.getIntl().formatMessage({ id: 'noActions' })))));\n    }\n    const listContent = jsx(React.Fragment, null,\n        noActionContent,\n        (recordActionContent === null || recordActionContent === void 0 ? void 0 : recordActionContent.length) > 0 && (jsx(React.Fragment, null,\n            !hideTitle && jsx(DropdownItem, { \"data-testid\": \"record-title\", header: true, css: headerStyle }, getRecordsAttributes(dataSets).recordLabel),\n            recordActionContent)),\n        (!disableDataSourceLevelActions && (dsActionContent === null || dsActionContent === void 0 ? void 0 : dsActionContent.length) > 0) && (jsx(React.Fragment, null,\n            !hideTitle &&\n                jsx(DropdownItem, { \"data-testid\": \"dataSource-title\", header: true, css: headerStyle }, hasCountableLayerOnly\n                    ? i18n.getIntl().formatMessage({ id: 'allData' }, { count: dsCount })\n                    : i18n.getIntl().formatMessage({ id: 'allDataWithoutCount' })),\n            dsActionContent)));\n    if (isDropdownStyle) {\n        const tooltip = i18n.getIntl().formatMessage({ id: 'actions' });\n        // Wrap the content with Dropdown component\n        return (jsx(\"div\", { css: getDropdownStyle(theme) },\n            jsx(Dropdown, { direction: 'down', size: 'sm', toggle: onDropDownToggle, isOpen: isDropdownOpen, className: 'data-action-list-dropdown' },\n                jsx(Tooltip, { title: tooltip, placement: 'top' },\n                    jsx(DropdownButton, { icon: true, size: buttonSize, type: buttonType, disabled: isDropdownLoading, arrow: false, ref: dropdownRef, className: classNames('data-action-button', buttonClassName) },\n                        !isDropdownLoading && (useBatchIcon ? jsx(ActionLayersOutlined, { \"aria-hidden\": true }) : jsx(ActionOutlined, { \"aria-hidden\": true })),\n                        isDropdownLoading && jsx(\"div\", { css: getLoadingStyle(), \"data-testid\": 'data-action-loading-btn' }))),\n                jsx(DropdownMenu, null, listContent)),\n            actionElement));\n    }\n    else {\n        const content = jsx(React.Fragment, null,\n            jsx(\"div\", { className: isIconStyle ? 'jimu-data-action-icon-list' : '' }, listContent),\n            actionElement);\n        return (jsx(\"div\", { css: getDataActionListStyle(iconListDirection) }, isListLoading ? jsx(Loading, { type: 'DOTS_PRIMARY' }) : content));\n    }\n};\n/** This component displays available data action in a list, icon list, or dropdown style.\n * Widgets that need to use DataAction can use this component.\n * To display in a specific style, just pass `listStyle` with ‘List', ‘IconList’, or ‘Dropdown' provided in the `DataActionListStyle`\n *\n * You can use this component by:\n *\n * `import { DataActionList } from 'jimu-ui'`\n */\nexport const DataActionList = withTheme(DataActionListComponent);\n","import { React, classNames, css, hooks } from 'jimu-core';\nimport { styled } from 'jimu-theme';\nconst ThumbSize = 14;\nconst SliderSize = 2;\nconst thumbRootStyle = css `\r\n  appearance: none;\r\n  pointer-events: all;\r\n  background-color: var(--ref-palette-white);\r\n  border: 2px solid var(--sys-color-action-selected);\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  height: ${ThumbSize}px;\r\n  width:${ThumbSize}px;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n`;\nconst Root = styled('div', {\n    name: 'MultiRangeSlider',\n    part: 'root'\n})(({ styleState }) => {\n    const { baseZindex } = styleState;\n    return css `\r\n    width: 100%;\r\n    position: relative;\r\n    .range-input {\r\n      width: 100%;\r\n      position: absolute;\r\n      top: 50%;\r\n      position: absolute;\r\n      pointer-events: none;\r\n      height: ${SliderSize}px;\r\n      background-color: transparent;\r\n      appearance: none;\r\n      box-sizing: border-box;\r\n      -webkit-tap-highlight-color: transparent;\r\n      &::-webkit-slider-thumb {\r\n        ${thumbRootStyle}\r\n      }\r\n      &::-moz-range-thumb {\r\n        ${thumbRootStyle}\r\n      }\r\n      &:hover {\r\n        &::-webkit-slider-thumb {\r\n          border-color: var(--sys-color-action-selected-hover);\r\n        }\r\n        &::-moz-range-thumb {\r\n          border-color: var(--sys-color-action-selected-hover);\r\n        }\r\n      }\r\n      &:disabled {\r\n        &::-webkit-slider-thumb {\r\n          background-color: var(--sys-color-action-disabled);\r\n          border-color: var(--sys-color-divider-secondary);\r\n          pointer-events: none;\r\n        }\r\n        &::-moz-range-thumb {\r\n          background-color: var(--sys-color-action-disabled);\r\n          border-color: var(--sys-color-divider-secondary);\r\n          pointer-events: none;\r\n        }\r\n      }\r\n      &:focus {\r\n        outline: none;\r\n        background: transparent;\r\n        border: transparent;\r\n        &::-webkit-slider-runnable-track {\r\n          background: transparent;\r\n          border: transparent;\r\n        }\r\n        &::-moz-range-track {\r\n          background: transparent;\r\n          border: transparent;\r\n        }\r\n        &::-webkit-slider-thumb {\r\n          outline: 2px solid var(--sys-color-action-focus);\r\n          outline-offset: 2px;\r\n        }\r\n        &::-moz-range-thumb {\r\n          outline: 2px solid var(--sys-color-action-focus);\r\n          outline-offset: 2px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .range-input:first-of-type:hover ~ .slider > .multi-range-slider--value.left-value.label-visible {\r\n      opacity: 1;\r\n    }\r\n    .range-input:last-of-type:hover ~ .slider > .multi-range-slider--value.right-value.label-visible {\r\n      opacity: 1;\r\n    }\r\n\r\n    .jimu-keyboard-nav & {\r\n      .range-input:first-of-type:focus {\r\n        & ~ .slider > .multi-range-slider--value.left-value.label-visible {\r\n          opacity: 1;\r\n        }\r\n      }\r\n      .range-input:last-of-type:focus {\r\n        & ~ .slider > .multi-range-slider--value.right-value.label-visible {\r\n          opacity: 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    .multi-range-slider--zindex-level-0 {\r\n      z-index: ${baseZindex};\r\n    }\r\n    .multi-range-slider--zindex-level-1 {\r\n      z-index: ${baseZindex + 1};\r\n    }\r\n    .multi-range-slider--zindex-level-2 {\r\n      z-index: ${baseZindex + 2};\r\n    }\r\n    .multi-range-slider--zindex-level-3 {\r\n      z-index: ${baseZindex + 3};\r\n    }\r\n    .multi-range-slider--zindex-level-4 {\r\n      z-index: ${baseZindex + 4};\r\n    }\r\n    .multi-range-slider--zindex-level-5 {\r\n      z-index: ${baseZindex + 5};\r\n    }\r\n    .multi-range-slider--value {\r\n      opacity: 0;\r\n    }\r\n  `;\n});\nconst SliderRoot = styled('div', {\n    name: 'MultiRangeSlider',\n    part: 'slider'\n})(() => {\n    return css `\r\n    position: relative;\r\n    left: ${ThumbSize / 2}px;\r\n    right: ${ThumbSize / 2}px;\r\n    height: ${ThumbSize}px;\r\n    width: calc(100% - ${ThumbSize}px);\r\n    display: flex;\r\n    align-items: center;\r\n    .multi-range-slider--track,\r\n    .multi-range-slider--range,\r\n    .multi-range-slider--left-value,\r\n    .multi-range-slider--right-value {\r\n      position: absolute;\r\n    }\r\n    .multi-range-slider--track,\r\n    .multi-range-slider--range {\r\n      border-radius: ${SliderSize}px;\r\n      height: ${SliderSize}px;\r\n      position: absolute;\r\n    }\r\n    .multi-range-slider--track {\r\n      background-color: var(--sys-color-divider-secondary);\r\n      width: 100%;\r\n      left: 0;\r\n    }\r\n    .multi-range-slider--range {\r\n      right: 0;\r\n      background-color: var(--sys-color-action-selected);\r\n    }\r\n    .multi-range-slider--value {\r\n      top: -26px;\r\n      position: absolute;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: var(--sys-spacing-1) var(--sys-spacing-2) 2px var(--sys-spacing-2);\r\n      background-color: var(--ref-palette-neutral-400);\r\n      font-family: var(--sys-typography-label2-font-family);\r\n      font-weight: var(--sys-typography-label2-font-weight);\r\n      font-size: var(--sys-typography-label2-font-size);\r\n      line-height: 1;\r\n      border-radius: var(--sys-shape-1);\r\n      box-shadow: var(--sys-shadow-1);\r\n      border-color: var(--sys-color-divider-primary);\r\n      border-width: 1px;\r\n      border-style: solid;\r\n    }\r\n    &.disabled {\r\n      .multi-range-slider--track, .multi-range-slider--range {\r\n        background-color: var(--sys-color-divider-secondary);\r\n      }\r\n    }\r\n  `;\n});\n/**\n * The `MultiRangeSlider` component is provided to the user for selection of multiple ranges of numbers within a bounded range.\n *\n * ```ts\n * import { MultiRangeSlider } from 'jimu-ui'\n * ```\n */\nexport const MultiRangeSlider = React.forwardRef((props, ref) => {\n    const { className, 'aria-label': ariaLabel, 'aria-valuetext-min': ariaValueTextMin, 'aria-valuetext-max': ariaValueTextMax, baseZindex = 0, min = 0, step = 1, max = 100, defaultMinValue, defaultMaxValue, minValue: propMinValue, maxValue: propMaxValue, tooltip = false, disabled = false, onChange, onAcceptValue: propOnAcceptValue } = props;\n    const styleState = Object.assign(Object.assign({}, props), { baseZindex });\n    const onAcceptValueRef = hooks.useLatest(propOnAcceptValue);\n    const [minValue, setMinValue] = hooks.useControlled({\n        controlled: propMinValue,\n        default: propMinValue || defaultMinValue\n    });\n    const [maxValue, setMaxValue] = hooks.useControlled({\n        controlled: propMaxValue,\n        default: propMaxValue || defaultMaxValue\n    });\n    const minValueRef = hooks.useLatest(minValue);\n    const maxValueRef = hooks.useLatest(maxValue);\n    const minInputRef = React.useRef(null);\n    const maxInputRef = React.useRef(null);\n    const sliderRangeRef = React.useRef(null);\n    const leftValueRef = React.useRef(null);\n    const rightValueRef = React.useRef(null);\n    const [leftThumbActivated, setLeftThumbActivated] = React.useState(false);\n    // Convert to percentage\n    const getPercent = React.useCallback((value) => Math.round(((value - min) / (max - min)) * 100), [min, max]);\n    // Set width of the range to decrease from the left side\n    React.useEffect(() => {\n        if (maxInputRef.current) {\n            const minPercent = getPercent(minValue);\n            // Preceding with '+' converts the value from type string to type number\n            const maxPercent = getPercent(+maxInputRef.current.value);\n            if (sliderRangeRef.current) {\n                sliderRangeRef.current.style.left = `${minPercent}%`;\n                sliderRangeRef.current.style.width = `${maxPercent - minPercent}%`;\n            }\n            if (leftValueRef.current) {\n                const width = leftValueRef.current.offsetWidth || 0;\n                leftValueRef.current.style.left = `calc(${minPercent}% - ${width / 2}px)`;\n            }\n        }\n    }, [minValue, getPercent]);\n    // Set width of the range to decrease from the right side\n    React.useEffect(() => {\n        if (minInputRef.current) {\n            const minPercent = getPercent(+minInputRef.current.value);\n            const maxPercent = getPercent(maxValue);\n            if (sliderRangeRef.current) {\n                sliderRangeRef.current.style.width = `${maxPercent - minPercent}%`;\n            }\n            if (rightValueRef.current) {\n                const width = rightValueRef.current.offsetWidth || 0;\n                rightValueRef.current.style.left = `calc(${maxPercent}% - ${width / 2}px)`;\n            }\n        }\n    }, [maxValue, getPercent]);\n    const handleMinInput = (event) => {\n        const minVal = Math.min(+event.target.value, maxValue - step);\n        setMinValue(minVal);\n        onChange === null || onChange === void 0 ? void 0 : onChange(minVal, maxValue, 0);\n    };\n    const handleMaxInput = (event) => {\n        const maxVal = Math.max(+event.target.value, minValue + step);\n        setMaxValue(maxVal);\n        onChange === null || onChange === void 0 ? void 0 : onChange(minValue, maxVal, 1);\n    };\n    React.useEffect(() => {\n        const minInput = minInputRef.current;\n        const maxInput = maxInputRef.current;\n        const handleMinChange = (event) => {\n            var _a;\n            const minVal = Math.min(+event.target.value, maxValueRef.current - step);\n            setLeftThumbActivated(true);\n            (_a = onAcceptValueRef.current) === null || _a === void 0 ? void 0 : _a.call(onAcceptValueRef, minVal, maxValueRef.current, 0);\n        };\n        const handleMaxChange = (event) => {\n            var _a;\n            setLeftThumbActivated(false);\n            const maxVal = Math.max(+event.target.value, minValueRef.current + step);\n            (_a = onAcceptValueRef.current) === null || _a === void 0 ? void 0 : _a.call(onAcceptValueRef, minValueRef.current, maxVal, 1);\n        };\n        minInput.addEventListener('change', handleMinChange);\n        maxInput.addEventListener('change', handleMaxChange);\n        return () => {\n            minInput === null || minInput === void 0 ? void 0 : minInput.removeEventListener('change', handleMinChange);\n            maxInput === null || maxInput === void 0 ? void 0 : maxInput.removeEventListener('change', handleMaxChange);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return (React.createElement(Root, { ref: ref, className: classNames('multi-range-slider', className), styleState: styleState },\n        React.createElement(\"input\", { type: 'range', min: min, max: max, step: step, value: minValue, disabled: disabled, ref: minInputRef, \"aria-label\": ariaLabel, \"aria-orientation\": 'horizontal', \"aria-valuenow\": minValue, \"aria-valuemin\": min, \"aria-valuemax\": maxValue, \"aria-valuetext\": ariaValueTextMin, onInput: handleMinInput, className: classNames('range-input multi-range-slider--zindex-level-4', { 'multi-range-slider--zindex-level-5': leftThumbActivated }) }),\n        React.createElement(\"input\", { type: 'range', min: min, max: max, step: step, value: maxValue, disabled: disabled, ref: maxInputRef, \"aria-orientation\": 'horizontal', \"aria-valuenow\": maxValue, \"aria-valuemin\": minValue, \"aria-valuemax\": max, \"aria-valuetext\": ariaValueTextMax, onInput: handleMaxInput, className: classNames('range-input multi-range-slider--zindex-level-4', { 'multi-range-slider--zindex-level-5': !leftThumbActivated }) }),\n        React.createElement(SliderRoot, { className: classNames('slider', { disabled }) },\n            React.createElement(\"div\", { className: 'multi-range-slider--track multi-range-slider--zindex-level-0' }),\n            React.createElement(\"div\", { ref: sliderRangeRef, className: 'multi-range-slider--range multi-range-slider--zindex-level-1' }),\n            React.createElement(\"div\", { ref: leftValueRef, className: classNames('multi-range-slider--value left-value multi-range-slider--zindex-level-2', { 'label-visible': tooltip, 'multi-range-slider--zindex-level-3': leftThumbActivated }) }, minValue),\n            React.createElement(\"div\", { ref: rightValueRef, className: classNames('multi-range-slider--value right-value multi-range-slider--zindex-level-2', { 'label-visible': tooltip, 'multi-range-slider--zindex-level-3': !leftThumbActivated }) }, maxValue))));\n});\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { jsx, React, ReactRedux, css } from 'jimu-core';\nimport { NavLink, NavItem, Nav, NavMenu } from './nav';\nimport { ScrollList } from './scrollable';\nimport { Tooltip } from './tooltip';\nconst { useMemo } = React;\nconst { useSelector } = ReactRedux;\nconst useStyle = (vertical, showIcon, showText, keepPaddingWhenOnlyIcon = false) => {\n    const onlyIcon = showIcon && !showText;\n    return useMemo(() => {\n        const width = vertical ? '100%' : undefined;\n        return css `\r\n      *:focus{\r\n        box-shadow: none !important;\r\n      }\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-wrap: nowrap;\r\n      width: ${width};\r\n      flex-wrap: nowrap;\r\n      &.nav-tabs .nav-link.active {\r\n        background-color: unset;\r\n      }\r\n      .nav-item {\r\n        overflow: unset;\r\n        flex-shrink: 0;\r\n        .jimu-nav-link-wrapper{\r\n          text-overflow: unset;\r\n          overflow: unset;\r\n        }\r\n      }\r\n      /* Remove padding and margin when only show icon in nav-item */\r\n      ${onlyIcon && css `\r\n        .nav-item {\r\n          line-height: 1 !important;\r\n          .nav-link {\r\n            ${!keepPaddingWhenOnlyIcon && css `padding: 0 !important;`}\r\n            line-height: 1 !important;\r\n          }\r\n          .jimu-nav-link-wrapper {\r\n            .jimu-icon {\r\n              margin-left: unset;\r\n              margin-right: unset;\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      .scroll-list ul.list {\r\n        padding: 0;\r\n        margin: 0;\r\n      }\r\n    `;\n    }, [vertical, onlyIcon, keepPaddingWhenOnlyIcon]);\n};\nexport const useNavMenuStyle = (gap) => {\n    return useMemo(() => {\n        return css `\r\n      *:focus{\r\n        box-shadow: none !important;\r\n      }\r\n      flex-wrap: nowrap;\r\n\r\n      .dropdown-menu-inline {\r\n        padding: 0 !important;\r\n        .nav-item {\r\n          margin-top:${gap} !important;\r\n        }\r\n      }\r\n  `;\n    }, [gap]);\n};\nconst getNavLinkAriaProps = (role, active) => {\n    const ariaProps = {};\n    switch (role) {\n        case 'menuitem':\n            if (active) {\n                ariaProps['aria-current'] = 'page';\n            }\n            break;\n        case 'tab':\n            ariaProps['aria-selected'] = active;\n            break;\n        case 'button':\n            ariaProps['aria-pressed'] = active;\n            break;\n    }\n    return ariaProps;\n};\nconst useNavLinkRole = (listRole) => {\n    switch (listRole) {\n        case 'menubar':\n        case 'menu':\n            return 'menuitem';\n        case 'tablist':\n            return 'tab';\n        default:\n            return 'button';\n    }\n};\nconst useNavTag = (listRole, scrollable) => {\n    switch (listRole) {\n        case 'menubar':\n        case 'menu':\n            return scrollable ? 'nav' : 'ul';\n        case 'tablist':\n            return scrollable ? 'div' : 'ul';\n        default:\n            return 'div';\n    }\n};\nexport const Navigation = (props) => {\n    const { vertical = false, type = 'default', data, isActive, scrollable = false, showIcon, activedIcon: propActivedIcon, alternateIcon, showText = true, showTitle = false, iconPosition, gap, isUseNativeTitle = false, role = 'menu', keepPaddingWhenOnlyIcon, onLinkClick } = props, others = __rest(props, [\"vertical\", \"type\", \"data\", \"isActive\", \"scrollable\", \"showIcon\", \"activedIcon\", \"alternateIcon\", \"showText\", \"showTitle\", \"iconPosition\", \"gap\", \"isUseNativeTitle\", \"role\", \"keepPaddingWhenOnlyIcon\", \"onLinkClick\"]);\n    const queryObject = useSelector((state) => state.queryObject);\n    const navMenuStyle = useNavMenuStyle(gap);\n    const navLinkRole = useNavLinkRole(role);\n    // if vertical menu has menu item with foldable submenu, add 20 padding to left or right side (depend on text align value) to avoid overlap of menu name content and dropdown button\n    const needAddPadding = useMemo(() => {\n        const hasSubmenu = data.some((item) => { var _a; return ((_a = item === null || item === void 0 ? void 0 : item.subs) === null || _a === void 0 ? void 0 : _a.length) > 0; });\n        return vertical && hasSubmenu && others.submenuMode === 'foldable';\n    }, [data, vertical, others.submenuMode]);\n    const items = React.useMemo(() => {\n        var _a;\n        return (_a = data === null || data === void 0 ? void 0 : data.map((item, idx) => {\n            var _a, _b, _c, _d;\n            const active = isActive === null || isActive === void 0 ? void 0 : isActive(item);\n            const activedIcon = propActivedIcon || item.icon || alternateIcon;\n            const icon = active ? activedIcon : item.icon || alternateIcon;\n            const text = showText ? item.name : '';\n            const isShowNativeTitle = showTitle && isUseNativeTitle;\n            const isShowTooltipTitle = showTitle && !isUseNativeTitle;\n            const navLink = (jsx(NavLink, Object.assign({ draggable: false, iconPosition: iconPosition, target: item.target, iconSize: (_a = icon === null || icon === void 0 ? void 0 : icon.properties) === null || _a === void 0 ? void 0 : _a.size, to: item, icon: showIcon ? icon === null || icon === void 0 ? void 0 : icon.svg : '', active: active, caret: !!((_b = item === null || item === void 0 ? void 0 : item.subs) === null || _b === void 0 ? void 0 : _b.length), queryObject: queryObject, role: navLinkRole }, getNavLinkAriaProps(navLinkRole, active), { \"aria-label\": item.name, className: needAddPadding ? 'padding-plus-20' : '', \"aria-controls\": item.navLinkAriaControls, onClick: onLinkClick ? () => { onLinkClick(item); } : undefined }), text));\n            const dropMenu = ((_c = item === null || item === void 0 ? void 0 : item.subs) === null || _c === void 0 ? void 0 : _c.length) > 0\n                ? (jsx(NavMenu, { css: navMenuStyle }, (_d = item.subs) === null || _d === void 0 ? void 0 : _d.map((item, index) => {\n                    var _a;\n                    const subNavLinkText = showText ? item.name : '';\n                    const submenuActive = isActive === null || isActive === void 0 ? void 0 : isActive(item);\n                    let subsNavItem = jsx(NavItem, { key: index, title: isShowNativeTitle ? subNavLinkText : undefined, role: 'none' },\n                        jsx(NavLink, Object.assign({ draggable: false, active: submenuActive, to: item, iconPosition: iconPosition, target: item.target, queryObject: queryObject, icon: showIcon ? (_a = item === null || item === void 0 ? void 0 : item.icon) === null || _a === void 0 ? void 0 : _a.svg : '', role: navLinkRole }, getNavLinkAriaProps(navLinkRole, submenuActive), { \"aria-label\": item.name, \"aria-controls\": item.navLinkAriaControls, onClick: onLinkClick ? () => { onLinkClick(item); } : undefined }), subNavLinkText));\n                    if (isShowTooltipTitle) {\n                        subsNavItem = jsx(Tooltip, { title: subNavLinkText, key: index }, subsNavItem);\n                    }\n                    return subsNavItem;\n                })))\n                : undefined;\n            let navItem = jsx(NavItem, { key: idx, title: isShowNativeTitle ? item.name : undefined, role: 'none' },\n                navLink,\n                dropMenu);\n            if (isShowTooltipTitle) {\n                navItem = jsx(Tooltip, { title: item.name, key: idx }, navItem);\n            }\n            return navItem;\n        })) !== null && _a !== void 0 ? _a : [];\n    }, [data, isActive, propActivedIcon, alternateIcon, showText, showTitle, isUseNativeTitle, iconPosition, showIcon, queryObject, needAddPadding, onLinkClick, navMenuStyle, navLinkRole]);\n    const wrapper = scrollable ? jsx(ScrollList, { autoArrow: true, duration: 300, vertical: vertical, items: items, role: role, listTag: \"ul\" }) : items;\n    const style = useStyle(vertical, showIcon, showText, keepPaddingWhenOnlyIcon);\n    const tag = useNavTag(role, scrollable);\n    return (jsx(Nav, Object.assign({}, others, { gap: gap, css: style, navbar: true, iconOnly: !showText, underline: type === 'underline', pills: type === 'pills', tabs: type === 'tabs', vertical: vertical, justified: !vertical, tag: tag, role: scrollable ? undefined : role }), wrapper));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css, Immutable, polished, getAppStore, classNames } from 'jimu-core';\nimport { Dropdown, DropdownMenu, DropdownItem, DropdownButton } from './dropdown';\nimport { Checkbox } from './switch';\nimport { withStyles } from 'jimu-theme';\nconst MULTI_SELECT_ITEM_CLASS_NAME = 'multi-select-item';\nconst DEFAULT_MAX_HEIGHT = 300;\n/**\n * The `MultiSelect` component is used to select multiple options from a `DropdownMenu`.\n *\n * ```ts\n * import { MultiSelect } from 'jimu-ui'\n * ```\n */\nexport class _MultiSelect extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.getValueLabels = () => {\n            const valueLabels = {};\n            this.props.items.forEach(item => {\n                valueLabels[item.value] = item.label;\n            });\n            return valueLabels;\n        };\n        this.onDropDownToggle = (evt) => {\n            var _a;\n            evt === null || evt === void 0 ? void 0 : evt.stopPropagation();\n            const targetClass = (_a = evt === null || evt === void 0 ? void 0 : evt.currentTarget) === null || _a === void 0 ? void 0 : _a.className;\n            if (targetClass && targetClass.indexOf(MULTI_SELECT_ITEM_CLASS_NAME) > -1) {\n                return;\n            }\n            const { isOpen } = this.state;\n            this.setState({ isOpen: !isOpen });\n        };\n        this.handleMenuClick = (evt) => {\n            evt.stopPropagation();\n            evt.nativeEvent.stopImmediatePropagation();\n        };\n        this.onItemClick = (evt, value) => {\n            var _a, _b;\n            const { onClickItem } = this.props;\n            const values = this.props.values || this.state.values;\n            let updateValues = ((_b = (_a = values === null || values === void 0 ? void 0 : values.asMutable) === null || _a === void 0 ? void 0 : _a.call(values)) !== null && _b !== void 0 ? _b : values) ||\n                [];\n            const index = updateValues.indexOf(value);\n            if (index < 0) {\n                updateValues.push(value);\n            }\n            else {\n                updateValues.splice(index, 1);\n            }\n            // sort by label\n            updateValues = updateValues.sort((v1, v2) => { var _a; return (_a = this.state.valueLabels[v1]) === null || _a === void 0 ? void 0 : _a.localeCompare(this.state.valueLabels[v2]); });\n            this.setState({\n                values: Immutable(updateValues)\n            });\n            // Only prevent default behavior for labels inside <label> to fixing the twice click problem.\n            if (!['BUTTON', 'A', 'INPUT'].includes(evt.target.tagName)) {\n                evt.preventDefault();\n            }\n            evt.stopPropagation();\n            evt.nativeEvent.stopImmediatePropagation();\n            onClickItem(evt, value, updateValues);\n        };\n        this.getValueLabel = (value) => {\n            const { items } = this.props;\n            const item = items.find((item) => item.value === value);\n            return item ? item.label || item.value : '';\n        };\n        this.getShowText = () => {\n            const { placeholder, displayByValues } = this.props;\n            const values = this.props.values || this.state.values;\n            if ((!values || (values.length === 0 && placeholder))) {\n                return placeholder || '';\n            }\n            else {\n                if (displayByValues) {\n                    return displayByValues(values.asMutable());\n                }\n                return values.map((value) => this.getValueLabel(value)).join(',');\n            }\n        };\n        this.getDropdownMenuStyle = () => {\n            return css `\r\n      ${this.divRef\n                ? `\r\n          min-width: ${polished.rem(this.divRef.clientWidth)};\r\n        `\n                : ''}\r\n    `;\n        };\n        this.state = {\n            isOpen: false,\n            valueLabels: this.getValueLabels(),\n            values: props.values || props.defaultValues || Immutable([])\n        };\n    }\n    componentDidUpdate(preProps) {\n        const { items, values } = this.props;\n        if (preProps.items !== items) {\n            this.setState({\n                valueLabels: this.getValueLabels()\n            });\n        }\n        if (preProps.values && !values) {\n            this.setState({\n                values: values\n            });\n        }\n    }\n    render() {\n        var _a, _b;\n        const _c = this.props, { items, className, size, fluid, autoWidth, appendToBody, zIndex, menuProps, menuItemProps, buttonProps } = _c, otherProps = __rest(_c, [\"items\", \"className\", \"size\", \"fluid\", \"autoWidth\", \"appendToBody\", \"zIndex\", \"menuProps\", \"menuItemProps\", \"buttonProps\"]);\n        const { isOpen } = this.state;\n        const isRTL = getAppStore().getState().appContext.isRTL;\n        let values = this.props.values || this.state.values;\n        if (!values) {\n            values = Immutable([]);\n        }\n        const dynamicTitle = this.getShowText();\n        const _d = buttonProps || {}, { showDynamicTitle, title } = _d, otherButtonProps = __rest(_d, [\"showDynamicTitle\", \"title\"]);\n        const buttonTitle = showDynamicTitle ? dynamicTitle : (title || '');\n        return (jsx(\"div\", { ref: (node) => { this.divRef = node; }, className: classNames('jimu-multi-select', className || '', fluid ? 'w-100' : '') },\n            jsx(Dropdown, { isOpen: isOpen, size: size, direction: 'down', toggle: this.onDropDownToggle, fluid: fluid, autoWidth: autoWidth, menuItemCheckMode: 'multiCheck' },\n                jsx(DropdownButton, Object.assign({ type: 'link', size: size, \"aria-label\": otherProps['aria-label'], \"aria-describedby\": otherProps['aria-describedby'], \"a11y-description\": otherProps['a11y-description'] }, otherButtonProps, { title: buttonTitle }), dynamicTitle),\n                jsx(DropdownMenu, Object.assign({ maxHeight: DEFAULT_MAX_HEIGHT, appendToBody: appendToBody, zIndex: zIndex, css: this.getDropdownMenuStyle(), onClick: this.handleMenuClick }, menuProps),\n                    jsx(\"div\", null, ((_b = (_a = items === null || items === void 0 ? void 0 : items.asMutable) === null || _a === void 0 ? void 0 : _a.call(items)) !== null && _b !== void 0 ? _b : items).map((item, i) => {\n                        const isChecked = values.includes(item.value);\n                        return (jsx(DropdownItem, Object.assign({ className: MULTI_SELECT_ITEM_CLASS_NAME, key: item.value || i, onClick: (evt) => { this.onItemClick(evt, item.value); }, toggle: false, active: isChecked }, menuItemProps),\n                            jsx(\"div\", { className: `d-flex w-100 align-items-center multi-select-item ${isChecked ? 'active' : ''}` }, item.render\n                                ? (item.render(item, values))\n                                : (jsx(\"div\", { className: 'd-flex w-100 align-items-center mb-0' },\n                                    jsx(Checkbox, { checked: isChecked }),\n                                    jsx(\"div\", { style: isRTL\n                                            ? { marginRight: '8px' }\n                                            : { marginLeft: '8px' }, className: 'item-text' }, item.label))))));\n                    }))))));\n    }\n}\n_MultiSelect.defaultProps = {\n    size: 'default'\n};\n/**\n * The `MultiSelect` component is used to select multiple options from a `DropdownMenu`.\n *\n * ```ts\n * import { MultiSelect } from 'jimu-ui'\n * ```\n */\nexport const MultiSelect = withStyles(_MultiSelect, 'MultiSelect');\n","/** @jsx jsx */\nimport { React, css, jsx, SessionManager, polished, injectIntl, classNames, getAppStore } from 'jimu-core';\nimport { Icon } from './icon';\nimport { Image } from './image';\nimport { Dropdown, DropdownMenu, DropdownItem, DropdownButton } from './dropdown';\nimport { Link } from './link';\nimport defaultMessages from '../translations/default';\nimport { AlertPopup } from './alert-popup';\nimport { withStyles, withTheme } from 'jimu-theme';\nconst IconAccount = require('../icons/default-user.svg');\nvar UserRole;\n(function (UserRole) {\n    UserRole[\"OrgAdmin\"] = \"org_admin\";\n    UserRole[\"OrgPublisher\"] = \"org_publisher\";\n    UserRole[\"OrgUser\"] = \"org_user\";\n    UserRole[\"CustomRoles\"] = \"custom_roles\";\n})(UserRole || (UserRole = {}));\nconst _trainingUrls = {\n    administrator: '//www.esri.com/training/main/arcgis-online-administrators',\n    publisher: '//www.esri.com/training/main/arcgis-online-publishers',\n    user: '//www.esri.com/training/main/arcgis-online-users',\n    public: '//www.esri.com/training/main/arcgis-online-training',\n    custom: '//www.esri.com/training/main/arcgis-online-training'\n};\nconst _esriCommunityLink = 'https://community.esri.com';\nconst _myEsriLink = 'https://my.esri.com';\nconst _arcgisBlogLink = 'https://www.esri.com/arcgis-blog/arcgis-online/';\nexport class _UserProfile extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.__unmount = false;\n        this.nls = (id) => {\n            return this.props.intl ? this.props.intl.formatMessage({ id: id, defaultMessage: defaultMessages[id] }) : id;\n        };\n        this.signInOut = () => {\n            const { isAppSaved } = this.props;\n            // home page, saveStatus is undefined\n            if (isAppSaved === undefined || isAppSaved) {\n                this.doSignInOut();\n            }\n            else {\n                this.setState({\n                    isShowWindowLeaveAlert: true,\n                    isShowLeaveAlertPopup: true\n                });\n            }\n        };\n        this.signOut = () => {\n            this.setState({\n                accountPopoverOpen: false\n            });\n            SessionManager.getInstance().signOut();\n        };\n        this.signIn = () => {\n            this.setState({\n                accountPopoverOpen: false\n            });\n            SessionManager.getInstance().signIn({ fromUrl: '/', popup: false });\n        };\n        this.toggleAccount = () => {\n            this.setState({\n                accountPopoverOpen: !this.state.accountPopoverOpen\n            });\n        };\n        this.getMenuInnerStyle = (theme) => {\n            return css `\r\n      & {\r\n        background: ${theme.ref.palette.neutral[500]};\r\n        border: 1px solid ${theme.ref.palette.neutral[400]};\r\n        box-shadow: 0 0 10px 2px ${polished.rgba(theme.ref.palette.white, 0.2)};\r\n        border-radius: 2px;\r\n        padding-bottom: ${polished.rem(12)};\r\n        min-width: ${polished.rem(240)};\r\n      }\r\n      .font-size-14 {\r\n        font-size: ${polished.rem(14)};\r\n      }\r\n      .dropdown-menu--inner {\r\n        .center-line {\r\n          border-top: 1px solid ${theme.ref.palette.neutral[700]};\r\n          margin: ${polished.rem(16)};\r\n        }\r\n        &>button {\r\n          & {\r\n            display: block;\r\n            padding-left: ${polished.rem(16)};\r\n            color: ${theme.ref.palette.neutral[1100]};\r\n            margin-bottom: ${polished.rem(4)};\r\n          }\r\n          &>a {\r\n            color: inherit;\r\n            display: block;\r\n            text-decoration: none;\r\n            text-align: left;\r\n            padding: 0;\r\n            background: none;\r\n            border: none;\r\n            &:hover {\r\n              color: inherit;\r\n            }\r\n          }\r\n        }\r\n        &>button:first-of-type {\r\n          padding: 0;\r\n          cursor: auto;\r\n          margin-bottom: ${polished.rem(7)};\r\n          &:hover {\r\n            background: none;\r\n          }\r\n        }\r\n        .user-message-con {\r\n          & {\r\n            align-items: center;\r\n            padding: ${polished.rem(16)} ${polished.rem(16)} ${polished.rem(18)} ${polished.rem(16)};\r\n            border-bottom: 1px solid ${theme.sys.color.divider.primary};\r\n          }\r\n          .head-portrait-con {\r\n            & {\r\n              width: ${polished.rem(50)};\r\n              height: ${polished.rem(50)};\r\n              margin-right: ${polished.rem(16)};\r\n            }\r\n            img, button {\r\n              display: block;\r\n              width: 100%;\r\n              height: 100%;\r\n            }\r\n          }\r\n          circle{\r\n            fill: ${theme.sys.color.secondary.dark};\r\n          }\r\n          svg {\r\n            color: ${theme.ref.palette.neutral[1000]};\r\n            margin-right: 0;\r\n          }\r\n          .user-message {\r\n            & {\r\n              font-size: ${polished.rem(14)};\r\n              line-height:${polished.rem(20)};\r\n            }\r\n            div{\r\n              color: ${theme.ref.palette.neutral[1100]};\r\n              max-width: ${polished.rem(142)};\r\n            }\r\n            .user-account {\r\n              color: ${theme.ref.palette.neutral[1000]};\r\n              margin-top: ${polished.rem(11)};\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\n        };\n        this.getTrainingUrl = () => {\n            const { user } = this.props;\n            const role = user === null || user === void 0 ? void 0 : user.role;\n            switch (role) {\n                case UserRole.OrgAdmin:\n                    return _trainingUrls.administrator;\n                case UserRole.OrgPublisher:\n                    return _trainingUrls.publisher;\n                case UserRole.OrgUser:\n                    return _trainingUrls.user;\n                default:\n                    return _trainingUrls.custom;\n            }\n        };\n        this.handleToggleForLeaveAlertPopup = (isOk) => {\n            this.setState({\n                isShowLeaveAlertPopup: !this.state.isShowLeaveAlertPopup\n            });\n            if (isOk) {\n                this.doSignInOut();\n            }\n            else {\n                this.setState({ isShowWindowLeaveAlert: false });\n            }\n        };\n        this.doSignInOut = () => {\n            const { isShowWindowLeaveAlert } = this.state;\n            if (isShowWindowLeaveAlert) {\n                window.onbeforeunload = () => null;\n            }\n            const session = SessionManager.getInstance().getMainSession();\n            session ? this.signOut() : this.signIn();\n        };\n        this.state = {\n            accountPopoverOpen: false,\n            isShowWindowLeaveAlert: false,\n            isShowLeaveAlertPopup: false\n        };\n    }\n    render() {\n        var _a;\n        const { user, theme, portalUrl } = this.props;\n        const session = SessionManager.getInstance().getMainSession();\n        let userThumbnail;\n        if (user.thumbnail) {\n            userThumbnail = `${portalUrl}/sharing/rest/community/users/${user.username}/info/${user.thumbnail}`;\n            if (session) {\n                userThumbnail = `${userThumbnail}?token=${session === null || session === void 0 ? void 0 : session.token}`;\n            }\n        }\n        const isDevEdition = window.jimuConfig.isDevEdition;\n        // for userType, ref: https://devtopia.esri.com/WebGIS/arcgis-webappbuilder/blob/develop/client/builder/plugins/header/Plugin.js#L130\n        const isPortalAndUserTypeBoth = (!isDevEdition && (user === null || user === void 0 ? void 0 : user.userType) === 'both');\n        const isInPortal = window.jimuConfig.isInPortal;\n        const appState = getAppStore().getState();\n        // we don't set 'appState.isWebTier' for portal edition, so use 'portalSelf.isWebTierAuth' to chenck webTier\n        const isWebTier = appState.isWebTier || ((_a = appState.portalSelf) === null || _a === void 0 ? void 0 : _a.isWebTierAuth);\n        return (jsx(\"div\", { className: classNames('jimu-user-profile d-flex ml-1 mr-1', this.props.className) },\n            jsx(Dropdown, { size: 'sm', toggle: this.toggleAccount, isOpen: this.state.accountPopoverOpen },\n                jsx(DropdownButton, { size: 'sm', type: 'tertiary', icon: true, arrow: false, className: 'p-0 account-dropdown-toggle', \"aria-label\": this.nls('avatar') },\n                    jsx(\"div\", { id: 'accountPopover', className: 'header-account float-left d-flex align-items-center', style: { cursor: 'pointer' }, title: this.props.user && this.props.user.firstName ? this.props.user.firstName : '' }, userThumbnail\n                        ? jsx(Image, { src: userThumbnail, width: 26, height: 26, shape: 'circle', className: 'd-block float-left header-login' })\n                        : jsx(Icon, { icon: IconAccount, width: 26, height: 26, className: 'd-block float-left header-login' }))),\n                jsx(DropdownMenu, { css: this.getMenuInnerStyle(theme) },\n                    jsx(DropdownItem, null,\n                        jsx(\"div\", { className: 'd-flex user-message-con' },\n                            jsx(\"div\", { className: 'head-portrait-con ' },\n                                userThumbnail && jsx(Image, { src: userThumbnail, width: 50, height: 50, shape: 'circle', className: 'd-block float-left header-login' }),\n                                !userThumbnail && jsx(Icon, { icon: IconAccount, width: 50, height: 50, className: 'd-block float-left header-login' })),\n                            jsx(\"div\", { className: 'user-message flex-grow-1' },\n                                session && jsx(\"div\", { className: 'text-truncate', title: user.firstName }, user === null || user === void 0 ? void 0 : user.firstName),\n                                session && jsx(\"div\", { className: 'user-account text-truncate', title: user === null || user === void 0 ? void 0 : user.username }, user === null || user === void 0 ? void 0 : user.username)))),\n                    session && jsx(DropdownItem, null,\n                        jsx(\"a\", { target: '_blank', className: 'font-size-14', href: `${this.props.portalUrl}/home/user.html`, rel: \"noopener noreferrer\" }, this.nls('myProfile'))),\n                    !isDevEdition && jsx(DropdownItem, null,\n                        jsx(Link, { to: `${this.props.portalUrl}/home/user.html#settings`, target: '_blank' }, this.nls('mySettings'))),\n                    isPortalAndUserTypeBoth && jsx(DropdownItem, null,\n                        jsx(Link, { to: _esriCommunityLink, target: '_blank' }, this.nls('communityAndForums'))),\n                    isPortalAndUserTypeBoth && jsx(DropdownItem, null,\n                        jsx(Link, { to: _myEsriLink, target: '_blank' }, this.nls('myEsri'))),\n                    isPortalAndUserTypeBoth && jsx(DropdownItem, null,\n                        jsx(Link, { to: this.getTrainingUrl(), target: '_blank' }, this.nls('training'))),\n                    isPortalAndUserTypeBoth && jsx(DropdownItem, null,\n                        jsx(Link, { to: _arcgisBlogLink, target: '_blank' }, this.nls('arcgisBlog'))),\n                    jsx(DropdownItem, null,\n                        jsx(Link, { to: this.props.helpUrl, target: '_blank' }, this.nls('accountHelp'))),\n                    jsx(\"div\", { className: 'center-line' }),\n                    (session && !isDevEdition && !window.jimuConfig.isInPortal) && jsx(DropdownItem, { className: 'font-size-14', onClick: () => { SessionManager.getInstance().switchAccount(); } }, this.nls('switchAccount')),\n                    !(isInPortal && isWebTier) &&\n                        // For webTier portal embedded version, it can only sign-out by close browser, so hide signOut button for this situation.\n                        jsx(DropdownItem, { className: 'font-size-14', onClick: () => { this.signInOut(); } }, session ? this.nls('signOut') : this.nls('signIn')))),\n            jsx(AlertPopup, { isOpen: this.state.isShowLeaveAlertPopup, okLabel: this.nls('profileLeave'), title: this.nls('profileLeaveSite'), toggle: this.handleToggleForLeaveAlertPopup },\n                jsx(\"div\", { style: { fontSize: '1rem' } }, this.nls('profileLeaveDescription')))));\n    }\n}\nexport const UserProfile = withStyles(withTheme(injectIntl(_UserProfile)), 'UserProfile');\n","import { React, classNames, defaultMessages, hooks } from 'jimu-core';\nimport { styled } from 'jimu-theme';\nimport { CloseOutlined } from 'jimu-icons/outlined/editor/close';\nimport { Button } from './button';\nconst TagRoot = styled.div `\r\n  width: 100%;\r\n  > ul.choices-data-list {\r\n    width: 100%;\r\n    text-align: left;\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n  }\r\n`;\nconst TagItem = styled.li `\r\n  display: inline-flex;\r\n  list-style: none;\r\n  max-width: calc(100% - 6px);\r\n  padding: 4px 8px;\r\n  line-height: 1.125rem;\r\n  background: var(--sys-color-primary-dark);\r\n  color: var(--ref-palette-black);\r\n  border-radius: 2px;\r\n  margin-right: 6px;\r\n  margin-bottom: 6px;\r\n  > .text {\r\n    flex-grow: 1;\r\n  }\r\n  > .delete {\r\n    flex-shrink: 0;\r\n    display: inline-block;\r\n    margin-left: 6px;\r\n    cursor: pointer;\r\n  }\r\n`;\nconst TagCaret = styled(Button) `\r\n    flex-shrink: 0;\r\n    padding: 0px !important;\r\n    margin-left: 6px;\r\n`;\n/**\n * A component used to display tags.\n */\nexport const _Tag = (props) => {\n    const { className, data, onChange } = props;\n    const translate = hooks.useTranslation(defaultMessages);\n    const handleDeleteLabel = (e, index) => {\n        e.stopPropagation();\n        const newData = [...data];\n        newData.splice(index, 1);\n        onChange === null || onChange === void 0 ? void 0 : onChange(newData);\n    };\n    return (React.createElement(TagRoot, { className: classNames('jimu-tag', className) }, data.length > 0 && React.createElement(\"ul\", { className: 'choices-data-list' }, data.map((el, index) => {\n        return (React.createElement(TagItem, { key: index, tabIndex: 0, \"aria-label\": el, role: 'button' },\n            React.createElement(\"span\", { className: 'text text-truncate', title: el }, el),\n            React.createElement(TagCaret, { className: 'delete', type: 'tertiary', icon: true, size: 'sm', title: translate('delete'), \"aria-label\": translate('delete'), onClick: (e) => { handleDeleteLabel(e, index); } },\n                React.createElement(CloseOutlined, { size: 's' }))));\n    }))));\n};\n/**\n * A component used to display tags.\n */\nexport const Tag = _Tag;\n","/** @jsx jsx */\nimport { React, jsx, css } from 'jimu-core';\nfunction buildThresholdList() {\n    const step = 10;\n    const result = [0];\n    for (let i = 1; i <= step; i++) {\n        result.push(i / step);\n    }\n    return result;\n}\nexport class ViewportIntersectionObserver extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.elemRef = React.createRef();\n        this.handleIntersectionChange = this.handleIntersectionChange.bind(this);\n    }\n    handleIntersectionChange(entry) {\n        if (entry.target.classList.contains('playing-animation')) {\n            return;\n        }\n        this.props.onIntersectionChange(entry.isIntersecting);\n    }\n    componentDidMount() {\n        if (this.elemRef.current) {\n            const handler = (entries) => {\n                this.handleIntersectionChange(entries[0]);\n            };\n            this.observer = new IntersectionObserver(handler, {\n                threshold: buildThresholdList(),\n                root: document\n            });\n            this.observer.observe(this.elemRef.current.parentNode);\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer.unobserve(this.elemRef.current.parentNode);\n            this.observer = null;\n        }\n    }\n    render() {\n        return (jsx(\"div\", { ref: this.elemRef, css: css `\r\n          display: none;\r\n        ` }));\n    }\n}\n","/** @jsx jsx */\nimport { React, jsx, css, getAppStore, portalUrlUtils, SessionManager, esri, hooks, dateUtils, i18n, focusElementInKeyboardMode } from 'jimu-core';\nimport { Button } from './button';\nimport { Loading } from './loading';\nimport { LoadingType } from './types';\nimport { TextInput } from './text-input';\nimport { Select } from './select';\nimport defaultMessages from '../translations/default';\nimport { FloatingPanel } from './overlay';\nfunction getStyle() {\n    return css `\r\n    >.floating-header.panel-header {\r\n      border: 1px solid var(--sys-color-secondary-light);\r\n      padding: 14px 20px !important;\r\n      font-size: 1rem;\r\n      font-weight: 600;\r\n      background: var(--ref-palette-white);\r\n      color: var(--ref-palette-neutral-1100);\r\n      .action-btn {\r\n        color: var(--ref-palette-neutral-1100);\r\n      }\r\n      >.actions>.jimu-btn :hover {\r\n        color: var(--ref-palette-neutral-1100);\r\n      }\r\n    }\r\n    .add-item-container {\r\n      padding: 16px 20px 20px;\r\n      .form-item-label {\r\n        line-height: 18px;\r\n        font-weight: 500;\r\n        color: var(--ref-palette-black);\r\n      }\r\n    }\r\n    .footer{\r\n      margin-top: 24px;\r\n      text-align: right;\r\n      .btn {\r\n        font-weight: 500;\r\n      }\r\n    }\r\n  `;\n}\n/**\n * The `AddItemDialog` component let users to set item's title and folder.\n *\n * ```ts\n * import { AddItemDialog } from 'jimu-ui'\n * ```\n */\nexport function AddItemDialog(props) {\n    const { defaultName, reference, onClose, onConfirm } = props;\n    const [folders, setFolders] = React.useState([]);\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [name, setName] = React.useState('');\n    const [folderId, setFolderId] = React.useState(null);\n    const textRef = React.useRef();\n    const translate = hooks.useTranslation(defaultMessages);\n    const [isExporting, setIsExporting] = React.useState(false);\n    const [itemId, setItemId] = React.useState('');\n    const getReadableTime = () => {\n        const date = new Date();\n        const offset = date.getTimezoneOffset();\n        const offsetStr = offset < 0 ? `+${Math.abs(offset) / 60}` : `-${offset / 60}`;\n        return `${dateUtils.formatDateValueByEsriFormat(date, 'shortDateShortTime', i18n.getIntl())} ${translate('utc')}${offsetStr}`;\n    };\n    hooks.useEffectOnce(() => {\n        const sm = SessionManager.getInstance();\n        sm.getUserInfo().then(userInfo => {\n            if (!userInfo) {\n                return;\n            }\n            const portalUrl = getAppStore().getState().portalUrl;\n            esri.restRequest.request(portalUrlUtils.getUserContentUrl(portalUrl, userInfo.username), {\n                authentication: sm.getMainSession(),\n                httpMethod: 'GET'\n            }).then(userContent => {\n                const folders = userContent.folders;\n                setFolders([{ id: '', title: userInfo.username }, ...folders]);\n                setFolderId('');\n            }).catch(e => {\n                console.warn(e, 'get user content error');\n            });\n        }).finally(() => {\n            focusElementInKeyboardMode(textRef.current, true);\n            setIsLoading(false);\n        });\n        if (defaultName) {\n            setName(`${defaultName} (${getReadableTime()})`);\n        }\n    });\n    const handleNameChange = hooks.useEventCallback((e) => {\n        setName(e.target.value);\n    });\n    const handleFolderChange = hooks.useEventCallback((e) => {\n        setFolderId(e.target.value);\n    });\n    const handleOkClick = React.useCallback(() => {\n        if (itemId) {\n            let portalUrl = getAppStore().getState().portalUrl;\n            portalUrl = portalUrlUtils.getStandardPortalUrl(portalUrl);\n            const itemUrl = `${portalUrl}/home/item.html?id=${itemId}`;\n            window.open(itemUrl, '_blank');\n            return;\n        }\n        setIsExporting(true);\n        onConfirm(name, folderId).then((itemId) => {\n            setItemId(itemId);\n            setIsExporting(false);\n        });\n    }, [itemId, onConfirm, name, folderId]);\n    return (jsx(FloatingPanel, { open: true, headerTitle: translate('saveAsAnItem'), css: getStyle(), onHeaderClose: onClose, disableResize: true, dragBounds: \"body\", defaultSize: { width: 300, height: 270 }, reference: reference, toggle: (evt, type) => { type !== 'clickOutside' && (onClose === null || onClose === void 0 ? void 0 : onClose()); } },\n        jsx(\"div\", { className: \"add-item-container h-100\" },\n            jsx(\"div\", null,\n                jsx(\"div\", null,\n                    jsx(\"div\", { className: 'mb-1 form-item-label' }, translate('title')),\n                    jsx(\"div\", null,\n                        jsx(TextInput, { required: true, value: name, ref: textRef, onChange: handleNameChange, disabled: isExporting || !!itemId }))),\n                jsx(\"div\", { className: 'mt-4' },\n                    jsx(\"div\", { className: 'mb-1 form-item-label' }, translate('folder')),\n                    jsx(\"div\", null,\n                        jsx(Select, { value: folderId, onChange: handleFolderChange, disabled: isExporting || !!itemId }, folders.map(f => jsx(\"option\", { key: f.id, value: f.id }, f.title)))),\n                    isLoading && jsx(Loading, { type: LoadingType.Bar }))),\n            jsx(\"div\", { className: 'footer' },\n                jsx(Button, { type: itemId ? 'default' : 'primary', disabled: isLoading || isExporting || !name, onClick: handleOkClick }, itemId ? translate('viewItem') : isExporting ? translate('exporting') : translate('export')),\n                !itemId && jsx(Button, { className: 'ml-2', disabled: isLoading, onClick: onClose }, translate('cancel'))))));\n}\n","/** @jsx jsx */\nimport { EConsentMode, React, ReactRedux, appActions, getAppStore, hooks, jsx, utils, css } from 'jimu-core';\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader, Switch } from 'jimu-ui';\nimport defaultMessages from '../../translations/default';\nconst SettingItem = (props) => {\n    const { name, enable = false, description, onChange, disabled } = props;\n    return (jsx(\"div\", { className: 'cookie-settings-item d-flex flex-column' },\n        jsx(\"div\", { className: 'd-flex justify-content-between', onClick: () => {\n                // Support a11y switch behavior\n                onChange(!enable);\n            } },\n            jsx(\"h5\", null, name),\n            jsx(Switch, { checked: enable, disabled: disabled, onChange: (e) => { onChange(e.target.checked); } })),\n        jsx(\"span\", null, description)));\n};\nconst getModalBodyStyle = () => {\n    return css `\r\n    .modal-body {\r\n      .cookie-settings-item:not(:last-child) {\r\n        margin-bottom: 16px;\r\n        padding-bottom: 16px;\r\n        border-bottom: 1px solid var(--ref-palette-neutral-400);\r\n      }\r\n    }\r\n  `;\n};\nconst CookieSettingsWindow = (props) => {\n    const { bannerUid, isEditable, onSave, toggle, builderEntry } = props;\n    const translate = hooks.useTranslation(defaultMessages);\n    const { dispatch } = getAppStore();\n    const consentMode = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state.appConfig) === null || _a === void 0 ? void 0 : _a.cookieBanner) === null || _b === void 0 ? void 0 : _b.consentMode; });\n    const [enablePerformanceCookie, setEnablePerformanceCookie] = React.useState(false);\n    const settingItemsJson = [\n        {\n            name: translate('essentialCookies'),\n            enable: true,\n            description: translate('essentialCookiesDesc'),\n            onChange: () => null,\n            disabled: true\n        },\n        {\n            name: translate('performanceCookies'),\n            enable: enablePerformanceCookie,\n            description: translate('performanceCookiesDesc'),\n            onChange: (enable) => {\n                if (isEditable) {\n                    return;\n                }\n                setEnablePerformanceCookie(enable);\n            }\n        }\n    ];\n    React.useEffect(() => {\n        const COOKIE_CONFIRMATIONS_KEY = `${utils.getLocalStorageAppKey()}-cookie-confirmations`;\n        if (utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY)) {\n            const cookieConfirmations = JSON.parse(utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY));\n            // Expand the cookie types here\n            if (cookieConfirmations.performance !== undefined) {\n                // Use the localStorage config if it is defined\n                setEnablePerformanceCookie(cookieConfirmations.performance);\n            }\n        }\n        else {\n            // Turn on all the categories by default if it's optional mode\n            setEnablePerformanceCookie(!!(!consentMode || consentMode === EConsentMode.Optional));\n        }\n    }, [consentMode]);\n    const onToggle = React.useCallback(() => {\n        if (isEditable) {\n            return;\n        }\n        dispatch(appActions.OpenCookieSettingsWindow(false));\n        toggle();\n    }, [dispatch, isEditable, toggle]);\n    const onSaveBtnClick = React.useCallback(() => {\n        if (isEditable) {\n            return;\n        }\n        let cookieConfirmations = null;\n        const COOKIE_CONFIRMATIONS_KEY = `${utils.getLocalStorageAppKey()}-cookie-confirmations`;\n        if (utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY)) {\n            cookieConfirmations = JSON.parse(utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY));\n            cookieConfirmations.performance = enablePerformanceCookie;\n            cookieConfirmations.confirmTime = new Date().getTime();\n            cookieConfirmations.uid = bannerUid;\n        }\n        else {\n            // We only have one cookie type for now\n            cookieConfirmations = {\n                confirmTime: new Date().getTime(),\n                uid: bannerUid,\n                performance: enablePerformanceCookie\n            };\n        }\n        // Do not save to the local storage if it is live-view\n        if (!window.jimuConfig.isInBuilder) {\n            utils.setLocalStorage(COOKIE_CONFIRMATIONS_KEY, JSON.stringify(cookieConfirmations));\n        }\n        else {\n            builderEntry && builderEntry.appBuilderSync.publishCloseBannerToBuilder();\n        }\n        onSave && onSave();\n        onToggle();\n    }, [isEditable, onSave, onToggle, enablePerformanceCookie, bannerUid, builderEntry]);\n    return (jsx(Modal, { centered: true, isOpen: true, toggle: onToggle, className: 'cookie-banner-setting-modal', css: getModalBodyStyle() },\n        jsx(ModalHeader, { toggle: onToggle }, translate('cookieSettings')),\n        jsx(ModalBody, { className: 'cookie-banner-setting-body' }, settingItemsJson.map((itemProps, index) => {\n            return jsx(SettingItem, Object.assign({}, itemProps, { key: index }));\n        })),\n        jsx(ModalFooter, null,\n            jsx(Button, { type: 'primary', onClick: onSaveBtnClick }, translate('saveChanges')))));\n};\nexport default CookieSettingsWindow;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\n/** @jsxFrag */\nimport { React, ReactRedux, css, hooks, jsx, AppMode, ECookieBannerLayout, utils, Immutable, FixedPosition, moduleLoader, getAppStore, appActions, getNextAnimationId, AnimationComponent, jimuHistory, ReactResizeDetector, BrowserSizeMode, lodash } from 'jimu-core';\nimport defaultMessages from '../../translations/default';\nimport { Button, Icon, ModalOverlayIdContext, RichTextDisplayer, styleUtils, useOverlayManager } from 'jimu-ui';\nimport CookieSettingsWindow from './cookie-settings-window';\nimport { bindResizeHandler } from './banner-resize-utils';\nimport { OverlayPortal } from '../overlay/overlay-portal';\nconst getWrapperStyle = (zIndex) => {\n    return css `\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    z-index: ${zIndex};\r\n  `;\n};\nconst getMaskStyle = () => {\n    return css `\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n  `;\n};\n// Styles for resize handlers\nexport function getResizeStyle() {\n    const length = 38;\n    return css `\r\n    .cookie-banner-resize-handlers{\r\n      .resize-handler{\r\n        width: 100%;\r\n        height: 100%;\r\n        position: absolute;\r\n        .resize-handler-icon {\r\n          position: absolute;\r\n          background-color: var(--ref-palette-black);\r\n          border: 1px solid var(--ref-palette-white);\r\n        }\r\n        &.cookie-banner-resize-top, &.cookie-banner-resize-bottom {\r\n          height: 4px;\r\n          cursor: ns-resize;\r\n          .resize-handler-icon{\r\n            left: min(50%, 50vw);\r\n            width: ${length}px;\r\n            margin-left: ${-length / 2}px;\r\n          }\r\n        }\r\n        &.cookie-banner-resize-top{\r\n          top: 0;\r\n        }\r\n        &.cookie-banner-resize-bottom{\r\n          bottom: 0;\r\n        }\r\n        &.cookie-banner-resize-left, &.cookie-banner-resize-right{\r\n          width: 4px;\r\n          top: 0;\r\n          cursor: ew-resize;\r\n          .resize-handler-icon{\r\n            top: 50%;\r\n            height: ${length}px;\r\n            margin-top: ${-length / 2}px;\r\n          }\r\n        }\r\n        &.cookie-banner-resize-left{\r\n          left: 0;\r\n        }\r\n        &.cookie-banner-resize-right{\r\n          right: 0;\r\n        }\r\n      }\r\n    }\r\n  `;\n}\nconst calculateDaysBetween = (endTimeStamp, startTimeStamp) => {\n    const SECONDS_PER_DAY = 1000 * 60 * 60 * 24;\n    return Math.round(Math.abs(endTimeStamp - startTimeStamp) / SECONDS_PER_DAY);\n};\nexport const DEFAULT_FIXED_POSITION_SIZE_JSON = Immutable({\n    position: FixedPosition.BottomRight,\n    height: '230px',\n    heightMode: 'CUSTOM',\n    offsetX: -10,\n    offsetY: -10,\n    width: '300px',\n    widthMode: 'CUSTOM'\n});\nexport const CookieBanner = function (props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const { theme } = props;\n    const translate = hooks.useTranslation(defaultMessages);\n    const [RichEditorEntry, setRichEditorEntry] = React.useState(null);\n    const [ThemeEntry, setThemeEntry] = React.useState(null);\n    const [BuilderEntry, setBuilderEntry] = React.useState(null);\n    const [LayoutsEntry, setLayoutsEntry] = React.useState(null);\n    const [DndEntry, setDndEntry] = React.useState(null);\n    const [isBannerOpen, setIsBannerOpen] = React.useState(false);\n    const cookieBannerConfig = ReactRedux.useSelector((state) => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.appConfig) === null || _a === void 0 ? void 0 : _a.cookieBanner; });\n    const browserSizeMode = ReactRedux.useSelector((state) => state.browserSizeMode);\n    const [positionSizeJson, setPositionSizeJson] = React.useState(((_a = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize) === null || _a === void 0 ? void 0 : _a[browserSizeMode]) || ((_b = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize) === null || _b === void 0 ? void 0 : _b[BrowserSizeMode.Large]) || DEFAULT_FIXED_POSITION_SIZE_JSON);\n    const isCookieBannerOpenByPrivacyPanel = (_c = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.cookieBanner) === null || _b === void 0 ? void 0 : _b.isCookieBannerOpenByPrivacyPanel; })) !== null && _c !== void 0 ? _c : false;\n    const isCookieBannerOpenByUrl = (_d = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.cookieBanner) === null || _b === void 0 ? void 0 : _b.isCookieBannerOpenByUrl; })) !== null && _d !== void 0 ? _d : false;\n    const enableTracking = (_e = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state === null || state === void 0 ? void 0 : state.appConfig) === null || _a === void 0 ? void 0 : _a.analytics) === null || _b === void 0 ? void 0 : _b.enable; })) !== null && _e !== void 0 ? _e : false;\n    const appMode = ReactRedux.useSelector((state) => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.appMode; });\n    const currentDialogId = ReactRedux.useSelector((state) => { var _a; return (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.currentDialogId; });\n    const [isEditable, setIsEditable] = React.useState(true);\n    const [playId, setPlayId] = React.useState(0);\n    const previewDialogId = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.animationPreview) === null || _b === void 0 ? void 0 : _b.dialogId; });\n    const [openSettingsWindow, setOpenSettingsWindow] = React.useState(false);\n    const isCookieSettingsWindowOpen = ReactRedux.useSelector((state) => { var _a, _b; return (_b = (_a = state === null || state === void 0 ? void 0 : state.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.cookieBanner) === null || _b === void 0 ? void 0 : _b.isCookieSettingsWindowOpen; });\n    const [isAnimationPlayed, setIsAnimationPlayed] = React.useState(false);\n    const [interactive, setInteractive] = React.useState(null);\n    const bannerContainerRef = React.useRef(null);\n    const editorRef = React.useRef(null);\n    const [bannerWidth, setBannerWidth] = React.useState(bannerContainerRef.current && bannerContainerRef.current.width);\n    const [isEditingText, setIsEditingText] = React.useState(false);\n    const { overlayId, zIndex, openOverlay, activateOverlay } = useOverlayManager(window.jimuConfig.isInBuilder ? 'modal' : 'popper', false, false, false);\n    React.useEffect(() => {\n        if (!window.jimuConfig.isInBuilder) {\n            return;\n        }\n        if (currentDialogId) {\n            setTimeout(() => {\n                activateOverlay();\n            }, 100);\n        }\n    }, [currentDialogId, activateOverlay]);\n    React.useEffect(() => {\n        setOpenSettingsWindow(isCookieSettingsWindowOpen);\n    }, [isCookieSettingsWindowOpen]);\n    React.useEffect(() => {\n        var _a, _b;\n        setPositionSizeJson(((_a = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize) === null || _a === void 0 ? void 0 : _a[browserSizeMode]) || ((_b = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize) === null || _b === void 0 ? void 0 : _b[BrowserSizeMode.Large]) || DEFAULT_FIXED_POSITION_SIZE_JSON);\n    }, [browserSizeMode, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize]);\n    const acceptAllButtonConfig = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.acceptAllButton;\n    const closeButtonConfig = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.closeButton;\n    const declineAllButtonConfig = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.declineAllButton;\n    const cookieSettingsButtonConfig = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.cookieSettingsButton;\n    const displayText = (cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.displayRichText) || translate('optionalBannerDefaultText');\n    const getContainerStyle = React.useCallback(() => {\n        var _a;\n        const transformStyle = LayoutsEntry && LayoutsEntry.controlPanelUtils.panelTransformStyle(positionSizeJson);\n        const panelStyle = LayoutsEntry && LayoutsEntry.controlPanelUtils.convertToStyle(positionSizeJson);\n        const borderRadiusStyle = (cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius) ? styleUtils.toCSSBorderRadius(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius.asMutable({ deep: true })) : '';\n        const boxShadowStyle = ((cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) && !((_a = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) === null || _a === void 0 ? void 0 : _a.presetStyle)) ? styleUtils.toCSSBoxshadow(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) : '';\n        return css `\r\n      ${panelStyle}\r\n      transform: ${transformStyle};\r\n      border-radius: ${borderRadiusStyle};\r\n      box-shadow: ${isAnimationPlayed ? boxShadowStyle : ''};\r\n      max-height: 100vh;\r\n      max-width: 100vw;\r\n      ${getResizeStyle()}\r\n    `;\n    }, [LayoutsEntry, positionSizeJson, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow, isAnimationPlayed]);\n    const getBannerStyle = React.useCallback((theme) => {\n        var _a, _b, _c;\n        const bgStyle = (cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.backgroundStyle) ? styleUtils.toBackgroundEmotionStyle(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.backgroundStyle) : '';\n        const borderStyle = (cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.border) ? styleUtils.toCSSBorder(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.border) : null;\n        const borderRadiusStyle = (cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius) ? styleUtils.toCSSBorderRadius(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius.asMutable({ deep: true })) : '2px';\n        const boxShadowStyle = ((cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) && !((_a = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) === null || _a === void 0 ? void 0 : _a.presetStyle)) ? styleUtils.toCSSBoxshadow(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) : '0 0 10px 1px rgba(0,0,0,0.2)';\n        const horizontalButtonsStyle = css `\r\n      display: flex;\r\n      flex-direction: ${bannerWidth > 640 ? 'row' : 'column'};\r\n      justify-content: ${bannerWidth > 640 ? 'end' : 'center'};\r\n      align-items: ${bannerWidth > 640 ? 'center' : ''}\r\n    `;\n        const verticalButtonsStyle = css `\r\n      display: flex;\r\n      flex-direction: ${bannerWidth > 480 ? 'row' : 'column'};\r\n      justify-content: end;\r\n    `;\n        return css `\r\n      overflow: auto;\r\n      background: ${(_b = theme === null || theme === void 0 ? void 0 : theme.ref.palette) === null || _b === void 0 ? void 0 : _b.white};\r\n\r\n      ${bgStyle}\r\n      border: ${borderStyle !== null && borderStyle !== void 0 ? borderStyle : `${(_c = theme === null || theme === void 0 ? void 0 : theme.sys.color) === null || _c === void 0 ? void 0 : _c.secondary.light} solid 1px`};\r\n      border-radius: ${borderRadiusStyle};\r\n      box-shadow: ${boxShadowStyle};\r\n      display: flex;\r\n      flex-direction: ${(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.layout) === ECookieBannerLayout.Horizontal ? 'row' : 'column'};\r\n      .banner-text-edit-button {\r\n        position: absolute;\r\n        top: -1rem;\r\n        left: 1rem;\r\n      }\r\n      .cookie-banner-text {\r\n        flex: 1 1 auto;\r\n        overflow: auto;\r\n      }\r\n      .cookie-banner-text.dragging {\r\n        user-select: none;\r\n        pointer-events: none;\r\n      }\r\n      .banner-buttons {\r\n        flex: 0 0 auto;\r\n        ${(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.layout) === ECookieBannerLayout.Horizontal ? horizontalButtonsStyle : verticalButtonsStyle}\r\n        button {\r\n          max-height: 30px;\r\n        }\r\n      }\r\n      .cookie-banner-text:hover, .cookie-banner-text.active {\r\n        border-radius: 2px;\r\n        border: ${window.jimuConfig.isInBuilder && appMode === AppMode.Design ? '1px solid var(--sys-color-primary-main)' : ''};\r\n      }\r\n      .ql-container {\r\n        .ql-editor{\r\n          overflow: hidden;\r\n        }\r\n      }\r\n    `;\n    }, [appMode, bannerWidth, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.backgroundStyle, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.border, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.borderRadius, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.layout]);\n    const getModuleByPath = (modulePath) => __awaiter(this, void 0, void 0, function* () {\n        if (!moduleLoader.getModuleSync(modulePath)) {\n            yield window.mockimport(modulePath);\n        }\n        return moduleLoader.getModuleSync(modulePath);\n    });\n    React.useEffect(() => {\n        setIsEditable(appMode === AppMode.Design);\n        if (appMode === AppMode.Run || appMode === AppMode.Express) {\n            setPlayId(getNextAnimationId());\n        }\n    }, [appMode]);\n    React.useEffect(() => {\n        if (previewDialogId === 'cookie-banner') {\n            setIsAnimationPlayed(false);\n            setPlayId(getNextAnimationId());\n        }\n    }, [previewDialogId]);\n    hooks.useEffectWithPreviousValues((prevValues) => {\n        if (!window.jimuConfig.isInBuilder) {\n            return;\n        }\n        const [prevIsBannerOpen] = prevValues;\n        if (prevIsBannerOpen !== isBannerOpen && isBannerOpen) {\n            openOverlay();\n        }\n    }, [isBannerOpen, openOverlay]);\n    React.useEffect(() => {\n        function helper() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const richTextEditorEntry = window.jimuConfig.isInBuilder ? yield getModuleByPath('jimu-ui/advanced/rich-text-editor') : null;\n                const dndEntry = window.jimuConfig.isInBuilder ? yield getModuleByPath('jimu-core/dnd') : null;\n                const themeEntry = yield getModuleByPath('jimu-theme');\n                const builderEntry = window.jimuConfig.isInBuilder ? yield getModuleByPath('jimu-for-builder') : null;\n                const layoutsEntry = yield getModuleByPath('jimu-layouts/layout-runtime');\n                if (richTextEditorEntry) {\n                    setRichEditorEntry(richTextEditorEntry);\n                }\n                if (themeEntry) {\n                    setThemeEntry(themeEntry);\n                }\n                if (builderEntry) {\n                    setBuilderEntry(builderEntry);\n                }\n                if (layoutsEntry) {\n                    setLayoutsEntry(layoutsEntry);\n                }\n                if (dndEntry) {\n                    setDndEntry(dndEntry);\n                }\n            });\n        }\n        helper();\n    }, []);\n    React.useEffect(() => {\n        function calculateBannerStatus() {\n            var _a;\n            if (!cookieBannerConfig) {\n                return;\n            }\n            // Hide the banner in the builder by default, wait for the privacy panel opening it\n            if (window.jimuConfig.isInBuilder) {\n                setIsBannerOpen(isCookieBannerOpenByPrivacyPanel || isCookieBannerOpenByUrl);\n                return;\n            }\n            const DEFAULT_REFRESH_DAYS = 180;\n            const COOKIE_CONFIRMATIONS_KEY = `${utils.getLocalStorageAppKey()}-cookie-confirmations`;\n            if (utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY)) {\n                let refreshPeriod = DEFAULT_REFRESH_DAYS;\n                const currentTimeStamp = new Date().getTime();\n                const cookieConfirmations = JSON.parse(utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY));\n                const localUid = cookieConfirmations.uid;\n                const confirmTime = cookieConfirmations.confirmTime;\n                const renewTime = cookieBannerConfig.renewTime;\n                const publishTime = (_a = getAppStore().getState().appConfig) === null || _a === void 0 ? void 0 : _a.publishTimestamp;\n                const passDays = calculateDaysBetween(confirmTime || currentTimeStamp, currentTimeStamp);\n                if (cookieBannerConfig.refreshPeriodically && typeof cookieBannerConfig.refreshPeriod === 'number') {\n                    refreshPeriod = cookieBannerConfig.refreshPeriod;\n                }\n                if (passDays > refreshPeriod || localUid !== cookieBannerConfig.uid || isCookieBannerOpenByUrl || confirmTime < renewTime || (renewTime < confirmTime && confirmTime < publishTime)) {\n                    setIsBannerOpen(true);\n                }\n            }\n            else {\n                // No local storage, show banner\n                setIsBannerOpen(true);\n            }\n        }\n        calculateBannerStatus();\n    }, [cookieBannerConfig, isCookieBannerOpenByPrivacyPanel, isCookieBannerOpenByUrl]);\n    hooks.useEffectWithPreviousValues((prevValues) => {\n        const [prevInteractive] = prevValues;\n        // For updates not caused by the change of the interactive, bind the handler\n        if ((isEditable || appMode === AppMode.Express) && BuilderEntry && DndEntry && isBannerOpen && prevInteractive === interactive) {\n            const debounceFunc = lodash.debounce(() => {\n                if (interactive) {\n                    interactive.unset();\n                }\n                if (bannerContainerRef.current) {\n                    setInteractive(bindResizeHandler(DndEntry.interact, bannerContainerRef.current, editorRef.current, positionSizeJson, browserSizeMode, BuilderEntry.getAppConfigAction, (value) => { setIsEditable(value); }));\n                }\n            }, bannerContainerRef.current ? 0 : 1000);\n            debounceFunc();\n        }\n    }, [interactive, BuilderEntry, DndEntry, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.positionSize, isEditable, isBannerOpen, positionSizeJson, bannerContainerRef, browserSizeMode]);\n    // Duplicate because the direct import from builder widget will cause error\n    const updateAppCookieBannerConfig = React.useCallback(function (propPath, value) {\n        var _a, _b;\n        if (!BuilderEntry) {\n            console.error('Please load jimu-for-builder module first');\n        }\n        let appConfig = BuilderEntry.getAppConfigAction().appConfig;\n        if (!appConfig.cookieBanner) {\n            appConfig = appConfig.set('cookieBanner', {});\n        }\n        let cookieBanner = null;\n        if (typeof propPath === 'string') {\n            cookieBanner = (_a = appConfig.cookieBanner) === null || _a === void 0 ? void 0 : _a.set(propPath, value);\n        }\n        else {\n            cookieBanner = (_b = appConfig.cookieBanner) === null || _b === void 0 ? void 0 : _b.setIn(propPath, value);\n        }\n        BuilderEntry.getAppConfigAction().updateCookieBannerConfig(cookieBanner).exec();\n    }, [BuilderEntry]);\n    const plugin = React.useCallback(() => {\n        if (!RichEditorEntry || !ThemeEntry || !isEditingText) {\n            return null;\n        }\n        return ({ editor, selection, formats }) => {\n            return (jsx(ThemeEntry.ThemeSwitchComponent, { useTheme2: true },\n                jsx(RichEditorEntry.Bubble, { editor: editor, selection: selection, formats: formats, placement: 'top', style: { minWidth: '428px' }, showLinkSetting: true, onChange: (text) => {\n                        updateAppCookieBannerConfig('displayRichText', text);\n                    } })));\n        };\n    }, [RichEditorEntry, ThemeEntry, isEditingText, updateAppCookieBannerConfig]);\n    const hideBannerAndUrlParam = React.useCallback(() => {\n        setIsBannerOpen(false);\n        getAppStore().dispatch(appActions.OpenCookieBannerByUrl(false));\n        jimuHistory.changeQueryObject({ cookie_banner: null }, true);\n    }, []);\n    const onConfirmFactory = React.useCallback((accept) => {\n        return () => {\n            if (isEditable) {\n                // Do not respond click event in design mode\n                return;\n            }\n            const COOKIE_CONFIRMATIONS_KEY = `${utils.getLocalStorageAppKey()}-cookie-confirmations`;\n            const prevConfirmationsStr = utils.readLocalStorage(COOKIE_CONFIRMATIONS_KEY);\n            let cookieConfirmations = null;\n            if (prevConfirmationsStr) {\n                cookieConfirmations = JSON.parse(prevConfirmationsStr);\n            }\n            cookieConfirmations = {\n                uid: cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.uid,\n                confirmTime: new Date().getTime(),\n                performance: accept\n            };\n            // Do not save to the local storage if it is live-view\n            if (!window.jimuConfig.isInBuilder) {\n                utils.setLocalStorage(COOKIE_CONFIRMATIONS_KEY, JSON.stringify(cookieConfirmations));\n            }\n            else {\n                BuilderEntry && BuilderEntry.appBuilderSync.publishCloseBannerToBuilder();\n            }\n            hideBannerAndUrlParam();\n        };\n    }, [BuilderEntry, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.uid, hideBannerAndUrlParam, isEditable]);\n    const onCloseClicked = React.useCallback(() => {\n        if (isEditable) {\n            return;\n        }\n        const COOKIE_CONFIRMATIONS_KEY = `${utils.getLocalStorageAppKey()}-cookie-confirmations`;\n        const cookieConfirmations = {\n            uid: cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.uid,\n            confirmTime: new Date().getTime()\n        };\n        // Do not save to the local storage if it is live-view\n        if (!window.jimuConfig.isInBuilder) {\n            utils.setLocalStorage(COOKIE_CONFIRMATIONS_KEY, JSON.stringify(cookieConfirmations));\n        }\n        else {\n            BuilderEntry && BuilderEntry.appBuilderSync.publishCloseBannerToBuilder();\n        }\n        hideBannerAndUrlParam();\n    }, [BuilderEntry, cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.uid, hideBannerAndUrlParam, isEditable]);\n    const onPreferencesClicked = React.useCallback(() => {\n        if (isEditable) {\n            return;\n        }\n        setOpenSettingsWindow(true);\n    }, [isEditable]);\n    const onSettingsWindowSave = React.useCallback(() => {\n        if (isEditable) {\n            return;\n        }\n        hideBannerAndUrlParam();\n    }, [hideBannerAndUrlParam, isEditable]);\n    const onWindowResize = lodash.debounce(React.useCallback(({ width, height }) => {\n        // Get the latest banner width\n        setBannerWidth(width);\n    }, []), 300);\n    if (!isBannerOpen || !(cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.enable)) {\n        return null;\n    }\n    return (jsx(ModalOverlayIdContext.Provider, { value: overlayId },\n        jsx(OverlayPortal, null,\n            jsx(\"div\", { className: 'cookie-banner-wrapper', css: getWrapperStyle(zIndex) },\n                window.jimuConfig.isInBuilder && jsx(\"div\", { className: 'cookie-banner-mask', css: getMaskStyle() }),\n                jsx(\"div\", { className: 'cookie-banner-container', css: getContainerStyle(), ref: (el) => { bannerContainerRef.current = el; } },\n                    jsx(ReactResizeDetector, { handleHeight: true, handleWidth: true, targetRef: bannerContainerRef.current, onResize: onWindowResize }),\n                    jsx(AnimationComponent, { className: 'h-100', playId: playId, parentId: null, type: (_f = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.effect) === null || _f === void 0 ? void 0 : _f.type, configType: (_h = (_g = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.effect) === null || _g === void 0 ? void 0 : _g.option) === null || _h === void 0 ? void 0 : _h.configType, direction: (_k = (_j = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.effect) === null || _j === void 0 ? void 0 : _j.option) === null || _k === void 0 ? void 0 : _k.direction, onAnimationEnd: () => {\n                            setIsAnimationPlayed(true);\n                            getAppStore().dispatch(appActions.clearAnimationPreview());\n                        } },\n                        jsx(\"div\", { className: `cookie-banner h-100 ${(_m = (_l = cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.boxShadow) === null || _l === void 0 ? void 0 : _l.presetStyle) !== null && _m !== void 0 ? _m : ''}`, css: getBannerStyle(theme), onClick: () => { setIsEditingText(true); } },\n                            (isEditable || appMode === AppMode.Express) && jsx(BannerResizeHandler, { positionSizeJson: positionSizeJson }),\n                            jsx(\"div\", { className: 'cookie-banner-text m-2 p-2 flex-grow-1', ref: editorRef }, (RichEditorEntry && (isEditable || appMode === AppMode.Express))\n                                ? jsx(RichEditorEntry.RichTextEditor, { plugin: plugin(), value: displayText, onEditorBlur: (selection, source, editor, ...args) => {\n                                        const html = editor.getHTML();\n                                        updateAppCookieBannerConfig('displayRichText', html);\n                                        // Only operate the classList here since onBlur will be triggered even when you click the toolbar\n                                        editorRef.current && editorRef.current.classList.remove('active');\n                                    }, onBlur: (event) => {\n                                        const relatedTarget = event.relatedTarget;\n                                        let currNode = relatedTarget;\n                                        let isFormatPanelClicked = false;\n                                        while (currNode) {\n                                            if (currNode.classList && currNode.classList.contains('format-panel')) {\n                                                isFormatPanelClicked = true;\n                                                break;\n                                            }\n                                            currNode = currNode.parentNode;\n                                        }\n                                        if (!isFormatPanelClicked) {\n                                            setIsEditingText(false);\n                                        }\n                                    }, onEditorFocus: (selection, source, editor) => {\n                                        editorRef.current && editorRef.current.classList.add('active');\n                                    } })\n                                : jsx(RichTextDisplayer, { value: displayText })),\n                            jsx(\"div\", { className: 'banner-buttons' },\n                                enableTracking &&\n                                    jsx(Button, { type: 'primary', className: 'm-2 text-nowrap', onClick: onConfirmFactory(true) },\n                                        (acceptAllButtonConfig === null || acceptAllButtonConfig === void 0 ? void 0 : acceptAllButtonConfig.icon) && jsx(Icon, { icon: acceptAllButtonConfig.icon.svg }),\n                                        (acceptAllButtonConfig === null || acceptAllButtonConfig === void 0 ? void 0 : acceptAllButtonConfig.label) || translate('acceptAll')),\n                                (enableTracking && (declineAllButtonConfig === null || declineAllButtonConfig === void 0 ? void 0 : declineAllButtonConfig.enable)) &&\n                                    jsx(Button, { type: 'secondary', className: 'm-2 text-nowrap', onClick: onConfirmFactory(false) },\n                                        (declineAllButtonConfig === null || declineAllButtonConfig === void 0 ? void 0 : declineAllButtonConfig.icon) && jsx(Icon, { icon: declineAllButtonConfig.icon.svg }),\n                                        (declineAllButtonConfig === null || declineAllButtonConfig === void 0 ? void 0 : declineAllButtonConfig.label) || translate('declineAll')),\n                                !enableTracking && jsx(Button, { className: 'm-2 text-nowrap', onClick: onCloseClicked },\n                                    (closeButtonConfig === null || closeButtonConfig === void 0 ? void 0 : closeButtonConfig.icon) && jsx(Icon, { icon: closeButtonConfig.icon.svg }),\n                                    (closeButtonConfig === null || closeButtonConfig === void 0 ? void 0 : closeButtonConfig.label) || translate('close')),\n                                (enableTracking && (cookieSettingsButtonConfig === null || cookieSettingsButtonConfig === void 0 ? void 0 : cookieSettingsButtonConfig.enable)) &&\n                                    jsx(Button, { className: 'm-2 text-nowrap', onClick: onPreferencesClicked },\n                                        (cookieSettingsButtonConfig === null || cookieSettingsButtonConfig === void 0 ? void 0 : cookieSettingsButtonConfig.icon) && jsx(Icon, { icon: cookieSettingsButtonConfig.icon.svg }),\n                                        (cookieSettingsButtonConfig === null || cookieSettingsButtonConfig === void 0 ? void 0 : cookieSettingsButtonConfig.label) || translate('preferences'))),\n                            openSettingsWindow && jsx(CookieSettingsWindow, { isEditable: isEditable, builderEntry: BuilderEntry, bannerUid: cookieBannerConfig === null || cookieBannerConfig === void 0 ? void 0 : cookieBannerConfig.uid, toggle: () => { setOpenSettingsWindow(false); }, onSave: onSettingsWindowSave }))))))));\n};\nfunction BannerResizeHandler(props) {\n    var _a, _b, _c;\n    const { positionSizeJson } = props;\n    return (jsx(\"div\", { className: 'cookie-banner-resize-handlers' },\n        (!positionSizeJson.position.includes('TOP') || positionSizeJson.heightMode === 'STRETCH') &&\n            jsx(\"span\", { key: '1', className: 'resize-handler cookie-banner-resize-top' },\n                jsx(\"div\", { className: 'resize-handler-icon h-100' })),\n        (!((_a = positionSizeJson === null || positionSizeJson === void 0 ? void 0 : positionSizeJson.position) === null || _a === void 0 ? void 0 : _a.includes('BOTTOM')) || positionSizeJson.heightMode === 'STRETCH') &&\n            jsx(\"span\", { key: '2', className: 'resize-handler cookie-banner-resize-bottom' },\n                jsx(\"div\", { className: 'resize-handler-icon h-100' })),\n        (!((_b = positionSizeJson === null || positionSizeJson === void 0 ? void 0 : positionSizeJson.position) === null || _b === void 0 ? void 0 : _b.includes('LEFT')) || positionSizeJson.widthMode === 'STRETCH') &&\n            jsx(\"span\", { key: '3', className: 'resize-handler cookie-banner-resize-left' },\n                jsx(\"div\", { className: 'resize-handler-icon w-100' })),\n        (!((_c = positionSizeJson === null || positionSizeJson === void 0 ? void 0 : positionSizeJson.position) === null || _c === void 0 ? void 0 : _c.includes('RIGHT')) || positionSizeJson.widthMode === 'STRETCH') &&\n            jsx(\"span\", { key: '4', className: 'resize-handler cookie-banner-resize-right' },\n                jsx(\"div\", { className: 'resize-handler-icon w-100' }))));\n}\n","import { css, polished } from 'jimu-core';\nexport const modalStyles = (props) => {\n    var _a, _b;\n    const theme = props.theme;\n    const modalVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.modal;\n    return modalVars && css `\r\n    &.modal-dialog {\r\n      position: relative;\r\n      width: auto;\r\n      margin: ${modalVars.dialog.margin};\r\n      pointer-events: none;\r\n\r\n      .modal.fade & {\r\n        transition:${modalVars.transition};\r\n        transform: translate(0, -25%);\r\n      }\r\n      .modal.show & {\r\n        transform: translate(0, 0);\r\n      }\r\n    }\r\n\r\n    &.modal-dialog-centered {\r\n      display: flex;\r\n      align-items: center;\r\n      min-height: calc(100% - (${modalVars.dialog.margin} * 2));\r\n      &::before {\r\n        display: block;\r\n        height: calc(100vh - (${modalVars.dialog.margin} * 2));\r\n        content: \"\";\r\n      }\r\n    }\r\n\r\n    .modal-content {\r\n      position: relative;\r\n      display: flex;\r\n      flex-direction: column;\r\n      width: 100%;\r\n      pointer-events: auto;\r\n      background-color: ${modalVars.content.bg};\r\n      background-clip: padding-box;\r\n      border: ${modalVars.content.border.width} solid ${modalVars.content.border.color};\r\n      border-radius: ${modalVars.content.borderRadius};\r\n      box-shadow: ${modalVars.content.shadow};\r\n      outline: 0;\r\n    }\r\n\r\n    .modal-header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding: ${modalVars.header.paddingY} ${modalVars.header.paddingX};\r\n      border-bottom: ${modalVars.header.border.width} solid ${modalVars.header.border.color};\r\n      ${polished.borderRadius('top', (_b = modalVars.content.borderRadius) !== null && _b !== void 0 ? _b : 0)};\r\n\r\n      .close {\r\n        padding: ${modalVars.header.paddingY} ${modalVars.header.paddingX};\r\n        margin: -${modalVars.header.paddingY} -${modalVars.header.paddingX} -${modalVars.header.paddingY} auto;\r\n      }\r\n    }\r\n\r\n    .modal-title {\r\n      flex: 1;\r\n      margin-bottom: 0;\r\n      line-height: ${modalVars.title.lineHeight};\r\n    }\r\n\r\n    .modal-body {\r\n      position: relative;\r\n      flex: 1 1 auto;\r\n      padding: ${modalVars.innerPadding};\r\n    }\r\n\r\n    .modal-footer {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: flex-end;\r\n      padding: ${modalVars.innerPadding};\r\n      border-top: ${modalVars.footer.border.width} solid ${modalVars.footer.border.color};\r\n\r\n      > * + * { margin-left: .5rem; }\r\n      > .btn {\r\n        min-width: ${modalVars.footer.button.minWidth};\r\n      }\r\n    }\r\n\r\n    .modal-scrollbar-measure {\r\n      position: absolute;\r\n      top: -9999px;\r\n      width: 50px;\r\n      height: 50px;\r\n      overflow: scroll;\r\n    }\r\n\r\n    /* TODO: use break points from config */\r\n    @media (min-width: 576px) {\r\n      &.modal-dialog {\r\n        max-width: ${modalVars.sizes.md};\r\n        margin: ${modalVars.dialog.marginYSmUp} auto;\r\n      }\r\n      &.modal-dialog-centered {\r\n        min-height: calc(100% - (${modalVars.dialog.marginYSmUp} * 2));\r\n      }\r\n      &.modal-dialog-centered::before {\r\n        height: calc(100vh - (${modalVars.dialog.marginYSmUp} * 2));\r\n      }\r\n      .modal-content {\r\n        box-shadow: ${modalVars.content.shadowSmUp};\r\n      }\r\n    }\r\n\r\n  `;\n};\n"],"names":[],"sourceRoot":""}