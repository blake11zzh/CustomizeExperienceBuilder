{"version":3,"file":"8007.61d14e62.iframe.bundle.js","mappings":";;;;;;;;;;AAaA;AACA;;;;AAIA;;;;;;;;;;;AAWA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;AAQA;;;;;;;;;;;;;;;;;AC7CA;AACA;;;;AAIA;;;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;;AAWA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;AAEA;;;AAGA;;;;;;AAMA;;;;AAIA;;;;;;AAOA;;ACrIA;;AAEA;;;;;;;;;;;;;;AAcA;;;;AAIA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;AAiBA;;AAEA;;;;;AAKA;;;;;;;AAQA;AC7CA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;;AAGA;AACA;;AAGA","sources":["webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/expression-builder/styles/components/expression-builder.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/expression-builder/styles/components/expression-editor.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/expression-builder/styles/components/expression-input.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/expression-builder/components/expression-builder/components/expression.tsx"],"sourcesContent":["import { css, polished } from 'jimu-core';\nexport function expressionBuilderStyles(props) {\n    const theme = props.theme;\n    return css `\r\n    .component-expression-builder{\r\n      .w-33{\r\n        width: 33% !important;\r\n      }\r\n      .w-85{\r\n        width: 85%;\r\n      }\r\n      .fixed-at-bottom{\r\n        width: 100%;\r\n        height: ${polished.rem(64)};\r\n        border-top: 1px solid ${theme.ref.palette.neutral[700]};\r\n        position: fixed;\r\n        bottom: 0;\r\n        left: 0;\r\n        background-color: ${theme.ref.palette.neutral[400]};\r\n      }\r\n      .expression-builder-tab{\r\n        padding-top: 1rem;\r\n        padding-bottom: 1rem;\r\n        overflow: hidden;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      .common-tab{\r\n        .option-label{\r\n          font-size: ${polished.rem(13)};\r\n          font-weight: 500;\r\n          color: ${theme.ref.palette.neutral[900]};\r\n        }\r\n        .data-option{\r\n          padding-left: 1rem;\r\n          padding-right: 1rem;\r\n        }\r\n      }\r\n      .field-selector-container{\r\n        height: 100%;\r\n      }\r\n      .expression-editor-container{\r\n        height: calc(100% - 90px);\r\n      }\r\n      .expression-editor-helper{\r\n        height: calc(100% - 130px);\r\n        .tab-content{\r\n          margin: 0 -1rem;\r\n        }\r\n      }\r\n      .exp-editor-helper-tab{\r\n        height: calc(100% - 20px);\r\n      }\r\n      .field-selector-container, .expression-editor-container{\r\n        width: 100%;\r\n      }\r\n      .expression-insert-btn{\r\n        width: ${polished.rem(180)};\r\n      }\r\n      .stat-inter-btn{\r\n        max-width: 100%;\r\n      }\r\n    }\r\n\r\n  `;\n}\n","import { css, polished } from 'jimu-core';\nexport function expressionEditorStyles(props) {\n    const theme = props.theme;\n    return css `\r\n    .component-expression-editor{\r\n      .mt-18{\r\n        margin-top: 18px;\r\n      }\r\n      .jimu-nav.nav.nav-pills.nav-fill{\r\n        border-top: 0;\r\n        border-left: 0;\r\n        border-right: 0;\r\n      }\r\n      .expression-editor-input{\r\n        -webkit-user-select: text !important;\r\n        user-select: text !important;\r\n        font-size: 13px;\r\n        font-weight: 400;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        min-height: ${polished.rem(48)};\r\n        max-height: ${polished.rem(100)};\r\n        user-select: none;\r\n        border: 0;\r\n        outline: none;\r\n        background-color: ${theme.ref.palette.neutral[300]};\r\n        padding: 1px;\r\n        .expression-editor-input-content-editable:focus{\r\n          border-color: ${theme.sys.color.primary.dark};\r\n          outline: none;\r\n        }\r\n        .expression-editor-input-content-editable{\r\n          border: 1px solid ${theme.ref.palette.neutral[300]};\r\n          min-height: ${polished.rem(48)};\r\n          max-height: ${polished.rem(100)};\r\n          border-radius: 2px;\r\n          outline: none;\r\n        }\r\n        p{\r\n          min-height: 100%;\r\n        }\r\n        .break-all{\r\n          word-break: break-all;\r\n        }\r\n        span.error-exp{\r\n          color: ${theme.sys.color.error.light};\r\n        }\r\n        .field-exp{\r\n          color: ${theme.sys.color.warning.light};\r\n        }\r\n        .function-exp{\r\n          color: ${theme.sys.color.primary.light};\r\n        }\r\n        .number-exp{\r\n          color: ${theme.sys.color.info.main};\r\n        }\r\n        .string-exp{\r\n          color: ${theme.sys.color.success.light};\r\n        }\r\n        .operator-exp{\r\n          color: ${theme.ref.palette.neutral[1100]};\r\n        }\r\n        .order-exp{\r\n          color: ${theme.ref.palette.success[500]};\r\n        }\r\n        .unknown-exp{\r\n          color: ${theme.sys.color.error.light};\r\n        }\r\n        .ds-disabled-exp{\r\n          color: ${theme.sys.color.error.light};\r\n        }\r\n      }\r\n\r\n      .error-border{\r\n        border: 1px solid #FF5066;\r\n        outline: none;\r\n        .expression-editor-input-content-editable{\r\n          outline: none;\r\n          border: 0;\r\n        }\r\n      }\r\n\r\n      .expression-editor-function-item{\r\n        border: 1px solid transparent;\r\n        cursor: pointer;\r\n        background-color: ${theme.ref.palette.neutral[500]};\r\n        user-select: none;\r\n      }\r\n      .expression-editor-function-item-selected{\r\n        border: 1px solid ${theme.sys.color.primary.main};\r\n      }\r\n      .expression-editor-function-item:hover{\r\n        background-color: ${theme.ref.palette.neutral[500]};\r\n      }\r\n      .expression-editor-function-item:active.expression-editor-function-item:hover{\r\n        background-color: ${theme.ref.palette.white};\r\n      }\r\n\r\n      .exp-editor-helper{\r\n        user-select: none;\r\n      }\r\n      .with-error-message .exp-editor-helper .component-field-selector .field-list{\r\n        height: calc(100% - 185px);\r\n      }\r\n      .exp-editor-helper-tab{\r\n        margin-left: -16px;\r\n        margin-right: -16px;\r\n      }\r\n\r\n      .error-message{\r\n        height: 20px;\r\n        line-height: 20px;\r\n      }\r\n\r\n      .exp-popper{\r\n        background-color: ${theme.ref.palette.neutral[300]};\r\n        border: 1px solid ${theme.ref.palette.neutral[700]};\r\n        font-size: 13px;\r\n        width: ${polished.rem(200)};\r\n        z-index: 1;\r\n        padding: 0 !important;\r\n        box-shadow: 0 0 8px 0 ${polished.rgba(theme.ref.palette.white, 0.5)};\r\n        .exp-popper-item{\r\n          padding-left: 8px;\r\n          padding-right: 8px;\r\n        }\r\n        .jimu-popper--arrow::after {\r\n          border-bottom-color: ${theme.ref.palette.neutral[300]} !important;\r\n        }\r\n      }\r\n      .exp-popper-selected-item, .exp-popper-item:hover{\r\n        background-color: ${theme.sys.color.secondary.main};\r\n        cursor: pointer;\r\n      }\r\n\r\n    }\r\n\r\n  `;\n}\n","import { css, polished } from 'jimu-core';\nexport function expressionInputStyles(props) {\n    const theme = props.theme;\n    return css `\r\n    .component-expression-input{\r\n      font-size: ${theme.ref.typeface.fontSize};\r\n      .input-wrapper{\r\n        height: ${polished.rem(26)};\r\n        padding-top: 0;\r\n        padding-bottom: 0;\r\n      }\r\n      .disabled-input-cover{\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n        top: -100%;\r\n        &.ds-disabled{\r\n          background-color: transparent;\r\n        }\r\n      }\r\n      .ds-disabled{\r\n        background-color: ${theme.ref.palette.neutral[300]};\r\n        cursor: pointer;\r\n        border: 0;\r\n        >span.error-wrapper{\r\n          color: ${theme.ref.palette.neutral[1200]};\r\n          background-color: ${polished.rgba(theme.sys.color.error.main, 0.5)};\r\n          vertical-align: sub;\r\n          margin-left: 5px;\r\n          margin-right: 5px;\r\n        }\r\n      }\r\n      .ds-placeholder{\r\n        >span{\r\n          color: ${theme.ref.palette.neutral[900]};\r\n          background-color: transparent;\r\n        }\r\n      }\r\n      .expression-builder-trigger{\r\n        cursor: pointer;\r\n        width: 26px;\r\n        height: 26px;\r\n        padding: 0;\r\n        .dropdown-button-content{\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n        }\r\n        .expression-builder-trigger-dropdown{\r\n          padding: 0;\r\n          .trigger-dropdown-toggle{\r\n            background: ${theme.ref.palette.neutral[600]};\r\n            border-radius: 2px 0 0 2px;\r\n            border-color: ${theme.ref.palette.neutral[600]};\r\n          }\r\n        }\r\n      }\r\n      .expression-input{\r\n        height: ${polished.rem(26)};\r\n        .jimu-input, .ds-placeholder{\r\n          border-radius: 0 2px 2px 0;\r\n        }\r\n      }\r\n    }\r\n\r\n  `;\n}\n","/** @jsx jsx */\nimport { React, expressionUtils, css, polished, jsx } from 'jimu-core';\nimport { Button, TextInput, defaultMessages, Popper, Label, Switch, NumericInput, Checkbox } from 'jimu-ui';\nimport { SettingOutlined } from 'jimu-icons/outlined/application/setting';\nimport ExpressionEditor from '../../expression-editor';\nimport { getTheme, getTheme2 } from 'jimu-theme';\nconst DefaultNumberFormat = {\n    useGrouping: true,\n    notation: 'standard',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 4\n};\nclass ExpressionTab extends React.PureComponent {\n    constructor(props) {\n        var _a, _b, _c, _d, _e, _f;\n        super(props);\n        this.numberFormatBtnRef = React.createRef();\n        this.expressionCountAdded = false;\n        this.insertCount = 0;\n        this.theme = window.jimuConfig.isBuilder ? getTheme() : getTheme2();\n        this.numberFormatStyles = css `\r\n    width: ${polished.rem(240)};\r\n    padding: ${polished.rem(16)};\r\n    .number-format-switch-label{\r\n      font-size: ${polished.rem(14)};\r\n      font-weight: 600;\r\n      color: ${((_a = this.theme) === null || _a === void 0 ? void 0 : _a.ref.palette.neutral[1100]) || '#dcdcdc'};\r\n    }\r\n    .number-format-checkbox-label{\r\n      font-size: ${polished.rem(13)};\r\n      color: ${((_b = this.theme) === null || _b === void 0 ? void 0 : _b.ref.palette.neutral[1100]) || '#dcdcdc'};\r\n    }\r\n    .number-format-numeric-input-label{\r\n      font-size: ${polished.rem(13)};\r\n      color: ${((_c = this.theme) === null || _c === void 0 ? void 0 : _c.ref.palette.neutral[900]) || '#a0a0a0'};\r\n    }\r\n  `;\n        this.getMutableExpression = (expression) => {\n            const e = this.props.expression && this.props.expression.asMutable\n                ? this.props.expression.asMutable({ deep: true })\n                : this.props.expression;\n            return e;\n        };\n        this.onExpChange = (e) => {\n            this.setState({ expression: e });\n        };\n        this.onChange = () => {\n            const newExpression = { name: this.state.name || this.getDefaultName(), parts: this.state.expression && this.state.expression.parts };\n            if (this.state.numberFormat) {\n                newExpression.numberFormat = this.state.numberFormat;\n            }\n            this.insertCount++;\n            this.props.onChange(newExpression);\n        };\n        this.onNameChange = e => {\n            this.setState({ name: e.target.value });\n        };\n        this.getDefaultName = () => {\n            return `${this.props.intl.formatMessage({ id: 'expression', defaultMessage: defaultMessages.expression })} ${ExpressionTab.count}`;\n        };\n        this.getWhetherDisableInsert = () => {\n            return !this.state.expression || !this.state.expression.parts || this.state.expression.parts.length === 0 || !expressionUtils.getWhetherExpressionValid(this.state.expression);\n        };\n        this.onNumberFormatClick = () => {\n            this.toggleNumberFormatSettingPopper();\n        };\n        this.toggleNumberFormatSettingPopper = () => {\n            this.setState({ isNumberFormatSettingOpen: !this.state.isNumberFormatSettingOpen });\n        };\n        this.onToggleNumberFormatSetting = (e, checked) => {\n            if (checked) {\n                this.setState({ numberFormat: DefaultNumberFormat });\n            }\n            else {\n                this.setState({ numberFormat: null });\n            }\n        };\n        this.onMinDigitsChange = (v) => {\n            this.setState({ numberFormat: Object.assign(Object.assign({}, this.state.numberFormat), { minimumFractionDigits: v }) });\n        };\n        this.onMaxDigitsChange = (v) => {\n            this.setState({ numberFormat: Object.assign(Object.assign({}, this.state.numberFormat), { maximumFractionDigits: v }) });\n        };\n        this.onUseGroupChange = (e, checked) => {\n            this.setState({ numberFormat: Object.assign(Object.assign({}, this.state.numberFormat), { useGrouping: checked }) });\n        };\n        this.onNotationChange = (e, checked) => {\n            this.setState({ numberFormat: Object.assign(Object.assign({}, this.state.numberFormat), { notation: checked ? 'compact' : 'standard' }) });\n        };\n        if (!((_d = props.expression) === null || _d === void 0 ? void 0 : _d.name)) {\n            // index in default expression name need to plus one\n            ExpressionTab.count++;\n            this.expressionCountAdded = true;\n        }\n        this.state = {\n            expression: this.getMutableExpression(this.props.expression),\n            name: ((_e = this.props.expression) === null || _e === void 0 ? void 0 : _e.name) || this.getDefaultName(),\n            numberFormat: (_f = this.props.expression) === null || _f === void 0 ? void 0 : _f.numberFormat,\n            isNumberFormatSettingOpen: false\n        };\n    }\n    componentDidUpdate(prevProps) {\n        var _a, _b;\n        if (prevProps.expression !== this.props.expression) {\n            this.setState({\n                expression: this.getMutableExpression(this.props.expression),\n                name: ((_a = this.props.expression) === null || _a === void 0 ? void 0 : _a.name) || this.getDefaultName(),\n                numberFormat: (_b = this.props.expression) === null || _b === void 0 ? void 0 : _b.numberFormat\n            });\n        }\n    }\n    componentWillUnmount() {\n        // didn't insert any expression, reset the index of default expression name\n        if (this.expressionCountAdded && this.insertCount === 0) {\n            ExpressionTab.count--;\n        }\n    }\n    render() {\n        var _a, _b;\n        const numberFormatString = this.props.intl.formatMessage({ id: 'numberFormatting', defaultMessage: defaultMessages.numberFormatting });\n        const decimalPlaceString = this.props.intl.formatMessage({ id: 'decimalPlace', defaultMessage: defaultMessages.decimalPlace });\n        const showThousandSeparatorString = this.props.intl.formatMessage({ id: 'showThousandSeparator', defaultMessage: defaultMessages.showThousandSeparator });\n        const unitString = this.props.intl.formatMessage({ id: 'unit', defaultMessage: defaultMessages.unit });\n        const toString = this.props.intl.formatMessage({ id: 'to', defaultMessage: defaultMessages.to });\n        const numberFormatDecimalId = `expression-${ExpressionTab.count}-number-format-decimal`;\n        return (jsx(\"div\", { className: 'expression-builder-tab expression-tab px-4' },\n            jsx(\"div\", { className: 'mb-4' },\n                jsx(\"div\", { className: 'd-flex justify-content-start' },\n                    jsx(TextInput, { className: 'flex-grow-1', value: this.state.name, onChange: this.onNameChange, id: 'expression-name-input', size: 'sm' }))),\n            jsx(\"div\", { className: 'expression-editor-container' },\n                jsx(ExpressionEditor, Object.assign({}, this.props, { expression: this.state.expression, onChange: this.onExpChange, autoFocus: this.props.isActive }))),\n            jsx(\"div\", { className: 'fixed-at-bottom d-flex align-items-center justify-content-between px-4' },\n                jsx(Button, { type: 'default', icon: true, size: 'default', onClick: this.onNumberFormatClick, title: numberFormatString, \"aria-label\": numberFormatString, ref: this.numberFormatBtnRef },\n                    jsx(SettingOutlined, { size: 'm' })),\n                jsx(Button, { onClick: this.onChange, type: 'primary', disabled: this.getWhetherDisableInsert(), className: 'expression-insert-btn ml-2', size: 'default', title: this.props.intl.formatMessage({ id: 'insert', defaultMessage: defaultMessages.insert }) },\n                    jsx(\"div\", { className: 'text-truncate' }, this.props.intl.formatMessage({ id: 'insert', defaultMessage: defaultMessages.insert })))),\n            jsx(Popper, { reference: this.numberFormatBtnRef.current, open: this.state.isNumberFormatSettingOpen, arrowOptions: true, toggle: this.toggleNumberFormatSettingPopper, offsetOptions: [-8, 0], placement: 'top-start', autoUpdate: true },\n                jsx(\"div\", { css: this.numberFormatStyles },\n                    jsx(\"div\", { className: 'w-100 mb-2' },\n                        jsx(Label, { className: 'w-100 d-flex justify-content-between' },\n                            jsx(\"div\", { className: 'w-75 text-truncate number-format-switch-label', title: numberFormatString }, numberFormatString),\n                            jsx(Switch, { checked: !!this.state.numberFormat, onChange: this.onToggleNumberFormatSetting }))),\n                    this.state.numberFormat &&\n                        jsx(\"div\", { className: 'w-100' },\n                            jsx(\"div\", { className: 'w-100 mb-2 d-flex' },\n                                jsx(Label, { className: 'w-100 text-truncate m-0 number-format-numeric-input-label', for: numberFormatDecimalId }, decimalPlaceString)),\n                            jsx(\"div\", { className: 'w-100 d-flex justify-content-between mb-4', id: numberFormatDecimalId },\n                                jsx(NumericInput, { value: this.state.numberFormat.minimumFractionDigits, onChange: this.onMinDigitsChange, showHandlers: true, precision: 0, min: 0, max: (_a = this.state.numberFormat.maximumFractionDigits) !== null && _a !== void 0 ? _a : 20, size: 'sm' }),\n                                jsx(\"span\", { className: 'mx-2 number-format-numeric-input-label' }, toString),\n                                jsx(NumericInput, { value: this.state.numberFormat.maximumFractionDigits, onChange: this.onMaxDigitsChange, showHandlers: true, precision: 0, min: (_b = this.state.numberFormat.minimumFractionDigits) !== null && _b !== void 0 ? _b : 0, max: 20, size: 'sm' })),\n                            jsx(\"div\", { className: 'w-100 mb-2' },\n                                jsx(Label, { className: 'w-100 d-flex justify-content-start m-0' },\n                                    jsx(Checkbox, { className: 'mr-2', checked: !!this.state.numberFormat.useGrouping, onChange: this.onUseGroupChange }),\n                                    jsx(\"div\", { className: 'w-85 text-truncate number-format-checkbox-label', title: showThousandSeparatorString }, showThousandSeparatorString))),\n                            jsx(\"div\", { className: 'w-100' },\n                                jsx(Label, { className: 'w-100 d-flex justify-content-start m-0' },\n                                    jsx(Checkbox, { className: 'mr-2', checked: this.state.numberFormat.notation === 'compact', onChange: this.onNotationChange }),\n                                    jsx(\"div\", { className: 'w-85 text-truncate number-format-checkbox-label', title: unitString }, unitString))))))));\n    }\n}\nExpressionTab.count = 0;\nexport default ExpressionTab;\n"],"names":[],"sourceRoot":""}