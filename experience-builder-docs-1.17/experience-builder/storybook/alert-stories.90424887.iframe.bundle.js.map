{"version":3,"file":"alert-stories.90424887.iframe.bundle.js","mappings":";;;;;;;;;AA8JA","sources":["webpack://arcgis-experience-builder-design-system/./stories/jimu-ui/lib/alert/alert.stories.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { focusElementInKeyboardMode, React } from 'jimu-core';\nimport { Alert, Button, Label, Switch, Fade } from 'jimu-ui';\nimport { withAppStore, withIntl } from '../../../../.storybook/decorators';\nimport { styled } from 'jimu-theme';\nexport default {\n    title: 'Components/jimu-ui/index/Alert',\n    component: Alert,\n    decorators: [withAppStore, withIntl],\n    args: {\n        size: 'default',\n        banner: false,\n        shape: 'none',\n        variant: 'contained',\n        'aria-live': 'polite',\n        fullWidth: false\n    }\n};\nconst BasicParameters = {\n    controls: {\n        include: ['type', 'banner', 'fullWidth', 'style', 'title', 'shape', 'text', 'action', 'closable', 'withIcon', 'open', 'className', 'onClose']\n    }\n};\nconst TooltipParameters = {\n    controls: {\n        include: ['type', 'variant', 'shape', 'showArrow', 'interactive', 'leaveDelay', 'placement', 'text', 'className', 'buttonType', 'size']\n    }\n};\nexport const Basic = {\n    args: {\n        form: 'basic',\n        type: 'warning',\n        text: 'Warning message',\n        closable: true,\n        withIcon: true,\n        open: true,\n        shape: 'none'\n    }\n};\nBasic.parameters = BasicParameters;\nexport const WithTitle = {\n    args: {\n        form: 'basic',\n        type: 'warning',\n        title: 'Warning',\n        text: 'Additional description and information about copywriting.',\n        closable: true,\n        withIcon: true,\n        open: true,\n        style: { width: 390 }\n    }\n};\nWithTitle.parameters = BasicParameters;\nexport const Banner = {\n    args: {\n        form: 'basic',\n        type: 'warning',\n        text: 'Additional description and information about copywriting.',\n        closable: true,\n        withIcon: true,\n        open: true,\n        banner: true,\n        style: { position: 'fixed', left: 0, top: 0 }\n    }\n};\nBanner.parameters = BasicParameters;\nexport const Closable = {\n    args: {\n        form: 'basic',\n        type: 'warning',\n        title: 'Warning',\n        text: 'Additional description and information about copywriting.',\n        closable: true,\n        withIcon: true,\n        open: true,\n        style: { width: 390 }\n    },\n    render: (_a) => {\n        var { open: propOpen, onClose } = _a, args = __rest(_a, [\"open\", \"onClose\"]);\n        const [open, setOpen] = React.useState(propOpen);\n        React.useEffect(() => {\n            setOpen(propOpen);\n        }, [propOpen]);\n        const handleClose = () => {\n            setOpen(false);\n            onClose === null || onClose === void 0 ? void 0 : onClose();\n        };\n        return React.createElement(Alert, Object.assign({ open: open, onClose: handleClose }, args));\n    }\n};\nClosable.parameters = BasicParameters;\nexport const Action = {\n    args: {\n        form: 'basic',\n        type: 'success',\n        text: 'This Alert uses a Button component for its action.',\n        withIcon: true,\n        open: true,\n        style: { width: 450 },\n        action: React.createElement(Button, { variant: 'text', color: 'inherit', size: \"sm\" }, \"UNDO\")\n    }\n};\nAction.parameters = BasicParameters;\nexport const FadeTransition = {\n    args: {\n        type: 'info',\n        text: 'Info message',\n        withIcon: true,\n        open: true\n    },\n    render: (_a) => {\n        var { open: propOpen } = _a, args = __rest(_a, [\"open\"]);\n        const [open, setOpen] = React.useState(propOpen);\n        React.useEffect(() => {\n            setOpen(propOpen);\n        }, [propOpen]);\n        const handleChange = (_, checked) => {\n            setOpen(checked);\n        };\n        const handleClose = () => {\n            var _a;\n            setOpen(false);\n            (_a = args.onClose) === null || _a === void 0 ? void 0 : _a.call(args);\n        };\n        return React.createElement(\"div\", { style: { width: 450 } },\n            React.createElement(\"form\", null,\n                React.createElement(Label, null,\n                    React.createElement(Switch, { checked: open, onChange: handleChange, className: 'mr-2' }),\n                    \"Show\")),\n            React.createElement(Fade, { in: open },\n                React.createElement(Alert, Object.assign({}, args, { form: 'basic', autoFocus: true, closable: true, onClose: handleClose }))));\n    }\n};\nFadeTransition.parameters = {\n    controls: {\n        exclude: ['form', 'open', 'closable', 'showArrow', 'interactive', 'leaveDelay']\n    }\n};\nconst A11yMessageRoot = styled.div `\r\n  width: 228px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  .jimu-alert-panel {\r\n    position: absolute;\r\n    bottom: 40px;\r\n  }\r\n`;\nexport const A11yMessage = {\n    args: {\n        type: 'warning',\n        text: 'Warning message',\n        withIcon: true\n    },\n    render: (args) => {\n        const ref = React.useRef(null);\n        const [open, setOpen] = React.useState(false);\n        const handleClose = () => {\n            var _a;\n            setOpen(false);\n            (_a = args.onClose) === null || _a === void 0 ? void 0 : _a.call(args);\n            focusElementInKeyboardMode(ref.current);\n        };\n        return React.createElement(A11yMessageRoot, null,\n            React.createElement(Alert, Object.assign({}, args, { open: open, form: 'basic', autoFocus: true, closable: true, onClose: handleClose })),\n            React.createElement(Button, { ref: ref, size: 'sm', onClick: () => { setOpen(true); } }, \"Open Alert\"));\n    }\n};\nA11yMessage.parameters = {\n    controls: {\n        exclude: ['form', 'open', 'closable', 'showArrow', 'interactive', 'leaveDelay']\n    }\n};\nexport const Tooltip = {\n    args: {\n        form: 'tooltip',\n        type: 'warning',\n        placement: 'top',\n        text: 'Warning message',\n        variant: 'contained',\n        showArrow: false\n    }\n};\nTooltip.parameters = TooltipParameters;\nexport const CustomTooltip = {\n    args: {\n        size: 'sm',\n        children: React.createElement(\"p\", { className: 'm-2', style: { width: 220 } },\n            \"This tool contains parameter that not currently supported. Please choose other tool. See \",\n            React.createElement(\"a\", { href: '' }, \"details\")),\n        form: 'tooltip',\n        type: 'warning',\n        placement: 'bottom',\n        showArrow: false,\n        interactive: true,\n        leaveDelay: 700\n    }\n};\nCustomTooltip.parameters = TooltipParameters;\n"],"names":[],"sourceRoot":""}