{"version":3,"file":"5233.f1231d1e.iframe.bundle.js","mappings":";;AAEA;AAaA;AACA;;AAEA;;AAEA;;;;;;AAMA;;;AAGA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;AAGA;;;;;;;;;;;;;;AC9CA;;;;;AAWA;;;;AAIA;;AAEA;AACA;;;;;;;AAOA;;;;;AChBA;;;;;;;;AAQA;;;;;AAKA;AACA;;;AAGA;AClBA;AACA;;;;;;;;;;;AAWA;;AAEA;;;AAGA;;;;;;;;;;;;;AC2CA;;;;AAIA;;;;;;;AClCA;;;AAGA;;;;;;;;;;;;;AC0CA;AC1DA;AACA;;AAEA;;AAEA;;;;;;;;;AASA;;;;;;AASA;AAaA;AACA;;;;;;;AAOA;AACA;;;;;AAKA;;;;;;;;;;AAUA;;;;;;;;;;;AAoBA;;;;;AC/FA;;;AAIA;;;;;;AAgBA;AAEA;;;;;;;;ACRA;;;;;;;AAOA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;;;;AAIA;;AAEA;;;;;AAKA;;;AAGA;;;AAIA;AC7CA;AASA;;;;;ACbA;;;;;AAMA;;ACTA;AACA;;;;;AAKA;AACA;;;AAGA;;;;;;;AAOA;;ACRA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;;AASA","sources":["webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/styles/components/color-block.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/styles/components/sketch-standard.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/styles/components/sketch-stardard-button.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/styles/components/theme-color-sketch.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/editable-input.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/hex.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/rgba.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/picker-block.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/pointer.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/components/sketch.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/color-picker/index.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/theme-color-picker/custom-color/_customize-color.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/theme-color-picker/theme-color/section.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/color-picker/theme-color-picker/theme-color/index.tsx"],"sourcesContent":["import { css } from 'jimu-core';\nimport { colorUtils } from 'jimu-theme';\nexport const ColorBlock = (props) => {\n    var _a, _b, _c, _d, _e, _f;\n    const { theme, width = 20, height = 16, color } = props;\n    const white = (_a = theme.ref.palette) === null || _a === void 0 ? void 0 : _a.white;\n    const light500 = (_b = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral) === null || _b === void 0 ? void 0 : _b[500];\n    const light600 = (_c = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral) === null || _c === void 0 ? void 0 : _c[600];\n    const light800 = (_d = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral) === null || _d === void 0 ? void 0 : _d[700];\n    const dark800 = (_e = theme === null || theme === void 0 ? void 0 : theme.ref.palette) === null || _e === void 0 ? void 0 : _e.neutral[1100];\n    const primary600 = (_f = theme === null || theme === void 0 ? void 0 : theme.sys.color) === null || _f === void 0 ? void 0 : _f.primary.main;\n    const transparent = `conic-gradient(${white} 0.25turn, ${dark800} 0.25turn 0.5turn,${white} 0.5turn 0.75turn, ${dark800} 0.75turn)  top left / 50% 50% repeat`;\n    const fillColor = white;\n    const background = colorUtils.isStandardOrCSSVariableColor(color) ? color : `linear-gradient(to bottom right, ${fillColor} calc(50% - 1px), ${light600}, ${fillColor} calc(50% + 1px))`;\n    return css `\r\n    width: ${typeof width === 'number' ? width + 'px' : width};\r\n    height: ${typeof height === 'number' ? height + 'px' : height};\r\n    cursor: pointer;\r\n    background: ${transparent};\r\n    &.active {\r\n      outline: 1px solid ${primary600} !important;\r\n      z-index: 1;\r\n    }\r\n    > .color-presenter {\r\n      width: 100%;\r\n      height: 100%;\r\n      background: ${background};\r\n      border-width: 1px;\r\n      border-style: solid;\r\n      border-color: ${light500};\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      > .outline-block {\r\n        width: 10px;\r\n        height: 8px;\r\n        border: 1px solid ${light600};\r\n        background-color: ${white};\r\n      }\r\n    }\r\n    &.disabled {\r\n      cursor: default;\r\n      filter: opacity(0.5);\r\n      > .color-presenter {\r\n        border-color: ${light800};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const SketchStandard = (props) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const { theme } = props;\n    const dark400 = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.ref.palette) === null || _a === void 0 ? void 0 : _a.neutral) === null || _b === void 0 ? void 0 : _b[900];\n    const size2 = (_e = (_d = theme === null || theme === void 0 ? void 0 : (_c = theme.sys).spacing) === null || _d === void 0 ? void 0 : _d.call(_c, 2)) !== null && _e !== void 0 ? _e : '0.5rem';\n    const smallFontsize = (_g = (_f = theme === null || theme === void 0 ? void 0 : theme.sys.typography) === null || _f === void 0 ? void 0 : _f.label2.fontSize) !== null && _g !== void 0 ? _g : '0.75rem';\n    return css `\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: ${size2};\r\n\r\n    .standar-color {\r\n      width: 100%;\r\n      margin-top: ${polished.rem(20)};\r\n      label {\r\n        font-size: ${smallFontsize};\r\n        color: ${dark400};\r\n        max-width: 100%;\r\n      }\r\n      .color-strip {\r\n        width: 100%;\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const SketchStandardButton = (props) => {\n    var _a, _b;\n    const { theme } = props;\n    const size2 = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.sys) === null || _a === void 0 ? void 0 : _a.spacing(2)) !== null && _b !== void 0 ? _b : polished.rem(8);\n    return css `\r\n    width: 100%;\r\n    height: auto;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: ${size2};\r\n\r\n    .sketch-standard {\r\n      padding: 0;\r\n    }\r\n\r\n    .buttons {\r\n      width: 100%;\r\n      margin-top: ${polished.rem(20)};\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: flex-end;\r\n      > button {\r\n        width: ${polished.rem(80)};\r\n        margin-left: ${polished.rem(5)};\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const ThemeColorSketch = (props) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const theme = props.theme;\n    const black = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.ref) === null || _a === void 0 ? void 0 : _a.palette.black) !== null && _b !== void 0 ? _b : 'black';\n    const dark600 = (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.ref) === null || _c === void 0 ? void 0 : _c.palette.neutral[1000]) !== null && _d !== void 0 ? _d : '';\n    const size2 = (_f = (_e = theme === null || theme === void 0 ? void 0 : theme.sys) === null || _e === void 0 ? void 0 : _e.spacing(2)) !== null && _f !== void 0 ? _f : polished.rem(8);\n    const size3 = (_h = (_g = theme === null || theme === void 0 ? void 0 : theme.sys) === null || _g === void 0 ? void 0 : _g.spacing(4)) !== null && _h !== void 0 ? _h : polished.rem(16);\n    return css `\r\n    width: ${polished.rem(242)};\r\n    padding: ${size2} ${size3};\r\n    display: flex;\r\n    align-items: center;\r\n    > * {\r\n      user-select: none;\r\n    }\r\n    .sketch-standard {\r\n      padding: 0;\r\n    }\r\n\r\n    .jimu-icon {\r\n      color: ${dark600};\r\n      &:hover {\r\n        color: ${black};\r\n      }\r\n    }\r\n  `;\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css } from 'jimu-core';\nimport { TextInput } from 'jimu-ui';\nimport { withTheme } from 'jimu-theme';\nconst DEFAULT_ARROW_OFFSET = 1;\nconst UP_KEY_CODE = 38;\nconst DOWN_KEY_CODE = 40;\nconst VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];\nconst isValidKeyCode = (keyCode) => VALID_KEY_CODES.includes(keyCode);\n// const getFormattedPercentage = number => `${number}%`;\nconst getNumberValue = (value) => Number(String(value).replace(/%/g, ''));\nclass _EditableInput extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.handleBlur = () => {\n            const { value } = this.state;\n            this.changeValue(value);\n        };\n        this.handleKeyup = (evt) => {\n            if (evt.key === 'Enter') {\n                // enter\n                const { value } = this.state;\n                this.changeValue(value);\n            }\n        };\n        this.handleKeyDown = (e) => {\n            // In case `e.target.value` is a percentage remove the `%` character\n            // and update accordingly with a percentage\n            // https://github.com/casesandberg/react-color/issues/383\n            const value = getNumberValue(e.target.value);\n            if (!isNaN(value) && isValidKeyCode(e.keyCode)) {\n                const offset = this.getArrowOffset();\n                const updatedValue = e.key === 'ArrowUp' ? value + offset : value - offset;\n                if (updatedValue >= 0 && updatedValue <= this.props.max) {\n                    this.setState({ value: String(updatedValue) });\n                }\n            }\n        };\n        this.handleChange = (evt) => {\n            this.setState({ value: evt.target.value });\n        };\n        this.getStyle = () => {\n            var _a, _b;\n            const { theme } = this.props;\n            const dark600 = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.ref.palette) === null || _a === void 0 ? void 0 : _a.neutral[1000]) !== null && _b !== void 0 ? _b : '#C5C5C5';\n            return css `\r\n      position: relative;\r\n      input {\r\n        font-size: 11px;\r\n        width: 100%;\r\n        padding: 0.4rem 0.2rem;\r\n        text-align: center;\r\n      }\r\n\r\n      .label {\r\n        display: block;\r\n        width: 100%;\r\n        font-size: 10px;\r\n        color: ${dark600};\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n      }\r\n    `;\n        };\n        this.state = {\n            value: String(props.value).toUpperCase()\n        };\n        this.input = React.createRef();\n    }\n    componentDidMount() {\n        const { value = '' } = this.props;\n        this.setState({ value: String(value) });\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.value !== prevProps.value) {\n            this.setState({ value: String(this.props.value) });\n        }\n    }\n    getOutValue(value) {\n        const { label } = this.props;\n        if (label != null && label !== '') {\n            return { [label]: value };\n        }\n        else {\n            return value;\n        }\n    }\n    getArrowOffset() {\n        return this.props.arrowOffset >= 0 ? this.props.arrowOffset : DEFAULT_ARROW_OFFSET;\n    }\n    changeValue(value) {\n        var _a, _b;\n        if (value !== this.props.value) {\n            const outValue = this.getOutValue(value);\n            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, outValue);\n        }\n    }\n    render() {\n        const _a = this.props, { placeholder, label, hideLabel, arrowOffset, value: propValue, max, onChange, 'aria-label': ariaLabel, theme } = _a, others = __rest(_a, [\"placeholder\", \"label\", \"hideLabel\", \"arrowOffset\", \"value\", \"max\", \"onChange\", 'aria-label', \"theme\"]);\n        const { value } = this.state;\n        return (jsx(\"div\", Object.assign({ \"data-testid\": 'editable-input', css: this.getStyle() }, others),\n            jsx(TextInput, { role: 'text', ref: this.input, value: value, onChange: this.handleChange, onKeyDown: this.handleKeyDown, onPressEnter: this.handleKeyup, onBlur: this.handleBlur, placeholder: placeholder, spellCheck: false, \"aria-label\": ariaLabel }),\n            (label != null && label !== '' && !hideLabel) ? jsx(\"span\", { className: 'label' },\n                \" \",\n                label,\n                \" \") : null));\n    }\n}\n_EditableInput.defaultProps = {\n    max: 255\n};\nexport const EditableInput = withTheme(_EditableInput);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css } from 'jimu-core';\nimport { EditableInput } from './editable-input';\nimport { color } from './core';\nimport { withTheme } from 'jimu-theme';\nclass _Hex extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.handleChange = data => {\n            if (data.hex) {\n                color.isValidHex(data.hex) &&\n                    this.props.onChange({\n                        hex: data.hex,\n                        source: 'hex'\n                    });\n            }\n        };\n        this.getStyle = () => {\n            var _a, _b;\n            const { theme } = this.props;\n            const dark600 = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.ref) === null || _a === void 0 ? void 0 : _a.palette.neutral[1000]) !== null && _b !== void 0 ? _b : '#C5C5C5';\n            return css `\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      > .label {\r\n        text-transform: uppercase;\r\n        font-size: 13px;\r\n        color: ${dark600};\r\n        text-align: center;\r\n      }\r\n    `;\n        };\n    }\n    render() {\n        const _a = this.props, { hex, hsl, rgb, onChange, placeholder } = _a, others = __rest(_a, [\"hex\", \"hsl\", \"rgb\", \"onChange\", \"placeholder\"]);\n        return (jsx(\"div\", Object.assign({ \"data-testid\": 'hex', css: this.getStyle() }, others),\n            jsx(\"span\", { className: 'label' }, \"hex\"),\n            jsx(EditableInput, { label: 'hex', \"aria-label\": 'Hex', hideLabel: true, placeholder: placeholder, value: hex, onChange: this.handleChange })));\n    }\n}\nexport const Hex = withTheme(_Hex);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css } from 'jimu-core';\nimport { EditableInput } from './editable-input';\nimport { color } from './core';\nexport class Rgba extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.handleChange = data => {\n            const { hsl, rgb } = this.props;\n            if (data.hex) {\n                color.isValidHex(data.hex) &&\n                    this.props.onChange({\n                        hex: data.hex,\n                        source: 'hex'\n                    });\n            }\n            else if (data.r || data.g || data.b) {\n                this.props.onChange({\n                    r: data.r || (rgb === null || rgb === void 0 ? void 0 : rgb.r),\n                    g: data.g || (rgb === null || rgb === void 0 ? void 0 : rgb.g),\n                    b: data.b || (rgb === null || rgb === void 0 ? void 0 : rgb.b),\n                    a: rgb === null || rgb === void 0 ? void 0 : rgb.a,\n                    source: 'rgb'\n                });\n            }\n            else if (data.a) {\n                if (data.a < 0) {\n                    data.a = 0;\n                }\n                else if (data.a > 100) {\n                    data.a = 100;\n                }\n                data.a /= 100;\n                this.props.onChange({\n                    h: hsl === null || hsl === void 0 ? void 0 : hsl.h,\n                    s: hsl === null || hsl === void 0 ? void 0 : hsl.s,\n                    l: hsl === null || hsl === void 0 ? void 0 : hsl.l,\n                    a: data === null || data === void 0 ? void 0 : data.a,\n                    source: 'rgb'\n                });\n            }\n            else if (data.h || data.s || data.l) {\n                // Remove any occurances of '%'.\n                if (typeof data.s === 'string' && data.s.includes('%')) {\n                    data.s = data.s.replace('%', '');\n                }\n                if (typeof data.l === 'string' && data.l.includes('%')) {\n                    data.l = data.l.replace('%', '');\n                }\n                this.props.onChange({\n                    h: data.h || this.props.hsl.h,\n                    s: Number((data.s && data.s) || (hsl === null || hsl === void 0 ? void 0 : hsl.s)),\n                    l: Number((data.l && data.l) || (hsl === null || hsl === void 0 ? void 0 : hsl.l)),\n                    source: 'hsl'\n                });\n            }\n        };\n        this.getStyle = () => {\n            return css `\r\n      display: flex;\r\n      flex: 1 1 0%;\r\n      justify-content: space-between;\r\n      .item {\r\n        width: 25%;\r\n        flex-grow: 1;\r\n        flex-shrink: 1;\r\n      }\r\n      .item input:not(:last-child) {\r\n        border-top-right-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n      }\r\n    `;\n        };\n    }\n    render() {\n        const _a = this.props, { disableAlpha, rgb, hex, hsl, onChange, color } = _a, others = __rest(_a, [\"disableAlpha\", \"rgb\", \"hex\", \"hsl\", \"onChange\", \"color\"]);\n        return (jsx(\"div\", Object.assign({ \"data-testid\": 'rgba', css: this.getStyle() }, others),\n            jsx(\"div\", { className: 'item' },\n                jsx(EditableInput, { label: 'r', \"aria-label\": 'R', max: 255, value: rgb === null || rgb === void 0 ? void 0 : rgb.r, onChange: this.handleChange })),\n            jsx(\"div\", { className: 'item' },\n                jsx(EditableInput, { max: 255, label: 'g', \"aria-label\": 'G', value: rgb === null || rgb === void 0 ? void 0 : rgb.g, onChange: this.handleChange })),\n            jsx(\"div\", { className: 'item' },\n                jsx(EditableInput, { max: 255, label: 'b', \"aria-label\": 'B', value: rgb === null || rgb === void 0 ? void 0 : rgb.b, onChange: this.handleChange })),\n            !disableAlpha && (jsx(\"div\", { className: 'item' },\n                jsx(EditableInput, { arrowOffset: 10, max: 100, label: 'a', \"aria-label\": 'A', value: typeof (rgb === null || rgb === void 0 ? void 0 : rgb.a) === 'number' ? Math.round(rgb.a * 100) : undefined, onChange: this.handleChange })))));\n    }\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { React, classNames, css, polished } from 'jimu-core';\nimport { ColorBlock } from './color-block';\nimport { Icon } from 'jimu-ui';\nimport { styled } from 'jimu-theme';\nconst PickerBlockRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'width' && prop !== 'height'\n})((props) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const primary = (_b = (_a = props.theme.sys.color) === null || _a === void 0 ? void 0 : _a.primary.main) !== null && _b !== void 0 ? _b : '#076fe5';\n    const light200 = (_f = (_e = (_d = (_c = props.theme) === null || _c === void 0 ? void 0 : _c.ref.palette) === null || _d === void 0 ? void 0 : _d.neutral) === null || _e === void 0 ? void 0 : _e[300]) !== null && _f !== void 0 ? _f : '#181818';\n    let width = (_g = props.width) !== null && _g !== void 0 ? _g : 30;\n    width = typeof width === 'number' ? width + 'px' : width;\n    let height = (_h = props.height) !== null && _h !== void 0 ? _h : 26;\n    height = typeof height === 'number' ? height + 'px' : height;\n    return css `\r\n    width: ${width};\r\n    height: ${height};\r\n    padding: 4px;\r\n    background: ${light200};\r\n    &:focus {\r\n      box-shadow: 0 0 0 0.2rem ${polished.rgba(primary, 0.25)};\r\n    }\r\n    &.disabled {\r\n      filter: opacity(0.5);\r\n      pointer-events: none;\r\n      &:focus {\r\n        box-shadow: unset;\r\n      }\r\n    }\r\n  `;\n});\nconst DefaultColorBlock = styled(ColorBlock) `\r\n  width: 100%;\r\n  height: 100%;\r\n  &:focus {\r\n    box-shadow: unset;\r\n  }\r\n`;\nconst TextPickerBlockRoot = styled('div', {\n    shouldForwardProp: prop => !['type', 'width', 'height', 'text', 'color'].includes(prop)\n})((props) => {\n    var _a, _b, _c, _d, _e;\n    const type = props.type;\n    const text = props.text;\n    const color = (_a = props.color) !== null && _a !== void 0 ? _a : 'var(--ref-palette-neutral-900)';\n    const primary = (_c = (_b = props.theme.sys.color) === null || _b === void 0 ? void 0 : _b.primary.main) !== null && _c !== void 0 ? _c : '#076fe5';\n    let width = (_d = props.width) !== null && _d !== void 0 ? _d : 30;\n    width = typeof width === 'number' ? width + 'px' : width;\n    let height = (_e = props.height) !== null && _e !== void 0 ? _e : 26;\n    height = typeof height === 'number' ? height + 'px' : height;\n    return css `\r\n    width: ${width};\r\n    height: ${height};\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: ${type === 'icon-only' ? color : 'var(--ref-palette-neutral-900)'};\r\n    background-color: ${!text ? 'var(--ref-palette-neutral-500)' : 'unset'};\r\n    > .jimu-icon {\r\n      color: var(--ref-palette-black);\r\n    }\r\n    &:focus {\r\n      box-shadow: 0 0 0 0.2rem ${polished.rgba(primary, 0.25)};\r\n    }\r\n    &.disabled {\r\n      border: 1px solid var(--ref-palette-neutral-500);\r\n      background-color: var(--ref-palette-neutral-600);\r\n      pointer-events: none;\r\n      &:focus {\r\n        box-shadow: unset;\r\n      }\r\n    }\r\n  `;\n});\nconst TextColorBlock = styled((props) => {\n    const { icon } = props, others = __rest(props, [\"icon\"]);\n    return (React.createElement(React.Fragment, null,\n        typeof icon === 'string' && React.createElement(Icon, { size: 's', icon: icon }),\n        React.isValidElement(icon) && icon,\n        React.createElement(ColorBlock, Object.assign({}, others))));\n}) `\r\n  width: 53%;\r\n  height: 15%;\r\n  margin-top: 2px;\r\n  border: unset;\r\n  > .color-presenter {\r\n    border-width: 0px;\r\n  }\r\n  &:focus {\r\n    box-shadow: unset;\r\n  }\r\n`;\nexport const PickerBlock = React.forwardRef((props, ref) => {\n    const { type: propType, color, value, width, height, disabled, active, tabIndex = 0, className, onClick, icon, tertiary, outline = false, text } = props, others = __rest(props, [\"type\", \"color\", \"value\", \"width\", \"height\", \"disabled\", \"active\", \"tabIndex\", \"className\", \"onClick\", \"icon\", \"tertiary\", \"outline\", \"text\"]);\n    const type = propType || (icon ? 'with-icon' : 'default');\n    const handleKeydown = (evt) => {\n        if (evt.key === 'Enter' || evt.key === ' ') {\n            if (disabled)\n                return;\n            onClick === null || onClick === void 0 ? void 0 : onClick(evt);\n        }\n    };\n    const classes = classNames('color-picker-block', className, { disabled });\n    const rootProps = Object.assign({ color,\n        width,\n        height, role: 'button', ref, onClick: !disabled ? onClick : null, onKeyDown: handleKeydown, tabIndex: !disabled ? tabIndex : -1, className: classes }, others);\n    const colorBlockProps = {\n        role: '',\n        tabIndex: -1,\n        value,\n        active,\n        disabled\n    };\n    if (type === 'default') {\n        colorBlockProps.outline = outline;\n    }\n    if (type === 'with-icon') {\n        return (React.createElement(TextPickerBlockRoot, Object.assign({}, rootProps, { text: text || tertiary, type: type }),\n            React.createElement(TextColorBlock, Object.assign({ icon: icon }, colorBlockProps, { color: color }))));\n    }\n    else if (type === 'icon-only') {\n        return (React.createElement(TextPickerBlockRoot, Object.assign({}, rootProps, { text: text || tertiary, color: color, type: type }),\n            typeof icon === 'string' && React.createElement(Icon, { size: 'm', icon: icon }),\n            React.isValidElement(icon) && icon));\n    }\n    else {\n        return (React.createElement(PickerBlockRoot, Object.assign({}, rootProps),\n            React.createElement(DefaultColorBlock, Object.assign({}, colorBlockProps, { color: color }))));\n    }\n});\n","/** @jsx jsx */\nimport { React, css, jsx, getAppStore } from 'jimu-core';\nconst usePointerStyle = () => {\n    var _a;\n    const isRTL = (_a = getAppStore().getState().appContext) === null || _a === void 0 ? void 0 : _a.isRTL;\n    return React.useMemo(() => {\n        return css `\r\n      cursor: pointer;\r\n      width: 10px;\r\n      height: 10px;\r\n      border-radius: 5px;\r\n      transform: translate(${isRTL ? '6px' : '-6px'}, -1px);\r\n      background-color: rgb(248, 248, 248);\r\n      box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.37);\r\n    `;\n    }, [isRTL]);\n};\nexport const Pointer = () => {\n    const style = usePointerStyle();\n    return jsx(\"div\", { css: style });\n};\nconst usePointerCircleStyle = () => {\n    var _a;\n    const isRTL = (_a = getAppStore().getState().appContext) === null || _a === void 0 ? void 0 : _a.isRTL;\n    return React.useMemo(() => {\n        return css `\r\n      cursor: pointer;\r\n      width: 12px;\r\n      height: 12px;\r\n      border-radius: 6px;\r\n      box-shadow: inset 0 0 0 1px #fff;\r\n      transform: translate(${isRTL ? '6px' : '-6px'}, -6px);\r\n    `;\n    }, [isRTL]);\n};\nexport const PointerCircle = () => {\n    const style = usePointerCircleStyle();\n    return jsx(\"div\", { css: style });\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, css, jsx, polished } from 'jimu-core';\nimport { Hex, Rgba, CustomPicker, Saturation, Hue, Alpha, Checkboard } from '.';\nimport { PointerCircle, Pointer } from './pointer';\nconst useSketchStyle = (disableAlpha) => {\n    return React.useMemo(() => {\n        return css `\r\n      width: 100%;\r\n      .saturation {\r\n        width: 100%;\r\n        padding-bottom: 55%;\r\n        position: relative;\r\n        overflow: hidden;\r\n        border-radius: 1px;\r\n        height: ${polished.rem(142)};\r\n      }\r\n      .body {\r\n        width: 100%;\r\n        .slider {\r\n          width: 100%;\r\n          display: flex;\r\n          margin-top: ${polished.rem(10)};\r\n          .color {\r\n            width: ${polished.rem(disableAlpha ? 20 : 30)};\r\n            height: ${polished.rem(disableAlpha ? 20 : 30)};\r\n            margin-right: ${polished.rem(10)};\r\n            .swatch {\r\n              width: 100%;\r\n              height: 100%;\r\n              position: relative;\r\n              overflow: hidden;\r\n            }\r\n            .active {\r\n              position: absolute;\r\n              top: 0px;\r\n              right: 0px;\r\n              bottom: 0px;\r\n              left: 0px;\r\n              z-index: 2;\r\n            }\r\n          }\r\n\r\n          .toggles {\r\n            flex: 1;\r\n            .hue {\r\n              height: ${polished.rem(10)};\r\n              position: relative;\r\n              top: ${disableAlpha ? 'calc(50% - 5px)' : 'unset'};\r\n            }\r\n\r\n            .alpha {\r\n              height: ${polished.rem(10)};\r\n              position: relative;\r\n              display: ${disableAlpha ? 'none' : 'block'};\r\n            }\r\n          }\r\n        }\r\n        .hex {\r\n          margin-top: ${polished.rem(20)};\r\n        }\r\n        .rgba {\r\n          margin-top: ${polished.rem(20)};\r\n        }\r\n      }\r\n    `;\n    }, [disableAlpha]);\n};\nconst SketchComponent = (props) => {\n    const { onChange, disableAlpha, rgb, hsl, hsv, hex, className, oldHue } = props, others = __rest(props, [\"onChange\", \"disableAlpha\", \"rgb\", \"hsl\", \"hsv\", \"hex\", \"className\", \"oldHue\"]);\n    const style = useSketchStyle(disableAlpha);\n    return (jsx(\"div\", Object.assign({ \"data-testid\": 'sketch-core', css: style, className: `sketch ${className}` }, others),\n        jsx(\"div\", { className: 'saturation border' },\n            jsx(Saturation, { hsl: hsl, hsv: hsv, pointer: PointerCircle, onChange: onChange })),\n        jsx(\"div\", { className: 'body' },\n            jsx(\"div\", { className: 'slider' },\n                jsx(\"div\", { className: 'color' },\n                    jsx(\"div\", { className: 'swatch' },\n                        jsx(\"div\", { className: 'active border', style: {\n                                background: `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a})`\n                            } }),\n                        jsx(Checkboard, null))),\n                jsx(\"div\", { className: 'toggles' },\n                    jsx(\"div\", { className: 'hue border mb-2' },\n                        jsx(Hue, { hsl: hsl, pointer: Pointer, onChange: onChange })),\n                    jsx(\"div\", { className: 'alpha border' },\n                        jsx(Alpha, { rgb: rgb, hsl: hsl, pointer: Pointer, onChange: onChange })))),\n            jsx(Hex, { className: 'hex', rgb: rgb, hsl: hsl, hex: hex, onChange: onChange }),\n            jsx(Rgba, { className: 'rgba', rgb: rgb, hsl: hsl, hex: hex, disableAlpha: disableAlpha, onChange: onChange }))));\n};\nexport const Sketch = CustomPicker(SketchComponent);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, css, jsx, polished, hooks, focusElementInKeyboardMode } from 'jimu-core';\nimport { Popper, defaultMessages } from 'jimu-ui';\nimport { PickerBlock } from '../components';\nimport { SketchStandard } from './sketch-standard';\nconst toRgba = (color) => {\n    if (color == null || typeof color !== 'object') {\n        return color;\n    }\n    const rgb = color.rgb;\n    if (rgb == null) {\n        return color.hex;\n    }\n    return `rgba(${rgb.r},${rgb.g},${rgb.b},${rgb.a})`;\n};\nconst flipOptions = {\n    fallbackAxisSideDirection: 'start'\n};\nconst DefaultOffset = [0, 10];\nconst popperStyle = css `\r\n  width: ${polished.rem(227)};\r\n`;\n/**\n *  The `ColorPicker` component provides the user the ability to choose standard colors.\n *\n * ```ts\n * import { ColorPicker } from 'jimu-ui/basic/color-picker'\n * ```\n */\nexport const ColorPicker = React.forwardRef((props, ref) => {\n    const { style, className, icon, tertiary, width, height, disabled, color, placement = 'bottom', showArrow = false, offset = DefaultOffset, popperProps, presetColors, onChange, onClick, 'aria-label': propAriaLabel, type, outline, text } = props, others = __rest(props, [\"style\", \"className\", \"icon\", \"tertiary\", \"width\", \"height\", \"disabled\", \"color\", \"placement\", \"showArrow\", \"offset\", \"popperProps\", \"presetColors\", \"onChange\", \"onClick\", 'aria-label', \"type\", \"outline\", \"text\"]);\n    const translate = hooks.useTranslation(defaultMessages);\n    let ariaLabel = propAriaLabel !== null && propAriaLabel !== void 0 ? propAriaLabel : translate('color');\n    ariaLabel = color ? `${color}, ${ariaLabel}` : ariaLabel;\n    const [showPicker, setShowPicker] = React.useState(false);\n    const ownRef = React.useRef(null);\n    const handleRef = hooks.useForkRef(ownRef, ref);\n    const handleChange = (c) => {\n        const color = toRgba(c);\n        onChange === null || onChange === void 0 ? void 0 : onChange(color);\n    };\n    const toggle = (evt) => {\n        setShowPicker(showPicker => !showPicker);\n        if ((evt === null || evt === void 0 ? void 0 : evt.key) === 'Escape') {\n            focusElementInKeyboardMode(ownRef.current);\n        }\n    };\n    const handleClick = (evt) => {\n        setShowPicker(showPicker => !showPicker);\n        onClick === null || onClick === void 0 ? void 0 : onClick(evt);\n    };\n    return (jsx(React.Fragment, null,\n        jsx(PickerBlock, { title: color, \"aria-label\": ariaLabel, style: style, className: className, ref: handleRef, color: color, icon: icon, width: width, height: height, disabled: disabled, onClick: handleClick, type: type, outline: outline, text: text, tertiary: tertiary }),\n        ownRef.current != null && (jsx(Popper, Object.assign({}, popperProps, { arrowOptions: showArrow, flipOptions: flipOptions, css: popperStyle, className: 'color-picker-popper', placement: placement, open: showPicker, offsetOptions: offset, reference: ownRef.current, toggle: toggle }),\n            jsx(SketchStandard, Object.assign({ presetColors: presetColors, color: color, onChange: handleChange }, others))))));\n});\nexport * from './sketch';\nexport * from './sketch-standard';\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, css, jsx, classNames, hooks } from 'jimu-core';\nimport { Button, defaultMessages } from 'jimu-ui';\nimport { useColorValue } from '../../utils';\nimport { Sketch } from '../../color-picker';\nimport { LeftOutlined } from 'jimu-icons/outlined/directional/left';\nimport { useTheme } from 'jimu-theme';\nconst useStyle = (theme) => {\n    var _a;\n    const black = (_a = theme === null || theme === void 0 ? void 0 : theme.ref.palette.black) !== null && _a !== void 0 ? _a : 'black';\n    return React.useMemo(() => {\n        return css `\r\n      width: 100%;\r\n\r\n      .customize-color-header {\r\n        margin-bottom: 0.5rem;\r\n        color: ${black};\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n    `;\n    }, [black]);\n};\nexport const CustomizeColor = (props) => {\n    const { className, onBack: onBackClick, onChange, value, specificTheme, onRecentChange, disableAlpha, backBtnRef } = props, others = __rest(props, [\"className\", \"onBack\", \"onChange\", \"value\", \"specificTheme\", \"onRecentChange\", \"disableAlpha\", \"backBtnRef\"]);\n    const theme = useTheme();\n    const style = useStyle(theme);\n    const translate = hooks.useTranslation(defaultMessages);\n    const color = useColorValue(value, specificTheme);\n    const initColorRef = React.useRef(value);\n    hooks.useUnmount(() => {\n        if (value !== initColorRef.current) {\n            onRecentChange === null || onRecentChange === void 0 ? void 0 : onRecentChange();\n        }\n    });\n    return (jsx(\"div\", Object.assign({ css: style, className: classNames('customize-color', className) }, others),\n        jsx(\"div\", { className: 'customize-color-header' },\n            jsx(Button, { icon: true, className: 'pl-0', title: translate('back'), \"aria-label\": translate('back'), size: 'sm', type: 'tertiary', onClick: onBackClick, ref: backBtnRef },\n                jsx(LeftOutlined, { autoFlip: true })),\n            jsx(\"span\", { className: 'text-truncate', title: translate('customColors') }, translate('customColors'))),\n        jsx(Sketch, { color: color, onChange: onChange, disableAlpha: disableAlpha })));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { css, jsx, polished } from 'jimu-core';\nimport { Button, Label, Tooltip } from 'jimu-ui';\nimport { InfoOutlined } from 'jimu-icons/outlined/suggested/info';\nimport { useTheme } from 'jimu-theme';\nconst useStyle = () => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const theme = useTheme();\n    const black = (_a = theme === null || theme === void 0 ? void 0 : theme.ref.palette.black) !== null && _a !== void 0 ? _a : 'black';\n    const size2 = (_d = (_c = (_b = theme.sys).spacing) === null || _c === void 0 ? void 0 : _c.call(_b, 2)) !== null && _d !== void 0 ? _d : polished.rem(8);\n    const size3 = (_g = (_f = (_e = theme.sys).spacing) === null || _f === void 0 ? void 0 : _f.call(_e, 4)) !== null && _g !== void 0 ? _g : polished.rem(16);\n    return css `\r\n    width: 100%;\r\n    color: ${black};\r\n    margin-bottom: ${size3};\r\n    .header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      margin-bottom: ${size2};\r\n      color: ${black};\r\n      > label {\r\n        max-width: 90%;\r\n        color: ${black};\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n    label {\r\n      margin-bottom: 0;\r\n    }\r\n  `;\n};\nexport const ThemeColorSection = (props) => {\n    const { label, tooltip, children } = props, others = __rest(props, [\"label\", \"tooltip\", \"children\"]);\n    const style = useStyle();\n    return (jsx(\"div\", Object.assign({ css: style, className: 'theme-color-section' }, others),\n        jsx(\"div\", { className: 'header' },\n            jsx(Label, { className: 'text-truncate', title: label }, label),\n            jsx(Tooltip, { title: tooltip },\n                jsx(Button, { type: 'tertiary', icon: true, size: 'sm', className: 'p-0' },\n                    \" \",\n                    jsx(InfoOutlined, null)))),\n        children));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, css, jsx, polished, classNames, hooks } from 'jimu-core';\nimport { ThemeColorSelector } from './theme-color-selector';\nimport { Button, defaultMessages } from 'jimu-ui';\nimport { ColorStrip } from '../../components';\nimport { ThemeColorSection } from './section';\nimport { useTranslateSharedOrgVariableColor } from '../../utils';\nimport { ColorMoreFilled } from 'jimu-icons/filled/application/color-more';\nimport { NoneOutlined } from 'jimu-icons/outlined/editor/none';\nimport { useTheme } from 'jimu-theme';\nconst toColorVariable = (path, subPath) => {\n    if (path == null || path === '' || subPath == null || subPath === '')\n        return;\n    return `var(--org-${path}-${subPath})`;\n};\nconst useStyle = (theme) => {\n    var _a, _b, _c, _d, _e;\n    const black = (_a = theme === null || theme === void 0 ? void 0 : theme.ref.palette.black) !== null && _a !== void 0 ? _a : 'black';\n    const size2 = (_d = (_c = (_b = theme.sys).spacing) === null || _c === void 0 ? void 0 : _c.call(_b, 2)) !== null && _d !== void 0 ? _d : polished.rem(8);\n    const light300 = (_e = theme === null || theme === void 0 ? void 0 : theme.ref.palette.neutral[400]) !== null && _e !== void 0 ? _e : '';\n    return css `\r\n    width: 100%;\r\n    color: ${black};\r\n\r\n    .more-colors {\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      .more-color,\r\n      .no-color {\r\n        max-width: 50%;\r\n      }\r\n      button {\r\n        padding-left: 0;\r\n        max-width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n    }\r\n\r\n    > .dividing-line {\r\n      height: 1px;\r\n      width: 100%;\r\n      background: ${light300};\r\n      margin-top: ${size2};\r\n    }\r\n\r\n    .icon-button-truncate {\r\n      color: ${black};\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      > button {\r\n        padding-left: 0;\r\n        max-width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        > .jimu-icon {\r\n          margin-right: ${size2};\r\n          flex-shrink: 0;\r\n          margin-left: 0;\r\n        }\r\n        > span {\r\n          max-width: 80%;\r\n        }\r\n      }\r\n    }\r\n  `;\n};\nexport const ThemeColor = (props) => {\n    var _a;\n    const { className, value, specificTheme: propSpecificTheme, showSharedColors = true, recentColors, onChange, onCustomizeClick, presetColors, disableReset = false, customizeBtnRef, newThemeFeatures = false } = props, others = __rest(props, [\"className\", \"value\", \"specificTheme\", \"showSharedColors\", \"recentColors\", \"onChange\", \"onCustomizeClick\", \"presetColors\", \"disableReset\", \"customizeBtnRef\", \"newThemeFeatures\"]);\n    const theme = useTheme();\n    const style = useStyle(theme);\n    const specificTheme = propSpecificTheme !== null && propSpecificTheme !== void 0 ? propSpecificTheme : theme;\n    const specificThemeAllCoors = specificTheme === null || specificTheme === void 0 ? void 0 : specificTheme.colors;\n    const translategetSharedOrgVariableColor = useTranslateSharedOrgVariableColor();\n    const sharedThemeColors = React.useMemo(() => {\n        var _a, _b;\n        const sharedColors = (_b = (_a = specificTheme === null || specificTheme === void 0 ? void 0 : specificTheme.colors) === null || _a === void 0 ? void 0 : _a.orgSharedColors) !== null && _b !== void 0 ? _b : {};\n        const colorItems = [];\n        Object.keys(sharedColors).forEach(path => {\n            const firstValue = sharedColors[path];\n            Object.keys(firstValue).forEach(subPath => {\n                const color = firstValue[subPath];\n                const value = toColorVariable(path, subPath);\n                const label = `${color}, ${translategetSharedOrgVariableColor(`org-${path}-${subPath}`)}`;\n                colorItems.push({ label, value, color });\n            });\n        });\n        return colorItems;\n    }, [specificTheme === null || specificTheme === void 0 ? void 0 : specificTheme.colors, translategetSharedOrgVariableColor]);\n    const translate = hooks.useTranslation(defaultMessages);\n    const handleNoColorClick = () => {\n        onChange === null || onChange === void 0 ? void 0 : onChange('');\n    };\n    return (jsx(\"div\", Object.assign({ css: style, className: classNames('theme-color', className) }, others),\n        jsx(ThemeColorSection, { label: translate('themeColor'), tooltip: translate('themeColorTip') },\n            jsx(ThemeColorSelector, { value: value, \"aria-label\": translate('themeColor'), colors: specificThemeAllCoors, palette: (_a = specificTheme.ref) === null || _a === void 0 ? void 0 : _a.palette, newThemeFeatures: newThemeFeatures, onChange: onChange })),\n        showSharedColors && sharedThemeColors.length > 0 && (jsx(ThemeColorSection, { label: translate('orgColors'), tooltip: translate('sharedThemeColorTip') },\n            jsx(ColorStrip, { \"aria-label\": translate('orgColors'), color: value, onChange: onChange, colors: sharedThemeColors }))),\n        jsx(ThemeColorSection, { label: translate('standardColor'), tooltip: translate('standardColorTip') },\n            jsx(ColorStrip, { color: value, \"aria-label\": translate('standardColor'), onChange: onChange, colors: presetColors })),\n        (recentColors === null || recentColors === void 0 ? void 0 : recentColors.length) > 0 && (jsx(ThemeColorSection, { label: translate('recentColor'), tooltip: translate('recentColorTip') },\n            jsx(ColorStrip, { \"aria-label\": translate('recentColor'), color: value, onChange: onChange, colors: recentColors }))),\n        jsx(\"div\", { className: 'dividing-line' }),\n        jsx(\"div\", { className: 'more-colors' },\n            jsx(\"div\", { className: 'more-color icon-button-truncate' },\n                jsx(Button, { size: 'sm', type: 'link', onClick: onCustomizeClick, ref: customizeBtnRef },\n                    jsx(ColorMoreFilled, { currentColor: false }),\n                    jsx(\"span\", { className: 'text-truncate', title: translate('more') }, translate('more')))),\n            !disableReset && jsx(\"div\", { className: 'no-color icon-button-truncate' },\n                jsx(Button, { size: 'sm', type: 'tertiary', onClick: handleNoColorClick },\n                    jsx(NoneOutlined, null),\n                    jsx(\"span\", { className: 'text-truncate', title: translate('reset') }, translate('reset')))))));\n};\n"],"names":[],"sourceRoot":""}