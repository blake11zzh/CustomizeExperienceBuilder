(self.webpackChunkarcgis_experience_builder_design_system=self.webpackChunkarcgis_experience_builder_design_system||[]).push([[6448],{"../jimu-icons/filled/directional/down.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$:()=>DownFilled});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_svg_filled_directional_down_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-icons/svg/filled/directional/down.svg"),_svg_filled_directional_down_svg__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_svg_filled_directional_down_svg__WEBPACK_IMPORTED_MODULE_1__),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const DownFilled=props=>{const SVG=window.SVG,{className}=props,others=__rest(props,["className"]),classes=(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.xWm)("jimu-icon jimu-icon-component",className);return SVG?jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(SVG,Object.assign({className:classes,src:_svg_filled_directional_down_svg__WEBPACK_IMPORTED_MODULE_1___default()},others)):jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("svg",Object.assign({className:classes},others))};try{DownFilled.displayName="DownFilled",DownFilled.__docgenInfo={description:"",displayName:"DownFilled",props:{children:{defaultValue:null,description:"The fallback content in case of a fetch error or unsupported browser.",name:"children",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"The title of the component.",name:"title",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Defines the styles added to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"Defines the class names added to the component.",name:"className",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"To provide a role for this component.\nIt is for accessibility purposes.",name:"role",required:!1,type:{name:"AriaRole"}},"aria-hidden":{defaultValue:{value:"false"},description:"Indicates whether the element is exposed to an accessibility API.",name:"aria-hidden",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.",name:"aria-label",required:!1,type:{name:"string"}},size:{defaultValue:{value:"m"},description:"Defines the size, both width and height, of the icon.",name:"size",required:!1,type:{name:"string | number"}},loader:{defaultValue:null,description:"A component to be shown while the SVG is loading.",name:"loader",required:!1,type:{name:"ReactNode"}},isRTL:{defaultValue:null,description:"Whether it is in the RTL.\nNote: The default value is read from `getAppStore().getState().appContext?.isRTL` and is provided for use in testing and storybook environments.\n@ignore",name:"isRTL",required:!1,type:{name:"boolean"}},autoFlip:{defaultValue:{value:"false"},description:"Flips the SVG automatically for RTL.",name:"autoFlip",required:!1,type:{name:"boolean"}},currentColor:{defaultValue:{value:"true"},description:"If set to `true`, the `stroke` and `fill` properties on the child elements will be replaced with `currentColor`, in order to make `color` property effective.",name:"currentColor",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-icons/filled/directional/down.tsx#DownFilled"]={docgenInfo:DownFilled.__docgenInfo,name:"DownFilled",path:"../jimu-icons/filled/directional/down.tsx#DownFilled"})}catch(__react_docgen_typescript_loader_error){}},"../jimu-icons/filled/directional/left.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{M:()=>LeftFilled});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_svg_filled_directional_left_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-icons/svg/filled/directional/left.svg"),_svg_filled_directional_left_svg__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_svg_filled_directional_left_svg__WEBPACK_IMPORTED_MODULE_1__),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const LeftFilled=props=>{const SVG=window.SVG,{className}=props,others=__rest(props,["className"]),classes=(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.xWm)("jimu-icon jimu-icon-component",className);return SVG?jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(SVG,Object.assign({className:classes,src:_svg_filled_directional_left_svg__WEBPACK_IMPORTED_MODULE_1___default()},others)):jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("svg",Object.assign({className:classes},others))};try{LeftFilled.displayName="LeftFilled",LeftFilled.__docgenInfo={description:"",displayName:"LeftFilled",props:{children:{defaultValue:null,description:"The fallback content in case of a fetch error or unsupported browser.",name:"children",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"The title of the component.",name:"title",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Defines the styles added to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"Defines the class names added to the component.",name:"className",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"To provide a role for this component.\nIt is for accessibility purposes.",name:"role",required:!1,type:{name:"AriaRole"}},"aria-hidden":{defaultValue:{value:"false"},description:"Indicates whether the element is exposed to an accessibility API.",name:"aria-hidden",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.",name:"aria-label",required:!1,type:{name:"string"}},size:{defaultValue:{value:"m"},description:"Defines the size, both width and height, of the icon.",name:"size",required:!1,type:{name:"string | number"}},loader:{defaultValue:null,description:"A component to be shown while the SVG is loading.",name:"loader",required:!1,type:{name:"ReactNode"}},isRTL:{defaultValue:null,description:"Whether it is in the RTL.\nNote: The default value is read from `getAppStore().getState().appContext?.isRTL` and is provided for use in testing and storybook environments.\n@ignore",name:"isRTL",required:!1,type:{name:"boolean"}},autoFlip:{defaultValue:{value:"false"},description:"Flips the SVG automatically for RTL.",name:"autoFlip",required:!1,type:{name:"boolean"}},currentColor:{defaultValue:{value:"true"},description:"If set to `true`, the `stroke` and `fill` properties on the child elements will be replaced with `currentColor`, in order to make `color` property effective.",name:"currentColor",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-icons/filled/directional/left.tsx#LeftFilled"]={docgenInfo:LeftFilled.__docgenInfo,name:"LeftFilled",path:"../jimu-icons/filled/directional/left.tsx#LeftFilled"})}catch(__react_docgen_typescript_loader_error){}},"../jimu-icons/filled/directional/right.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{B:()=>RightFilled});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_svg_filled_directional_right_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-icons/svg/filled/directional/right.svg"),_svg_filled_directional_right_svg__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_svg_filled_directional_right_svg__WEBPACK_IMPORTED_MODULE_1__),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const RightFilled=props=>{const SVG=window.SVG,{className}=props,others=__rest(props,["className"]),classes=(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.xWm)("jimu-icon jimu-icon-component",className);return SVG?jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(SVG,Object.assign({className:classes,src:_svg_filled_directional_right_svg__WEBPACK_IMPORTED_MODULE_1___default()},others)):jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("svg",Object.assign({className:classes},others))};try{RightFilled.displayName="RightFilled",RightFilled.__docgenInfo={description:"",displayName:"RightFilled",props:{children:{defaultValue:null,description:"The fallback content in case of a fetch error or unsupported browser.",name:"children",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"The title of the component.",name:"title",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Defines the styles added to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"Defines the class names added to the component.",name:"className",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"To provide a role for this component.\nIt is for accessibility purposes.",name:"role",required:!1,type:{name:"AriaRole"}},"aria-hidden":{defaultValue:{value:"false"},description:"Indicates whether the element is exposed to an accessibility API.",name:"aria-hidden",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.",name:"aria-label",required:!1,type:{name:"string"}},size:{defaultValue:{value:"m"},description:"Defines the size, both width and height, of the icon.",name:"size",required:!1,type:{name:"string | number"}},loader:{defaultValue:null,description:"A component to be shown while the SVG is loading.",name:"loader",required:!1,type:{name:"ReactNode"}},isRTL:{defaultValue:null,description:"Whether it is in the RTL.\nNote: The default value is read from `getAppStore().getState().appContext?.isRTL` and is provided for use in testing and storybook environments.\n@ignore",name:"isRTL",required:!1,type:{name:"boolean"}},autoFlip:{defaultValue:{value:"false"},description:"Flips the SVG automatically for RTL.",name:"autoFlip",required:!1,type:{name:"boolean"}},currentColor:{defaultValue:{value:"true"},description:"If set to `true`, the `stroke` and `fill` properties on the child elements will be replaced with `currentColor`, in order to make `color` property effective.",name:"currentColor",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-icons/filled/directional/right.tsx#RightFilled"]={docgenInfo:RightFilled.__docgenInfo,name:"RightFilled",path:"../jimu-icons/filled/directional/right.tsx#RightFilled"})}catch(__react_docgen_typescript_loader_error){}},"../jimu-icons/outlined/editor/minus-circle.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{j:()=>MinusCircleOutlined});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-icons/svg/outlined/editor/minus-circle.svg"),_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_1__),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const MinusCircleOutlined=props=>{const SVG=window.SVG,{className}=props,others=__rest(props,["className"]),classes=(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.xWm)("jimu-icon jimu-icon-component",className);return SVG?jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(SVG,Object.assign({className:classes,src:_svg_outlined_editor_minus_circle_svg__WEBPACK_IMPORTED_MODULE_1___default()},others)):jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("svg",Object.assign({className:classes},others))};try{MinusCircleOutlined.displayName="MinusCircleOutlined",MinusCircleOutlined.__docgenInfo={description:"",displayName:"MinusCircleOutlined",props:{children:{defaultValue:null,description:"The fallback content in case of a fetch error or unsupported browser.",name:"children",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"The title of the component.",name:"title",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Defines the styles added to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"Defines the class names added to the component.",name:"className",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"To provide a role for this component.\nIt is for accessibility purposes.",name:"role",required:!1,type:{name:"AriaRole"}},"aria-hidden":{defaultValue:{value:"false"},description:"Indicates whether the element is exposed to an accessibility API.",name:"aria-hidden",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.",name:"aria-label",required:!1,type:{name:"string"}},size:{defaultValue:{value:"m"},description:"Defines the size, both width and height, of the icon.",name:"size",required:!1,type:{name:"string | number"}},loader:{defaultValue:null,description:"A component to be shown while the SVG is loading.",name:"loader",required:!1,type:{name:"ReactNode"}},isRTL:{defaultValue:null,description:"Whether it is in the RTL.\nNote: The default value is read from `getAppStore().getState().appContext?.isRTL` and is provided for use in testing and storybook environments.\n@ignore",name:"isRTL",required:!1,type:{name:"boolean"}},autoFlip:{defaultValue:{value:"false"},description:"Flips the SVG automatically for RTL.",name:"autoFlip",required:!1,type:{name:"boolean"}},currentColor:{defaultValue:{value:"true"},description:"If set to `true`, the `stroke` and `fill` properties on the child elements will be replaced with `currentColor`, in order to make `color` property effective.",name:"currentColor",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-icons/outlined/editor/minus-circle.tsx#MinusCircleOutlined"]={docgenInfo:MinusCircleOutlined.__docgenInfo,name:"MinusCircleOutlined",path:"../jimu-icons/outlined/editor/minus-circle.tsx#MinusCircleOutlined"})}catch(__react_docgen_typescript_loader_error){}},"../jimu-icons/outlined/editor/plus-circle.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{z:()=>PlusCircleOutlined});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-icons/svg/outlined/editor/plus-circle.svg"),_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_1__),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const PlusCircleOutlined=props=>{const SVG=window.SVG,{className}=props,others=__rest(props,["className"]),classes=(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.xWm)("jimu-icon jimu-icon-component",className);return SVG?jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(SVG,Object.assign({className:classes,src:_svg_outlined_editor_plus_circle_svg__WEBPACK_IMPORTED_MODULE_1___default()},others)):jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("svg",Object.assign({className:classes},others))};try{PlusCircleOutlined.displayName="PlusCircleOutlined",PlusCircleOutlined.__docgenInfo={description:"",displayName:"PlusCircleOutlined",props:{children:{defaultValue:null,description:"The fallback content in case of a fetch error or unsupported browser.",name:"children",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"The title of the component.",name:"title",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Defines the styles added to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"Defines the class names added to the component.",name:"className",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"To provide a role for this component.\nIt is for accessibility purposes.",name:"role",required:!1,type:{name:"AriaRole"}},"aria-hidden":{defaultValue:{value:"false"},description:"Indicates whether the element is exposed to an accessibility API.",name:"aria-hidden",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.",name:"aria-label",required:!1,type:{name:"string"}},size:{defaultValue:{value:"m"},description:"Defines the size, both width and height, of the icon.",name:"size",required:!1,type:{name:"string | number"}},loader:{defaultValue:null,description:"A component to be shown while the SVG is loading.",name:"loader",required:!1,type:{name:"ReactNode"}},isRTL:{defaultValue:null,description:"Whether it is in the RTL.\nNote: The default value is read from `getAppStore().getState().appContext?.isRTL` and is provided for use in testing and storybook environments.\n@ignore",name:"isRTL",required:!1,type:{name:"boolean"}},autoFlip:{defaultValue:{value:"false"},description:"Flips the SVG automatically for RTL.",name:"autoFlip",required:!1,type:{name:"boolean"}},currentColor:{defaultValue:{value:"true"},description:"If set to `true`, the `stroke` and `fill` properties on the child elements will be replaced with `currentColor`, in order to make `color` property effective.",name:"currentColor",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-icons/outlined/editor/plus-circle.tsx#PlusCircleOutlined"]={docgenInfo:PlusCircleOutlined.__docgenInfo,name:"PlusCircleOutlined",path:"../jimu-icons/outlined/editor/plus-circle.tsx#PlusCircleOutlined"})}catch(__react_docgen_typescript_loader_error){}},"../jimu-icons/svg/filled/directional/left.svg":module=>{module.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16"><path fill="#000" d="M12 14 4 8l8-6z"></path></svg>'},"../jimu-ui/basic/lib/list-tree/assets/icons/drag-16.svg":module=>{module.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 4 16"><path fill="#000" d="M3 1H1v2h2zM3 5H1v2h2zM1 9h2v2H1zM3 13H1v2h2z"></path></svg>'},"../jimu-ui/basic/list-tree.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{B8:()=>list_List,PH:()=>list_tree_tree_Tree,Q4:()=>TreeAlignmentType,Lw:()=>TreeCollapseStyle,M5:()=>TreeItemActionType,eD:()=>TreeStyle});var TreeStyle,TreeAlignmentType,TreeCollapseStyle,tree_types_TreeSelectionStyle,TreeActionType,TreeMainActionType,TreeItemActionType,jimu_core=__webpack_require__("../jimu-core/index.tsx");!function(TreeStyle){TreeStyle.Basic="BASIC",TreeStyle.Card="CARD"}(TreeStyle||(TreeStyle={})),function(TreeAlignmentType){TreeAlignmentType.Typical="TYPICAL",TreeAlignmentType.Intact="INTACT"}(TreeAlignmentType||(TreeAlignmentType={})),function(TreeCollapseStyle){TreeCollapseStyle.PlusMinus="PLUS_MINUS",TreeCollapseStyle.Arrow="ARROW"}(TreeCollapseStyle||(TreeCollapseStyle={})),function(TreeSelectionStyle){TreeSelectionStyle.HighlightMark="HIGHLIGHT_MARK",TreeSelectionStyle.CheckSelection="CHECK_SELECTION",TreeSelectionStyle.BoxSelection="BOX_SELECTION",TreeSelectionStyle.CheckboxSelection="CHECKBOX_SELECTION"}(tree_types_TreeSelectionStyle||(tree_types_TreeSelectionStyle={})),function(TreeActionType){TreeActionType.RenderOverride="renderOverride"}(TreeActionType||(TreeActionType={})),function(TreeMainActionType){TreeMainActionType.RenderOverrideMain="renderOverrideMain"}(TreeMainActionType||(TreeMainActionType={})),function(TreeItemActionType){TreeItemActionType.RenderOverrideItemChildrenToggle="renderOverrideItemChildrenToggle",TreeItemActionType.RenderOverrideItemDragHandle="renderOverrideItemDragHandle",TreeItemActionType.RenderOverrideItemDetailToggle="renderOverrideItemDetailToggle",TreeItemActionType.RenderOverrideItemIcon="renderOverrideItemIcon",TreeItemActionType.RenderOverrideItemTitle="renderOverrideItemTitle",TreeItemActionType.RenderOverrideItemCommands="renderOverrideItemCommands",TreeItemActionType.RenderOverrideItemDraggableContainer="renderOverrideItemDraggableContainer",TreeItemActionType.RenderOverrideItemMainLine="renderOverrideItemMainLine",TreeItemActionType.RenderOverrideItemDetailLine="renderOverrideItemDetailLine",TreeItemActionType.RenderOverrideItemBody="renderOverrideItemBody",TreeItemActionType.RenderOverrideItemContent="renderOverrideItemContent",TreeItemActionType.RenderOverrideItemDroppableContainer="renderOverrideItemDroppableContainer",TreeItemActionType.RenderOverrideItemSubitems="renderOverrideItemSubitems",TreeItemActionType.RenderOverrideItem="renderOverrideItem",TreeItemActionType.OverrideItemBlockInfo="overrideItemBlockInfo",TreeItemActionType.HandleInitTreeItemDndDropZone="handleInitTreeItemDndDropZone",TreeItemActionType.HandleInitTreeItemDndDrag="handleInitTreeItemDndDrag",TreeItemActionType.HandleDidDrop="handleDidDrop",TreeItemActionType.HandleDisabledItemRemoved="handleDisabledItemRemoved",TreeItemActionType.HandleToggleDetail="handleToggleDetail",TreeItemActionType.HandleExpandItem="handleExpandItem",TreeItemActionType.HandleEditingTextChange="handleEditingTextChange",TreeItemActionType.HandleExitEditing="handleExitEditing",TreeItemActionType.HandleStartEditing="handleStartEditing",TreeItemActionType.HandleCheckboxChanged="handleCheckboxChanged",TreeItemActionType.HandleFindSearchText="handleFindSearchText",TreeItemActionType.IsItemDisplayable="isItemDisplayable",TreeItemActionType.IsItemFocused="isItemFocused",TreeItemActionType.HandleClickItemBody="handleClickItemBody",TreeItemActionType.HandleClickItemTitle="handleClickItemTitle",TreeItemActionType.HandleDoubleClickItemTitle="handleDoubleClickItemTitle",TreeItemActionType.HandleUpdateItem="handleUpdateItem",TreeItemActionType.GetDragItemJsons="getDragItemJsons",TreeItemActionType.SetDragItemJsons="setDragItemJsons",TreeItemActionType.IsItemDroppable="isItemDroppable",TreeItemActionType.IsFolder="isFolder",TreeItemActionType.OnToggleDetail="onToggleDetail",TreeItemActionType.OnExpandItem="onExpandItem",TreeItemActionType.OnEditingTextChange="onEditingTextChange",TreeItemActionType.OnExitEditing="onExitEditing",TreeItemActionType.OnDidDrop="onDidDrop",TreeItemActionType.OnClickItemBody="onClickItemBody",TreeItemActionType.OnDoubleClickItemTitle="onDoubleClickItemTitle",TreeItemActionType.OnClickItemCommand="onClickItemCommand",TreeItemActionType.OnUpdateItem="onUpdateItem"}(TreeItemActionType||(TreeItemActionType={}));try{tree_types_TreeSelectionStyle.displayName="TreeSelectionStyle",tree_types_TreeSelectionStyle.__docgenInfo={description:"Only used inside component.",displayName:"TreeSelectionStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle"]={docgenInfo:tree_types_TreeSelectionStyle.__docgenInfo,name:"TreeSelectionStyle",path:"../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle"})}catch(__react_docgen_typescript_loader_error){}try{HighlightMark.displayName="TreeSelectionStyle.HighlightMark",HighlightMark.__docgenInfo={description:"Only for List component & single",displayName:"TreeSelectionStyle.HighlightMark",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle.HighlightMark"]={docgenInfo:tree_types_TreeSelectionStyle.HighlightMark.__docgenInfo,name:"TreeSelectionStyle.HighlightMark",path:"../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle.HighlightMark"})}catch(__react_docgen_typescript_loader_error){}try{CheckSelection.displayName="TreeSelectionStyle.CheckSelection",CheckSelection.__docgenInfo={description:"Two styles for Tree component\nCheck: for Default style\nBox: for Card style",displayName:"TreeSelectionStyle.CheckSelection",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle.CheckSelection"]={docgenInfo:tree_types_TreeSelectionStyle.CheckSelection.__docgenInfo,name:"TreeSelectionStyle.CheckSelection",path:"../jimu-ui/basic/lib/list-tree/common/tree-types.tsx#TreeSelectionStyle.CheckSelection"})}catch(__react_docgen_typescript_loader_error){}const defaultOptions={},getCheckProgress=(treeItem,options=defaultOptions)=>{const{getItemChildren=([treeItem])=>treeItem.itemChildren,getItemStateChecked=([treeItem])=>treeItem.itemStateChecked}=options,itemChildren=getItemChildren([treeItem]),itemStateChecked=getItemStateChecked([treeItem]);if(!itemChildren)return!!itemStateChecked;const checkedSubtreeItemNum=itemChildren.reduce(((a,b)=>a+(!0===getItemStateChecked([b]))),0);return!!checkedSubtreeItemNum&&(checkedSubtreeItemNum===itemChildren.length||checkedSubtreeItemNum)},getItemChildren=itemJsons=>{const[currentItemJson]=itemJsons;return currentItemJson.itemChildren},handleAction=(actionKey,actionData,refComponent)=>{var _a,_b;if(!refComponent)return;const[currentItemJson]=refComponent.props.itemJsons||[];return"function"==typeof(null==currentItemJson?void 0:currentItemJson[actionKey])?currentItemJson[actionKey](actionData,refComponent):null===(_b=(_a=refComponent.props)[actionKey])||void 0===_b?void 0:_b.call(_a,actionData,refComponent)};function shouldHandleKeyEvent(evt){return!["INPUT","TEXTAREA"].includes(evt.target.tagName)&&("Enter"===evt.key||" "===evt.key)}const getInvisibleActionMap=treeItemActions=>{if(!treeItemActions||0===treeItemActions.length)return;const removingActionMap={};return treeItemActions.forEach((type=>{removingActionMap[type]=()=>null})),removingActionMap},getPathOfItemJsons=itemJsons=>itemJsons.reduceRight(((result,item,x)=>x<1?result:[...result,Object.entries(getItemChildren(itemJsons.slice(x))).find((([k,v])=>v===itemJsons[x-1]))[0]]),[]),getActionDataByChangeJson=(isTree,actionData)=>{const{itemJsons,currentItemJson,changeItemJson}=actionData;let nextItemJsons;if(isTree){const itemPath=getPathOfItemJsons(itemJsons).map((i=>["itemChildren",i])).flat();nextItemJsons=Object.entries(changeItemJson).reduce(((result,[k,v])=>result.setIn([...itemPath,k],v)),(0,jimu_core.J3Z)(itemJsons[itemJsons.length-1])),actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[currentItemJson,nextItemJsons])}else if(itemJsons.length>1){const index=itemJsons[1].indexOf(currentItemJson);nextItemJsons=Object.entries(changeItemJson).reduce(((result,[k,v])=>result.setIn([index,k],v)),(0,jimu_core.J3Z)(itemJsons[1])),actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[currentItemJson,nextItemJsons])}else nextItemJsons=[Object.assign(currentItemJson,actionData.changeItemJson)],actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[currentItemJson]);return actionData.asMutable({deep:!0})},getActionDataByCBXActionData=(isTree,actionData)=>{const{itemJsons,currentItemJson,changeItemJson}=actionData;let nextItemJsons;if(isTree){const changedStates=Object.assign(changeItemJson,{indeterminate:!1}),itemPath=getPathOfItemJsons(itemJsons).map((i=>["itemChildren",i])).flat();let newItem=(0,jimu_core.J3Z)(currentItemJson).set("itemStateChecked",changedStates.itemStateChecked).set("indeterminate",!1);newItem=updateStatesForChildren(newItem,changedStates),nextItemJsons=(0,jimu_core.J3Z)(itemJsons[itemJsons.length-1]).setIn([...itemPath],newItem);nextItemJsons=updateStatesForParents(nextItemJsons,itemPath.slice(0,itemPath.length-2),changeItemJson.itemStateChecked),actionData=(actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[newItem,nextItemJsons])).asMutable({deep:!0})}else itemJsons.length>1&&(actionData=getActionDataByChangeJson(!1,actionData));return actionData},getActionDataByRadioActionData=(isTree,isMultiSelection,actionData)=>{const{itemJsons,currentItemJson,changeItemJson}=actionData;let nextItemJsons;if(isTree){const changedStates=Object.assign(changeItemJson,{indeterminate:!1}),itemPath=getPathOfItemJsons(itemJsons).map((i=>["itemChildren",i])).flat();let newItem;isMultiSelection?(newItem=(0,jimu_core.J3Z)(currentItemJson).set("itemStateChecked",changedStates.itemStateChecked).set("indeterminate",!1),nextItemJsons=itemJsons[itemJsons.length-1]):(newItem=updateStatesForItems(currentItemJson),newItem=(0,jimu_core.J3Z)(newItem).set("itemStateChecked",changedStates.itemStateChecked).set("indeterminate",!1),nextItemJsons=updateStatesForItems(itemJsons[itemJsons.length-1])),nextItemJsons=(0,jimu_core.J3Z)(nextItemJsons).setIn([...itemPath],newItem),actionData=(actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[newItem,nextItemJsons])).asMutable({deep:!0})}else if(itemJsons.length>1){const index=itemJsons[1].indexOf(currentItemJson);nextItemJsons=itemJsons[1].map(((item,_index)=>{const itemStateChecked=index===_index&&changeItemJson.itemStateChecked;return Object.assign({},item,{itemStateChecked})})),actionData=jimu_core.J3Z.setIn(actionData,["itemJsons"],[currentItemJson,nextItemJsons])}return actionData};function updateStatesForItems(data){var _a;return(null===(_a=data.itemChildren)||void 0===_a?void 0:_a.length)>0&&(data.itemChildren=data.itemChildren.map((d=>(d.itemStateChecked=!1,delete d.indeterminate,updateStatesForItems(d))))),data}function updateStatesForChildren(data,changedStates){var _a;return(null===(_a=data.itemChildren)||void 0===_a?void 0:_a.length)>0&&(data=data.set("itemChildren",data.itemChildren.map((d=>{var _a;return updateStatesForChildren(d=d.set("itemStateChecked",!d.isCheckboxDisabled&&(!d.itemStateDisabled&&(null===(_a=d.isItemSelectable)||void 0===_a||_a)&&changedStates.itemStateChecked)).set("indeterminate",!1),changedStates)})))),data}function updateStatesForParents(data,itemPath,isChecked,minus=!1){const path=minus?itemPath.slice(0,itemPath.length-2):itemPath;if(0===path.length)return data;let parent=data.getIn([...path],data);const indeterminate=parent.itemChildren.some((d=>d.indeterminate||!d.isCheckboxDisabled&&(!d.itemStateDisabled&&d.itemStateChecked!==isChecked))),_isChecked=isChecked&&!indeterminate;return parent=parent.set("itemStateChecked",_isChecked).set("indeterminate",indeterminate),updateStatesForParents(data=data.setIn([...path],parent),path,_isChecked,!0)}function getItemJsonsWithCheckState(actionData,refComponent){var _a;const{dragItemParentChildren,dragItemJsons,dragItemJson,itemJsons,targetDropItemJsons}=actionData;let nextItemJsons;if(refComponent.props.isMultiSelection){const onlyOneChild=0===dragItemParentChildren.length&&(dragItemJson.itemStateChecked||dragItemJson.indeterminate);if(dragItemJsons[1].indeterminate||onlyOneChild){if(!dragItemParentChildren.some((d=>d.itemStateChecked===dragItemJson.itemStateChecked&&d.indeterminate===dragItemJson.indeterminate))){let indeterminate=dragItemParentChildren.filter((d=>d.indeterminate)).length>0,isChecked=!1;if(dragItemParentChildren.length>0&&!indeterminate){let checkedLength=0,uncheckedLength=0;dragItemParentChildren.forEach((d=>{d.itemStateChecked?checkedLength++:uncheckedLength++})),indeterminate=checkedLength>0&&uncheckedLength>0,isChecked=checkedLength>0&&0===uncheckedLength}if(!indeterminate){const pathJson=dragItemJsons.slice(1,dragItemJsons.length),itemPath=getPathOfItemJsons(pathJson).map((i=>["itemChildren",i])).flat();nextItemJsons=updateStatesForParents((0,jimu_core.J3Z)(itemJsons[itemJsons.length-1]),itemPath,isChecked)}}}if(!targetDropItemJsons[0].indeterminate&&targetDropItemJsons[0].itemStateChecked!==dragItemJson.itemStateChecked){const itemPath=getPathOfItemJsons(targetDropItemJsons).map((i=>["itemChildren",i])).flat();nextItemJsons=nextItemJsons||itemJsons[itemJsons.length-1],nextItemJsons=0!==itemPath.length||(null===(_a=dragItemJson.itemChildren)||void 0===_a?void 0:_a.length)>0?updateStatesForParents((0,jimu_core.J3Z)(nextItemJsons),itemPath,dragItemJson.itemStateChecked):(0,jimu_core.J3Z)(nextItemJsons)}}return null==nextItemJsons?void 0:nextItemJsons.asMutable({deep:!0})}function tree_utils_showCheckbox(isTree,isMultiSelection,checkboxLinkage){return isMultiSelection&&(!isTree||checkboxLinkage)}function getSelectionStyle(isTree,isMultiSelection,treeStyle,checkboxLinkage){let style=null;return isTree?(style=treeStyle===TreeStyle.Card?tree_types_TreeSelectionStyle.BoxSelection:tree_types_TreeSelectionStyle.CheckSelection,isMultiSelection&&checkboxLinkage&&(style=tree_types_TreeSelectionStyle.CheckboxSelection)):(style=treeStyle===TreeStyle.Card?tree_types_TreeSelectionStyle.HighlightMark:tree_types_TreeSelectionStyle.CheckSelection,isMultiSelection&&(style=tree_types_TreeSelectionStyle.CheckboxSelection)),style}function isTitleEditing(evt){return Array.prototype.slice.call(evt.target.querySelectorAll('input[type="text"]','input[type="number"]')).filter((input=>"true"!==input.getAttribute("data-draggable"))).length}try{shouldHandleKeyEvent.displayName="shouldHandleKeyEvent",shouldHandleKeyEvent.__docgenInfo={description:"",displayName:"shouldHandleKeyEvent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#shouldHandleKeyEvent"]={docgenInfo:shouldHandleKeyEvent.__docgenInfo,name:"shouldHandleKeyEvent",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#shouldHandleKeyEvent"})}catch(__react_docgen_typescript_loader_error){}try{getItemJsonsWithCheckState.displayName="getItemJsonsWithCheckState",getItemJsonsWithCheckState.__docgenInfo={description:"return rootItemJson with updated check sates.\nTwo states: Checkbox, Indeterminate\nFor removedItem's parents and newAddedItem's parents",displayName:"getItemJsonsWithCheckState",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getItemJsonsWithCheckState"]={docgenInfo:getItemJsonsWithCheckState.__docgenInfo,name:"getItemJsonsWithCheckState",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getItemJsonsWithCheckState"})}catch(__react_docgen_typescript_loader_error){}try{tree_utils_showCheckbox.displayName="showCheckbox",tree_utils_showCheckbox.__docgenInfo={description:"Whether to display checkbox for each item.",displayName:"showCheckbox",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#showCheckbox"]={docgenInfo:tree_utils_showCheckbox.__docgenInfo,name:"showCheckbox",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#showCheckbox"})}catch(__react_docgen_typescript_loader_error){}try{getSelectionStyle.displayName="getSelectionStyle",getSelectionStyle.__docgenInfo={description:"Get selection style",displayName:"getSelectionStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getSelectionStyle"]={docgenInfo:getSelectionStyle.__docgenInfo,name:"getSelectionStyle",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getSelectionStyle"})}catch(__react_docgen_typescript_loader_error){}try{isTitleEditing.displayName="isTitleEditing",isTitleEditing.__docgenInfo={description:"",displayName:"isTitleEditing",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#isTitleEditing"]={docgenInfo:isTitleEditing.__docgenInfo,name:"isTitleEditing",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#isTitleEditing"})}catch(__react_docgen_typescript_loader_error){}try{getCheckProgress.displayName="getCheckProgress",getCheckProgress.__docgenInfo={description:"Check if or how many children items are checked\n- if the item has children\n  - returns true if all children items are checked\n  - returns false if no children items are checked\n  - returns the count of checked items if only certain children items are checked\n- if the item has no children\n  - returns the item's own check state(itemStateChecked)",displayName:"getCheckProgress",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getCheckProgress"]={docgenInfo:getCheckProgress.__docgenInfo,name:"getCheckProgress",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getCheckProgress"})}catch(__react_docgen_typescript_loader_error){}try{getItemChildren.displayName="getItemChildren",getItemChildren.__docgenInfo={description:"Get the child items of another tree/list item",displayName:"getItemChildren",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getItemChildren"]={docgenInfo:getItemChildren.__docgenInfo,name:"getItemChildren",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getItemChildren"})}catch(__react_docgen_typescript_loader_error){}try{handleAction.displayName="handleAction",handleAction.__docgenInfo={description:"a util function to execute the corresponding callback function of the action",displayName:"handleAction",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#handleAction"]={docgenInfo:handleAction.__docgenInfo,name:"handleAction",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#handleAction"})}catch(__react_docgen_typescript_loader_error){}try{getInvisibleActionMap.displayName="getInvisibleActionMap",getInvisibleActionMap.__docgenInfo={description:"a util function to get all invisible actions",displayName:"getInvisibleActionMap",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getInvisibleActionMap"]={docgenInfo:getInvisibleActionMap.__docgenInfo,name:"getInvisibleActionMap",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getInvisibleActionMap"})}catch(__react_docgen_typescript_loader_error){}try{getPathOfItemJsons.displayName="getPathOfItemJsons",getPathOfItemJsons.__docgenInfo={description:"",displayName:"getPathOfItemJsons",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getPathOfItemJsons"]={docgenInfo:getPathOfItemJsons.__docgenInfo,name:"getPathOfItemJsons",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getPathOfItemJsons"})}catch(__react_docgen_typescript_loader_error){}try{getActionDataByChangeJson.displayName="getActionDataByChangeJson",getActionDataByChangeJson.__docgenInfo={description:"get actionData by changeItemJson",displayName:"getActionDataByChangeJson",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getActionDataByChangeJson"]={docgenInfo:getActionDataByChangeJson.__docgenInfo,name:"getActionDataByChangeJson",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getActionDataByChangeJson"})}catch(__react_docgen_typescript_loader_error){}try{getActionDataByCBXActionData.displayName="getActionDataByCBXActionData",getActionDataByCBXActionData.__docgenInfo={description:"get actionData by checkbox changed",displayName:"getActionDataByCBXActionData",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getActionDataByCBXActionData"]={docgenInfo:getActionDataByCBXActionData.__docgenInfo,name:"getActionDataByCBXActionData",path:"../jimu-ui/basic/lib/list-tree/common/tree-utils.tsx#getActionDataByCBXActionData"})}catch(__react_docgen_typescript_loader_error){}var jimu_theme=__webpack_require__("../jimu-theme/index.ts"),jimu_ui=__webpack_require__("../jimu-ui/index.tsx"),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const TreeButton=jimu_core.q_G.forwardRef(((props,ref)=>{const{onKeyDown,onClick}=props,others=__rest(props,["onKeyDown","onClick"]);return jimu_core.q_G.createElement(jimu_ui.Button,Object.assign({ref},others,{onClick,onKeyDown:evt=>{"Enter"!==evt.key&&" "!==evt.key||(evt.preventDefault(),evt.stopPropagation())},onKeyUp:evt=>{"Enter"!==evt.key&&" "!==evt.key||(evt.preventDefault(),evt.stopPropagation(),null==onClick||onClick(evt))}}))}));try{TreeButton.displayName="TreeButton",TreeButton.__docgenInfo={description:"",displayName:"TreeButton",props:{id:{defaultValue:null,description:"The unique id added to the element.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Defines the value associated with the button's name when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.",name:"value",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"To provide a label for interactive components for accessibility purposes.\nBy default, the accessible name is computed from any text content inside the element.\nIf lacking, provide an aria-label.",name:"aria-label",required:!1,type:{name:"string"}},active:{defaultValue:null,description:"If `true`, it indicates that it is activated within the button group.\nNode: Only valid when used with `ButtonGroup` or `AdvancedButtonGroup` component.",name:"active",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:null,description:"The `tabIndex` added to the element.",name:"tabIndex",required:!1,type:{name:"number"}},role:{defaultValue:null,description:"Defines the role added to the element.",name:"role",required:!1,type:{name:"AriaRole"}},title:{defaultValue:null,description:"Defines the title added to the element.",name:"title",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"The size of the component.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},block:{defaultValue:{value:"false"},description:"If `true`, the buttons will take up the full width of its container.",name:"block",required:!1,type:{name:"boolean"}},tag:{defaultValue:{value:"button"},description:"Custom html element to be used as a button.",name:"tag",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},variant:{defaultValue:null,description:"The variant to use.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"contained"'},{value:'"outlined"'}]}},dashed:{defaultValue:{value:"false"},description:"Whether `outlined` is set as dotted line.",name:"dashed",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The color of the component. It supports both default(if not set) and theme colors.",name:"color",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"inherit"'},{value:'"error"'},{value:'"primary"'},{value:'"secondary"'},{value:'"success"'},{value:'"info"'},{value:'"warning"'}]}},type:{defaultValue:{value:"default"},description:"Sets button type to one of the pre-defined button types that are used for different purposes, such as `default` and `primary`.\nRecommend using variant and color instead of type.",name:"type",required:!1,type:{name:"enum",value:[{value:'"link"'},{value:'"default"'},{value:'"primary"'},{value:'"secondary"'},{value:'"tertiary"'},{value:'"danger"'}]}},asLink:{defaultValue:null,description:'Determines if the component should be rendered as a link.\nUsed to replace component with the `type` set to "link".\nWhen `asLink` is true, the settings for `variant` and `color` will be ignored.',name:"asLink",required:!1,type:{name:"boolean"}},htmlType:{defaultValue:{value:"button"},description:"Sets value for the native `type` property of the `<button>` element when `tag` property is `button`.",name:"htmlType",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},target:{defaultValue:null,description:"Sets value for the native `target` property of the `<a>` element when `tag` property is `a`.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).",name:"target",required:!1,type:{name:"enum",value:[{value:'"_self"'},{value:'"_blank"'},{value:'"_parent"'},{value:'"_top"'}]}},icon:{defaultValue:{value:"false"},description:"If `true`, the button will be displayed as an icon button with custom styles applied to make the\nwidth and height equal.",name:"icon",required:!1,type:{name:"boolean"}},href:{defaultValue:null,description:"Sets value for the native `href` property of the `<a>` element when `tag` property is `a`.",name:"href",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Fire callback when the button is clicked.",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLButtonElement>"}},disableHoverEffect:{defaultValue:{value:"false"},description:"If `true`, the hover effect is disabled.",name:"disableHoverEffect",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disableRipple:{defaultValue:{value:"false"},description:"If `true`, the ripple effect is disabled.",name:"disableRipple",required:!1,type:{name:"boolean"}},disableTouchRipple:{defaultValue:{value:"false"},description:"If `true`, the touch ripple effect is disabled.",name:"disableTouchRipple",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"Defines the children of the element.",name:"children",required:!1,type:{name:"ReactNode"}},vertical:{defaultValue:{value:"false"},description:"Whether to display the icon and text in the content vertically.",name:"vertical",required:!1,type:{name:"boolean"}},unstyled:{defaultValue:null,description:"Whether to use this component without style.",name:"unstyled",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-button.tsx#TreeButton"]={docgenInfo:TreeButton.__docgenInfo,name:"TreeButton",path:"../jimu-ui/basic/lib/list-tree/common/tree-button.tsx#TreeButton"})}catch(__react_docgen_typescript_loader_error){}const CommandList=(0,jimu_theme.SL)((0,jimu_core.j4T)((props=>{var _a,_b;const{className,theme,intl,itemCommands,data,moreCommand={key:Symbol(),label:intl.formatMessage({id:"more",defaultMessage:jimu_ui.defaultMessages.more}),iconProps:{icon:__webpack_require__("../jimu-icons/svg/outlined/application/more-horizontal.svg")},action:()=>null},maxIconCount=3,onClickItemCommand=()=>null}=props,itemStateDisabled=!!(null===(_b=null===(_a=null==data?void 0:data.itemJsons)||void 0===_a?void 0:_a[0])||void 0===_b?void 0:_b.itemStateDisabled),[dropdownVisible,setDropdownVisible]=jimu_core.q_G.useState(!1),[dropdownContainer,setDropdownContainer]=jimu_core.q_G.useState(null),renderCommandItems=commands=>commands.map(((command,x)=>{var _a;const iconProps=("function"==typeof command.iconProps?command.iconProps():command.iconProps)||{icon:null};return command&&!command.collapsed&&(0,jimu_core.Yac)(jimu_ui.Tooltip,{key:x,title:command.label},(0,jimu_core.Yac)(TreeButton,{icon:!0,type:"tertiary",variant:"text",disableHoverEffect:!0,disableRipple:!0,"data-testid":command.label,className:"jimu-tree-command-list__command-item",disabled:itemStateDisabled,"aria-label":command.label,"aria-pressed":null!==(_a=command.buttonAriaPressed)&&void 0!==_a?_a:null,onClick:event=>{var _a;event.stopPropagation(),setDropdownVisible(!dropdownVisible);const actionData={event,data,command,itemCommands};null===(_a=command.action)||void 0===_a||_a.call(command,actionData),onClickItemCommand(actionData)}},(0,jimu_core.Yac)(jimu_ui.Icon,Object.assign({size:"m",className:"jimu-tree-command-list__command-item-icon"},iconProps)),(0,jimu_core.Yac)("div",{className:"jimu-tree-command-list__command-item-label"},command.label)))})),displayableCommands=itemCommands.filter((command=>!command.collapsed)),withMoreCommand=displayableCommands.length>maxIconCount,renderingCommands=withMoreCommand?[...displayableCommands.slice(0,maxIconCount-1),moreCommand,...displayableCommands.slice(maxIconCount-1)]:displayableCommands;return(0,jimu_core.Yac)("div",{ref:el=>{setDropdownContainer(el)},className:`jimu-tree-command-list ${className||""}`,css:getStyle},renderCommandItems(renderingCommands.slice(0,maxIconCount)),withMoreCommand&&(0,jimu_core.Yac)(jimu_ui.Popper,{open:dropdownVisible,reference:dropdownContainer,toggle:()=>{setDropdownVisible(!1)},css:getStyle},(0,jimu_core.Yac)("div",{className:"jimu-tree-command-list-dropdown"},renderCommandItems(renderingCommands.slice(maxIconCount)))));function getStyle(){return jimu_core.AHW`
      color: ${theme.ref.palette.neutral[1e3]};
      .jimu-tree-command-list-dropdown {
        display: flex;
        flex-flow: column;
        background-color: ${theme.ref.palette.neutral[500]};
        padding: .25rem;
        .jimu-tree-command-list__command-item-label {
          display: flex;
        }
      }
      .jimu-tree-command-list__command-item {
        display: flex;
        cursor: pointer;
        margin: 0 0.25rem;
        &.icon-btn{
          padding: 0;
        }
        .icon-btn-sizer{
          min-width: 0;
          min-height: 0;
        }
      }
      .jimu-tree-command-list__command-item-icon {
      }
      .jimu-tree-command-list__command-item-label {
        display: none;
        color: ${theme.ref.palette.black};
      }
    `}})));try{CommandList.displayName="CommandList",CommandList.__docgenInfo={description:"",displayName:"CommandList",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"any"}},onClickItemCommand:{defaultValue:null,description:"",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType) => void"}},itemCommands:{defaultValue:null,description:"",name:"itemCommands",required:!0,type:{name:"CommandType[]"}},moreCommand:{defaultValue:null,description:"",name:"moreCommand",required:!1,type:{name:"CommandType"}},maxIconCount:{defaultValue:null,description:"",name:"maxIconCount",required:!1,type:{name:"number"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-command-list.tsx#CommandList"]={docgenInfo:CommandList.__docgenInfo,name:"CommandList",path:"../jimu-ui/basic/lib/list-tree/common/tree-command-list.tsx#CommandList"})}catch(__react_docgen_typescript_loader_error){}const TreeContext=jimu_core.q_G.createContext({isTree:!1,uuid:"jimu-tree-0",selectionStyle:tree_types_TreeSelectionStyle.CheckSelection,multiLevel:!1,isRTL:!1});var minus_circle=__webpack_require__("../jimu-icons/outlined/editor/minus-circle.tsx"),plus_circle=__webpack_require__("../jimu-icons/outlined/editor/plus-circle.tsx"),down=__webpack_require__("../jimu-icons/filled/directional/down.tsx"),left=__webpack_require__("../jimu-icons/filled/directional/left.tsx"),right=__webpack_require__("../jimu-icons/filled/directional/right.tsx"),editor_close=__webpack_require__("../jimu-icons/outlined/editor/close.tsx"),check=__webpack_require__("../jimu-icons/filled/application/check.tsx");class tree_item_TreeItem extends jimu_core.q_G.Component{constructor(props){super(props),this.state={},this.dropZoneRef=jimu_core.q_G.createRef(),this.dragRef=jimu_core.q_G.createRef(),this.dropZoneInteractable=null,this.dragInteractable=null,this.dndInteract=null,this.intl=this.props.intl;const Sanitizer=jimu_core._2M.Sanitizer;this.sanitizer=new Sanitizer}componentDidMount(){this.props.dndEnabled&&this.dragRef.current&&Promise.all([__webpack_require__.e(2029),__webpack_require__.e(3033)]).then(__webpack_require__.bind(__webpack_require__,"../jimu-core/dnd.ts")).then((dndModule=>{this.dndInteract=dndModule.interact,this.props.handleAction(TreeItemActionType.HandleInitTreeItemDndDropZone,{type:"mount"},this),this.props.handleAction(TreeItemActionType.HandleInitTreeItemDndDrag,{type:"mount"},this)}))}componentWillUnmount(){this.dndInteract&&(this.props.handleAction(TreeItemActionType.HandleInitTreeItemDndDropZone,{type:"unmount"},this),this.props.handleAction(TreeItemActionType.HandleInitTreeItemDndDrag,{type:"unmount"},this))}render(){const{handleAction}=this.props,_itemBlockInfo=this.props.itemBlockInfo||tree_item_TreeItem.itemBlockInfos[this.props.treeAlignmentType],itemBlockInfo=handleAction(TreeItemActionType.OverrideItemBlockInfo,{itemBlockInfo:_itemBlockInfo},this);return this.renderChildBlocks({currentBlockInfo:{name:null,children:[itemBlockInfo]}},this)}renderChildBlocks(actionData,refComponent){const{handleAction}=refComponent.props,{currentBlockInfo}=actionData;return(currentBlockInfo.children||[]).filter((child=>!!child)).map(((child,x)=>(0,jimu_core.Yac)(jimu_core.q_G.Fragment,{key:x},handleAction(child.name,Object.assign(Object.assign({},actionData),{currentBlockInfo:child}),refComponent))))}}tree_item_TreeItem.contextType=TreeContext,tree_item_TreeItem.defaultHandleActionMap={overrideItemBlockInfo:(actionData,refComponent)=>{const{itemBlockInfo}=actionData;return itemBlockInfo},renderOverrideItemChildrenToggle:(actionData,refComponent)=>{var _a;const{itemJsons,collapseStyle,isMultiSelection,checkboxLinkage,treeAlignmentType,theme,itemJsons:[{itemStateExpanded,itemExpandIconShown=!1,itemStateChecked,indeterminate,isCheckboxDisabled,isItemSelectable=!0,itemStateTitle,itemChildren}],handleAction}=refComponent.props,showExpandIcon=itemExpandIconShown||(null===(_a=getItemChildren(itemJsons))||void 0===_a?void 0:_a.length)>0,isFolder=handleAction(TreeItemActionType.IsFolder,{draggingItemJsons:null,targetItemJsons:itemJsons},refComponent),disabled=isCheckboxDisabled||!isItemSelectable||refComponent.context.isTree&&isFolder&&(!itemChildren||0===(null==itemChildren?void 0:itemChildren.length))&&2===itemJsons.length;let ItemCheckbox=null;if(tree_utils_showCheckbox(refComponent.context.isTree,isMultiSelection,checkboxLinkage)?treeAlignmentType===TreeAlignmentType.Intact&&(ItemCheckbox=(0,jimu_core.Yac)("div",{className:(0,jimu_core.xWm)("d-flex align-items-center",{"pr-1":!showExpandIcon})},(0,jimu_core.Yac)(jimu_ui.Checkbox,{"aria-label":itemStateTitle,checked:itemStateChecked,indeterminate,disabled,onChange:evt=>{evt.stopPropagation(),disabled||handleAction(TreeItemActionType.HandleCheckboxChanged,{itemStateChecked:evt.target.checked},refComponent)}}))):refComponent.context.selectionStyle===tree_types_TreeSelectionStyle.CheckSelection&&(ItemCheckbox=(0,jimu_core.Yac)(jimu_ui.Button,{icon:!0,type:"tertiary",variant:"text",disableHoverEffect:!0,disableRipple:!0,size:"sm",className:"mr-1",tabIndex:-1,onClick:evt=>{evt.stopPropagation(),handleAction(TreeItemActionType.HandleCheckboxChanged,{itemStateChecked:!itemStateChecked,isMultiSelection},refComponent)}},itemStateChecked&&!disabled?(0,jimu_core.Yac)(check.t,{size:"12",color:theme.sys.color.primary.light}):(0,jimu_core.Yac)("div",null))),!refComponent.context.multiLevel)return ItemCheckbox;const labelKey=itemStateExpanded?"collapse":"expand",label=refComponent.intl.formatMessage({id:labelKey,defaultMessage:jimu_ui.defaultMessages[labelKey]}),MinusIcon=collapseStyle===TreeCollapseStyle.Arrow?(0,jimu_core.Yac)(down.$,{size:"s"}):(0,jimu_core.Yac)(minus_circle.j,null),PlusIcon=collapseStyle===TreeCollapseStyle.Arrow?refComponent.context.isRTL?(0,jimu_core.Yac)(left.M,{size:"s"}):(0,jimu_core.Yac)(right.B,{size:"s"}):(0,jimu_core.Yac)(plus_circle.z,null);return(0,jimu_core.Yac)(jimu_core.q_G.Fragment,null,showExpandIcon?(0,jimu_core.Yac)(jimu_ui.Button,{icon:!0,type:"tertiary",variant:"text",disableHoverEffect:!0,disableRipple:!0,className:"jimu-tree-item__children-toggle jimu-outline-inside",title:label,"aria-label":label,onClick:evt=>{evt.stopPropagation(),handleAction(TreeItemActionType.HandleExpandItem,{itemStateExpanded:!itemStateExpanded},refComponent)},onKeyDown:evt=>{shouldHandleKeyEvent(evt)&&(evt.preventDefault(),evt.stopPropagation())},onKeyUp:evt=>{shouldHandleKeyEvent(evt)&&(evt.stopPropagation(),handleAction(TreeItemActionType.HandleExpandItem,{itemStateExpanded:!itemStateExpanded},refComponent))},css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__children-toggle {
            cursor: pointer;

            .icon-btn-sizer {
              min-width: 0.75rem;
              min-height: 0.75rem;
            }
          }
        `}},itemStateExpanded?MinusIcon:PlusIcon):(0,jimu_core.Yac)("div",{className:"toggle-placeholder",css:jimu_core.AHW`width: ${collapseStyle===TreeCollapseStyle.Arrow?18:22}px;`}),ItemCheckbox)},renderOverrideItemDragHandle:(actionData,refComponent)=>{if(!refComponent.props.dndEnabled)return null;const icon=__webpack_require__("../jimu-ui/basic/lib/list-tree/assets/icons/drag-16.svg"),label=refComponent.intl.formatMessage({id:"dragHandler",defaultMessage:jimu_ui.defaultMessages.dragHandler});return(0,jimu_core.Yac)(TreeButton,{icon:!0,type:"tertiary","aria-label":label,className:"jimu-tree-item__drag-handle",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__drag-handle {
            display: flex;
            align-items: center;
            touch-action: none;
            border: 0;

            .icon-btn-sizer {
              min-width: 0.25rem;
              min-height: 1rem;
            }
          }
        `}},(0,jimu_core.Yac)(jimu_ui.Icon,{icon,width:4,height:16}))},renderOverrideItemDetailToggle:(actionData,refComponent)=>{const{itemJsons:[{itemStateDetailVisible,itemStateDetailContent,itemStateDisabled}],handleAction}=refComponent.props,DetailIcon=itemStateDetailVisible?down.$:right.B,labelKey=itemStateDetailVisible?"collapse":"expand",label=refComponent.intl.formatMessage({id:labelKey,defaultMessage:jimu_ui.defaultMessages[labelKey]});return itemStateDetailContent?(0,jimu_core.Yac)(TreeButton,{icon:!0,type:"tertiary",title:label,"aria-label":label,disabled:!!itemStateDisabled,className:"jimu-tree-item__detail-toggle",onClick:evt=>{evt.stopPropagation(),handleAction(TreeItemActionType.HandleToggleDetail,{itemStateDetailVisible:!itemStateDetailVisible},refComponent)},css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__detail-toggle {
            display: flex;
            align-items: center;
            cursor: pointer;

            .icon-btn-sizer {
              margin: 0;
              min-width: 0.5rem;
              min-height: 0.5rem;
            }
          }
        `}},(0,jimu_core.Yac)(DetailIcon,{size:"s",autoFlip:!itemStateDetailVisible})):null},renderOverrideItemIcon:(actionData,refComponent)=>{var _a;const{currentBlockInfo:{autoCollapsed=!1}}=actionData,{itemJsons:[{itemStateIcon}]}=refComponent.props,iconProps="function"==typeof itemStateIcon?itemStateIcon():itemStateIcon;return iconProps?(0,jimu_core.Yac)("div",{className:"jimu-tree-item__icon",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__icon {
            display: flex;
            align-items: center;
            opacity: ${(null==iconProps?void 0:iconProps.icon)?1:0};
          }
        `},style:autoCollapsed&&!iconProps.icon?{display:"none"}:{}},(0,jimu_core.Yac)(jimu_ui.Icon,Object.assign({},iconProps,{icon:null!==(_a=iconProps.icon)&&void 0!==_a?_a:__webpack_require__("../jimu-ui/basic/lib/list-tree/assets/icons/drag-16.svg"),className:"mr-1"}))):null},renderOverrideItemTitle:(actionData,refComponent)=>{const{currentBlockInfo:{onClick=event=>handleAction(TreeItemActionType.HandleClickItemTitle,{},refComponent),onDoubleClick=event=>{disableDoubleClickTitle||handleAction(TreeItemActionType.HandleDoubleClickItemTitle,{},refComponent)}}}=actionData,{itemJsons,singleLineText,searchedText,itemJsons:[{itemStateTitle,itemStateEditingText}],handleAction,theme,disableDoubleClickTitle}=refComponent.props,isFolder=handleAction(TreeItemActionType.IsFolder,{draggingItemJsons:null,targetItemJsons:itemJsons},refComponent);let inputRef=null;if("string"==typeof itemStateEditingText){jimu_core.CM0.debounce((()=>{(0,jimu_core.u02)(inputRef,!0)}),50)()}const formattedTitle=searchedText?itemStateTitle.replace(new RegExp(`(${searchedText})`,"gi"),"<strong>$1</strong>"):itemStateTitle,formattedTitleHTML=refComponent.sanitizer.sanitize(formattedTitle);return(0,jimu_core.Yac)("div",{className:"jimu-tree-item__title",onClick,onDoubleClick,css:function getStyle(){const hoverOutline=`${isFolder&&!itemStateEditingText?1:0}px solid ${theme.ref.palette.neutral[700]}`;return jimu_core.AHW`
          &.jimu-tree-item__title {
            display: flex;
            flex: 1;
            align-items: center;
            &:hover {
              outline: ${hoverOutline};
              outline-offset: 2px;
            }
            > .jimu-tree-item__title-text {
              overflow: hidden;
              text-overflow: ellipsis;
              display: -webkit-box;
              -webkit-box-orient: vertical;
              word-break: break-word;
              -webkit-line-clamp: ${singleLineText?1:2};
            }
          }
        `}},"string"==typeof itemStateEditingText?(0,jimu_core.Yac)(jimu_ui.TextInput,{size:"sm",ref:ref=>{inputRef=ref},className:"jimu-tree-item__editing-input",value:itemStateEditingText,onChange:evt=>{const itemStateEditingText=evt.target.value;handleAction(TreeItemActionType.HandleEditingTextChange,{itemStateEditingText},refComponent)},onBlur:evt=>{const itemStateEditingText=evt.target.value;handleAction(TreeItemActionType.HandleExitEditing,{itemStateEditingText},refComponent)}}):(0,jimu_core.Yac)("div",{className:"jimu-tree-item__title-text",title:itemStateTitle,dangerouslySetInnerHTML:{__html:formattedTitleHTML}}))},renderOverrideItemCommands:(actionData,refComponent)=>{const{currentBlockInfo:{commandListProps={}}}=actionData,{itemJsons,itemJsons:[{itemStateCommands=[]}],handleAction}=refComponent.props;return(0,jimu_core.Yac)(CommandList,Object.assign({className:"jimu-tree-item__commands",itemCommands:itemStateCommands,data:{refComponent,itemJsons},onClickItemCommand:commandActionData=>{handleAction(TreeItemActionType.OnClickItemCommand,commandActionData,refComponent)},css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__commands {
            display: flex;
            flex: none;
            align-items: center;
          }
        `}},commandListProps))},renderOverrideItemDraggableContainer:(actionData,refComponent)=>(0,jimu_core.Yac)("div",{ref:refComponent.dragRef,className:"jimu-tree-item__draggable","data-dndzone-draggable":"true"},refComponent.renderChildBlocks(actionData,refComponent)),renderOverrideItemMainLine:(actionData,refComponent)=>(0,jimu_core.Yac)("div",{className:(0,jimu_core.xWm)("jimu-tree-item__main-line",{"pl-2":!refComponent.props.dndEnabled}),css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__main-line {
            display: flex;
            flex: 1;
            align-items: center;
          }
        `}},refComponent.renderChildBlocks(actionData,refComponent)),renderOverrideItemDetailLine:(actionData,refComponent)=>{const{itemJsons:[{itemStateDetailVisible,itemStateDetailContent}]}=refComponent.props;return itemStateDetailVisible&&(0,jimu_core.Yac)("div",{className:"jimu-tree-item__detail-line",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__detail-line {
            display: flex;
            flex: 0 0 100%;
          }
        `},"aria-expanded":!0},itemStateDetailContent)},renderOverrideItemBody:(actionData,refComponent)=>{const{handleAction,isMultiSelection,checkboxLinkage,itemJsons:[{itemStateTitle,itemStateChecked,isItemSelectable=!0,itemExpandIconShown=!1,isCheckboxDisabled,itemChildren}]}=refComponent.props,showSquireMark=function tree_utils_showSquireMark(isTree,isMultiSelection,selectionStyle,itemStateChecked,checkboxLinkage){return selectionStyle===tree_types_TreeSelectionStyle.BoxSelection&&isTree&&itemStateChecked&&(isMultiSelection&&!checkboxLinkage||!isMultiSelection)}(refComponent.context.isTree,isMultiSelection,refComponent.context.selectionStyle,itemStateChecked,checkboxLinkage);let _isItemSelectable=isItemSelectable;refComponent.context.isTree&&isMultiSelection&&checkboxLinkage&&(_isItemSelectable=!((null==itemChildren?void 0:itemChildren.length)>0||itemExpandIconShown));const bodyClassName=["jimu-tree-item__body",`jimu-tree-item_selectable_${_isItemSelectable}`,`jimu-tree-item_squire_${showSquireMark}`].join(" ");return(0,jimu_core.Yac)("div",{className:bodyClassName,role:"treeitem",tabIndex:0,"aria-label":itemStateTitle,onClick:evt=>{handleAction(TreeItemActionType.HandleClickItemBody,{isMultiSelection,checkboxLinkage,isItemSelectable:_isItemSelectable,itemStateChecked:!itemStateChecked,isCheckboxDisabled},refComponent)},onKeyDown:evt=>{shouldHandleKeyEvent(evt)&&evt.preventDefault()},onKeyUp:evt=>{shouldHandleKeyEvent(evt)&&(evt.preventDefault(),handleAction(TreeItemActionType.HandleClickItemBody,{isMultiSelection,checkboxLinkage,isItemSelectable:_isItemSelectable,itemStateChecked:!itemStateChecked,isCheckboxDisabled},refComponent))},css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__body {
            position: relative;
            display: flex;
            flex-flow: row wrap;
            flex: 1;
            align-items: center;
          }
        `}},showSquireMark&&(0,jimu_core.Yac)("div",{className:"item-active-icon-container item-active-icon-container456"},(0,jimu_core.Yac)("div",{className:"item-active-icon"})),refComponent.renderChildBlocks(actionData,refComponent))},renderOverrideItemContent:(actionData,refComponent)=>{var _a;const{itemJsons,handleAction,isMultiSelection,checkboxLinkage,treeAlignmentType,itemJsons:[{itemStateChecked,indeterminate,isCheckboxDisabled,itemExpandIconShown=!1,itemStateTitle,itemChildren}]}=refComponent.props,[,...parentItemJsons]=itemJsons,showExpandIcon=itemExpandIconShown||(null===(_a=getItemChildren(itemJsons))||void 0===_a?void 0:_a.length)>0,levelPadding=1.25*(treeAlignmentType===TreeAlignmentType.Typical?parentItemJsons.length-(showExpandIcon?1:0):parentItemJsons.length-1)+"rem",isFolder=handleAction(TreeItemActionType.IsFolder,{draggingItemJsons:null,targetItemJsons:itemJsons},refComponent),disabled=isCheckboxDisabled||refComponent.context.isTree&&isFolder&&(!itemChildren||0===(null==itemChildren?void 0:itemChildren.length))&&2===itemJsons.length,showCheckbox=tree_utils_showCheckbox(refComponent.context.isTree,isMultiSelection,checkboxLinkage);return(0,jimu_core.Yac)("div",{className:"jimu-tree-item__content",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__content {
            display: flex;
            flex: 1;
          }
        `}},showCheckbox&&treeAlignmentType===TreeAlignmentType.Typical&&(0,jimu_core.Yac)("div",{className:(0,jimu_core.xWm)("d-flex def align-items-center",{"pr-1":!refComponent.context.multiLevel})},(0,jimu_core.Yac)(jimu_ui.Checkbox,{"aria-label":itemStateTitle,checked:itemStateChecked,indeterminate,disabled,onChange:evt=>{evt.stopPropagation(),disabled||handleAction(TreeItemActionType.HandleCheckboxChanged,{itemStateChecked:evt.target.checked},refComponent)}})),refComponent.context.multiLevel&&(0,jimu_core.Yac)("div",{className:"jimu-tree-item__level-padding",style:{width:levelPadding}}),refComponent.renderChildBlocks(actionData,refComponent))},renderOverrideItemDroppableContainer:(actionData,refComponent)=>{return(0,jimu_core.Yac)("div",{ref:refComponent.dropZoneRef,className:"jimu-tree-item__droppable","data-dndzone-droppable":"true",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__droppable {
            .jimu-tree-item__list-group-item {
              padding: 0;
              background: unset;
              border: none;
              display: flex;
              flex: 1;
            }
          }
        `}},(children=refComponent.renderChildBlocks(actionData,refComponent),refComponent.context.isTree?(0,jimu_core.Yac)(jimu_ui.ListGroupItem,{className:"jimu-tree-item__list-group-item"},children):children));var children},renderOverrideItemSubitems:(actionData,refComponent)=>{const{itemJsons:[{itemStateExpanded,itemStateDisabled}],children}=refComponent.props;return itemStateDisabled?null:Array.isArray(children)&&children.length>0&&(0,jimu_core.Yac)(jimu_ui.Collapse,{className:"jimu-tree-item__subitems",isOpen:!!itemStateExpanded,role:"group",css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-item__subitems {
            display: flex;
            flex: 0 0 100%;
            flex-flow: wrap;
          }
        `}},itemStateExpanded&&children)},renderOverrideItem:(actionData,refComponent)=>{const{currentBlockInfo:{additionalClassName=""}}=actionData,{className,theme,dndEnabled,isMultiSelection,checkboxLinkage,showRemoveIconForDisabledItem,itemJsons:[{itemStateDisabled,itemStateChecked}],handleAction,treeStyle}=refComponent.props,foundSearchText=handleAction(TreeItemActionType.HandleFindSearchText,{},refComponent),isItemDisplayable=handleAction(TreeItemActionType.IsItemDisplayable,{},refComponent),focused=!!itemStateChecked,disabled=!!itemStateDisabled,currentClassName=[additionalClassName,className,"jimu-tree-item","jimu-tree-item_template",`jimu-tree-item_template-${treeStyle.toLowerCase()}`,`jimu-tree-item_dnd-${dndEnabled}`,`jimu-tree-item_focused-${focused}`,`jimu-tree-item_disabled-${!!disabled}`].join(" ");return(0,jimu_core.Yac)("div",{className:`jimu-tree-item ${currentClassName}`,css:function getStyle(){const{size="default"}=refComponent.props,paddingBySize="default"===size?6:"sm"===size?3:10;let paddingBySizeForBasic;paddingBySizeForBasic=isMultiSelection&&checkboxLinkage?"default"===size?6:"sm"===size?4:11:"default"===size?2:"sm"===size?0:6;return jimu_core.AHW`
          &.jimu-tree-item {
            position: relative;
            display: flex;
            flex: 0 0 100%;
            flex-flow: wrap;
            user-select: none;
            &.jimu-tree-item_focused-true {
              .jimu-tree-item__body {
                &:after {
                  content: '';
                  position: absolute;
                  top: 0;
                  left: 0;
                  bottom: 0;
                }
              }
            }
            &.jimu-tree-item_disabled-true {
              .jimu-tree-item__droppable{
                opacity: .7;
                background-color: ${window.jimuConfig.isBuilder?theme.ref.palette.neutral[400]:"unset"};
              }
              .jimu-tree-item__mask {
                position: absolute;
                width: 100%;
                height: calc(100% - 0.25rem);
                display: flex;
                align-items: center;
                justify-content: flex-end;
              }
            }
            &.jimu-tree-item_dnd-true {
              [data-dndzone-draggable=true]:hover {
                cursor: pointer !important;
                .jimu-tree-item__drag-handle {
                  opacity: 1;
                }
              }
            }
            [data-dndzone-draggable=true] {
              display: flex;
              flex: 0 0 100%;
              font-weight: 400;
              touch-action: none;
              &[data-dndon-dragging=true]{
                opacity: 0;
              }
            }
            [data-dndzone-droppable=true] {
              display: flex;
              flex: 0 0 100%;
              border: 2px solid transparent; /** space for focus ring */
              &[data-dndon-droppable=true] {
                border-color: transparent;
                &[data-dndon-drop-type=to-top] {
                  .jimu-tree-item__body {
                    box-shadow: 0 -2px 0 0 ${theme.sys.color.primary.main};
                  }
                }
                &[data-dndon-drop-type=to-bottom] {
                  .jimu-tree-item__body {
                    box-shadow: 0 2px 0 0 ${theme.sys.color.primary.main};
                  }
                }
                &[data-dndon-drop-type=to-inside] {
                  .jimu-tree-item__body {
                    outline: 2px solid ${theme.sys.color.primary.main};
                    outline-offset: -2px;
                  }
                }
                &[data-dndon-drop-type=to-nowhere] {
                  opacity: .2;
                }
              }
            }
          }
          &.jimu-tree-item_template {
            padding-top: 0.25rem;
            &:first-of-type {
              padding-top: 0;
            }
            .jimu-tree-item__detail-line {
            }
            .jimu-tree-item__body {
              line-height: 1.3;
              &:hover {
              }
              &:focus {
                outline-offset: 0;
              }
            }
            .jimu-tree-item__drag-handle {
              opacity: 0;
              &:focus {
                outline-offset: 1px;
                opacity: 1;
              }
            }
            .jimu-tree-item__children-toggle,
            .jimu-tree-item__drag-handle,
            .jimu-tree-item__detail-toggle,
            .jimu-tree-item__icon {
              padding: 0 .125rem;
            }
          }

          &.jimu-tree-item_template-basic {
            .jimu-tree-item__subitems .jimu-tree-item_template-basic:first-of-type {
              padding-top: 0.25rem;
            }
            .jimu-tree-item__content {
              color: ${theme.ref.palette.black};
            }

            /*
            Can't add bgColor for the whole item since it could contain sub-items.
              &:hover {
                background-color: '';
              }
            */
            .jimu-tree-item__body {
              &:hover {
                background-color: ${window.jimuConfig.isBuilder?theme.ref.palette.neutral[500]:theme.ref.palette.neutral[200]};
              }

              &.jimu-tree-item_selectable_true {
                border: ${dndEnabled?"1px solid transparent":"none"};
              }
              &.jimu-tree-item_selectable_false {
                background: ${window.jimuConfig.isBuilder?theme.ref.palette.neutral[500]:theme.ref.palette.neutral[200]};
                opacity: .5;
              }
              .jimu-tree-item__main-line {
                padding: ${jimu_core.PLL.rem(paddingBySizeForBasic)} 0.5rem ${jimu_core.PLL.rem(paddingBySizeForBasic)} 0.125rem;
              }
            }
          }

          &.jimu-tree-item_template-card {
            &.jimu-tree-item_focused-true {
              .jimu-tree-item__body {
                &:after {
                  // Only for List & Single
                  border-left: ${refComponent.context.isTree||isMultiSelection?"none":`.125rem solid ${theme.sys.color.primary.light}`} ;
                }
                .item-active-icon-container {
                  position: absolute;
                  top: -1px;
                  right: -1px;
                  .item-active-icon {
                    width: 0;
                    height: 0;
                    border-top: 0.75rem ${theme.sys.color.primary.light} solid;
                    border-left: 0.75rem transparent solid;
                    background-color: transparent;
                  }
                }
              }
            }

            .jimu-tree-item__subitems .jimu-tree-item_template-card:first-of-type {
              padding-top: 0.25rem;
            }
            .jimu-tree-item__content {
              color: ${theme.ref.palette.black};
            }
            .jimu-tree-item__body {
              background-color: ${window.jimuConfig.isBuilder?theme.ref.palette.neutral[600]:"unset"};
              &.jimu-tree-item_selectable_true {
                border: ${window.jimuConfig.isBuilder?"none":`1px solid ${theme.ref.palette.neutral[300]}`};
                &.jimu-tree-item_squire_true {
                  border: 1px solid ${theme.sys.color.primary.main};
                }
                &:hover {
                  background-color: ${window.jimuConfig.isBuilder?jimu_core.PLL.rgba(theme.ref.palette.neutral[600],.8):theme.ref.palette.neutral[200]};
                }
              }
              .jimu-tree-item__main-line {
                padding: ${jimu_core.PLL.rem(paddingBySize)} 0.5rem ${jimu_core.PLL.rem(paddingBySize)} 0.125rem;
              }
            }
            &.jimu-tree-item_disabled-false {
              .jimu-tree-item__content .jimu-tree-item__body:hover {
                cursor: default!important;
                background-color: ${window.jimuConfig.isBuilder?theme.ref.palette.neutral[600]:theme.ref.palette.neutral[200]};
              }
            }
          }
        `},style:{display:foundSearchText&&isItemDisplayable?void 0:"none"}},refComponent.renderChildBlocks(actionData,refComponent),disabled&&(0,jimu_core.Yac)("div",{className:"jimu-tree-item__mask"},showRemoveIconForDisabledItem&&(0,jimu_core.Yac)(jimu_ui.Tooltip,{title:refComponent.intl.formatMessage({id:"delete",defaultMessage:jimu_core.kgw.delete})},(0,jimu_core.Yac)(jimu_ui.Button,{icon:!0,type:"default",size:"sm",className:"mr-1",onClick:evt=>{evt.stopPropagation(),handleAction(TreeItemActionType.HandleDisabledItemRemoved,{},refComponent)}},(0,jimu_core.Yac)(editor_close.r,null)))))},handleInitTreeItemDndDropZone:(actionData,refComponent)=>{const{type}=actionData;if("mount"===type){const interact=refComponent.dndInteract;interact.dynamicDrop(!0),refComponent.dropZoneInteractable=interact(refComponent.dropZoneRef.current).dropzone({accept:"[data-dndzone-draggable=true]",overlap:"pointer",ondropmove:dropEvent=>{const{target,relatedTarget}=dropEvent,{itemJsons,itemJsons:[{itemStateDisabled}],withStates,handleAction}=refComponent.props,{searchForText}=withStates,dragItemRect=relatedTarget.getBoundingClientRect(),dropItemRect=target.getBoundingClientRect(),dragStart=+relatedTarget.getAttribute("data-dndon-starty"),pointerY=dragItemRect.top+dragStart,dragItem=handleAction(TreeItemActionType.GetDragItemJsons,{dragEvent:dropEvent.dragEvent},refComponent);if(!dragItem)return;const[currentDragItemJson]=dragItem.itemJsons,dropType=["to-nowhere","to-top",...refComponent.context.isTree&&!itemStateDisabled?["to-inside"]:[],"to-bottom"].find(((type,x,types)=>"to-nowhere"===type?itemJsons.includes(currentDragItemJson)||!!searchForText:pointerY<dropItemRect.top+dropItemRect.height*x/(types.length-1)?type:null));let newDropType=dropType;if(refComponent.context.isTree&&!itemStateDisabled&&"to-nowhere"!==dropType){handleAction(TreeItemActionType.IsItemDroppable,{draggingItemJsons:dragItem.itemJsons,targetItemJsons:itemJsons,dropType:newDropType},refComponent)||(newDropType="to-nowhere")}target.setAttribute("data-dndon-drop-type",newDropType)},ondragenter:dropEvent=>{const{target}=dropEvent;target.setAttribute("data-dndon-droppable","true")},ondragleave:dropEvent=>{const{target}=dropEvent;target.removeAttribute("data-dndon-droppable"),target.removeAttribute("data-dndon-drop-type")},ondrop:dropEvent=>{jimu_core.CM0.defer((()=>{const{target}=dropEvent,{itemJsons,handleAction}=refComponent.props,dropType=dropEvent.target.getAttribute("data-dndon-drop-type"),dragItem=handleAction(TreeItemActionType.GetDragItemJsons,{dragEvent:dropEvent.dragEvent},refComponent);handleAction(TreeItemActionType.SetDragItemJsons,{itemJsons,dragEvent:dropEvent.dragEvent,type:"dragend"},refComponent),handleAction(TreeItemActionType.HandleDidDrop,{dropType,dragItem},refComponent),target.removeAttribute("data-dndon-droppable"),target.removeAttribute("data-dndon-drop-type")}))}})}"unmount"===type&&refComponent.dropZoneInteractable&&(refComponent.dropZoneInteractable.unset(),refComponent.dropZoneInteractable=null)},handleInitTreeItemDndDrag:(actionData,refComponent)=>{const{type}=actionData;if("mount"===type){const interact=refComponent.dndInteract;refComponent.dragInteractable=interact(refComponent.dragRef.current).draggable({inertia:!1,modifiers:[],autoScroll:{container:document.getElementById(refComponent.context.uuid)},onstart:dragEvent=>{if(isTitleEditing(dragEvent))return;refComponent.dragTriggered=!0;const{target,clientX,clientY}=dragEvent;target.style.position="fixed";const{itemJsons,handleAction}=refComponent.props;handleAction(TreeItemActionType.SetDragItemJsons,{itemJsons,dragEvent,type:"dragstart"},refComponent);const dragItemRect=target.getBoundingClientRect();target.setAttribute("data-dndon-limitx",Math.abs(dragItemRect.right-dragItemRect.left)/2),target.setAttribute("data-dndon-startx",clientX-dragItemRect.left),target.setAttribute("data-dndon-starty",clientY-dragItemRect.top),target.setAttribute("data-dndon-dragging","true")},onmove:dragEvent=>{if(isTitleEditing(dragEvent))return;const{target,clientX,clientY,clientX0,clientY0}=dragEvent;let translateX=clientX-clientX0;const limitX=target.getAttribute("data-dndon-limitx");translateX=translateX>0?Math.min(translateX,limitX):Math.max(translateX,-limitX);const translateY=clientY-clientY0;target.style.webkitTransform=target.style.transform=`translate(${translateX}px, ${translateY}px)`},onend:dragEvent=>{if(isTitleEditing(dragEvent))return;const{target}=dragEvent;target.style.position=null,target.style.webkitTransform=target.style.transform="",target.removeAttribute("data-dndon-startx"),target.removeAttribute("data-dndon-starty"),target.removeAttribute("data-dndon-dragging")}}).on("click",(event=>{refComponent.dragTriggered&&event.stopImmediatePropagation(),refComponent.dragTriggered=!1}))}"unmount"===type&&refComponent.dragInteractable&&(refComponent.dragInteractable.unset(),refComponent.dragInteractable=null)},handleDidDrop:(actionData,refComponent)=>{const{itemJsons}=refComponent.props,{dropType,dragItem}=actionData;if(["to-top","to-inside","to-bottom"].includes(dropType)){const dragItemJsons=dragItem.itemJsons,dropItemJsons=itemJsons,[dragItemJson]=dragItemJsons,[dropItemJson]=dropItemJsons,dragItemParentChildren=getItemChildren(dragItemJsons.slice(1)),dropItemParentChildren=getItemChildren(dropItemJsons.slice(1)),dropItemChildren=getItemChildren(dropItemJsons),dragItemIndex=dragItemParentChildren.indexOf(dragItemJson),targetDropItemJsons="to-inside"===dropType?dropItemJsons:dropItemJsons.slice(1);let targetDropItemIndex="to-top"===dropType?dropItemParentChildren.indexOf(dropItemJson):"to-bottom"===dropType?dropItemParentChildren.indexOf(dropItemJson)+1:(dropItemChildren||[]).length;const targetDropItemChildren=getItemChildren(targetDropItemJsons);targetDropItemIndex+=dragItemParentChildren===targetDropItemChildren&&dragItemIndex<targetDropItemIndex?-1:0;const muteUpdate=(actionData,refComponent)=>{const{dragItemParentChildren,dragItemJson,dragItemIndex,targetDropItemChildren,targetDropItemJsons,targetDropItemIndex}=actionData;if(dragItemParentChildren.splice(dragItemIndex,1),targetDropItemChildren)targetDropItemChildren.splice(targetDropItemIndex,0,dragItemJson);else{const[currentItemJson]=targetDropItemJsons;currentItemJson.itemChildren=[dragItemJson]}};let updateItemActionData={updateType:TreeItemActionType.HandleDidDrop,parentDragItemJsons:dragItemJsons.slice(1),dragItemParentChildren,dragItemIndex,dragItemJsons,dragItemJson,targetDropItemJsons,targetDropItemChildren,targetDropItemIndex,dropType,itemJsons,muteUpdate};muteUpdate(updateItemActionData,refComponent);const nextItemJsons=getItemJsonsWithCheckState(updateItemActionData,refComponent);nextItemJsons&&(updateItemActionData=Object.assign(updateItemActionData,{itemJsons:[...itemJsons.slice(0,itemJsons.length-1),nextItemJsons]})),refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,updateItemActionData,refComponent)}refComponent.props.handleAction(TreeItemActionType.OnDidDrop,actionData,refComponent)},handleDisabledItemRemoved:(actionData,refComponent)=>{const{itemJsons}=refComponent.props,dragItemJsons=itemJsons,[dragItemJson]=dragItemJsons,dragItemParentChildren=getItemChildren(dragItemJsons.slice(1)),dragItemIndex=dragItemParentChildren.indexOf(dragItemJson),updateItemActionData={updateType:TreeItemActionType.HandleDisabledItemRemoved,itemJsons};dragItemParentChildren.splice(dragItemIndex,1),refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,updateItemActionData,refComponent)},handleToggleDetail:(actionData,refComponent)=>{const{itemStateDetailVisible}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,{updateType:TreeItemActionType.HandleToggleDetail,changeItemJson:{itemStateDetailVisible},currentItemJson,itemJsons},refComponent),refComponent.props.handleAction(TreeItemActionType.OnToggleDetail,actionData,refComponent)},handleExpandItem:(actionData,refComponent)=>{const{itemStateExpanded}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,{updateType:TreeItemActionType.HandleExpandItem,changeItemJson:{itemStateExpanded},currentItemJson,itemJsons},refComponent),refComponent.props.handleAction(TreeItemActionType.OnExpandItem,actionData,refComponent)},handleEditingTextChange:(actionData,refComponent)=>{const{itemStateEditingText}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,{updateType:TreeItemActionType.HandleEditingTextChange,changeItemJson:{itemStateEditingText:itemStateEditingText||""},currentItemJson,itemJsons},refComponent),refComponent.props.handleAction(TreeItemActionType.OnEditingTextChange,actionData,refComponent)},handleExitEditing:(actionData,refComponent)=>{const{itemStateEditingText}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,{updateType:TreeItemActionType.HandleExitEditing,changeItemJson:{itemStateEditingText:null,itemStateTitle:itemStateEditingText||""},currentItemJson,itemJsons},refComponent),refComponent.props.handleAction(TreeItemActionType.OnExitEditing,actionData,refComponent)},handleFindSearchText:(actionData,refComponent)=>{const{itemJsons:[{itemKey}],withStates:{searchForText}}=refComponent.props;return(itemKey||"").match(searchForText||"")},isItemDisplayable:(actionData,refComponent)=>!0,handleClickItemBody:(actionData,refComponent)=>{const{itemStateChecked,isItemSelectable,isCheckboxDisabled,isMultiSelection,checkboxLinkage}=actionData;if(isItemSelectable&&!isCheckboxDisabled){if(tree_utils_showCheckbox(refComponent.context.isTree,isMultiSelection,checkboxLinkage))return actionData.isTriggeredByBodyClick=!0,void refComponent.props.handleAction(TreeItemActionType.HandleCheckboxChanged,actionData,refComponent);{const{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;let newActionData={updateType:TreeItemActionType.HandleCheckboxChanged,changeItemJson:{itemStateChecked:itemStateChecked||!1},currentItemJson,itemJsons};newActionData=getActionDataByRadioActionData(refComponent.context.isTree,isMultiSelection,newActionData),refComponent.props.handleAction(TreeItemActionType.OnUpdateItem,newActionData,refComponent)}refComponent.props.handleAction(TreeItemActionType.OnClickItemBody,{},refComponent)}else refComponent.props.handleAction(TreeItemActionType.OnClickItemBody,{},refComponent)},handleDoubleClickItemTitle:(actionData,refComponent)=>{const{itemJsons:[{itemStateTitle}]}=refComponent.props;refComponent.props.handleAction(TreeItemActionType.HandleStartEditing,{itemStateEditingText:itemStateTitle},refComponent),refComponent.props.handleAction(TreeItemActionType.OnDoubleClickItemTitle,actionData,refComponent)},handleCheckboxChanged:(actionData,refComponent)=>{const{itemStateChecked,isTriggeredByBodyClick,isMultiSelection}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;let newActionData={updateType:TreeItemActionType.HandleCheckboxChanged,changeItemJson:{itemStateChecked:itemStateChecked||!1},currentItemJson,itemJsons};newActionData=refComponent.context.selectionStyle===tree_types_TreeSelectionStyle.CheckSelection?getActionDataByRadioActionData(refComponent.context.isTree,isMultiSelection,newActionData):getActionDataByCBXActionData(refComponent.context.isTree,newActionData),refComponent.props.handleAction(TreeItemActionType.OnUpdateItem,newActionData,refComponent),isTriggeredByBodyClick&&refComponent.props.handleAction(TreeItemActionType.OnClickItemBody,newActionData,refComponent)},handleStartEditing:(actionData,refComponent)=>{const{itemStateEditingText}=actionData,{itemJsons}=refComponent.props,[currentItemJson]=itemJsons;refComponent.props.handleAction(TreeItemActionType.HandleUpdateItem,{updateType:TreeItemActionType.HandleStartEditing,changeItemJson:{itemStateEditingText:itemStateEditingText||""},currentItemJson,itemJsons},refComponent)},handleUpdateItem:(actionData,refComponent)=>{actionData.changeItemJson&&(actionData=getActionDataByChangeJson(refComponent.context.isTree,actionData)),refComponent.props.handleAction(TreeItemActionType.OnUpdateItem,actionData,refComponent)},isItemDroppable:(actionData,refComponent)=>!0,isFolder:(actionData,refComponent)=>!1,getDragItemJsons:null,setDragItemJsons:null,handleClickItemTitle:null,handleFocusItem:null,onToggleDetail:null,onExpandItem:null,onEditingTextChange:null,onExitEditing:null,onDidDrop:null,onClickItemBody:null,onDoubleClickItemTitle:null,onClickItemCommand:null,onUpdateItem:null},tree_item_TreeItem.itemBlockInfos={[TreeAlignmentType.Typical]:{name:TreeItemActionType.RenderOverrideItem,children:[{name:TreeItemActionType.RenderOverrideItemDroppableContainer,children:[{name:TreeItemActionType.RenderOverrideItemContent,children:[{name:TreeItemActionType.RenderOverrideItemChildrenToggle},{name:TreeItemActionType.RenderOverrideItemBody,children:[{name:TreeItemActionType.RenderOverrideItemMainLine,children:[{name:TreeItemActionType.RenderOverrideItemDraggableContainer,children:[{name:TreeItemActionType.RenderOverrideItemDragHandle},{name:TreeItemActionType.RenderOverrideItemDetailToggle},{name:TreeItemActionType.RenderOverrideItemIcon},{name:TreeItemActionType.RenderOverrideItemTitle},{name:TreeItemActionType.RenderOverrideItemCommands}]}]},{name:TreeItemActionType.RenderOverrideItemDetailLine}]}]}]},{name:TreeItemActionType.RenderOverrideItemSubitems}]},[TreeAlignmentType.Intact]:{name:TreeItemActionType.RenderOverrideItem,children:[{name:TreeItemActionType.RenderOverrideItemDroppableContainer,children:[{name:TreeItemActionType.RenderOverrideItemContent,children:[{name:TreeItemActionType.RenderOverrideItemBody,children:[{name:TreeItemActionType.RenderOverrideItemMainLine,children:[{name:TreeItemActionType.RenderOverrideItemDraggableContainer,children:[{name:TreeItemActionType.RenderOverrideItemDragHandle},{name:TreeItemActionType.RenderOverrideItemChildrenToggle},{name:TreeItemActionType.RenderOverrideItemDetailToggle},{name:TreeItemActionType.RenderOverrideItemIcon},{name:TreeItemActionType.RenderOverrideItemTitle},{name:TreeItemActionType.RenderOverrideItemCommands}]}]},{name:TreeItemActionType.RenderOverrideItemDetailLine}]}]}]},{name:TreeItemActionType.RenderOverrideItemSubitems}]}},tree_item_TreeItem.defaultProps=Object.assign({theme:{},className:"",treeAlignmentType:TreeAlignmentType.Typical,treeStyle:TreeStyle.Card,dndEnabled:!1,withStates:{},handleAction},tree_item_TreeItem.defaultHandleActionMap);const common_tree_item_TreeItem=(0,jimu_theme.SL)((0,jimu_core.j4T)(tree_item_TreeItem));try{tree_item_TreeItem.displayName="_TreeItem",tree_item_TreeItem.__docgenInfo={description:"The TreeItem component.\n\n```ts\nimport { TreeItem } from 'jimu-ui/basic/list-tree'\n```",displayName:"_TreeItem",props:{className:{defaultValue:{value:""},description:"",name:"className",required:!1,type:{name:"string"}},treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},isMultiSelection:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item",name:"isMultiSelection",required:!1,type:{name:"boolean"}},treeStyle:{defaultValue:{value:"TreeStyle.Card"},description:"",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"@ignore",name:"searchedText",required:!1,type:{name:"string"}},checkboxLinkage:{defaultValue:null,description:"",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},dndEnabled:{defaultValue:{value:"false"},description:"",name:"dndEnabled",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:null,description:"",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},itemJsons:{defaultValue:null,description:"",name:"itemJsons",required:!0,type:{name:"TreeItemInRelationType"}},withStates:{defaultValue:{value:"{}"},description:"@ignore",name:"withStates",required:!1,type:{name:"{ [key: string]: any; }"}},handleAction:{defaultValue:{value:"treeUtils.handleAction"},description:"@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeItemActionType, actionData: ArgT, refComponent: _TreeItem) => ResT"}},itemBlockInfo:{defaultValue:null,description:"@ignore",name:"itemBlockInfo",required:!1,type:{name:"TreeItemBlockInfoType"}},showRemoveIconForDisabledItem:{defaultValue:null,description:"",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:{value:"{}"},description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}},intl:{defaultValue:null,description:"@ignore",name:"intl",required:!0,type:{name:"IntlShape"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#_TreeItem"]={docgenInfo:tree_item_TreeItem.__docgenInfo,name:"_TreeItem",path:"../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#_TreeItem"})}catch(__react_docgen_typescript_loader_error){}try{contextType.displayName="_TreeItem.contextType",contextType.__docgenInfo={description:"Context lets components pass information deep down without explicitly\npassing props.\n\nCreated from {@link createContext}",displayName:"_TreeItem.contextType",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#_TreeItem.contextType"]={docgenInfo:tree_item_TreeItem.contextType.__docgenInfo,name:"_TreeItem.contextType",path:"../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#_TreeItem.contextType"})}catch(__react_docgen_typescript_loader_error){}try{common_tree_item_TreeItem.displayName="TreeItem",common_tree_item_TreeItem.__docgenInfo={description:"The TreeItem component.\n\n```ts\nimport { TreeItem } from 'jimu-ui/basic/list-tree'\n```",displayName:"TreeItem",props:{theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#TreeItem"]={docgenInfo:common_tree_item_TreeItem.__docgenInfo,name:"TreeItem",path:"../jimu-ui/basic/lib/list-tree/common/tree-item.tsx#TreeItem"})}catch(__react_docgen_typescript_loader_error){}class TreeMain extends jimu_core.q_G.Component{constructor(props){super(props),this.state={dragItems:[]}}render(){return this.props.handleAction(TreeMainActionType.RenderOverrideMain,{},this)}renderItemJson(itemJsons){const{treeAlignmentType,treeStyle,collapseStyle,isMultiSelection,singleLineText,searchedText,checkboxLinkage,dndEnabled,disableDoubleClickTitle,withStates,size="default",showRemoveIconForDisabledItem}=this.props,[currentItemJson,...parentItemJsons]=itemJsons,{itemKey,itemStateExpanded,itemStateEditingText}=currentItemJson,itemChildren=getItemChildren(itemJsons),className=["jimu-tree-main__item",`jimu-tree-main__item_level-${parentItemJsons.length}`,`jimu-tree-main__item_editing-${"string"==typeof itemStateEditingText}`,...itemChildren?[`jimu-tree-main__item_expandable-${!!itemChildren}`,`jimu-tree-main__item_expanded-${!!itemStateExpanded}`]:[]].join(" ");return(0,jimu_core.Yac)(common_tree_item_TreeItem,Object.assign({key:itemKey,className,treeAlignmentType,treeStyle,singleLineText,searchedText,collapseStyle,isMultiSelection,checkboxLinkage,itemJsons,size,dndEnabled,disableDoubleClickTitle,showRemoveIconForDisabledItem,withStates},Object.assign({},...Object.values(TreeItemActionType).map((actionKey=>{var _a;return{[actionKey]:null===(_a=this.props[actionKey])||void 0===_a?void 0:_a.bind(this)}})))),(itemChildren||[]).map((subItemJson=>this.renderItemJson([subItemJson,...itemJsons]))))}}TreeMain.defaultHandleActionMap={renderOverrideMain:(actionData,refComponent)=>{var _a,_b,_c,_d;const{className,topTag,isTree,uuid,rootItemVisible,rootItemJson,isMultiSelection,checkboxLinkage,treeStyle}=refComponent.props,itemChildren=rootItemJson?getItemChildren([rootItemJson]):null,multiLevel=(null===(_b=null===(_a=null==rootItemJson?void 0:rootItemJson.itemChildren)||void 0===_a?void 0:_a.filter((child=>{var _a;return(null===(_a=null==child?void 0:child.itemChildren)||void 0===_a?void 0:_a.length)>0})))||void 0===_b?void 0:_b.length)>0,TopTag=topTag,selectionStyle=getSelectionStyle(isTree,isMultiSelection,treeStyle,checkboxLinkage),isRTL=null===(_d=null===(_c=(0,jimu_core.Vp3)().getState())||void 0===_c?void 0:_c.appContext)||void 0===_d?void 0:_d.isRTL;return(0,jimu_core.Yac)(TreeContext.Provider,{value:{isTree,selectionStyle,multiLevel,uuid,isRTL}},(0,jimu_core.Yac)(TopTag,{className:`jimu-tree-main ${className||""}`,css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree-main {
            width: 100%;
            overflow-x: hidden;
          }
        `},role:"tree"},rootItemVisible?refComponent.renderItemJson([rootItemJson]):(itemChildren||[]).map((subItemJson=>(0,jimu_core.Yac)(jimu_core.q_G.Fragment,{key:subItemJson.itemKey},refComponent.renderItemJson([subItemJson,rootItemJson]))))))},setDragItemJsons(actionData,refComponent){this.setState((({dragItems})=>({dragItems:[...dragItems.filter((dragItem=>dragItem.dragEvent.target!==actionData.dragEvent.target)),..."dragstart"===actionData.type?[actionData]:[]]})))},getDragItemJsons(actionData,refComponent){return this.state.dragItems.find((dragItem=>dragItem.dragEvent.target===actionData.dragEvent.target))}},TreeMain.defaultProps=Object.assign({className:"",topTag:"div",treeAlignmentType:TreeAlignmentType.Typical,singleLineText:!1,treeStyle:TreeStyle.Card,rootItemVisible:!1,dndEnabled:!1,withStates:{},handleAction},TreeMain.defaultHandleActionMap);try{TreeMain.displayName="TreeMain",TreeMain.__docgenInfo={description:"",displayName:"TreeMain",props:{className:{defaultValue:{value:""},description:"",name:"className",required:!1,type:{name:"string"}},isTree:{defaultValue:null,description:"",name:"isTree",required:!1,type:{name:"boolean"}},topTag:{defaultValue:{value:"div"},description:"",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},uuid:{defaultValue:null,description:"",name:"uuid",required:!1,type:{name:"string"}},collapseStyle:{defaultValue:null,description:"",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},isMultiSelection:{defaultValue:null,description:"",name:"isMultiSelection",required:!1,type:{name:"boolean"}},checkboxLinkage:{defaultValue:null,description:"",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},treeStyle:{defaultValue:{value:"TreeStyle.Card"},description:"",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:{value:"false"},description:"",name:"singleLineText",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"",name:"searchedText",required:!1,type:{name:"string"}},rootItemVisible:{defaultValue:{value:"false"},description:"",name:"rootItemVisible",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},dndEnabled:{defaultValue:{value:"false"},description:"",name:"dndEnabled",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:null,description:"",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:null,description:"",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},rootItemJson:{defaultValue:null,description:"",name:"rootItemJson",required:!0,type:{name:"TreeItemType"}},withStates:{defaultValue:{value:"{}"},description:"",name:"withStates",required:!1,type:{name:"any"}},handleAction:{defaultValue:{value:"treeUtils.handleAction"},description:"",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeMainActionType | TreeItemActionType, actionData: ArgT, refComponent: TreeMain | _TreeItem) => ResT"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},renderOverrideMain:{defaultValue:null,description:"",name:"renderOverrideMain",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: TreeMain) => any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/common/tree-main.tsx#TreeMain"]={docgenInfo:TreeMain.__docgenInfo,name:"TreeMain",path:"../jimu-ui/basic/lib/list-tree/common/tree-main.tsx#TreeMain"})}catch(__react_docgen_typescript_loader_error){}class tree_Tree extends jimu_core.q_G.Component{constructor(props){super(props),tree_Tree.count++,this.localRandomId="jimu-tree-"+tree_Tree.count,this.state={searchForText:"",filterEnabled:!1}}render(){return this.props.handleAction(TreeActionType.RenderOverride,{},this)}}tree_Tree.count=-1,tree_Tree.defaultHandleActionMap={renderOverride:(actionData,refComponent)=>{var _a;const{className,size,topTag,isTree=!0,treeAlignmentType,collapseStyle,showCheckbox=!0,isMultiSelection=!0,checkboxLinkage=!0,treeStyle,singleLineText,searchedText,disableDoubleClickTitle=!1,rootItemJson,rootItemVisible,dndEnabled,showRemoveIconForDisabledItem,intl,forwardRef}=refComponent.props,{searchForText,filterEnabled}=refComponent.state,currentClassName=["jimu-tree",className,`jimu-tree_template-${treeStyle.toLowerCase()}`,`jimu-tree_searched-text-${!!searchForText}`,`jimu-tree_filter-enabled-${!!filterEnabled}`].join(" ");let emptyListLabel="";isTree||(null===(_a=null==rootItemJson?void 0:rootItemJson.itemChildren)||void 0===_a?void 0:_a.length)>0||(emptyListLabel=intl.formatMessage({id:"emptyListWarning",defaultMessage:"emptyListWarning"}));const TopTag=topTag;return(0,jimu_core.Yac)(TopTag,{ref:forwardRef,className:currentClassName,id:refComponent.localRandomId,tabIndex:-1,"aria-label":emptyListLabel,css:function getStyle(){return jimu_core.AHW`
          &.jimu-tree {
            display: flex;
            flex-flow: wrap;
            height: 100%;
            overflow-y: auto;
            &.jimu-tree_is-list-false {
              .jimu-tree-search,
              .jimu-tree-mod__widget_filter {
                visibility: hidden;
              }
            }
            &.jimu-tree_searched-text-true,
            &.jimu-tree_filter-enabled-true {
              .jimu-tree-mod__widget_add {
                visibility: hidden;
              }
            }
          }
        `}},(0,jimu_core.Yac)(TreeMain,Object.assign({className:"",uuid:refComponent.localRandomId,treeAlignmentType,collapseStyle,isMultiSelection:null!=isMultiSelection?isMultiSelection:showCheckbox,checkboxLinkage,treeStyle,singleLineText,searchedText,topTag:TopTag,size,isTree,rootItemJson,rootItemVisible,dndEnabled,disableDoubleClickTitle,showRemoveIconForDisabledItem,withStates:refComponent.state},Object.assign({},...[...Object.values(TreeItemActionType),...Object.values(TreeMainActionType)].map((k=>{var _a;return{[k]:null===(_a=refComponent.props[k])||void 0===_a?void 0:_a.bind(refComponent)}}))))))},isItemDisplayable(actionData,refComponent){const{itemJsons:[{itemStateChecked}]}=refComponent.props;return!this.state.filterEnabled||!!itemStateChecked}},tree_Tree.defaultProps=Object.assign({theme:(0,jimu_core.J3Z)({}),className:"",topTag:"div",treeAlignmentType:TreeAlignmentType.Typical,treeStyle:TreeStyle.Card,rootItemVisible:!1,dndEnabled:!1,handleAction},tree_Tree.defaultHandleActionMap);const list_tree_tree_Tree=(0,jimu_theme.SL)((0,jimu_core.j4T)(tree_Tree));try{tree_Tree.displayName="_Tree",tree_Tree.__docgenInfo={description:"The `Tree` component allows users to navigate complex data relationships by using multiple hierarchical structures.\n\n```ts\nimport { Tree } from 'jimu-ui/basic/list-tree'\n```",displayName:"_Tree",props:{treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"The key of template that you want to use to render the content.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:{value:"TreeStyle.Card"},description:"The styles for component.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},isTree:{defaultValue:{value:"tree"},description:"It's used to check if tree since List extends Tree.\n@ignore",name:"isTree",required:!1,type:{name:"boolean"}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},rootItemJson:{defaultValue:null,description:"Root item node of the tree.",name:"rootItemJson",required:!0,type:{name:"TreeItemType"}},rootItemVisible:{defaultValue:{value:"false"},description:"Whether to display the root item itself.",name:"rootItemVisible",required:!1,type:{name:"boolean"}},handleAction:{defaultValue:{value:"treeUtils.handleAction"},description:"The callback that will fire when any action is triggered (use default prop value unless for advanced usage)\n@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeActionType | TreeMainActionType | TreeItemActionType, actionData: ArgT, refComponent: _Tree | TreeMain | _TreeItem) => ResT"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},className:{defaultValue:{value:""},description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},topTag:{defaultValue:{value:"div"},description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:{value:"false"},description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},checkboxLinkage:{defaultValue:{value:"true"},description:"Whether the specific tree node change affects parent and child nodes.\nOnly valid when isMultiSelection is true.",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:{value:"Immutable({})"},description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}},intl:{defaultValue:null,description:"@ignore",name:"intl",required:!0,type:{name:"IntlShape"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/tree.tsx#_Tree"]={docgenInfo:tree_Tree.__docgenInfo,name:"_Tree",path:"../jimu-ui/basic/lib/list-tree/tree.tsx#_Tree"})}catch(__react_docgen_typescript_loader_error){}try{list_tree_tree_Tree.displayName="Tree",list_tree_tree_Tree.__docgenInfo={description:"The `Tree` component allows users to navigate complex data relationships by using multiple hierarchical structures.\n\n```ts\nimport { Tree } from 'jimu-ui/basic/list-tree'\n```",displayName:"Tree",props:{className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"The key of template that you want to use to render the content.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"The styles for component.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},isTree:{defaultValue:{value:"tree"},description:"It's used to check if tree since List extends Tree.\n@ignore",name:"isTree",required:!1,type:{name:"boolean"}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},rootItemJson:{defaultValue:null,description:"Root item node of the tree.",name:"rootItemJson",required:!0,type:{name:"TreeItemType"}},rootItemVisible:{defaultValue:null,description:"Whether to display the root item itself.",name:"rootItemVisible",required:!1,type:{name:"boolean"}},handleAction:{defaultValue:null,description:"The callback that will fire when any action is triggered (use default prop value unless for advanced usage)\n@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeActionType | TreeMainActionType | TreeItemActionType, actionData: ArgT, refComponent: _Tree | TreeMain | _TreeItem) => ResT"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},checkboxLinkage:{defaultValue:{value:"true"},description:"Whether the specific tree node change affects parent and child nodes.\nOnly valid when isMultiSelection is true.",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/tree.tsx#Tree"]={docgenInfo:list_tree_tree_Tree.__docgenInfo,name:"Tree",path:"../jimu-ui/basic/lib/list-tree/tree.tsx#Tree"})}catch(__react_docgen_typescript_loader_error){}var list_rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function list_ListComponent(props){const{className="",itemsJson=[],showCheckbox=!1,isMultiSelection=!1,treeAlignmentType=TreeAlignmentType.Intact,treeStyle=TreeStyle.Card}=props,restProps=list_rest(props,["className","itemsJson","showCheckbox","isMultiSelection","treeAlignmentType","treeStyle"]),listRef=jimu_core.q_G.useRef(null),itemJson=jimu_core.q_G.useRef(props.itemsJson);return jimu_core.q_G.useEffect((()=>{if(window.jimuConfig.isBuilder&&(0,jimu_core.hfc)()&&itemJson.current.length>props.itemsJson.length){const list=document.querySelector(`#${listRef.current.id}`),listItems=list.querySelectorAll(".jimu-tree-item__body.jimu-tree-item_selectable_true"),removeSomeProps=obj=>{const{itemStateCommands}=obj;return list_rest(obj,["itemStateCommands"])},removedIndex=itemJson.current.findIndex((item=>!props.itemsJson.some((newItem=>jimu_core.CM0.isDeepEqual(removeSomeProps(newItem),removeSomeProps(item))))));let focusedItem=null;focusedItem=listItems.length>removedIndex?listItems[removedIndex]:listItems.length>0?listItems[listItems.length-1]:list,(0,jimu_core.u02)(focusedItem,!0)}itemJson.current=props.itemsJson}),[props.itemsJson]),(0,jimu_core.Yac)(list_tree_tree_Tree,Object.assign({},restProps,{className:`${className} jimu-list`,isTree:!1,forwardRef:node=>{listRef.current=node},isMultiSelection:isMultiSelection||showCheckbox,checkboxLinkage:!1,treeAlignmentType,treeStyle,rootItemJson:(aItemsJson=[...itemsJson],Object.assign(aItemsJson,{itemKey:"",itemChildren:aItemsJson}))}));var aItemsJson}const list_List=(0,jimu_theme.SL)(list_ListComponent);try{list_ListComponent.displayName="ListComponent",list_ListComponent.__docgenInfo={description:"The `List` component allows users to add, manage, and interact with items in a list.\n\n```ts\nimport { List } from 'jimu-ui/basic/list-tree'\n```",displayName:"ListComponent",props:{itemsJson:{defaultValue:null,description:"The list item nodes array.",name:"itemsJson",required:!1,type:{name:"TreeItemsType"}},className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:null,description:"Tree alignment type.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"Tree style.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:{value:"false"},description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:null,description:"",name:"theme",required:!0,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/list.tsx#ListComponent"]={docgenInfo:list_ListComponent.__docgenInfo,name:"ListComponent",path:"../jimu-ui/basic/lib/list-tree/list.tsx#ListComponent"})}catch(__react_docgen_typescript_loader_error){}try{list_List.displayName="List",list_List.__docgenInfo={description:"The `List` component allows users to add, manage, and interact with items in a list.\n\n```ts\nimport { List } from 'jimu-ui/basic/list-tree'\n```",displayName:"List",props:{className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:null,description:"Tree alignment type.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"Tree style.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:{value:"false"},description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},itemsJson:{defaultValue:null,description:"The list item nodes array.",name:"itemsJson",required:!1,type:{name:"TreeItemsType"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/lib/list-tree/list.tsx#List"]={docgenInfo:list_List.__docgenInfo,name:"List",path:"../jimu-ui/basic/lib/list-tree/list.tsx#List"})}catch(__react_docgen_typescript_loader_error){}try{_TreeItem.displayName="_TreeItem",_TreeItem.__docgenInfo={description:"The TreeItem component.\n\n```ts\nimport { TreeItem } from 'jimu-ui/basic/list-tree'\n```",displayName:"_TreeItem",props:{className:{defaultValue:{value:""},description:"",name:"className",required:!1,type:{name:"string"}},treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},isMultiSelection:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item",name:"isMultiSelection",required:!1,type:{name:"boolean"}},treeStyle:{defaultValue:{value:"TreeStyle.Card"},description:"",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"@ignore",name:"searchedText",required:!1,type:{name:"string"}},checkboxLinkage:{defaultValue:null,description:"",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},dndEnabled:{defaultValue:{value:"false"},description:"",name:"dndEnabled",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:null,description:"",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},itemJsons:{defaultValue:null,description:"",name:"itemJsons",required:!0,type:{name:"TreeItemInRelationType"}},withStates:{defaultValue:{value:"{}"},description:"@ignore",name:"withStates",required:!1,type:{name:"{ [key: string]: any; }"}},handleAction:{defaultValue:{value:"treeUtils.handleAction"},description:"@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeItemActionType, actionData: ArgT, refComponent: _TreeItem) => ResT"}},itemBlockInfo:{defaultValue:null,description:"@ignore",name:"itemBlockInfo",required:!1,type:{name:"TreeItemBlockInfoType"}},showRemoveIconForDisabledItem:{defaultValue:null,description:"",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:{value:"{}"},description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}},intl:{defaultValue:null,description:"@ignore",name:"intl",required:!0,type:{name:"IntlShape"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#_TreeItem"]={docgenInfo:_TreeItem.__docgenInfo,name:"_TreeItem",path:"../jimu-ui/basic/list-tree.tsx#_TreeItem"})}catch(__react_docgen_typescript_loader_error){}try{TreeItem.displayName="TreeItem",TreeItem.__docgenInfo={description:"The TreeItem component.\n\n```ts\nimport { TreeItem } from 'jimu-ui/basic/list-tree'\n```",displayName:"TreeItem",props:{theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#TreeItem"]={docgenInfo:TreeItem.__docgenInfo,name:"TreeItem",path:"../jimu-ui/basic/list-tree.tsx#TreeItem"})}catch(__react_docgen_typescript_loader_error){}try{TreeItemProps.displayName="TreeItemProps",TreeItemProps.__docgenInfo={description:"The TreeItem component props.",displayName:"TreeItemProps",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#TreeItemProps"]={docgenInfo:TreeItemProps.__docgenInfo,name:"TreeItemProps",path:"../jimu-ui/basic/list-tree.tsx#TreeItemProps"})}catch(__react_docgen_typescript_loader_error){}try{_Tree.displayName="_Tree",_Tree.__docgenInfo={description:"The `Tree` component allows users to navigate complex data relationships by using multiple hierarchical structures.\n\n```ts\nimport { Tree } from 'jimu-ui/basic/list-tree'\n```",displayName:"_Tree",props:{treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"The key of template that you want to use to render the content.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:{value:"TreeStyle.Card"},description:"The styles for component.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},isTree:{defaultValue:{value:"tree"},description:"It's used to check if tree since List extends Tree.\n@ignore",name:"isTree",required:!1,type:{name:"boolean"}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},rootItemJson:{defaultValue:null,description:"Root item node of the tree.",name:"rootItemJson",required:!0,type:{name:"TreeItemType"}},rootItemVisible:{defaultValue:{value:"false"},description:"Whether to display the root item itself.",name:"rootItemVisible",required:!1,type:{name:"boolean"}},handleAction:{defaultValue:{value:"treeUtils.handleAction"},description:"The callback that will fire when any action is triggered (use default prop value unless for advanced usage)\n@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeActionType | TreeMainActionType | TreeItemActionType, actionData: ArgT, refComponent: _Tree | TreeMain | _TreeItem) => ResT"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},className:{defaultValue:{value:""},description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},topTag:{defaultValue:{value:"div"},description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:{value:"false"},description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},checkboxLinkage:{defaultValue:{value:"true"},description:"Whether the specific tree node change affects parent and child nodes.\nOnly valid when isMultiSelection is true.",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:{value:"Immutable({})"},description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}},intl:{defaultValue:null,description:"@ignore",name:"intl",required:!0,type:{name:"IntlShape"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#_Tree"]={docgenInfo:_Tree.__docgenInfo,name:"_Tree",path:"../jimu-ui/basic/list-tree.tsx#_Tree"})}catch(__react_docgen_typescript_loader_error){}try{Tree.displayName="Tree",Tree.__docgenInfo={description:"The `Tree` component allows users to navigate complex data relationships by using multiple hierarchical structures.\n\n```ts\nimport { Tree } from 'jimu-ui/basic/list-tree'\n```",displayName:"Tree",props:{className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:{value:"TreeAlignmentType.Typical"},description:"The key of template that you want to use to render the content.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"The styles for component.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:null,description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},isTree:{defaultValue:{value:"tree"},description:"It's used to check if tree since List extends Tree.\n@ignore",name:"isTree",required:!1,type:{name:"boolean"}},collapseStyle:{defaultValue:{value:"TreeCollapseStyle.Plus"},description:"The style of expand/collapse icon.",name:"collapseStyle",required:!1,type:{name:"enum",value:[{value:'"PLUS_MINUS"'},{value:'"ARROW"'}]}},rootItemJson:{defaultValue:null,description:"Root item node of the tree.",name:"rootItemJson",required:!0,type:{name:"TreeItemType"}},rootItemVisible:{defaultValue:null,description:"Whether to display the root item itself.",name:"rootItemVisible",required:!1,type:{name:"boolean"}},handleAction:{defaultValue:null,description:"The callback that will fire when any action is triggered (use default prop value unless for advanced usage)\n@ignore",name:"handleAction",required:!1,type:{name:"<ArgT, ResT>(actionKey: TreeActionType | TreeMainActionType | TreeItemActionType, actionData: ArgT, refComponent: _Tree | TreeMain | _TreeItem) => ResT"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},checkboxLinkage:{defaultValue:{value:"true"},description:"Whether the specific tree node change affects parent and child nodes.\nOnly valid when isMultiSelection is true.",name:"checkboxLinkage",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#Tree"]={docgenInfo:Tree.__docgenInfo,name:"Tree",path:"../jimu-ui/basic/list-tree.tsx#Tree"})}catch(__react_docgen_typescript_loader_error){}try{ListComponent.displayName="ListComponent",ListComponent.__docgenInfo={description:"The `List` component allows users to add, manage, and interact with items in a list.\n\n```ts\nimport { List } from 'jimu-ui/basic/list-tree'\n```",displayName:"ListComponent",props:{itemsJson:{defaultValue:null,description:"The list item nodes array.",name:"itemsJson",required:!1,type:{name:"TreeItemsType"}},className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:null,description:"Tree alignment type.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"Tree style.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:{value:"false"},description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},theme:{defaultValue:null,description:"",name:"theme",required:!0,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#ListComponent"]={docgenInfo:ListComponent.__docgenInfo,name:"ListComponent",path:"../jimu-ui/basic/list-tree.tsx#ListComponent"})}catch(__react_docgen_typescript_loader_error){}try{List.displayName="List",List.__docgenInfo={description:"The `List` component allows users to add, manage, and interact with items in a list.\n\n```ts\nimport { List } from 'jimu-ui/basic/list-tree'\n```",displayName:"List",props:{className:{defaultValue:null,description:"Add class name to the component.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Defines the size of the Tree item.",name:"size",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"sm"'},{value:'"lg"'}]}},treeAlignmentType:{defaultValue:null,description:"Tree alignment type.",name:"treeAlignmentType",required:!1,type:{name:"enum",value:[{value:'"TYPICAL"'},{value:'"INTACT"'}]}},treeStyle:{defaultValue:null,description:"Tree style.",name:"treeStyle",required:!1,type:{name:"enum",value:[{value:'"BASIC"'},{value:'"CARD"'}]}},singleLineText:{defaultValue:{value:"false"},description:"Single line text is displayed. Only for layer selector now.\n@ignore",name:"singleLineText",required:!1,type:{name:"boolean"}},forwardRef:{defaultValue:null,description:"ForwardRef to component outer div.\n@ignore",name:"forwardRef",required:!1,type:{name:"(ref: any) => void"}},topTag:{defaultValue:null,description:"A component or tag name to render the component's top level node.\n@ignore",name:"topTag",required:!1,type:{name:"string | ComponentType<any>"}},dndEnabled:{defaultValue:null,description:"Whether to support drag-and-drop feature.",name:"dndEnabled",required:!1,type:{name:"boolean"}},showCheckbox:{defaultValue:{value:"false"},description:"Whether to show checkbox for every item.\nUse `checkboxLinkage` instead.\n@deprecated\n@ignore",name:"showCheckbox",required:!1,type:{name:"boolean"}},disableDoubleClickTitle:{defaultValue:{value:"false"},description:"Whether to disable the double-click on the title to enter edit mode.",name:"disableDoubleClickTitle",required:!1,type:{name:"boolean"}},showRemoveIconForDisabledItem:{defaultValue:{value:"false"},description:"Whether to show the remove icon for any disabled item.",name:"showRemoveIconForDisabledItem",required:!1,type:{name:"boolean"}},isMultiSelection:{defaultValue:{value:"true"},description:"Whether to support multi-selection.",name:"isMultiSelection",required:!1,type:{name:"boolean"}},searchedText:{defaultValue:null,description:"Wrap the searchedText with a <strong/> TAG when it exists.\n@ignore",name:"searchedText",required:!1,type:{name:"string"}},renderOverrideItemDraggableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDraggableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDroppableContainer:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDroppableContainer",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemChildrenToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemChildrenToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDragHandle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDragHandle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailToggle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailToggle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemIcon:{defaultValue:null,description:"@ignore",name:"renderOverrideItemIcon",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemTitle:{defaultValue:null,description:"@ignore",name:"renderOverrideItemTitle",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemCommands:{defaultValue:null,description:"@ignore",name:"renderOverrideItemCommands",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemMainLine:{defaultValue:null,description:"Render the custom main line content.",name:"renderOverrideItemMainLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemDetailLine:{defaultValue:null,description:"@ignore",name:"renderOverrideItemDetailLine",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemBody:{defaultValue:null,description:"@ignore",name:"renderOverrideItemBody",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemContent:{defaultValue:null,description:"@ignore",name:"renderOverrideItemContent",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItemSubitems:{defaultValue:null,description:"@ignore",name:"renderOverrideItemSubitems",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},renderOverrideItem:{defaultValue:null,description:"@ignore",name:"renderOverrideItem",required:!1,type:{name:"(actionData: TreeRenderOverrideItemDataType, refComponent: _TreeItem) => any"}},overrideItemBlockInfo:{defaultValue:null,description:"Fired when getting the block layout info.",name:"overrideItemBlockInfo",required:!1,type:{name:"(actionData: TreeOverrideItemBlockInfoActionDataType, refComponent: _TreeItem) => TreeItemBlockInfoType"}},handleInitTreeItemDndDropZone:{defaultValue:null,description:"Fired when adding or removing dnd features into the component.\n@ignore",name:"handleInitTreeItemDndDropZone",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleInitTreeItemDndDrag:{defaultValue:null,description:"@ignore",name:"handleInitTreeItemDndDrag",required:!1,type:{name:"(actionData: TreeInitDndActionDataType, refComponent: _TreeItem) => void"}},handleDidDrop:{defaultValue:null,description:"Fired when dropping a dragging item.\n@ignore",name:"handleDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},handleDisabledItemRemoved:{defaultValue:null,description:"Fired when checking if the disabled item supports to be removed.\n@ignore",name:"handleDisabledItemRemoved",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => void"}},handleToggleDetail:{defaultValue:null,description:"Fired when detail content is toggling for display.\n@ignore",name:"handleToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},handleExpandItem:{defaultValue:null,description:"Fired when expanding or collapsing the children.\n@ignore",name:"handleExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},handleEditingTextChange:{defaultValue:null,description:"Fired when changing the editing text of item title.\n@ignore",name:"handleEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleExitEditing:{defaultValue:null,description:"Fired when exiting the editing text mode.\n@ignore",name:"handleExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleStartEditing:{defaultValue:null,description:"Fired when starting to edit text of item title.\n@ignore",name:"handleStartEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},handleFindSearchText:{defaultValue:null,description:"Fired when searching for filter text.\n@ignore",name:"handleFindSearchText",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => any"}},isItemDisplayable:{defaultValue:null,description:"Fired when checking if the item should be displayed.",name:"isItemDisplayable",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => boolean"}},isItemFocused:{defaultValue:null,description:"Fired when checking if an item is focused.\nPlease use `itemStateChecked` to set the focus state for each tree item.\n@deprecated",name:"isItemFocused",required:!1,type:{name:"(actionData: any, refComponent: _TreeItem) => boolean"}},handleClickItemBody:{defaultValue:null,description:"Fired when clicking the item body.\n@ignore",name:"handleClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleClickItemTitle:{defaultValue:null,description:"Fired when clicking the item title.\n@ignore",name:"handleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleDoubleClickItemTitle:{defaultValue:null,description:"Fired when double-clicking the item title.\n@ignore",name:"handleDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleCheckboxChanged:{defaultValue:null,description:"Fired when the check state of the item is changed.\n@ignore",name:"handleCheckboxChanged",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},handleUpdateItem:{defaultValue:null,description:"Fired when item json is changed.\n@ignore",name:"handleUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},getDragItemJsons:{defaultValue:null,description:"Fired when getting current drag item data.\n@ignore",name:"getDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => TreeDragItemActionDataType"}},setDragItemJsons:{defaultValue:null,description:"Fired when setting current drag item data.\n@ignore",name:"setDragItemJsons",required:!1,type:{name:"(actionData: TreeDragItemActionDataType, refComponent: _TreeItem) => void"}},handleFocusItem:{defaultValue:null,description:"Fired when setting the item focused.\n@ignore",name:"handleFocusItem",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},isItemDroppable:{defaultValue:null,description:"Triggered to verify if the current item is being targeted by a dragged item.\nThe possible drop positions are inside, above, or below.",name:"isItemDroppable",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},isFolder:{defaultValue:null,description:"Fired when checking if the current item is a folder.\nDisable the checkbox if the current item is in the root and has no children.",name:"isFolder",required:!1,type:{name:"(actionData: TreeCheckDropItemActionDataType, refComponent: _TreeItem) => void"}},onDidDrop:{defaultValue:null,description:"Fired when a dragged item is dropped.",name:"onDidDrop",required:!1,type:{name:"(actionData: TreeDropItemActionDataType, refComponent: _TreeItem) => void"}},onToggleDetail:{defaultValue:null,description:"Fired when the detail content is expanded for display.",name:"onToggleDetail",required:!1,type:{name:"(actionData: TreeToggleItemDetailActionDataType, refComponent: _TreeItem) => void"}},onExpandItem:{defaultValue:null,description:"Fired when children are expanded or collapsed.",name:"onExpandItem",required:!1,type:{name:"(actionData: TreeExpandItemActionDataType, refComponent: _TreeItem) => void"}},onEditingTextChange:{defaultValue:null,description:"Fired when the text editing of an item title is changed.",name:"onEditingTextChange",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onExitEditing:{defaultValue:null,description:"Fired when the text-editing mode is exited.",name:"onExitEditing",required:!1,type:{name:"(actionData: TreeEditingItemDataType, refComponent: _TreeItem) => void"}},onClickItemBody:{defaultValue:null,description:"Fired when the item body is clicked.",name:"onClickItemBody",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onDoubleClickItemTitle:{defaultValue:null,description:"Fired when the item title is double-clicked.",name:"onDoubleClickItemTitle",required:!1,type:{name:"(actionData: TreeActionDataType, refComponent: _TreeItem) => void"}},onClickItemCommand:{defaultValue:null,description:"Fired when any command item is clicked.",name:"onClickItemCommand",required:!1,type:{name:"(actionData: CommandActionDataType, refComponent: _TreeItem) => void"}},onUpdateItem:{defaultValue:null,description:"Fired when the item is updated.",name:"onUpdateItem",required:!1,type:{name:"(actionData: UpdateTreeActionDataType, refComponent: _TreeItem) => void"}},itemsJson:{defaultValue:null,description:"The list item nodes array.",name:"itemsJson",required:!1,type:{name:"TreeItemsType"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"IMThemeVariables"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#List"]={docgenInfo:List.__docgenInfo,name:"List",path:"../jimu-ui/basic/list-tree.tsx#List"})}catch(__react_docgen_typescript_loader_error){}try{TreeSelectionStyle.displayName="TreeSelectionStyle",TreeSelectionStyle.__docgenInfo={description:"Only used inside component.",displayName:"TreeSelectionStyle",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle"]={docgenInfo:TreeSelectionStyle.__docgenInfo,name:"TreeSelectionStyle",path:"../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle"})}catch(__react_docgen_typescript_loader_error){}try{HighlightMark.displayName="TreeSelectionStyle.HighlightMark",HighlightMark.__docgenInfo={description:"Only for List component & single",displayName:"TreeSelectionStyle.HighlightMark",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle.HighlightMark"]={docgenInfo:TreeSelectionStyle.HighlightMark.__docgenInfo,name:"TreeSelectionStyle.HighlightMark",path:"../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle.HighlightMark"})}catch(__react_docgen_typescript_loader_error){}try{CheckSelection.displayName="TreeSelectionStyle.CheckSelection",CheckSelection.__docgenInfo={description:"Two styles for Tree component\nCheck: for Default style\nBox: for Card style",displayName:"TreeSelectionStyle.CheckSelection",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle.CheckSelection"]={docgenInfo:TreeSelectionStyle.CheckSelection.__docgenInfo,name:"TreeSelectionStyle.CheckSelection",path:"../jimu-ui/basic/list-tree.tsx#TreeSelectionStyle.CheckSelection"})}catch(__react_docgen_typescript_loader_error){}}}]);
//# sourceMappingURL=6448.6599c68b.iframe.bundle.js.map