"use strict";(self.webpackChunkarcgis_experience_builder_design_system=self.webpackChunkarcgis_experience_builder_design_system||[]).push([[6976],{"./stories/jimu-ui/lib/text-area/text-area.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,Validation:()=>Validation,default:()=>__WEBPACK_DEFAULT_EXPORT__});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),jimu_ui__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../jimu-ui/index.tsx"),_storybook_decorators__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./.storybook/decorators/index.tsx");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/jimu-ui/index/TextArea",decorators:[_storybook_decorators__WEBPACK_IMPORTED_MODULE_2__.QY,_storybook_decorators__WEBPACK_IMPORTED_MODULE_2__.Xx],component:jimu_ui__WEBPACK_IMPORTED_MODULE_1__._TextArea},Basic=(args=>jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("div",{style:{display:"flex",flexDirection:"column"}},jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"normal: ",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{className:"mb-4",placeholder:"placeholder..."})),jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"readOnly: ",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{readOnly:!0,className:"mb-4",value:"this is a read only text"})),jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"disabled: ",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{disabled:!0,className:"mb-4"})),jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"readonly: ",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{readOnly:!0,className:"mb-4",value:"some text"})))).bind({}),Validation=(args=>jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("div",null,jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("div",null,jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"required: ",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{required:!0,className:"mb-4"}))),jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("div",null,jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"custom validation on change:",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{className:"mb-4",placeholder:"input abc",checkValidityOnChange:text=>"abc"===text?{valid:!0}:{valid:!1,msg:"Value must be abc"}}))),jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("div",null,jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement("label",null,"custom validation on accept:",jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea,{className:"mb-4",placeholder:"input abc",checkValidityOnAccept:text=>new Promise((resolve=>{const timeoutHandler=setTimeout((()=>{resolve("abc"===text?{valid:!0}:{valid:!1,msg:"Value must be abc"}),clearTimeout(timeoutHandler)}),2e3)}))}))))).bind({});Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'args => {\n  return <div style={{\n    display: \'flex\',\n    flexDirection: \'column\'\n  }}>\r\n      <label>normal: <TextArea className="mb-4" placeholder="placeholder..." /></label>\r\n      <label>readOnly: <TextArea readOnly className="mb-4" value="this is a read only text" /></label>\r\n      <label>disabled: <TextArea disabled className="mb-4" /></label>\r\n      <label>readonly: <TextArea readOnly className="mb-4" value="some text" /></label>\r\n    </div>;\n}',...Basic.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:'args => {\n  const asyncValidCheck = (text): Promise<ValidityResult> => {\n    return new Promise(resolve => {\n      const timeoutHandler = setTimeout(() => {\n        if (text === \'abc\') {\n          resolve({\n            valid: true\n          });\n        } else {\n          resolve({\n            valid: false,\n            msg: \'Value must be abc\'\n          });\n        }\n        clearTimeout(timeoutHandler);\n      }, 2000);\n    });\n  };\n  const syncValidCheck = (text): ValidityResult => {\n    if (text === \'abc\') {\n      return {\n        valid: true\n      };\n    }\n    return {\n      valid: false,\n      msg: \'Value must be abc\'\n    };\n  };\n  return <div>\r\n      <div>\r\n        <label>required: <TextArea required className="mb-4" /></label>\r\n      </div>\r\n      <div>\r\n        <label>custom validation on change:\r\n          <TextArea className="mb-4" placeholder="input abc" checkValidityOnChange={syncValidCheck} />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>custom validation on accept:\r\n          <TextArea className="mb-4" placeholder="input abc" checkValidityOnAccept={asyncValidCheck} />\r\n        </label>\r\n      </div>\r\n    </div>;\n}',...Validation.parameters?.docs?.source}}}}}]);