{"version":3,"file":"icons-mdx.f877733c.iframe.bundle.js","mappings":";;;;;AAUA;;;;;;;;;;;;ACmBA;;;;;;;;;;;;;;;;;;;;;;;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sources":["webpack://arcgis-experience-builder-design-system/./stories/jimu-icons/components/code.tsx","webpack://arcgis-experience-builder-design-system/./stories/jimu-icons/components/notification.tsx","webpack://arcgis-experience-builder-design-system/./stories/jimu-icons/components/icon-item.tsx"],"sourcesContent":["/**\n * @jsx jsx\n */\nimport { css, jsx } from 'jimu-core';\nconst styles = css `\r\n  padding: 2px 4px;\r\n  font-size: 12px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 2px;\r\n`;\nexport const Code = ({ children }) => jsx(\"code\", { css: styles }, children);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** @jsx jsx */\nimport { React, jsx, css } from 'jimu-core';\nimport { AlertPanel } from 'jimu-ui';\nconst useStyles = () => {\n    return React.useMemo(() => {\n        return css `\r\n      width: fit-content !important;\r\n      min-width: 240px;\r\n      position: fixed;\r\n      left: 0;\r\n      right: 0;\r\n      top: 100px;\r\n      margin: 5px auto;\r\n      z-index: 2002;\r\n      .left-part .jimu-icon {\r\n        align-self: center !important;\r\n      }\r\n    `;\n    }, []);\n};\nexport const Notification = (props) => {\n    const { children } = props, others = __rest(props, [\"children\"]);\n    const styles = useStyles();\n    return jsx(AlertPanel, Object.assign({ css: styles }, others), children);\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/** @jsx jsx */\nimport { React, css, jsx, classNames } from 'jimu-core';\nimport { Notification } from './notification';\nconst useStyle = (cornerMark) => {\n    return React.useMemo(() => {\n        return css `\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    margin: 3px 0;\r\n    padding: 10px 30px;\r\n    width: 235px;\r\n    border-radius: 3px;\r\n    ::after {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      color: #fff;\r\n      line-height: 130px;\r\n      text-align: center;\r\n      opacity: 0;\r\n      transition: all .3s cubic-bezier(.18,.89,.32,1.28);\r\n      content: \"Copied!\";\r\n    }\r\n    ${cornerMark && `\r\n      ::before {\r\n        content: '';\r\n        width: 8px;\r\n        height: 8px;\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n        border-width: 5px;\r\n        border-bottom: solid;\r\n        border-right: solid;\r\n        border-color: ${cornerMark};\r\n      }\r\n      `}\r\n    .jimu-icon-component, .jimu-icon {\r\n      margin: 12px 0 12px;\r\n      transition: color .3s ease-in-out;\r\n      transform: scale(1);\r\n    }\r\n    .icon-label {\r\n      display: block;\r\n      font-family: Monaco,ubuntu mono,monospace;\r\n      white-space: nowrap;\r\n      text-align: center;\r\n      transform: scale(.83);\r\n      transition: color .3s ease-in-out;\r\n      font-size: 14px;\r\n      line-height: 1;\r\n      text-overflow: ellipsis;\r\n      max-width: 100%;\r\n      overflow: hidden;\r\n    }\r\n    :hover {\r\n      color: #fff;\r\n      background-color: #1890ff;\r\n      .jimu-icon-component, .jimu-icon {\r\n        transform: scale(1.4);\r\n        transition: transform .3s cubic-bezier(.18,.89,.32,1.28);\r\n      }\r\n    }\r\n    &.copying {\r\n      :hover {\r\n        color: #fff3;\r\n        ::after {\r\n          opacity: 1;\r\n          line-height: 70px;\r\n        }\r\n      }\r\n    }\r\n  `;\n    }, [cornerMark]);\n};\nconst useCopy = (props) => {\n    const { text, onStart, onEnd, onClick, timeout } = props;\n    const [copying, setCopying] = React.useState(false);\n    const unmountRef = React.useRef(false);\n    React.useEffect(() => () => { unmountRef.current = true; }, []);\n    const handleClick = (event) => __awaiter(void 0, void 0, void 0, function* () {\n        try {\n            setCopying(true);\n            onStart === null || onStart === void 0 ? void 0 : onStart();\n            yield navigator.clipboard.writeText(text);\n            setTimeout(() => {\n                if (unmountRef.current)\n                    return;\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n                setCopying(false);\n            }, timeout);\n        }\n        catch (error) {\n            console.error('Copy failed' + error);\n        }\n        if (typeof onClick === 'function') {\n            onClick(event);\n        }\n    });\n    return [copying, handleClick];\n};\nexport const IconItem = (props) => {\n    const { className, name, copyText, notification, timeout = 700, cornerMark, children } = props;\n    const [copying, handleClick] = useCopy({ text: copyText, timeout });\n    const [showNotification, setShowNotification] = React.useState(false);\n    React.useEffect(() => {\n        if (copying) {\n            setShowNotification(true);\n        }\n        else {\n            delayHideNotification();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [copying]);\n    const hoverNotificationRef = React.useRef(false);\n    const delayHideNotification = () => {\n        const timeoutID = setTimeout(() => {\n            if (hoverNotificationRef.current) {\n                clearTimeout(timeoutID);\n                delayHideNotification();\n            }\n            setShowNotification(false);\n        }, timeout);\n    };\n    const style = useStyle(cornerMark);\n    const classes = classNames('icon-item', { copying }, className);\n    return (jsx(React.Fragment, null,\n        jsx(\"div\", { className: classes, css: style, onClick: handleClick },\n            children,\n            name && jsx(\"span\", { title: name, className: 'icon-label' }, name)),\n        jsx(Notification, { type: 'success', withIcon: true, open: showNotification, onMouseEnter: () => { hoverNotificationRef.current = true; }, onMouseLeave: () => { hoverNotificationRef.current = false; } }, notification)));\n};\n"],"names":[],"sourceRoot":""}