{"version":3,"file":"7748.525ef111.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAEA;;;;;;AAMA;;;;;AAKA;;;;;;;;;AASA;;;;AAIA;;;;AClEA;AACA;AACA;;AAEA;;;;;;AAMA;;ACTA;;;;;;;;;;;;;;;;;;;;;;AC6BA;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8CA;;;;ACpEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;;;;;ACxDA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;;;;;;;;;;;;ACxEA;;;;;ACiBA;;;;;AAKA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;AAWA;;;;;ACtEA;;;;;AAKA;;;;;;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;AAWA;;;AC/CA;;ACrCA;;;AAGA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACuFA;;;;;;;;AClFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+CA;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;ACnCA;;;;;;AA6BA;;;;;;;;;;;;;;;;;;ACRA","sources":["webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/styles/components/four-sides.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/styles/components/single-color-selector.ts","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/unit-input/unit-selector.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/unit-input/base-unit-input.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/unit-input/date-unit-input.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/border-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/input-ratio.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/four-edges/corner.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/four-edges/edge.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/size-editor.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/theme-active-flag.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/theme-background-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/theme-border-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/theme-box-shadow-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/navigation-style/style-by-state.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/animation-part.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/animation-popper-content.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/animation-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/transition-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/hover-effects.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/mouse-action-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/fixed-position-size/position-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/advanced/lib/style-setting-components/fixed-position-size/index.tsx"],"sourcesContent":["import { css, polished } from 'jimu-core';\nexport const FourSidesStyle = (props) => {\n    var _a, _b, _c, _d;\n    const { theme } = props;\n    const gray600 = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.ref) === null || _a === void 0 ? void 0 : _a.palette.neutral[900]) !== null && _b !== void 0 ? _b : '#c8cbcd';\n    const black = (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.ref) === null || _c === void 0 ? void 0 : _c.palette.black) !== null && _d !== void 0 ? _d : 'black';\n    return css `\r\n    width: 100%;\r\n    .unit-selector-con {\r\n      margin-left: -1px;\r\n    }\r\n    .content {\r\n      display: flex;\r\n      width: 100%;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      .input-group {\r\n        width: 87%;\r\n        flex-wrap: nowrap;\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        > input {\r\n          width: 21%;\r\n        }\r\n        .jimu-numeric-input-input {\r\n          width: calc(100% - 1px);\r\n          z-index: 0;\r\n          &:focus-within {\r\n            z-index: 1;\r\n          }\r\n        }\r\n        .form-control {\r\n          padding-left: 0.25rem;\r\n          padding-right: 0.25rem;\r\n        }\r\n        >.style-setting--unit-selector {\r\n          width: 16%;\r\n          margin-left: -1px;\r\n          border-top-right-radius: 2px;\r\n          border-bottom-right-radius: 2px;\r\n        }\r\n      }\r\n      .lock-btn {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 10%;\r\n        cursor: pointer;\r\n        .jimu-icon {\r\n          color: ${black};\r\n          &.disabled {\r\n            color: ${gray600};\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .tips {\r\n      color: ${gray600};\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      width: 100%;\r\n      font-size: ${polished.rem(10)};\r\n      .tip-group {\r\n        text-align: center;\r\n        display: flex;\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        width: 73%;\r\n        > div {\r\n          width: 25%;\r\n          ${polished.ellipsis()}\r\n        }\r\n      }\r\n    }\r\n  `;\n};\n","import { css, polished } from 'jimu-core';\nexport const SingleColorSelectorStyle = (props) => {\n    const { theme } = props;\n    const gray300 = theme ? theme.ref.palette.neutral[500] : '';\n    const cyan500 = theme ? theme.sys.color.primary.dark : '';\n    return css `\r\n    display: flex;\r\n    .btn {\r\n      border-radius: 0;\r\n      height:${polished.rem(20)};\r\n      width:${polished.rem(20)};\r\n      border: 1px solid ${gray300};\r\n      &.active {\r\n          outline: 1px solid ${cyan500};\r\n      }\r\n    }\r\n    .btn:not(:last-of-type) {\r\n      margin-right: 6px;\r\n    }\r\n  `;\n};\n","import { React, classNames, hooks } from 'jimu-core';\nimport { styled } from 'jimu-theme';\nimport { Dropdown, DropdownButton, DropdownMenu, DropdownItem, defaultMessages } from 'jimu-ui';\nexport const UnitSelectorDateUnits = ['year', 'month', 'day'];\nexport const UnitSelectorDateWeekUnits = ['year', 'month', 'week', 'day'];\nexport const UnitSelectorTimeUnits = ['hour', 'minute', 'second'];\nconst dateTimeUnits = [...UnitSelectorDateWeekUnits, ...UnitSelectorTimeUnits];\nconst StyledDropdownMenu = styled(DropdownMenu) `\r\n  min-width: 60px !important;\r\n`;\nconst StyledDropdownButton = styled(DropdownButton)(({ theme }) => {\n    return {\n        '.dropdown-button-content': {\n            textAlign: 'center'\n        }\n    };\n});\nconst defaultUnits = ['px'];\nexport const UnitSelector = (props) => {\n    const translate = hooks.useTranslation(defaultMessages);\n    const { className, style, title = translate('changeUnit'), disabled: propDisabled, value = 'px', units = defaultUnits, onChange } = props;\n    const disabled = propDisabled || units.length <= 1;\n    const handleChange = (newUnit) => {\n        if (newUnit !== value) {\n            onChange === null || onChange === void 0 ? void 0 : onChange(newUnit);\n        }\n    };\n    const translateUnit = (unit) => {\n        if (dateTimeUnits.includes(unit)) {\n            return translate(unit);\n        }\n        else {\n            return unit;\n        }\n    };\n    return (React.createElement(Dropdown, { direction: 'down', size: 'sm', disabled: disabled, style: style, title: title, activeIcon: true, autoWidth: true, className: classNames(className, 'style-setting--unit-selector', 'jimu-outline-inside') },\n        React.createElement(StyledDropdownButton, { arrow: false, size: 'sm', \"aria-label\": translate('unit') }, translateUnit(value)),\n        React.createElement(StyledDropdownMenu, { alignment: 'end' }, units.map(unit => {\n            const label = translateUnit(unit);\n            return (React.createElement(DropdownItem, { className: 'px-1', active: value === unit, \"aria-pressed\": value === unit, \"aria-label\": label, key: unit, onClick: () => { handleChange(unit); } },\n                React.createElement(\"div\", { className: 'text-truncate', title: label }, label)));\n        }))));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { React, classNames, polished } from 'jimu-core';\nimport { NumericInput } from 'jimu-ui';\nimport { UnitSelector } from './unit-selector';\nimport { styled } from 'jimu-theme';\nconst DefaultUnits = ['px'];\nconst Root = styled('div') `\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: stretch;\r\n  width: 100%;\r\n  .jimu-numeric-input {\r\n    flex: 1;\r\n    z-index: 0;\r\n    &:focus-within {\r\n      z-index: 1;\r\n    }\r\n    padding: 0px;\r\n    width: calc(100% - 26px)\r\n  }\r\n\r\n  > .style-setting--unit-selector button {\r\n    width: 26px;\r\n    margin-left: -1px;\r\n    z-index: 0;\r\n    padding: 0px;\r\n  }\r\n`;\nconst DefaultValue = {\n    val: 0,\n    unit: 'px'\n};\nconst parseValue = (value) => {\n    if (typeof value === 'string') {\n        const ret = polished.getValueAndUnit(value);\n        return {\n            val: ret === null || ret === void 0 ? void 0 : ret[0],\n            unit: (ret === null || ret === void 0 ? void 0 : ret[1]) || 'px'\n        };\n    }\n    return value;\n};\n/**\n * The `BaseUnitInput` component allows users to set units and values.\n *\n * ```ts\n * import { BaseUnitInput } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const BaseUnitInput = (props) => {\n    var _a, _b;\n    const { min, max, required, step, precision, className, disabled = false, units = DefaultUnits, value: propValue, applyDefaultValue = true, onChange, 'aria-label': propAriaLabel, placeholder } = props, others = __rest(props, [\"min\", \"max\", \"required\", \"step\", \"precision\", \"className\", \"disabled\", \"units\", \"value\", \"applyDefaultValue\", \"onChange\", 'aria-label', \"placeholder\"]);\n    const value = parseValue(propValue);\n    const propVal = applyDefaultValue ? (_a = value === null || value === void 0 ? void 0 : value.val) !== null && _a !== void 0 ? _a : DefaultValue.val : value === null || value === void 0 ? void 0 : value.val;\n    const unit = (_b = value === null || value === void 0 ? void 0 : value.unit) !== null && _b !== void 0 ? _b : DefaultValue.unit;\n    const ariaLabel = value != null ? `${propAriaLabel ? `${propAriaLabel}, ` : ''}${value.unit}` : propAriaLabel;\n    const handleInputChange = (number, evt) => {\n        if (number == null && propVal == null)\n            return;\n        const val = applyDefaultValue ? number !== null && number !== void 0 ? number : 0 : number;\n        onChange === null || onChange === void 0 ? void 0 : onChange({ val, unit: unit }, evt);\n    };\n    const handleUnitChange = (unit) => {\n        if (propVal == null)\n            return;\n        onChange === null || onChange === void 0 ? void 0 : onChange({ val: propVal, unit });\n    };\n    return (React.createElement(Root, Object.assign({ className: classNames(className, 'style-setting--base-unit-input') }, others),\n        React.createElement(NumericInput, { \"aria-label\": ariaLabel, size: 'sm', min: min, max: max, required: required, step: step, precision: precision, value: isNaN(propVal) ? '' : propVal, disabled: disabled, showHandlers: false, placeholder: placeholder, onAcceptValue: handleInputChange }),\n        React.createElement(UnitSelector, { disabled: disabled, units: units, value: unit, onChange: handleUnitChange })));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { React, classNames } from 'jimu-core';\nimport { styled } from 'jimu-theme';\nimport { BaseUnitInput } from './base-unit-input';\nconst DefaultUnits = ['year'];\nconst Root = styled(BaseUnitInput) `\r\n .jimu-numeric-input {\r\n    width: calc(100% - 60px)\r\n  }\r\n  > .style-setting--unit-selector button {\r\n    width: 60px;\r\n  }\r\n`;\n/**\n * The `DateUnitInput` component allows users to set date time units and values.\n *\n * ```ts\n * import { DateUnitInput } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const DateUnitInput = (props) => {\n    const { className, value, units = DefaultUnits } = props, others = __rest(props, [\"className\", \"value\", \"units\"]);\n    return (React.createElement(Root, Object.assign({ className: classNames(className, 'style-setting--date-unit-input') }, others, { value: value, units: units })));\n};\n","/** @jsx jsx */\nimport { React, jsx, css, classNames, hooks } from 'jimu-core';\nimport { LineStyleSelector } from './line-style-selector';\nimport { InputUnit } from './unit-input';\nimport { ThemeColorPicker } from 'jimu-ui/basic/color-picker';\nimport { Button, DistanceUnits, NormalLineType, defaultMessages } from 'jimu-ui';\nimport { useTheme2 } from 'jimu-theme';\nimport { LockOutlined } from 'jimu-icons/outlined/editor/lock';\nimport { UnlockOutlined } from 'jimu-icons/outlined/editor/unlock';\nconst borderStyle = css `\r\n  width: 100%;\r\n  .sides {\r\n    width: 56px;\r\n    height: 56px;\r\n    border-radius: 3px;\r\n    background: var(--sys-color-surface-paper);\r\n    position: relative;\r\n\r\n    & > .bar {\r\n    cursor: pointer;\r\n    position: absolute;\r\n    border-radius: 3px;\r\n    background: transparent;\r\n    border: 1px solid var(--sys-color-action-text);\r\n    &:hover, &.selected {\r\n    background: var(--sys-color-action-selected);\r\n    border-color: var(--sys-color-action-selected);\r\n    }\r\n    }\r\n    &.locked > .bar {\r\n    cursor: default;\r\n    border: none;\r\n    background: var(--sys-color-action-disabled-text);\r\n    }\r\n\r\n    .top {\r\n      left: 16px;\r\n      right: 16px;\r\n      top: 4px;\r\n      width: 24px;\r\n      height: 4px;\r\n    }\r\n    .bottom {\r\n      left: 16px;\r\n      right: 16px;\r\n      bottom: 4px;\r\n      width: 24px;\r\n      height: 4px;\r\n    }\r\n    .left {\r\n      top: 16px;\r\n      bottom: 16px;\r\n      left: 4px;\r\n      height: 24px;\r\n      width: 4px;\r\n    }\r\n    .right {\r\n      top: 16px;\r\n      bottom: 16px;\r\n      right: 4px;\r\n      height: 24px;\r\n      width: 4px;\r\n    }\r\n  }\r\n  .item.style-setting--line-style-selector {\r\n    flex-grow: 1;\r\n  },\r\n  .item.style-setting--input-unit {\r\n    width: 60px;\r\n  }\r\n  .item.color-picker-block {\r\n    height: 26px;\r\n    width: 26px;\r\n    flex-shrink: 0;\r\n  }\r\n`;\nconst borderUnits = [DistanceUnits.PIXEL];\nconst defaultValue = {\n    type: NormalLineType.DASHED,\n    color: undefined,\n    width: '0px'\n};\nfunction chooseDefaultSide(borders) {\n    let result = 'top';\n    const allSides = ['top', 'right', 'bottom', 'left'];\n    allSides.some((side) => {\n        if (borders[side] != null) {\n            result = side;\n            return true;\n        }\n        return false;\n    });\n    return result;\n}\n/**\n * The `BorderSetting` component allows users to set border styles.\n * ```ts\n * import { BorderSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const BorderSetting = (props) => {\n    var _a, _b;\n    const { applyDefaultValue = true, singleMode = false, value, top, left, bottom, right, onChange, onSideChange, className, style } = props;\n    const [side, setSide] = React.useState(chooseDefaultSide({ top, right, bottom, left }));\n    const [separate, setSeparate] = React.useState(top != null || left != null || bottom != null || right != null);\n    let currentValue = value;\n    if (!singleMode && separate) {\n        switch (side) {\n            case 'top':\n                currentValue = top;\n                break;\n            case 'left':\n                currentValue = left;\n                break;\n            case 'right':\n                currentValue = right;\n                break;\n            case 'bottom':\n                currentValue = bottom;\n                break;\n            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n            default:\n                currentValue = defaultValue;\n                break;\n        }\n    }\n    const type = applyDefaultValue ? (_a = currentValue === null || currentValue === void 0 ? void 0 : currentValue.type) !== null && _a !== void 0 ? _a : NormalLineType.DASHED : currentValue === null || currentValue === void 0 ? void 0 : currentValue.type;\n    const width = applyDefaultValue ? (_b = currentValue === null || currentValue === void 0 ? void 0 : currentValue.width) !== null && _b !== void 0 ? _b : '0px' : currentValue === null || currentValue === void 0 ? void 0 : currentValue.width;\n    const color = currentValue === null || currentValue === void 0 ? void 0 : currentValue.color;\n    const theme2 = useTheme2();\n    const translate = hooks.useTranslation(defaultMessages);\n    const updateBorder = (key, newValue) => {\n        const toReplace = { type, color, width };\n        toReplace[key] = newValue;\n        if (!singleMode && separate) {\n            onSideChange === null || onSideChange === void 0 ? void 0 : onSideChange(side, toReplace);\n        }\n        else {\n            onChange === null || onChange === void 0 ? void 0 : onChange(toReplace);\n        }\n    };\n    const toggleLocked = React.useCallback(() => {\n        setSeparate(!separate);\n    }, [separate]);\n    return (jsx(\"div\", { className: classNames('style-setting--border-setting d-flex align-items-center', className), style: style, css: borderStyle },\n        jsx(\"div\", { className: classNames('sides mr-2 justify-content-center flex-shrink-0 align-items-center', { 'd-flex': !singleMode, 'd-none': singleMode, locked: !separate }) },\n            jsx(Button, { type: 'tertiary', size: 'sm', icon: true, onClick: toggleLocked, title: translate(!separate ? 'setForEachSide' : 'setForAllSide'), \"aria-label\": translate(!separate ? 'setForEachSide' : 'setForAllSide') }, !separate ? jsx(LockOutlined, null) : jsx(UnlockOutlined, null)),\n            jsx(Button, { className: classNames('bar p-0 top', { selected: side === 'top' }), \"aria-pressed\": side === 'top', \"aria-label\": translate('top'), title: translate('top'), type: 'tertiary', size: 'sm', disabled: !separate, onClick: () => { setSide('top'); } }),\n            jsx(Button, { className: classNames('bar p-0 right', { selected: side === 'right' }), \"aria-pressed\": side === 'right', \"aria-label\": translate('right'), title: translate('right'), type: 'tertiary', size: 'sm', disabled: !separate, onClick: () => { setSide('right'); } }),\n            jsx(Button, { className: classNames('bar p-0 bottom', { selected: side === 'bottom' }), \"aria-pressed\": side === 'bottom', \"aria-label\": translate('bottom'), title: translate('bottom'), type: 'tertiary', size: 'sm', disabled: !separate, onClick: () => { setSide('bottom'); } }),\n            jsx(Button, { className: classNames('bar p-0 left', { selected: side === 'left' }), \"aria-pressed\": side === 'left', \"aria-label\": translate('left'), title: translate('left'), type: 'tertiary', size: 'sm', disabled: !separate, onClick: () => { setSide('left'); } })),\n        jsx(ThemeColorPicker, { \"aria-label\": translate('color'), specificTheme: theme2, className: 'item', onChange: (color) => {\n                updateBorder('color', color);\n            }, value: color }),\n        jsx(LineStyleSelector, { \"aria-label\": translate('lineStyle'), className: 'item ml-1', value: type, placeholder: translate('none'), onChange: (newType) => {\n                updateBorder('type', newType);\n            } }),\n        jsx(InputUnit, { \"aria-label\": translate('width'), min: 0, precision: 0, units: borderUnits, placeholder: '##', className: 'item ml-1', value: width, applyDefaultValue: applyDefaultValue, onChange: (newWidth) => {\n                var _a, _b;\n                const distance = applyDefaultValue ? (_a = newWidth === null || newWidth === void 0 ? void 0 : newWidth.distance) !== null && _a !== void 0 ? _a : 0 : newWidth === null || newWidth === void 0 ? void 0 : newWidth.distance;\n                const unit = (_b = newWidth === null || newWidth === void 0 ? void 0 : newWidth.unit) !== null && _b !== void 0 ? _b : borderUnits[0];\n                const width = distance != null ? `${distance}${unit}` : null;\n                updateBorder('width', width);\n            } })));\n};\n","/** @jsx jsx */\nimport { React, classNames, jsx, css, injectIntl } from 'jimu-core';\nimport { NumericInput, InputGroup, defaultMessages } from 'jimu-ui';\nconst labelStyle = css `\r\n  font-size: 10px;\r\n  color: var(--ref-palette-neutral-1000);\r\n  text-align: center;\r\n`;\nexport class _InputRatio extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.width = 100;\n        this.height = 100;\n        this.onWidthChange = (val) => {\n            this.props.onChange(`${val}:${this.height}`);\n        };\n        this.onHeightChange = (val) => {\n            this.props.onChange(`${this.width}:${val}`);\n        };\n    }\n    // ratio is height/width\n    parseAspectRatio(ratio) {\n        if (typeof ratio === 'number') {\n            this.width = 100;\n            this.height = Math.round(ratio * 100);\n        }\n        else if (typeof ratio === 'string') {\n            const items = ratio.split(':');\n            this.width = parseInt(items[0], 10);\n            this.height = parseInt(items[1], 10);\n        }\n    }\n    formatMessage(id) {\n        return this.props.intl.formatMessage({ id, defaultMessage: defaultMessages[id] });\n    }\n    render() {\n        const { style, disabled, value: ratio } = this.props;\n        this.parseAspectRatio(ratio);\n        return (jsx(InputGroup, { className: classNames('style-setting--input-ratio'), style: style },\n            jsx(\"div\", { className: 'd-flex flex-column justify-content-start align-items-center', style: { width: '45%' } },\n                jsx(NumericInput, { size: 'sm', min: 1, max: 100, value: isNaN(this.width) ? '' : this.width, showHandlers: false, onChange: this.onWidthChange, disabled: disabled, \"aria-label\": this.formatMessage('width') }),\n                jsx(\"div\", { className: 'px-1 mt-1 w-100', css: labelStyle, title: this.formatMessage('width') }, \"W\")),\n            jsx(\"div\", { className: 'h-100 text-center', style: { width: '10%' } }, \":\"),\n            jsx(\"div\", { className: 'd-flex flex-column justify-content-start align-items-center', style: { width: '45%' } },\n                jsx(NumericInput, { size: 'sm', min: 1, value: isNaN(this.height) ? '' : this.height, showHandlers: false, onChange: this.onHeightChange, disabled: disabled, \"aria-label\": this.formatMessage('height') }),\n                jsx(\"div\", { className: 'px-1 mt-1 w-100', css: labelStyle, title: this.formatMessage('height') }, \"H\"))));\n    }\n}\n_InputRatio.defaultProps = {\n    value: 1,\n    disabled: false,\n    onChange: () => null\n};\nexport const InputRatio = injectIntl(_InputRatio);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/**@jsx jsx */\nimport { React, classNames, css, jsx } from 'jimu-core';\nimport { Button } from 'jimu-ui';\nconst styles = css `\r\n  padding: 4px !important;\r\n  .content {\r\n    width: 16px;\r\n    height: 16px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    &.unified {\r\n      border: 1px solid var(--ref-palette-black);\r\n      border-radius: 4px;\r\n    }\r\n    &.none-select {\r\n      .corner {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    > .top,\r\n    > .bottom {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      width: 100%;\r\n      height: calc(50% - 3px);\r\n    }\r\n\r\n    .corner {\r\n      width: calc(50% - 3px);\r\n      height: 100%;\r\n      opacity: 0.4;\r\n      &.selected {\r\n        opacity: 1;\r\n      }\r\n      &.top-left {\r\n        border-top: 1px solid var(--ref-palette-black);\r\n        border-left: 1px solid var(--ref-palette-black);\r\n        border-radius: 4px 0 0 0;\r\n      }\r\n      &.top-right {\r\n        border-top: 1px solid var(--ref-palette-black);\r\n        border-right: 1px solid var(--ref-palette-black);\r\n        border-radius: 0 4px 0 0;\r\n      }\r\n      &.bottom-left {\r\n        border-bottom: 1px solid var(--ref-palette-black);\r\n        border-left: 1px solid var(--ref-palette-black);\r\n        border-radius: 0 0 0 4px;\r\n      }\r\n      &.bottom-right {\r\n        border-bottom: 1px solid var(--ref-palette-black);\r\n        border-right: 1px solid var(--ref-palette-black);\r\n        border-radius: 0 0 4px 0;\r\n      }\r\n    }\r\n  }\r\n`;\nexport const Corner = (props) => {\n    const { className, activated = -1, detached } = props, others = __rest(props, [\"className\", \"activated\", \"detached\"]);\n    return (jsx(Button, Object.assign({ css: styles, className: classNames('corner', className) }, others),\n        jsx(\"div\", { className: classNames('content', { unified: !detached }, { 'none-select': activated < 0 }) }, detached && (jsx(React.Fragment, null,\n            jsx(\"div\", { className: 'top' },\n                jsx(\"div\", { className: classNames('top-left corner', {\n                        selected: activated === 0\n                    }) }),\n                jsx(\"div\", { className: classNames('top-right corner', {\n                        selected: activated === 1\n                    }) })),\n            jsx(\"div\", { className: 'bottom' },\n                jsx(\"div\", { className: classNames('bottom-left corner', {\n                        selected: activated === 3\n                    }) }),\n                jsx(\"div\", { className: classNames('bottom-right corner', {\n                        selected: activated === 2\n                    }) })))))));\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/**@jsx jsx */\nimport { React, classNames, css, jsx } from 'jimu-core';\nimport { Button } from 'jimu-ui';\nconst styles = css `\r\n  padding: 4px !important;\r\n  .content {\r\n    width: 16px;\r\n    height: 16px;\r\n    position: relative;\r\n    &.unified {\r\n      border: 1px solid var(--ref-palette-black);\r\n      > .inner-box {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    &:not(.unified) {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      &.none-select {\r\n        .edge {\r\n          opacity: 1;\r\n        }\r\n        > .inner-box {\r\n          opacity: 1;\r\n        }\r\n      }\r\n      > .top {\r\n        width: calc(100% - 4px);\r\n        border-top: 1px solid var(--ref-palette-black);\r\n        height: 3px;\r\n      }\r\n      > .middle {\r\n        height: calc(100% - 6px);\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        > .left {\r\n          border-left: 1px solid var(--ref-palette-black);\r\n          width: 3px;\r\n          height: 100%;\r\n        }\r\n        > .right {\r\n          border-right: 1px solid var(--ref-palette-black);\r\n          width: 3px;\r\n          height: 100%;\r\n        }\r\n      }\r\n      > .bottom {\r\n        border-bottom: 1px solid var(--ref-palette-black);\r\n        width: calc(100% - 4px);\r\n        height: 3px;\r\n      }\r\n      .edge {\r\n        opacity: 0.4;\r\n        &.selected {\r\n          opacity: 1;\r\n        }\r\n      }\r\n    }\r\n    > .inner-box {\r\n      width: 8px;\r\n      height: 8px;\r\n      border: 1px dotted var(--ref-palette-black);\r\n      opacity: 0.4;\r\n      z-index: 1;\r\n      position: absolute;\r\n      left: calc(50% - 4px);\r\n      top: calc(50% - 4px);\r\n    }\r\n  }\r\n`;\nexport const Edge = (props) => {\n    const { className, activated = -1, detached } = props, others = __rest(props, [\"className\", \"activated\", \"detached\"]);\n    return (jsx(Button, Object.assign({ css: styles, className: classNames('edge', className) }, others),\n        jsx(\"div\", { className: classNames('content', { unified: !detached }, { 'none-select': activated < 0 }) },\n            detached && (jsx(React.Fragment, null,\n                jsx(\"div\", { className: classNames('edge top', { selected: activated === 0 }) }),\n                jsx(\"div\", { className: 'middle' },\n                    jsx(\"div\", { className: classNames('edge left', {\n                            selected: activated === 3\n                        }) }),\n                    jsx(\"div\", { className: classNames('edge right', {\n                            selected: activated === 1\n                        }) })),\n                jsx(\"div\", { className: classNames('edge bottom', {\n                        selected: activated === 2\n                    }) }))),\n            jsx(\"div\", { className: 'inner-box' }))));\n};\n","/** @jsx jsx */\nimport { React, jsx, css, injectIntl, polished } from 'jimu-core';\nimport { DistanceUnits, defaultMessages, Dropdown, DropdownButton, DropdownMenu, DropdownItem } from 'jimu-ui';\nimport { InputUnit } from './unit-input';\nimport { LayoutItemSizeModes, utils } from 'jimu-layouts/layout-runtime';\nimport { CheckOutlined } from 'jimu-icons/outlined/application/check';\nconst availableUnits = [DistanceUnits.PIXEL, DistanceUnits.PERCENTAGE];\nconst defaultSizeModes = [LayoutItemSizeModes.Auto, LayoutItemSizeModes.Stretch, LayoutItemSizeModes.Custom];\nexport class _SizeEditor extends React.PureComponent {\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(props) {\n        super(props);\n        this.handleChange = (value) => {\n            if (value !== this.props.mode) {\n                this.props.onModeChange(value);\n            }\n        };\n        this.nls = (id) => {\n            return this.props.intl ? this.props.intl.formatMessage({ id: id, defaultMessage: defaultMessages[id] }) : id;\n        };\n        this.getPopperStyle = () => {\n            return css `\r\n      .units-list {\r\n        border-radius: 2px;\r\n        background: var(--ref-palette-neutral-500);\r\n        padding: 2px 0;\r\n        .style-setting--markable-item {\r\n          height: ${polished.rem(26)};\r\n        }\r\n        .unit-item {\r\n          justify-content: flex-start;\r\n        }\r\n      }\r\n    `;\n        };\n    }\n    getStyle() {\n        return css `\r\n      background: var(--ref-palette-neutral-300);\r\n      height: 26px;\r\n\r\n      .side-label {\r\n        font-size: 10px;\r\n      }\r\n\r\n      .prop-label {\r\n        background-color: var(--ref-palette-neutral-500);\r\n        font-size: 12px;\r\n        line-height: 26px;\r\n        color: var(--ref-palette-neutral-900);\r\n      }\r\n\r\n      .jimu-dropdown {\r\n        z-index: 0;\r\n\r\n        &:focus-within {\r\n          z-index: 1;\r\n        }\r\n      }\r\n\r\n      .style-setting--input-unit {\r\n        background: var(--ref-palette-neutral-300);\r\n        border-radius: 2px;\r\n        height: 26px;\r\n        flex-grow: 1;\r\n        z-index: 0;\r\n\r\n        &:focus-within {\r\n          z-index: 1;\r\n        }\r\n\r\n        input {\r\n          height: 100%;\r\n          font-size: 12px;\r\n          padding: 0;\r\n          text-align: center;\r\n        }\r\n        .style-setting--unit-selector {\r\n          background: var(--ref-palette-neutral-300);\r\n          color: var(--ref-palette-black);\r\n          height: 26px;\r\n          width: auto;\r\n          min-width: 0;\r\n          padding: 0;\r\n          margin-left: 0;\r\n          font-size: 12px;\r\n          border: none;\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        var _a;\n        const { mode, value, disableModeSelect = false, disabled } = this.props;\n        if (disabled) {\n            return (jsx(\"div\", { className: 'd-flex size-editor w-100', css: this.getStyle() },\n                jsx(\"div\", { title: this.nls(LayoutItemSizeModes.Auto.toLowerCase()), className: 'prop-label px-2 text-truncate text-center w-100' }, this.nls(LayoutItemSizeModes.Auto.toLowerCase()))));\n        }\n        const sizeModes = (_a = this.props.sizeModes) !== null && _a !== void 0 ? _a : defaultSizeModes;\n        return (jsx(\"div\", { className: 'd-flex size-editor w-100', css: this.getStyle() },\n            !disableModeSelect && (jsx(Dropdown, { direction: 'down', size: 'sm', menuItemCheckMode: 'singleCheck' },\n                jsx(DropdownButton, { arrow: true, icon: true, size: 'sm', className: 'p-0' }),\n                jsx(DropdownMenu, { className: 'p-0', css: css `min-width: 5rem;` }, sizeModes.map((item, index) => (jsx(DropdownItem, { active: item === mode, \"aria-label\": this.nls(item.toLowerCase()), key: index, onClick: () => { this.handleChange(item); } },\n                    jsx(\"div\", { className: 'd-flex alitn-items-center justify-content-start w-100' },\n                        jsx(CheckOutlined, { className: 'mr-2', css: css `visibility: ${item === mode ? 'visible' : 'hidden'}` }),\n                        this.nls(item.toLowerCase())))))))),\n            mode !== LayoutItemSizeModes.Custom && (jsx(\"div\", { className: 'prop-label flex-grow-1 px-2 text-truncate text-center', title: typeof (mode === null || mode === void 0 ? void 0 : mode.toLowerCase) === 'function' && this.nls(mode.toLowerCase()) }, typeof (mode === null || mode === void 0 ? void 0 : mode.toLowerCase) === 'function' && this.nls(mode.toLowerCase()))),\n            mode === LayoutItemSizeModes.Custom && (jsx(InputUnit, { units: this.props.availableUnits || availableUnits, min: 0, max: Infinity, precision: 2, value: utils.normalizeLinearUnit(value, 2), onChange: this.props.onChange }))));\n    }\n}\n_SizeEditor.defaultProps = {\n    disableModeSelect: false,\n    onChange: () => null\n};\nexport const SizeEditor = injectIntl(_SizeEditor);\n","/** @jsx jsx */\nimport { jsx, css } from 'jimu-core';\nimport { CheckFilled } from 'jimu-icons/filled/application/check';\nexport function ActiveFlag() {\n    const style = css `\r\n    position: absolute;\r\n    top: -2px;\r\n    right: -2px;\r\n    .icon-container {\r\n      width: 1rem;\r\n      height: 1rem;\r\n      background: linear-gradient(to top right, transparent 50%, var(--sys-color-primary-light) 50% 100%);\r\n      svg {\r\n        margin-top: 1px;\r\n        margin-right: 1px;\r\n      }\r\n    }\r\n  `;\n    return (jsx(\"div\", { css: style },\n        jsx(\"div\", { className: 'd-flex justify-content-end align-items-start icon-container' },\n            jsx(CheckFilled, { color: 'var(--ref-palette-white)', size: 8 }))));\n}\n","/** @jsx jsx */\nimport { React, jsx, css, classNames, injectIntl } from 'jimu-core';\nimport { FillType, Dropdown, DropdownMenu, DropdownButton, DropdownItem, Tooltip, defaultMessages } from 'jimu-ui';\nimport { withTheme } from 'jimu-theme';\nimport { ColorsOutlined } from 'jimu-icons/outlined/application/colors';\nimport { ActiveFlag } from './theme-active-flag';\nexport const THEME_BACKGROUND_COLOR_LIST = [null, 'primary-100', 'primary-200', 'primary-300', 'light-100', 'light-300', 'light-500', 'light-700'];\n/**\n * The `ThemeBackgroundSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { ThemeBackgroundSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport class _ThemeBackgroundSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.toggleDropdown = () => {\n            this.setState({ isDropdownOpen: !this.state.isDropdownOpen });\n        };\n        this.getStyle = (color) => {\n            var _a, _b;\n            const { theme2 } = this.props;\n            let colorName;\n            let scale;\n            if (color != null) {\n                const colors = color.split('-');\n                colorName = colors[0];\n                scale = colors[1];\n            }\n            return css `\r\n      width: 88px;\r\n      height: 24px;\r\n      position: relative;\r\n      &:not(.has-color) {\r\n        border: 2px solid ${theme2 === null || theme2 === void 0 ? void 0 : theme2.ref.palette.neutral[800]};\r\n        background: linear-gradient(\r\n          to top right,\r\n          rgba(0, 0, 0, 0) 0%,\r\n          rgba(0, 0, 0, 0) calc(50% - 1.5px),\r\n          ${theme2 === null || theme2 === void 0 ? void 0 : theme2.ref.palette.neutral[800]} 50%,\r\n          rgba(0, 0, 0, 0) calc(50% + 1.5px),\r\n          rgba(0, 0, 0, 0) 100%\r\n        );\r\n      }\r\n      &.has-color {\r\n        border: 2px solid ${(_a = theme2 === null || theme2 === void 0 ? void 0 : theme2.colors.palette[colorName]) === null || _a === void 0 ? void 0 : _a[scale]};\r\n        background: ${(_b = theme2 === null || theme2 === void 0 ? void 0 : theme2.colors.palette[colorName]) === null || _b === void 0 ? void 0 : _b[scale]};\r\n      }\r\n    `;\n        };\n        this.createItem = (color, index) => {\n            const { background, isCustom, onChange } = this.props;\n            const selected = isCustom ? false : (color == null ? (background == null || background.color == null) : `var(--${color})` === background.color);\n            return (jsx(DropdownItem, { key: color, className: 'jimu-outline-inside', onClick: () => { onChange(false, { color: color != null ? `var(--${color})` : null, fillType: FillType.FILL }); }, title: index === 0 ? this.translate('none') : this.translate(`backgroundStyle${index}`), \"aria-label\": index === 0 ? this.translate('none') : this.translate(`backgroundStyle${index}`) },\n                jsx(\"div\", { css: this.getStyle(color), className: classNames('d-flex justify-content-center align-items-center', {\n                        'has-color': color != null\n                    }) }, selected && jsx(ActiveFlag, null))));\n        };\n        this.translate = (id) => {\n            var _a, _b;\n            const messages = Object.assign({}, defaultMessages);\n            return (_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.intl) === null || _b === void 0 ? void 0 : _b.formatMessage({ id: id, defaultMessage: messages[id] });\n        };\n        this.state = { isDropdownOpen: false };\n    }\n    render() {\n        const { className, onChange, isCustom } = this.props;\n        return (jsx(Dropdown, { isOpen: this.state.isDropdownOpen, className: classNames(className, 'jimu-builder--theme-background-setting'), toggle: this.toggleDropdown },\n            jsx(Tooltip, { title: this.translate('quickStyle') },\n                jsx(DropdownButton, { className: 'jimu-outline-inside', icon: true, type: 'tertiary', arrow: false },\n                    jsx(ColorsOutlined, null))),\n            jsx(DropdownMenu, { className: 'text-truncate', css: css `\r\n          min-width: unset;\r\n          padding: 0;\r\n          .popper-box {\r\n            padding: 1rem;\r\n          }\r\n          .dropdown-menu--inner {\r\n            overflow: visible;\r\n          }\r\n          .dropdown-item {\r\n            padding: 0 !important;\r\n            margin-top: 0.5rem;\r\n            &:hover {\r\n              background: transparent !important;\r\n            }\r\n          }\r\n          .jimu-keyboard-nav & .jimu-dropdown-item:focus {\r\n            outline: 2px solid var(--sys-color-primary-dark);\r\n            outline-offset: 2px;\r\n            background: transparent;\r\n          }\r\n        ` },\n                THEME_BACKGROUND_COLOR_LIST.map((color, index) => this.createItem(color, index)),\n                jsx(\"div\", { className: 'my-2 px-2', css: css `height: 1px; background-color: var(--ref-palette-neutral-600);` }),\n                jsx(DropdownItem, { className: 'jimu-outline-inside', onClick: () => { !isCustom && onChange(true, null); }, title: this.translate('custom'), \"aria-label\": this.translate('custom') },\n                    jsx(\"div\", { css: css `\r\n                width: 88px;\r\n                height: 24px;\r\n                line-height: 24px;\r\n                text-align: center;\r\n                border: 1px solid var(--ref-palette-neutral-700);\r\n                color: var(--ref-palette-neutral-1000);\r\n                position: relative;\r\n              `, className: 'text-truncate px-1' },\n                        this.translate('custom'),\n                        isCustom && jsx(ActiveFlag, null))))));\n    }\n}\n_ThemeBackgroundSetting.defaultProps = {\n    background: { color: undefined, fillType: FillType.FIT, image: { url: '' } },\n    onChange: () => null\n};\n/**\n * The `ThemeBackgroundSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { ThemeBackgroundSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const ThemeBackgroundSetting = withTheme(injectIntl(_ThemeBackgroundSetting), true);\n","/** @jsx jsx */\nimport { React, jsx, css, classNames, injectIntl } from 'jimu-core';\nimport { NormalLineType, Dropdown, DropdownMenu, DropdownButton, DropdownItem, Tooltip, defaultMessages } from 'jimu-ui';\nimport { withTheme } from 'jimu-theme';\nimport { ColorsOutlined } from 'jimu-icons/outlined/application/colors';\nimport { ActiveFlag } from './theme-active-flag';\nexport const THEME_BORDER_COLOR_LIST = [null, 'primary-200', 'primary-400', 'primary-600', 'light-300', 'light-600', 'light-900', 'dark-300'];\n/**\n * The `ThemeBorderSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { ThemeBorderSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport class _ThemeBorderSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.toggleDropdown = () => {\n            this.setState({ isDropdownOpen: !this.state.isDropdownOpen });\n        };\n        this.getStyle = (color) => {\n            var _a;\n            const { theme2 } = this.props;\n            let colorName;\n            let scale;\n            if (color != null) {\n                const colors = color.split('-');\n                colorName = colors[0];\n                scale = colors[1];\n            }\n            return css `\r\n      width: 88px;\r\n      height: 24px;\r\n      position: relative;\r\n      &:not(.has-color) {\r\n        border: 2px solid ${theme2 === null || theme2 === void 0 ? void 0 : theme2.ref.palette.neutral[800]};\r\n        background: linear-gradient(\r\n          to top right,\r\n          rgba(0, 0, 0, 0) 0%,\r\n          rgba(0, 0, 0, 0) calc(50% - 1.5px),\r\n          ${theme2 === null || theme2 === void 0 ? void 0 : theme2.ref.palette.neutral[800]} 50%,\r\n          rgba(0, 0, 0, 0) calc(50% + 1.5px),\r\n          rgba(0, 0, 0, 0) 100%\r\n        );\r\n      }\r\n      &.has-color {\r\n        border: 2px solid ${(_a = theme2 === null || theme2 === void 0 ? void 0 : theme2.colors.palette[colorName]) === null || _a === void 0 ? void 0 : _a[scale]};\r\n      }\r\n    `;\n        };\n        this.createItem = (color, index) => {\n            const { value, isCustom, onChange } = this.props;\n            const selected = isCustom\n                ? false\n                : color == null\n                    ? (value == null || value.color == null)\n                    : (`var(--${color})` === value.color && value.type === NormalLineType.SOLID && value.width === '2px');\n            return (jsx(DropdownItem, { key: color, className: 'jimu-outline-inside', onClick: () => { onChange(false, { color: color != null ? `var(--${color})` : null, type: NormalLineType.SOLID, width: '2px' }); }, title: index === 0 ? this.translate('none') : this.translate(`borderStyle${index}`), \"aria-label\": index === 0 ? this.translate('none') : this.translate(`borderStyle${index}`) },\n                jsx(\"div\", { css: this.getStyle(color), className: classNames({\n                        'has-color': color != null\n                    }) }, selected && jsx(ActiveFlag, null))));\n        };\n        this.translate = (id) => {\n            var _a, _b;\n            const messages = Object.assign({}, defaultMessages);\n            return (_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.intl) === null || _b === void 0 ? void 0 : _b.formatMessage({ id: id, defaultMessage: messages[id] });\n        };\n        this.state = { isDropdownOpen: false };\n    }\n    render() {\n        const { className, isCustom, onChange } = this.props;\n        return (jsx(Dropdown, { isOpen: this.state.isDropdownOpen, className: classNames(className, 'jimu-builder--theme-border-setting'), toggle: this.toggleDropdown },\n            jsx(Tooltip, { title: this.translate('quickStyle') },\n                jsx(DropdownButton, { className: 'jimu-outline-inside', icon: true, type: 'tertiary', arrow: false },\n                    jsx(ColorsOutlined, null))),\n            jsx(DropdownMenu, { className: 'text-truncate', css: css `\r\n          min-width: unset;\r\n          padding: 0;\r\n          .popper-box {\r\n            padding: 1rem;\r\n          }\r\n          .dropdown-menu--inner {\r\n            overflow: visible;\r\n          }\r\n          .dropdown-item {\r\n            padding: 0 !important;\r\n            margin-top: 0.5rem;\r\n            &:hover {\r\n              background: transparent !important;\r\n            }\r\n          }\r\n          .jimu-keyboard-nav & .jimu-dropdown-item:focus {\r\n            outline: 2px solid var(--sys-color-primary-dark);\r\n            outline-offset: 2px;\r\n            background: transparent;\r\n          }\r\n        ` },\n                THEME_BORDER_COLOR_LIST.map((color, index) => this.createItem(color, index)),\n                jsx(\"div\", { className: 'my-2 px-2', css: css `height: 1px; background-color: var(--ref-palette-neutral-600);` }),\n                jsx(DropdownItem, { className: 'jimu-outline-inside', onClick: () => { !isCustom && onChange(true, null); }, title: this.translate('custom'), \"aria-label\": this.translate('custom') },\n                    jsx(\"div\", { css: css `\r\n                width: 88px;\r\n                height: 24px;\r\n                line-height: 24px;\r\n                text-align: center;\r\n                border: 1px solid var(--ref-palette-neutral-700);\r\n                color: var(--ref-palette-neutral-1000);\r\n                position: relative;\r\n              `, className: 'text-truncate px-1' },\n                        this.translate('custom'),\n                        isCustom && jsx(ActiveFlag, null))))));\n    }\n}\n_ThemeBorderSetting.defaultProps = {\n    value: { color: undefined, type: NormalLineType.SOLID, width: '2px' },\n    onChange: () => null\n};\n/**\n * The `ThemeBorderSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { ThemeBorderSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const ThemeBorderSetting = withTheme(injectIntl(_ThemeBorderSetting), true);\n","/** @jsx jsx */\nimport { React, jsx, css, injectIntl, classNames } from 'jimu-core';\nimport { Dropdown, DropdownMenu, DropdownButton, DropdownItem, Tooltip, defaultMessages } from 'jimu-ui';\nimport { ColorsOutlined } from 'jimu-icons/outlined/application/colors';\nimport { CheckOutlined } from 'jimu-icons/outlined/application/check';\nimport { getTheme2 } from 'jimu-theme';\nconst MODE_LIST = { none: 'shadow-none', small: 'shadow-sm', default: 'shadow', large: 'shadow-lg' };\nfunction getPredefinedShadow(mode) {\n    const theme = getTheme2();\n    let boxShadow;\n    switch (mode) {\n        case 'none':\n            boxShadow = 'none';\n            break;\n        case 'small':\n            boxShadow = theme.sys.shadow.shadow1;\n            break;\n        case 'large':\n            boxShadow = theme.sys.shadow.shadow3;\n            break;\n        default:\n            boxShadow = theme.sys.shadow.shadow2;\n    }\n    if (boxShadow) {\n        // 0 0 10px 0 rgba(0, 0, 0, 0.2)\n        const tokens = boxShadow.split(' ');\n        if (tokens.length >= 5) {\n            const indexOfSpread = boxShadow.lastIndexOf(tokens[3]);\n            return {\n                offsetX: tokens[0],\n                offsetY: tokens[1],\n                blur: tokens[2],\n                spread: tokens[3],\n                color: boxShadow.substring(indexOfSpread + tokens[3].length).trim()\n            };\n        }\n    }\n    return null;\n}\n/**\n * The `BoxShadowSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { BoxShadowSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport class _ThemeBoxShadowSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.translate = (id) => {\n            return this.props.intl ? this.props.intl.formatMessage({ id: id, defaultMessage: defaultMessages[id] }) : id;\n        };\n        this.toggleDropdown = () => {\n            this.setState({ isDropdownOpen: !this.state.isDropdownOpen });\n        };\n        this.getStyle = () => {\n            return css `\r\n      font-size: 13px;\r\n      line-height: 18px;\r\n    `;\n        };\n        this.onCustomModeClick = () => {\n            if (this.props.isCustom) {\n                return;\n            }\n            const { onChange, value } = this.props;\n            if ((value === null || value === void 0 ? void 0 : value.presetStyle) != null) {\n                const mode = Object.keys(MODE_LIST).find(id => MODE_LIST[id] === value.presetStyle);\n                if (mode) {\n                    const boxShadow = getPredefinedShadow(mode);\n                    if (boxShadow) {\n                        onChange(true, boxShadow);\n                        return;\n                    }\n                }\n            }\n            onChange(true, {});\n        };\n        this.createItem = (mode) => {\n            const { value, isCustom, onChange } = this.props;\n            const selected = !isCustom && (value.presetStyle === MODE_LIST[mode] || (mode === 'none' && this.isEmpty()));\n            return (jsx(DropdownItem, { css: this.getStyle(), \"aria-label\": this.translate(mode), key: mode, active: selected, onClick: () => { onChange(false, { presetStyle: MODE_LIST[mode] }); } },\n                jsx(\"div\", { className: 'd-flex w-100 align-items-center text-truncate' },\n                    selected && jsx(CheckOutlined, null),\n                    !selected && jsx(\"div\", { css: css `width: 1rem;` }),\n                    jsx(\"div\", { className: 'flex-grow-1 ml-2' }, this.translate(mode)))));\n        };\n        this.state = { isDropdownOpen: false };\n    }\n    isEmpty() {\n        const { value } = this.props;\n        if (value != null) {\n            return (value.presetStyle == null || value.presetStyle === MODE_LIST.none) && ['offsetX', 'offsetY', 'blur', 'spread'].every(k => value[k] == null || parseInt(value[k]) === 0);\n        }\n        return true;\n    }\n    render() {\n        const { className, isCustom } = this.props;\n        return (jsx(Dropdown, { isOpen: this.state.isDropdownOpen, className: classNames(className, 'jimu-builder--theme-bx-setting'), toggle: this.toggleDropdown },\n            jsx(Tooltip, { title: this.translate('quickStyle') },\n                jsx(DropdownButton, { icon: true, type: 'tertiary', arrow: false, className: 'jimu-outline-inside' },\n                    jsx(ColorsOutlined, null))),\n            jsx(DropdownMenu, { className: 'text-truncate' },\n                Object.keys(MODE_LIST).map((mode) => this.createItem(mode)),\n                jsx(\"div\", { className: 'my-2 px-2', css: css `height: 1px; background-color: var(--ref-palette-neutral-600);` }),\n                jsx(DropdownItem, { active: isCustom, onClick: this.onCustomModeClick },\n                    jsx(\"div\", { className: 'd-flex w-100 align-items-center text-truncate' },\n                        isCustom && jsx(CheckOutlined, null),\n                        !isCustom && jsx(\"div\", { css: css `width: 1rem;` }),\n                        jsx(\"div\", { className: 'flex-grow-1 ml-2' }, this.translate('custom')))))));\n    }\n}\n_ThemeBoxShadowSetting.defaultProps = {\n    value: {\n        offsetX: '0px',\n        offsetY: '0px',\n        blur: '0px',\n        spread: '0px',\n        color: undefined\n    },\n    onChange: () => null\n};\n/**\n * The `BoxShadowSetting` component allows users to set the backgrpund of the box.\n *\n * ```ts\n * import { BoxShadowSetting } from 'jimu-ui/advanced/style-setting-components'\n * ```\n */\nexport const ThemeBoxShadowSetting = injectIntl(_ThemeBoxShadowSetting);\n","/** @jsx jsx */\nimport { React, jsx, css, polished, hooks } from 'jimu-core';\nimport { Tabs, Tab, defaultMessages } from 'jimu-ui';\nimport { SettingRow } from 'jimu-ui/advanced/setting-components';\nimport { ButtonStyleSetting } from './button-style-setting';\nimport { IconStyleSetting } from './icon-style-setting';\nconst getTranslateKey = (state) => {\n    if (state === 'default')\n        return 'default';\n    if (state === 'active')\n        return 'selected';\n    return state;\n};\n/**\n * The `NavStyleSettingByState` component is used to provide the user the ability to setting styles for nav related widget.\n *\n * Note: use in Builder only.\n */\nexport const NavStyleSettingByState = (props) => {\n    const { variant, onChange, states = ['default', 'active', 'hover'], icon, text, hideTextStyle, iconInText, onlyBorderColor, onWholeVariantChange } = props;\n    const style = React.useMemo(() => {\n        var _a;\n        return css `\r\n      .tab-title-item{\r\n        width: ${(100 / ((_a = states === null || states === void 0 ? void 0 : states.length) !== null && _a !== void 0 ? _a : 1))}%;\r\n      }\r\n     .style-setting--input-unit {\r\n        width: ${polished.rem(80)};\r\n      }\r\n      ${ /* use overflow: visible to avoid focus ring cut off */''}\r\n      .tab-content {\r\n        padding-top: 8px;\r\n        overflow: visible;\r\n        .jimu-collapsable-panel {\r\n          margin: 5px 0;\r\n        }\r\n      }\r\n      .fill-width.size-color-setting {\r\n        .style-setting--input-unit {\r\n          flex: 1;\r\n        }\r\n      }\r\n    `;\n    }, [states]);\n    const translate = hooks.useTranslation(defaultMessages);\n    const onResetStyles = (state, styles) => {\n        var _a;\n        let newState = (_a = variant === null || variant === void 0 ? void 0 : variant.item) === null || _a === void 0 ? void 0 : _a[state];\n        if (newState) {\n            styles.forEach((key) => {\n                if ((newState === null || newState === void 0 ? void 0 : newState[key]) != null) {\n                    newState = newState.without(key);\n                }\n            });\n            if (Object.keys(newState).length) {\n                onWholeVariantChange(variant.setIn(['item', state], newState));\n            }\n            else {\n                const newItem = variant.item.without(state);\n                if (Object.keys(newItem).length) {\n                    onWholeVariantChange(variant.set('item', newItem));\n                }\n                else {\n                    const newVariant = variant.without('item');\n                    onWholeVariantChange(Object.keys(newVariant).length ? newVariant : null);\n                }\n            }\n        }\n    };\n    return (jsx(SettingRow, { flow: 'wrap', className: 'w-100' },\n        jsx(Tabs, { type: 'pills', className: 'flex-grow-1 w-100 h-100', fill: true, css: style, defaultValue: '0' }, states.map((state, index) => {\n            var _a, _b;\n            return (jsx(Tab, { id: index + '', key: index, className: 'tab-title-item', title: translate(getTranslateKey(state)) },\n                icon && jsx(IconStyleSetting, { variant: (_a = variant === null || variant === void 0 ? void 0 : variant.item) === null || _a === void 0 ? void 0 : _a[state], onChange: (key, value) => { onChange(state, key, value); }, onResetStyles: (styles) => { onResetStyles(state, styles); } }),\n                text && jsx(ButtonStyleSetting, { variant: (_b = variant === null || variant === void 0 ? void 0 : variant.item) === null || _b === void 0 ? void 0 : _b[state], icon: iconInText, onlyBorderColor: onlyBorderColor, hideTextStyle: hideTextStyle, onChange: (key, value) => { onChange(state, key, value); }, onResetStyles: (styles) => { onResetStyles(state, styles); } })));\n        }))));\n};\n","/** @jsx jsx */\nimport { React, Immutable, jsx, css, classNames, AnimationDirection, AnimationType, AnimationEffectType, AnimationStartMode, ParentAnimationMode } from 'jimu-core';\nimport { Icon, Select, Button, ButtonGroup } from 'jimu-ui';\nimport upIcon from 'jimu-icons/svg/outlined/directional/arrow-up.svg';\nimport downIcon from 'jimu-icons/svg/outlined/directional/arrow-down.svg';\nimport leftIcon from 'jimu-icons/svg/outlined/directional/arrow-left.svg';\nimport rightIcon from 'jimu-icons/svg/outlined/directional/arrow-right.svg';\nimport animationIcon from 'jimu-icons/svg/outlined/application/star.svg';\nexport class AnimationPart extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.onWidgetEffectTypeChanged = (e, value) => {\n            e.stopPropagation();\n            const setting = Immutable(this.props.effectSetting || {});\n            if ((setting === null || setting === void 0 ? void 0 : setting.type) === value) {\n                this.props.onPreviewClicked();\n            }\n            else if (this.props.isOneByOne) {\n                this.props.onSettingChange(setting\n                    .set('type', value)\n                    .setIn(['option', 'direction'], null)\n                    .setIn(['option', 'start'], AnimationStartMode.AfterPrevious)\n                    .setIn(['option', 'parentMode'], ParentAnimationMode.OneByOne));\n            }\n            else {\n                this.props.onSettingChange(setting.set('type', value).setIn(['option', 'direction'], null));\n            }\n        };\n        this.onDurationChange = (e) => {\n            const setting = Immutable(this.props.effectSetting || {});\n            this.props.onSettingChange(setting.setIn(['option', 'configType'], e.target.value));\n        };\n        this.onStartModeChange = (e) => {\n            const setting = Immutable(this.props.effectSetting || {});\n            this.props.onSettingChange(setting.setIn(['option', 'start'], e.target.value));\n        };\n        this.onParentModeChange = (e) => {\n            const setting = Immutable(this.props.effectSetting || {});\n            this.props.onSettingChange(setting.setIn(['option', 'parentMode'], e.target.value));\n        };\n        this.onWidgetEffectDirectionChanged = (e) => {\n            const setting = Immutable(this.props.effectSetting || {});\n            this.props.onSettingChange(setting.setIn(['option', 'direction'], e.target.value));\n        };\n    }\n    createAnimationCard(metaInfo, index) {\n        const { effectSetting } = this.props;\n        const effectType = (effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.type) || AnimationType.None;\n        return (jsx(\"div\", { className: classNames('d-flex flex-column align-items-center card-item', {\n                selected: metaInfo.type === effectType\n            }), key: index },\n            jsx(Button, { icon: true, role: 'option', \"aria-label\": this.props.formatMessage(metaInfo.type.toLowerCase()), \"aria-selected\": metaInfo.type === effectType, className: 'd-flex justify-content-center card-content border-0', onClick: (e) => { this.onWidgetEffectTypeChanged(e, metaInfo.type); } },\n                jsx(Icon, { className: 'w-100', currentColor: false, icon: metaInfo.icon || animationIcon, size: 72 })),\n            jsx(\"div\", { className: 'card-name flex-grow-1 d-flex align-items-start mt-1' },\n                jsx(\"span\", { className: 'text-center card-name-content', title: this.props.formatMessage(metaInfo.type.toLowerCase()) }, this.props.formatMessage(metaInfo.type.toLowerCase())))));\n    }\n    chooseDirectionIcon(direction) {\n        switch (direction) {\n            case AnimationDirection.Bottom:\n                return upIcon;\n            case AnimationDirection.Left:\n                return rightIcon;\n            case AnimationDirection.Right:\n                return leftIcon;\n            case AnimationDirection.Top:\n                return downIcon;\n            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n            default:\n                return null;\n        }\n    }\n    createEffectDirectionChooser(directions) {\n        var _a;\n        const { effectSetting } = this.props;\n        return (jsx(\"div\", { className: 'direction-select px-4 mb-4' },\n            jsx(\"div\", { className: 'effect-title mb-2' }, this.props.formatMessage('direction')),\n            jsx(Select, { value: ((_a = effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.option) === null || _a === void 0 ? void 0 : _a.direction) || AnimationDirection.Top, onChange: this.onWidgetEffectDirectionChanged, size: 'sm', \"aria-label\": this.props.formatMessage('direction') }, directions.map((dir, index) => (jsx(\"option\", { value: dir, key: index },\n                jsx(Icon, { className: 'mx-1', icon: this.chooseDirectionIcon(dir), size: 12 }),\n                this.props.formatMessage(dir.toLowerCase())))))));\n    }\n    getStyle() {\n        return css `\r\n      .animation-cards {\r\n        padding: 0 16px 16px;\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-row-gap: 12px;\r\n        grid-column-gap: 12px;\r\n      }\r\n\r\n      .separator {\r\n        width: calc(100% - 2rem);\r\n        height: 1px;\r\n        margin: 0 1rem 1rem;\r\n        background: var(--ref-palette-neutral-500);\r\n      }\r\n\r\n      .card-item {\r\n        font-size: 13px;\r\n        flex: 0 0 45%;\r\n\r\n        user-select: none;\r\n        cursor: pointer;\r\n        position: relative;\r\n\r\n        .card-content {\r\n          width: 100%;\r\n          height: 5rem;\r\n          background-color: var(--ref-palette-neutral-300);\r\n        }\r\n\r\n        &.selected .card-content {\r\n          outline: 2px solid var(--sys-color-primary-light);\r\n        }\r\n\r\n        .card-name {\r\n          max-width: 90px;\r\n          margin: 0 auto;\r\n          color: var(--ref-palette-neutral-1100);\r\n          .card-name-content {\r\n            line-height: 1rem;\r\n            display: -webkit-box;\r\n            -webkit-line-clamp: 2;\r\n            -webkit-box-orient: vertical;\r\n            overflow: hidden;\r\n          }\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        var _a, _b, _c, _d, _e, _f;\n        const { formatMessage, effectSetting, metaInfos, isRoot, isOneByOne } = this.props;\n        const usedEffectInfo = metaInfos.find((item) => item.type === (effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.type));\n        const hasEffect = effectSetting != null && effectSetting.type !== AnimationType.None;\n        return (jsx(\"div\", { className: 'bg-default border-color-gray-400', css: this.getStyle() },\n            jsx(\"div\", { className: 'w-100 h-100 animation-panel-border' },\n                jsx(ButtonGroup, { role: 'listbox', className: 'animation-cards' }, metaInfos.map((info, index) => this.createAnimationCard(info, index))),\n                usedEffectInfo && usedEffectInfo.type !== AnimationType.None &&\n                    jsx(\"div\", { className: 'separator' }),\n                usedEffectInfo && usedEffectInfo.type !== AnimationType.None &&\n                    jsx(\"div\", { className: 'duration-input px-4 mb-4' },\n                        jsx(\"div\", { className: 'effect-title mb-2' }, this.props.formatMessage('effect')),\n                        jsx(Select, { value: (_b = (_a = effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.option) === null || _a === void 0 ? void 0 : _a.configType) !== null && _b !== void 0 ? _b : AnimationEffectType.Default, onChange: this.onDurationChange, size: 'sm', \"aria-label\": this.props.formatMessage('effect') }, Object.entries(AnimationEffectType).map(([key, type], index) => (jsx(\"option\", { key: index, value: type }, formatMessage(key.toLowerCase())))))),\n                (usedEffectInfo === null || usedEffectInfo === void 0 ? void 0 : usedEffectInfo.supportedDirections) &&\n                    this.createEffectDirectionChooser(usedEffectInfo.supportedDirections),\n                !isRoot && hasEffect && isOneByOne && (jsx(\"div\", { className: 'start-input px-4 mb-4' },\n                    jsx(\"div\", { className: 'effect-title mb-2' }, this.props.formatMessage('start')),\n                    jsx(Select, { value: (_d = (_c = effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.option) === null || _c === void 0 ? void 0 : _c.start) !== null && _d !== void 0 ? _d : AnimationStartMode.WithPrevious, onChange: this.onStartModeChange, size: 'sm', \"aria-label\": this.props.formatMessage('start') }, Object.entries(AnimationStartMode).map(([key, type], index) => (jsx(\"option\", { key: index, value: type }, formatMessage(key.toLowerCase()))))))),\n                hasEffect && isOneByOne && (jsx(\"div\", { className: 'start-input px-4 mb-4' },\n                    jsx(\"div\", { className: 'effect-title mb-2' }, this.props.formatMessage('playAnimation')),\n                    jsx(Select, { value: (_f = (_e = effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.option) === null || _e === void 0 ? void 0 : _e.parentMode) !== null && _f !== void 0 ? _f : ParentAnimationMode.OneByOne, onChange: this.onParentModeChange, size: 'sm', \"aria-label\": this.props.formatMessage('playAnimation') }, Object.entries(ParentAnimationMode).map(([key, type], index) => (jsx(\"option\", { key: index, value: type }, formatMessage(key.toLowerCase()))))))))));\n    }\n}\n","/** @jsx jsx */\nimport { React, ReactRedux, jsx, css, AnimationPlayMode, LayoutItemType } from 'jimu-core';\nimport { DownOutlined } from 'jimu-icons/outlined/directional/down';\nimport { Collapse, Button } from 'jimu-ui';\nimport { SettingSection } from 'jimu-ui/advanced/setting-components';\nimport { animationInfos, oneByOneAnimationInfos } from './animation-info';\nimport { AnimationPart } from './animation-part';\nclass AnimationPopperContent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.onAsOneSettingChange = (setting) => {\n            this.props.onSettingChange(AnimationPlayMode.AsOne, setting);\n        };\n        this.onOneByOneSettingChange = (setting) => {\n            this.props.onSettingChange(AnimationPlayMode.OneByOne, setting);\n        };\n        this.previewAsOne = () => {\n            this.props.onPreviewClicked(AnimationPlayMode.AsOne);\n        };\n        this.previewOneByOne = () => {\n            this.props.onPreviewClicked(AnimationPlayMode.OneByOne);\n        };\n        this.toggleAsOneOpened = () => {\n            this.setState({\n                asOneOpened: !this.state.asOneOpened\n            });\n        };\n        this.toggleOneByOneOpened = () => {\n            this.setState({\n                oneByOneOpened: !this.state.oneByOneOpened\n            });\n        };\n        this.state = {\n            asOneOpened: true,\n            oneByOneOpened: !(this.props.supportAsOne && this.props.supportOneByOne)\n        };\n    }\n    getStyle() {\n        return css `\r\n      .sub-header {\r\n        padding: 0.5rem 0.5rem 0.5rem 1rem;\r\n\r\n        .title {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        const { formatMessage, supportOneByOne, supportAsOne, effectSetting, oneByOneSetting } = this.props;\n        const canToggle = supportOneByOne && supportAsOne;\n        return (jsx(\"div\", { className: 'bg-default border-color-gray-400', css: this.getStyle() },\n            supportAsOne && jsx(SettingSection, { className: 'p-0', title: jsx(\"div\", { className: 'w-100 d-flex justify-content-between align-items-center sub-header' },\n                    jsx(\"div\", { className: 'text-truncate title', title: supportOneByOne && this.props.selectedWidgetLabel, css: css `max-width: 80%;` }, supportOneByOne && this.props.selectedWidgetLabel),\n                    canToggle && jsx(Button, { size: 'sm', type: 'tertiary', icon: true, onClick: this.toggleAsOneOpened },\n                        jsx(DownOutlined, { size: 's', rotate: this.state.asOneOpened ? 180 : 0 }))) },\n                jsx(Collapse, { isOpen: this.state.asOneOpened, className: 'mt-0' },\n                    jsx(AnimationPart, { effectSetting: effectSetting, metaInfos: animationInfos, onSettingChange: this.onAsOneSettingChange, previewEnabled: true, onPreviewClicked: this.previewAsOne, formatMessage: formatMessage }))),\n            supportOneByOne && jsx(SettingSection, { className: 'p-0', title: jsx(\"div\", { className: 'w-100 d-flex justify-content-between align-items-center sub-header' },\n                    jsx(\"div\", { className: 'text-truncate title', title: supportAsOne && formatMessage('widgetByWidget'), css: css `max-width: 80%;` }, supportAsOne && formatMessage('widgetByWidget')),\n                    canToggle && jsx(Button, { size: 'sm', type: 'tertiary', icon: true, onClick: this.toggleOneByOneOpened },\n                        jsx(DownOutlined, { size: 's', rotate: this.state.oneByOneOpened ? 180 : 0 }))) },\n                jsx(Collapse, { isOpen: this.state.oneByOneOpened, className: 'mt-0' },\n                    jsx(AnimationPart, { effectSetting: oneByOneSetting, metaInfos: oneByOneAnimationInfos, onSettingChange: this.onOneByOneSettingChange, previewEnabled: true, isOneByOne: true, isRoot: this.props.isRoot, onPreviewClicked: this.previewOneByOne, formatMessage: formatMessage })))));\n    }\n}\nfunction getSelectedWidgetLabel(state) {\n    var _a, _b, _c, _d, _e, _f;\n    const appState = state.appStateInBuilder;\n    const appConfig = appState === null || appState === void 0 ? void 0 : appState.appConfig;\n    const selection = (_a = appState === null || appState === void 0 ? void 0 : appState.appRuntimeInfo) === null || _a === void 0 ? void 0 : _a.selection;\n    if (selection) {\n        const { layoutId, layoutItemId } = selection;\n        const layoutItem = (_d = (_c = (_b = appConfig.layouts) === null || _b === void 0 ? void 0 : _b[layoutId]) === null || _c === void 0 ? void 0 : _c.content) === null || _d === void 0 ? void 0 : _d[layoutItemId];\n        if ((layoutItem === null || layoutItem === void 0 ? void 0 : layoutItem.type) === LayoutItemType.Widget) {\n            const widget = appConfig.widgets[layoutItem.widgetId];\n            return {\n                selectedWidgetLabel: (_e = widget === null || widget === void 0 ? void 0 : widget.label) !== null && _e !== void 0 ? _e : ''\n            };\n        }\n    }\n    else {\n        const dialogId = (_f = appState === null || appState === void 0 ? void 0 : appState.appRuntimeInfo) === null || _f === void 0 ? void 0 : _f.currentDialogId;\n        if (dialogId && appConfig.dialogs[dialogId]) {\n            const dialog = appConfig.dialogs[dialogId];\n            return { selectedWidgetLabel: dialog.label };\n        }\n    }\n    return {\n        selectedWidgetLabel: ''\n    };\n}\nexport default ReactRedux.connect(getSelectedWidgetLabel)(AnimationPopperContent);\n","/** @jsx jsx */\nimport { React, jsx, css, classNames } from 'jimu-core';\nimport { animationInfos, oneByOneAnimationInfos } from './animation-info';\nimport { SidePopper } from 'jimu-ui/advanced/setting-components';\nimport { Button, Icon, Tooltip } from 'jimu-ui';\nimport AnimationPopperContent from './animation-popper-content';\nimport { PlayOutlined } from 'jimu-icons/outlined/editor/play';\nimport { InfoOutlined } from 'jimu-icons/outlined/suggested/info';\nconst animationIcon = require('jimu-ui/advanced/lib/assets/icon_animation_in_none.svg');\nexport class AnimationSettingComponent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.sidePopperTrigger = React.createRef();\n        this.buttonRef = React.createRef();\n        this.toggleSidePanel = () => {\n            this.setState({ showSidePanel: !this.state.showSidePanel });\n        };\n        this.previewAnimation = (e) => {\n            e.stopPropagation();\n            this.props.onPreviewClicked(null);\n        };\n        this.state = {\n            showSidePanel: false\n        };\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.contentId !== prevProps.contentId && this.state.showSidePanel) {\n            this.setState({ showSidePanel: false });\n        }\n    }\n    getAnimBoxStyle() {\n        return css `\r\n      background-color: transparent;\r\n      position: relative;\r\n      width: 100%;\r\n      height: 72px;\r\n\r\n      .img-tip {\r\n        position: relative;\r\n        min-width: 90px;\r\n        height: 72px;\r\n        cursor: pointer;\r\n\r\n        &, &:hover {\r\n          background: var(--ref-palette-neutral-300);\r\n        }\r\n\r\n        .has-sibling {\r\n          position: absolute;\r\n          &.first {\r\n            left: 5px;\r\n            top: 5px;\r\n          }\r\n          &.second {\r\n            bottom: 5px;\r\n            right: 5px;\r\n          }\r\n        }\r\n\r\n        .diag-sep {\r\n          position: absolute;\r\n          height: 1px;\r\n          width: 80px;\r\n          top: 36px;\r\n          transform: rotateZ(-45deg);\r\n          background: var(--ref-palette-neutral-500);\r\n\r\n          .jimu-rtl & {\r\n            transform: rotateZ(45deg);\r\n          }\r\n        }\r\n      }\r\n\r\n      .amin-icons  {\r\n        display: inline-grid;\r\n        grid-template-columns: auto 26px;\r\n        grid-column-gap: .5rem;\r\n        .jimu-icon {\r\n          margin-right: 0;\r\n        }\r\n      }\r\n      .anim-labels {\r\n        align-self: stretch;\r\n        .anim-label {\r\n          flex-grow: 1;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          display: -webkit-box;\r\n          -webkit-box-orient: vertical;\r\n          word-break: break-word;\r\n          -webkit-line-clamp: 2;\r\n        }\r\n      }\r\n    `;\n    }\n    getSidePopperStyle() {\n        return css `\r\n      .header {\r\n        height: 60px;\r\n        padding: 0 0.5rem;\r\n      }\r\n      .side-popper-title {\r\n        color: var(--ref-palette-neutral-1000);\r\n        font-size: 16px;\r\n      }\r\n      .effect-title {\r\n        color: var(--ref-palette-neutral-1000);\r\n        font-size: 13px;\r\n      }\r\n      .side-content {\r\n        position: relative;\r\n        width: 100%;\r\n        overflow: auto;\r\n      }\r\n    `;\n    }\n    render() {\n        var _a, _b;\n        const { effectSetting, oneByOneSetting, formatMessage, previewEnabled, supportAsOne, supportOneByOne } = this.props;\n        const usedAsOneEffect = animationInfos.find((item) => item.type === (effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.type));\n        const usedOneByOneEffect = oneByOneAnimationInfos.find((item) => item.type === (oneByOneSetting === null || oneByOneSetting === void 0 ? void 0 : oneByOneSetting.type));\n        const hasTwoEffects = supportAsOne && supportOneByOne;\n        const iconSize = hasTwoEffects ? 32 : 48;\n        const asOneEffectName = (effectSetting === null || effectSetting === void 0 ? void 0 : effectSetting.type) ? formatMessage(effectSetting.type.toLowerCase()) : formatMessage('none');\n        const oneByOneEffectName = (oneByOneSetting === null || oneByOneSetting === void 0 ? void 0 : oneByOneSetting.type) ? formatMessage(oneByOneSetting.type.toLowerCase()) : formatMessage('none');\n        let ariaLabel = '';\n        if (supportAsOne) {\n            ariaLabel = ariaLabel + asOneEffectName;\n        }\n        if (hasTwoEffects) {\n            ariaLabel = ariaLabel + '/';\n        }\n        if (supportOneByOne) {\n            ariaLabel = ariaLabel + oneByOneEffectName;\n        }\n        return (jsx(React.Fragment, null,\n            jsx(\"div\", { className: 'anima-box d-flex justify-content-center align-items-center', css: this.getAnimBoxStyle() },\n                jsx(Button, { className: 'img-tip d-flex justify-content-center align-items-center border-0', onClick: this.toggleSidePanel, title: ariaLabel, \"aria-label\": ariaLabel, icon: true, type: 'tertiary', disableHoverEffect: true },\n                    supportAsOne && (jsx(\"div\", { className: classNames('anim-icon first', { 'has-sibling': hasTwoEffects }) },\n                        jsx(Icon, { icon: (usedAsOneEffect === null || usedAsOneEffect === void 0 ? void 0 : usedAsOneEffect.icon) || animationIcon, size: iconSize }))),\n                    hasTwoEffects && jsx(\"div\", { className: 'diag-sep' }),\n                    supportOneByOne && (jsx(\"div\", { className: classNames('anim-icon second', { 'has-sibling': hasTwoEffects }) },\n                        jsx(Icon, { icon: (usedOneByOneEffect === null || usedOneByOneEffect === void 0 ? void 0 : usedOneByOneEffect.icon) || animationIcon, size: iconSize })))),\n                jsx(\"div\", { className: 'd-flex flex-column justify-content-between align-items-center ml-2 h-100 flex-grow-1' },\n                    jsx(\"div\", { className: 'anim-labels d-flex' },\n                        jsx(\"div\", { className: 'anim-label', title: `${asOneEffectName}${hasTwoEffects ? ' / ' : ''}${supportOneByOne ? oneByOneEffectName : ''}` },\n                            supportAsOne && jsx(\"span\", null, asOneEffectName),\n                            hasTwoEffects && jsx(\"span\", { className: 'mx-1' }, \"/\"),\n                            supportOneByOne && jsx(\"span\", null, oneByOneEffectName)),\n                        jsx(Tooltip, { title: formatMessage('scrollIntoView') },\n                            jsx(Button, { className: 'p-0', icon: true, type: 'tertiary', size: 'sm', disableHoverEffect: true, disableRipple: true },\n                                jsx(InfoOutlined, { size: 'm' })))),\n                    jsx(\"div\", { className: 'amin-icons w-100', ref: this.sidePopperTrigger },\n                        jsx(Button, { size: 'sm', ref: this.buttonRef, onClick: this.toggleSidePanel, className: 'text-truncate', title: formatMessage('change') }, formatMessage('change')),\n                        jsx(Tooltip, { title: formatMessage('preview'), placement: 'bottom' },\n                            jsx(Button, { type: 'default', size: 'sm', icon: true, disabled: !previewEnabled, onClick: this.previewAnimation },\n                                jsx(PlayOutlined, { size: 's' })))))),\n            jsx(SidePopper, { isOpen: this.state.showSidePanel, css: this.getSidePopperStyle(), position: 'right', toggle: this.toggleSidePanel, trigger: (_a = this.sidePopperTrigger) === null || _a === void 0 ? void 0 : _a.current, title: formatMessage('animationSetting'), backToFocusNode: (_b = this.buttonRef) === null || _b === void 0 ? void 0 : _b.current },\n                jsx(\"div\", { className: 'side-content' },\n                    jsx(AnimationPopperContent, Object.assign({}, this.props))))));\n    }\n}\nAnimationSettingComponent.defaultProps = {\n    onSettingChange: () => null,\n    previewEnabled: true,\n    supportOneByOne: false,\n    onPreviewClicked: () => null,\n    formatMessage: id => id\n};\n","/** @jsx jsx */\nimport { React, jsx, css, classNames, TransitionType, TransitionDirection } from 'jimu-core';\nimport { SidePopper } from 'jimu-ui/advanced/setting-components';\nimport { Button, Icon, Select, Tabs, Tab, Tooltip, ButtonGroup } from 'jimu-ui';\nimport { oneByOneAnimationInfos } from './animation-info';\nimport { transitionInfos } from './transition-info';\nimport AnimationPopperContent from './animation-popper-content';\nimport { PlayOutlined } from 'jimu-icons/outlined/editor/play';\nimport { InfoOutlined } from 'jimu-icons/outlined/suggested/info';\nconst animationIcon = require('jimu-ui/advanced/lib/assets/icon_animation_in_none.svg');\nexport class TransitionSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.sidePopperTrigger = React.createRef();\n        this.buttonRef = React.createRef();\n        this.modalStyle = {\n            position: 'absolute',\n            top: '60px',\n            bottom: '0',\n            width: '100%',\n            height: 'auto',\n            paddingBottom: '1px'\n        };\n        this.toggleSidePanel = () => {\n            this.setState({ showSidePanel: !this.state.showSidePanel });\n        };\n        this.previewTransition = (e) => {\n            e.stopPropagation();\n            this.props.onPreviewTransitionClicked();\n        };\n        this.onTransitionTypeChanged = (value) => {\n            var _a, _b;\n            if (((_a = this.props.transition) === null || _a === void 0 ? void 0 : _a.type) === value) {\n                this.props.onPreviewTransitionClicked();\n            }\n            else {\n                this.props.onTransitionChange({\n                    type: value,\n                    direction: (_b = this.props.transition) === null || _b === void 0 ? void 0 : _b.direction\n                });\n            }\n        };\n        this.onDirectionChanged = (e) => {\n            var _a;\n            this.props.onTransitionChange({\n                type: (_a = this.props.transition) === null || _a === void 0 ? void 0 : _a.type,\n                direction: e.target.value\n            });\n        };\n        this.previewOneByOneEffect = () => {\n            this.props.onPreviewOneByOneClicked();\n        };\n        this.onPreviewAsAWhoneClicked = (e) => {\n            e.stopPropagation();\n            this.props.onPreviewAsAWhoneClicked();\n        };\n        this.onOnebyOneSettingChange = (mode, setting) => {\n            this.props.onOneByOneChange(setting);\n        };\n        this.state = {\n            showSidePanel: false\n        };\n    }\n    createTransitionCard(metaInfo, index) {\n        const { transition } = this.props;\n        const transitionType = transition.type || TransitionType.None;\n        return (jsx(\"div\", { className: classNames('d-flex flex-column align-items-center card-item', {\n                selected: metaInfo.type === transitionType\n            }), key: index },\n            jsx(Button, { icon: true, role: 'option', \"aria-label\": this.props.formatMessage(metaInfo.type.toLowerCase()), \"aria-selected\": metaInfo.type === transitionType, className: 'd-flex justify-content-center card-content border-0', onClick: () => { this.onTransitionTypeChanged(metaInfo.type); } },\n                jsx(Icon, { className: 'w-100 h-100', currentColor: false, icon: metaInfo.icon || animationIcon })),\n            jsx(\"div\", { className: 'card-name flex-grow-1 d-flex align-items-start mt-1' },\n                jsx(\"span\", { className: 'text-center card-name-content', title: this.props.formatMessage(metaInfo.type.toLowerCase()) }, this.props.formatMessage(metaInfo.type.toLowerCase())))));\n    }\n    createDirectionChooser() {\n        const { transition } = this.props;\n        return (jsx(\"div\", { className: 'direction-select px-4' },\n            jsx(\"div\", { className: 'direction-title mb-2' }, this.props.formatMessage('direction')),\n            jsx(Select, { defaultValue: TransitionDirection.Horizontal, value: transition === null || transition === void 0 ? void 0 : transition.direction, onChange: this.onDirectionChanged, size: 'sm' }, Object.entries(TransitionDirection).map((entry, index) => (jsx(\"option\", { value: entry[1], key: index }, this.props.formatMessage(entry[0].toLowerCase())))))));\n    }\n    getSidePopperStyle() {\n        return css `\r\n      .tab-pane {\r\n        position: relative;\r\n      }\r\n      .header {\r\n        height: 60px;\r\n        padding: 0 0.5rem;\r\n        border-bottom: none;\r\n      }\r\n      .side-popper-title {\r\n        color: var(--ref-palette-neutral-1000);\r\n        font-size: 16px;\r\n      }\r\n      .direction-title {\r\n        color: var(--ref-palette-neutral-1000);\r\n        font-size: 13px;\r\n      }\r\n      .animation-cards {\r\n        padding: 0 16px 16px;\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-row-gap: 12px;\r\n        grid-column-gap: 12px;\r\n      }\r\n\r\n      .separator {\r\n        width: calc(100% - 2rem);\r\n        height: 1px;\r\n        margin: 0 1rem 1rem;\r\n        background: var(--ref-palette-neutral-500);\r\n      }\r\n\r\n      .card-item {\r\n        font-size: 13px;\r\n        flex: 0 0 45%;\r\n\r\n        user-select: none;\r\n        cursor: pointer;\r\n        position: relative;\r\n\r\n        .card-content {\r\n          width: 100%;\r\n          height: 5.3rem;\r\n          background-color: var(--ref-palette-neutral-300);\r\n        }\r\n\r\n        &.selected .card-content {\r\n          outline: 2px solid var(--sys-color-primary-light);\r\n        }\r\n\r\n        .card-name {\r\n          max-width: 90px;\r\n          margin: 0 auto;\r\n          color: var(--ref-palette-neutral-1100);\r\n          .card-name-content {\r\n            line-height: 1rem;\r\n            display: -webkit-box;\r\n            -webkit-line-clamp: 2;\r\n            -webkit-box-orient: vertical;\r\n            overflow: hidden;\r\n          }\r\n        }\r\n      }\r\n    `;\n    }\n    getAnimBoxStyle() {\n        return css `\r\n      background-color: transparent;\r\n      width: 100%;\r\n      height: 72px;\r\n      position: relative;\r\n\r\n      .img-tip {\r\n        position: relative;\r\n        min-width: 90px;\r\n        height: 72px;\r\n        cursor: pointer;\r\n\r\n        &, &:hover {\r\n          background: var(--ref-palette-neutral-300);\r\n        }\r\n\r\n        .has-sibling {\r\n          position: absolute;\r\n          &.first {\r\n            left: 5px;\r\n            top: 5px;\r\n          }\r\n          &.second {\r\n            bottom: 5px;\r\n            right: 5px;\r\n          }\r\n        }\r\n\r\n        .diag-sep {\r\n          position: absolute;\r\n          height: 1px;\r\n          width: 80px;\r\n          top: 36px;\r\n          transform: rotateZ(-45deg);\r\n          background: var(--ref-palette-neutral-500);\r\n\r\n          .jimu-rtl & {\r\n            transform: rotateZ(45deg);\r\n          }\r\n        }\r\n      }\r\n\r\n      .amin-icons  {\r\n        display: inline-grid;\r\n        grid-template-columns: auto 26px;\r\n        grid-column-gap: .5rem;\r\n        .jimu-icon {\r\n          margin-right: 0;\r\n        }\r\n      }\r\n\r\n      .anim-labels {\r\n        align-self: stretch;\r\n        .anim-label {\r\n          flex-grow: 1;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          display: -webkit-box;\r\n          -webkit-box-orient: vertical;\r\n          word-break: break-word;\r\n          -webkit-line-clamp: 2;\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        var _a, _b;\n        const { formatMessage, transition, transitionLabel, oneByOneEffect, showOneByOne } = this.props;\n        const usedTransitionInfo = transitionInfos.find((item) => item.type === (transition === null || transition === void 0 ? void 0 : transition.type));\n        const usedOneByOneEffect = oneByOneAnimationInfos.find((item) => item.type === (oneByOneEffect === null || oneByOneEffect === void 0 ? void 0 : oneByOneEffect.type));\n        const iconSize = showOneByOne ? 32 : 48;\n        const transitionName = (transition === null || transition === void 0 ? void 0 : transition.type) ? formatMessage(transition.type.toLowerCase()) : formatMessage('none');\n        const oneByOneEffectName = (oneByOneEffect === null || oneByOneEffect === void 0 ? void 0 : oneByOneEffect.type) ? formatMessage(oneByOneEffect.type.toLowerCase()) : formatMessage('none');\n        let ariaLabel = transitionName;\n        if (showOneByOne) {\n            ariaLabel = ariaLabel + '/' + oneByOneEffectName;\n        }\n        return (jsx(React.Fragment, null,\n            jsx(\"div\", { className: 'anima-box d-flex justify-content-center align-items-center flex-grow-1', css: this.getAnimBoxStyle() },\n                jsx(Button, { className: 'img-tip d-flex justify-content-center align-items-center border-0', onClick: this.toggleSidePanel, title: ariaLabel, \"aria-label\": ariaLabel, icon: true, type: 'tertiary', disableHoverEffect: true },\n                    jsx(\"div\", { className: classNames('anim-icon first', { 'has-sibling': showOneByOne }) },\n                        jsx(Icon, { icon: (usedTransitionInfo === null || usedTransitionInfo === void 0 ? void 0 : usedTransitionInfo.icon) || animationIcon, size: iconSize })),\n                    showOneByOne && jsx(\"div\", { className: 'diag-sep' }),\n                    showOneByOne && (jsx(\"div\", { className: classNames('anim-icon second', { 'has-sibling': showOneByOne }) },\n                        jsx(Icon, { icon: (usedOneByOneEffect === null || usedOneByOneEffect === void 0 ? void 0 : usedOneByOneEffect.icon) || animationIcon, size: iconSize })))),\n                jsx(\"div\", { className: 'd-flex flex-column justify-content-between align-items-center ml-2 h-100 flex-grow-1' },\n                    jsx(\"div\", { className: 'anim-labels d-flex' },\n                        jsx(\"div\", { className: 'anim-label' },\n                            jsx(\"span\", null, transitionName),\n                            showOneByOne && jsx(\"span\", { className: 'mx-1' }, \"/\"),\n                            showOneByOne && jsx(\"span\", null, oneByOneEffectName)),\n                        jsx(Tooltip, { title: formatMessage('animationOnTransition') },\n                            jsx(Button, { className: 'p-0', icon: true, type: 'tertiary', size: 'sm', disableHoverEffect: true, disableRipple: true },\n                                jsx(InfoOutlined, { size: 'm' })))),\n                    jsx(\"div\", { className: 'amin-icons w-100', ref: this.sidePopperTrigger },\n                        jsx(Button, { ref: this.buttonRef, \"aria-label\": formatMessage('change'), size: 'sm', onClick: this.toggleSidePanel, className: 'text-truncate', title: formatMessage('change') }, formatMessage('change')),\n                        jsx(Tooltip, { title: formatMessage('preview'), placement: 'bottom' },\n                            jsx(Button, { type: 'default', size: 'sm', icon: true, onClick: this.onPreviewAsAWhoneClicked },\n                                jsx(PlayOutlined, { size: 's' })))))),\n            this.state.showSidePanel && (jsx(SidePopper, { isOpen: true, position: 'right', toggle: this.toggleSidePanel, trigger: (_a = this.sidePopperTrigger) === null || _a === void 0 ? void 0 : _a.current, title: formatMessage('setting'), backToFocusNode: (_b = this.buttonRef) === null || _b === void 0 ? void 0 : _b.current },\n                jsx(\"div\", { css: this.getSidePopperStyle(), style: this.modalStyle },\n                    !showOneByOne &&\n                        jsx(\"div\", { className: 'bg-default border-color-gray-400 mt-4' },\n                            jsx(\"div\", { className: 'w-100 h-100 animation-panel-border' },\n                                jsx(ButtonGroup, { role: 'listbox', className: 'animation-cards' }, transitionInfos.map((entry, index) => this.createTransitionCard(entry, index))),\n                                (usedTransitionInfo === null || usedTransitionInfo === void 0 ? void 0 : usedTransitionInfo.supportDirection) && jsx(\"div\", { className: 'separator' }),\n                                (usedTransitionInfo === null || usedTransitionInfo === void 0 ? void 0 : usedTransitionInfo.supportDirection) && this.createDirectionChooser())),\n                    showOneByOne && (jsx(Tabs, { type: 'underline', key: 'widget-setting', className: 'flex-grow-1 w-100 h-100', fill: true, defaultValue: 'transition' },\n                        jsx(Tab, { id: 'transition', title: transitionLabel, className: 'tab-title-item' },\n                            jsx(\"div\", { className: 'bg-default border-color-gray-400 mt-4' },\n                                jsx(\"div\", { className: 'w-100 h-100 animation-panel-border' },\n                                    jsx(\"div\", { className: 'animation-cards', role: 'listbox' }, transitionInfos.map((entry, index) => this.createTransitionCard(entry, index))),\n                                    (usedTransitionInfo === null || usedTransitionInfo === void 0 ? void 0 : usedTransitionInfo.supportDirection) && jsx(\"div\", { className: 'separator' }),\n                                    (usedTransitionInfo === null || usedTransitionInfo === void 0 ? void 0 : usedTransitionInfo.supportDirection) && this.createDirectionChooser()))),\n                        jsx(Tab, { id: 'widget', title: formatMessage('widget'), className: 'tab-title-item' },\n                            jsx(AnimationPopperContent, { effectSetting: null, oneByOneSetting: oneByOneEffect, onSettingChange: this.onOnebyOneSettingChange, previewEnabled: true, supportOneByOne: true, supportAsOne: false, onPreviewClicked: this.previewOneByOneEffect, formatMessage: this.props.formatMessage })))))))));\n    }\n}\nTransitionSetting.defaultProps = {\n    formatMessage: id => id,\n    showOneByOne: true,\n    onPreviewOneByOneClicked: () => null\n};\n","/** @jsx jsx */\nimport { jsx, css, classNames, HoverType, hooks } from 'jimu-core';\nimport { Button, ButtonGroup, defaultMessages } from 'jimu-ui';\nimport { ArrowDownOutlined } from 'jimu-icons/outlined/directional/arrow-down';\nconst effects = [{\n        name: HoverType.None,\n        type: 'none'\n    }, {\n        name: HoverType.Skew,\n        type: 'skew',\n        x: -10,\n        y: 0\n    }, {\n        name: HoverType.Grow,\n        type: 'scale',\n        x: 110,\n        y: 110\n    }, {\n        name: HoverType.Shrink,\n        type: 'scale',\n        x: 90,\n        y: 90\n    }, {\n        name: HoverType.Float,\n        type: 'translate',\n        x: 0,\n        y: 10\n    }, {\n        name: HoverType.Sink,\n        type: 'translate',\n        x: 0,\n        y: -10\n    }, {\n        name: HoverType.Rotate,\n        type: 'rotate',\n        deg: 3\n    }, {\n        name: HoverType.Spin,\n        type: 'rotate',\n        deg: -720\n    }, {\n        name: HoverType.Forward,\n        type: 'translate',\n        x: 10,\n        y: 0\n    }, {\n        name: HoverType.Backward,\n        type: 'translate',\n        x: -10,\n        y: 0\n    }, {\n        name: HoverType.Opacity,\n        type: 'opacity',\n        opacity: 50\n    }];\nconst style = css `\r\n  .animation-cards {\r\n    padding: 0 16px 16px;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-row-gap: 12px;\r\n    grid-column-gap: 12px;\r\n  }\r\n\r\n  .separator {\r\n    width: calc(100% - 2rem);\r\n    height: 1px;\r\n    margin: 0 1rem 1rem;\r\n    background: var(--ref-palette-neutral-500);\r\n  }\r\n\r\n  .card-item {\r\n    font-size: 13px;\r\n    flex: 0 0 45%;\r\n\r\n    user-select: none;\r\n    cursor: pointer;\r\n    position: relative;\r\n\r\n    .card-content {\r\n      width: 100%;\r\n      height: 5rem;\r\n      background-color: var(--ref-palette-neutral-300);\r\n    }\r\n\r\n    &.selected .card-content {\r\n      outline: 2px solid var(--sys-color-primary-light);\r\n    }\r\n\r\n    .card-name {\r\n      max-width: 90px;\r\n      margin: 0 auto;\r\n      color: var(--ref-palette-neutral-1100);\r\n      .card-name-content {\r\n        line-height: 1rem;\r\n        display: -webkit-box;\r\n        -webkit-line-clamp: 2;\r\n        -webkit-box-orient: vertical;\r\n        overflow: hidden;\r\n      }\r\n    }\r\n  }\r\n`;\nexport function HoverEffect(props) {\n    const translate = hooks.useTranslation(defaultMessages);\n    const { type = HoverType.None, onTypeChange } = props;\n    const onHoverEffectTypeChange = hooks.useEventCallback((newType) => {\n        onTypeChange(newType);\n    });\n    const createCard = (info, index) => {\n        return (jsx(\"div\", { className: classNames('d-flex flex-column align-items-center card-item', {\n                selected: info.name === type\n            }), key: index },\n            jsx(Button, { icon: true, role: 'option', \"aria-label\": translate(info.name.toLowerCase()), \"aria-selected\": info.name === type, className: 'd-flex justify-content-center card-content border-0', onClick: () => onHoverEffectTypeChange(info.name) },\n                jsx(ArrowDownOutlined, { size: 72 })),\n            jsx(\"div\", { className: 'card-name flex-grow-1 d-flex align-items-start mt-1' },\n                jsx(\"span\", { className: 'text-center card-name-content', title: translate(info.name.toLowerCase()) }, translate(info.name.toLowerCase())))));\n    };\n    return (jsx(\"div\", { css: style },\n        jsx(ButtonGroup, { role: 'listbox', className: 'animation-cards' }, effects.map((info, index) => createCard(info, index)))));\n}\n","/** @jsx jsx */\nimport { React, jsx, css, HoverType, hooks } from 'jimu-core';\nimport { PlayOutlined } from 'jimu-icons/outlined/editor/play';\nimport { InfoOutlined } from 'jimu-icons/outlined/suggested/info';\nimport { Button, Icon, Tooltip, defaultMessages } from 'jimu-ui';\nimport { SidePopper } from 'jimu-ui/advanced/setting-components';\nimport { HoverEffect } from './hover-effects';\nconst animationIcon = require('jimu-ui/advanced/lib/assets/icon_animation_in_none.svg');\nconst style = css `\r\n  background-color: transparent;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 72px;\r\n\r\n  .img-tip {\r\n    position: relative;\r\n    min-width: 90px;\r\n    height: 72px;\r\n    cursor: pointer;\r\n\r\n    &, &:hover {\r\n      background: var(--ref-palette-neutral-300);\r\n    }\r\n  }\r\n\r\n  .amin-icons  {\r\n    display: inline-grid;\r\n    grid-template-columns: auto 26px;\r\n    grid-column-gap: .5rem;\r\n    .jimu-icon {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n  .anim-labels {\r\n    align-self: stretch;\r\n    .anim-label {\r\n      flex-grow: 1;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      display: -webkit-box;\r\n      -webkit-box-orient: vertical;\r\n      word-break: break-word;\r\n      -webkit-line-clamp: 2;\r\n    }\r\n  }\r\n`;\nconst sidePopperStyle = css `\r\n  .header {\r\n    height: 60px;\r\n    padding: 0 0.5rem;\r\n  }\r\n  .side-popper-title {\r\n    color: var(--ref-palette-neutral-1000);\r\n    font-size: 16px;\r\n  }\r\n  .effect-title {\r\n    color: var(--ref-palette-neutral-1000);\r\n    font-size: 13px;\r\n  }\r\n  .side-content {\r\n    position: relative;\r\n    width: 100%;\r\n    overflow: auto;\r\n  }\r\n`;\nexport function MouseActionSetting(props) {\n    const { type = HoverType.None, setting, onChange, onPreviewClick } = props;\n    const [showPopper, setShowPopper] = React.useState(false);\n    const buttonRef = React.useRef();\n    const sidePopperRef = React.useRef();\n    const translate = hooks.useTranslation(defaultMessages);\n    const toggleSidePanel = React.useCallback(() => {\n        setShowPopper(!showPopper);\n    }, [showPopper]);\n    const handleTypeChange = hooks.useEventCallback((newType) => {\n        onChange({ type: newType });\n    });\n    const handleSettingChange = hooks.useEventCallback((newSetting) => {\n        onChange({ type, setting: newSetting });\n    });\n    return (jsx(React.Fragment, null,\n        jsx(\"div\", { className: 'anima-box d-flex justify-content-center align-items-center', css: style },\n            jsx(Button, { className: 'img-tip d-flex justify-content-center align-items-center border-0', onClick: toggleSidePanel, title: translate(type.toLowerCase()), \"aria-label\": translate(type.toLowerCase()), icon: true, type: 'tertiary', disableHoverEffect: true },\n                jsx(\"div\", { className: 'anim-icon' },\n                    jsx(Icon, { icon: animationIcon, size: 48 }))),\n            jsx(\"div\", { className: 'd-flex flex-column justify-content-between align-items-center ml-2 h-100 flex-grow-1' },\n                jsx(\"div\", { className: 'anim-labels d-flex' },\n                    jsx(\"div\", { className: 'anim-label' },\n                        jsx(\"span\", null, translate(type.toLowerCase()))),\n                    jsx(Tooltip, { title: translate('hover') },\n                        jsx(Button, { className: 'p-0', icon: true, type: 'tertiary', size: 'sm', disableHoverEffect: true, disableRipple: true },\n                            jsx(InfoOutlined, { size: 'm' })))),\n                jsx(\"div\", { className: 'amin-icons w-100', ref: sidePopperRef },\n                    jsx(Button, { size: 'sm', ref: buttonRef, onClick: toggleSidePanel, className: 'text-truncate', title: translate('change') }, translate('change')),\n                    jsx(Tooltip, { title: translate('preview'), placement: 'bottom' },\n                        jsx(\"span\", null,\n                            jsx(Button, { type: 'default', size: 'sm', icon: true, disabled: type == null || type === HoverType.None, onClick: onPreviewClick },\n                                jsx(PlayOutlined, { size: 's' }))))))),\n        showPopper && (jsx(SidePopper, { isOpen: true, css: sidePopperStyle, position: 'right', toggle: toggleSidePanel, trigger: sidePopperRef.current, title: translate('hover'), backToFocusNode: buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current },\n            jsx(\"div\", { className: 'side-content pt-2' },\n                jsx(HoverEffect, { type: type, setting: setting, onTypeChange: handleTypeChange, onSettingChange: handleSettingChange }))))));\n}\n","import { FixedPosition, React, classNames, hooks } from 'jimu-core';\nimport { styled } from 'jimu-theme';\nimport { defaultMessages } from 'jimu-ui';\nconst PositionItem = (props) => {\n    const { className, activate, onClick, title, 'aria-label': ariaLabel } = props;\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter' && onClick) {\n            onClick(event);\n        }\n    };\n    return (React.createElement(\"div\", { role: \"button\", tabIndex: 0, title: title, \"aria-label\": ariaLabel, onClick: onClick, onKeyDown: handleKeyDown, className: classNames('position-item', { activate }, className), style: { cursor: 'pointer' } }));\n};\nconst StyledPositionItem = styled(PositionItem) `\r\n    width: 22px;\r\n    height: 22px;\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n    border-top: 1px solid var(--ref-palette-neutral-500);\r\n    border-left: 1px solid var(--ref-palette-neutral-500);\r\n    &:nth-of-type(-n+2) {\r\n        border-top: none;\r\n    }\r\n    &:nth-of-type(3n+1){\r\n        border-left: none;\r\n    }\r\n    &.activate {\r\n        background: var(--sys-color-primary-light);\r\n        border: 1px solid var(--sys-color-primary-dark);\r\n    }\r\n`;\nconst Positions = [\n    FixedPosition.TopLeft,\n    FixedPosition.TopCenter,\n    FixedPosition.TopRight,\n    FixedPosition.MiddleLeft,\n    FixedPosition.MiddleCenter,\n    FixedPosition.MiddleRight,\n    FixedPosition.BottomLeft,\n    FixedPosition.BottomCenter,\n    FixedPosition.BottomRight\n];\nconst Translations = {\n    [FixedPosition.TopLeft]: 'TL',\n    [FixedPosition.TopCenter]: 'TC',\n    [FixedPosition.TopRight]: 'TR',\n    [FixedPosition.MiddleLeft]: 'ML',\n    [FixedPosition.MiddleCenter]: 'MC',\n    [FixedPosition.MiddleRight]: 'MR',\n    [FixedPosition.BottomLeft]: 'BL',\n    [FixedPosition.BottomCenter]: 'BC',\n    [FixedPosition.BottomRight]: 'BR'\n};\nconst PositionSettingRoot = styled.div `\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-template-rows: repeat(3, 1fr);\r\n    gap: 0;\r\n    border: 1px solid var(--ref-palette-neutral-500);\r\n  `;\nexport const PositionSetting = (props) => {\n    const { value, onChange } = props;\n    const translate = hooks.useTranslation(defaultMessages);\n    return (React.createElement(PositionSettingRoot, { className: 'position-setting' }, Positions.map((position) => {\n        return React.createElement(StyledPositionItem, { key: position, title: translate(Translations[position]), \"aria-label\": translate(Translations[position]), activate: position === value, onClick: () => { onChange === null || onChange === void 0 ? void 0 : onChange(position); } });\n    })));\n};\n","import { React, hooks, Immutable, utils, getAppStore, polished, FixedPosition } from 'jimu-core';\nimport { NumericInput, defaultMessages as jimuUIMessages, DistanceUnits } from 'jimu-ui';\nimport { SettingRow, SettingSection } from 'jimu-ui/advanced/setting-components';\nimport { InputUnit, SizeEditor } from 'jimu-ui/advanced/style-setting-components';\nimport { LayoutItemSizeModes, utils as layoutUtils } from 'jimu-layouts/layout-runtime';\nimport { styled } from 'jimu-theme';\nimport { PositionSetting } from './position-setting';\nconst DEFAULT_FIXED_POSITION_SIZE_JSON = Immutable({\n    position: FixedPosition.TopRight,\n    width: '300px',\n    height: '300px',\n    offsetX: 0,\n    offsetY: 0,\n    left: '0px',\n    top: '0px',\n    right: '0px',\n    bottom: '0px',\n    widthMode: 'CUSTOM',\n    heightMode: 'CUSTOM'\n});\nconst Root = styled.div `\r\n  width: 100%;\r\n  .position-size {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    .sizes-editor {\r\n      width: 121px;\r\n      .size-editor {\r\n        width: 100px !important;\r\n      }\r\n    }\r\n  }\r\n  .jimu-widget-setting--row-label {\r\n    margin-right: auto;\r\n  }\r\n  .offset-numeric-input {\r\n    width: 110px !important;\r\n  }\r\n`;\nconst convertStringToLinearUnit = (value) => {\n    if (typeof value === 'string') {\n        const ret = polished.getValueAndUnit(value);\n        return {\n            distance: ret[0],\n            unit: ret[1]\n        };\n    }\n    else {\n        return value;\n    }\n};\nconst getWindowSize = (vertical) => {\n    const appState = getAppStore().getState().appStateInBuilder;\n    const { width, height } = utils.findViewportSize(appState.appConfig, appState.browserSizeMode);\n    return vertical ? height : width;\n};\nconst pxToPercent = (px, vertical) => {\n    const size = getWindowSize(vertical);\n    return parseFloat(((px / size) * 100).toFixed(3));\n};\nconst percentToPx = (percent, vertical) => {\n    const size = getWindowSize(vertical);\n    return Math.floor((percent * size) / 100);\n};\nconst convertUnit = (preValue, value, vertical) => {\n    if (preValue == null) {\n        return value;\n    }\n    let val = value.distance;\n    const parsedPreValue = convertStringToLinearUnit(preValue);\n    if (parsedPreValue.unit === 'px' && value.unit === '%') {\n        val = pxToPercent(value.distance, vertical);\n    }\n    else if (parsedPreValue.unit === '%' && value.unit === 'px') {\n        val = percentToPx(value.distance, vertical);\n    }\n    return { distance: val, unit: value.unit };\n};\nconst supportedSizeModes = [LayoutItemSizeModes.Custom, LayoutItemSizeModes.Stretch];\nconst availableUnits = [DistanceUnits.PIXEL, DistanceUnits.PERCENTAGE];\nexport const FixedPositionSize = (props) => {\n    var _a, _b, _c, _d, _e, _f;\n    const { fixedPositionSizeJson, onChange } = props;\n    let originValue = DEFAULT_FIXED_POSITION_SIZE_JSON.merge((fixedPositionSizeJson !== null && fixedPositionSizeJson !== void 0 ? fixedPositionSizeJson : Immutable({})));\n    const widthMode = (_a = originValue.widthMode) !== null && _a !== void 0 ? _a : LayoutItemSizeModes.Custom;\n    const heightMode = (_b = originValue.heightMode) !== null && _b !== void 0 ? _b : LayoutItemSizeModes.Custom;\n    if (widthMode === LayoutItemSizeModes.Stretch) {\n        originValue = originValue.without('width');\n    }\n    else {\n        originValue = originValue.without('left').without('right');\n    }\n    if (heightMode === LayoutItemSizeModes.Stretch) {\n        originValue = originValue.without('height');\n    }\n    else {\n        originValue = originValue.without('top').without('bottom');\n    }\n    const translate = hooks.useTranslation(jimuUIMessages);\n    const handleChange = (key, val) => {\n        const newValue = originValue.set(key, val);\n        onChange(newValue, key);\n    };\n    const handleSizeChange = (key, val) => {\n        var _a, _b;\n        const vertical = key === 'height' || key === 'top' || key === 'bottom';\n        const value = convertUnit(originValue[key], val, vertical);\n        const size = `${(_a = value === null || value === void 0 ? void 0 : value.distance) !== null && _a !== void 0 ? _a : 0}${(_b = value === null || value === void 0 ? void 0 : value.unit) !== null && _b !== void 0 ? _b : 'px'}`;\n        const newValue = originValue.set(key, size);\n        onChange(newValue, key);\n    };\n    const handleWidthModeChange = (mode) => {\n        var _a;\n        let newValue = originValue.set('widthMode', mode);\n        const width = originValue.width;\n        const position = originValue.position;\n        if (mode === LayoutItemSizeModes.Stretch) { // from custom to stretch\n            const offsetRatio = ((_a = originValue.offsetX) !== null && _a !== void 0 ? _a : 0) * 100 / getWindowSize(false);\n            let widthRatio;\n            if (!layoutUtils.isPercentage(width)) {\n                widthRatio = parseFloat(width) * 100 / getWindowSize(false);\n            }\n            else {\n                widthRatio = parseFloat(width);\n            }\n            if (position === FixedPosition.TopLeft || position === FixedPosition.BottomLeft || position === FixedPosition.MiddleLeft) {\n                newValue = newValue.set('left', `${offsetRatio.toFixed(2)}%`)\n                    .set('right', `${(100 - offsetRatio - widthRatio).toFixed(2)}%`);\n            }\n            else if (position === FixedPosition.TopRight || position === FixedPosition.BottomRight || position === FixedPosition.MiddleRight) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-unary-minus\n                newValue = newValue.set('right', `${-offsetRatio.toFixed(2)}%`)\n                    .set('left', `${(100 + offsetRatio - widthRatio).toFixed(2)}%`);\n            }\n            else {\n                newValue = newValue.set('left', `${((100 - widthRatio) / 2 + offsetRatio).toFixed(2)}%`)\n                    .set('right', `${((100 - widthRatio) / 2 - offsetRatio).toFixed(2)}%`);\n            }\n            newValue = newValue.set('offsetX', 0).without('width');\n        }\n        else {\n            let left = parseFloat(originValue.left);\n            let right = parseFloat(originValue.right);\n            if (!layoutUtils.isPercentage(originValue.left)) {\n                left = left * 100 / getWindowSize(false);\n            }\n            if (!layoutUtils.isPercentage(originValue.right)) {\n                right = right * 100 / getWindowSize(false);\n            }\n            newValue = newValue.without('left').without('right')\n                .set('width', `${(100 - left - right).toFixed(2)}%`);\n        }\n        onChange(newValue, 'widthMode');\n    };\n    const handleHeightModeChange = (mode) => {\n        var _a;\n        let newValue = originValue.set('heightMode', mode);\n        const height = originValue.height;\n        const position = originValue.position;\n        if (mode === LayoutItemSizeModes.Stretch) { // from custom to stretch\n            const offsetRatio = ((_a = originValue.offsetY) !== null && _a !== void 0 ? _a : 0) * 100 / getWindowSize(true);\n            let heightRatio;\n            if (!layoutUtils.isPercentage(height)) {\n                heightRatio = parseFloat(height) * 100 / getWindowSize(true);\n            }\n            else {\n                heightRatio = parseFloat(height);\n            }\n            if (position === FixedPosition.TopLeft || position === FixedPosition.TopCenter || position === FixedPosition.TopRight) {\n                newValue = newValue.set('top', `${offsetRatio.toFixed(2)}%`)\n                    .set('bottom', `${(100 - offsetRatio - heightRatio).toFixed(2)}%`);\n            }\n            else if (position === FixedPosition.BottomLeft || position === FixedPosition.BottomRight || position === FixedPosition.BottomCenter) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-unary-minus\n                newValue = newValue.set('bottom', `${-offsetRatio.toFixed(2)}%`)\n                    .set('top', `${(100 + offsetRatio - heightRatio).toFixed(2)}%`);\n            }\n            else {\n                newValue = newValue.set('top', `${((100 - heightRatio) / 2 + offsetRatio).toFixed(2)}%`)\n                    .set('bottom', `${((100 - heightRatio) / 2 - offsetRatio).toFixed(2)}%`);\n            }\n            newValue = newValue.set('offsetY', 0).without('height');\n        }\n        else {\n            let top = parseFloat(originValue.top);\n            let bottom = parseFloat(originValue.bottom);\n            if (!layoutUtils.isPercentage(originValue.top)) {\n                top = top * 100 / getWindowSize(true);\n            }\n            if (!layoutUtils.isPercentage(originValue.bottom)) {\n                bottom = bottom * 100 / getWindowSize(true);\n            }\n            newValue = newValue.without('top').without('bottom')\n                .set('height', `${(100 - top - bottom).toFixed(2)}%`);\n        }\n        onChange(newValue, 'heightMode');\n    };\n    return (React.createElement(Root, { className: 'style-setting--fixed-position-size' },\n        React.createElement(\"div\", { className: 'position-size' },\n            React.createElement(PositionSetting, { value: originValue.position, onChange: (position) => { handleChange('position', position); } }),\n            React.createElement(\"div\", { className: 'sizes-editor' },\n                React.createElement(SettingRow, { className: 'mt-0', label: 'W', \"aria-label\": translate('width') },\n                    React.createElement(SizeEditor, { label: 'W', mode: widthMode, sizeModes: supportedSizeModes, value: originValue.width, onModeChange: handleWidthModeChange, onChange: (width) => { handleSizeChange('width', width); } })),\n                React.createElement(SettingRow, { className: 'mt-4', label: 'H', \"aria-label\": translate('height') },\n                    React.createElement(SizeEditor, { label: 'H', mode: heightMode, sizeModes: supportedSizeModes, value: originValue.height, onModeChange: handleHeightModeChange, onChange: (height) => { handleSizeChange('height', height); } })))),\n        (heightMode === 'STRETCH' || widthMode === 'STRETCH') && (React.createElement(SettingSection, { className: 'mt-4 p-0 border-bottom-0', title: translate('margins') },\n            originValue.heightMode === 'STRETCH' && (React.createElement(React.Fragment, null,\n                React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('top'), truncateLabel: true },\n                    React.createElement(InputUnit, { className: 'offset-numeric-input', units: availableUnits, precision: 2, value: layoutUtils.normalizeLinearUnit((_c = originValue.top) !== null && _c !== void 0 ? _c : '0%', 2), onChange: (value) => { handleSizeChange('top', value); } })),\n                React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('bottom'), truncateLabel: true },\n                    React.createElement(InputUnit, { className: 'offset-numeric-input', units: availableUnits, precision: 2, value: layoutUtils.normalizeLinearUnit((_d = originValue.bottom) !== null && _d !== void 0 ? _d : '0%', 2), onChange: (value) => { handleSizeChange('bottom', value); } })))),\n            originValue.widthMode === 'STRETCH' && (React.createElement(React.Fragment, null,\n                React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('left'), truncateLabel: true },\n                    React.createElement(InputUnit, { className: 'offset-numeric-input', units: availableUnits, precision: 2, value: layoutUtils.normalizeLinearUnit((_e = originValue.left) !== null && _e !== void 0 ? _e : '0%', 2), onChange: (value) => { handleSizeChange('left', value); } })),\n                React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('right'), truncateLabel: true },\n                    React.createElement(InputUnit, { className: 'offset-numeric-input', units: availableUnits, precision: 2, value: layoutUtils.normalizeLinearUnit((_f = originValue.right) !== null && _f !== void 0 ? _f : '0%', 2), onChange: (value) => { handleSizeChange('right', value); } })))))),\n        originValue.widthMode !== 'STRETCH' && (React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('offsetX'), truncateLabel: true },\n            React.createElement(NumericInput, { \"aria-label\": translate('offsetX'), className: 'offset-numeric-input', size: 'sm', value: originValue.offsetX, onAcceptValue: (offsetX) => { handleChange('offsetX', offsetX !== null && offsetX !== void 0 ? offsetX : 0); } }))),\n        originValue.heightMode !== 'STRETCH' && (React.createElement(SettingRow, { className: 'mt-4', flow: 'no-wrap', label: translate('offsetY'), truncateLabel: true },\n            React.createElement(NumericInput, { \"aria-label\": translate('offsetY'), className: 'offset-numeric-input', size: 'sm', value: originValue.offsetY, onAcceptValue: (offsetY) => { handleChange('offsetY', offsetY !== null && offsetY !== void 0 ? offsetY : 0); } })))));\n};\n"],"names":[],"sourceRoot":""}