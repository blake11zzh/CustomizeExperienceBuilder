(self.webpackChunkarcgis_experience_builder_design_system=self.webpackChunkarcgis_experience_builder_design_system||[]).push([[399],{"../jimu-icons/svg/outlined/directional/top-left.svg":module=>{module.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16"><path fill="#000" fill-rule="evenodd" d="M12.06 2.475 13.087 3.5H6.959A3 3 0 1 0 3.5 6.959v6.127L2.475 12.06a.5.5 0 1 0-.707.707L4 15l2.157-2.157a.5.5 0 1 0-.707-.707l-.95.95V6.959A3 3 0 0 0 6.959 4.5h6.127l-1.1 1.1a.5.5 0 1 0 .706.708L15 4l-2.232-2.232a.5.5 0 1 0-.707.707M2 4a2 2 0 1 1 4 0 2 2 0 0 1-4 0" clip-rule="evenodd"></path></svg>'},"./stories/jimu-ui/lib/data-action-list/data-action-list.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DropdownStyle:()=>DropdownStyle,IconListStyle:()=>IconListStyle,ListStyle:()=>ListStyle,default:()=>__WEBPACK_DEFAULT_EXPORT__});var jimu_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../jimu-core/index.tsx"),_storybook_decorators__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./.storybook/decorators/index.tsx"),_storybook_mockimport__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./.storybook/mockimport/index.ts"),jimu_data_source__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../jimu-data-source/index.tsx"),jimu_ui__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../jimu-ui/index.tsx");const icon=__webpack_require__("../jimu-icons/svg/outlined/editor/export.svg"),directionsToIcon=__webpack_require__("../jimu-icons/svg/outlined/directional/top-left.svg");(0,_storybook_mockimport__WEBPACK_IMPORTED_MODULE_2__.I)("jimu-data-source",{default:jimu_data_source__WEBPACK_IMPORTED_MODULE_3__.Ay}),jimu_core__WEBPACK_IMPORTED_MODULE_0__.nH3.getInstance().registerExtension({epName:jimu_core__WEBPACK_IMPORTED_MODULE_0__.vZE.R6.DataSourceFactoryUri,extension:new jimu_core__WEBPACK_IMPORTED_MODULE_0__.Bol});const dsManager=jimu_core__WEBPACK_IMPORTED_MODULE_0__.zAk.getInstance(),__WEBPACK_DEFAULT_EXPORT__={title:"Components/jimu-ui/index/DataActionList",component:jimu_ui__WEBPACK_IMPORTED_MODULE_4__.DataActionList,decorators:[_storybook_decorators__WEBPACK_IMPORTED_MODULE_1__.QY,_storybook_decorators__WEBPACK_IMPORTED_MODULE_1__.Xx],argTypes:{dataSets:{control:!1}}},Template=args=>{jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.useEffect((()=>((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Vp3)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.tRc.updateStoreState((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Vp3)().getState().merge({appConfig:{dataSources:{ds1:{id:"ds1",type:jimu_core__WEBPACK_IMPORTED_MODULE_0__.hg5.FeatureLayer,url:"https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer/0"}},widgets:{w1:{}}}},{deep:!0}))),dsManager.createDataSource("ds1").then((ds=>{const dataSets=ds?[{dataSource:ds,records:[],name:null==ds?void 0:ds.getLabel()}]:[];setDss(dataSets)})),()=>{dsManager.destroyAllDataSources()})),[]);const translate=jimu_core__WEBPACK_IMPORTED_MODULE_0__.JLE.useTranslation();jimu_core__WEBPACK_IMPORTED_MODULE_0__.Ruy.getIntl().formatMessage=(...args)=>{const id=args[0].id,count=args[1];return translate(id,count)},jimu_core__WEBPACK_IMPORTED_MODULE_0__.WZ2.getInstance().getSupportedActions=(...args)=>({export:[{id:"export-json",label:"Export to JSON",name:"export",icon}],"directions-to":[{id:"directions-to",label:"Directions to",name:"directionsTo",icon:directionsToIcon}]});const[dss,setDss]=jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.useState(null);return jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.Fragment,null,dss&&jimu_core__WEBPACK_IMPORTED_MODULE_0__.q_G.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_4__.DataActionList,Object.assign({widgetId:"test_widget1",dataSets:dss},args)))},ListStyle=Template.bind({});ListStyle.args={widgetId:"test_widget1"},ListStyle.parameters={docs:{source:{type:"code"}}};const DropdownStyle=Template.bind({});DropdownStyle.args={widgetId:"test_widget1",listStyle:jimu_ui__WEBPACK_IMPORTED_MODULE_4__.DataActionListStyle.Dropdown},DropdownStyle.parameters={docs:{source:{type:"code"}}};const IconListStyle=Template.bind({});IconListStyle.args={widgetId:"test_widget1",listStyle:jimu_ui__WEBPACK_IMPORTED_MODULE_4__.DataActionListStyle.IconList},IconListStyle.parameters={docs:{source:{type:"code"}}},ListStyle.parameters={...ListStyle.parameters,docs:{...ListStyle.parameters?.docs,source:{originalSource:"args => {\n  React.useEffect(() => {\n    getAppStore().dispatch(appActions.updateStoreState(getAppStore().getState().merge({\n      appConfig: {\n        dataSources: {\n          ds1: {\n            id: 'ds1',\n            type: DataSourceTypes.FeatureLayer,\n            url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer/0'\n          }\n        },\n        widgets: {\n          w1: {}\n        }\n      }\n    }, {\n      deep: true\n    })));\n    dsManager.createDataSource('ds1').then(ds => {\n      const dataSets = ds ? [{\n        dataSource: ds,\n        records: [],\n        name: ds?.getLabel()\n      }] : [];\n      setDss(dataSets);\n    });\n    return () => {\n      dsManager.destroyAllDataSources();\n    };\n  }, []);\n  const translate = hooks.useTranslation();\n  i18n.getIntl().formatMessage = (...args) => {\n    const id = args[0].id;\n    const count = args[1];\n    return translate(id, count);\n  };\n  DataActionManager.getInstance().getSupportedActions = (...args) => {\n    return {\n      export: [{\n        id: \"export-json\",\n        label: \"Export to JSON\",\n        name: 'export',\n        icon: icon\n      }],\n      'directions-to': [{\n        id: \"directions-to\",\n        label: \"Directions to\",\n        name: 'directionsTo',\n        icon: directionsToIcon\n      }]\n    } as any;\n  };\n  const [dss, setDss] = React.useState(null);\n  return <>\r\n      {dss && <DataActionList widgetId='test_widget1' dataSets={dss} {...args} />}\r\n    </>;\n}",...ListStyle.parameters?.docs?.source}}},DropdownStyle.parameters={...DropdownStyle.parameters,docs:{...DropdownStyle.parameters?.docs,source:{originalSource:"args => {\n  React.useEffect(() => {\n    getAppStore().dispatch(appActions.updateStoreState(getAppStore().getState().merge({\n      appConfig: {\n        dataSources: {\n          ds1: {\n            id: 'ds1',\n            type: DataSourceTypes.FeatureLayer,\n            url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer/0'\n          }\n        },\n        widgets: {\n          w1: {}\n        }\n      }\n    }, {\n      deep: true\n    })));\n    dsManager.createDataSource('ds1').then(ds => {\n      const dataSets = ds ? [{\n        dataSource: ds,\n        records: [],\n        name: ds?.getLabel()\n      }] : [];\n      setDss(dataSets);\n    });\n    return () => {\n      dsManager.destroyAllDataSources();\n    };\n  }, []);\n  const translate = hooks.useTranslation();\n  i18n.getIntl().formatMessage = (...args) => {\n    const id = args[0].id;\n    const count = args[1];\n    return translate(id, count);\n  };\n  DataActionManager.getInstance().getSupportedActions = (...args) => {\n    return {\n      export: [{\n        id: \"export-json\",\n        label: \"Export to JSON\",\n        name: 'export',\n        icon: icon\n      }],\n      'directions-to': [{\n        id: \"directions-to\",\n        label: \"Directions to\",\n        name: 'directionsTo',\n        icon: directionsToIcon\n      }]\n    } as any;\n  };\n  const [dss, setDss] = React.useState(null);\n  return <>\r\n      {dss && <DataActionList widgetId='test_widget1' dataSets={dss} {...args} />}\r\n    </>;\n}",...DropdownStyle.parameters?.docs?.source}}},IconListStyle.parameters={...IconListStyle.parameters,docs:{...IconListStyle.parameters?.docs,source:{originalSource:"args => {\n  React.useEffect(() => {\n    getAppStore().dispatch(appActions.updateStoreState(getAppStore().getState().merge({\n      appConfig: {\n        dataSources: {\n          ds1: {\n            id: 'ds1',\n            type: DataSourceTypes.FeatureLayer,\n            url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/services/USA/MapServer/0'\n          }\n        },\n        widgets: {\n          w1: {}\n        }\n      }\n    }, {\n      deep: true\n    })));\n    dsManager.createDataSource('ds1').then(ds => {\n      const dataSets = ds ? [{\n        dataSource: ds,\n        records: [],\n        name: ds?.getLabel()\n      }] : [];\n      setDss(dataSets);\n    });\n    return () => {\n      dsManager.destroyAllDataSources();\n    };\n  }, []);\n  const translate = hooks.useTranslation();\n  i18n.getIntl().formatMessage = (...args) => {\n    const id = args[0].id;\n    const count = args[1];\n    return translate(id, count);\n  };\n  DataActionManager.getInstance().getSupportedActions = (...args) => {\n    return {\n      export: [{\n        id: \"export-json\",\n        label: \"Export to JSON\",\n        name: 'export',\n        icon: icon\n      }],\n      'directions-to': [{\n        id: \"directions-to\",\n        label: \"Directions to\",\n        name: 'directionsTo',\n        icon: directionsToIcon\n      }]\n    } as any;\n  };\n  const [dss, setDss] = React.useState(null);\n  return <>\r\n      {dss && <DataActionList widgetId='test_widget1' dataSets={dss} {...args} />}\r\n    </>;\n}",...IconListStyle.parameters?.docs?.source}}}}}]);