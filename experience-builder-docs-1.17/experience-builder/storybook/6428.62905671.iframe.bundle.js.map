{"version":3,"file":"6428.62905671.iframe.bundle.js","mappings":";;AAsXA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;;;;;;AAOA;;;AAIA;;ACtNA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;;;;;;AAOA;;;AAIA;;AC1EA;;;AAGA;;AAEA;;;;;;;AAOA;;AAEA;AAnKA;;;AAuKA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;AAlRA;;;;;;;;;AA4SA;;;;;;;;;;;;;AA9OA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;;AAEA;;;;;AAKA;;;;;;AAMA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;AAqBA","sources":["webpack://arcgis-experience-builder-design-system/../jimu-for-builder/lib/message-actions/filter-data-record-action-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-for-builder/lib/message-actions/select-data-record-action-setting.tsx","webpack://arcgis-experience-builder-design-system/../jimu-ui/basic/lib/guide/components/core/step-dialog/style.ts"],"sourcesContent":["/** @jsx jsx */\nimport { React, css, jsx, polished, getAppStore, Immutable, DataSourceComponent, ReactRedux, dataSourceUtils, DataSourceManager, moduleLoader, MessageType, SqlExpressionMode, DataSourceTypes, MessageActionConnectionType, defaultMessages as jimuCoreMessages } from 'jimu-core';\nimport { withTheme } from 'jimu-theme';\nimport defaultMessages from '../translations/default';\nimport { getDsByWidgetId } from './utils/utils';\nimport { getDsSelectorSourceData, checkAndGetInitUseDataSource, checkTriggerLayerIsSameToActionLayer, getUseDataSourceFromActionConfig, getNewActionDataSources, getNewActionConfigWhenAllUseDataSourceChange } from './init';\nimport { LinkCombinedOutlined } from 'jimu-icons/outlined/data/link-combined';\nimport ChooseConnectionType from './components/choose-connection-type';\nclass _FilterDataRecordActionSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.modalStyle = {\n            position: 'absolute',\n            top: '0',\n            bottom: '0',\n            width: '259px',\n            height: 'auto',\n            borderRight: '',\n            borderBottom: '',\n            paddingBottom: '1px'\n        };\n        this.getInitConfig = () => {\n            var _a, _b, _c, _d, _e;\n            const { messageWidgetId, messageType, config } = this.props;\n            const dsM = DataSourceManager.getInstance();\n            let messageUseDataSource = null;\n            let enableQueryWithCurrentExtent = true;\n            const currentMessageUseDataSource = this.getMessageUseDataSource();\n            if (!currentMessageUseDataSource) {\n                const ds = getDsByWidgetId(messageWidgetId, messageType);\n                if ((ds === null || ds === void 0 ? void 0 : ds[0]) && (ds === null || ds === void 0 ? void 0 : ds.length) === 1) {\n                    const dsJson = (_a = dsM.getDataSource(ds === null || ds === void 0 ? void 0 : ds[0].dataSourceId)) === null || _a === void 0 ? void 0 : _a.getDataSourceJson();\n                    if (dsJson && ((dsJson.type === DataSourceTypes.WebMap) || (dsJson.type === DataSourceTypes.WebScene))) {\n                        messageUseDataSource = null;\n                    }\n                    else {\n                        messageUseDataSource = Immutable({\n                            dataSourceId: (_b = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _b === void 0 ? void 0 : _b.dataSourceId,\n                            mainDataSourceId: (_c = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _c === void 0 ? void 0 : _c.mainDataSourceId,\n                            dataViewId: (_d = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _d === void 0 ? void 0 : _d.dataViewId,\n                            rootDataSourceId: (_e = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _e === void 0 ? void 0 : _e.rootDataSourceId\n                        });\n                    }\n                }\n            }\n            else {\n                messageUseDataSource = checkAndGetInitUseDataSource({\n                    widgetId: messageWidgetId,\n                    oldUseDataSource: currentMessageUseDataSource,\n                    messageType: messageType,\n                    arcGISDataSourceTypes: DataSourceTypes\n                });\n            }\n            const configItem = Array.isArray(config) ? config === null || config === void 0 ? void 0 : config[0] : config;\n            if ((configItem === null || configItem === void 0 ? void 0 : configItem.enableQueryWithCurrentExtent) !== undefined) {\n                enableQueryWithCurrentExtent = configItem.enableQueryWithCurrentExtent;\n            }\n            if (messageType === MessageType.ExtentChange) {\n                if (Array.isArray(config)) {\n                    return config === null || config === void 0 ? void 0 : config.map(item => this.getInitActionConfigItem(messageUseDataSource, enableQueryWithCurrentExtent, item));\n                }\n                else {\n                    const defaultActionConfig = !config ? this.getInitActionConfigItem(messageUseDataSource, enableQueryWithCurrentExtent, null) : this.getInitActionConfigItem(messageUseDataSource, enableQueryWithCurrentExtent, config);\n                    return [defaultActionConfig];\n                }\n            }\n            else {\n                return this.getInitActionConfigItem(messageUseDataSource, enableQueryWithCurrentExtent, config);\n            }\n        };\n        this.getInitActionConfigItem = (messageUseDataSource, enableQueryWithCurrentExtent, configItem) => {\n            const { useDataSources: allUseDataSourceOfAction } = this.props;\n            const actionUseDataSource = getNewActionDataSources(allUseDataSourceOfAction, configItem === null || configItem === void 0 ? void 0 : configItem.actionUseDataSource);\n            const sqlExprObj = (actionUseDataSource === null || actionUseDataSource === void 0 ? void 0 : actionUseDataSource.dataSourceId) ? configItem.sqlExprObj : null;\n            return {\n                messageUseDataSource: messageUseDataSource,\n                actionUseDataSource: actionUseDataSource,\n                sqlExprObj: sqlExprObj,\n                enableQueryWithCurrentExtent: enableQueryWithCurrentExtent\n            };\n        };\n        this.onSettingChange = (config) => {\n            const useDataSources = getUseDataSourceFromActionConfig(config);\n            this.props.onSettingChange({\n                actionId: this.props.actionId,\n                config: config,\n                useDataSources: useDataSources\n            });\n        };\n        this.handleTriggerLayerChange = (useDataSources) => {\n            let newConfig = this.props.config;\n            if (Array.isArray(newConfig)) {\n                newConfig = newConfig === null || newConfig === void 0 ? void 0 : newConfig.map(item => {\n                    item = item.set('messageUseDataSource', (useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources[0]) || null);\n                    return item;\n                });\n            }\n            else {\n                newConfig = newConfig.set('messageUseDataSource', (useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources[0]) || null);\n                if (useDataSources.length === 0) {\n                    newConfig = newConfig.set('connectionType', null);\n                }\n            }\n            this.onSettingChange(newConfig);\n        };\n        this.handleActionLayerChange = (useDataSources) => {\n            let newConfig = this.props.config;\n            if (Array.isArray(newConfig)) {\n                const currentMessageUseDataSource = this.getMessageUseDataSource();\n                const defaultActionConfigItem = {\n                    messageUseDataSource: currentMessageUseDataSource,\n                    actionUseDataSource: null,\n                    sqlExprObj: null,\n                    enableQueryWithCurrentExtent: true,\n                    enabledDataRelationShip: true\n                };\n                if ((useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources.length) === 0) {\n                    newConfig = Immutable([defaultActionConfigItem]);\n                }\n                else {\n                    const newMessageConfig = useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources.map(useDataSource => {\n                        return Object.assign(Object.assign({}, defaultActionConfigItem), { actionUseDataSource: useDataSource });\n                    });\n                    newConfig = Immutable(newMessageConfig);\n                }\n            }\n            else {\n                newConfig = newConfig.set('actionUseDataSource', (useDataSources === null || useDataSources === void 0 ? void 0 : useDataSources[0]) || null).set('sqlExprObj', null);\n                if (useDataSources.length === 0) {\n                    newConfig = newConfig.set('connectionType', null);\n                }\n            }\n            this.onSettingChange(newConfig);\n        };\n        this.showSqlExprPopup = () => {\n            this.setState({ isSqlExprShow: true });\n        };\n        this.toggleSqlExprPopup = () => {\n            this.setState({ isSqlExprShow: !this.state.isSqlExprShow });\n        };\n        this.onSqlExprBuilderChange = (sqlExprObj) => {\n            this.handleActionConditionsChange('sqlExprObj', sqlExprObj);\n        };\n        this.handleActionConditionsChange = (key, value) => {\n            const { config } = this.props;\n            let newConfig = config;\n            if (Array.isArray(config) && (config === null || config === void 0 ? void 0 : config.length) === 1) {\n                const newConfigItem = newConfig[0].set(key, value);\n                newConfig = Immutable([newConfigItem]);\n            }\n            else {\n                newConfig = config.set(key, value);\n            }\n            this.onSettingChange(newConfig);\n        };\n        this.onMessageFieldSelected = (allSelectedFields, ds) => {\n            const { config } = this.props;\n            const newConfig = config.set('messageUseDataSource', {\n                dataSourceId: config.messageUseDataSource.dataSourceId,\n                mainDataSourceId: config.messageUseDataSource.mainDataSourceId,\n                dataViewId: config.messageUseDataSource.dataViewId,\n                rootDataSourceId: config.messageUseDataSource.rootDataSourceId,\n                fields: allSelectedFields.map(f => f.jimuName)\n            });\n            this.onSettingChange(newConfig);\n        };\n        this.onActionFieldSelected = (allSelectedFields, ds) => {\n            const { config } = this.props;\n            const newConfig = config.set('actionUseDataSource', {\n                dataSourceId: config.actionUseDataSource.dataSourceId,\n                mainDataSourceId: config.actionUseDataSource.mainDataSourceId,\n                dataViewId: config.actionUseDataSource.dataViewId,\n                rootDataSourceId: config.actionUseDataSource.rootDataSourceId,\n                fields: allSelectedFields.map(f => f.jimuName)\n            });\n            this.onSettingChange(newConfig);\n        };\n        this.switchEnabledDataRelationShip = (checked) => {\n            this.onSettingChange(this.props.config.set('enabledDataRelationShip', checked));\n        };\n        this.switchEnabledQueryWithCurrentExtent = (checked) => {\n            this.handleActionConditionsChange('enableQueryWithCurrentExtent', checked);\n        };\n        this.checkIsDisableDataView = (widgetId) => {\n            var _a, _b, _c, _d;\n            if (this.props.messageType === MessageType.DataRecordsSelectionChange) {\n                return true;\n            }\n            const appConfig = (_b = (_a = getAppStore().getState()) === null || _a === void 0 ? void 0 : _a.appStateInBuilder) === null || _b === void 0 ? void 0 : _b.appConfig;\n            const widgetJson = (_c = appConfig === null || appConfig === void 0 ? void 0 : appConfig.widgets) === null || _c === void 0 ? void 0 : _c[widgetId];\n            if (widgetJson) {\n                const widgetLabel = (_d = widgetJson === null || widgetJson === void 0 ? void 0 : widgetJson.manifest) === null || _d === void 0 ? void 0 : _d.label;\n                if (widgetLabel === 'Map') {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        };\n        this.onUseLayersRelationship = () => {\n            const newConfig = this.props.config.setIn(['messageUseDataSource', 'fields'], [])\n                .setIn(['actionUseDataSource', 'fields'], [])\n                .set('connectionType', MessageActionConnectionType.UseLayersRelationship);\n            this.onSettingChange(newConfig);\n        };\n        this.onSetCustomFields = () => {\n            const newConfig = this.props.config.setIn(['messageUseDataSource', 'fields'], [])\n                .setIn(['actionUseDataSource', 'fields'], [])\n                .set('connectionType', MessageActionConnectionType.SetCustomFields);\n            this.onSettingChange(newConfig);\n        };\n        this.checkIsShowFrameworkActionConditions = () => {\n            var _a;\n            return !window.isExpressBuilder && !!((_a = this.props.config) === null || _a === void 0 ? void 0 : _a.actionUseDataSource) && !!this.props.config.messageUseDataSource && !Array.isArray(this.props.config);\n        };\n        this.getMessageUseDataSource = () => {\n            var _a;\n            const { config } = this.props;\n            const isConfigArray = Array.isArray(config);\n            return isConfigArray ? (_a = config[0]) === null || _a === void 0 ? void 0 : _a.messageUseDataSource : config === null || config === void 0 ? void 0 : config.messageUseDataSource;\n        };\n        this.checkIsNotRenderActionSetting = () => {\n            const { Button, Icon, Switch, Collapse, SettingSection, SettingRow, FieldSelector, DataSourceSelector, SqlExpressionBuilderPopup } = this.state;\n            const notRenderActionSetting = !Button || !Icon || !Switch || !Collapse || !SettingSection || !SettingRow || !FieldSelector ||\n                !DataSourceSelector || !SqlExpressionBuilderPopup;\n            return notRenderActionSetting;\n        };\n        this.renderFrameworkActionConditions = () => {\n            var _a, _b;\n            const { Button, Switch, Collapse, SettingSection, SettingRow, FieldSelector, SqlExpressionBuilderPopup } = this.state;\n            const { config, theme } = this.props;\n            const messageUseDataSourceInstance = config.messageUseDataSource &&\n                DataSourceManager.getInstance().getDataSource(this.props.config.messageUseDataSource.dataSourceId);\n            const actionUseDataSourceInstance = config.actionUseDataSource &&\n                DataSourceManager.getInstance().getDataSource(config.actionUseDataSource.dataSourceId);\n            const isSameLayer = checkTriggerLayerIsSameToActionLayer(config);\n            const isCustomFields = !config.connectionType || config.connectionType === MessageActionConnectionType.SetCustomFields;\n            return (jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: defaultMessages.frameworkAction_Conditions }) },\n                jsx(SettingRow, { tag: 'label', label: this.props.intl.formatMessage({ id: 'frameworkAction_RelateMessage', defaultMessage: defaultMessages.frameworkAction_RelateMessage }) },\n                    jsx(Switch, { checked: this.props.config.enabledDataRelationShip, onChange: evt => { this.switchEnabledDataRelationShip(evt.target.checked); } })),\n                jsx(SettingRow, null,\n                    jsx(Collapse, { isOpen: this.props.config.enabledDataRelationShip, className: 'w-100' },\n                        jsx(ChooseConnectionType, { messageDataSource: messageUseDataSourceInstance, actionDataSource: actionUseDataSourceInstance, connectionType: config.connectionType, onUseLayersRelationship: this.onUseLayersRelationship, onSetCustomFields: this.onSetCustomFields }),\n                        isSameLayer &&\n                            jsx(\"div\", { className: 'w-100 border p-1 mr-2' }, this.props.intl.formatMessage({ id: 'frameworkAction_AutoBind', defaultMessage: defaultMessages.frameworkAction_AutoBind })),\n                        !isSameLayer && isCustomFields && jsx(\"div\", { className: 'w-100 d-flex align-items-center mt-3' },\n                            jsx(\"div\", { className: 'd-flex flex-column relate-panel-left' },\n                                jsx(FieldSelector, { className: 'w-100', useDataSources: Immutable([(_a = this.props.config.messageUseDataSource) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayerField', defaultMessage: defaultMessages.frameworkAction_TriggerLayerField }), onChange: this.onMessageFieldSelected, useDropdown: true, selectedFields: this.props.config.messageUseDataSource && this.props.config.messageUseDataSource.fields\n                                        ? this.props.config.messageUseDataSource.fields\n                                        : Immutable([]) }),\n                                jsx(FieldSelector, { className: 'w-100 action-select-chooser', placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayerField', defaultMessage: defaultMessages.frameworkAction_ActionLayerField }), useDataSources: Immutable([(_b = this.props.config.actionUseDataSource) === null || _b === void 0 ? void 0 : _b.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, onChange: this.onActionFieldSelected, useDropdown: true, selectedFields: this.props.config.actionUseDataSource && this.props.config.actionUseDataSource.fields\n                                        ? this.props.config.actionUseDataSource.fields\n                                        : Immutable([]) })),\n                            jsx(LinkCombinedOutlined, { autoFlip: true, className: 'flex-none', width: 12, height: 40, color: theme.ref.palette.neutral[900] })))),\n                jsx(SettingRow, null,\n                    jsx(Button, { type: 'link', disabled: !this.props.config.actionUseDataSource, className: 'w-100 d-flex justify-content-start', onClick: this.showSqlExprPopup },\n                        jsx(\"div\", { className: 'w-100 text-truncate', style: { textAlign: 'start' } }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: defaultMessages.frameworkAction_MoreConditions }))),\n                    this.props.config.actionUseDataSource && jsx(DataSourceComponent, { useDataSource: this.props.config.actionUseDataSource }, (ds) => {\n                        return (jsx(SqlExpressionBuilderPopup, { dataSource: ds, mode: SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: this.props.config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));\n                    })),\n                jsx(SettingRow, null,\n                    jsx(\"div\", { className: 'sql-expr-display' }, this.props.config.sqlExprObj && actionUseDataSourceInstance\n                        ? dataSourceUtils.getArcGISSQL(this.props.config.sqlExprObj, actionUseDataSourceInstance).displaySQL\n                        : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: defaultMessages.frameworkAction_SetExpression })))));\n        };\n        this.renderFrameworkConditionsWhenQueryByExtent = () => {\n            const { Button, Switch, SettingSection, SettingRow, SqlExpressionBuilderPopup } = this.state;\n            const configInProps = this.props.config;\n            let config;\n            let enableQueryWithCurrentExtent;\n            if (Array.isArray(configInProps)) {\n                config = configInProps === null || configInProps === void 0 ? void 0 : configInProps[0];\n                enableQueryWithCurrentExtent = configInProps.length > 1 ? true : config.enableQueryWithCurrentExtent;\n            }\n            else {\n                config = configInProps;\n                enableQueryWithCurrentExtent = config.enableQueryWithCurrentExtent;\n            }\n            const actionUseDataSourceInstance = config.actionUseDataSource && DataSourceManager.getInstance().getDataSource(config.actionUseDataSource.dataSourceId);\n            return (jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: defaultMessages.frameworkAction_Conditions }) },\n                jsx(SettingRow, { tag: 'label', label: this.props.intl.formatMessage({ id: 'frameworkAction_QueryByExtent', defaultMessage: defaultMessages.frameworkAction_QueryByExtent }) },\n                    jsx(Switch, { checked: enableQueryWithCurrentExtent, onChange: evt => { this.switchEnabledQueryWithCurrentExtent(evt.target.checked); } })),\n                jsx(SettingRow, null,\n                    jsx(Button, { className: 'p-0 text-left', type: 'link', disabled: !config.actionUseDataSource, onClick: this.showSqlExprPopup, title: this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: defaultMessages.frameworkAction_MoreConditions }) }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: defaultMessages.frameworkAction_MoreConditions }))),\n                jsx(SettingRow, null,\n                    config.actionUseDataSource && jsx(DataSourceComponent, { useDataSource: config.actionUseDataSource }, (ds) => {\n                        return (jsx(SqlExpressionBuilderPopup, { dataSource: ds, mode: SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));\n                    }),\n                    jsx(\"div\", { className: 'sql-expr-display body-1' }, config.sqlExprObj && actionUseDataSourceInstance\n                        ? dataSourceUtils.getArcGISSQL(config.sqlExprObj, actionUseDataSourceInstance).displaySQL\n                        : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: defaultMessages.frameworkAction_SetExpression })))));\n        };\n        this.getActionbactionUseDataSource = () => {\n            const { config } = this.props;\n            const actionbactionUseDataSources = [];\n            if (Array.isArray(config)) {\n                config.forEach(configItem => {\n                    if (configItem === null || configItem === void 0 ? void 0 : configItem.actionUseDataSource) {\n                        actionbactionUseDataSources.push(configItem === null || configItem === void 0 ? void 0 : configItem.actionUseDataSource);\n                    }\n                });\n            }\n            else {\n                (config === null || config === void 0 ? void 0 : config.actionUseDataSource) && actionbactionUseDataSources.push(config === null || config === void 0 ? void 0 : config.actionUseDataSource);\n            }\n            return actionbactionUseDataSources;\n        };\n        this.checkIsShowConditions = () => {\n            let isActionNeedConditions;\n            if (!Array.isArray(this.props.config)) {\n                isActionNeedConditions = true;\n            }\n            else {\n                isActionNeedConditions = (this.props.config.length === 1);\n            }\n            return !window.isExpressBuilder && isActionNeedConditions;\n        };\n        this.modalStyle.borderRight = '1px solid black';\n        this.modalStyle.borderBottom = '1px solid black';\n        this.state = {\n            isShowLayerList: false,\n            currentLayerType: null,\n            isSqlExprShow: false\n        };\n    }\n    componentDidMount() {\n        moduleLoader.loadModules([\n            'jimu-ui',\n            'jimu-ui/advanced/setting-components',\n            'jimu-ui/advanced/data-source-selector',\n            'jimu-ui/advanced/sql-expression-builder'\n        ]).then(modules => {\n            this.setState({\n                Button: modules[0].Button,\n                Icon: modules[0].Icon,\n                Switch: modules[0].Switch,\n                Collapse: modules[0].Collapse,\n                SettingSection: modules[1].SettingSection,\n                SettingRow: modules[1].SettingRow,\n                FieldSelector: modules[2].FieldSelector,\n                DataSourceSelector: modules[2].DataSourceSelector,\n                SqlExpressionBuilderPopup: modules[3].SqlExpressionBuilderPopup,\n                DSSelectorTypes: Immutable([DataSourceTypes.FeatureLayer, DataSourceTypes.SceneLayer, DataSourceTypes.OrientedImageryLayer, DataSourceTypes.ImageryLayer, DataSourceTypes.BuildingComponentSubLayer,\n                    DataSourceTypes.SubtypeGroupLayer, DataSourceTypes.SubtypeSublayer])\n            }, () => {\n                let initConfig = this.getInitConfig();\n                let newConfig = this.props.config;\n                if (this.props.messageType === MessageType.ExtentChange) {\n                    newConfig = Immutable(initConfig);\n                }\n                else {\n                    initConfig = initConfig;\n                    newConfig = newConfig.set('messageUseDataSource', initConfig.messageUseDataSource).set('actionUseDataSource', initConfig.actionUseDataSource).set('sqlExprObj', initConfig.sqlExprObj);\n                }\n                this.onSettingChange(newConfig);\n            });\n        });\n    }\n    componentDidUpdate(prevProps, preState) {\n        const { useDataSources: allUseDataSourceOfAction, config } = this.props;\n        if (prevProps.config && config) {\n            const getNewActionConfigRes = getNewActionConfigWhenAllUseDataSourceChange(config, allUseDataSourceOfAction);\n            if (getNewActionConfigRes === null || getNewActionConfigRes === void 0 ? void 0 : getNewActionConfigRes.isConfigChange) {\n                this.onSettingChange(getNewActionConfigRes.newActionConfig);\n            }\n        }\n    }\n    getStyle(theme) {\n        return css `\r\n      .setting-header {\r\n        padding: ${polished.rem(10)} ${polished.rem(16)} ${polished.rem(0)} ${polished.rem(16)}\r\n      }\r\n      .jimu-collapse {\r\n        flex: 1;\r\n      }\r\n\r\n      .deleteIcon {\r\n        cursor: pointer;\r\n        opacity: .8;\r\n      }\r\n\r\n      .deleteIcon:hover {\r\n        opacity: 1;\r\n      }\r\n\r\n      .sql-expr-display {\r\n        width: 100%;\r\n        height: auto;\r\n        min-height: 60px;\r\n        line-height: 25px;\r\n        padding: 3px 5px;\r\n        color: ${theme.ref.palette.neutral[900]};\r\n        border: 1px solid ${theme.ref.palette.neutral[500]};\r\n      }\r\n\r\n      .relate-panel-left {\r\n        flex: auto;\r\n        overflow: hidden;\r\n        .action-select-chooser {\r\n          margin-top: ${polished.rem(12)};\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        const { SettingSection, DataSourceSelector } = this.state;\n        const { messageWidgetId, messageType } = this.props;\n        if (this.checkIsNotRenderActionSetting()) {\n            return null;\n        }\n        const messageUseDataSource = this.getMessageUseDataSource();\n        const triggerDsSelectorSourceData = getDsSelectorSourceData({\n            widgetId: messageWidgetId,\n            useDataSource: messageUseDataSource,\n            messageType: messageType,\n            arcGISDataSourceTypes: DataSourceTypes\n        });\n        const actionUseDataSources = this.getActionbactionUseDataSource();\n        if (this.props.messageType === MessageType.ExtentChange) {\n            return (jsx(\"div\", { css: this.getStyle(this.props.theme) },\n                jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: defaultMessages.frameworkAction_ActionLayer }) },\n                    jsx(DataSourceSelector, { isMultiple: true, types: this.state.DSSelectorTypes, useDataSources: Immutable(actionUseDataSources), hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, enableToSelectOutputDsFromSelf: true })),\n                this.checkIsShowConditions() && this.renderFrameworkConditionsWhenQueryByExtent()));\n        }\n        else {\n            return (jsx(\"div\", { css: this.getStyle(this.props.theme) },\n                jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'messageAction_TriggerData', defaultMessage: jimuCoreMessages.messageAction_TriggerData }) },\n                    jsx(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: triggerDsSelectorSourceData.useDataSources, fromRootDsIds: triggerDsSelectorSourceData.fromRootDsIds, fromDsIds: triggerDsSelectorSourceData.fromDsIds, closeDataSourceListOnChange: true, disableRemove: () => triggerDsSelectorSourceData.isReadOnly, disableDataSourceList: triggerDsSelectorSourceData.isReadOnly, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleTriggerLayerChange, widgetId: this.props.messageWidgetId, disableDataView: true, hideDataView: this.checkIsDisableDataView(this.props.messageWidgetId), enableToSelectOutputDsFromSelf: true })),\n                jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: defaultMessages.frameworkAction_ActionLayer }) },\n                    jsx(DataSourceSelector, { isMultiple: Array.isArray(this.props.config), types: this.state.DSSelectorTypes, useDataSources: Immutable(actionUseDataSources), closeDataSourceListOnChange: true, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, enableToSelectOutputDsFromSelf: true })),\n                this.checkIsShowFrameworkActionConditions() && this.renderFrameworkActionConditions()));\n        }\n    }\n}\n_FilterDataRecordActionSetting.defaultProps = {\n    config: Immutable({\n        messageUseDataSource: null,\n        actionUseDataSource: null,\n        sqlExprObj: null,\n        enabledDataRelationShip: true,\n        enableQueryWithCurrentExtent: true\n    })\n};\nconst mapStateToProps = (state) => {\n    return {\n        dataSources: state.appStateInBuilder && state.appStateInBuilder.appConfig && state.appStateInBuilder.appConfig.dataSources,\n        dataSourcesInfo: state.appStateInBuilder && state.appStateInBuilder.dataSourcesInfo\n    };\n};\nexport default ReactRedux.connect(mapStateToProps)(withTheme(_FilterDataRecordActionSetting));\n","/** @jsx jsx */\nimport { React, css, jsx, polished, Immutable, DataSourceComponent, ReactRedux, dataSourceUtils, DataSourceManager, moduleLoader, SqlExpressionMode, AllDataSourceTypes, MessageActionConnectionType, defaultMessages as jimuCoreMessages, DataSourceTypes } from 'jimu-core';\nimport { withTheme } from 'jimu-theme';\nimport defaultMessages from '../translations/default';\nimport { getDsByWidgetId } from './utils/utils';\nimport { getDsSelectorSourceData, checkAndGetInitUseDataSource, checkTriggerLayerIsSameToActionLayer, getUseDataSourceFromActionConfig, getNewActionDataSources } from './init';\nimport { LinkCombinedOutlined } from 'jimu-icons/outlined/data/link-combined';\nimport ChooseConnectionType from './components/choose-connection-type';\nclass _SelectDataRecordActionSetting extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.modalStyle = {\n            position: 'absolute',\n            top: '0',\n            bottom: '0',\n            width: '259px',\n            height: 'auto',\n            borderRight: '',\n            borderBottom: '',\n            paddingBottom: '1px'\n        };\n        this.getInitConfig = () => {\n            var _a, _b, _c, _d, _e;\n            const { messageWidgetId, messageType, config, useDataSources: allUseDataSourceOfAction } = this.props;\n            const dsM = DataSourceManager.getInstance();\n            let messageUseDataSource = null;\n            const actionUseDataSource = getNewActionDataSources(allUseDataSourceOfAction, config === null || config === void 0 ? void 0 : config.actionUseDataSource);\n            if (!this.props.config.messageUseDataSource) {\n                const ds = getDsByWidgetId(messageWidgetId, messageType);\n                if ((ds === null || ds === void 0 ? void 0 : ds[0]) && (ds === null || ds === void 0 ? void 0 : ds.length) === 1) {\n                    const dsJson = (_a = dsM.getDataSource(ds === null || ds === void 0 ? void 0 : ds[0].dataSourceId)) === null || _a === void 0 ? void 0 : _a.getDataSourceJson();\n                    if (dsJson && ((dsJson.type === DataSourceTypes.WebMap) || (dsJson.type === DataSourceTypes.WebScene))) {\n                        messageUseDataSource = null;\n                    }\n                    else {\n                        messageUseDataSource = Immutable({\n                            dataSourceId: (_b = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _b === void 0 ? void 0 : _b.dataSourceId,\n                            mainDataSourceId: (_c = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _c === void 0 ? void 0 : _c.mainDataSourceId,\n                            dataViewId: (_d = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _d === void 0 ? void 0 : _d.dataViewId,\n                            rootDataSourceId: (_e = ds === null || ds === void 0 ? void 0 : ds[0]) === null || _e === void 0 ? void 0 : _e.rootDataSourceId\n                        });\n                    }\n                }\n            }\n            else {\n                messageUseDataSource = checkAndGetInitUseDataSource({\n                    widgetId: messageWidgetId,\n                    oldUseDataSource: this.props.config.messageUseDataSource,\n                    messageType: messageType,\n                    arcGISDataSourceTypes: DataSourceTypes\n                });\n            }\n            if (actionUseDataSource && actionUseDataSource.dataSourceId) {\n                return {\n                    messageUseDataSource: messageUseDataSource,\n                    actionUseDataSource: actionUseDataSource,\n                    sqlExprObj: this.props.config.sqlExprObj\n                };\n            }\n            else {\n                return {\n                    messageUseDataSource: messageUseDataSource,\n                    actionUseDataSource: actionUseDataSource,\n                    sqlExprObj: null\n                };\n            }\n        };\n        this.onSettingChange = (config) => {\n            const useDataSources = getUseDataSourceFromActionConfig(config);\n            this.props.onSettingChange({\n                actionId: this.props.actionId,\n                config: config,\n                useDataSources: useDataSources\n            });\n        };\n        this.handleTriggerLayerChange = (useDataSources) => {\n            if (useDataSources && useDataSources.length > 0) {\n                this.handleTriggerLayerSelected(useDataSources[0]);\n            }\n            else {\n                this.handleRemoveLayerForTriggerLayer();\n            }\n        };\n        this.handleActionLayerChange = (useDataSources) => {\n            if (useDataSources && useDataSources.length > 0) {\n                this.handleActionLayerSelected(useDataSources[0]);\n            }\n            else {\n                this.handleRemoveLayerForActionLayer();\n            }\n        };\n        this.handleTriggerLayerSelected = (currentSelectedDs) => {\n            const newConfig = this.props.config.set('messageUseDataSource', currentSelectedDs);\n            this.onSettingChange(newConfig);\n        };\n        this.handleActionLayerSelected = (currentSelectedDs) => {\n            const newConfig = this.props.config.set('actionUseDataSource', currentSelectedDs).set('sqlExprObj', null);\n            this.onSettingChange(newConfig);\n        };\n        this.handleRemoveLayerForTriggerLayer = () => {\n            const newConfig = this.props.config.set('messageUseDataSource', null).set('connectionType', null);\n            this.onSettingChange(newConfig);\n        };\n        this.handleRemoveLayerForActionLayer = () => {\n            const newConfig = this.props.config.set('actionUseDataSource', null).set('sqlExprObj', null).set('connectionType', null);\n            this.onSettingChange(newConfig);\n        };\n        this.showSqlExprPopup = () => {\n            this.setState({ isSqlExprShow: true });\n        };\n        this.toggleSqlExprPopup = () => {\n            this.setState({ isSqlExprShow: !this.state.isSqlExprShow });\n        };\n        this.onSqlExprBuilderChange = (sqlExprObj) => {\n            const newConfig = this.props.config.set('sqlExprObj', sqlExprObj);\n            this.onSettingChange(newConfig);\n        };\n        this.onMessageFieldSelected = (allSelectedFields, ds) => {\n            const { config } = this.props;\n            const newConfig = config.set('messageUseDataSource', {\n                dataSourceId: config.messageUseDataSource.dataSourceId,\n                mainDataSourceId: config.messageUseDataSource.mainDataSourceId,\n                dataViewId: config.messageUseDataSource.dataViewId,\n                rootDataSourceId: config.messageUseDataSource.rootDataSourceId,\n                fields: allSelectedFields.map(f => f.jimuName)\n            });\n            this.onSettingChange(newConfig);\n        };\n        this.onActionFieldSelected = (allSelectedFields, ds) => {\n            const { config } = this.props;\n            const newConfig = config.set('actionUseDataSource', {\n                dataSourceId: config.actionUseDataSource.dataSourceId,\n                mainDataSourceId: config.actionUseDataSource.mainDataSourceId,\n                dataViewId: config.actionUseDataSource.dataViewId,\n                rootDataSourceId: config.actionUseDataSource.rootDataSourceId,\n                fields: allSelectedFields.map(f => f.jimuName)\n            });\n            this.onSettingChange(newConfig);\n        };\n        this.switchEnabledDataRelationShip = (checked) => {\n            const newConfig = this.props.config.set('enabledDataRelationShip', checked);\n            this.onSettingChange(newConfig);\n        };\n        this.onUseLayersRelationship = () => {\n            const newConfig = this.props.config.setIn(['messageUseDataSource', 'fields'], [])\n                .setIn(['actionUseDataSource', 'fields'], [])\n                .set('connectionType', MessageActionConnectionType.UseLayersRelationship);\n            this.onSettingChange(newConfig);\n        };\n        this.onSetCustomFields = () => {\n            const newConfig = this.props.config.setIn(['messageUseDataSource', 'fields'], [])\n                .setIn(['actionUseDataSource', 'fields'], [])\n                .set('connectionType', MessageActionConnectionType.SetCustomFields);\n            this.onSettingChange(newConfig);\n        };\n        this.modalStyle.borderRight = '1px solid black';\n        this.modalStyle.borderBottom = '1px solid black';\n        this.state = {\n            isShowLayerList: false,\n            currentLayerType: null,\n            isSqlExprShow: false\n        };\n    }\n    componentDidMount() {\n        moduleLoader.loadModules([\n            'jimu-ui',\n            'jimu-ui/advanced/setting-components',\n            'jimu-ui/advanced/data-source-selector',\n            'jimu-ui/advanced/sql-expression-builder'\n        ]).then(modules => {\n            this.setState({\n                Button: modules[0].Button,\n                Icon: modules[0].Icon,\n                Switch: modules[0].Switch,\n                Collapse: modules[0].Collapse,\n                SettingSection: modules[1].SettingSection,\n                SettingRow: modules[1].SettingRow,\n                FieldSelector: modules[2].FieldSelector,\n                DataSourceSelector: modules[2].DataSourceSelector,\n                SqlExpressionBuilderPopup: modules[3].SqlExpressionBuilderPopup,\n                DSSelectorTypes: Immutable([AllDataSourceTypes.FeatureLayer, AllDataSourceTypes.SceneLayer, AllDataSourceTypes.OrientedImageryLayer, AllDataSourceTypes.ImageryLayer, AllDataSourceTypes.BuildingComponentSubLayer,\n                    AllDataSourceTypes.SubtypeGroupLayer, AllDataSourceTypes.SubtypeSublayer])\n            }, () => {\n                const initConfig = this.getInitConfig();\n                const newConfig = this.props.config.set('messageUseDataSource', initConfig.messageUseDataSource)\n                    .set('actionUseDataSource', initConfig.actionUseDataSource).set('sqlExprObj', initConfig.sqlExprObj);\n                this.onSettingChange(newConfig);\n            });\n        });\n    }\n    getStyle(theme) {\n        return css `\r\n      .setting-header {\r\n        padding: ${polished.rem(10)} ${polished.rem(16)} ${polished.rem(0)} ${polished.rem(16)}\r\n      }\r\n      .jimu-collapse {\r\n        flex: 1;\r\n      }\r\n\r\n      .deleteIcon {\r\n        cursor: pointer;\r\n        opacity: .8;\r\n      }\r\n\r\n      .deleteIcon:hover {\r\n        opacity: 1;\r\n      }\r\n\r\n      .sql-expr-display {\r\n        width: 100%;\r\n        height: auto;\r\n        min-height: 60px;\r\n        line-height: 25px;\r\n        padding: 3px 5px;\r\n        color: ${theme.ref.palette.neutral[900]};\r\n        border: 1px solid ${theme.ref.palette.neutral[500]};\r\n      }\r\n\r\n      .relate-panel-left {\r\n        flex: auto;\r\n        overflow: hidden;\r\n        .action-select-chooser {\r\n          margin-top: ${polished.rem(12)};\r\n        }\r\n      }\r\n    `;\n    }\n    render() {\n        var _a, _b;\n        const { Button, Icon, Switch, Collapse, SettingSection, SettingRow, FieldSelector, DataSourceSelector, SqlExpressionBuilderPopup } = this.state;\n        const { messageWidgetId, messageType, config, theme } = this.props;\n        if (!Button || !Icon || !Switch || !Collapse || !SettingSection || !SettingRow || !FieldSelector ||\n            !DataSourceSelector || !SqlExpressionBuilderPopup) {\n            return null;\n        }\n        const triggerDsSelectorSourceData = getDsSelectorSourceData({\n            widgetId: messageWidgetId,\n            useDataSource: config.messageUseDataSource,\n            messageType: messageType,\n            arcGISDataSourceTypes: DataSourceTypes\n        });\n        const messageUseDataSourceInstance = this.props.config.messageUseDataSource &&\n            DataSourceManager.getInstance().getDataSource(this.props.config.messageUseDataSource.dataSourceId);\n        const actionUseDataSourceInstance = this.props.config.actionUseDataSource &&\n            DataSourceManager.getInstance().getDataSource(this.props.config.actionUseDataSource.dataSourceId);\n        const isSameLayer = checkTriggerLayerIsSameToActionLayer(config);\n        const isCustomFields = !config.connectionType || config.connectionType === MessageActionConnectionType.SetCustomFields;\n        return (jsx(\"div\", { css: this.getStyle(this.props.theme) },\n            jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'messageAction_TriggerData', defaultMessage: jimuCoreMessages.messageAction_TriggerData }) },\n                jsx(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: triggerDsSelectorSourceData.useDataSources, fromRootDsIds: triggerDsSelectorSourceData.fromRootDsIds, fromDsIds: triggerDsSelectorSourceData.fromDsIds, closeDataSourceListOnChange: true, disableRemove: () => triggerDsSelectorSourceData.isReadOnly, disableDataSourceList: triggerDsSelectorSourceData.isReadOnly, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleTriggerLayerChange, widgetId: this.props.messageWidgetId, hideDataView: true, enableToSelectOutputDsFromSelf: true })),\n            jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayer', defaultMessage: defaultMessages.frameworkAction_ActionLayer }) },\n                jsx(DataSourceSelector, { types: this.state.DSSelectorTypes, useDataSources: this.props.config.actionUseDataSource ? Immutable([this.props.config.actionUseDataSource]) : Immutable([]), closeDataSourceListOnChange: true, hideAddDataButton: true, hideTypeDropdown: true, mustUseDataSource: true, onChange: this.handleActionLayerChange, widgetId: this.props.widgetId, hideDataView: true, enableToSelectOutputDsFromSelf: true })),\n            this.props.config && this.props.config.actionUseDataSource && this.props.config.messageUseDataSource &&\n                jsx(SettingSection, { title: this.props.intl.formatMessage({ id: 'frameworkAction_Conditions', defaultMessage: defaultMessages.frameworkAction_Conditions }) },\n                    jsx(SettingRow, { tag: 'label', label: this.props.intl.formatMessage({ id: 'frameworkAction_RelateMessage', defaultMessage: defaultMessages.frameworkAction_RelateMessage }) },\n                        jsx(Switch, { checked: this.props.config.enabledDataRelationShip, onChange: evt => { this.switchEnabledDataRelationShip(evt.target.checked); } })),\n                    jsx(SettingRow, null,\n                        jsx(Collapse, { isOpen: this.props.config.enabledDataRelationShip, className: 'w-100' },\n                            jsx(ChooseConnectionType, { messageDataSource: messageUseDataSourceInstance, actionDataSource: actionUseDataSourceInstance, connectionType: config.connectionType, onUseLayersRelationship: this.onUseLayersRelationship, onSetCustomFields: this.onSetCustomFields }),\n                            isSameLayer &&\n                                jsx(\"div\", { className: 'w-100 border p-1 mr-2' }, this.props.intl.formatMessage({ id: 'frameworkAction_AutoBind', defaultMessage: defaultMessages.frameworkAction_AutoBind })),\n                            !isSameLayer && isCustomFields && jsx(\"div\", { className: 'w-100 d-flex align-items-center mt-3' },\n                                jsx(\"div\", { className: 'd-flex flex-column relate-panel-left' },\n                                    jsx(FieldSelector, { className: 'w-100', useDataSources: Immutable([(_a = this.props.config.messageUseDataSource) === null || _a === void 0 ? void 0 : _a.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_TriggerLayerField', defaultMessage: defaultMessages.frameworkAction_TriggerLayerField }), onChange: this.onMessageFieldSelected, useDropdown: true, selectedFields: this.props.config.messageUseDataSource && this.props.config.messageUseDataSource.fields\n                                            ? this.props.config.messageUseDataSource.fields\n                                            : Immutable([]) }),\n                                    jsx(FieldSelector, { className: 'w-100 action-select-chooser', placeholder: this.props.intl.formatMessage({ id: 'frameworkAction_ActionLayerField', defaultMessage: defaultMessages.frameworkAction_ActionLayerField }), useDataSources: Immutable([(_b = this.props.config.actionUseDataSource) === null || _b === void 0 ? void 0 : _b.asMutable({ deep: true })]), isDataSourceDropDownHidden: true, onChange: this.onActionFieldSelected, useDropdown: true, selectedFields: this.props.config.actionUseDataSource && this.props.config.actionUseDataSource.fields\n                                            ? this.props.config.actionUseDataSource.fields\n                                            : Immutable([]) })),\n                                jsx(LinkCombinedOutlined, { autoFlip: true, className: 'flex-none', width: 12, height: 40, color: theme.ref.palette.neutral[900] })))),\n                    jsx(SettingRow, null,\n                        jsx(Button, { type: 'link', disabled: !this.props.config.actionUseDataSource, className: 'w-100 d-flex justify-content-start', onClick: this.showSqlExprPopup },\n                            jsx(\"div\", { className: 'w-100 text-truncate', style: { textAlign: 'start' } }, this.props.intl.formatMessage({ id: 'frameworkAction_MoreConditions', defaultMessage: defaultMessages.frameworkAction_MoreConditions }))),\n                        this.props.config.actionUseDataSource && jsx(DataSourceComponent, { useDataSource: this.props.config.actionUseDataSource }, (ds) => {\n                            return (jsx(SqlExpressionBuilderPopup, { dataSource: ds, mode: SqlExpressionMode.Simple, isOpen: this.state.isSqlExprShow, toggle: this.toggleSqlExprPopup, expression: this.props.config.sqlExprObj, onChange: (sqlExprObj) => { this.onSqlExprBuilderChange(sqlExprObj); }, id: 'filter-widget-sql-expression-builder-popup' }));\n                        })),\n                    jsx(SettingRow, null,\n                        jsx(\"div\", { className: 'sql-expr-display' }, this.props.config.sqlExprObj && actionUseDataSourceInstance\n                            ? dataSourceUtils.getArcGISSQL(this.props.config.sqlExprObj, actionUseDataSourceInstance).displaySQL\n                            : this.props.intl.formatMessage({ id: 'frameworkAction_SetExpression', defaultMessage: defaultMessages.frameworkAction_SetExpression }))))));\n    }\n}\n_SelectDataRecordActionSetting.defaultProps = {\n    config: Immutable({\n        messageUseDataSource: null,\n        actionUseDataSource: null,\n        sqlExprObj: null,\n        enabledDataRelationShip: true\n    })\n};\nconst mapStateToProps = (state) => {\n    return {\n        dataSources: state.appStateInBuilder && state.appStateInBuilder.appConfig && state.appStateInBuilder.appConfig.dataSources,\n        dataSourcesInfo: state.appStateInBuilder && state.appStateInBuilder.dataSourcesInfo\n    };\n};\nexport default ReactRedux.connect(mapStateToProps)(withTheme(_SelectDataRecordActionSetting));\n","import { React, css, polished } from 'jimu-core';\nimport { modalStyles } from '../../../../../../lib/styles/components/modal';\nimport { bidi } from '../../../utils';\nconst DEFAULT_WIDTH = 460;\nconst COMPACT_WIDTH = 360;\n/*\n * The variables used by the guide dialog component\n * are specifically assigned, and thet are not part of the theme.\n */\nconst guideTourDialogVars = {\n    bg: '#fff!important',\n    radius: '4px!important',\n    shadow: '0 0 20px 2px rgba(0,0,0,0.20)!important',\n    pointer: {\n        bg: '#fff!important',\n        borderColor: '#5f5fff!important'\n    },\n    link: {\n        color: '#5f5fff!important',\n        hoverColor: '#4949ff!important'\n    },\n    primaryButton: {\n        default: {\n            color: '#fff!important',\n            bg: '#5f5fff!important'\n            // shadow: '0 2px 12px 0 rgba(95,95,255,0.40)!important'\n        },\n        hover: {\n            color: '#fff!important',\n            bg: '#4949ff!important'\n        }\n    },\n    secondaryButton: {\n        default: {\n            color: '#6a6a6a!important',\n            borderColor: '#6a6a6a!important'\n        },\n        hover: {\n            color: '#fff!important',\n            bg: '#5f5fff!important'\n        }\n    },\n    tertiaryButton: {\n        default: {\n            color: '#a8a8a8!important'\n        },\n        hover: {\n            color: '#6a6a6a!important'\n        }\n    }\n};\nexport const useGlobalStyle = () => {\n    return React.useMemo(() => {\n        return css `\r\n      .react-joyride__overlay {\r\n        cursor: default !important;\r\n      }\r\n      .__floater {\r\n        filter: none !important;\r\n        .__floater__arrow {\r\n          > span {\r\n            &::before {\r\n              content: ' ';\r\n              display: block;\r\n              width: 24px;\r\n              height: 24px;\r\n              background-color: ${guideTourDialogVars.pointer.bg};\r\n              border: 2px solid ${guideTourDialogVars.pointer.borderColor};\r\n              border-radius: 50%;\r\n              position: relative;\r\n              z-index: 1;\r\n            }\r\n            &::after {\r\n              content: ' ';\r\n              display: block;\r\n              background: #e3e3e3;\r\n              position: absolute;\r\n              z-index: 0;\r\n            }\r\n            svg {\r\n              display: none;\r\n            }\r\n          }\r\n        }\r\n        &[x-placement^=\"bottom\"] {\r\n          padding-top: 36px !important;\r\n          .__floater__arrow {\r\n            margin-top: -12px;\r\n            > span {\r\n              &::after {\r\n                width: 4px;\r\n                height: 24px;\r\n                top: 24px;\r\n                left: 10px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        &[x-placement^=\"right\"] {\r\n          ${bidi('padding-left')}: 36px !important;\r\n          .__floater__arrow {\r\n            ${bidi('margin-left')}: -12px;\r\n            > span {\r\n              ${bidi('left')}: 0;\r\n              &::after {\r\n                width: 24px;\r\n                height: 4px;\r\n                top: 10px;\r\n                ${bidi('left')}: 24px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        &[x-placement^=\"left\"] {\r\n          ${bidi('padding-right')}: 36px !important;\r\n          .__floater__arrow {\r\n            ${bidi('margin-right')}: -12px;\r\n            > span {\r\n              &::after {\r\n                width: 24px;\r\n                height: 4px;\r\n                top: 10px;\r\n                ${bidi('right')}: 24px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        &[x-placement^=\"top\"] {\r\n          padding-bottom: 36px !important;\r\n          .__floater__arrow {\r\n            margin-bottom: -12px;\r\n            > span {\r\n              &::after {\r\n                width: 4px;\r\n                height: 24px;\r\n                bottom: 24px;\r\n                left: 10px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\n    }, []);\n};\nexport const useStyle = (props) => {\n    var _a;\n    const theme = props.theme;\n    const modalVars = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.modal;\n    return React.useMemo(() => {\n        return css `\r\n      min-width: 360px;\r\n      ${modalStyles(props)}\r\n      color: #333;\r\n      a {\r\n        color: ${guideTourDialogVars.link.color};\r\n        &:hover {\r\n          color: ${guideTourDialogVars.link.hoverColor};\r\n        }\r\n      }\r\n      h1, h2, h3, h4, h5, h6 {\r\n        color: #333;\r\n      }\r\n      .modal-content {\r\n        background-color: ${guideTourDialogVars.bg};\r\n        border: 0;\r\n        border-radius: ${guideTourDialogVars.radius};\r\n        max-width: ${DEFAULT_WIDTH}px;\r\n      }\r\n      .modal-body {\r\n        padding: ${polished.rem(20)} ${polished.rem(20)} 0 ${polished.rem(20)};\r\n      }\r\n      .modal-footer {\r\n        padding: ${polished.rem(20)};\r\n        padding-top: 0;\r\n        .modal-footer--spacer {\r\n          flex: 1;\r\n        }\r\n        .btn-secondary,\r\n        .btn-tertiary {\r\n          min-width: auto;\r\n        }\r\n        .btn-skip{\r\n          padding-left: 0;\r\n        }\r\n      }\r\n      .guide--content-horizontal {\r\n        > div + div {\r\n          margin-left: 1.5rem;\r\n        }\r\n        .guide--text-wrapper {\r\n          h3 {\r\n            margin-bottom: 1.5rem;\r\n          }\r\n        }\r\n        .guide--img-wrapper {\r\n        margin-bottom: 0rem;\r\n        img {\r\n          display: block;\r\n          &.border {\r\n            border-color: #e3e3e3 !important;\r\n          }\r\n          &.flip {\r\n            transform: scaleX(-1);\r\n          }\r\n        }\r\n      }\r\n      .guide--img-center {\r\n        margin-bottom: 0;\r\n        img {\r\n          margin: 0 auto;\r\n        }\r\n      }\r\n      }\r\n      .guide--img-wrapper {\r\n        margin-bottom: 1rem;\r\n        img {\r\n          display: block;\r\n          &.border {\r\n            border-color: #e3e3e3 !important;\r\n          }\r\n          &.flip {\r\n            transform: scaleX(-1);\r\n          }\r\n        }\r\n      }\r\n      .guide--img-center {\r\n        margin-bottom: 1rem;\r\n        img {\r\n          margin: 0 auto;\r\n        }\r\n      }\r\n      .guide--img-fill {\r\n        margin: -30px -30px ${modalVars.innerPadding};\r\n        img {\r\n          width: 100%;\r\n          height: auto;\r\n        }\r\n      }\r\n      .guide--text-wrapper {\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n        word-break: break-word;\r\n        h3 {\r\n          font-weight: 500;\r\n          font-size: 1rem;\r\n        }\r\n      }\r\n      .btn {\r\n        padding-left: 1rem;\r\n        padding-right: 1rem;\r\n        &:disabled {\r\n          opacity: .25;\r\n          pointer-events: none;\r\n        }\r\n      }\r\n      .btn-primary {\r\n        color: ${guideTourDialogVars.primaryButton.default.color};\r\n        background-color: ${guideTourDialogVars.primaryButton.default.bg};\r\n        border: 1px solid transparent;\r\n        &:hover {\r\n          color: ${guideTourDialogVars.primaryButton.hover.color};\r\n          background-color: ${guideTourDialogVars.primaryButton.hover.bg};\r\n          border: 1px solid transparent;\r\n        }\r\n      }\r\n      .btn-secondary {\r\n        color: ${guideTourDialogVars.secondaryButton.default.color};\r\n        border-color: ${guideTourDialogVars.secondaryButton.default.borderColor};\r\n        &:hover {\r\n          color: ${guideTourDialogVars.secondaryButton.hover.color};\r\n          background-color: ${guideTourDialogVars.secondaryButton.hover.bg};\r\n          border-color: ${guideTourDialogVars.secondaryButton.hover.bg};\r\n        }\r\n      }\r\n      .btn-tertiary {\r\n        color: ${guideTourDialogVars.tertiaryButton.default.color};\r\n        &:hover {\r\n          color: ${guideTourDialogVars.tertiaryButton.hover.color};\r\n        }\r\n      }\r\n      .guide--splash {\r\n        .guide--text-wrapper {\r\n          h3 {\r\n            font-size: 1.5rem;\r\n          }\r\n          p {\r\n            font-size: 1.125rem;\r\n            line-height: 1.5;\r\n          }\r\n        }\r\n      }\r\n      @media (max-width: 1200px) {\r\n        .modal-content {\r\n          max-width: ${COMPACT_WIDTH}px;\r\n        }\r\n        .guide--content:not(.guide--content-horizontal) {\r\n          .guide--img-wrapper img {\r\n            width: 100%;\r\n            height: auto;\r\n          }\r\n        }\r\n      }\r\n    `;\n    }, [props, modalVars]);\n};\n"],"names":[],"sourceRoot":""}