"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[4472],{21820:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var l=n(28453),a=n(96540);function o(e){const t=Object.assign({h2:"h2",a:"a",span:"span",p:"p",h3:"h3",ul:"ul",li:"li",h4:"h4",strong:"strong",code:"code",h5:"h5"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,{id:"debugging-tools",className:"group relative s:flex s:flex-nowrap"},"Debugging tools",a.createElement(t.a,{href:"#debugging-tools","aria-label":"debugging tools permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"There are a variety of debugging tools available to you within your web browser that you can use to efficiently build your custom widget."),"\n",a.createElement(t.h3,{id:"browser-developer-tools",className:"group relative s:flex s:flex-nowrap"},"Browser developer tools",a.createElement(t.a,{href:"#browser-developer-tools","aria-label":"browser developer tools permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"While in the Experience Builder authoring interface or in the preview mode, you can open the developer tools of your browser to access multiple debugging tools. To open the developer tools:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"In Chrome, click the Main Menu and then select More Tools > Developer Tools. (",a.createElement(t.a,{href:"https://developers.google.com/web/tools/chrome-devtools/open"},"more info"),")"),"\n",a.createElement(t.li,null,"In Firefox, click the Main Menu > Web Developer > Toggle Tools (",a.createElement(t.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools"},"more info"),")"),"\n"),"\n",a.createElement(t.h4,{id:"dom-elements",className:"group relative s:flex s:flex-nowrap"},"DOM elements",a.createElement(t.a,{href:"#dom-elements","aria-label":"dom elements permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In the browser developer tools, click the ",a.createElement(t.strong,null,"Sources")," (Chrome) or ",a.createElement(t.strong,null,"Debugger")," (Firefox) tab. Here you can explore the DOM of your custom widget to see the current status."),"\n",a.createElement(t.h4,{id:"javascript-source-and-breakpoints",className:"group relative s:flex s:flex-nowrap"},"JavaScript source and breakpoints",a.createElement(t.a,{href:"#javascript-source-and-breakpoints","aria-label":"javascript source and breakpoints permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In the browser developer tools, click the ",a.createElement(t.strong,null,"Elements")," (Chrome) or ",a.createElement(t.strong,null,"Inspector")," (Firefox) tab. Here you can browse the page's JavaScript code. Ensure your widget has been opened (if applicable), and in the left-hand file browser, browse to ",a.createElement(t.strong,null,"webpack")," and find your widget's ",a.createElement(t.strong,null,"widget.tsx")," file and double-click it. Alternatively, type ",a.createElement(t.code,null,"ctrl + p")," to open the file command palette and type ",a.createElement(t.strong,null,"widget.tsx"),". The widget.tsx file you want will be the one with the ",a.createElement(t.code,null,"?zzzz")," (where ",a.createElement(t.code,null,"zzzz")," is a number-letter combination) at the end of the filename."),"\n",a.createElement(t.p,null,"Once you have your widget file open, you can see its TypeScript code. You can set breakpoints here by clicking on the line numbers (more info: ",a.createElement(t.a,{href:"https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints/"},"Chrome"),", ",a.createElement(t.a,{href:"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_breakpoint"},"Firefox"),")"),"\n",a.createElement(t.h5,{id:"global-variables",className:"group relative s:flex s:flex-nowrap"},"Global variables",a.createElement(t.a,{href:"#global-variables","aria-label":"global variables permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"When your code is stopped on a breakpoint, in the right-hand panel you can open the ",a.createElement(t.strong,null,"Scope")," pane to see variables that are currently in scope. Scroll down to ",a.createElement(t.strong,null,"Global"),", which is where Experience Builder places a few convenience variables that you can inspect to find out the current status of different things in your experience. Some of these variables include:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"_appState")," - a variety of properties on the current state of the experience."),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"_dataSourceManager")," - current data sources in the widget."),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"_widgetManager")," - a variety of properties about widgets, including if a widget is loaded or not."),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"_sessionManager")," - can be used to see and manage the login information."),"\n"),"\n",a.createElement(t.p,null,"There are other, less commonly used global variables available too. To see the full list view the file ",a.createElement(t.strong,null,"client\\jimu-core\\lib\\types\\window.d.ts"),"."),"\n",a.createElement(t.h5,{id:"debugging-in-the-builder-page",className:"group relative s:flex s:flex-nowrap"},"Debugging in the builder page",a.createElement(t.a,{href:"#debugging-in-the-builder-page","aria-label":"debugging in the builder page permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"When debugging in the Builder Page, the Experience is loaded in an iframe. Because of this, there are two Javascript execution contexts: ",a.createElement(t.code,null,"top")," and ",a.createElement(t.code,null,"_appWindow"),". The ",a.createElement(t.code,null,"top")," context is the builder context, and the ",a.createElement(t.code,null,"_appWindow")," context is the Experience context. When you are inspecting global variables in the console, make sure you have the correct context selected in the dropdown list in the browser developer tools. When you are debugging using breakpoints, watch ",a.createElement(t.code,null,"window.jimuConfig.isBuilder")," to determine the execution context - ",a.createElement(t.code,null,"true")," means your code is within the builder context."),"\n",a.createElement(t.h4,{id:"network",className:"group relative s:flex s:flex-nowrap"},"Network",a.createElement(t.a,{href:"#network","aria-label":"network permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"In the browser developer tools, click the ",a.createElement(t.strong,null,"Network")," tab. Here you can see the network requests that are sent and received by your Experience."),"\n",a.createElement(t.h5,{id:"clear-the-cache",className:"group relative s:flex s:flex-nowrap"},"Clear the cache",a.createElement(t.a,{href:"#clear-the-cache","aria-label":"clear the cache permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"While debugging your code, you will likely be changing your code and reloading the page frequently. Sometimes the browser caches things unexpectedly, confusing you during development. Because of this, it is important to clear your cache every time you refresh the browser, or enable the ",a.createElement(t.strong,null,"Disable cache")," checkbox on the Network developer tools while you are doing development."),"\n",a.createElement(t.h3,{id:"react-dev-tools",className:"group relative s:flex s:flex-nowrap"},"React dev tools",a.createElement(t.a,{href:"#react-dev-tools","aria-label":"react dev tools permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Experiences use the ",a.createElement(t.a,{href:"https://reactjs.org/"},"React JavaScript library"),". In addition to the DOM Elements browser above, you can install a browser extension that knows more about how React works and can show you even more information on your React components. Install the extension from your browser's extension store (",a.createElement(t.a,{href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"Chrome"),", ",a.createElement(t.a,{href:"https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"},"Firefox"),") and enable the tools. Now in your Browser Developer Tools you will have two additional tabs: ",a.createElement(t.strong,null,"Components")," and ",a.createElement(t.strong,null,"Profiler"),"."),"\n",a.createElement(t.p,null,"Click the ",a.createElement(t.strong,null,"Components"),' tab. Use the search or the "Select Element" button to select your custom widget in the component tree. When it is selected, you can see your component\'s props and state in the right-hand info panel.'))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(o,e)):o(e)},c=n(69507),i=n(46427);const s=function(e){const{data:{topicNavigation:t}}=e;return a.createElement(c.A,null,a.createElement(i.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function u(e){return a.createElement(s,e,a.createElement(r,e))}}}]);