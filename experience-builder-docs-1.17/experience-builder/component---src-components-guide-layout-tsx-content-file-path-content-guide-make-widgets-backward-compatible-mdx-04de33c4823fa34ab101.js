"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[8870],{81897:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var r=t(28453),o=t(96540);function a(e){const n=Object.assign({p:"p",ul:"ul",li:"li",ol:"ol",code:"code",pre:"pre"},(0,r.RP)(),e.components);return o.createElement(o.Fragment,null,o.createElement(n.p,null,"As the ArcGIS Experience Builder evolves, the Jimu framework may introduce new features and breaking changes. When you need to use your widget in a new version of ArcGIS Experience Builder, you must test the widget in the new version. If you find that the widget is not working as expected, please read the release notes to see if there are any breaking changes that may affect your widget."),"\n",o.createElement(n.p,null,"The configuration of each ArcGIS Experience Builder widget is stored in the app config. When you add additional functionality to a custom widget, you may need to modify the configuration format. To make the widget backward compatible with the previous configuration, you have two options: check the configuration format programmatically, or use VersionManager to upgrade the old format. The latter is strongly recommended due to the following advantages:"),"\n",o.createElement(n.ul,null,"\n",o.createElement(n.li,null,"The code is simpler, as it only processes the latest format."),"\n",o.createElement(n.li,null,"It is easier to track the changes, as they are put into one VersionManager file."),"\n"),"\n",o.createElement(n.p,null,"The first option is straightforward. Below is the guide to use VersionManager to make the widget backward compatible."),"\n",o.createElement(n.p,null,"To use VersionManager, you need to take two steps:"),"\n",o.createElement(n.ol,null,"\n",o.createElement(n.li,null,"Define the VersionManager class as a subclass of ",o.createElement(n.code,null,"WidgetVersionManager"),". If using version 1.13 or earlier, use ",o.createElement(n.code,null,"BaseVersionManager"),". For later versions, ",o.createElement(n.code,null,"WidgetVersionManager")," is recommended."),"\n",o.createElement(n.li,null,"Assign the VersionManager instance to the widget class or function property ",o.createElement(n.code,null,"versionManager"),", like this ",o.createElement(n.code,null,"Widget.versionManager = new WidgetVersionManager();"),"."),"\n"),"\n",o.createElement(n.p,null,"In the VersionManager class that extends from ",o.createElement(n.code,null,"BaseVersionManager"),", you need to define the ",o.createElement(n.code,null,"versions")," property, which is an array of version objects. Each version object contains the ",o.createElement(n.code,null,"version")," property and the ",o.createElement(n.code,null,"upgrader")," function. The ",o.createElement(n.code,null,"upgrader")," function is used to upgrade the configuration from the previous version to the current version. The ",o.createElement(n.code,null,"upgrader")," function takes the configuration object as the parameter and returns the upgraded configuration object.\nIf the configuration is not changed, you can skip the version in the ",o.createElement(n.code,null,"versions")," array.\nIf your VersionManager needs to upgrade more than the widget configuration, such as the ",o.createElement(n.code,null,"useDatasources")," or ",o.createElement(n.code,null,"outputDataSources"),", you can extend the ",o.createElement(n.code,null,"WidgetVersionManager")," class.\nThe VersionManager that extends from ",o.createElement(n.code,null,"WidgetVersionManager")," is very similar to the VersionManager that extends from ",o.createElement(n.code,null,"BaseVersionManager"),", but the version object supports one more property, ",o.createElement(n.code,null,"upgradeFullInfo"),".\nWhen this property is set to ",o.createElement(n.code,null,"true"),", the ",o.createElement(n.code,null,"upgrader")," function will receive the full widget info object, then you should return the upgraded full widget info object."),"\n",o.createElement(n.p,null,"Here is an example of a VersionManager class that extends from ",o.createElement(n.code,null,"WidgetVersionManager"),":"),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-typescript"},"import { WidgetVersionManager, WidgetUpgradeInfo } from 'jimu-core'\n\nclass VersionManager extends WidgetVersionManager {\n  versions = [{\n    version: '1.6.0',\n    description: 'Change property a to b. This demonstrates how to upgrade the widget config',\n    upgrader: (oldConfig) => {\n      if (!oldConfig) return oldConfig\n      const newConfig = oldConfig.set('b', oldConfig.a).without('a')\n      return newConfig\n    }\n  }, {\n    version: '1.15.0',\n    description: 'Upgrade the use data source.',\n    upgradeFullInfo: true,\n    upgrader: async (oldInfo: WidgetUpgradeInfo) => {\n      const newWidgetJson = oldInfo.widgetJson.set('useDataSources', YOUR_NEW_USE_DATA_SOURCES)\n      const widgetInfo = { ...oldInfo, widgetJson: newWidgetJson }\n      return widgetInfo\n    }\n  }]\n}\n\nexport const versionManager = new VersionManager()\n")),"\n",o.createElement(n.p,null,"We recommend that you put the VersionManager class in a separate file, such as ",o.createElement(n.code,null,"version-manager.ts"),", and put it in the ",o.createElement(n.code,null,"src")," folder."),"\n",o.createElement(n.p,null,"Then, in your ",o.createElement(n.code,null,"widget.tsx")," file, assign the VersionManager instance to the widget class or function."),"\n",o.createElement(n.pre,null,o.createElement(n.code,{className:"language-typescript"},"import { versionManager } from '../version-manager'\n\nexport default function Widget (props) {\n  //...\n}\n\nWidget.versionManager = versionManager\n")))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?o.createElement(n,e,o.createElement(a,e)):a(e)},l=t(69507),s=t(46427);const c=function(e){const{data:{topicNavigation:n}}=e;return o.createElement(l.A,null,o.createElement(s.S,Object.assign({},e,{topicNavigation:n,wrapInLayout:!1})))};function u(e){return o.createElement(c,e,o.createElement(i,e))}}}]);