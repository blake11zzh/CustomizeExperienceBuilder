"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[4956],{75567:function(e,t,n){n.r(t),n.d(t,{default:function(){return m}});var l=n(28453),a=n(96540);function r(e){const t=Object.assign({h2:"h2",a:"a",span:"span",p:"p",ul:"ul",li:"li",h3:"h3",code:"code",ol:"ol",blockquote:"blockquote",pre:"pre",strong:"strong",h4:"h4"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,{id:"how-theme-works",className:"group relative s:flex s:flex-nowrap"},"How theme works",a.createElement(t.a,{href:"#how-theme-works","aria-label":"how theme works permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"The theming system in Experience Builder provides you the power to systematically customize the\nlook-and-feel of your apps. Experience Builder provides a default theme with configurable attributes\ncalled theme variables and style modules for the UI components from Jimu UI. Under the hood, the style\nmodules read the theme variables and use them to generate CSS styles at runtime and apply them to components\naccordingly."),"\n",a.createElement(t.p,null,"All themes are customized and extended from the default theme."),"\n",a.createElement(t.p,null,"A specific theme usually consists of the following:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"theme variable overrides: colors, typography, spacings, components, etc. provided in a JSON file."),"\n",a.createElement(t.li,null,"style overrides: either a ",a.createElement(t.a,{href:"https://sass-lang.com"},"Sass")," file(.scss) or a TypeScript file(.ts)"),"\n",a.createElement(t.li,null,"supporting assets: fonts, images, etc."),"\n"),"\n",a.createElement(t.h2,{id:"theme-variables",className:"group relative s:flex s:flex-nowrap"},"Theme variables",a.createElement(t.a,{href:"#theme-variables","aria-label":"theme variables permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Theme variables are the configurable attributes that the components use to style themselves with."),"\n",a.createElement(t.h3,{id:"core-variables",className:"group relative s:flex s:flex-nowrap"},"Core variables",a.createElement(t.a,{href:"#core-variables","aria-label":"core variables permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Colors:","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"primary: used to present primary UI elements, show active states, or interactive sections"),"\n",a.createElement(t.li,null,"secondary: used to present secondary UI elements"),"\n",a.createElement(t.li,null,"info: used to present general information"),"\n",a.createElement(t.li,null,"success: used to present a success state, such as completion of a process or passing a successful check"),"\n",a.createElement(t.li,null,"warning: used to present an in-progress state or warning information that the users should be noticed"),"\n",a.createElement(t.li,null,"danger: used to present a failed state or a severe situation that the users should be aware of"),"\n",a.createElement(t.li,null,"light: mostly used to present the background and border of layout elements, such as containers and separators"),"\n",a.createElement(t.li,null,"dark: mostly used to present text elements"),"\n",a.createElement(t.li,null,"black"),"\n",a.createElement(t.li,null,"white"),"\n",a.createElement(t.li,null,"All the above theme colors, except black and white, also have nine different shades (from 100 to 900)"),"\n"),"\n"),"\n",a.createElement(t.li,null,"Typography: font family, font sizes, font weights, and line heights"),"\n",a.createElement(t.li,null,"Spacing:","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"sizes: used to define margins and paddings"),"\n",a.createElement(t.li,null,"gutters: used to define small spaces, for example, space between an icon and text within a button"),"\n"),"\n"),"\n",a.createElement(t.li,null,"Border: the default border color and width"),"\n",a.createElement(t.li,null,"Border radius: none, sm, default, lg, circle, and pill"),"\n",a.createElement(t.li,null,"Box shadows: none, sm, default, lg"),"\n"),"\n",a.createElement(t.h3,{id:"component-variables",className:"group relative s:flex s:flex-nowrap"},"Component variables",a.createElement(t.a,{href:"#component-variables","aria-label":"component variables permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Body: color and font definition to be applied to the ",a.createElement(t.code,null,"body")," section"),"\n",a.createElement(t.li,null,"Header: Background and color definition to be applied to the ",a.createElement(t.code,null,"header")," section"),"\n",a.createElement(t.li,null,"Footer: Background and color definition to be applied to the ",a.createElement(t.code,null,"footer")," section"),"\n",a.createElement(t.li,null,"Link: color definition to be applied to the ",a.createElement(t.code,null,"<a>")," tags"),"\n",a.createElement(t.li,null,"All the other UI components: Button, Dropdown, Nav, Modal, etc."),"\n"),"\n",a.createElement(t.p,null,"See the full ",a.createElement(t.a,{href:"/experience-builder/sample-code/themes/demo-theme/"},"theme variable JSON")," from the demo theme."),"\n",a.createElement(t.p,null,"These variables are defined in a JSON format and can be overridden by a custom ",a.createElement(t.code,null,"variables.json"),"\nfile."),"\n",a.createElement(t.h2,{id:"how-to-create-a-theme",className:"group relative s:flex s:flex-nowrap"},"How to create a theme",a.createElement(t.a,{href:"#how-to-create-a-theme","aria-label":"how to create a theme permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"There are two approaches to create a new theme:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"Override the default theme variables"),"\n",a.createElement(t.li,null,"Provide extra style modules or stylesheets"),"\n"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"Normally, providing variable overrides should be sufficient and it is the easiest.\nOnly consider the second approach if your theme design cannot be achieved by redefining variables\nand customize CSS styles are needed, for example, to provide a unique look-and-feel for a certain component."),"\n"),"\n",a.createElement(t.h3,{id:"override-theme-variables",className:"group relative s:flex s:flex-nowrap"},"Override theme variables",a.createElement(t.a,{href:"#override-theme-variables","aria-label":"override theme variables permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"This is the easiest and most common approach to define your own theme in Experience Builder."),"\n",a.createElement(t.p,null,"First, let's create a new folder under ",a.createElement(t.code,null,"client/your-extensions/themes/")," directory with\nthe following structure:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"variables.json: where the custom theme variables will go to"),"\n",a.createElement(t.li,null,"thumbnail.png: the thumbnail of the theme"),"\n",a.createElement(t.li,null,"manifest.json: view ",a.createElement(t.code,null,"jimu-core/lib/types/manifest.d.ts")," for the list of properties"),"\n"),"\n",a.createElement(t.p,null,"Open ",a.createElement(t.code,null,"variables.json")," and add your custom overrides such as:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-json"},'{\n  "colors": {\n    "primary": "red"\n  },\n  "typography": {\n    "fontFamilyBase": "Impact, Arial",\n    "fontSizeBase": "1rem"\n  }\n}\n')),"\n",a.createElement(t.p,null,"Re-run ",a.createElement(t.code,null,"npm start")," in the ",a.createElement(t.strong,null,"client")," directory in your command prompt or terminal window to\nhave Experience Builder pick up the new theme."),"\n",a.createElement(t.h2,{id:"override-css-styles",className:"group relative s:flex s:flex-nowrap"},"Override CSS styles",a.createElement(t.a,{href:"#override-css-styles","aria-label":"override css styles permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"If you would like to provide additional CSS styles to your theme, or use CSS to override existing\nstyles that simply overriding theme variables cannot achieve, you can do so by adding a ",a.createElement(t.code,null,"style")," file\nto the theme."),"\n",a.createElement(t.p,null,"The ",a.createElement(t.code,null,"style")," file can have two different extensions (representing two different ways of writing styles):"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,".ts")," (recommended): uses the CSS-in-JS way to provide ",a.createElement(t.strong,null,"scoped")," CSS styles"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,".scss"),': the more "traditional" way of directly writing static CSS styles, with extra abilities offered by\nthe Sass library.'),"\n"),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"Note: only one style file can be added to a theme folder."),"\n"),"\n",a.createElement(t.h3,{id:"stylets",className:"group relative s:flex s:flex-nowrap"},"style.ts",a.createElement(t.a,{href:"#stylets","aria-label":"stylets permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"This refers to the use of the CSS-in-JS (Emotion library) method to provide scoped CSS styles\nto re-style ",a.createElement(t.strong,null,"components")," in your theme. Global styles are also considered as a special style module\nin the theming system."),"\n",a.createElement(t.p,null,"The reasons that using CSS-in-JS is recommended are as follows:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"Full access to the theme variables in a JSON structure from the code"),"\n",a.createElement(t.li,null,"The styles are scoped and targeted to certain components, making the style management more controlled"),"\n"),"\n",a.createElement(t.h4,{id:"example-re-style-the-button-component",className:"group relative s:flex s:flex-nowrap"},"Example: re-style the Button component",a.createElement(t.a,{href:"#example-re-style-the-button-component","aria-label":"example re style the button component permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"First, create a ",a.createElement(t.code,null,"style.ts")," file in the theme folder, and add the following required ",a.createElement(t.code,null,"import")," to the file:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import { css } from 'jimu-core';\n")),"\n",a.createElement(t.p,null,"Then we can start writing custom style modules for the target components by using the\n",a.createElement(t.a,{href:"https://emotion.sh/docs/css-prop"},"'css' prop")," from Emotion."),"\n",a.createElement(t.p,null,"Create a function with css prop as the returned value:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import { css } from 'jimu-core';\n\n// custom styles applied to the Button component from Jimu UI:\nconst customButtonStyles = (props) => {\n  return css`\n    /* put your CSS here */\n  `;\n}\n")),"\n",a.createElement(t.p,null,"Optionally, you can call ",a.createElement(t.code,null,"props.theme")," to get the theme variables from the ",a.createElement(t.code,null,"props")," parameter,\nas well as other props available from the target component."),"\n",a.createElement(t.p,null,"Put any of your CSS styles for the component inside of css` `:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import { css } from 'jimu-core';\n\n// custom styles applied to the Button component from Jimu UI:\nconst customButtonStyles = (props) => {\n  const theme = props.theme;\n  const buttonType = props.type;\n  return css`\n    /* make the primary button's text to be bold and has a shadow */\n    ${buttonType === 'primary' && `\n      font-weight: ${theme.typography.weights.bold};\n      box-shadow: ${theme.boxShadows.default};\n    `}\n  `;\n}\n")),"\n",a.createElement(t.p,null,"Last step, export the function as a module renamed to the name of the component:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"// at the end of the style.ts file:\nexport { customButtonStyles as Button};\n")),"\n",a.createElement(t.h4,{id:"example-global-styles",className:"group relative s:flex s:flex-nowrap"},"Example: global styles",a.createElement(t.a,{href:"#example-global-styles","aria-label":"example global styles permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Create another function with css prop as the returned value:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import { css } from 'jimu-core';\n\n// global styles applied to the entire app:\nconst customGlobalStyles = (props) => {\n  return css`\n    /* make the root font size smaller */\n    html {\n      font-size: 80%;\n    }\n  `;\n}\n")),"\n",a.createElement(t.p,null,"Global style module can be exported with the name 'Global':"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"// at the end of the style.ts file:\nexport { customGlobalStyles as Global};\n")),"\n",a.createElement(t.blockquote,null,"\n",a.createElement(t.p,null,"At runtime, Jimu's theme manager will load these extra styles along with the default\none and apply them together to the components."),"\n"),"\n",a.createElement(t.h3,{id:"stylescss",className:"group relative s:flex s:flex-nowrap"},"style.scss",a.createElement(t.a,{href:"#stylescss","aria-label":"stylescss permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,'This refers to the "traditional" way of writing styles in static CSS.'),"\n",a.createElement(t.p,null,"In the theme folder, you can optionally add a ",a.createElement(t.code,null,"style.scss")," file to define your custom CSS with.\nIn the runtime, this file will be imported last and will override all the other styles,\nsuch as the styles generated from variables.json."),"\n",a.createElement(t.p,null,"Quick sample:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-css"},"body {\n  background: #333;\n  color: white;\n  font-family: Impact, Arial;\n}\n.btn {\n  background: red;\n}\n")),"\n",a.createElement(t.h2,{id:"other-helpful-tips",className:"group relative s:flex s:flex-nowrap"},"Other helpful tips",a.createElement(t.a,{href:"#other-helpful-tips","aria-label":"other helpful tips permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.h3,{id:"use-custom-fonts",className:"group relative s:flex s:flex-nowrap"},"Use custom fonts",a.createElement(t.a,{href:"#use-custom-fonts","aria-label":"use custom fonts permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Experience Builder allows custom fonts to be added to a theme."),"\n",a.createElement(t.p,null,"The custom fonts can be files hosted on a server, such as Google Fonts, or local ones inside of\nthe theme folder, such as ",a.createElement(t.code,null,"path/to/your-theme/assets/fonts/"),"."),"\n",a.createElement(t.h3,{id:"import-fonts",className:"group relative s:flex s:flex-nowrap"},"Import fonts",a.createElement(t.a,{href:"#import-fonts","aria-label":"import fonts permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"If the font set comes with a font CSS file, then the font can be imported as such:"),"\n",a.createElement(t.p,null,"Using ",a.createElement(t.code,null,"style.ts"),":"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript"},"import { css } from 'jimu-core';\n\n// add font import to the global style function:\nconst customGlobalStyles = (props) => {\n  return css`\n    /* import Open Sans font */\n    @import url('https://fonts.googleapis.com/css?family=Open+Sans');\n  `;\n}\n\nexport { customGlobalStyles as Global};\n")),"\n",a.createElement(t.p,null,"Using ",a.createElement(t.code,null,"style.scss"),":"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-css"},"/* import Open Sans */\n@import url('https://fonts.googleapis.com/css?family=Open+Sans');\n")),"\n",a.createElement(t.h3,{id:"apply-custom-fonts",className:"group relative s:flex s:flex-nowrap"},"Apply custom fonts",a.createElement(t.a,{href:"#apply-custom-fonts","aria-label":"apply custom fonts permalink",className:"anchor-link"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(t.p,null,"Configure the ",a.createElement(t.code,null,"fontFamilyBase")," attribute in ",a.createElement(t.code,null,"variables.json"),":"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-json"},'{\n  "typography": {\n    "fontFamilyBase": "Open Sans"\n  }\n}\n')))}var s=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},o=n(69507),c=n(46427);const i=function(e){const{data:{topicNavigation:t}}=e;return a.createElement(o.A,null,a.createElement(c.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function m(e){return a.createElement(i,e,a.createElement(s,e))}}}]);