"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[4301],{69431:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var l=t(28453),a=t(96540);function i(e){const n=Object.assign({p:"p",code:"code",ul:"ul",li:"li",h3:"h3",a:"a",span:"span",h4:"h4",pre:"pre"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"The ",a.createElement(n.code,null,"jimu")," libraries that come with ArcGIS Experience Builder can be used to include a variety of functionality into your widget. In addition to this functionality, third-party libraries can be included and used within an Experience Builder widget."),"\n",a.createElement(n.p,null,"There are three ways to include third-party libraries to make them available for use within a widget. With each way, you can use the library in one or multiple widgets."),"\n",a.createElement(n.p,null,'For the "NPM install" and "download and load directly" approaches:'),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"If the third-party is used by only one widget, you can use static import or dynamic import depending on your requirement."),"\n",a.createElement(n.li,null,"If the third-party library is used by more than one widget, use dynamic import. The dynamically loaded modules are generated into the ",a.createElement(n.code,null,"widgets/chunks")," folder after compiling."),"\n"),"\n",a.createElement(n.h3,{id:"npm-install",className:"group relative s:flex s:flex-nowrap"},"NPM install",a.createElement(n.a,{href:"#npm-install","aria-label":"npm install permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"Using NPM to manage the dependencies is a very common approach and is the recommended way if your requirements allow."),"\n",a.createElement(n.h4,{id:"how-to",className:"group relative s:flex s:flex-nowrap"},"How to",a.createElement(n.a,{href:"#how-to","aria-label":"how to permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"The best way to do this depends on whether the dependency is used by one or multiple widgets."),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"If the dependency is used by only one widget, you can install the dependency into the widget folder."),"\n",a.createElement(n.li,null,"If the dependency is used by multiple widgets, you should create a shared module to hold the dependency and then import the module into the widgets as necessary."),"\n"),"\n",a.createElement(n.p,null,"In a terminal, browse to the directory (the widget folder or a shared folder), run ",a.createElement(n.code,null,"npm init"),", and answer the questions. This will place a ",a.createElement(n.code,null,"package.json")," file at the directory."),"\n",a.createElement(n.p,null,"Next, find the name of the third-party library in the npm package directory. This can be done by going to ",a.createElement(n.a,{href:"https://www.npmjs.com/"},"npmjs.com")," and searching or the package name will be listed within the library's documentation pages. Use the package name to run the npm install command:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"npm install <package-name> -S\n")),"\n",a.createElement(n.p,null,"Running this command does two things. First, it downloads the library files and places them into the ",a.createElement(n.code,null,"node_modules")," directory. Second, it adds a reference to the library in the ",a.createElement(n.code,null,"package.json")," file you created with the ",a.createElement(n.code,null,"npm init")," command above."),"\n",a.createElement(n.p,null,"The package name can now be used in ",a.createElement(n.code,null,"import")," commands in your custom widget. For example, ",a.createElement(n.code,null,'import ReactDataGrid from "react-data-grid";')," or ",a.createElement(n.code,null,"import('react-data-grid').then(ReactDataGrid => {...})"),"."),"\n",a.createElement(n.p,null,"Experience builder will automatically install all widget dependencies that are listed in the ",a.createElement(n.code,null,"package.json")," files when you run ",a.createElement(n.code,null,"npm install")," in the ",a.createElement(n.code,null,"client")," folder. This automatic install will only happen for widgets that are in the ",a.createElement(n.code,null,"your-extensions")," folder."),"\n",a.createElement(n.p,null,"See the ",a.createElement(n.a,{href:"/experience-builder/sample-code/widgets/react-data-grid/"},"react-data-grid sample")," for an illustration of this pattern in action."),"\n",a.createElement(n.h3,{id:"load-via-cdn-using-manifestjson",className:"group relative s:flex s:flex-nowrap"},"Load via CDN using manifest.json",a.createElement(n.a,{href:"#load-via-cdn-using-manifestjson","aria-label":"load via cdn using manifestjson permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"If this library is available on the CDN, including the library by putting the library's CDN url in the ",a.createElement(n.code,null,"manifest.json")," file's ",a.createElement(n.code,null,"dependency")," property may be a viable option."),"\n",a.createElement(n.h4,{id:"how-to-1",className:"group relative s:flex s:flex-nowrap"},"How to",a.createElement(n.a,{href:"#how-to-1","aria-label":"how to 1 permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"Find the CDN url of the library. Typically this is listed in the library's documentation, or you may be able to find it on ",a.createElement(n.a,{href:"https://www.jsdelivr.com/"},"jsDelivr")," or ",a.createElement(n.a,{href:"https://unpkg.com/"},"unpkg"),". For example, in the jQuery sample the CDN url is ",a.createElement(n.code,null,"https://unpkg.com/jquery@3.5.1/dist/jquery.js"),"."),"\n",a.createElement(n.p,null,"Add an array property to the widget ",a.createElement(n.code,null,"manifest.json")," file called ",a.createElement(n.code,null,"dependency")," and add the url to the array. For example:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-json"},'"dependency": [\r\n  "https://unpkg.com/jquery@3.5.1/dist/jquery.js"\r\n],\n')),"\n",a.createElement(n.p,null,"Experience Builder will automatically load the library when the experience is loaded and your widget can use the library per the library's documentation."),"\n",a.createElement(n.p,null,"See the ",a.createElement(n.a,{href:"/experience-builder/sample-code/widgets/jquery/"},"jquery sample")," for an illustration of this pattern in action."),"\n",a.createElement(n.h3,{id:"download-and-load-directly",className:"group relative s:flex s:flex-nowrap"},"Download and load directly",a.createElement(n.a,{href:"#download-and-load-directly","aria-label":"download and load directly permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"Including the library by manually downloading the files and storing them within your widget directory structure is another option."),"\n",a.createElement(n.h4,{id:"how-to-2",className:"group relative s:flex s:flex-nowrap"},"How to",a.createElement(n.a,{href:"#how-to-2","aria-label":"how to 2 permalink",className:"anchor-link"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",a.createElement(n.p,null,"Find the downloadable built assets for the library. Typically this is linked in the library's documentation, or in a ",a.createElement(n.code,null,"dist")," folder in the downloadable assets in the ",a.createElement(n.code,null,"Releases")," area of the library's GitHub repository."),"\n",a.createElement(n.p,null,"After downloading, depending on whether this library will be used by one or multiple widgets, extract the files and copy them into your widget root directory or a shared directory. Because it will be included via a relative path import, you can place the files in any location within your widget. However, by convention it is recommended to place the files within a folder called ",a.createElement(n.code,null,"lib"),"."),"\n",a.createElement(n.p,null,"After the files are in place, the library can be imported using a relative path. For example: ",a.createElement(n.code,null,'import * as d3 from "./lib/d3/d3.min.js";')," or ",a.createElement(n.code,null,"import('./lib/d3/d3.min.js').then(d3 => {...});")),"\n",a.createElement(n.p,null,"See the ",a.createElement(n.a,{href:"/experience-builder/sample-code/widgets/d3/"},"D3 sample")," for an illustration of this pattern in action."))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.RP)(),e.components);return n?a.createElement(n,e,a.createElement(i,e)):i(e)},o=t(69507),c=t(46427);const d=function(e){const{data:{topicNavigation:n}}=e;return a.createElement(o.A,null,a.createElement(c.S,Object.assign({},e,{topicNavigation:n,wrapInLayout:!1})))};function s(e){return a.createElement(d,e,a.createElement(r,e))}}}]);