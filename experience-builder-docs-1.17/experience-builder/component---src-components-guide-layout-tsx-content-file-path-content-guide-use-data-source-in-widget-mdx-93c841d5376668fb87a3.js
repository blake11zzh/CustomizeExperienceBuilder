"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[4438],{67538:function(e,t,a){a.r(t),a.d(t,{default:function(){return u}});var n=a(28453),l=a(96540);function r(e){const t=Object.assign({p:"p",a:"a",ul:"ul",li:"li",em:"em",code:"code",h3:"h3",span:"span",pre:"pre",h4:"h4",ol:"ol"},(0,n.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,l.createElement(t.a,{href:"/experience-builder/guide/core-concepts/data-source/"},"Data sources")," define how your widget accesses data. There are a variety of things you may want to do with data sources, each of which are detailed below."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Select a data source and save the used fields in the widget settings"),"\n",l.createElement(t.li,null,"Read and display the data in the widget runtime"),"\n",l.createElement(t.li,null,"Filter or query data based on user input"),"\n",l.createElement(t.li,null,"Handle selection on data"),"\n",l.createElement(t.li,null,"Sync the data source with the ArcGIS Maps SDK for JavaScript feature object"),"\n",l.createElement(t.li,null,"Your widget may need to generate an output data source"),"\n",l.createElement(t.li,null,"Your widget may need to publish a message"),"\n"),"\n",l.createElement(t.p,null,l.createElement(t.em,null,"Note: when you see the ",l.createElement(t.code,null,"appConfig")," variable used in this guide, it refers to the app config JSON object. For ArcGIS Online or Enterprise edition, the app config JSON is saved as item data; For developer edition, it is saved under ",l.createElement(t.code,null,"server/public/apps/[appId]/config.json")," (published version) or ",l.createElement(t.code,null,"server/public/apps/[appId]/resources/config.json")," (draft version).")),"\n",l.createElement(t.h3,{id:"select-a-data-source-in-the-widget-settings",className:"group relative s:flex s:flex-nowrap"},"Select a data source in the widget settings",l.createElement(t.a,{href:"#select-a-data-source-in-the-widget-settings","aria-label":"select a data source in the widget settings permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"To select a data source in the widget settings, you should use the ",l.createElement(t.a,{href:"/experience-builder/storybook/?path=/story/components-jimu-ui-advanced-data-source-selector-datasourceselector--single-selection-no-default-selected-ds"},l.createElement(t.code,null,"DataSourceSelector"))," component.\nExperience Builder supports multiple types of data sources."),"\n",l.createElement(t.p,null,"To use the ",l.createElement(t.code,null,"DataSourceSelector")," component, you must set the data source types that the widget supports through the ",l.createElement(t.code,null,"types")," prop. ",l.createElement(t.a,{href:"/experience-builder/api-reference/jimu-core/AllDataSourceTypes/"},"AllDataSourceTypes")," from ",l.createElement(t.code,null,"jimu-core")," is the supported data source types. After you select a data source, you can get the selected data sources through the ",l.createElement(t.code,null,"onChange")," callback. In the ",l.createElement(t.code,null,"onChange")," callback, you need to call ",l.createElement(t.code,null,"props.onSettingChange()")," to save the selected data sources into the ",l.createElement(t.code,null,"appConfig")," (",l.createElement(t.code,null,"appConfig.widgets[widgetId].useDataSources"),").\nIf the user adds a new data source, the newly-added data source is saved in ",l.createElement(t.code,null,"appConfig.dataSources"),". See ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/feature-layer-function/"},"this")," sample widget."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-tsx"},"<DataSourceSelector\n   types={Immutable([AllDataSourceTypes.FeatureLayer])}\n   useDataSources={props.useDataSources}\n   useDataSourcesEnabled={props.useDataSourcesEnabled}\n   onToggleUseDataEnabled={onToggleUseDataEnabled}\n   onChange={onDataSourceChange}\n   widgetId={props.id}\n/>\n")),"\n",l.createElement(t.p,null,"After selecting a data source, you may want to allow the user to select fields from the data. To do this, you can use the ",l.createElement(t.a,{href:"/experience-builder/storybook/?path=/story/components-jimu-ui-advanced-data-source-selector-fieldselector--list-single-selection"},"FieldSelector")," component.\nLike the data source, you should save the selected fields in ",l.createElement(t.code,null,"appConfig.widgets[widgetId].useDataSources")," as well. The data source will automatically load these fields. For performance reasons, the fields that are not used won't be loaded."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-tsx"},"{\n   props.useDataSources && props.useDataSources.length > 0 &&\n   <FieldSelector\n      useDataSources={props.useDataSources}\n      onChange={onFieldChange}\n      selectedFields={props.useDataSources[0].fields || Immutable([])}\n   />\n}\n")),"\n",l.createElement(t.h3,{id:"read-and-display-the-data-in-the-widget-runtime",className:"group relative s:flex s:flex-nowrap"},"Read and display the data in the widget runtime",l.createElement(t.a,{href:"#read-and-display-the-data-in-the-widget-runtime","aria-label":"read and display the data in the widget runtime permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"After a data source is selected in the widget settings, the widget runtime can get the selected data sources through ",l.createElement(t.code,null,"props.useDataSources"),". To read the data, use the ",l.createElement(t.code,null,"DataSource")," instance. To get the ",l.createElement(t.code,null,"DataSource")," instance, use ",l.createElement(t.code,null,"DataSourceManager")," or  ",l.createElement(t.code,null,"DataSourceComponent"),". To use ",l.createElement(t.code,null,"DataSourceComponent"),", pass the ",l.createElement(t.code,null,"useDataSource")," prop. To get the ",l.createElement(t.code,null,"DataSource")," instance, use the ",l.createElement(t.code,null,"onDataSourceCreated")," callback."),"\n",l.createElement(t.p,null,"To read data, use the render function to display the data. See ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/feature-layer-function/"},"this")," sample widget. As an alternative, you can use the ",l.createElement(t.code,null,"onDataSourceInfoChange")," callback and update your widget UI in this callback function according to the current data in the data source.\nIf your widget needs to listen to the data source filter change, you can use ",l.createElement(t.code,null,"onQueryRequired")," callback to update the data. Please note this callback will be valid only when the ",l.createElement(t.code,null,"query")," prop is not used.\nIf you want to update your widget only when the selected records changes, you can use ",l.createElement(t.code,null,"onSelectionChange")," callback."),"\n",l.createElement(t.p,null,"If your widget must load data, pass in the ",l.createElement(t.code,null,"query")," and ",l.createElement(t.code,null,"widgetId")," props. The ",l.createElement(t.code,null,"widgetId")," is required because the framework uses this prop to manage the query parameters that multiple widgets apply to the same data source.\nIf you want to load data but do not want to change the data in the data source, pass in the ",l.createElement(t.code,null,"localId")," prop. This will create a local data source for use. The recommended localId pattern is: ",l.createElement(t.code,null,"widgetId + ???"),", for example ",l.createElement(t.code,null,"widget_1_my_local"),"."),"\n",l.createElement(t.p,null,"When you render the ",l.createElement(t.code,null,"DataSourceComponent"),", the data source instance will be created but the data is not loaded initially because it's expecting you to pass in a ",l.createElement(t.code,null,"query")," prop which would cause another network request. To get the loaded data, you can use ",l.createElement(t.code,null,"dataSource.getRecords()"),".\nThe data is paged and the default paging size is 100. The user can change the paging size in the builder data settings panel. The loaded data is cached on the client, and the cache will be cleared if the query criteria is changed."),"\n",l.createElement(t.p,null,"When displaying the data, the displayed page size does not need to be the same as the query page size. For example, if the query paging size is 100, you can use ",l.createElement(t.code,null,"dataSource.getRecordsByPage(1, 10)")," to get the first 10 records to display."),"\n",l.createElement(t.p,null,"To get the total number of records, pass in the ",l.createElement(t.code,null,"queryCount")," prop, then get the count through ",l.createElement(t.code,null,"dataSource.count"),"."),"\n",l.createElement(t.p,null,"Whenever the data source info is changed, the data render function and the ",l.createElement(t.code,null,"onDataSourceInfoChange")," callback will be invoked. The info includes the following:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.code,null,"instanceStatus"),": whether the data source instance is created successfully"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"status"),": whether the data is loading or loaded"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"countStatus"),": whether the count of data is loading or loaded"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"selectedIds"),": the selected data IDs"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"selectOptions"),": the query (filter) to select data, the data source will query it and put the results in the ",l.createElement(t.code,null,"selectedIds")),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"widgetQueries"),": the query (filter) widgets applied to the data source"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"version"),": the version number is used to manage the data change in the client side. Therefore, the data source consumers are aware when data is changed."),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"gdbVersion"),": for feature services that support branch versioning. When the Branch Version Management widget switches the branch version, the version is saved here."),"\n"),"\n",l.createElement(t.p,null,"In many cases, the widget will need to compare the current data source info with the previous info to determine what needs to be updated."),"\n",l.createElement(t.p,null,"If your widget needs to listen to the data source info change, but does not need to use the data records in the data source, you can omit the ",l.createElement(t.code,null,"query")," param and use the ",l.createElement(t.code,null,"onQueryRequired")," callback to do the query."),"\n",l.createElement(t.p,null,"To get the fields in the data source, you can use ",l.createElement(t.code,null,"dataSource.getSchema().fields"),"."),"\n",l.createElement(t.h3,{id:"filter-or-query-data-based-on-user-input",className:"group relative s:flex s:flex-nowrap"},"Filter or query data based on user input",l.createElement(t.a,{href:"#filter-or-query-data-based-on-user-input","aria-label":"filter or query data based on user input permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"When a widget filters the data, the data in the data source instance is changed and all widgets will observe the change. When a widget queries data through a data source, the data in data source instance is not affected."),"\n",l.createElement(t.p,null,"When multiple widgets apply a filter to the same data source, the attribute filters are tied together with ",l.createElement(t.code,null,"and")," operator(s). For geometry filters, the filter from the last widget (ordered by widget add order in the app config) to apply a geometry filter is used. For temporal filters, the intersection of time extents is used."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"To filter a data source, there are two basic ways, depending on how the data source is configured:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"If the widget loads data, the recommended way is to use the ",l.createElement(t.code,null,"DataSourceComponent")," like:"),"\n"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-typescript"},"<DataSourceComponent useDataSource={} widgetId={} query={}>\n{ Your render method }\n</DataSourceComponent>\n")),"\n",l.createElement(t.p,null,"You can find an example of using the ",l.createElement(t.code,null,"DataSourceComponent")," in the ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/message-subscriber/"},"Message subscriber sample")," and the ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/server-side-output/"},"Server-side output data source sample"),"."),"\n",l.createElement(t.p,null,l.createElement(t.em,null,"Note: you can use ",l.createElement(t.code,null,"dataSource.load()")," to load and filter the data as well.")),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"If the widget does not load data, you can use the ",l.createElement(t.code,null,"updateQueryParams()")," function of a ",l.createElement(t.code,null,"Data Source"),". See the ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/filter-feature-layer/"},"Filter feature layer")," sample for an example."),"\n"),"\n"),"\n",l.createElement(t.li,null,"\n",l.createElement(t.p,null,"To query data through a data source, you can use ",l.createElement(t.code,null,"dataSource.query()"),". When querying data, the filters applied to this data source are used as well."),"\n"),"\n"),"\n",l.createElement(t.h3,{id:"handle-selection-on-data",className:"group relative s:flex s:flex-nowrap"},"Handle selection on data",l.createElement(t.a,{href:"#handle-selection-on-data","aria-label":"handle selection on data permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"The designed selection behavior in an Experience Builder app is that all widgets should update and observe the same selection. For example, when a user selects a record within a List widget, the Text widget should see the selection if it uses the selection view.\nEvery data source has a selection data view that manages the selection. Besides the selection data view, the selected record ID is saved in the Redux app store so widgets that use the data source can get notified when the selection is changed."),"\n",l.createElement(t.p,null,"To select data records in a data source, you can use ",l.createElement(t.code,null,"dataSource.selectRecordById()"),", ",l.createElement(t.code,null,"dataSource.selectRecordsByIds()")," or ",l.createElement(t.code,null,"dataSource.selectRecords()"),".\nWhen using ",l.createElement(t.code,null,"dataSource.selectRecordById()")," or ",l.createElement(t.code,null,"dataSource.selectRecordsByIds()"),", if the records have been loaded in the data source, you don't need to pass in the second parameter. If not, you need to pass in the second parameter to make sure other widgets that use the selections can read the records.\n",l.createElement(t.code,null,"dataSource.selectRecords()")," can select data records by a query parameter. The data source will set the query result to the data source info so that other widgets can be updated accordingly."),"\n",l.createElement(t.p,null,"To read the selection, you can use ",l.createElement(t.code,null,"dataSource.getSelectedRecords()"),"."),"\n",l.createElement(t.h4,{id:"use-webmapwebscene",className:"group relative s:flex s:flex-nowrap"},"Use WebMap/WebScene",l.createElement(t.a,{href:"#use-webmapwebscene","aria-label":"use webmapwebscene permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"WebMap and WebScene from the ArcGIS Maps SDK for JavaScript are wrapped as data sources in the ",l.createElement(t.code,null,"jimu-arcgis")," package. To access a WebMap, use ",l.createElement(t.code,null,"WebMapDataSource"),"; to access a WebScene, use ",l.createElement(t.code,null,"WebSceneDataSource"),". Review the ",l.createElement(t.a,{href:"/experience-builder/sample-code/widgets/map-view/"},"MapView sample")," to learn how to use these data sources. In addition to the WebMap and WebScene objects, all the layers in these objects are wrapped as data sources as well, which allows you to call ",l.createElement(t.code,null,"getChildDataSources()")," to get all the layer data sources. The supported layers and services are defined by ",l.createElement(t.code,null,"SupportedLayerServiceTypes")," and ",l.createElement(t.code,null,"SupportedServerTypes"),".\nIf you have a ArcGIS Maps SDK for JavaScript ",l.createElement(t.code,null,"layer")," and want to find the related layer data source, please call ",l.createElement(t.code,null,"mapDs.getDataSourceByLayer()")," or ",l.createElement(t.code,null,"mapDs.createDataSourceByLayer()"),". If you want to get child data sources of a specific data source type, please call ",l.createElement(t.code,null,"mapDs.getDataSourcesByType()"),".\nPlease note that if you create a map data source (",l.createElement(t.code,null,"WebMapDataSource")," or ",l.createElement(t.code,null,"WebSceneDataSource"),") by the ",l.createElement(t.code,null,"DataSourceComponent")," or the ",l.createElement(t.code,null,"DataSourceManager"),", after the app is launched, the child data sources of it won't be created automatically. To create all child data sources, please call ",l.createElement(t.code,null,"await mapDs.childDataSourcesReady()"),"."),"\n",l.createElement(t.h4,{id:"use-featurelayer",className:"group relative s:flex s:flex-nowrap"},"Use FeatureLayer",l.createElement(t.a,{href:"#use-featurelayer","aria-label":"use featurelayer permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"In some workflows, you will be required to create a lightweight Experience that works with feature layers directly. In this scenario, you will use the ",l.createElement(t.code,null,"FeatureLayerDataSource")," classes. In general, a widget using a standalone feature layer will get a ",l.createElement(t.code,null,"FeatureLayerDataSource")," object without the ",l.createElement(t.code,null,"layer")," property, however using a feature layer from a webmap or webscene will return a ",l.createElement(t.code,null,"FeatureLayerDataSource")," object with the ",l.createElement(t.code,null,"layer")," property. The ",l.createElement(t.code,null,"layer")," object is from the ArcGIS Maps SDK for JavaScript.\nTo get the popup info, use ",l.createElement(t.code,null,"featureLayerDs.getPopupInfo()"),", to get the ID field, use ",l.createElement(t.code,null,"featureLayerDs.getIdField()"),", to get the geometry type, use ",l.createElement(t.code,null,"featureLayerDs.getGeometryType()"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"\n const getLayerObject = (ds: FeatureLayerDataSource) => {\n    return ds.layer; // this can be null\n }\n")),"\n",l.createElement(t.h4,{id:"sharing-data-between-widgets",className:"group relative s:flex s:flex-nowrap"},"Sharing data between widgets",l.createElement(t.a,{href:"#sharing-data-between-widgets","aria-label":"sharing data between widgets permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"Widgets will often share the same data. A good illustration of this is using a Map and List widget in an experience. When a feature is selected in the List widget, the corresponding feature is selected on the map. The easiest way to accomplish this is to use the same data source for both widgets. For example, when an item is selected in the List widget, the widget will call ",l.createElement(t.code,null,"datasource.selectRecordById()")," to update the data source info in the app store.\nThis allows the Map widget to render the currently selected item accordingly. In addition, the currently selected item ID will be placed in the URL, which enables you to share the current app state with others."),"\n",l.createElement(t.h3,{id:"sync-the-data-source-with-the-arcgis-maps-sdk-for-javascript-feature-object",className:"group relative s:flex s:flex-nowrap"},"Sync the data source with the ArcGIS Maps SDK for JavaScript feature object",l.createElement(t.a,{href:"#sync-the-data-source-with-the-arcgis-maps-sdk-for-javascript-feature-object","aria-label":"sync the data source with the arcgis maps sdk for javascript feature object permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"In an Experience Builder widget you can use the ArcGIS Maps SDK for JavaScript to get features. Then you may want to allow other widgets to use those features. For example, you may need to highlight these features on map, or show these features in List widget. You have 3 options to do this, listed below."),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"Select these feature records in a data source","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"If there is a data source instance you can use, you can just call ",l.createElement(t.code,null,"dataSource.selectRecordsByIds()")," to select these records. If what you get is a ",l.createElement(t.code,null,"Graphic")," instance, you need to create a ",l.createElement(t.code,null,"FeatureRecord")," instance first (",l.createElement(t.code,null,"featureLayerDataSource.buildRecord(graphic)"),")."),"\n"),"\n"),"\n",l.createElement(t.li,null,"Generate an output data source from your widget","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"See the ",l.createElement(t.a,{href:"/experience-builder/guide/core-concepts/data-source/#widget-output-data-source"},"Widget output data source")," sample."),"\n"),"\n"),"\n",l.createElement(t.li,null,"Publish a message","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"If your widget generates some features, you can publish the ",l.createElement(t.code,null,"DataRecordSetChangeMessage")," message so other widgets can subscribe."),"\n"),"\n"),"\n"),"\n",l.createElement(t.h3,{id:"work-with-mapviewsceneview-or-layerview",className:"group relative s:flex s:flex-nowrap"},"Work with MapView/SceneView or LayerView",l.createElement(t.a,{href:"#work-with-mapviewsceneview-or-layerview","aria-label":"work with mapviewsceneview or layerview permalink",className:"anchor-link"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<calcite-icon scale="s" icon="link"></calcite-icon>'}}))),"\n",l.createElement(t.p,null,"In many cases, when your widget works with a data source, it may need to work with ",l.createElement(t.a,{href:"/experience-builder/guide/core-concepts/map-scene-view/"},"MapView/SceneView")," as well. After the widget gets a ",l.createElement(t.code,null,"JimuMapView")," instance through ",l.createElement(t.code,null,"JimuMapViewComponent"),", you can get the corresponding data source of the MapView/SceneView by ",l.createElement(t.code,null,"jimuMapView.dataSourceId"),", and you can get the related layers through ",l.createElement(t.code,null,"jimuMapView.jimuLayerViews"),". Through the ",l.createElement(t.code,null,"JimuLayerView")," instance, you can get the corresponding data source of the layer view by ",l.createElement(t.code,null,"jimuMapView.dataSource")," as well. Generally, to get a feature from a layer to sync with a data source, you have these options:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Use the ID field of the feature to find the related data records in the data source"),"\n",l.createElement(t.li,null,"Create a data record through the feature by creating a ",l.createElement(t.code,null,"FeatureDataRecord")," instance"),"\n",l.createElement(t.li,null,"From a ",l.createElement(t.code,null,"FeatureDataRecord")," instance, you can get the feature by using ",l.createElement(t.code,null,"featureDataRecord.getFeature()")),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},o=a(69507),s=a(46427);const i=function(e){const{data:{topicNavigation:t}}=e;return l.createElement(o.A,null,l.createElement(s.S,Object.assign({},e,{topicNavigation:t,wrapInLayout:!1})))};function u(e){return l.createElement(i,e,l.createElement(c,e))}}}]);