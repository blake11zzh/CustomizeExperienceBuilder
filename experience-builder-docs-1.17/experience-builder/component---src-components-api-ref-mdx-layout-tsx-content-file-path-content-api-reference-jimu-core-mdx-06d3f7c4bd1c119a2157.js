"use strict";(self.webpackChunkafd_experience_builder_doc=self.webpackChunkafd_experience_builder_doc||[]).push([[7690],{92690:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var a=n(28453),l=n(96540);function r(e){const t=Object.assign({p:"p",code:"code",a:"a",ul:"ul",li:"li"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"The ",l.createElement(t.code,null,"jimu-core")," package contains classes, types, properties, functions, interfaces, enumerations and third party functions which will be used for widget development. The package focuses on handling widget properties, dispatching message actions, assigning data sources, and other tasks that are used for widget development."),"\n",l.createElement(t.p,null,"Most widgets will make use of the ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/DataSourceComponent/"},l.createElement(t.code,null,"DataSourceComponent"))," component (a union of the ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/DataSourceComponentProps/"},l.createElement(t.code,null,"DataSourceComponentProps"))," interface and the ",l.createElement(t.code,null,"DataSourceComponentStateProps")," interface). You will use the ",l.createElement(t.code,null,"DataSourceComponent")," to obtain the ",l.createElement(t.code,null,"useDataSource")," immutable object containing the data source used by the widget, which is set by the experience author on the settings page. You may also use the ",l.createElement(t.code,null,"query")," ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/QueryParams/"},l.createElement(t.code,null,"QueryParams"))," query parameters which is sourced from the settings page and/or from within the widget against the data source."),"\n",l.createElement(t.p,null,"A broad summary of the contents of the ",l.createElement(t.code,null,"jimu-core")," package are as follows:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Initializes the app running environment including:","\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"The ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/AppContext/"},l.createElement(t.code,null,"AppContext"))," interface which defines the properties not changed after the app is loaded."),"\n",l.createElement(t.li,null,"The redux store's state, which is contained within the ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/State/"},l.createElement(t.code,null,"State"))," interface holding important properties about the experience relative to the widget, app, client, data source, map, theme, user locale, app location and portal."),"\n",l.createElement(t.li,null,"i18n internationalization, handled by translations strings within a ",l.createElement(t.code,null,"default.ts")," file located in the ",l.createElement(t.code,null,"runtime/translations")," directory and the ",l.createElement(t.code,null,"default.ts")," file within the ",l.createElement(t.code,null,"setting/translations")," directory. A common implementation makes use of the ",l.createElement(t.code,null,"FormattedMessage")," ",l.createElement(t.code,null,"react-intl")," component. A ",l.createElement(t.code,null,"defaultMessage")," property is applied, sourced from the ",l.createElement(t.code,null,"default.ts")," file."),"\n"),"\n"),"\n",l.createElement(t.li,null,"Manage user login sessions using the ",l.createElement(t.code,null,"SessionManager")," class."),"\n",l.createElement(t.li,null,"The ",l.createElement(t.a,{href:"https://developers.arcgis.com/experience-builder/api-reference/jimu-core/AppConfig/"},l.createElement(t.code,null,"AppConfig"))," interface is the experience's configuration structure. It is stored in the redux store."),"\n",l.createElement(t.li,null,"Core interfaces such as ",l.createElement(t.code,null,"State"),", ",l.createElement(t.code,null,"AllWidgetProps"),", ",l.createElement(t.code,null,"DataSource")," and ",l.createElement(t.code,null,"Message")," are included. Based on these interfaces, the ",l.createElement(t.code,null,"jimu-core")," package provides predefined implementations, including a ",l.createElement(t.code,null,"Filter Data Records")," message action, an ",l.createElement(t.code,null,"Export to JSON")," data action, a ",l.createElement(t.code,null,"Record Selection Changes")," message, and so forth."),"\n",l.createElement(t.li,null,"As explained above, the ",l.createElement(t.code,null,"DataSourceComponent")," and the ",l.createElement(t.code,null,"DataSourceComponentProps")," provide access to the data source, while the ",l.createElement(t.code,null,"ExpressionResolverComponent")," and the ",l.createElement(t.code,null,"ExpressionResolverComponentProps")," provide access to resolve the ",l.createElement(t.code,null,"Expression")," via the ",l.createElement(t.code,null,"onChange")," function."),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://github.com/JedWatson/classnames"},l.createElement(t.code,null,"classNames")),", ",l.createElement(t.a,{href:"https://www.npmjs.com/package/resize-observer-polyfill"},l.createElement(t.code,null,"ResizeObserver")),", and other third-party libraries are re-exported by the ",l.createElement(t.code,null,"jimu-core")," package."),"\n"),"\n",l.createElement(t.p,null,"In summary, you will most likely use some part of the ",l.createElement(t.code,null,"jimu-core")," package for widget development."))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},o=n(69507),i=n(46427);const s=function(e){const{data:{topicNavigation:t,searchIndex:n,apiRefMdxNav:a}}=e,r=Object.assign({},t.nav,{children:t.nav.children.concat(a.nav.children)});return l.createElement(o.A,null,l.createElement(i.S,Object.assign({},e,{topicNavigation:r,search:n,wrapInLayout:!1})))};function u(e){return l.createElement(s,e,l.createElement(c,e))}}}]);