import { c as d } from "../../chunks/runtime.js";
import { usePropertyChange as g } from "@arcgis/components-controllers";
import { when as c } from "@arcgis/core/core/reactiveUtils.js";
import { LitElement as p, createEvent as h, noShadowRoot as v, safeClassMap as m, nothing as r } from "@arcgis/lumina";
import { html as u } from "lit";
import { a as y, u as b } from "../../chunks/useView.js";
import { g as f } from "../../chunks/globalCss.js";
import { css as M } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const $ = "arcgis-navigation-toggle", w = {
  base: $
}, _ = M`@layer{.arcgis-navigation-toggle{display:flex;inline-size:fit-content;block-size:fit-content}}`, e = {
  pan: "move",
  rotate: "rotate"
};
class C extends p {
  constructor() {
    super(...arguments), this.view = y(this), this._messages = b(), this.autoDestroyDisabled = !1, this.icon = e.pan, this.layout = "vertical", this.navigationMode = "pan", this.position = "top-left", this.state = "disabled", this.arcgisPropertyChange = g()("layout", "state"), this.arcgisReady = h();
  }
  static {
    this.properties = { autoDestroyDisabled: 5, icon: 3, label: 1, layout: 3, navigationMode: 3, position: 1, referenceElement: 1, state: 3 };
  }
  static {
    this.shadowRootOptions = v;
  }
  static {
    this.styles = _;
  }
  //#endregion
  //#region Public Methods
  /** Permanently destroy the component */
  async destroy() {
    await this.manager.destroy();
  }
  async toggle() {
    this.state !== "disabled" && (this.navigationMode = this.navigationMode !== "pan" ? "pan" : "rotate");
  }
  //#endregion
  //#region Lifecycle
  load() {
    this.manager.onLifecycle(() => [
      c(() => this.view?.navigation?.actionMap, () => this._updateNavigationActionMap()),
      c(() => {
        const { view: t } = this;
        return t?.ready && t?.type === "3d" ? "ready" : "disabled";
      }, (t) => {
        this.state = t;
      }, { sync: !0, initial: !0 })
    ]);
  }
  willUpdate(t) {
    t.has("navigationMode") && this._updateNavigationActionMap();
  }
  //#endregion
  //#region Private Methods
  _onPanClick() {
    this.navigationMode = "pan";
  }
  _onRotateClick() {
    this.navigationMode = "rotate";
  }
  _updateNavigationActionMap() {
    const t = this.view?.navigation?.actionMap;
    if (!t)
      return;
    const a = this.navigationMode === "pan";
    t.dragPrimary = a ? "pan" : "rotate", t.dragSecondary = a ? "rotate" : "pan";
  }
  //#endregion
  //#region Rendering
  render() {
    const { _messages: t, navigationMode: a, state: l } = this, s = t.pan ?? "", o = t.rotate ?? "", i = l === "disabled", n = a === "pan";
    return u`<calcite-action-bar class=${m({ [w.base]: !0, [f.disabled]: i })} expand-disabled .layout=${this.layout} scale=s><calcite-action .active=${n} appearance=solid data-testid=navigation-toggle-pan .disabled=${i} .icon=${e.pan} @click=${this._onPanClick} scale=s .text=${s} title=${s ?? r}></calcite-action><calcite-action .active=${!n} appearance=solid data-testid=navigation-toggle-rotate .disabled=${i} .icon=${e.rotate} @click=${this._onRotateClick} scale=s .text=${o} title=${o ?? r}></calcite-action></calcite-action-bar>`;
  }
}
d("arcgis-navigation-toggle", C);
export {
  C as ArcgisNavigationToggle
};
