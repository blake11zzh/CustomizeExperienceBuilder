import type { WebChartQuery, WebChartDataItem } from "@arcgis/charts-spec";
import type Graphic from "@arcgis/core/Graphic";
import type { AbortControllerKeyType, Features } from "./interfaces";
import { ChartSubType } from "../../misc/interfaces";
import type { QueryObject } from "../interfaces";
import type { ErrorStrings } from "../../t9n/interfaces";
/**
 * Performs a query analytic.
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery
 * @param props.outAnalytics The out analytics
 * @param props.outputFormat The output format
 * @param props.dataFormat The data format
 */
export declare function queryAnalytic(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    outAnalytics: string;
    outputFormat: string;
    dataFormat: string;
}): Promise<WebChartDataItem | undefined>;
/**
 * Generates the aliases to use in the queryAttributeBins query to name the stacks and boundaries for the x field
 * @param x The x field used for the stack alias
 * @param y The y field used by the stacks
 */
export declare function getQueryAttributeBinsForScatterPlotFieldsAlias(x: string, y: string): {
    lowerBoundaryAlias: string;
    upperBoundaryAlias: string;
    stackAlias: string;
};
/**
 * Uses query(Attribute)Bins to fetch the aggregated scatterplot data
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The query configuration
 * @param props.xStep The x step
 * @param props.yStep The y step
 * @param props.xMin The x min
 * @param props.xMax The x max
 * @param props.x The x field
 * @param props.y The y field
 * @param props.errorStrings The t9n error strings
 */
export declare function queryAttributeBinsForScatterPlot(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    xStep: number;
    yStep: number;
    xMin: number;
    xMax: number;
    x: string;
    y: string;
    errorStrings: ErrorStrings;
}): Promise<Graphic[]>;
/**
 * Performs a query feature count based on the provided parameters.
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.chartSubType The chart sub type
 * @param props.x The x field
 * @param props.isGaugeByFeature Indicate whether it's a gauge by feature. Will be defaulted to `false` if not provided.
 */
export declare function queryFeatureCount(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    chartSubType: ChartSubType;
    x: string;
    isGaugeByFeature?: boolean;
}): Promise<number | undefined>;
/**
 * Fetches multiple statistics (min, max, count...).
 * Returns an object mapping the outStatisticFieldName with its value
 * @param props
 */
export declare function queryStatistics<T extends Date | number | string>(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    abortKey?: AbortControllerKeyType;
}): Promise<Map<string, T>>;
/**
 * Fetches all the features from the input QueryObject, according to the other specified input settings (query, outFields...).
 * Handles the paging.
 * @param props
 */
export declare function queryAllFeatures(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    returnUniqueIdsOnly?: boolean;
    featureCount?: number;
    noBatch?: boolean;
    abortKey?: AbortControllerKeyType;
}): Promise<Features>;
/**
 * Fetches the extent of all the features that are represented by their object ids
 * @param props
 */
export declare function queryUniqueIDs(props: {
    queryObject?: QueryObject;
    queryConfig: WebChartQuery;
    uniqueFeature?: boolean;
    abortKey?: AbortControllerKeyType;
}): Promise<number[]>;
/**
 * Aborts all existing queries and initializes a controller for new ones. The queries are associated
 * to a unique key to avoid cancelling queries for other charts.
 * @param key The key pointing to the abort controller to execute
 */
export declare function abortPendingQueries(key?: AbortControllerKeyType): void;
