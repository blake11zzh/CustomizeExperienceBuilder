'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

const LabelType = {
    XAxisTitle: "XAxisTitle",
    YAxisTitle: "YAxisTitle",
    ChartTitle: "ChartTitle",
    ChartSubTitle: "ChartSubTitle",
    ChartFooter: "ChartFooter",
    GuideLabel: "GuideLabel",
};

const t="esriFieldTypeDate",i="esriFieldTypeDouble",r="esriFieldTypeInteger",o="esriFieldTypeSingle",a="esriFieldTypeSmallInteger",l$1={Count:"count",Sum:"sum",Minimum:"min",Maximum:"max",Average:"avg",StandardDeviation:"stddev",Variance:"var",ContinuousPercentile:"percentile_cont",DiscretePercentile:"percentile_disc",EnvelopeAggregate:"envelope-aggregate",CentroidAggregate:"centroid-aggregate",ConvexHullAggregate:"convex-hull-aggregate",NoAggregation:"no_aggregation"},k="esriSFSSolid",x="esriSFS",R="unique-value",_="class-breaks",j="feet",B="miles",P="nautical-miles",N="us-nautical-miles",M="meters",D="kilometers",q="date",Y="pieSeries",X="gaugeSeries",Q="lineSeries",J="barSeries",ee="boxPlotSeries",te="radarSeries",ie="comboLineAndBarSeries",le="sideBySide",de="ASC",ye={statisticType:l$1.Count,sortingOrder:de},ue="esriTimeUnitsSeconds",me="esriTimeUnitsMinutes",ge="esriTimeUnitsHours",he="esriTimeUnitsDays",fe="esriTimeUnitsWeeks",be="esriTimeUnitsMonths",ve="esriTimeUnitsYears",Oe="featureGauge";const We={Reject:"reject",RenderUpToTheLimit:"renderUpToTheLimit"},Ue={Arabic:"ar",ArabicLatin:"ar-u-nu-latn",Bosnian:"bs",Bulgarian:"bg",Catalan:"ca",Czech:"cs",Danish:"da",German:"de",Greek:"el",English:"en",EnglishUSA:"en-US",Spanish:"es",Estonian:"et",Finnish:"fi",French:"fr",Hebrew:"he",Croatian:"hr",Hungarian:"hu",Indonesian:"id",Italian:"it",Japanese:"ja",Korean:"ko",Lithuanian:"lt",Latvian:"lv",NorwegianBokml:"no",Dutch:"nl",Polish:"pl",PortugueseBrazil:"pt-BR",PortuguesePortugal:"pt-PT",Romanian:"ro",Russian:"ru",Serbian:"sr",Slovenian:"sl",Slovak:"sk",Swedish:"sv",Thai:"th",Turkish:"tr",Ukrainian:"uk",Vietnamese:"vi",ChineseChina:"zh-CN",ChineseHongKong:"zh-HK",ChineseTaiwan:"zh-TW"},Ge=[...Object.values(Ue),"en-AU","en-GB","es-ES","es-MX","de-CH","de-DE","de-AT","it-CH","it-IT"];var qe="object"==typeof global&&global&&global.Object===Object&&global,He="object"==typeof self&&self&&self.Object===Object&&self,Ye=qe||He||Function("return this")(),Ke=Ye.Symbol,Xe=Object.prototype,Qe=Xe.hasOwnProperty,Je=Xe.toString,Ze=Ke?Ke.toStringTag:void 0;var et=Object.prototype.toString;var tt=Ke?Ke.toStringTag:void 0;function it(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":tt&&tt in Object(e)?function(e){var t=Qe.call(e,Ze),i=e[Ze];try{e[Ze]=void 0;var r=!0;}catch(e){}var n=Je.call(e);return r&&(t?e[Ze]=i:delete e[Ze]),n}(e):function(e){return et.call(e)}(e)}function rt(e){return null!=e&&"object"==typeof e}function nt(e,t){for(var i=-1,r=null==e?0:e.length,n=Array(r);++i<r;)n[i]=t(e[i],i,e);return n}var ot=Array.isArray,at=Ke?Ke.prototype:void 0,lt=at?at.toString:void 0;function st(e){if("string"==typeof e)return e;if(ot(e))return nt(e,st)+"";if(function(e){return "symbol"==typeof e||rt(e)&&"[object Symbol]"==it(e)}(e))return lt?lt.call(e):"";var t=e+"";return "0"==t&&1/e==-1/0?"-0":t}function pt(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function dt(e){return e}function ct(e){if(!pt(e))return !1;var t=it(e);return "[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}var yt,ut=Ye["__core-js_shared__"],mt=(yt=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+yt:"";var gt=Function.prototype.toString;function ht(e){if(null!=e){try{return gt.call(e)}catch(e){}try{return e+""}catch(e){}}return ""}var ft=/^\[object .+?Constructor\]$/,bt=Function.prototype,vt=Object.prototype,St=bt.toString,kt=vt.hasOwnProperty,wt=RegExp("^"+St.call(kt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function It(e){return !(!pt(e)||(t=e,mt&&mt in t))&&(ct(e)?wt:ft).test(ht(e));var t;}function Tt(e,t){var i=function(e,t){return null==e?void 0:e[t]}(e,t);return It(i)?i:void 0}var Ct=Tt(Ye,"WeakMap");function Rt(e,t,i){switch(i.length){case 0:return e.call(t);case 1:return e.call(t,i[0]);case 2:return e.call(t,i[0],i[1]);case 3:return e.call(t,i[0],i[1],i[2])}return e.apply(t,i)}var _t=Date.now;var jt,Bt,Pt,Nt=function(){try{var e=Tt(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),Mt=Nt,Dt=Mt?function(e,t){return Mt(e,"toString",{configurable:!0,enumerable:!1,value:(i=t,function(){return i}),writable:!0});var i;}:dt,At=(jt=Dt,Bt=0,Pt=0,function(){var e=_t(),t=16-(e-Pt);if(Pt=e,t>0){if(++Bt>=800)return arguments[0]}else Bt=0;return jt.apply(void 0,arguments)});var Lt=/^(?:0|[1-9]\d*)$/;function Ft(e,t){var i=typeof e;return !!(t=t??9007199254740991)&&("number"==i||"symbol"!=i&&Lt.test(e))&&e>-1&&e%1==0&&e<t}function zt(e,t,i){"__proto__"==t&&Mt?Mt(e,t,{configurable:!0,enumerable:!0,value:i,writable:!0}):e[t]=i;}function $t(e,t){return e===t||e!=e&&t!=t}var Wt=Object.prototype.hasOwnProperty;function Vt(e,t,i){var r=e[t];Wt.call(e,t)&&$t(r,i)&&(void 0!==i||t in e)||zt(e,t,i);}function Ut(e,t,i,r){var n=!i;i||(i={});for(var o=-1,a=t.length;++o<a;){var l=t[o],s=r?r(i[l],e[l],l,i,e):void 0;void 0===s&&(s=e[l]),n?zt(i,l,s):Vt(i,l,s);}return i}var Gt=Math.max;function qt(e,t){return At(function(e,t,i){return t=Gt(void 0===t?e.length-1:t,0),function(){for(var r=arguments,n=-1,o=Gt(r.length-t,0),a=Array(o);++n<o;)a[n]=r[t+n];n=-1;for(var l=Array(t+1);++n<t;)l[n]=r[n];return l[t]=i(a),Rt(e,this,l)}}(e,t,dt),e+"")}function Ht(e){return "number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function Yt(e){return null!=e&&Ht(e.length)&&!ct(e)}function Kt(e,t,i){if(!pt(i))return !1;var r=typeof t;return !!("number"==r?Yt(i)&&Ft(t,i.length):"string"==r&&t in i)&&$t(i[t],e)}var Xt=Object.prototype;function Qt(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Xt)}function Jt(e){return rt(e)&&"[object Arguments]"==it(e)}var Zt=Object.prototype,ei=Zt.hasOwnProperty,ti=Zt.propertyIsEnumerable,ii=Jt(function(){return arguments}())?Jt:function(e){return rt(e)&&ei.call(e,"callee")&&!ti.call(e,"callee")};var ri="object"==typeof exports&&exports&&!exports.nodeType&&exports,ni=ri&&"object"==typeof module&&module&&!module.nodeType&&module,oi=ni&&ni.exports===ri?Ye.Buffer:void 0,ai=(oi?oi.isBuffer:void 0)||function(){return !1},li={};function si(e){return function(t){return e(t)}}li["[object Float32Array]"]=li["[object Float64Array]"]=li["[object Int8Array]"]=li["[object Int16Array]"]=li["[object Int32Array]"]=li["[object Uint8Array]"]=li["[object Uint8ClampedArray]"]=li["[object Uint16Array]"]=li["[object Uint32Array]"]=!0,li["[object Arguments]"]=li["[object Array]"]=li["[object ArrayBuffer]"]=li["[object Boolean]"]=li["[object DataView]"]=li["[object Date]"]=li["[object Error]"]=li["[object Function]"]=li["[object Map]"]=li["[object Number]"]=li["[object Object]"]=li["[object RegExp]"]=li["[object Set]"]=li["[object String]"]=li["[object WeakMap]"]=!1;var pi="object"==typeof exports&&exports&&!exports.nodeType&&exports,di=pi&&"object"==typeof module&&module&&!module.nodeType&&module,ci=di&&di.exports===pi&&qe.process,yi=function(){try{var e=di&&di.require&&di.require("util").types;return e||ci&&ci.binding&&ci.binding("util")}catch(e){}}(),ui=yi&&yi.isTypedArray,mi=ui?si(ui):function(e){return rt(e)&&Ht(e.length)&&!!li[it(e)]},gi=Object.prototype.hasOwnProperty;function hi(e,t){var i=ot(e),r=!i&&ii(e),n=!i&&!r&&ai(e),o=!i&&!r&&!n&&mi(e),a=i||r||n||o,l=a?function(e,t){for(var i=-1,r=Array(e);++i<e;)r[i]=t(i);return r}(e.length,String):[],s=l.length;for(var p in e)!t&&!gi.call(e,p)||a&&("length"==p||n&&("offset"==p||"parent"==p)||o&&("buffer"==p||"byteLength"==p||"byteOffset"==p)||Ft(p,s))||l.push(p);return l}function fi(e,t){return function(i){return e(t(i))}}var bi=fi(Object.keys,Object),vi=Object.prototype.hasOwnProperty;function Si(e){if(!Qt(e))return bi(e);var t=[];for(var i in Object(e))vi.call(e,i)&&"constructor"!=i&&t.push(i);return t}function ki(e){return Yt(e)?hi(e):Si(e)}var wi=Object.prototype.hasOwnProperty;function Ii(e){if(!pt(e))return function(e){var t=[];if(null!=e)for(var i in Object(e))t.push(i);return t}(e);var t=Qt(e),i=[];for(var r in e)("constructor"!=r||!t&&wi.call(e,r))&&i.push(r);return i}function Ti(e){return Yt(e)?hi(e,!0):Ii(e)}var Ci,Ei=(Ci=function(e,t,i,r){Ut(t,Ti(t),e,r);},qt((function(e,t){var i=-1,r=t.length,n=r>1?t[r-1]:void 0,o=r>2?t[2]:void 0;for(n=Ci.length>3&&"function"==typeof n?(r--,n):void 0,o&&Kt(t[0],t[1],o)&&(n=r<3?void 0:n,r=1),e=Object(e);++i<r;){var a=t[i];a&&Ci(e,a,i,n);}return e}))),xi=Ei;Tt(Object,"create");var Mi=Tt(Ye,"Map");function Li(e){return null==e?"":st(e)}var zi=fi(Object.getPrototypeOf,Object),$i=Function.prototype,Wi=Object.prototype,Vi=$i.toString,Ui=Wi.hasOwnProperty,Gi=Vi.call(Object);function qi(e){if(!rt(e))return !1;var t=it(e);return "[object Error]"==t||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!function(e){if(!rt(e)||"[object Object]"!=it(e))return !1;var t=zi(e);if(null===t)return !0;var i=Ui.call(t,"constructor")&&t.constructor;return "function"==typeof i&&i instanceof i&&Vi.call(i)==Gi}(e)}var Hi=qt((function(e,t){try{return Rt(e,void 0,t)}catch(e){return qi(e)?e:new Error(e)}})),Yi=Hi;var Xi="object"==typeof exports&&exports&&!exports.nodeType&&exports,Qi=Xi&&"object"==typeof module&&module&&!module.nodeType&&module,Ji=Qi&&Qi.exports===Xi?Ye.Buffer:void 0;Ji?Ji.allocUnsafe:void 0;var dr=Tt(Ye,"DataView"),cr=Tt(Ye,"Promise"),yr=Tt(Ye,"Set"),ur="[object Map]",mr="[object Promise]",gr="[object Set]",hr="[object WeakMap]",fr="[object DataView]",br=ht(dr),vr=ht(Mi),Sr=ht(cr),kr=ht(yr),wr=ht(Ct),Ir=it;(dr&&Ir(new dr(new ArrayBuffer(1)))!=fr||Mi&&Ir(new Mi)!=ur||cr&&Ir(cr.resolve())!=mr||yr&&Ir(new yr)!=gr||Ct&&Ir(new Ct)!=hr)&&(Ir=function(e){var t=it(e),i="[object Object]"==t?e.constructor:void 0,r=i?ht(i):"";if(r)switch(r){case br:return fr;case vr:return ur;case Sr:return mr;case kr:return gr;case wr:return hr}return t});Ye.Uint8Array;var Rr=Ke?Ke.prototype:void 0;Rr?Rr.valueOf:void 0;yi&&yi.isMap;yi&&yi.isSet;var Yr=Ke?Ke.prototype:void 0;Yr?Yr.valueOf:void 0;var nn,on=(nn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(e){return null==nn?void 0:nn[e]}),an=/[&<>"']/g,ln=RegExp(an.source);var yn=Object.prototype,un=yn.hasOwnProperty;function mn(e,t,i,r){return void 0===e||$t(e,yn[i])&&!un.call(r,i)?t:e}var gn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function hn(e){return "\\"+gn[e]}var fn=/<%=([\s\S]+?)%>/g,bn={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:fn,variable:"",imports:{_:{escape:function(e){return (e=Li(e))&&ln.test(e)?e.replace(an,on):e}}}},vn=/\b__p \+= '';/g,Sn=/\b(__p \+=) '' \+/g,kn=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wn=/[()=,{}\[\]\/\s]/,In=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Tn=/($^)/,Cn=/['\n\r\u2028\u2029\\]/g,En=Object.prototype.hasOwnProperty;function xn(e,t,i){var r=bn.imports._.templateSettings||bn;i&&Kt(e,t,i)&&(t=void 0),e=Li(e),t=xi({},t,r,mn);var n,o,a=xi({},t.imports,r.imports,mn),l=ki(a),s=function(e,t){return nt(t,(function(t){return e[t]}))}(a,l),p=0,d=t.interpolate||Tn,c="__p += '",y=RegExp((t.escape||Tn).source+"|"+d.source+"|"+(d===fn?In:Tn).source+"|"+(t.evaluate||Tn).source+"|$","g"),u=En.call(t,"sourceURL")?"//# sourceURL="+(t.sourceURL+"").replace(/\s/g," ")+"\n":"";e.replace(y,(function(t,i,r,a,l,s){return r||(r=a),c+=e.slice(p,s).replace(Cn,hn),i&&(n=!0,c+="' +\n__e("+i+") +\n'"),l&&(o=!0,c+="';\n"+l+";\n__p += '"),r&&(c+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),p=s+t.length,t})),c+="';\n";var m=En.call(t,"variable")&&t.variable;if(m){if(wn.test(m))throw new Error("Invalid `variable` option passed into `_.template`")}else c="with (obj) {\n"+c+"\n}\n";c=(o?c.replace(vn,""):c).replace(Sn,"$1").replace(kn,"$1;"),c="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+c+"return __p\n}";var g=Yi((function(){return Function(l,u+"return "+c).apply(void 0,s)}));if(g.source=c,qi(g))throw g;return g}function On(e,t){return xn(e)(t)}function Rn(e,t){let i=Ue.English;const r=function(e){let t=e;if(void 0!==e&&e.includes("-")){const[i,r]=e.split("-");t=`${i}-${r.toUpperCase()}`;}return t}(e);if(void 0!==r)if(t.includes(r))i=r;else {const e=function(e){const t=e?.match(/^([a-z]{2})-([A-Z]{2})$/u);let i=Ue.English;return null!=t&&t?.length>1?i=t[1]:2===e?.length&&e.toLowerCase()===e&&(i=e),i}(r);t.includes(e)?i=e:"nb"===e&&(i="no");}return i}function _n(e,t){return function t(i){let r;if(void 0===i||i===document||i===window)r=null;else {r=i.closest(e)||t(i.getRootNode().host);}return r}(t)}function jn(e=document.documentElement){const t=_n("[lang]",e),i=t?.lang??window.navigator.language,r=Object.values(Ue),n=Object.values(Ge),o=Rn(i,r);let a=Rn(i,n);return a="ar"===a?"ar-u-nu-latn":a,{locale:o,rtl:"rtl"===_n("[dir]",e)?.getAttribute("dir"),formatLocale:a}}const Wn=32,Vn="arcgis_charts_features_extent",Un={maxRecordCountFactor:5,maxParallelRequests:4,maxRecords:2e3,orderByJSAPIDelimiter:" ",outStatistics:{statisticType:ye.statisticType,onStatisticField:"OBJECTID",outStatisticFieldName:"arcgis_charts_outStatisticFieldName_default_key"},uniqueIdsName:"arcgisChartsUniqueIds"},Gn=["EXPR_1","Expr1","expr1","EXPR1"],Hn=.7,Zn={defaultGroupOfSlicesId:"arcgis_charts_group_of_slices",sliceIdPrefix:"arcgis-charts-slice-id",undefinedSliceId:"arcgis-charts-slice-id-undefined",nullSliceId:"arcgis-charts-slice-id-null",emptySliceId:"arcgis-charts-slice-id-empty"},eo="arcgis_charts_box_plot_category",to=[[31,120,180,255],[166,206,227,255],[51,160,44,255],[178,223,138,255],[227,26,28,255],[251,154,153,255],[255,127,0,255],[253,191,111,255],[106,61,154,255],[202,178,214,255]],io=[[104,104,104,255],[51,124,235,255],[132,0,168,255],[156,156,156,255]];function ro(e){const{colorIndex:t,opacity:i,histogramOverlays:r}=e,n=Math.max(0,t??0),o=[...!0===r?io:to],[a,l,s,p]=o[n%o.length];return [a,l,s,void 0!==i?255*i:p]}function Lo(){return {type:x,style:k}}const Jo={behaviorAfterLimit:We.Reject,maxCategoryCount:Number.NaN,maxBarChartSeriesCount:100,maxBarUniqueSeriesCountTotal:1e4,maxBarTwoSeriesCountPerSeries:1e3,maxBarTwoSeriesCountTotal:2e3,maxBarThreePlusSeriesCountPerSeries:100,maxBarThreePlusSeriesCountTotal:2e3,maxScatterPointsBeforeAggregation:1e4,maxScatterPointsAfterAggregation:1e4,maxLineChartSeriesCount:100,maxLineUniqueSeriesCountTotal:1e4,maxLineTwoSeriesCountPerSeries:5e3,maxLineTwoSeriesCountTotal:1e4,maxLineThreePlusSeriesCountPerSeries:1e3,maxLineThreePlusSeriesCountTotal:1e4,maxPieChartSliceCountTotal:300,maxGaugeByFeaturesLimit:50,maxBoxPlotSeriesCount:100,maxBoxUniqueSeriesCountTotal:1e4,maxBoxTwoSeriesCountPerSeries:1e3,maxBoxTwoSeriesCountTotal:2e3,maxBoxThreePlusSeriesCountPerSeries:100,maxBoxThreePlusSeriesCountTotal:2e3,maxBoxPlotOutlierLimit:1e4};function Zo(e){const t={...Jo};return void 0!==e&&Object.keys(Jo).forEach((i=>{t[i]=e[i]??Jo[i];})),t}function ea(){return {maxScatterCellsPerQuery:500,maxScatterCellsPerQueryForStandard:175,maxElementsPerSelectionQuery:25,maxOIDsPerSelectionQuery:2e3,maxOperandsPerWhereClause:200}}function ra(){return le}const oa=0,aa="_arcgis_charts_outliers",la="_arcgis_charts_z_score";var da={exports:{}},ca={},ya={exports:{}},ua={};function ma(){var e={"align-content":!1,"align-items":!1,"align-self":!1,"alignment-adjust":!1,"alignment-baseline":!1,all:!1,"anchor-point":!1,animation:!1,"animation-delay":!1,"animation-direction":!1,"animation-duration":!1,"animation-fill-mode":!1,"animation-iteration-count":!1,"animation-name":!1,"animation-play-state":!1,"animation-timing-function":!1,azimuth:!1,"backface-visibility":!1,background:!0,"background-attachment":!0,"background-clip":!0,"background-color":!0,"background-image":!0,"background-origin":!0,"background-position":!0,"background-repeat":!0,"background-size":!0,"baseline-shift":!1,binding:!1,bleed:!1,"bookmark-label":!1,"bookmark-level":!1,"bookmark-state":!1,border:!0,"border-bottom":!0,"border-bottom-color":!0,"border-bottom-left-radius":!0,"border-bottom-right-radius":!0,"border-bottom-style":!0,"border-bottom-width":!0,"border-collapse":!0,"border-color":!0,"border-image":!0,"border-image-outset":!0,"border-image-repeat":!0,"border-image-slice":!0,"border-image-source":!0,"border-image-width":!0,"border-left":!0,"border-left-color":!0,"border-left-style":!0,"border-left-width":!0,"border-radius":!0,"border-right":!0,"border-right-color":!0,"border-right-style":!0,"border-right-width":!0,"border-spacing":!0,"border-style":!0,"border-top":!0,"border-top-color":!0,"border-top-left-radius":!0,"border-top-right-radius":!0,"border-top-style":!0,"border-top-width":!0,"border-width":!0,bottom:!1,"box-decoration-break":!0,"box-shadow":!0,"box-sizing":!0,"box-snap":!0,"box-suppress":!0,"break-after":!0,"break-before":!0,"break-inside":!0,"caption-side":!1,chains:!1,clear:!0,clip:!1,"clip-path":!1,"clip-rule":!1,color:!0,"color-interpolation-filters":!0,"column-count":!1,"column-fill":!1,"column-gap":!1,"column-rule":!1,"column-rule-color":!1,"column-rule-style":!1,"column-rule-width":!1,"column-span":!1,"column-width":!1,columns:!1,contain:!1,content:!1,"counter-increment":!1,"counter-reset":!1,"counter-set":!1,crop:!1,cue:!1,"cue-after":!1,"cue-before":!1,cursor:!1,direction:!1,display:!0,"display-inside":!0,"display-list":!0,"display-outside":!0,"dominant-baseline":!1,elevation:!1,"empty-cells":!1,filter:!1,flex:!1,"flex-basis":!1,"flex-direction":!1,"flex-flow":!1,"flex-grow":!1,"flex-shrink":!1,"flex-wrap":!1,float:!1,"float-offset":!1,"flood-color":!1,"flood-opacity":!1,"flow-from":!1,"flow-into":!1,font:!0,"font-family":!0,"font-feature-settings":!0,"font-kerning":!0,"font-language-override":!0,"font-size":!0,"font-size-adjust":!0,"font-stretch":!0,"font-style":!0,"font-synthesis":!0,"font-variant":!0,"font-variant-alternates":!0,"font-variant-caps":!0,"font-variant-east-asian":!0,"font-variant-ligatures":!0,"font-variant-numeric":!0,"font-variant-position":!0,"font-weight":!0,grid:!1,"grid-area":!1,"grid-auto-columns":!1,"grid-auto-flow":!1,"grid-auto-rows":!1,"grid-column":!1,"grid-column-end":!1,"grid-column-start":!1,"grid-row":!1,"grid-row-end":!1,"grid-row-start":!1,"grid-template":!1,"grid-template-areas":!1,"grid-template-columns":!1,"grid-template-rows":!1,"hanging-punctuation":!1,height:!0,hyphens:!1,icon:!1,"image-orientation":!1,"image-resolution":!1,"ime-mode":!1,"initial-letters":!1,"inline-box-align":!1,"justify-content":!1,"justify-items":!1,"justify-self":!1,left:!1,"letter-spacing":!0,"lighting-color":!0,"line-box-contain":!1,"line-break":!1,"line-grid":!1,"line-height":!1,"line-snap":!1,"line-stacking":!1,"line-stacking-ruby":!1,"line-stacking-shift":!1,"line-stacking-strategy":!1,"list-style":!0,"list-style-image":!0,"list-style-position":!0,"list-style-type":!0,margin:!0,"margin-bottom":!0,"margin-left":!0,"margin-right":!0,"margin-top":!0,"marker-offset":!1,"marker-side":!1,marks:!1,mask:!1,"mask-box":!1,"mask-box-outset":!1,"mask-box-repeat":!1,"mask-box-slice":!1,"mask-box-source":!1,"mask-box-width":!1,"mask-clip":!1,"mask-image":!1,"mask-origin":!1,"mask-position":!1,"mask-repeat":!1,"mask-size":!1,"mask-source-type":!1,"mask-type":!1,"max-height":!0,"max-lines":!1,"max-width":!0,"min-height":!0,"min-width":!0,"move-to":!1,"nav-down":!1,"nav-index":!1,"nav-left":!1,"nav-right":!1,"nav-up":!1,"object-fit":!1,"object-position":!1,opacity:!1,order:!1,orphans:!1,outline:!1,"outline-color":!1,"outline-offset":!1,"outline-style":!1,"outline-width":!1,overflow:!1,"overflow-wrap":!1,"overflow-x":!1,"overflow-y":!1,padding:!0,"padding-bottom":!0,"padding-left":!0,"padding-right":!0,"padding-top":!0,page:!1,"page-break-after":!1,"page-break-before":!1,"page-break-inside":!1,"page-policy":!1,pause:!1,"pause-after":!1,"pause-before":!1,perspective:!1,"perspective-origin":!1,pitch:!1,"pitch-range":!1,"play-during":!1,position:!1,"presentation-level":!1,quotes:!1,"region-fragment":!1,resize:!1,rest:!1,"rest-after":!1,"rest-before":!1,richness:!1,right:!1,rotation:!1,"rotation-point":!1,"ruby-align":!1,"ruby-merge":!1,"ruby-position":!1,"shape-image-threshold":!1,"shape-outside":!1,"shape-margin":!1,size:!1,speak:!1,"speak-as":!1,"speak-header":!1,"speak-numeral":!1,"speak-punctuation":!1,"speech-rate":!1,stress:!1,"string-set":!1,"tab-size":!1,"table-layout":!1,"text-align":!0,"text-align-last":!0,"text-combine-upright":!0,"text-decoration":!0,"text-decoration-color":!0,"text-decoration-line":!0,"text-decoration-skip":!0,"text-decoration-style":!0,"text-emphasis":!0,"text-emphasis-color":!0,"text-emphasis-position":!0,"text-emphasis-style":!0,"text-height":!0,"text-indent":!0,"text-justify":!0,"text-orientation":!0,"text-overflow":!0,"text-shadow":!0,"text-space-collapse":!0,"text-transform":!0,"text-underline-position":!0,"text-wrap":!0,top:!1,transform:!1,"transform-origin":!1,"transform-style":!1,transition:!1,"transition-delay":!1,"transition-duration":!1,"transition-property":!1,"transition-timing-function":!1,"unicode-bidi":!1,"vertical-align":!1,visibility:!1,"voice-balance":!1,"voice-duration":!1,"voice-family":!1,"voice-pitch":!1,"voice-range":!1,"voice-rate":!1,"voice-stress":!1,"voice-volume":!1,volume:!1,"white-space":!1,widows:!1,width:!0,"will-change":!1,"word-break":!0,"word-spacing":!0,"word-wrap":!0,"wrap-flow":!1,"wrap-through":!1,"writing-mode":!1,"z-index":!1};return e}var ga=/javascript\s*\:/gim;ua.whiteList=ma(),ua.getDefaultWhiteList=ma,ua.onAttr=function(e,t,i){},ua.onIgnoreAttr=function(e,t,i){},ua.safeAttrValue=function(e,t){return ga.test(t)?"":t};var ha={indexOf:function(e,t){var i,r;if(Array.prototype.indexOf)return e.indexOf(t);for(i=0,r=e.length;i<r;i++)if(e[i]===t)return i;return -1},forEach:function(e,t,i){var r,n;if(Array.prototype.forEach)return e.forEach(t,i);for(r=0,n=e.length;r<n;r++)t.call(i,e[r],r,e);},trim:function(e){return String.prototype.trim?e.trim():e.replace(/(^\s*)|(\s*$)/g,"")},trimRight:function(e){return String.prototype.trimRight?e.trimRight():e.replace(/(\s*$)/g,"")}};var fa=function(e,t){";"!==(e=ha.trimRight(e))[e.length-1]&&(e+=";");var i=e.length,r=!1,n=0,o=0,a="";function l(){if(!r){var i=ha.trim(e.slice(n,o)),l=i.indexOf(":");if(-1!==l){var s=ha.trim(i.slice(0,l)),p=ha.trim(i.slice(l+1));if(s){var d=t(n,a.length,s,p,i);d&&(a+=d+"; ");}}}n=o+1;}for(;o<i;o++){var s=e[o];if("/"===s&&"*"===e[o+1]){var p=e.indexOf("*/",o+2);if(-1===p)break;n=(o=p+1)+1,r=!1;}else "("===s?r=!0:")"===s?r=!1:";"===s?r||l():"\n"===s&&l();}return ha.trim(a)},ba=ua,va=fa;function Sa(e){return null==e}function ka(e){(e=function(e){var t={};for(var i in e)t[i]=e[i];return t}(e||{})).whiteList=e.whiteList||ba.whiteList,e.onAttr=e.onAttr||ba.onAttr,e.onIgnoreAttr=e.onIgnoreAttr||ba.onIgnoreAttr,e.safeAttrValue=e.safeAttrValue||ba.safeAttrValue,this.options=e;}ka.prototype.process=function(e){if(!(e=(e=e||"").toString()))return "";var t=this.options,i=t.whiteList,r=t.onAttr,n=t.onIgnoreAttr,o=t.safeAttrValue;return va(e,(function(e,t,a,l,s){var p=i[a],d=!1;if(!0===p?d=p:"function"==typeof p?d=p(l):p instanceof RegExp&&(d=p.test(l)),!0!==d&&(d=!1),l=o(a,l)){var c,y={position:t,sourcePosition:e,source:s,isWhite:d};return d?Sa(c=r(a,l,y))?a+":"+l:c:Sa(c=n(a,l,y))?void 0:c}}))};var wa=ka;!function(e,t){var i=ua,r=wa;for(var n in (t=e.exports=function(e,t){return new r(t).process(e)}).FilterCSS=r,i)t[n]=i[n];}(ya,ya.exports);var Ia=ya.exports,Ta={indexOf:function(e,t){var i,r;if(Array.prototype.indexOf)return e.indexOf(t);for(i=0,r=e.length;i<r;i++)if(e[i]===t)return i;return -1},forEach:function(e,t,i){var r,n;if(Array.prototype.forEach)return e.forEach(t,i);for(r=0,n=e.length;r<n;r++)t.call(i,e[r],r,e);},trim:function(e){return String.prototype.trim?e.trim():e.replace(/(^\s*)|(\s*$)/g,"")},spaceIndex:function(e){var t=/\s|\n|\t/.exec(e);return t?t.index:-1}},Ca=Ia.FilterCSS,Ea=Ia.getDefaultWhiteList,xa=Ta;function Oa(){return {a:["target","href","title"],abbr:["title"],address:[],area:["shape","coords","href","alt"],article:[],aside:[],audio:["autoplay","controls","crossorigin","loop","muted","preload","src"],b:[],bdi:["dir"],bdo:["dir"],big:[],blockquote:["cite"],br:[],caption:[],center:[],cite:[],code:[],col:["align","valign","span","width"],colgroup:["align","valign","span","width"],dd:[],del:["datetime"],details:["open"],div:[],dl:[],dt:[],em:[],figcaption:[],figure:[],font:["color","size","face"],footer:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],header:[],hr:[],i:[],img:["src","alt","title","width","height"],ins:["datetime"],li:[],mark:[],nav:[],ol:[],p:[],pre:[],s:[],section:[],small:[],span:[],sub:[],summary:[],sup:[],strong:[],strike:[],table:["width","border","align","valign"],tbody:["align","valign"],td:["width","rowspan","colspan","align","valign"],tfoot:["align","valign"],th:["width","rowspan","colspan","align","valign"],thead:["align","valign"],tr:["rowspan","align","valign"],tt:[],u:[],ul:[],video:["autoplay","controls","crossorigin","loop","muted","playsinline","poster","preload","src","height","width"]}}var Ra=new Ca;function _a(e){return e.replace(ja,"&lt;").replace(Ba,"&gt;")}var ja=/</g,Ba=/>/g,Pa=/"/g,Na=/&quot;/g,Ma=/&#([a-zA-Z0-9]*);?/gim,Da=/&colon;?/gim,Aa=/&newline;?/gim,La=/((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi,Fa=/e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi,za=/u\s*r\s*l\s*\(.*/gi;function $a(e){return e.replace(Pa,"&quot;")}function Wa(e){return e.replace(Na,'"')}function Va(e){return e.replace(Ma,(function(e,t){return "x"===t[0]||"X"===t[0]?String.fromCharCode(parseInt(t.substr(1),16)):String.fromCharCode(parseInt(t,10))}))}function Ua(e){return e.replace(Da,":").replace(Aa," ")}function Ga(e){for(var t="",i=0,r=e.length;i<r;i++)t+=e.charCodeAt(i)<32?" ":e.charAt(i);return xa.trim(t)}function qa(e){return e=Ga(e=Ua(e=Va(e=Wa(e))))}function Ha(e){return e=_a(e=$a(e))}ca.whiteList={a:["target","href","title"],abbr:["title"],address:[],area:["shape","coords","href","alt"],article:[],aside:[],audio:["autoplay","controls","crossorigin","loop","muted","preload","src"],b:[],bdi:["dir"],bdo:["dir"],big:[],blockquote:["cite"],br:[],caption:[],center:[],cite:[],code:[],col:["align","valign","span","width"],colgroup:["align","valign","span","width"],dd:[],del:["datetime"],details:["open"],div:[],dl:[],dt:[],em:[],figcaption:[],figure:[],font:["color","size","face"],footer:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],header:[],hr:[],i:[],img:["src","alt","title","width","height"],ins:["datetime"],li:[],mark:[],nav:[],ol:[],p:[],pre:[],s:[],section:[],small:[],span:[],sub:[],summary:[],sup:[],strong:[],strike:[],table:["width","border","align","valign"],tbody:["align","valign"],td:["width","rowspan","colspan","align","valign"],tfoot:["align","valign"],th:["width","rowspan","colspan","align","valign"],thead:["align","valign"],tr:["rowspan","align","valign"],tt:[],u:[],ul:[],video:["autoplay","controls","crossorigin","loop","muted","playsinline","poster","preload","src","height","width"]},ca.getDefaultWhiteList=Oa,ca.onTag=function(e,t,i){},ca.onIgnoreTag=function(e,t,i){},ca.onTagAttr=function(e,t,i){},ca.onIgnoreTagAttr=function(e,t,i){},ca.safeAttrValue=function(e,t,i,r){if(i=qa(i),"href"===t||"src"===t){if("#"===(i=xa.trim(i)))return "#";if("http://"!==i.substr(0,7)&&"https://"!==i.substr(0,8)&&"mailto:"!==i.substr(0,7)&&"tel:"!==i.substr(0,4)&&"data:image/"!==i.substr(0,11)&&"ftp://"!==i.substr(0,6)&&"./"!==i.substr(0,2)&&"../"!==i.substr(0,3)&&"#"!==i[0]&&"/"!==i[0])return ""}else if("background"===t){if(La.lastIndex=0,La.test(i))return ""}else if("style"===t){if(Fa.lastIndex=0,Fa.test(i))return "";if(za.lastIndex=0,za.test(i)&&(La.lastIndex=0,La.test(i)))return "";!1!==r&&(i=(r=r||Ra).process(i));}return i=Ha(i)},ca.escapeHtml=_a,ca.escapeQuote=$a,ca.unescapeQuote=Wa,ca.escapeHtmlEntities=Va,ca.escapeDangerHtml5Entities=Ua,ca.clearNonPrintableCharacter=Ga,ca.friendlyAttrValue=qa,ca.escapeAttrValue=Ha,ca.onIgnoreTagStripAll=function(){return ""},ca.StripTagBody=function(e,t){"function"!=typeof t&&(t=function(){});var i=!Array.isArray(e),r=[],n=!1;return {onIgnoreTag:function(o,a,l){if(function(t){return !!i||-1!==xa.indexOf(e,t)}(o)){if(l.isClosing){var s="[/removed]",p=l.position+10;return r.push([!1!==n?n:l.position,p]),n=!1,s}return n||(n=l.position),"[removed]"}return t(o,a,l)},remove:function(e){var t="",i=0;return xa.forEach(r,(function(r){t+=e.slice(i,r[0]),i=r[1];})),t+=e.slice(i)}}},ca.stripCommentTag=function(e){for(var t="",i=0;i<e.length;){var r=e.indexOf("\x3c!--",i);if(-1===r){t+=e.slice(i);break}t+=e.slice(i,r);var n=e.indexOf("--\x3e",r);if(-1===n)break;i=n+3;}return t},ca.stripBlankChar=function(e){var t=e.split("");return (t=t.filter((function(e){var t=e.charCodeAt(0);return 127!==t&&(!(t<=31)||(10===t||13===t))}))).join("")},ca.cssFilter=Ra,ca.getDefaultCSSWhiteList=Ea;var Ya={},Ka=Ta;function Xa(e){var t,i=Ka.spaceIndex(e);return t=-1===i?e.slice(1,-1):e.slice(1,i+1),"/"===(t=Ka.trim(t).toLowerCase()).slice(0,1)&&(t=t.slice(1)),"/"===t.slice(-1)&&(t=t.slice(0,-1)),t}function Qa(e){return "</"===e.slice(0,2)}var Ja=/[^a-zA-Z0-9\\_:.-]/gim;function Za(e,t){for(;t<e.length;t++){var i=e[t];if(" "!==i)return "="===i?t:-1}}function el(e,t){for(;t<e.length;t++){var i=e[t];if(" "!==i)return "'"===i||'"'===i?t:-1}}function tl(e,t){for(;t>0;t--){var i=e[t];if(" "!==i)return "="===i?t:-1}}function il(e){return function(e){return '"'===e[0]&&'"'===e[e.length-1]||"'"===e[0]&&"'"===e[e.length-1]}(e)?e.substr(1,e.length-2):e}Ya.parseTag=function(e,t,i){var r="",n=0,o=!1,a=!1,l=0,s=e.length,p="",d="";e:for(l=0;l<s;l++){var c=e.charAt(l);if(!1===o){if("<"===c){o=l;continue}}else if(!1===a){if("<"===c){r+=i(e.slice(n,l)),o=l,n=l;continue}if(">"===c){r+=i(e.slice(n,o)),p=Xa(d=e.slice(o,l+1)),r+=t(o,r.length,p,d,Qa(d)),n=l+1,o=!1;continue}if('"'===c||"'"===c)for(var y=1,u=e.charAt(l-y);""===u.trim()||"="===u;){if("="===u){a=c;continue e}u=e.charAt(l-++y);}}else if(c===a){a=!1;continue}}return n<e.length&&(r+=i(e.substr(n))),r},Ya.parseAttr=function(e,t){var i=0,r=0,n=[],o=!1,a=e.length;function l(e,i){if(!((e=(e=Ka.trim(e)).replace(Ja,"").toLowerCase()).length<1)){var r=t(e,i||"");r&&n.push(r);}}for(var s=0;s<a;s++){var p,d=e.charAt(s);if(!1!==o||"="!==d)if(!1===o||s!==r)if(/\s|\n|\t/.test(d)){if(e=e.replace(/\s|\n|\t/g," "),!1===o){if(-1===(p=Za(e,s))){l(Ka.trim(e.slice(i,s))),o=!1,i=s+1;continue}s=p-1;continue}if(-1===(p=tl(e,s-1))){l(o,il(Ka.trim(e.slice(i,s)))),o=!1,i=s+1;continue}}else;else {if(-1===(p=e.indexOf(d,s+1)))break;l(o,Ka.trim(e.slice(r+1,p))),o=!1,i=(s=p)+1;}else o=e.slice(i,s),i=s+1,r='"'===e.charAt(i)||"'"===e.charAt(i)?i:el(e,s+1);}return i<e.length&&(!1===o?l(e.slice(i)):l(o,il(Ka.trim(e.slice(i))))),Ka.trim(n.join(" "))};var rl=Ia.FilterCSS,nl=ca,ol=Ya,al=ol.parseTag,ll=ol.parseAttr,sl=Ta;function pl(e){return null==e}function dl(e){(e=function(e){var t={};for(var i in e)t[i]=e[i];return t}(e||{})).stripIgnoreTag&&(e.onIgnoreTag&&console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'),e.onIgnoreTag=nl.onIgnoreTagStripAll),e.whiteList||e.allowList?e.whiteList=function(e){var t={};for(var i in e)Array.isArray(e[i])?t[i.toLowerCase()]=e[i].map((function(e){return e.toLowerCase()})):t[i.toLowerCase()]=e[i];return t}(e.whiteList||e.allowList):e.whiteList=nl.whiteList,e.onTag=e.onTag||nl.onTag,e.onTagAttr=e.onTagAttr||nl.onTagAttr,e.onIgnoreTag=e.onIgnoreTag||nl.onIgnoreTag,e.onIgnoreTagAttr=e.onIgnoreTagAttr||nl.onIgnoreTagAttr,e.safeAttrValue=e.safeAttrValue||nl.safeAttrValue,e.escapeHtml=e.escapeHtml||nl.escapeHtml,this.options=e,!1===e.css?this.cssFilter=!1:(e.css=e.css||{},this.cssFilter=new rl(e.css));}dl.prototype.process=function(e){if(!(e=(e=e||"").toString()))return "";var t=this.options,i=t.whiteList,r=t.onTag,n=t.onIgnoreTag,o=t.onTagAttr,a=t.onIgnoreTagAttr,l=t.safeAttrValue,s=t.escapeHtml,p=this.cssFilter;t.stripBlankChar&&(e=nl.stripBlankChar(e)),t.allowCommentTag||(e=nl.stripCommentTag(e));var d=!1;t.stripIgnoreTagBody&&(d=nl.StripTagBody(t.stripIgnoreTagBody,n),n=d.onIgnoreTag);var c=al(e,(function(e,t,d,c,y){var u={sourcePosition:e,position:t,isClosing:y,isWhite:Object.prototype.hasOwnProperty.call(i,d)},m=r(d,c,u);if(!pl(m))return m;if(u.isWhite){if(u.isClosing)return "</"+d+">";var g=function(e){var t=sl.spaceIndex(e);if(-1===t)return {html:"",closing:"/"===e[e.length-2]};var i="/"===(e=sl.trim(e.slice(t+1,-1)))[e.length-1];return i&&(e=sl.trim(e.slice(0,-1))),{html:e,closing:i}}(c),h=i[d],f=ll(g.html,(function(e,t){var i=-1!==sl.indexOf(h,e),r=o(d,e,t,i);return pl(r)?i?(t=l(d,e,t,p))?e+'="'+t+'"':e:pl(r=a(d,e,t,i))?void 0:r:r}));return c="<"+d,f&&(c+=" "+f),g.closing&&(c+=" /"),c+=">"}return pl(m=n(d,c,u))?s(c):m}),s);return d&&(c=d.remove(c)),c};var cl=dl;!function(e,t){var i=ca,r=Ya,n=cl;function o(e,t){return new n(t).process(e)}(t=e.exports=o).filterXSS=o,t.FilterXSS=n,function(){for(var e in i)t[e]=i[e];for(var n in r)t[n]=r[n];}(),"undefined"!=typeof self&&"undefined"!=typeof DedicatedWorkerGlobalScope&&self instanceof DedicatedWorkerGlobalScope&&(self.filterXSS=e.exports);}(da,da.exports);da.exports;const ml={NonSpecific:"nonSpecific",BarAndLineNoAggregation:"barAndLineNoAggregation",BarAndLineMonoField:"barAndLineMonoField",BarAndLineMultiFields:"barAndLineMultiFields",BarAndLineFromFields:"barAndLineFromFields",BarAndLineSplitBy:"barAndLineSplitBy",BarAndLineSplitByNoAggregation:"barAndLineSplitByNoAggregation",PieNoAggregation:"pieNoAggregation",PieFromCategory:"pieFromCategory",PieFromFields:"pieFromFields",BoxPlotMonoField:"boxPlotMonoField",BoxPlotMultiFields:"boxPlotMultiFields",BoxPlotMonoFieldAndCategory:"boxPlotMonoFieldAndCategory",BoxPlotMultiFieldsAndCategory:"boxPlotMultiFieldsAndCategory",BoxPlotMonoFieldAndSplitBy:"boxPlotMonoFieldAndSplitBy",BoxPlotMultiFieldsAndSplitBy:"boxPlotMultiFieldsAndSplitBy",BoxPlotMonoFieldAndCategoryAndSplitBy:"boxPlotMonoFieldAndCategoryAndSplitBy"};function hl(e){return e?.colorMatch??!1}function fl(e,t){let i;if(void 0!==e&&e.length>0)if(void 0!==t&&t>=0&&t<e.length)i=e[t].type;else {const t=new Set(e.map((e=>e.type))),r=function(e){return 2===e.size&&e.has(Q)&&e.has(J)}(t),n=function(e){return 2===e.size&&e.has(Q)&&e.has(ee)||1===e.size&&e.has(ee)}(t);i=!0===r?ie:n?ee:t.size>=2?void 0:e[0].type;}return i}function bl(e){let t=!1;if(void 0!==e){const i=fl(e.series);i!==J&&i!==Q&&i!==ie&&i!==ee||(t=e.rotated??!1);}return t}function Sl(e){let t=e?.stackedType;if(void 0===t&&void 0!==e){const i=fl(e.series);i!==J&&i!==Q&&i!==ie&&i!==te||(t=ra());}return t}function kl(e){let t=e,i="";e.startsWith("'")&&e.endsWith("'")&&(t=e.slice(1,-1),i="'"),t=t.replace(/'/gu,"''");let r="";return function(e){let t=!1;"number"!=typeof e&&(t=[...e].some((e=>e.charCodeAt(0)>255)));return t}(t)&&(r="N"),`${r}${i}${t}${i}`}function wl(e){const{value:t,keepSurroundingQuotes:i,escape:r}=e;let n=t?.trim();if(!Ol(n)){let e="";n.startsWith("'")&&n.endsWith("'")&&(n=n.slice(1,-1),i&&(e="'")),!1!==r&&(n=function(e){let t=e;return t=t.replace(/'/gu,"''"),t=t.replace(/[/\\"|[\]\\]/gu,"\\$&"),t}(n)),n=`${e}${n}${e}`;}return n}function Il(e){const{count:t,seriesCount:i,chartType:r,chartLimits:n}=e,{behaviorAfterLimit:o}=n??{};let a=!0;if(o!==We.RenderUpToTheLimit){const{maxBarChartSeriesCount:e,maxBarUniqueSeriesCountTotal:o,maxBarTwoSeriesCountPerSeries:l,maxBarTwoSeriesCountTotal:s,maxBarThreePlusSeriesCountPerSeries:p,maxBarThreePlusSeriesCountTotal:d,maxLineChartSeriesCount:c,maxLineUniqueSeriesCountTotal:y,maxLineTwoSeriesCountPerSeries:u,maxLineTwoSeriesCountTotal:m,maxLineThreePlusSeriesCountPerSeries:g,maxLineThreePlusSeriesCountTotal:h,maxPieChartSliceCountTotal:f,maxGaugeByFeaturesLimit:b,maxBoxPlotSeriesCount:v,maxBoxUniqueSeriesCountTotal:S,maxBoxTwoSeriesCountTotal:k,maxBoxTwoSeriesCountPerSeries:w,maxBoxThreePlusSeriesCountTotal:I,maxBoxThreePlusSeriesCountPerSeries:T}=Zo(n);switch(r){case J:case ie:{const r=t/i;i<=e?0===i?a=!0:1===i?a=t<=o:2===i?a=t<=s&&r<=l:i>2&&(a=t<=d&&r<=p):a=!1;}break;case Q:case te:{const e=t/i;i<=c?0===i?a=!0:1===i?a=t<=y:2===i?a=t<=m&&e<=u:i>2&&(a=t<=h&&e<=g):a=!1;}break;case Y:a=t<=f;break;case ee:{const e=t/i;i<=v?0===i?a=!0:1===i?a=t<=S:2===i?a=t<=k&&e<=w:i>2&&(a=t<=I&&e<=T):a=!1;}break;case X:a=t<=b;}}return a}function Tl(e=[],t){const i=e.find((e=>e.name===t))?.alias;return ""!==i?i??t:t}function Ol(e){return null==e||"string"==typeof e&&""===e.trim()}function Rl(e,t){const i=t.find((t=>t in e));return {isInItem:void 0!==i,expr:i}}function _l(e){return Rl(e,Gn)}function Ml(e){return null!=e&&!Number.isNaN(e)&&Number.isFinite(e)}function Fl(e){return e===ml.BarAndLineSplitBy||e===ml.BarAndLineSplitByNoAggregation||e===ml.BoxPlotMonoFieldAndSplitBy||e===ml.BoxPlotMultiFieldsAndSplitBy||e===ml.BoxPlotMonoFieldAndCategoryAndSplitBy}const Wl={Min:"min",FirstQuartile:"first_quartile",Median:"median",ThirdQuartile:"third_quartile",Max:"max",IQR:"iqr",Average:"avg",StandardDeviation:"stddev",Outlier:"outlier"};function Yl(e){const{series:t}=e;let i=!0===("showMean"in e&&e.showMean)?t.find((e=>e.type===Q)):t[0];return i??=t[0],i}function Xl(e,t){let i="";return void 0!==e&&e.includes("=")&&(i=!1!==t?wl({value:e.split("=")[0]}):e.split("=")[0].trim()),i}function Ql(e){const{where:t,normalize:i,keepSurroundingQuotes:r,escape:n}=e;let o="";return void 0!==t&&t.includes("=")&&(o=t.split("=").slice(1).join("=").trim(),"null"===o?o=null:""===o.trim()||Number.isNaN(Number(o))?!1===i?!0===n&&(o=kl(o)):o=wl({value:o,keepSurroundingQuotes:r,escape:n}):o=Number(o)),o}function Jl(e){let t=!1;if(void 0===e||""===e)t=!0;else if(e.includes("=")){t=Xl(e,!1)===`${Ql({where:e,normalize:!1})}`;}return t}function Zl(e){const{where:t,normalize:i,escape:r}=e,n=void 0===i||i,o=Xl(t),a=Ql({where:t,normalize:n,keepSurroundingQuotes:!0,escape:r});let l=t;return ""!==o&&""!==a&&(l=`${o}=${a}`),l}function es(e){let t=ml.BoxPlotMonoField;const i=1===e.length,r=e.find((e=>e.type===Q))??e[0],{x:n}=r,o="y"in r?r.y:"",a=r.query?.where;if(n===eo)"object"==typeof o&&o.length>1?Jl(a)?i&&(t=ml.BoxPlotMultiFields):t=ml.BoxPlotMultiFieldsAndSplitBy:i?t=ml.BoxPlotMonoField:Jl(a)||(t=ml.BoxPlotMonoFieldAndSplitBy);else t=i?ml.BoxPlotMonoFieldAndCategory:Jl(a)?ml.BoxPlotMultiFieldsAndCategory:ml.BoxPlotMonoFieldAndCategoryAndSplitBy;return t}function ts(e){let t=ml.NonSpecific;if(void 0!==e?.[0]){switch(fl(e)){case Y:t=function(e){let t=ml.PieFromCategory;return void 0===e[0].query?.outStatistics?t=ml.PieNoAggregation:void 0===e[0].query?.groupByFieldsForStatistics&&(t=ml.PieFromFields),t}(e);break;case te:case J:case Q:case ie:t=function(e){let t=ml.BarAndLineMonoField;const i=e[0].query?.where;return void 0===e[0].query?.groupByFieldsForStatistics&&(e[0].query?.outStatistics??[]).length>0?t=ml.BarAndLineFromFields:void 0===i&&void 0===e[0].query?.outStatistics?t=ml.BarAndLineNoAggregation:Jl(i)?e.length>1&&(t=ml.BarAndLineMultiFields):t=void 0===e[0].query?.outStatistics?ml.BarAndLineSplitByNoAggregation:ml.BarAndLineSplitBy,t}(e);break;case ee:t=es(e);}}return t}function is(e){const{seriesConfig:t,xAxisValueFormatType:i,setTimeBinningInfoWhenNotProvided:r}=e;let n=!1;if((t.type===Q||t.type===J)&&!1!==t.binTemporalData&&i===q){const e=ts([t]);if(e!==ml.BarAndLineNoAggregation&&e!==ml.BarAndLineSplitByNoAggregation){const{timeIntervalUnits:e,timeIntervalSize:i}=t;n=!0===r||void 0!==i&&i>0&&void 0!==e;}}return n}function rs(e){const t=void 0===e||""===e;return {[Wl.Average]:`${t?"":`${e}_`}${Wl.Average}`,[Wl.Min]:`${t?"":`${e}_`}${Wl.Min}`,[Wl.Max]:`${t?"":`${e}_`}${Wl.Max}`,[Wl.FirstQuartile]:`${t?"":`${e}_`}${Wl.FirstQuartile}`,[Wl.Median]:`${t?"":`${e}_`}${Wl.Median}`,[Wl.ThirdQuartile]:`${t?"":`${e}_`}${Wl.ThirdQuartile}`,[Wl.IQR]:`${t?"":`${e}_`}${Wl.IQR}`,[Wl.Outlier]:`${t?"":`${e}_`}${Wl.Outlier}`,[Wl.StandardDeviation]:`${t?"":`${e}_`}${Wl.StandardDeviation}`}}function ns(e){return e.subType===Oe}function os(e){let t;return void 0!==e&&("bins"in e?t=e.bins:"dataItems"in e&&(t=e.dataItems)),t}function as(e){return e===ml.BoxPlotMultiFields||e===ml.BoxPlotMultiFieldsAndCategory||e===ml.BoxPlotMultiFieldsAndSplitBy}function ls(e){const{key:t,y:i,chartSubType:r,splitBy:n,splitByValue:o,showOutliers:a,standardizeValues:l}=e;let s=o;let p=rs(i)[t];return !0!==a||t!==Wl.Min&&t!==Wl.Max||(p=`${p}${aa}`),!0!==l||!as(r)&&t!==Wl.Outlier||(p=`${p}${la}`),void 0!==o&&""!==`${o}`.trim()||(s=Ql({where:n,normalize:!0,escape:!1})),void 0!==s&&""!==`${s}`.trim()&&(p=`${s}${""!==p?`_${p}`:""}`),p}function ps(e){return e.map((e=>e.id)).filter((e=>"undefined"!==e))}function ds(e,t){let i=[];const r=t??ps(e),n=ts(e);return i=e.filter((e=>r.includes(e.id))).map((e=>{let t="y"in e?e.y:void 0;return void 0!==t&&n===ml.BarAndLineSplitByNoAggregation&&(t=`${t.toString()}_${Ql({where:e.query?.where})}`),t})).filter((e=>void 0!==e)),Array.from(new Set(i.flat()))}function cs(e){const{seriesConfig:t,filteredSeriesIds:i,showMean:r}=e;let n=[];if(!0===r){const e=t.find((e=>e.type===ee));void 0!==e&&"y"in e&&(n=[e.y].flat());}else n=ds(t,i);return n}var bs="undefined"!=typeof window&&"$arcgis"in window&&"object"==typeof window.$arcgis&&"import"in window.$arcgis&&!("forceESM"in window.$arcgis);function vs(e){return void 0!==e.default}async function Ss(e){return new(await async function(){if(bs)return await window.$arcgis.import("esri/layers/FeatureLayer");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/FeatureLayer.js')); });return vs(e)?e.default:e}())(e)}async function ks(e){return new(await async function(){if(bs)return await window.$arcgis.import("esri/portal/Portal");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/portal/Portal.js')); });return vs(e)?e.default:e}())(e)}async function ws(e){return new(await async function(){if(bs)return await window.$arcgis.import("esri/rest/support/Query");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/rest/support/Query.js')); });return vs(e)?e.default:e}())(e)}async function Is(e){return new(await async function(){if(bs)return await window.$arcgis.import("esri/time/TimeExtent");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/time/TimeExtent.js')); });return vs(e)?e.default:e}())(e)}async function Ts(){if(bs)return await window.$arcgis.import("esri/core/promiseUtils");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/core/promiseUtils.js')); });return vs(e)?e.default:e}async function Cs(){if(bs)return await window.$arcgis.import("esri/geometry/support/jsonUtils");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/geometry/support/jsonUtils.js')); });return vs(e)?e.default:e}async function Es(){if(bs)return await window.$arcgis.import("esri/request");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/request.js')); });return vs(e)?e.default:e}function xs(e){return void 0!==e&&"layer"in e}function Os(e){return void 0!==e&&"type"in e&&"feature"===e.type}function Rs(e){return void 0!==e&&"type"in e&&"subtype-group"===e.type}function _s(e){return void 0!==e&&"type"in e&&"subtype-sublayer"===e.type}function js(e){return _s(e)?e.parent:e}function Bs(e){return e.capabilities?.query?.supportsDistance||!0===js(e).sourceJSON?.advancedQueryCapabilities?.supportsQueryWithDistance}function Ps(e){return js(Ds(e))?.sourceJSON?.advancedQueryCapabilities.supportedOperationsWithCacheHint.includes("queryBins")}function Ns(e){let t=!1;const i=js(Ds(e)).sourceJSON;if(i){const e=i.queryBinsCapabilities?.supportsFixedIntervalBin,r=i.queryBinsCapabilities?.supportedStatisticTypes,n=[l$1.Maximum,l$1.Count].every((e=>r?.includes(e.toUpperCase())||r?.includes(e.toLowerCase())));t=e&&n;}return t}function Ms(e){let t;return t=xs(e)?e.layer:e,t}function Ds(e){let t;return t=xs(e)?e.layer:e,t}function As(e){let t=!1;const i=js(e).sourceJSON?.advancedQueryCapabilities?.supportedSpatialAggregationStatistics??[],r=e.capabilities?.query.supportedSpatialAggregationStatistics??{};return t=i.includes("EnvelopeAggregate")||"envelope"in r&&void 0!==r.envelope&&null!==r.envelope,t}function Fs(e){const t=!e.geometry,i=(e.where??"").toUpperCase(),r=!i.includes("CURRENT_TIMESTAMP")&&!i.includes("CURRENT_DATE")&&!i.includes("CURRENT_TIME");return t&&r}function zs(e){const t=js(e)?.sourceJSON;let i=t?.maxRecordCount??Un.maxRecords;return t?.advancedQueryCapabilities?.supportsMaxRecordCountFactor&&void 0!==t?.maxRecordCount&&(i=t.maxRecordCount*Un.maxRecordCountFactor),i}function $s(e,t){let i;const r=Array.from(new Set(e)).filter((e=>null!=e&&""!==e&&!Jl(e)));return r.sort(((e,t)=>t.length-e.length)),1===r.length?[i]=r:r?.forEach((e=>{void 0!==e&&(Ol(i)?i=`(${e})`:i?.includes(`(${e})`)||(i=`${i} ${t??"AND"} (${e})`));})),i??"1=1"}function Ws(e,t){let i=t;if(void 0!==e){const t=js(Ds(e)).timeExtent;null!=t?.start&&null!=t?.end&&(i=[t.start.valueOf(),t.end.valueOf()]);}return i}function Vs(e){const{queryObject:t,defaultGeometry:i,ignoreViewExtent:r}=e;let n=i;if(!r&&xs(t)){const e=t.view.extent,{xmin:i,xmax:r,ymin:o,ymax:a,zmin:l,zmax:s,spatialReference:p}=e;n={xmin:i,ymin:o,zmin:l,xmax:r,ymax:a,zmax:s,spatialReference:p};}return n}async function Us(e){let t;return void 0!==e&&(t=await Is({start:new Date(e[0]),end:new Date(e[1])})),t}async function Gs(e){let t;if(void 0!==e){t=(await Cs()).fromJSON(e);}return t}async function qs(e){const{queryObject:t,queryConfig:i,maxRecordCountFactor:r}=e,{where:n,groupByFieldsForStatistics:o,orderByFields:a,outStatistics:s,gdbVersion:p,geometry:d,distance:c,units:y,timeExtent:u,start:m,num:g,returnDistinctValues:h,outFields:f}=i??{},b=await ws({});b.returnGeometry=!1;const v=Ds(t),S=js(v),k=[n,S.definitionExpression];if(b.where=$s(k),b.outFields=function(e){return void 0===e?["*"]:Array.from(new Set(e))}(f),b.groupByFieldsForStatistics=o??b.groupByFieldsForStatistics,b.orderByFields=a??[],b.returnDistinctValues=h??!1,void 0!==s){const e=As(v),t=await async function(){if(bs)return await window.$arcgis.import("esri/rest/support/StatisticDefinition");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/rest/support/StatisticDefinition.js')); });return vs(e)?e.default:e}();b.outStatistics=s.filter((t=>t.statisticType!==l$1.EnvelopeAggregate||e)).map((e=>t.fromJSON(e)));}void 0!==r&&(b.maxRecordCountFactor=r),void 0!==p&&""!==p?b.gdbVersion=p:void 0!==S.gdbVersion&&""!==S.gdbVersion&&(b.gdbVersion=S.gdbVersion);const w=await Gs(d);void 0!==w&&(b.geometry=w,Bs(v)&&(void 0!==c&&(b.distance=c),void 0!==y&&(b.units=y)));const I=await Us(u);return void 0!==I?b.timeExtent=I:void 0!==S.timeExtent&&(b.timeExtent=S.timeExtent),void 0!==g&&(b.num=g),void 0!==m&&(b.start=m,b.num=b.num??zs(v)),Fs(b)&&(b.cacheHint=!0),b}function Hs(e){return !0===js(e)?.sourceJSON?.advancedQueryCapabilities?.supportsMaxRecordCountFactor?Un.maxRecordCountFactor:void 0}const Ys=new Map,Ks={Default:"defaultError",LayerLoadFailure:"layerLoadFailure",QueryFeaturesError:"queryFeaturesError",ChartDisposed:"ChartDisposeError",LayerFieldsNotFound:"layerFieldsNotFound"};class Xs extends Error{constructor(e,t,i){super(t),this.name=e,this.details=i;}}async function Qs(e=jn().locale){let t=await Promise.resolve().then(function () { return require('./messages.en-2720bc04-4c6e84b9.js'); });switch(e){case Ue.Arabic:t=await Promise.resolve().then(function () { return require('./messages.ar-2a516be4-cf7dc570.js'); });break;case Ue.Bosnian:t=await Promise.resolve().then(function () { return require('./messages.bs-ed521a4a-7f53c91b.js'); });break;case Ue.Bulgarian:t=await Promise.resolve().then(function () { return require('./messages.bg-32846a04-2841a568.js'); });break;case Ue.Catalan:t=await Promise.resolve().then(function () { return require('./messages.ca-534a5a29-e9c5e23c.js'); });break;case Ue.Czech:t=await Promise.resolve().then(function () { return require('./messages.cs-f7dfa0ea-a33d2aac.js'); });break;case Ue.Danish:t=await Promise.resolve().then(function () { return require('./messages.da-12df1d76-5bd0a0d2.js'); });break;case Ue.German:t=await Promise.resolve().then(function () { return require('./messages.de-8ac83862-f9098168.js'); });break;case Ue.Greek:t=await Promise.resolve().then(function () { return require('./messages.el-d39d2cdb-b18ef300.js'); });break;case Ue.EnglishUSA:t=await Promise.resolve().then(function () { return require('./messages.en-US-d444015e-6026a566.js'); });break;case Ue.Spanish:t=await Promise.resolve().then(function () { return require('./messages.es-5242724e-a950b843.js'); });break;case Ue.Estonian:t=await Promise.resolve().then(function () { return require('./messages.et-62f107f7-4a0b435a.js'); });break;case Ue.Finnish:t=await Promise.resolve().then(function () { return require('./messages.fi-c0c48057-f15bcf69.js'); });break;case Ue.French:t=await Promise.resolve().then(function () { return require('./messages.fr-b992d801-c1cbb642.js'); });break;case Ue.Hebrew:t=await Promise.resolve().then(function () { return require('./messages.he-70d41af0-b0991f0c.js'); });break;case Ue.Croatian:t=await Promise.resolve().then(function () { return require('./messages.hr-5657371a-fce30fd9.js'); });break;case Ue.Hungarian:t=await Promise.resolve().then(function () { return require('./messages.hu-5bc9a465-c050fbef.js'); });break;case Ue.Indonesian:t=await Promise.resolve().then(function () { return require('./messages.id-e1e1d374-32f77408.js'); });break;case Ue.Italian:t=await Promise.resolve().then(function () { return require('./messages.it-025c832d-28911a82.js'); });break;case Ue.Japanese:t=await Promise.resolve().then(function () { return require('./messages.ja-4264bfb4-a95ab95f.js'); });break;case Ue.Korean:t=await Promise.resolve().then(function () { return require('./messages.ko-e9e78e29-1519733f.js'); });break;case Ue.Lithuanian:t=await Promise.resolve().then(function () { return require('./messages.lt-21cd5fa8-1b58c4c5.js'); });break;case Ue.Latvian:t=await Promise.resolve().then(function () { return require('./messages.lv-90fae237-165bba33.js'); });break;case Ue.NorwegianBokml:t=await Promise.resolve().then(function () { return require('./messages.no-70efa82c-d221ebf5.js'); });break;case Ue.Dutch:t=await Promise.resolve().then(function () { return require('./messages.nl-417c9242-34301c2c.js'); });break;case Ue.Polish:t=await Promise.resolve().then(function () { return require('./messages.pl-2dec17dd-3452e9f9.js'); });break;case Ue.PortugueseBrazil:t=await Promise.resolve().then(function () { return require('./messages.pt-BR-56a76dfb-aaa59d87.js'); });break;case Ue.PortuguesePortugal:t=await Promise.resolve().then(function () { return require('./messages.pt-PT-67e158bf-75cce948.js'); });break;case Ue.Romanian:t=await Promise.resolve().then(function () { return require('./messages.ro-fbedb46a-971dd55c.js'); });break;case Ue.Russian:t=await Promise.resolve().then(function () { return require('./messages.ru-46c525de-dbf102b0.js'); });break;case Ue.Serbian:t=await Promise.resolve().then(function () { return require('./messages.sr-6eeefca3-d30aebc7.js'); });break;case Ue.Slovak:t=await Promise.resolve().then(function () { return require('./messages.sk-36f6b3f3-50ace77c.js'); });break;case Ue.Slovenian:t=await Promise.resolve().then(function () { return require('./messages.sl-407c0dc1-1b4500eb.js'); });break;case Ue.Swedish:t=await Promise.resolve().then(function () { return require('./messages.sv-8a49b669-cd94c20d.js'); });break;case Ue.Thai:t=await Promise.resolve().then(function () { return require('./messages.th-63ead210-1a499d44.js'); });break;case Ue.Turkish:t=await Promise.resolve().then(function () { return require('./messages.tr-7c612534-7a36f185.js'); });break;case Ue.Ukrainian:t=await Promise.resolve().then(function () { return require('./messages.uk-7a3e2f41-c7aa42ac.js'); });break;case Ue.Vietnamese:t=await Promise.resolve().then(function () { return require('./messages.vi-7bf62f1e-99ad8fee.js'); });break;case Ue.ChineseChina:t=await Promise.resolve().then(function () { return require('./messages.zh-CN-9407591c-8442db0d.js'); });break;case Ue.ChineseHongKong:t=await Promise.resolve().then(function () { return require('./messages.zh-HK-fc092e0a-27088885.js'); });break;case Ue.ChineseTaiwan:t=await Promise.resolve().then(function () { return require('./messages.zh-TW-53165175-15e5df51.js'); });}return t}async function Js(e){const{queryObject:t,queryConfig:i,outputFormat:r,dataFormat:n,outAnalytics:o}=e,{where:a,geometry:l,distance:s,units:p}=i;let d;const c=js(Ds(t)),y={query:{where:$s([a,c.definitionExpression])}},u=(await Gs(l))?.extent?.toJSON();if(void 0!==u){const e=function(e){let t;switch(e){case j:t="esriSRUnit_Foot";break;case B:t="esriSRUnit_StatuteMile";break;case P:t="esriSRUnit_NauticalMile";break;case N:t="esriSRUnit_USNauticalMile";break;case M:t="esriSRUnit_Meter";break;case D:t="esriSRUnit_Kilometer";}return t}(p),{xmin:t,ymin:i,xmax:r,ymax:n}=u;y.query={...y.query,geometryType:"esriGeometryEnvelope",geometry:`${t},${i},${r},${n}`,distance:s,units:e,inSR:l?.spatialReference?.wkid};}const m=`${c.url}/${c.layerId}/queryAnalytic?f=${r}&dataFormat=${n}&outAnalytics=${o}`;try{const e=await Es(),t=await e(m,y);d=t.data?.features?.[0]?.attributes;}catch(e){const t=await Qs();throw new Xs(Ks.QueryFeaturesError,t.queryError,e)}return d}function Zs(e,t){return {lowerBoundaryAlias:`charts_lower_boundary_${e}`,upperBoundaryAlias:`charts_upper_boundary_${e}`,stackAlias:`charts_stack_alias_${t}`}}async function ep(e){const{queryObject:t,queryConfig:i,xStep:n,xMin:o,xMax:a,x:l,y:s,yStep:p,errorStrings:d}=e;let c=[];if(Number.isFinite(n)&&Number.isFinite(p)&&Number.isFinite(o)&&Number.isFinite(a)&&n>0&&p>0){const e=js(Ds(t)),y=Zs(l,s),u={query:{cacheHint:Ps(t),outStatistics:JSON.stringify(i.outStatistics),lowerBoundaryAlias:y.lowerBoundaryAlias,upperBoundaryAlias:y.upperBoundaryAlias,bin:JSON.stringify({type:"fixedIntervalBin",parameters:{interval:n,start:o,end:a},onField:l,stackBy:{value:`FLOOR(${s} / ${p})`,type:"Expression",valueType:r,outAlias:y.stackAlias}})}},m=`${e.url}/${e.layerId}/queryBins?f=json&dataFormat=json`;try{const e=await Es();c=(await e(m,u)).data?.features;}catch(e){throw new Xs(Ks.QueryFeaturesError,d.errors.queryError,e)}}return c}async function tp(e){const{queryConfig:t,x:i,queryObject:r,chartSubType:n,isGaugeByFeature:o}=e,a=Ds(r);let l;if(void 0!==r){const e=a.objectIdField,{where:s,gdbVersion:p,timeExtent:d,geometry:c,distance:y,units:u}=t,m=await Us(d),g=await Gs(c),h=js(a),f=$s([s,h.definitionExpression]),b={returnDistinctValues:!0,outFields:!0===o||n===ml.PieNoAggregation||n===ml.BarAndLineNoAggregation||n===ml.BarAndLineSplitByNoAggregation?[e]:[i],where:f,gdbVersion:p??h.gdbVersion,timeExtent:m??h.timeExtent,geometry:g};Fs(b)&&(b.cacheHint=!0),void 0!==b.geometry&&Bs(a)&&(void 0!==y&&(b.distance=y),void 0!==u&&(b.units=u));try{l=await r.queryFeatureCount(b);}catch(e){l=Number.NaN;}}return l}async function ip(e){const{queryObject:t,queryConfig:i,abortKey:r}=e,{outStatistics:n}=i,o=new Map;if(void 0!==t&&void 0!==n&&n.length>0){const e=n.map((e=>{const{statisticType:t,onStatisticField:i,outStatisticFieldName:r}=e;return {statisticType:t,onStatisticField:i,outStatisticFieldName:r?.toUpperCase()}}));i.outStatistics=e,delete i.num,delete i.orderByFields;const a=await qs({queryObject:t,queryConfig:i});let l;try{l=await t.queryFeatures(a,{signal:void 0!==r?Ys.get(r)?.signal:void 0});}catch(e){if(!(await Ts()).isAbortError(e)){const t=await Qs();throw new Xs(Ks.QueryFeaturesError,t.queryError,e)}}const s=l?.features?.[0]?.attributes;void 0!==s&&n.forEach((e=>{const{outStatisticFieldName:t}=e;if(void 0!==t){const e=s[t.toLowerCase()]??s[t.toUpperCase()]??s[t];void 0!==e&&o.set(t,e);}}));}return o}async function rp(e){const{queryObject:t,queryConfig:i,returnUniqueIdsOnly:r,abortKey:n}=e;let o=[];const a=Ds(t);if(void 0!==t){const e=Hs(a),l=await qs({queryObject:t,queryConfig:i,maxRecordCountFactor:e});try{if(!0===r)if("queryObjectIds"in t)o=await t.queryObjectIds(l);else {l.outFields=[a.objectIdField];o=(await t.queryFeatures(l,{signal:void 0!==n?Ys.get(n)?.signal:void 0})).features.map((e=>e.attributes[a.objectIdField]));}else {o=(await t.queryFeatures(l,{signal:void 0!==n?Ys.get(n)?.signal:void 0})).features;}}catch(e){if(!(await Ts()).isAbortError(e)){const t=await Qs();throw new Xs(Ks.QueryFeaturesError,t.queryError,e)}}}return o}async function np(e){const t=[],{featureCount:i,maxRecords:r,queryConfig:n}=e;let o=[],a=0,l=n?.start??0;for(;a<Un.maxParallelRequests&&l<i;){const o={...e};o.queryConfig={...n,start:l,num:Math.min(r,i-l)},t.push(rp(o)),l+=r,a+=1;}return o=(await Promise.all(t)).flat(),o}async function op(e){const{queryObject:t,queryConfig:i,returnUniqueIdsOnly:r,featureCount:n,noBatch:o,abortKey:a}=e;let l=[];const s=Ds(t);if(void 0!==t){const e=n??1,p=zs(s);if(!0!==o&&e>p&&s.capabilities?.query.supportsPagination){let n=0,o=0;const s=Math.ceil(e/p),d=Math.ceil(s/Un.maxParallelRequests),c=[];for(;o<d;){n=o*Un.maxParallelRequests*p;const l=np({queryConfig:{...i,start:n},queryObject:t,maxRecords:p,featureCount:e,returnUniqueIdsOnly:r,abortKey:a});c.push(l),o+=1;}l=(await Promise.all(c)).flat();}else (Number.isNaN(e)||e>=0)&&(l=await rp({queryObject:t,queryConfig:i,returnUniqueIdsOnly:r,abortKey:a}));}return l}async function ap(e){const{queryObject:t,queryConfig:i,uniqueFeature:r,abortKey:n}=e,o={...i,returnDistinctValues:!0};return await op({queryObject:t,abortKey:n,queryConfig:o,returnUniqueIdsOnly:!0,featureCount:!0===r?1:void 0})}function lp(e){if(void 0!==e){const t=Ys.get(e);void 0!==t&&t.abort(),Ys.set(e,new AbortController);}}const pp=[{unit:ue,threshold:6e4,unitMs:1e3,preferredIntervalSize:[1,2,3,5,6,10,12,15,20,30,60]},{unit:me,threshold:36e5,unitMs:6e4,preferredIntervalSize:[1,2,3,5,6,10,12,15,20,30,60]},{unit:ge,threshold:864e5,unitMs:36e5,preferredIntervalSize:[1,2,3,4,6,8,12,24]},{unit:he,threshold:6048e5,unitMs:864e5,preferredIntervalSize:[1,2,3,4,5,6,7]},{unit:fe,threshold:24192e5,unitMs:6048e5,preferredIntervalSize:[1,2,3,4]},{unit:be,threshold:290304e5,unitMs:24192e5,preferredIntervalSize:[1,2,3,4,6,12]},{unit:ve,threshold:Number.MAX_SAFE_INTEGER,unitMs:290304e5,preferredIntervalSize:[1,2,4,5,10,25,50,100]}],dp="${ groupByFieldsForStatistics } WHEN ${ dateField }>='${ startDate }' AND ${ dateField }${ endDateOperand }'${ endDate }' THEN '${ y }|${ binIndex}'",cp={$schema:"http://json-schema.org/draft-07/schema#",definitions:{RESTFieldType:{enum:["esriFieldTypeBlob","esriFieldTypeDate","esriFieldTypeDouble","esriFieldTypeGUID","esriFieldTypeGeometry","esriFieldTypeGlobalID","esriFieldTypeInteger","esriFieldTypeOID","esriFieldTypeRaster","esriFieldTypeSingle","esriFieldTypeSmallInteger","esriFieldTypeString","esriFieldTypeXML"],type:"string",title:"RESTFieldType"},RESTStatisticType:{enum:["avg","centroid-aggregate","convex-hull-aggregate","count","envelope-aggregate","max","min","no_aggregation","percentile_cont","percentile_disc","stddev","sum","var"],type:"string",title:"RESTStatisticType"},RESTSimpleLineSymbolStyle:{enum:["esriSLSDash","esriSLSDashDot","esriSLSDashDotDot","esriSLSDot","esriSLSNull","esriSLSSolid"],type:"string",title:"RESTSimpleLineSymbolStyle"},RESTSimpleMarkerSymbolStyle:{enum:["esriSMSCircle","esriSMSCross","esriSMSDiamond","esriSMSSquare","esriSMSTriangle","esriSMSX"],type:"string",title:"RESTSimpleMarkerSymbolStyle"},RESTSimpleFillSymbolStyle:{enum:["esriSFSBackwardDiagonal","esriSFSCross","esriSFSDiagonalCross","esriSFSForwardDiagonal","esriSFSHorizontal","esriSFSNull","esriSFSSolid","esriSFSVertical"],type:"string",title:"RESTSimpleFillSymbolStyle"},RESTHorizontalAlignment:{enum:["center","justify","left","right"],type:"string",title:"RESTHorizontalAlignment"},RESTVerticalAlignment:{enum:["baseline","bottom","middle","top"],type:"string",title:"RESTVerticalAlignment"},RESTSymbolType:{enum:["esriPFS","esriPMS","esriSFS","esriSLS","esriSMS","esriTS"],type:"string",title:"RESTSymbolType"},RESTFontStyle:{enum:["italic","normal","oblique"],type:"string",title:"RESTFontStyle"},RESTFontWeight:{enum:["bold","bolder","lighter","normal"],type:"string",title:"RESTFontWeight"},RESTFontDecoration:{enum:["line-through","none","underline"],type:"string",title:"RESTFontDecoration"},RESTRendererType:{enum:["class-breaks","dictionary","dot-density","heatmap","pie-chart","simple","unique-value"],type:"string",title:"RESTRendererType"},RESTUnits:{enum:["feet","kilometers","meters","miles","nautical-miles","us-nautical-miles"],type:"string",title:"RESTUnits"},WebChartTypes:{enum:["barSeries","boxPlotSeries","buffer","category","chart","chartAxis","chartGuide","chartLegend","chartOverlay","chartOverlays","chartText","comboLineAndBarSeries","cursorCrosshair","date","gaugeAxisTick","gaugeNeedle","gaugeSeries","histogramSeries","lineSeries","number","pieSeries","pieTick","radarSeries","scatterSeries","sizeScale"],type:"string",title:"WebChartTypes"},WebChartDataTransformations:{enum:["logarithmic","none","squareRoot"],type:"string",title:"WebChartDataTransformations"},WebChartColoringPatterns:{enum:["colorMatch","singleColor"],type:"string",title:"WebChartColoringPatterns"},WebChartLegendPositions:{enum:["bottom","left","right","top"],type:"string",title:"WebChartLegendPositions"},WebChartStackedKinds:{enum:["sideBySide","stacked","stacked100"],type:"string",title:"WebChartStackedKinds"},WebChartBoxPlotMultipleSeriesKinds:{enum:["meanLines","sideBySide"],type:"string",title:"WebChartBoxPlotMultipleSeriesKinds"},WebChartSortOrderKinds:{title:"WebChartSortOrderKinds",enum:["ASC","DESC"],type:"string"},WebChartLineSmoothedKinds:{description:"Represents the different types of smoothing that can be applied to a line chart when the `lineSmoothed` property is set to `true`.",enum:["bezier","monotoneX","monotoneY"],type:"string",title:"WebChartLineSmoothedKinds"},WebChartTimeIntervalUnits:{description:"Represents the different types of time intervals that can be applied to a chart using the time binning feature.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"WebChartTimeIntervalUnits"},WebChartNullPolicyTypes:{description:"Represents the different types of null policy that can be applied to a chart using the time binning feature.",enum:["interpolate","null","zero"],type:"string",title:"WebChartNullPolicyTypes"},WebChartTimeAggregationTypes:{description:"Represents the different types of time aggregation that can be applied to a chart using the time binning feature.",enum:["equalIntervalsFromEndTime","equalIntervalsFromStartTime"],type:"string",title:"WebChartTimeAggregationTypes"},WebChartLabelBehavior:{description:"Represents the different types of behaviors that can applied to a chart axis.",enum:["hide","rotate","stagger","wrap"],type:"string",title:"WebChartLabelBehavior"},WebChartVersionStatus:{enum:["newer","older","same","unrecognized"],type:"string",title:"WebChartVersionStatus"},WebChartAxisTypes:{description:"Represents the different types of axes that can be used in a chart.",enum:["category","date","value"],type:"string",title:"WebChartAxisTypes"},GaugeChartSubTypes:{description:"Represents the different types of gauge charts.",enum:["featureGauge","statisticGauge"],type:"string",title:"GaugeChartSubTypes"},SizePolicyScaleTypes:{description:"Represents the types of scales that can be applied to the size policy. Use by bubble charts (scatterplot).",enum:["linear","logarithmic"],type:"string",title:"SizePolicyScaleTypes"},WebChartRadarChartAxisLabelsOrientation:{description:"Labels orientation for radar chart axes.",enum:["circular","horizontal","radial"],type:"string",title:"WebChartRadarChartAxisLabelsOrientation"},WebChartOrderDataByTypes:{description:"The types of order assocated with chart data.",title:"WebChartOrderDataByTypes",enum:["arcgis-charts-category","arcgis-charts-mean","arcgis-charts-median","arcgis-charts-y-value"],type:"string"},WebChartDirectionalDataOrder:{description:"A data order option that the items are to be ordered either ascending or descending.\nIt can be used for any type of order, like by category, by mean, by median, etc.",title:"WebChartDirectionalDataOrder",type:"object",properties:{orderType:{$ref:"#/definitions/WebChartOrderDataByTypes",description:"The type of order, eg by category, by mean, by median, or by y value.",title:"orderType"},orderBy:{$ref:"#/definitions/WebChartSortOrderKinds",description:"The direction of the order, either ascending or descending.",title:"orderBy"},preferLabel:{description:"Indicates whether to order data by the label or the value.\n\nFor example, when a field has domain coded values or supbtypes, setting this property to `false` will order the data by the field value.\nOtherwise the domain description, subtypes description, or the alias of the field will be used to sort the data.",default:!0,type:"boolean",title:"preferLabel"}},required:["orderBy","orderType"]},WebChartPredefinedLabelsDataOrder:{description:"A data order option for the items to be ordered by `category` based on a predefined list of labels.",title:"WebChartPredefinedLabelsDataOrder",type:"object",properties:{orderType:{description:"The type of order, which is by category.",type:"string",const:"arcgis-charts-category",title:"orderType"},orderBy:{description:"The predefined list of labels to order the data by.\n\nWhen the value of the `preferLabel` property is set to `false`, the `orderBy` list should be a list of\ncoded domain values or field names; otherwise, it should be a list of domain descriptions, subtypes descriptions, or field aliases.",type:"array",items:{type:"string"},title:"orderBy"},preferLabel:{description:"Indicates whether to order data by the label or the value.\n\nFor example, when a field has domain coded values or supbtypes, setting this property to `false` will order the data by the field value.\nOtherwise the domain description, subtypes description, or the alias of the field will be used to sort the data.\n\nWhen the value is set to `true` or undefined, the `orderBy` property should contain a list of labels like domain descriptions, subtypes descriptions, or field aliases.\nWhen the value is set to `false`, the `orderBy` property should contain a list of coded domain values or field names, in order for the data to be sorted correctly.",default:!0,type:"boolean",title:"preferLabel"}},required:["orderBy","orderType"]},WebChartOrderSeriesBy:{description:"Order options for split-by series.",title:"WebChartOrderSeriesBy",type:"object",properties:{preferLabel:{description:"When the value is set to true, we want to order the split-by series based on the series' names (alias, custom label, or description).\n\nWhen the value is set to false, we want to order the split-by series based on the series' split-by values.",default:!0,type:"boolean",title:"preferLabel"},orderBy:{description:"The direction of the order.",default:"WebChartSortOrderKinds.Ascending",enum:["ASC","DESC"],type:"string",title:"orderBy"}}},IFeature:{description:'a spatial entity and its corresponding properties\n\n`IFeature` can also be imported from the following packages:\n\n```js\nimport { IFeature } from "@esri/arcgis-rest-feature-layer";\nimport { IFeature } from "@esri/arcgis-rest-routing";\n```',title:"IFeature",type:"object",properties:{geometry:{description:'a building block for discrete geometries\n\n`IGeometry` can also be imported from the following packages:\n\n```js\nimport { IGeometry } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/IGeometry",title:"geometry"},attributes:{$ref:"#/definitions/Record<string,any>",title:"attributes"},symbol:{$ref:"#/definitions/ISymbol",title:"symbol"}},required:["attributes"]},IFeatureSet:{description:'`IFeatureSet` can also be imported from the following packages:\n\n```js\nimport { IFeatureSet } from "@esri/arcgis-rest-feature-layer";\n```',title:"IFeatureSet",type:"object",properties:{objectIdFieldName:{type:"string",title:"objectIdFieldName"},globalIdFieldName:{type:"string",title:"globalIdFieldName"},displayFieldName:{type:"string",title:"displayFieldName"},geometryType:{description:'`GeometryType` can also be imported from the following packages:\n\n```js\nimport { GeometryType } from "@esri/arcgis-rest-feature-layer";\n```',enum:["esriGeometryEnvelope","esriGeometryMultipoint","esriGeometryPoint","esriGeometryPolygon","esriGeometryPolyline"],type:"string",title:"geometryType"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"},fields:{type:"array",items:{$ref:"#/definitions/IField"},title:"fields"},features:{type:"array",items:{$ref:"#/definitions/IFeature"},title:"features"},fieldAliases:{$ref:"#/definitions/Record<string,string>",title:"fieldAliases"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"}},required:["features"]},IHasZM:{description:'`IHasZM` can also be imported from the following packages:\n\n```js\nimport { IHasZM } from "@esri/arcgis-rest-feature-layer";\n```',type:"object",properties:{hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"}},title:"IHasZM"},ISpatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',title:"ISpatialReference",type:"object",properties:{wkid:{type:["null","number"],title:"wkid"},latestWkid:{type:"number",title:"latestWkid"},vcsWkid:{type:"number",title:"vcsWkid"},latestVcsWkid:{type:"number",title:"latestVcsWkid"},wkt:{type:["null","string"],title:"wkt"},latestWkt:{type:"string",title:"latestWkt"}}},IGeometry:{description:'a building block for discrete geometries\n\n`IGeometry` can also be imported from the following packages:\n\n```js\nimport { IGeometry } from "@esri/arcgis-rest-feature-layer";\n```',title:"IGeometry",type:"object",properties:{spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}}},IPoint:{description:'A simple point geometry, with spatial reference defined.\n\n`IPoint` can also be imported from the following packages:\n\n```js\nimport { IPoint } from "@esri/arcgis-rest-routing";\nimport { IPoint } from "@esri/arcgis-rest-geocoding";\n```',title:"IPoint",type:"object",properties:{x:{type:"number",title:"x"},y:{type:"number",title:"y"},z:{type:"number",title:"z"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["x","y"]},ILocation:{description:'`ILocation` can also be imported from the following packages:\n\n```js\nimport { ILocation } from "@esri/arcgis-rest-routing";\nimport { ILocation } from "@esri/arcgis-rest-geocoding";\n```',type:"object",properties:{latitude:{type:"number",title:"latitude"},longitude:{type:"number",title:"longitude"},lat:{type:"number",title:"lat"},long:{type:"number",title:"long"},z:{type:"number",title:"z"}},title:"ILocation"},IPolyline:{title:"IPolyline",type:"object",properties:{paths:{type:"array",items:{type:"array",items:{$ref:"#/definitions/Position"}},title:"paths"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["paths"]},IPolylineWithCurves:{type:"object",properties:{curvePaths:{type:"array",items:{type:"array",items:{anyOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},{$ref:"#/definitions/IArc"},{$ref:"#/definitions/IBezierCurve"},{$ref:"#/definitions/ICircularArc"},{$ref:"#/definitions/IOldCircularArc"}]}},title:"curvePaths"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["curvePaths"],title:"IPolylineWithCurves"},IPolygon:{title:"IPolygon",type:"object",properties:{rings:{type:"array",items:{type:"array",items:{$ref:"#/definitions/Position"}},title:"rings"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["rings"]},IPolygonWithCurves:{title:"IPolygonWithCurves",type:"object",properties:{curveRings:{type:"array",items:{type:"array",items:{anyOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},{$ref:"#/definitions/IArc"},{$ref:"#/definitions/IBezierCurve"},{$ref:"#/definitions/ICircularArc"},{$ref:"#/definitions/IOldCircularArc"}]}},title:"curveRings"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["curveRings"]},Position2D:{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"Position2D"},IArc:{description:"an arc can be represented as a JSON curve object",title:"IArc",type:"object",properties:{a:{type:"array",items:[{$ref:"#/definitions/Position"},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"number"},{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:7,maxItems:7,title:"a"}},required:["a"]},IBezierCurve:{description:"a bezier curve can be represented as a JSON curve object",title:"IBezierCurve",type:"object",properties:{b:{type:"array",items:[{$ref:"#/definitions/Position"},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:3,maxItems:3,title:"b"}},required:["b"]},ICircularArc:{description:"a circular arc can be represented as a JSON curve object",title:"ICircularArc",type:"object",properties:{c:{type:"array",items:[{$ref:"#/definitions/Position"},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2,title:"c"}},required:["c"]},ElipticArc:{$ref:"#/definitions/IArc",description:"an arc can be represented as a JSON curve object",title:"ElipticArc"},IEnvelope:{description:"An envelope is a rectangle defined by a range of values for each coordinate and attribute.",title:"IEnvelope",type:"object",properties:{xmin:{type:"number",title:"xmin"},xmax:{type:"number",title:"xmax"},ymin:{type:"number",title:"ymin"},ymax:{type:"number",title:"ymax"},zmin:{type:"number",title:"zmin"},zmax:{type:"number",title:"zmax"},mmin:{type:"number",title:"mmin"},mmax:{type:"number",title:"mmax"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["xmax","xmin","ymax","ymin"]},GeometryType:{description:'`GeometryType` can also be imported from the following packages:\n\n```js\nimport { GeometryType } from "@esri/arcgis-rest-feature-layer";\n```',enum:["esriGeometryEnvelope","esriGeometryMultipoint","esriGeometryPoint","esriGeometryPolygon","esriGeometryPolyline"],type:"string",title:"GeometryType"},SpatialRelationship:{description:'The spatial relationship used to compare input geometries\n\n`SpatialRelationship` can also be imported from the following packages:\n\n```js\nimport { SpatialRelationship } from "@esri/arcgis-rest-feature-layer";\n```',enum:["esriSpatialRelContains","esriSpatialRelCrosses","esriSpatialRelEnvelopeIntersects","esriSpatialRelIndexIntersects","esriSpatialRelIntersects","esriSpatialRelOverlaps","esriSpatialRelTouches","esriSpatialRelWithin"],type:"string",title:"SpatialRelationship"},IExtent:{description:'Extents are used to define rectangles and bounding boxes.\n\n`IExtent` can also be imported from the following packages:\n\n```js\nimport { IExtent } from "@esri/arcgis-rest-geocoding";\nimport { IExtent } from "@esri/arcgis-rest-service-admin";\nimport { IExtent } from "@esri/arcgis-rest-feature-layer";\n```',title:"IExtent",type:"object",properties:{xmin:{type:"number",title:"xmin"},ymin:{type:"number",title:"ymin"},zmin:{type:"number",title:"zmin"},xmax:{type:"number",title:"xmax"},ymax:{type:"number",title:"ymax"},zmax:{type:"number",title:"zmax"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["xmax","xmin","ymax","ymin"]},JsonCurve:{anyOf:[{$ref:"#/definitions/IArc"},{$ref:"#/definitions/IBezierCurve"},{$ref:"#/definitions/ICircularArc"},{$ref:"#/definitions/IOldCircularArc"}],title:"JsonCurve"},IOldCircularArc:{title:"IOldCircularArc",type:"object",properties:{a:{type:"array",items:[{$ref:"#/definitions/Position"},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"a"}},required:["a"]},IMultipoint:{description:"A multipoint contains an array of points.",type:"object",properties:{points:{type:"array",items:{$ref:"#/definitions/Position"},title:"points"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"}},required:["points"],title:"IMultipoint"},Units:{description:'`Units` can also be imported from the following packages:\n\n```js\nimport { Units } from "@esri/arcgis-rest-feature-layer";\n```',enum:["esriSRUnit_Foot","esriSRUnit_Kilometer","esriSRUnit_Meter","esriSRUnit_NauticalMile","esriSRUnit_StatuteMile","esriSRUnit_USNauticalMile"],type:"string",title:"Units"},GroupMembership:{description:'`GroupMembership` can also be imported from the following packages:\n\n```js\nimport { GroupMembership } from "@esri/arcgis-rest-portal";\n```',enum:["admin","member","none","owner"],type:"string",title:"GroupMembership"},IGroupAdd:{description:'A [Group](https://developers.arcgis.com/rest/users-groups-and-items/common-parameters.htm) that has not been created yet.\n\n`IGroupAdd` can also be imported from the following packages:\n\n```js\nimport { IGroupAdd } from "@esri/arcgis-rest-portal";\n```',type:"object",additionalProperties:{},properties:{title:{type:"string",title:"title"},access:{enum:["org","private","public"],type:"string",title:"access"},owner:{type:"string",title:"owner"},tags:{type:"array",items:{type:"string"},title:"tags"},description:{type:"string",title:"description"},phone:{type:"string",title:"phone"},sortField:{enum:["avgrating","created","modified","numviews","owner","title"],type:"string",title:"sortField"},sortOrder:{enum:["asc","desc"],type:"string",title:"sortOrder"},isViewOnly:{type:"boolean",title:"isViewOnly"},isInvitationOnly:{type:"boolean",title:"isInvitationOnly"},thumbnail:{type:"string",title:"thumbnail"},autoJoin:{type:"boolean",title:"autoJoin"},snippet:{type:"string",title:"snippet"}},required:["access","title"],title:"IGroupAdd"},IGroup:{description:'Existing Portal [Group](https://developers.arcgis.com/rest/users-groups-and-items/group.htm).\n\n`IGroup` can also be imported from the following packages:\n\n```js\nimport { IGroup } from "@esri/arcgis-rest-portal";\n```',title:"IGroup",type:"object",properties:{id:{type:"string",title:"id"},owner:{type:"string",title:"owner"},tags:{type:"array",items:{type:"string"},title:"tags"},created:{type:"number",title:"created"},modified:{type:"number",title:"modified"},protected:{type:"boolean",title:"protected"},isInvitationOnly:{type:"boolean",title:"isInvitationOnly"},isViewOnly:{type:"boolean",title:"isViewOnly"},isOpenData:{type:"boolean",title:"isOpenData"},isFav:{type:"boolean",title:"isFav"},autoJoin:{type:"boolean",title:"autoJoin"},userMembership:{type:"object",properties:{username:{type:"string",title:"username"},memberType:{description:'`GroupMembership` can also be imported from the following packages:\n\n```js\nimport { GroupMembership } from "@esri/arcgis-rest-portal";\n```',enum:["admin","member","none","owner"],type:"string",title:"memberType"},applications:{type:"number",title:"applications"}},title:"userMembership"},hasCategorySchema:{type:"boolean",title:"hasCategorySchema"},title:{type:"string",title:"title"},access:{enum:["org","private","public"],type:"string",title:"access"},description:{type:"string",title:"description"},phone:{type:"string",title:"phone"},sortField:{enum:["avgrating","created","modified","numviews","owner","title"],type:"string",title:"sortField"},sortOrder:{enum:["asc","desc"],type:"string",title:"sortOrder"},thumbnail:{type:"string",title:"thumbnail"},snippet:{type:"string",title:"snippet"}},required:["access","autoJoin","created","id","isFav","isInvitationOnly","isViewOnly","modified","owner","protected","tags","title"]},IItemAdd:{description:'A Portal [Item](https://developers.arcgis.com/rest/users-groups-and-items/common-parameters.htm) that has not been created yet.\n\n`IItemAdd` can also be imported from the following packages:\n\n```js\nimport { IItemAdd } from "@esri/arcgis-rest-portal";\n```',type:"object",additionalProperties:{},properties:{title:{type:"string",title:"title"},type:{type:"string",title:"type"},owner:{type:"string",title:"owner"},typeKeywords:{type:"array",items:{type:"string"},title:"typeKeywords"},description:{type:"string",title:"description"},snippet:{type:"string",title:"snippet"},documentation:{type:"string",title:"documentation"},extent:{type:"array",items:{type:"array",items:{type:"number"}},title:"extent"},categories:{type:"array",items:{type:"string"},title:"categories"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"},culture:{type:"string",title:"culture"},properties:{title:"properties"},url:{type:"string",title:"url"},tags:{type:"array",items:{type:"string"},title:"tags"}},required:["title","type"],title:"IItemAdd"},IItemUpdate:{description:'A Portal [Item](https://developers.arcgis.com/rest/users-groups-and-items/common-parameters.htm) to be updated.\n\n`IItemUpdate` can also be imported from the following packages:\n\n```js\nimport { IItemUpdate } from "@esri/arcgis-rest-portal";\n```',type:"object",additionalProperties:{},properties:{id:{type:"string",title:"id"}},required:["id"],title:"IItemUpdate"},IItem:{description:'Existing Portal [Item](https://developers.arcgis.com/rest/users-groups-and-items/item.htm).\n\n`IItem` can also be imported from the following packages:\n\n```js\nimport { IItem } from "@esri/arcgis-rest-portal";\n```',type:"object",properties:{id:{type:"string",title:"id"},owner:{type:"string",title:"owner"},tags:{type:"array",items:{type:"string"},title:"tags"},created:{type:"number",title:"created"},modified:{type:"number",title:"modified"},numViews:{type:"number",title:"numViews"},size:{type:"number",title:"size"},protected:{type:"boolean",title:"protected"},title:{type:"string",title:"title"},type:{type:"string",title:"type"},typeKeywords:{type:"array",items:{type:"string"},title:"typeKeywords"},description:{type:"string",title:"description"},snippet:{type:"string",title:"snippet"},documentation:{type:"string",title:"documentation"},extent:{type:"array",items:{type:"array",items:{type:"number"}},title:"extent"},categories:{type:"array",items:{type:"string"},title:"categories"},spatialReference:{description:'Spatial reference systems define mathematical transformations and coordinate systems for displaying spatial information in 2D and 3D.\n\n`ISpatialReference` can also be imported from the following packages:\n\n```js\nimport { ISpatialReference } from "@esri/arcgis-rest-geocoding";\nimport { ISpatialReference } from "@esri/arcgis-rest-routing";\nimport { ISpatialReference } from "@esri/arcgis-rest-service-admin";\nimport { ISpatialReference } from "@esri/arcgis-rest-feature-layer";\n```',$ref:"#/definitions/ISpatialReference",title:"spatialReference"},culture:{type:"string",title:"culture"},properties:{title:"properties"},url:{type:"string",title:"url"}},required:["created","id","modified","numViews","owner","size","tags","title","type"],title:"IItem"},IFolder:{description:'Used for organizing content. See [Create Folder](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more details.\n\n`IFolder` can also be imported from the following packages:\n\n```js\nimport { IFolder } from "@esri/arcgis-rest-portal";\n```',type:"object",properties:{username:{type:"string",title:"username"},id:{type:"string",title:"id"},title:{type:"string",title:"title"},created:{type:"number",title:"created"}},required:["id","title","username"],title:"IFolder"},IFeatureServiceDefinition:{description:'`IFeatureServiceDefinition` can also be imported from the following packages:\n\n```js\nimport { IFeatureServiceDefinition } from "@esri/arcgis-rest-service-admin";\nimport { IFeatureServiceDefinition } from "@esri/arcgis-rest-feature-layer";\n```',type:"object",properties:{currentVersion:{type:"number",title:"currentVersion"},serviceDescription:{type:"string",title:"serviceDescription"},hasVersionedData:{type:"boolean",title:"hasVersionedData"},supportsDisconnectedEditing:{type:"boolean",title:"supportsDisconnectedEditing"},supportsReturnDeleteResults:{type:"boolean",title:"supportsReturnDeleteResults"},hasStaticData:{description:"Boolean value indicating whether data changes. True if it does not.",type:"boolean",title:"hasStaticData"},maxRecordCount:{description:"Numeric value indicating tbe maximum number of records that will be returned at once for a query.",type:"number",title:"maxRecordCount"},supportedQueryFormats:{description:"String value indicating the output formats that are supported in a query.",type:"string",title:"supportedQueryFormats"},supportsRelationshipsResource:{type:"boolean",title:"supportsRelationshipsResource"},capabilities:{description:"A comma separated list of supported capabilities, e.g. Query,Editing.",type:"string",title:"capabilities"},description:{description:"String value of the layer as defined in the map service.",type:"string",title:"description"},copyrightText:{description:"String value for the copyright text information for the layer.",type:"string",title:"copyrightText"},advancedEditingCapabilities:{$ref:"#/definitions/Record<string,boolean>",title:"advancedEditingCapabilities"},spatialReference:{$ref:"#/definitions/ISpatialReference",description:"An object containing the WKID or WKT identifying the spatial reference of the layer's geometry.",title:"spatialReference"},initialExtent:{$ref:"#/definitions/IExtent",title:"initialExtent"},fullExtent:{$ref:"#/definitions/IExtent",title:"fullExtent"},allowGeometryUpdates:{description:"Boolean value indicating whether the geometry of the features in the layer can be edited.",type:"boolean",title:"allowGeometryUpdates"},units:{type:"string",title:"units"},syncEnabled:{type:"boolean",title:"syncEnabled"},returnServiceEditsHaveSR:{type:"boolean",title:"returnServiceEditsHaveSR"},validationSystemLayers:{type:"object",properties:{validationPointErrorlayerId:{type:"number",title:"validationPointErrorlayerId"},validationLineErrorlayerId:{type:"number",title:"validationLineErrorlayerId"},validationPolygonErrorlayerId:{type:"number",title:"validationPolygonErrorlayerId"},validationObjectErrortableId:{type:"number",title:"validationObjectErrortableId"}},required:["validationLineErrorlayerId","validationObjectErrortableId","validationPointErrorlayerId","validationPolygonErrorlayerId"],title:"validationSystemLayers"},extractChangesCapabilities:{type:"object",properties:{supportsReturnIdsOnly:{type:"boolean",title:"supportsReturnIdsOnly"},supportsReturnExtentOnly:{type:"boolean",title:"supportsReturnExtentOnly"},supportsReturnAttachments:{type:"boolean",title:"supportsReturnAttachments"},supportsLayerQueries:{type:"boolean",title:"supportsLayerQueries"},supportsSpatialFilter:{type:"boolean",title:"supportsSpatialFilter"},supportsReturnFeature:{type:"boolean",title:"supportsReturnFeature"}},required:["supportsLayerQueries","supportsReturnAttachments","supportsReturnExtentOnly","supportsReturnFeature","supportsReturnIdsOnly","supportsSpatialFilter"],title:"extractChangesCapabilities"},syncCapabilities:{type:"object",properties:{supportsASync:{type:"boolean",title:"supportsASync"},supportsRegisteringExistingData:{type:"boolean",title:"supportsRegisteringExistingData"},supportsSyncDirectionControl:{type:"boolean",title:"supportsSyncDirectionControl"},supportsPerLayerSync:{type:"boolean",title:"supportsPerLayerSync"},supportsPerReplicaSync:{type:"boolean",title:"supportsPerReplicaSync"},supportsRollbackOnFailure:{type:"boolean",title:"supportsRollbackOnFailure"},supportedSyncDataOptions:{type:"number",title:"supportedSyncDataOptions"}},required:["supportedSyncDataOptions","supportsASync","supportsPerLayerSync","supportsPerReplicaSync","supportsRegisteringExistingData","supportsRollbackOnFailure","supportsSyncDirectionControl"],title:"syncCapabilities"},editorTrackingInfo:{type:"object",properties:{enableEditorTracking:{type:"boolean",title:"enableEditorTracking"},enableOwnershipAccessControl:{type:"boolean",title:"enableOwnershipAccessControl"},allowOthersToUpdate:{type:"boolean",title:"allowOthersToUpdate"},allowOthersToDelete:{type:"boolean",title:"allowOthersToDelete"}},required:["allowOthersToDelete","allowOthersToUpdate","enableEditorTracking","enableOwnershipAccessControl"],title:"editorTrackingInfo"},documentInfo:{$ref:"#/definitions/Record<string,string>",title:"documentInfo"},layers:{type:"array",items:{$ref:"#/definitions/ILayerDefinition"},title:"layers"},tables:{type:"array",items:{$ref:"#/definitions/ITable"},title:"tables"},relationships:{type:"array",items:[{type:"object",properties:{id:{type:"number",title:"id"},name:{type:"string",title:"name"},backwardPathLabel:{type:"string",title:"backwardPathLabel"},originLayerId:{type:"number",title:"originLayerId"},originPrimaryKey:{type:"string",title:"originPrimaryKey"},forwardPathLabel:{type:"string",title:"forwardPathLabel"},destinationLayerId:{type:"number",title:"destinationLayerId"},originForeignKey:{type:"string",title:"originForeignKey"},relationshipTableId:{type:"number",title:"relationshipTableId"},destinationPrimaryKey:{type:"string",title:"destinationPrimaryKey"},destinationForeignKey:{type:"string",title:"destinationForeignKey"},rules:{type:"array",items:[{type:"object",properties:{ruleID:{type:"number",title:"ruleID"},originSubtypeCode:{type:"number",title:"originSubtypeCode"},originMinimumCardinality:{type:"number",title:"originMinimumCardinality"},originMaximumCardinality:{type:"number",title:"originMaximumCardinality"},destinationSubtypeCode:{type:"number",title:"destinationSubtypeCode"},destinationMinimumCardinality:{type:"number",title:"destinationMinimumCardinality"},destinationMaximumCardinality:{type:"number",title:"destinationMaximumCardinality"}},required:["destinationMaximumCardinality","destinationMinimumCardinality","destinationSubtypeCode","originMaximumCardinality","originMinimumCardinality","originSubtypeCode","ruleID"]}],minItems:1,maxItems:1,title:"rules"},cardinality:{enum:["esriRelCardinalityManyToMany","esriRelCardinalityOneToMany","esriRelCardinalityOneToOne"],type:"string",title:"cardinality"},attributed:{type:"boolean",title:"attributed"},composite:{type:"boolean",title:"composite"}},required:["attributed","backwardPathLabel","cardinality","composite","destinationForeignKey","destinationLayerId","destinationPrimaryKey","forwardPathLabel","id","name","originForeignKey","originLayerId","originPrimaryKey","relationshipTableId","rules"]}],minItems:1,maxItems:1,title:"relationships"},enableZDefaults:{type:"boolean",title:"enableZDefaults"},isLocationTrackingService:{type:"boolean",title:"isLocationTrackingService"},isLocationTrackingView:{type:"boolean",title:"isLocationTrackingView"},zDefault:{type:"number",title:"zDefault"}},required:["advancedEditingCapabilities","allowGeometryUpdates","capabilities","copyrightText","description","editorTrackingInfo","extractChangesCapabilities","fullExtent","hasVersionedData","initialExtent","isLocationTrackingService","isLocationTrackingView","layers","maxRecordCount","relationships","serviceDescription","spatialReference","supportedQueryFormats","supportsDisconnectedEditing","supportsRelationshipsResource","supportsReturnDeleteResults","syncCapabilities","syncEnabled","tables","units","validationSystemLayers"],title:"IFeatureServiceDefinition"},IServiceInfo:{description:"Very generic structure representing the return value from the\n/arcgis/rest/admin/services/<service-name>/FeatureServer?f=json response",type:"object",properties:{adminServiceInfo:{type:"object",properties:{name:{type:"string",title:"name"},type:{type:"string",title:"type"},status:{type:"string",title:"status"},database:{type:"object",properties:{datasource:{type:"object",properties:{name:{type:"string",title:"name"}},required:["name"],title:"datasource"}},required:["datasource"],title:"database"}},required:["database","name","status","type"],title:"adminServiceInfo"},layers:{type:"array",items:{$ref:"#/definitions/Record<string,unknown>"},title:"layers"}},required:["adminServiceInfo","layers"],title:"IServiceInfo"},IViewServiceSource:{description:"Individual View Source entry",title:"IViewServiceSource",type:"object",properties:{name:{type:"string",title:"name"},type:{type:"string",title:"type"},url:{type:"string",title:"url"},serviceItemId:{type:"string",title:"serviceItemId"}},required:["name","serviceItemId","type","url"]},IViewServiceSources:{description:"Response from the /sources end-point of a view service",type:"object",properties:{currentVersion:{type:"number",title:"currentVersion"},services:{type:"array",items:{$ref:"#/definitions/IViewServiceSource"},title:"services"}},required:["currentVersion","services"],title:"IViewServiceSources"},IServiceNameAvailable:{description:"Response from the portals/Self/isServiceNameAvailable request",type:"object",properties:{available:{type:"boolean",title:"available"}},required:["available"],title:"IServiceNameAvailable"},IStatisticDefinition:{title:"IStatisticDefinition",type:"object",properties:{statisticType:{description:"Statistical operation to perform (count, sum, min, max, avg, stddev, var, percentile_cont, percentile_disc, EnvelopeAggregate, CentroidAggregate, ConvexHullAggregate).",enum:["avg","centroid-aggregate","convex-hull-aggregate","count","envelope-aggregate","max","min","percentile_cont","percentile_disc","stddev","sum","var"],type:"string",title:"statisticType"},statisticParameters:{description:"Parameters to be used along with statisticType. Currently, only applicable for percentile_cont (continuous percentile) and percentile_disc (discrete percentile).",type:"object",properties:{value:{type:"number",title:"value"},orderBy:{enum:["asc","desc"],type:"string",title:"orderBy"}},required:["value"],title:"statisticParameters"},onStatisticField:{description:"Field on which to perform the statistical operation.",type:"string",title:"onStatisticField"},outStatisticFieldName:{description:"Field name for the returned statistic field. If outStatisticFieldName is empty or missing, the server will assign one. A valid field name can only contain alphanumeric characters and an underscore. If the outStatisticFieldName is a reserved keyword of the underlying DBMS, the operation can fail. Try specifying an alternative outStatisticFieldName.",type:"string",title:"outStatisticFieldName"}},required:["onStatisticField","statisticType"]},IFont:{title:"IFont",type:"object",properties:{family:{type:"string",title:"family"},size:{type:"number",title:"size"},style:{enum:["italic","normal","oblique"],type:"string",title:"style"},weight:{enum:["bold","bolder","lighter","normal"],type:"string",title:"weight"},decoration:{enum:["line-through","none","underline"],type:"string",title:"decoration"}}},IPictureSourced:{type:"object",properties:{url:{type:"string",title:"url"},imageData:{type:"string",title:"imageData"},contentType:{type:"string",title:"contentType"},width:{type:"number",title:"width"},height:{type:"number",title:"height"},angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"}},title:"IPictureSourced"},ISymbol:{title:"ISymbol",type:"object",properties:{type:{$ref:"#/definitions/SymbolType",title:"type"},style:{type:"string",title:"style"}},required:["type"]},IMarkerSymbol:{type:"object",properties:{angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"},type:{$ref:"#/definitions/SymbolType",title:"type"},style:{type:"string",title:"style"}},required:["type"],title:"IMarkerSymbol"},IPictureFillSymbol:{type:"object",properties:{type:{type:"string",const:"esriPFS",title:"type"},outline:{$ref:"#/definitions/ISimpleLineSymbol",title:"outline"},xscale:{type:"number",title:"xscale"},yscale:{type:"number",title:"yscale"},style:{type:"string",title:"style"},url:{type:"string",title:"url"},imageData:{type:"string",title:"imageData"},contentType:{type:"string",title:"contentType"},width:{type:"number",title:"width"},height:{type:"number",title:"height"},angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"}},required:["type"],title:"IPictureFillSymbol"},IPictureMarkerSymbol:{title:"IPictureMarkerSymbol",type:"object",properties:{type:{type:"string",const:"esriPMS",title:"type"},angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"},style:{type:"string",title:"style"},url:{type:"string",title:"url"},imageData:{type:"string",title:"imageData"},contentType:{type:"string",title:"contentType"},width:{type:"number",title:"width"},height:{type:"number",title:"height"}},required:["type"]},SimpleMarkerSymbolStyle:{enum:["esriSMSCircle","esriSMSCross","esriSMSDiamond","esriSMSSquare","esriSMSTriangle","esriSMSX"],type:"string",title:"SimpleMarkerSymbolStyle"},SimpleLineSymbolStyle:{enum:["esriSLSDash","esriSLSDashDot","esriSLSDashDotDot","esriSLSDot","esriSLSNull","esriSLSSolid"],type:"string",title:"SimpleLineSymbolStyle"},SimpleFillSymbolStyle:{enum:["esriSFSBackwardDiagonal","esriSFSCross","esriSFSDiagonalCross","esriSFSForwardDiagonal","esriSFSHorizontal","esriSFSNull","esriSFSSolid","esriSFSVertical"],type:"string",title:"SimpleFillSymbolStyle"},ISimpleFillSymbol:{title:"ISimpleFillSymbol",type:"object",properties:{type:{type:"string",const:"esriSFS",title:"type"},style:{enum:["esriSFSBackwardDiagonal","esriSFSCross","esriSFSDiagonalCross","esriSFSForwardDiagonal","esriSFSHorizontal","esriSFSNull","esriSFSSolid","esriSFSVertical"],type:"string",title:"style"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},outline:{$ref:"#/definitions/ISimpleLineSymbol",title:"outline"}},required:["type"]},ISimpleLineSymbol:{title:"ISimpleLineSymbol",type:"object",properties:{type:{type:"string",const:"esriSLS",title:"type"},style:{enum:["esriSLSDash","esriSLSDashDot","esriSLSDashDotDot","esriSLSDot","esriSLSNull","esriSLSSolid"],type:"string",title:"style"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},width:{type:"number",title:"width"}},required:["type"]},ISimpleMarkerSymbol:{title:"ISimpleMarkerSymbol",type:"object",properties:{type:{type:"string",const:"esriSMS",title:"type"},style:{enum:["esriSMSCircle","esriSMSCross","esriSMSDiamond","esriSMSSquare","esriSMSTriangle","esriSMSX"],type:"string",title:"style"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},size:{type:"number",title:"size"},outline:{$ref:"#/definitions/ISimpleLineSymbol",title:"outline"},angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"}},required:["type"]},ITextSymbol:{type:"object",properties:{type:{type:"string",const:"esriTS",title:"type"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},backgroundColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"backgroundColor"},borderLineSize:{type:"number",title:"borderLineSize"},borderLineColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"borderLineColor"},haloSize:{type:"number",title:"haloSize"},haloColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"haloColor"},verticalAlignment:{enum:["baseline","bottom","middle","top"],type:"string",title:"verticalAlignment"},horizontalAlignment:{enum:["center","justify","left","right"],type:"string",title:"horizontalAlignment"},rightToLeft:{type:"boolean",title:"rightToLeft"},kerning:{type:"boolean",title:"kerning"},font:{$ref:"#/definitions/IFont",title:"font"},text:{type:"string",title:"text"},angle:{type:"number",title:"angle"},xoffset:{type:"number",title:"xoffset"},yoffset:{type:"number",title:"yoffset"},style:{type:"string",title:"style"}},required:["type"],title:"ITextSymbol"},IUser:{description:'An ArcGIS Online or Enterprise user\n\n`IUser` can also be imported from the following packages:\n\n```js\nimport { IUser } from "@esri/arcgis-rest-auth";\nimport { IUser } from "@esri/arcgis-rest-portal";\n```',type:"object",properties:{username:{type:"string",title:"username"},fullName:{type:"string",title:"fullName"},availableCredits:{type:"number",title:"availableCredits"},assignedCredits:{type:"number",title:"assignedCredits"},firstName:{type:"string",title:"firstName"},lastName:{type:"string",title:"lastName"},preferredView:{title:"preferredView"},description:{type:"string",title:"description"},email:{type:"string",title:"email"},idpUsername:{type:"string",title:"idpUsername"},favGroupId:{type:"string",title:"favGroupId"},lastLogin:{type:"number",title:"lastLogin"},mfaEnabled:{type:"boolean",title:"mfaEnabled"},access:{type:"string",title:"access"},storageUsage:{type:"number",title:"storageUsage"},storageQuota:{type:"number",title:"storageQuota"},orgId:{type:"string",title:"orgId"},cOrgId:{type:"string",title:"cOrgId"},role:{enum:["org_admin","org_publisher","org_user"],type:"string",title:"role"},privileges:{type:"array",items:{type:"string"},title:"privileges"},roleId:{type:"string",title:"roleId"},level:{type:"string",title:"level"},disabled:{type:"boolean",title:"disabled"},units:{type:"string",title:"units"},tags:{type:"array",items:{type:"string"},title:"tags"},culture:{type:"string",title:"culture"},region:{type:"string",title:"region"},thumbnail:{type:"string",title:"thumbnail"},created:{type:"number",title:"created"},modified:{type:"number",title:"modified"},groups:{type:"array",items:{$ref:"#/definitions/IGroup"},title:"groups"},provider:{enum:["arcgis","enterprise","facebook","google"],type:"string",title:"provider"}},title:"IUser"},FieldType:{description:"Field type.",title:"FieldType",enum:["esriFieldTypeBlob","esriFieldTypeDate","esriFieldTypeDouble","esriFieldTypeGUID","esriFieldTypeGeometry","esriFieldTypeGlobalID","esriFieldTypeInteger","esriFieldTypeOID","esriFieldTypeRaster","esriFieldTypeSingle","esriFieldTypeSmallInteger","esriFieldTypeString","esriFieldTypeXML"],type:"string"},DomainType:{description:"Domain types",title:"DomainType",enum:["codedValue","inherited","range"],type:"string"},ICodedValue:{description:"CodedValue type",type:"object",properties:{name:{description:"User-friendly name for what the code means.",type:"string",title:"name"},code:{description:"The value stored in the feature attribute.",type:["string","number"],title:"code"}},required:["code","name"],title:"ICodedValue"},IDomain:{description:"Information for a field with a domain",type:"object",properties:{type:{$ref:"#/definitions/DomainType",description:"A string defining the domain type.",title:"type"},name:{description:"A string defining the field name.",type:"string",title:"name"},range:{description:"A 2 element array defining the range of possible values.",type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"range"},codedValues:{description:"An array of CodedValues for domains of type codedValue.",type:"array",items:{description:"CodedValue type",type:"object",properties:{name:{description:"User-friendly name for what the code means.",type:"string",title:"name"},code:{description:"The value stored in the feature attribute.",type:["string","number"],title:"code"}},required:["code","name"]},title:"codedValues"},description:{description:"Description of the domain",type:"string",title:"description"},mergePolicy:{description:"Merge policy",type:"string",title:"mergePolicy"},splitPolicy:{description:"Split Policy",type:"string",title:"splitPolicy"}},required:["type"],title:"IDomain"},IField:{description:'Contains information about an attribute field.\n\n`IField` can also be imported from the following packages:\n\n```js\nimport { IField } from "@esri/arcgis-rest-feature-layer";\n```',title:"IField",type:"object",properties:{name:{description:"A string defining the field name.",type:"string",title:"name"},type:{$ref:"#/definitions/FieldType",description:"A string defining the field type.",title:"type"},alias:{description:"A string defining the field alias.",type:"string",title:"alias"},domain:{description:"The domain objects if applicable.",type:"object",properties:{type:{$ref:"#/definitions/DomainType",description:"A string defining the domain type.",title:"type"},name:{description:"A string defining the field name.",type:"string",title:"name"},range:{description:"A 2 element array defining the range of possible values.",type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"range"},codedValues:{description:"An array of CodedValues for domains of type codedValue.",type:"array",items:{description:"CodedValue type",type:"object",properties:{name:{description:"User-friendly name for what the code means.",type:"string",title:"name"},code:{description:"The value stored in the feature attribute.",type:["string","number"],title:"code"}},required:["code","name"]},title:"codedValues"},description:{description:"Description of the domain",type:"string",title:"description"},mergePolicy:{description:"Merge policy",type:"string",title:"mergePolicy"},splitPolicy:{description:"Split Policy",type:"string",title:"splitPolicy"}},required:["type"],title:"domain"},editable:{description:"A Boolean defining whether this field is editable.",type:"boolean",title:"editable"},exactMatch:{description:"A Boolean defining whether or not the field is an exact match.",type:"boolean",title:"exactMatch"},length:{description:"A number defining how many characters are allowed in a string. field.",type:"number",title:"length"},nullable:{description:"A Boolean defining whether this field can have a null value.",type:"boolean",title:"nullable"},defaultValue:{description:"The value written in for new records by default.",title:"defaultValue"}},required:["name","type"]},IPagingParams:{description:'Params for paging operations\n\n`IPagingParams` can also be imported from the following packages:\n\n```js\nimport { IPagingParams } from "@esri/arcgis-rest-portal";\n```',type:"object",properties:{start:{type:"number",title:"start"},num:{type:"number",title:"num"}},title:"IPagingParams"},IPagedResponse:{description:'Paging properties for paged responses.\n\n`IPagedResponse` can also be imported from the following packages:\n\n```js\nimport { IPagedResponse } from "@esri/arcgis-rest-portal";\n```',type:"object",properties:{total:{description:"total number of object across all pages",type:"number",title:"total"},nextStart:{description:"next entry index or -1 for the last page",type:"number",title:"nextStart"},start:{type:"number",title:"start"},num:{type:"number",title:"num"}},required:["nextStart","total"],title:"IPagedResponse"},IFieldFormat:{description:"The format object can be used with numerical or date fields to provide more detail about how values should be displayed in popup windows.",title:"IFieldFormat",type:"object",properties:{dateFormat:{description:"A string used with date fields to specify how the date should appear in popup windows.",enum:["dayShortMonthYear","longDate","longMonthDayYear","longMonthYear","shortDate","shortDateLE","shortDateLELongTime","shortDateLELongTime24","shortDateLEShortTime","shortDateLEShortTime24","shortDateLongTime","shortDateLongTime24","shortDateShortTime","shortDateShortTime24","shortMonthYear","year"],type:"string",title:"dateFormat"},digitSeparator:{description:"A Boolean used with numerical fields. A value of true allows the number to have a digit (or thousands) separator when the value appears in popup windows.\nDepending on the locale, this separator is a decimal point or a comma. A value of false means that no separator will be used.",type:"boolean",title:"digitSeparator"},places:{description:"An integer used with numerical fields to specify the number of supported decimal places that should appear in popup windows. Any places beyond this value are rounded.",type:"number",title:"places"}}},IFieldInfo:{description:"Defines how a field in the dataset participates (or does not participate) in a popup window.",title:"IFieldInfo",type:"object",properties:{fieldName:{description:"A string containing the field name as defined by the service. Anywhere that a fieldname is referenced as {field-name} in popupInfo, an Arcade expression can also be referenced as{expression/}`.",title:"fieldName"},format:{description:"A format object used with numerical or date fields to provide more detail about how the value should be displayed in a web map popup window.",$ref:"#/definitions/IFieldFormat",title:"format"},isEditable:{description:"A Boolean determining whether users can edit this field. Not applicable to Arcade expressions.",type:"boolean",title:"isEditable"},label:{description:"A string containing the field alias. This can be overridden by the web map author. Not applicable to Arcade expressions as title is used instead.",type:"string",title:"label"},stringFieldOption:{description:"A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions.",enum:["richtext","textarea","textbox"],type:"string",title:"stringFieldOption"},tooltip:{description:"A string providing an editing hint for editors of the field. Not applicable to Arcade expressions.",type:"string",title:"tooltip"},visible:{description:"A Boolean determining whether the field is visible in the popup window.",type:"boolean",title:"visible"}}},IPopupExpressionInfo:{description:"Arcade expression added to the pop-up.",title:"IPopupExpressionInfo",type:"object",properties:{expression:{description:"The Arcade expression.",type:"string",title:"expression"},name:{description:"Unique identifier for the expression.",type:"string",title:"name"},returnType:{description:"Return type of the Arcade expression, can be number or string. Defaults to string value. Number values are assumed to be double. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the returnType allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as charts.",enum:["number","string"],type:"string",title:"returnType"},title:{description:"Title of the expression.",type:"string",title:"title"}}},IMediaInfoValue:{description:"The value object contains information for popup windows about how images should be retrieved or charts constructed.",title:"IMediaInfoValue",type:"object",properties:{fields:{description:"Used with charts. An array of strings, with each string containing the name of a field to display in the chart.",type:"array",items:{type:"string"},title:"fields"},linkURL:{description:"Used with images. A string containing a URL to be launched in a browser when a user clicks the image.",type:"string",title:"linkURL"},normalizeField:{description:"Used with charts. An optional string containing the name of a field. The values of all fields in the chart will be normalized (divided) by the value of this field.",type:"string",title:"normalizeField"},sourceURL:{description:"Used with images. A string containing the URL to the image.",type:"string",title:"sourceURL"},tooltipField:{description:"String value indicating the tooltip for a chart specified from another field. This field is needed when related records are not sued. It is used for showing tooltips from another field in the same layer or related layer/table.",type:"string",title:"tooltipField"}}},IMediaInfo:{description:"Defines an image or a chart to be displayed in a popup window.",title:"IMediaInfo",type:"object",properties:{caption:{description:"A string caption describing the media.",title:"caption"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled. If the property does not exist, it's equivalent to having a value of 0. Only applicable when type is set to image.",title:"refreshInterval"},title:{description:"A string title for the media.",type:["null","string"],title:"title"},type:{description:"A string defining the type of media.",enum:["barchart","columnchart","image","linechart","piechart"],type:"string",title:"type"},value:{description:"A value object containing information about how the image should be retrieved or how the chart should be constructed.",anyOf:[{$ref:"#/definitions/IMediaInfoValue"},{type:"null"}],title:"value"}}},IPopupElement:{description:"Popup elements allow users to author popups, using multiple elements such as tabular views, string description, media (charts and images), and attachments of the attributes\nand control the order in which they appear. Specifically, popupElements do the following:\n1) provide the ability to explicitly add a field/ value table in addition to a description,\n2) allow adding multiple description elements, and\n3) allow a user to author and consume elements of a popup in the order of their choosing.",title:"IPopupElement",type:"object",properties:{displayType:{description:"This property applies to elements of type attachments. A string value indicating how to display the attachment.\nPossible values are, preview, and list. If list is specified, attachments show as links.",enum:["list","preview"],type:"string",title:"displayType"},fieldInfos:{description:"This property applies to elements of type fields. It is an array of popupInfo.fieldInfo objects representing a field/value pair displayed as a table within the popupElement.\nIf the fieldInfos property is not provided, the popupElement will display whatever is specified directly in the popupInfo.fieldInfos property.",type:"array",items:{$ref:"#/definitions/IFieldInfo"},title:"fieldInfos"},mediaInfos:{description:"This property applies to elements of type media. An array of popupInfo.mediaInfo objects representing an image or chart for display.\nIf no mediaInfos property is provided, the popupElement will display whatever is specified in the popupInfo.mediaInfo property.",type:"array",items:{$ref:"#/definitions/IMediaInfo"},title:"mediaInfos"},text:{description:"This property applies to elements of type text. This is string value indicating the text to be displayed within the popupElement.\nIf no text property is provided, the popupElement will display whatever is specified in the popupInfo.description property.",type:"string",title:"text"},type:{description:"String value indicating which elements to use.",enum:["attachments","fields","media","text"],type:"string",title:"type"}}},IOrderByField:{description:"Object indicating the field display order for the related records and whether they should be sorted in ascending or descending order.",title:"IOrderByField",type:"object",properties:{field:{description:"The attribute value of the field selected that will drive the sorting of related records.",type:"string",title:"field"},order:{description:"Set the ascending or descending sort order of the returned related records.",enum:["asc","desc"],type:"string",title:"order"}}},IRelatedRecordsInfo:{description:"The sort in the popupInfo for the parent feature. This impacts the sorting order for the returned child records.",title:"IRelatedRecordsInfo",type:"object",properties:{orderByFields:{description:"Array of orderByFields objects indicating the field display order for the related records and whether they should be sorted in ascending 'asc' or descending 'desc' order.",type:"array",items:{$ref:"#/definitions/IOrderByField"},title:"orderByFields"},showRelatedRecords:{description:"Required boolean value indicating whether to display related records. If true, client should let the user navigate to the related records. Defaults to true if the layer participates in a relationship AND the related layer/table has already been added to the map (either as an operationalLayer or as a table).",type:"boolean",title:"showRelatedRecords"}},required:["showRelatedRecords"]},IPopupInfo:{description:"Defines the look and feel of popup windows when a user clicks or queries a feature.",title:"IPopupInfo",type:"object",properties:{description:{description:"A string that appears in the body of the popup window as a description. It is also possible to specify the description as HTML-formatted content.",type:["null","string"],title:"description"},expressionInfos:{description:"List of Arcade expressions added to the pop-up.",type:"array",items:{$ref:"#/definitions/IPopupExpressionInfo"},title:"expressionInfos"},fieldInfos:{description:"Array of fieldInfo information properties. This information is provided by the service layer definition. When the description uses name/value pairs, the order of the array is how the fields display in the editable Map Viewer popup and the resulting popup. It is also possible to specify HTML-formatted content.",type:"array",items:{$ref:"#/definitions/IFieldInfo"},title:"fieldInfos"},layerOptions:{description:"Additional options that can be defined for the popup layer.",type:"object",properties:{showNoDataRecords:{description:"Indicates whether or not the NoData records should be displayed.",type:"boolean",title:"showNoDataRecords"}},required:["showNoDataRecords"],title:"layerOptions"},mediaInfos:{description:"Array of various mediaInfo to display. Can be of type image, piechart, barchart, columnchart, or linechart. The order given is the order in which is displays.",type:"array",items:{$ref:"#/definitions/IMediaInfo"},title:"mediaInfos"},popupElements:{description:"An array of popupElement objects that represent an ordered list of popup elements.",type:"array",items:{$ref:"#/definitions/IPopupElement"},title:"popupElements"},relatedRecordsInfo:{description:"Indicates whether to enable related records if they exist on a layer.",$ref:"#/definitions/IRelatedRecordsInfo",title:"relatedRecordsInfo"},showAttachments:{description:"Indicates whether attachments will be loaded for feature layers that have attachments.",type:"boolean",title:"showAttachments"},title:{description:"A string that appears at the top of the popup window as a title.",type:"string",title:"title"}}},IWebMapBackground:{description:"Defines the appearance for the background of the map.",title:"IWebMapBackground",type:"object",properties:{color:{description:"To define the color of the background of the map (which is shown when no data is shown).",type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"}},required:["color"]},IBookmark:{description:"Predefined bookmarks for use by the application. A bookmark is a saved map extent that allows end users to quickly navigate to a particular area of interest.",title:"IBookmark",type:"object",properties:{extent:{$ref:"#/definitions/IExtent",description:"An extent object containing a spatial reference, a lower left coordinate, and an upper right coordinate defining the rectangular area of the bookmark. The spatial reference must be the same as the map spatial reference. Documentation for the envelope is in the Geometry Objects topic of the ArcGIS REST API help.",title:"extent"},name:{description:"A string name for the bookmark.",type:"string",title:"name"}},required:["extent","name"]},IMapRangeInfo:{description:"Map range information",title:"IMapRangeInfo",type:"object",properties:{activeRangeName:{description:"Active range ID that slider/picker acts upon.",type:"string",title:"activeRangeName"},currentRangeExtent:{description:"Current range for the active range.",type:"array",items:{type:"number"},title:"currentRangeExtent"},fullRangeExtent:{description:"Full range extent for the active range to be presented in the UI.",type:"array",items:{type:"number"},title:"fullRangeExtent"}}},IMapLocation:{description:"Contains location information within a presentation slide.",title:"IMapLocation",type:"object",properties:{centerPoint:{$ref:"#/definitions/IPoint",description:"The center of the map specified using X/Y coordinates.",title:"centerPoint"},spatialReference:{$ref:"#/definitions/ISpatialReference",description:"Well-known ID (WKID) or well-known text (WKT).",title:"spatialReference"}},required:["centerPoint","spatialReference"]},IVisibleLayer:{description:"An array of numbers indicating layer visibility.",title:"IVisibleLayer",type:"object",properties:{featureVisibility:{description:"An array of arrays.",type:"array",items:{type:"array",items:{}},title:"featureVisibility"},id:{description:"The id of the layer as listed on the operational layer.",type:"number",title:"id"},subLayerIds:{description:"An array of integers.",type:"array",items:{type:"number"},title:"subLayerIds"}}},IVisiblePopup:{description:"A presentation slide's visiblePopup which contains anchorPoint, featureId, layerId, and subLayerId.",title:"IVisiblePopup",type:"object",properties:{anchorPoint:{description:"Object with spatialReference, x, and y.",$ref:"#/definitions/IPoint",title:"anchorPoint"},featureId:{description:"An integer specifying the feature's id.",type:"number",title:"featureId"},layerId:{description:"A string specifying the layer id.",type:"string",title:"layerId"},subLayerId:{description:"An integer specifying the sublayer id.",type:"number",title:"subLayerId"}}},ISlide:{title:"ISlide",type:"object",properties:{baseMap:{description:"Basemaps give the web map a geographic context.",$ref:"#/definitions/IBaseMap",title:"baseMap"},extent:{description:"The standard Esri extent object with spatialReference, xmax, xmin, ymax and ymin.",$ref:"#/definitions/IExtent",title:"extent"},hidden:{description:"Indicates whether the slide should be hidden within the presentation.",type:"boolean",title:"hidden"},mapLocation:{description:"An object with a centerPoint object and sometimes a resolution.",$ref:"#/definitions/IMapLocation",title:"mapLocation"},timeExtent:{description:"An array of two numbers. The first one indicates start time and the second one indicates end time.",type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"timeExtent"},title:{description:"Title including text and formatting for each slide.",type:"string",title:"title"},visibleLayers:{description:"An array of objects used to indicate layer visibility.",$ref:"#/definitions/IVisibleLayer",title:"visibleLayers"},visiblePopup:{description:"A presentation slide's visiblePopup which contains anchorPoint, featureId, layerId, and subLayerId.",$ref:"#/definitions/IVisiblePopup",title:"visiblePopup"}}},IPresentation:{type:"object",properties:{displayTimeSlider:{description:"Indicates whether to display the time slider (if accessible).",type:"boolean",title:"displayTimeSlider"},showLegend:{description:"Indicates whether to display a legend on all slides.",type:"boolean",title:"showLegend"},slideAdvancementInterval:{description:"Number of seconds to show slide before proceeding to the next slide.",type:"number",title:"slideAdvancementInterval"},slides:{description:"Array of slide objects.",type:"array",items:{$ref:"#/definitions/ISlide"},title:"slides"},useTimeExtentOfSlide:{description:"Indicates whether to use the time extent (if applicable) of a slide.",type:"boolean",title:"useTimeExtentOfSlide"}},title:"IPresentation"},ITable:{description:'Root element in the web map specifying an array of table objects.\n\n`ITable` can also be imported from the following packages:\n\n```js\nimport { ITable } from "@esri-arcgis-rest-service-admin"\n```',title:"ITable",type:"object",properties:{name:{description:"Table name",type:"string",title:"name"},capabilities:{description:"A comma-separated string listing which editing operations are allowed on an editable feature service. Available operations include: 'Create', 'Delete', 'Query', 'Update', and 'Editing'.",type:"string",title:"capabilities"},definitionEditor:{description:"Object indicating the definitionEditor used as a layer's interactive filter.",$ref:"#/definitions/IDefinitionEditor",title:"definitionEditor"},id:{description:"Unique identifier for the table.",type:"number",title:"id"},itemId:{description:"Unique string value indicating an item registered in ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},layerDefinition:{description:"A layerDefinition object defining a definition expression for the table.",$ref:"#/definitions/ILayerDefinition",title:"layerDefinition"},popupInfo:{description:"An object defining the content of popup windows when you query a record and the sort option for child related records.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},title:{description:"String value for the title of the table.",type:"string",title:"title"},url:{description:"String value indicating the URL reference of the hosted table.",type:"string",title:"url"}}},IWebmap:{description:"The web map data lists the basemap, operational layers, and bookmarks to be used in the web map.\nIt also contains information about popup windows and layer styling overrides to be used in the web map.\nA version property allows you to supply the version of the web map JSON format being used.",type:"object",properties:{applicationProperties:{description:"Viewing and editing properties of the webmap",$ref:"#/definitions/IApplicationProperties",title:"applicationProperties"},authoringApp:{description:"String value indicating the application which authored the webmap",type:"string",title:"authoringApp"},authoringAppVersion:{description:"String value indicating the authoring App's version number",type:"string",title:"authoringAppVersion"},background:{description:"Defines the appearance for the background of the map.",$ref:"#/definitions/IWebMapBackground",title:"background"},baseMap:{$ref:"#/definitions/IBaseMap",description:"[Required] Basemaps give the web map a geographic context",title:"baseMap"},bookmarks:{description:"A bookmark is a saved geographic extent that allows end users to quickly navigate to a particular area of interest",type:"array",items:{$ref:"#/definitions/IBookmark"},title:"bookmarks"},mapRangeInfo:{description:"Map Range Information",$ref:"#/definitions/IMapRangeInfo",title:"mapRangeInfo"},operationalLayers:{description:"Operational layers contain business data which are used to make thematic maps",type:"array",items:{$ref:"#/definitions/ILayer"},title:"operationalLayers"},presentation:{description:"A presentation consists of multiple slides. Each slide has a different title, extent, basemap, layers etc",title:"presentation"},spatialReference:{$ref:"#/definitions/ISpatialReference",description:"[Required] An object used to specify the spatial reference of the given geometry.",title:"spatialReference"},tables:{description:"Root element in the web map specifying an array of table objects. (optional)",type:"array",items:{$ref:"#/definitions/ITable"},title:"tables"},version:{description:"[Required] Root element in the web map specifying a string value indicating the web map version.",type:"string",title:"version"},widgets:{description:"The widgets object contains widgets that should be exposed to the user",title:"widgets"}},required:["baseMap","spatialReference","version"],title:"IWebmap"},IRange:{description:"Range object.",title:"IRange",type:"object",properties:{interactionMode:{description:"Indicates the mode in which the active range should be presented to the user. Must be one of the following values:    slider,    picker",enum:["picker","slider"],type:"string",title:"interactionMode"},numberOfStops:{description:"This is used to generate the activeRangeValues if activeRangeValues are not specified.",title:"numberOfStops"},stopInterval:{description:"Interval in which stops should be generated.",type:"number",title:"stopInterval"}}},IWidget:{description:"The widgets object contains widgets that should be exposed to the user.",type:"object",properties:{range:{description:"Active range.",$ref:"#/definitions/IRange",title:"range"},timeSlider:{description:"Time animation is controlled by a configurable time slider. The time slider widget will act upon all the time aware layers in the map.",$ref:"#/definitions/ITimeSliderProperties",title:"timeSlider"}},title:"IWidget"},ITimeSliderProperties:{description:"Configurable properties used within the TimeSlider widget.",title:"ITimeSliderProperties",type:"object",properties:{currentTimeExtent:{description:"An optional array of numbers indicating the slider's start to end time extent.",type:"array",items:{type:"number"},title:"currentTimeExtent"},endTime:{description:"The optional end of the time slider. If not specified, the slider defaults to the full time extent of all time-enabled layers.",type:"number",title:"endTime"},numberOfStops:{description:"Number of stops within the timeSlider widget.",type:"number",title:"numberOfStops"},startTime:{description:"The optional start of the time slider. If not specified, the slider defaults to the full time extent of all time-enabled layers.",type:"number",title:"startTime"},thumbCount:{description:"The default value for the thumbCount is 1.",type:"number",title:"thumbCount"},thumbMovingRate:{description:"Rate at which the time animation plays. Units are in milliseconds. Default is 1000.",type:"number",title:"thumbMovingRate"},timeStopInterval:{description:"The interval which has been defined for the time slider.",type:"number",title:"timeStopInterval"}}},ITimeSlider:{description:"Time animation is controlled by a configurable time slider. Those configurations are saved to the web map as a timeSlider widget.",type:"object",properties:{properties:{$ref:"#/definitions/ITimeSliderProperties",description:"Configurable properties used within the TimeSlider widget.",title:"properties"}},required:["properties"],title:"ITimeSlider"},IApplicationProperties:{description:"The applicationProperties object is one of the objects at the top level of the JSON web map JSON schema. This is responsible for containing the viewing and editing properties of the web map. There are specific objects within this object that are applicable only to Collector and are explained within the property descriptions.",title:"IApplicationProperties",type:"object",properties:{editing:{description:"If locationTracking is set and enabled, the Collector application will update the feature service at the defined interval with the current location of the user logged into the Collector app.",anyOf:[{$ref:"#/definitions/IEditingProperties"},{type:"null"}],title:"editing"},offline:{description:"Use if working with offline maps.",anyOf:[{$ref:"#/definitions/IOfflineInfo"},{type:"null"}],title:"offline"},viewing:{description:"An object containing all the viewing properties of the web map. If this is null or not defined, the client should assume a logical default.",anyOf:[{$ref:"#/definitions/IViewingInfo"},{type:"null"}],title:"viewing"}}},IEditingProperties:{description:"An object containing all the editing properties within the web map.",title:"IEditingProperties",type:"object",properties:{locationTracking:{$ref:"#/definitions/ILocationTracking",description:"If locationTracking is set and enabled, the collector app will update the feature service at the defined interval with the current location of the user logged into the collector application.",title:"locationTracking"}},required:["locationTracking"]},ILocationTracking:{description:"If locationTracking is set and enabled, the collector app will update the feature service at the defined interval with the current location of the user logged into the collector application.",title:"ILocationTracking",type:"object",properties:{enabled:{description:"A boolean value indicating whether or not location tracking is enabled on the webmap.",type:"boolean",title:"enabled"},info:{$ref:"#/definitions/ILocationTrackingInfo",description:"An object of additional information specifying layer and update interval time.",title:"info"}},required:["enabled","info"]},ILocationTrackingInfo:{description:"An object containing additional information specifying layer and update interval time used in the locationTracking object.",title:"ILocationTrackingInfo",type:"object",properties:{layerId:{description:"A string value indicating the given layer id specified in the web map.",title:"layerId"},updateInterval:{description:"A numeric value indicating the time interval used to update the feature service. Default value is 300 seconds.",title:"updateInterval"}},required:["layerId"]},IOfflineInfo:{description:"Use if working with offline maps.",title:"IOfflineInfo",type:"object",properties:{editableLayers:{$ref:"#/definitions/IEditableLayers",description:"Object detailing the available offline editing options.",title:"editableLayers"},readonlyLayers:{$ref:"#/definitions/IReadOnlyLayers",description:"Object indicating what to do with attachments in read-only layers.",title:"readonlyLayers"}},required:["editableLayers","readonlyLayers"]},IEditableLayers:{description:"Object detailing the available offline editing options.",title:"IEditableLayers",type:"object",properties:{download:{description:"When editing layers, the edits are always sent to the server. This string value indicates which data is retrieved.\nFor example, none indicates that only the schema is written since neither the features nor attachments are retrieved.\nFor a full sync without downloading attachments, indicate features. Lastly, the default behavior is to have a full\nsync using featuresAndAttachments where both features and attachments are retrieved.",enum:["featuers","featuresAndAttachments","none"],type:"string",title:"download"},sync:{description:"This string value indicates how the data is synced.",enum:["syncFeaturesAndAttachments","syncFeaturesUploadAttachments","uploadFeaturesAndAttachments"],type:"string",title:"sync"}},required:["download","sync"]},IReadOnlyLayers:{description:"Read-only layers as the features are always retrieved from the server.",title:"IReadOnlyLayers",type:"object",properties:{downloadAttachments:{description:"Indicates whether to include attachments with the read-only data.",type:"boolean",title:"downloadAttachments"}},required:["downloadAttachments"]},IEnableable:{title:"IEnableable",type:"object",properties:{enabled:{type:"boolean",title:"enabled"}},required:["enabled"]},ISearch:{description:"An object specifying the search parameters set within the web map.",title:"ISearch",type:"object",properties:{disablePlaceFinder:{description:"A boolean value indicating whether or not to disable the place finder.",title:"disablePlaceFinder"},hintText:{description:"A string value used to indicate the hint provided with the search dialog.",title:"hintText"},layers:{description:"An array of layer objects defining the styling, geometry, and attribute information for the features.",title:"layers"},enabled:{type:"boolean",title:"enabled"}},required:["enabled"]},IViewingInfo:{description:"An object containing all the viewing properties of the web map. If this is null or not defined, the client should assume a logical default.",title:"IViewingInfo",type:"object",properties:{basemapGallery:{description:"The basemap tool which will use the basemap group defined in the Portal.",$ref:"#/definitions/IEnableable",title:"basemapGallery"},measure:{description:"Measure tool.",$ref:"#/definitions/IEnableable",title:"measure"},routing:{description:"The route tool which will leverage the Portals defined route service.",$ref:"#/definitions/IEnableable",title:"routing"},search:{description:"An object specifying search parameters within the webmap.",$ref:"#/definitions/ISearch",title:"search"}}},IBaseMap:{description:"A basemap layer is a layer that provides geographic context to the map. A web map always contains a basemap.\nThe basemap has a title and is the combination of each baseMapLayer.\nIt is required that a baseMap be saved within the web map.",title:"IBaseMap",type:"object",properties:{baseMapLayers:{description:"An array of baseMapLayer objects defining the basemaps used in the web map.",type:"array",items:{$ref:"#/definitions/ILayer"},title:"baseMapLayers"},title:{description:"Required string title for the basemap that can be used in a table of contents. It takes the title of the first baseMapLayer in the array.",type:"string",title:"title"}},required:["baseMapLayers","title"]},ILayer:{title:"ILayer",type:"object",properties:{id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},layerType:{description:"Indicates the layer type",type:"string",title:"layerType"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"]},ISupportsTime:{type:"object",properties:{timeAnimation:{description:"This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",type:"boolean",title:"timeAnimation"}},title:"ISupportsTime"},IBingLayer:{type:"object",properties:{bingKey:{description:"String value that unlocks the use of Bing layers in a web map.",type:"string",title:"bingKey"},canShareBingPublic:{description:"Boolean value indicating whether the Bing key can be shared to the public.",type:"boolean",title:"canShareBingPublic"},layerType:{description:"String indicating the layer type.",enum:["BingMapsAerial","BingMapsHybrid","BingMapsRoad"],type:"string",title:"layerType"},portalUrl:{description:"A string value representing the URL to the Portal/organization Self resource. Calls should be made to this property to retrieve the Bing key. If the key is not made accessible to the public or if canShareBingPublic is false, any web maps using Bing layers will not work.",type:"string",title:"portalUrl"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IBingLayer"},IImageServiceLayer:{type:"object",properties:{bandIds:{description:"An array of bandIds that are visible, can specify bands to export or rearrange band order(from image service).",type:"array",items:{type:"number"},title:"bandIds"},compressionQuality:{description:"Controls how much loss the image will be subjected to by the compression algorithm (from image service).",title:"compressionQuality"},definitionEditor:{description:"Stores interactive filters.",title:"definitionEditor"},disablePopup:{description:"Boolean property indicating whether to ignore popups defined by the service item.",type:"boolean",title:"disablePopup"},format:{description:"String value representing image format.",enum:["bmp","gif","jpg","jpgpng","png","png24","png32","png8","tiff"],type:"string",title:"format"},interpolation:{description:"The algorithm used for interpolation.",enum:["RSP_BilinearInterpolation","RSP_CubicConvolution","RSP_Majority","RSP_NearestNeighbor"],type:"string",title:"interpolation"},isReference:{description:"This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",type:"boolean",title:"isReference"},layerDefinition:{description:"A layerDefinition object defining the attribute schema and drawing information for the layer.",title:"layerDefinition"},layerType:{description:"String indicating the layer type. Value of this property must be ArcGISImageServiceLayer",type:"string",const:"ArcGISImageServiceLayer",title:"layerType"},mosaicRule:{description:"Specifies the mosaic rule when defining how individual images should be mosaicked.",title:"mosaicRule"},noData:{description:"The pixel value that represents no information.",title:"noData"},noDataInterpretation:{description:"A string value of interpretation of noData setting. Default is 'esriNoDataMatchAny' when noData is a number, and 'esriNoDataMatchAll' when noData is an array.",enum:["esriNoDataMatchAll","esriNoDataMatchAny"],type:"string",title:"noDataInterpretation"},pixelType:{description:"Pertains to the type of values stored in the raster, such as signed integer, unsigned integer, or floating point.",enum:["C128","C64","F32","F64","S16","S32","S8","U1","U16","U2","U32","U4","U8","UNKNOWN"],type:"string",title:"pixelType"},popupInfo:{description:"A popupInfo object defining the content of popup windows when you click or query a feature.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},renderingRule:{description:"Specifies the rendering rule for how the requested image should be rendered.",title:"renderingRule"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"},timeAnimation:{description:"This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",type:"boolean",title:"timeAnimation"}},required:["id","layerType"],title:"IImageServiceLayer"},IImageVectorLayer:{type:"object",properties:{definitionEditor:{description:"Stores interactive filters.",title:"definitionEditor"},disablePopup:{description:"Boolean property indicating whether to ignore popups defined by the service item.",title:"disablePopup"},isReference:{description:"This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",type:"boolean",title:"isReference"},layerDefinition:{description:"A layerDefinition object defining the attribute schema and drawing information for the layer.",title:"layerDefinition"},layerType:{description:"String indicating the layer type. Value of this property must be ArcGISImageServiceVectorLayer",type:"string",const:"ArcGISImageServiceVectorLayer",title:"layerType"},mosaicRule:{description:"Specifies the mosaic rule when defining how individual images should be mosaicked.",title:"mosaicRule"},popupInfo:{description:"A popupInfo object defining the content of popup windows when you click or query a feature.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},symbolTileSize:{description:"Number describing the size of the tile.",title:"symbolTileSize"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"},timeAnimation:{description:"This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",type:"boolean",title:"timeAnimation"}},required:["id","layerType"],title:"IImageVectorLayer"},IDefinitionParameter:{title:"IDefinitionParameter",type:"object",properties:{defaultValue:{description:"The default value that is automatically given if nothing is provided.",type:["string","number"],title:"defaultValue"},fieldName:{description:"A string value representing the name of the field to query.",type:"string",title:"fieldName"},parameterId:{description:"Number given to uniquely identify the specified parameter.",title:"parameterId"},type:{description:"The field type for the specified field parameter.",enum:["esriFieldTypeBlob","esriFieldTypeDate","esriFieldTypeDouble","esriFieldTypeGUID","esriFieldTypeGeometry","esriFieldTypeGlobalID","esriFieldTypeInteger","esriFieldTypeOID","esriFieldTypeRaster","esriFieldTypeSingle","esriFieldTypeSmallInteger","esriFieldTypeString","esriFieldTypeXML"],type:"string",title:"type"},utcValue:{description:"An integer value representing exact UNIX time used when defaultValue is a date string.",type:"number",title:"utcValue"}}},IDefinitionInput:{title:"IDefinitionInput",type:"object",properties:{hint:{description:"A string value representing a hint for the input.",type:"string",title:"hint"},parameters:{description:"An array of parameter objects.",type:"array",items:{$ref:"#/definitions/IDefinitionParameter"},title:"parameters"},prompt:{description:"A string value representing the prompt for the input.",type:"string",title:"prompt"}}},IDefinitionEditor:{description:"The definitionEditor stores interactive filters at the same level as layerDefinition.",title:"IDefinitionEditor",type:"object",properties:{inputs:{description:"An array of input objects.",type:"array",items:{$ref:"#/definitions/IDefinitionInput"},title:"inputs"},parameterizedExpression:{description:"A string value representing the where clause for the interactive filter.",type:"string",title:"parameterizedExpression"}}},IChildLayer:{description:"A layer object may allow overrides on popup content and drawing behavior for individual layers of a web service.\nThis object also contains geographic features and their attributes when used in a feature collection.",title:"IChildLayer",type:"object",properties:{defaultVisibility:{description:"Default visibility of the layers in the map service.",title:"defaultVisibility"},definitionEditor:{description:"An object that provides interactive filters.",$ref:"#/definitions/IDefinitionEditor",title:"definitionEditor"},featureSet:{description:"A featureSet object containing the geometry and attributes of the features in the layer. Used with feature collections only.",$ref:"#/definitions/IFeatureSet",title:"featureSet"},field:{description:"Information about each field in a layer. Used with feature collections.",type:"array",items:{$ref:"#/definitions/IField"},title:"field"},id:{description:"A string indicating the index position of the layer in the map service or feature collection.",type:"string",title:"id"},layerDefinition:{description:"The layerDefinition object defines the attribute schema and drawing information for the layer.",title:"layerDefinition"},layerUrl:{description:"A string URL to a service that should be used for all queries against the layer. Used with hosted tiled map services on ArcGIS Online when there is an associated feature service that allows for queries.",title:"layerUrl"},maxScale:{description:"Represents the maximum scale at which the layer definition will be applied.",title:"maxScale"},minScale:{description:"Represents the minimum scale at which the layer definition will be applied.",title:"minScale"},nextObjectId:{description:"Iterates within a featureset. Number objectId value is incremented +1 based on last Object ID defined for the feature in a featureset. Used with feature collections.",title:"nextObjectId"},parentLayerId:{description:"If working with nested layers, this is the numeric value indicating the layer id of the next layer (parent) directly above the current referenced layer.",title:"parentLayerId"},popupInfo:{description:"A popupInfo object defining the popup window content for the layer.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},showLegend:{description:"Indicates whether to allow map authors the ability to control what layers should be shown in a client's legend.",title:"showLegend"},subLayer:{description:"Array of numeric values indicating the layer index for layers nested directly under the parent layer.",title:"subLayer"},subLayerIds:{description:"If the layer is a parent layer, it will have one or more sub layers included in an array.",title:"subLayerIds"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",title:"title"}}},IMapServiceLayer:{type:"object",properties:{isReference:{description:"This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",title:"isReference"},layerType:{description:"String indicating the layer type.",type:"string",const:"ArcGISMapServiceLayer",title:"layerType"},layers:{description:"An array of layer objects defining the styling, geometry, and attribute information for the features.",type:"array",items:{$ref:"#/definitions/IChildLayer"},title:"layers"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},thematicGroup:{description:"(Optional) A thematicGroup object used in ArcGISMapServiceLayer layers.",$ref:"#/definitions/IThematicGroup",title:"thematicGroup"},visibleLayers:{description:"An array of sublayer ids that should appear visible. Used with map service layers that are not tiled.",type:"array",items:{type:"number"},title:"visibleLayers"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"},timeAnimation:{description:"This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",type:"boolean",title:"timeAnimation"}},required:["id","layerType"],title:"IMapServiceLayer"},IThematicGroup:{title:"IThematicGroup",type:"object",properties:{fieldNames:{description:"An array of string values indicating all the fields used within the webmap. All other fields can be disregarded and should not display in any field selection list.",type:"array",items:{type:"string"},title:"fieldNames"},layerIds:{description:"A zero-based array of integers indicating the layers to be used in the webmap. NOTE: All other layers should not be added to the TOC and may or may not be visible on the map as reference layers.",type:"array",items:{type:"number"},title:"layerIds"},name:{description:"String property indicating the name for the thematic grouping of layers.",type:"string",title:"name"}}},IDrawingInfo:{type:"object",properties:{fixedSymbols:{description:"Only used for feature collections with a renderer. The feature's symbol is defined by the layer's renderer.",title:"fixedSymbols"},labelingInfo:{description:"An object defining the properties used for labeling the layer.",title:"labelingInfo"},renderer:{description:"An object defined which provides the symbology for the layer.",title:"renderer"},scaleSymbols:{description:"Boolean property indicating whether symbols should stay the same size in screen units as you zoom in. A value of true means the symbols stay the same size in screen units regardless of the map scale.",title:"scaleSymbols"},showLabels:{description:"Defines whether labels should be shown or not. This is only valid for sublayers.",type:"boolean",title:"showLabels"},transparency:{description:"Number value ranging between 0 (no transparency) to 100 (completely transparent).",type:"number",title:"transparency"}},title:"IDrawingInfo"},IEditingInfo:{title:"IEditingInfo",type:"object",properties:{lastEditDate:{description:"date of last edit to the layer",type:"number",title:"lastEditDate"}}},ILayerDefinition:{description:'`ILayerDefinition` can also be imported from the following packages:\n\n```js\nimport { ILayerDefinition } from "@esri/arcgis-rest-service-admin";\nimport { ILayerDefinition } from "@esri/arcgis-rest-feature-layer";\n```',title:"ILayerDefinition",type:"object",properties:{allowGeometryUpdates:{description:"Boolean value indicating whether the geometry of the features in the layer can be edited.",type:"boolean",title:"allowGeometryUpdates"},capabilities:{description:"A comma separated list of supported capabilities, e.g. Query,Editing.",type:"string",title:"capabilities"},copyrightText:{description:"String value for the copyright text information for the layer.",type:"string",title:"copyrightText"},currentVersion:{description:"Numeric value indicating the server version of the layer.",type:"number",title:"currentVersion"},defaultVisibility:{description:"Boolean value indicating whether the layer's visibility is turned on.",type:"boolean",title:"defaultVisibility"},definitionEditor:{description:"Stores interactive filters.",$ref:"#/definitions/IDefinitionEditor",title:"definitionEditor"},definitionExpression:{description:"SQL-based definition expression string that narrows the data to be displayed in the layer.",type:"string",title:"definitionExpression"},description:{description:"String value of the layer as defined in the map service.",type:"string",title:"description"},displayField:{description:"A string value that summarizes the feature.",type:"string",title:"displayField"},drawingInfo:{description:"Contains drawing, labeling, and transparency information.",title:"drawingInfo"},extent:{description:"An object defining the rectangular area.",anyOf:[{$ref:"#/definitions/IExtent"},{type:"null"}],title:"extent"},editingInfo:{description:"An object defining the editing info (last edit date).",$ref:"#/definitions/IEditingInfo",title:"editingInfo"},featureReduction:{description:"Feature reductions declutter the screen by hiding features that would otherwise intersect with other features on screen.",title:"featureReduction"},fields:{description:"An array of field objects containing information about the attribute fields for the feature collection or layer.",type:"array",items:{$ref:"#/definitions/IField"},title:"fields"},geometryType:{description:"A string defining the type of geometry. Possible geometry types are: esriGeometryPoint, esriGeometryMultipoint, esriGeometryPolyline, esriGeometryPolygon, and esriGeometryEnvelope.",enum:["esriGeometryEnvelope","esriGeometryMultipoint","esriGeometryPoint","esriGeometryPolygon","esriGeometryPolyline"],type:"string",title:"geometryType"},globalIdField:{description:"The unique identifier for a feature or table row within a geodatabase.",type:"string",title:"globalIdField"},hasAttachments:{description:"Indicates whether attachments should be loaded for the layer.",type:"boolean",title:"hasAttachments"},hasStaticData:{description:"Boolean value indicating whether data changes. True if it does not.",type:"boolean",title:"hasStaticData"},htmlPopupType:{description:"String value indicating the HTML popup type.",enum:["esriServerHTMLPopupTypeAsHTMLText","esriServerHTMLPopupTypeAsURL","esriServerHTMLPopupTypeNone"],type:"string",title:"htmlPopupType"},id:{description:"The identifier assigned to the layer.",type:"number",title:"id"},isDataVersioned:{description:"Boolean value indicating whether the data is versioned.",type:"boolean",title:"isDataVersioned"},maxRecordCount:{description:"Numeric value indicating tbe maximum number of records that will be returned at once for a query.",type:"number",title:"maxRecordCount"},maxScale:{description:"Represents the maximum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer.",type:"number",title:"maxScale"},minScale:{description:"Represents the minimum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer.",type:"number",title:"minScale"},name:{description:"Contains a unique name for the layer that can be displayed in a legend.",type:"string",title:"name"},objectIdField:{description:"Indicates the name of the object ID field in the dataset.",type:"string",title:"objectIdField"},overrideSymbols:{description:"Dictates whether a client can support having an end user modify symbols on individual features.",type:"boolean",title:"overrideSymbols"},rangeInfos:{description:"Indicates range information",title:"rangeInfos"},source:{description:"An object indicating the layerDefinition's layer source.",title:"source"},spatialReference:{description:"An object containing the WKID or WKT identifying the spatial reference of the layer's geometry.",$ref:"#/definitions/ISpatialReference",title:"spatialReference"},supportedQueryFormats:{description:"String value indicating the output formats that are supported in a query.",type:"string",title:"supportedQueryFormats"},supportsAdvancedQueries:{description:"Boolean value indicating whether the layer supports orderByFields in a query operation.",type:"boolean",title:"supportsAdvancedQueries"},supportsAttachmentsByUploadId:{description:"Boolean value indicating whether the layer supports uploading attachments with the Uploads operation. This can then be used in the Add Attachment and Update Attachment operations.",type:"boolean",title:"supportsAttachmentsByUploadId"},supportsCalculate:{description:"Boolean value indicating whether the layer supports the Calculate REST operation when updating features.",type:"boolean",title:"supportsCalculate"},supportsRollbackOnFailureParameter:{description:"Boolean value indicating whether the layer supports rolling back edits made on a feature layer if some of the edits fail.",type:"boolean",title:"supportsRollbackOnFailureParameter"},supportsStatistics:{description:"Boolean value indicating whether feature layer query operations support statistical functions.",type:"boolean",title:"supportsStatistics"},supportsValidateSql:{description:"Boolean value indicating whether the validateSQL operation is supported across a feature service layer.",type:"boolean",title:"supportsValidateSql"},templates:{description:"A property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types.",type:"array",items:{$ref:"#/definitions/ITemplate"},title:"templates"},timeInfo:{description:"The time info metadata of the layer. May be set for feature layers inside a feature collection item.",title:"timeInfo"},type:{description:"Indicates whether the layerDefinition applies to a Feature Layer or a Table.",enum:["Feature Layer","Table"],type:"string",title:"type"},typeIdField:{description:"Contains the name of the field holding the type ID for the features.",type:"string",title:"typeIdField"},types:{description:"Contains information about an attribute field.",title:"types"},visibilityField:{description:"String value indicating the attribute field that is used to control the visibility of a feature.\nIf applicable, when rendering a feature the client should use this field to control visibility.\nThe field's values are 0 = do not display, 1 = display.",type:"string",title:"visibilityField"},relationships:{type:"array",items:{},title:"relationships"},editFieldsInfo:{type:"object",properties:{creationDateField:{type:"string",title:"creationDateField"},creatorField:{type:"string",title:"creatorField"},editDateField:{type:"string",title:"editDateField"},editorField:{type:"string",title:"editorField"}},title:"editFieldsInfo"},parentLayerId:{type:"number",title:"parentLayerId"},ownershipBasedAccessControlForFeatures:{type:"boolean",title:"ownershipBasedAccessControlForFeatures"},syncCanReturnChanges:{type:"boolean",title:"syncCanReturnChanges"},archivingInfo:{type:"object",properties:{supportsQueryWithHistoricMoment:{type:"boolean",title:"supportsQueryWithHistoricMoment"},startArchivingMoment:{type:"number",title:"startArchivingMoment"}},title:"archivingInfo"},supportsValidateSQL:{type:"boolean",title:"supportsValidateSQL"},advancedQueryCapabilities:{type:"object",properties:{supportsPagination:{type:"boolean",title:"supportsPagination"},supportsTrueCurve:{type:"boolean",title:"supportsTrueCurve"},supportsQueryWithDistance:{type:"boolean",title:"supportsQueryWithDistance"},supportsReturningQueryExtent:{type:"boolean",title:"supportsReturningQueryExtent"},supportsStatistics:{type:"boolean",title:"supportsStatistics"},supportsOrderBy:{type:"boolean",title:"supportsOrderBy"},supportsDistinct:{type:"boolean",title:"supportsDistinct"},supportsSqlExpression:{type:"boolean",title:"supportsSqlExpression"},supportsPercentileStatistics:{type:"boolean",title:"supportsPercentileStatistics"}},title:"advancedQueryCapabilities"},allowTrueCurvesUpdates:{type:"boolean",title:"allowTrueCurvesUpdates"},onlyAllowTrueCurveUpdatesByTrueCurveClients:{type:"boolean",title:"onlyAllowTrueCurveUpdatesByTrueCurveClients"},supportsApplyEditsWithGlobalIds:{type:"boolean",title:"supportsApplyEditsWithGlobalIds"},subtypeField:{type:"string",title:"subtypeField"},indexes:{type:"array",items:{},title:"indexes"},dateFieldsTimeReference:{type:"object",properties:{timeZone:{type:"string",title:"timeZone"},respectsDaylightSaving:{type:"boolean",title:"respectsDaylightSaving"}},title:"dateFieldsTimeReference"},useStandardizedQueries:{type:"boolean",title:"useStandardizedQueries"},hasZ:{type:"boolean",title:"hasZ"},hasM:{type:"boolean",title:"hasM"}}},ITypeInfoDomain:{type:"object",properties:{type:{type:"string",title:"type"}},required:["type"],title:"ITypeInfoDomain"},FeatureEditTool:{enum:["esriFeatureEditToolAutoCompletePolygon","esriFeatureEditToolCircle","esriFeatureEditToolDownArrow","esriFeatureEditToolEllipse","esriFeatureEditToolFreehand","esriFeatureEditToolLeftArrow","esriFeatureEditToolLine","esriFeatureEditToolNone","esriFeatureEditToolPoint","esriFeatureEditToolPolygon","esriFeatureEditToolRectangle","esriFeatureEditToolRightArrow","esriFeatureEditToolText","esriFeatureEditToolTriangle","esriFeatureEditToolUpArrow"],type:"string",title:"FeatureEditTool"},ITemplate:{description:"Templates describe features that can be created in a layer. They are generally used with feature collections and editable web-based CSV layers.\nTemplates are not used with ArcGIS feature services as these already have templates defined in the service. They are also defined as properties\nof the layer definition when there are no defined types. Otherwise, templates are defined as properties of the types.",title:"ITemplate",type:"object",properties:{description:{description:"A string value containing a detailed description of the template.",title:"description"},drawingTool:{description:"An optional string that can define a client-side drawing tool to be used with this feature. For example, map notes used by the Online Map Viewer use this to represent the viewer's different drawing tools.",enum:["esriFeatureEditToolAutoCompletePolygon","esriFeatureEditToolCircle","esriFeatureEditToolDownArrow","esriFeatureEditToolEllipse","esriFeatureEditToolFreehand","esriFeatureEditToolLeftArrow","esriFeatureEditToolLine","esriFeatureEditToolNone","esriFeatureEditToolPoint","esriFeatureEditToolPolygon","esriFeatureEditToolRectangle","esriFeatureEditToolRightArrow","esriFeatureEditToolText","esriFeatureEditToolTriangle","esriFeatureEditToolUpArrow"],type:"string",title:"drawingTool"},name:{description:"A string containing a user-friendly name for the template.",type:"string",title:"name"},prototype:{description:"A feature object representing a prototypical feature for the template.",$ref:"#/definitions/IFeature",title:"prototype"}}},ITypeInfo:{type:"object",properties:{domains:{description:"A comma-delimited series of domain objects for each domain in the type.",$ref:"#/definitions/Record<string,ITypeInfoDomain>",title:"domains"},id:{description:"A unique string or numerical ID for the type.",type:["string","number"],title:"id"},name:{description:"A user-friendly name for the type.",type:"string",title:"name"},templates:{description:"Defined as a property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types.",type:"array",items:{$ref:"#/definitions/ITemplate"},title:"templates"}},title:"ITypeInfo"},IOpenStreetMapLayer:{description:"Allows use of OpenStreetMap data for use in basemaps only.",type:"object",properties:{layerType:{description:"String indicating the layer type. Value of this property must be OpenStreetMap",type:"string",const:"OpenStreetMap",title:"layerType"},type:{description:"Deprecated, use layerType instead.",const:"OpenStreetMap",type:"string",title:"type"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IOpenStreetMapLayer"},ITiledImageServiceLayer:{type:"object",properties:{isReference:{description:"Applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",type:"boolean",title:"isReference"},layerType:{description:"String indicating the layer type. Value of this property must be ArcGISTiledImageServiceLayer",type:"string",const:"ArcGISTiledImageServiceLayer",title:"layerType"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"ITiledImageServiceLayer"},IExclusionArea:{description:"Exclusion areas define extent areas where no data will be fetched for a layer.",title:"IExclusionArea",type:"object",properties:{geometry:{description:"The geometry defining the area where no data will be fetched. Only extent is supported.",$ref:"#/definitions/IGeometry",title:"geometry"},maxScale:{description:"The zoom level where the exclusion ends.",type:"number",title:"maxScale"},maxZoom:{description:"The zoom level where the exclusion ends.",type:"number",title:"maxZoom"},minScale:{description:"The zoom level where the exclusion starts.",type:"number",title:"minScale"},minZoom:{description:"The zoom level where the exclusion starts.",type:"number",title:"minZoom"}}},ITiledMapServiceLayer:{description:"An ArcGIS Tiled Map Service layer displays map content from an ArcGIS Server Map service that has been cached (tiled).",type:"object",properties:{displayLevels:{description:"NOTE: Applicable if used as a baseMapLayer. Integer value(s) indicating the display levels of the basemap layer.\nOnly applicable for TiledMapService layers. All tiled map service layers should share the same tiling scheme.\nThis property cannot be set via the Map Viewer UI.",anyOf:[{type:"array",items:{type:"number"}},{type:"number"}],title:"displayLevels"},exclusionAreas:{description:"NOTE: Applicable if used as a baseMapLayer. An array of exclusionArea objects defining the layer exclusions.",type:"array",items:{$ref:"#/definitions/IExclusionArea"},title:"exclusionAreas"},isReference:{description:"This property is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",title:"isReference"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",title:"itemId"},layerType:{description:"String indicating the layer type.",type:"string",const:"ArcGISTiledMapServiceLayer",title:"layerType"},layers:{description:"An array of layer objects defining a URL for queries and the popup window content.",type:"array",items:{$ref:"#/definitions/IChildLayer"},title:"layers"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"ITiledMapServiceLayer"},IVectorTileLayer:{description:"A vector tile layer references a set of web-accessible vector tiles and the corresponding style for how those tiles should be drawn.",type:"object",properties:{layerType:{description:"String indicating the layer type.",type:"string",const:"VectorTileLayer",title:"layerType"},styleUrl:{description:"A url to a JSON file containing the stylesheet information used to render the layer. You may also pass an object containing the stylesheet information identical to the JSON file.",type:"string",title:"styleUrl"},type:{description:"Deprecated. User layerType instead.",const:"VectorTileLayer",type:"string",title:"type"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IVectorTileLayer"},ILod:{title:"ILod",type:"object",properties:{level:{description:"ID for each level.",type:"number",title:"level"},levelValue:{description:"String to be used when constructing URL to access a tile from this LOD.",type:"string",title:"levelValue"},resolution:{description:"Resolution in map units of each pixel in a tile for each level.",type:"number",title:"resolution"},scale:{description:"Scale for each level.",type:"number",title:"scale"}}},ITileInfo:{description:"Tile information, returned from the WMTS OGC Web Service. The tileInfo will contain the spatial reference of the layer.\ntileInfo is the same json representation as the ArcGIS Map/Image service tileInfo except that it may contain a levelValue\non the lod objects that should be used instead of the level in the templateUrl.",title:"ITileInfo",type:"object",properties:{cols:{description:"Requested tile's column.",title:"cols"},compressionQuality:{description:"Compression quality of the tile.",title:"compressionQuality"},dpi:{description:"The dpi of the tiling scheme.",title:"dpi"},format:{description:"Image format of the cached tiles.",enum:["bmp","emf","gif","jpg","lerc","mixed","pdf","png","png24","png32","png8","ps","svg","svgz"],type:"string",title:"format"},lods:{description:"An array of levels of detail that define the tiling scheme.",type:"array",items:{$ref:"#/definitions/ILod"},title:"lods"},origin:{description:"The tiling scheme origin.",$ref:"#/definitions/IPoint",title:"origin"},rows:{description:"Requested tile's row.",title:"rows"},spatialReference:{description:"The spatial reference of the tiling schema.",$ref:"#/definitions/ISpatialReference",title:"spatialReference"}}},IWebMapTileServiceInfo:{description:"Object defines and provides information about layers in a WMTSLayer service.",title:"IWebMapTileServiceInfo",type:"object",properties:{customLayerParameters:{description:"A sequence of parameters used to append different custom parameters to a WMTS tile request. These parameters are applied to GetTile. The customLayerParameters property takes precedence if customParameters is also present.",title:"customLayerParameters"},customParameters:{description:"A sequence of parameters used to append custom parameters to all WMTS requests. These parameters are applied to GetCapabilities and GetTile. If used with the customLayerParameters property, customParameters will not take precedence.",title:"customParameters"},layerIdentifier:{description:"Identifier for the specific layer used in the WMTS service. Required input by the user.",type:"string",title:"layerIdentifier"},tileMatrixSet:{description:"Tiling schema, set by the WMTS service.",title:"tileMatrixSet"},url:{description:"URL to the WMTS web service. Required input by the user.",type:"string",title:"url"}},required:["layerIdentifier","url"]},IWebTiledLayer:{type:"object",properties:{copyright:{description:"Attribution to the Web Tiled Layer provider. It is displayed in the attribution on the web map. Input required by the user when the layer is added to the web map.",title:"copyright"},fullExtent:{description:"An extent object representing the full extent envelope for the layer.",$ref:"#/definitions/IExtent",title:"fullExtent"},isReference:{description:"This is applicable if used as a baseMapLayer. A boolean value indicating whether or not the baseMapLayer draws on top (true) of other layers, including operationalLayers , or below (false).",title:"isReference"},layerType:{description:"String indicating the layer type. Value of this property must be WebTiledLayer",type:"string",const:"WebTiledLayer",title:"layerType"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",title:"refreshInterval"},subDomains:{description:"If subdomains are detected, they must be specified. The map viewer detects if the Web Tiled Layer has subdomains by parsing the templateURL value for {subDomain}.",title:"subDomains"},templateUrl:{description:"URL to the Web Tiled Layer. Input required by the user when the layer is added to the web map. The template URL contains a parameterized URL. The URL can contain the following templated parameters: 'level', 'col', 'row', and 'subDomain'.",title:"templateUrl"},tileInfo:{description:"Contains the spatial reference and the tiling scheme of the layer. Typically retrieved from a WMTS OGC Web Service. If missing the layer must be in the WGS 1984 Web Mercator (Auxiliary Sphere) tiling scheme.",$ref:"#/definitions/ITileInfo",title:"tileInfo"},type:{description:"Deprecated, use layerType instead.",const:"WebTiledLayer",type:"string",title:"type"},wmtsInfo:{description:"Object containing information about the chosen WMTS service layer and tiling schema.",$ref:"#/definitions/IWebMapTileServiceInfo",title:"wmtsInfo"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IWebTiledLayer"},ICsvLayer:{description:"The CSV layer type references a CSV or TXT file from a publically-accessible web server. It then dynamically loads into the map at run time. The CSV layer will maintain a reference to the CSV resource.",type:"object",properties:{columnDelimiter:{description:"A string defining the character used to separate columns in a CSV file.",enum:["\t"," ",",",";","|"],type:"string",title:"columnDelimiter"},layerDefinition:{description:"A layerDefinition object defining the attribute schema and drawing information for the layer.",$ref:"#/definitions/ILayerDefinition",title:"layerDefinition"},layerType:{description:"String indicating the layer type.",type:"string",const:"CSV",title:"layerType"},locationInfo:{description:"A locationInfo object defining how location information will be retrieved from a CSV file.",title:"locationInfo"},popupInfo:{description:"A popupInfo object defining the content of popup windows when you click or query a feature.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},type:{description:"Deprecated, use layerType instead.",const:"CSV",type:"string",title:"type"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"ICsvLayer"},IFeatureLayer:{description:"Feature layers can be created by referencing a layer from either a map service or a feature service or by specifying a feature collection object.\nUse a map service if you just want to retrieve geometries and attributes from the server and symbolize them yourself. Use a feature service if\nyou want to take advantage of symbols from the service's source map document. Also, use a feature service if you plan on doing editing with the\nfeature layer. Feature layers honor any feature templates configured in the source map document. Feature collection objects are used to create\na feature layer based on the supplied definition.",title:"IFeatureLayer",type:"object",properties:{capabilities:{description:"A comma-separated string listing which editing operations are allowed on an editable feature service.",type:"string",title:"capabilities"},definitionEditor:{description:"Stores interactive filters.",$ref:"#/definitions/IDefinitionEditor",title:"definitionEditor"},disablePopup:{description:"Indicates whether to allow a client to ignore popups defined by the service item.",const:!0,type:"boolean",title:"disablePopup"},featureCollection:{description:"A featureCollection object defining a layer of features whose geometry and attributes are either stored directly within the web map or with an item. Feature Collections can be created from CSVs, shapefiles, GPX, or map notes.",title:"featureCollection"},featureCollectionType:{description:"Indicates the type of features in the feature collection. If featureCollectionType is missing, it means the feature collection is a regular single-layer or multi-layer feature collection.",enum:["markup","notes","route"],type:"string",title:"featureCollectionType"},layerDefinition:{description:"A layerDefinition object defining the attribute schema and drawing information for the layer.",$ref:"#/definitions/ILayerDefinition",title:"layerDefinition"},layerType:{description:"String indicating the layer type.",type:"string",const:"ArcGISFeatureLayer",title:"layerType"},mode:{description:"0 is snapshot mode. 1 is on-demand mode. 2 is selection-only mode. Used with ArcGIS feature services and individual layers in ArcGIS map services.",enum:[0,1,2],type:"number",title:"mode"},popupInfo:{description:"A popupInfo object defining the content of popup windows when you click or query a feature.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},showLabels:{description:"Labels will display if this property is set to true and the layer also has a labelingInfo property associated with it. This property can get stored in the web map config and in the item/data.",const:!0,type:"boolean",title:"showLabels"},visibleLayers:{description:"An array of sublayer ids that should appear visible. Used with feature layers that are based on feature collections.",type:"array",items:{type:"number"},title:"visibleLayers"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"},timeAnimation:{description:"This property is applicable to layers that support time. If 'true', timeAnimation is enabled.",type:"boolean",title:"timeAnimation"}},required:["id","layerType"]},IGeoRssLayer:{type:"object",properties:{layerType:{description:"String indicating the layer type.",type:"string",const:"GeoRSS",title:"layerType"},lineSymbol:{description:"Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have lines, this property is not added to the layer JSON.",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},pointSymbol:{description:"Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have points, this property is not added to the layer JSON.",$ref:"#/definitions/IPictureMarkerSymbol",title:"pointSymbol"},polygonSymbol:{description:"Defined by the GeoRSS to JSON request service. If the GeoRSS feed does not have polygons, this property is not added to the layer JSON.",$ref:"#/definitions/ISimpleFillSymbol",title:"polygonSymbol"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",type:"number",title:"refreshInterval"},type:{description:"Deprecated, please use layerType.",const:"GeoRSS",type:"string",title:"type"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IGeoRssLayer"},IKmlLayer:{type:"object",properties:{layerType:{description:"String indicating the layer type.",type:"string",const:"KML",title:"layerType"},maxScale:{description:"A number representing the maximum scale at which the layer will be visible. The number is the scale's denominator.",title:"maxScale"},minScale:{description:"A number representing the minimum scale at which the layer will be visible. The number is the scale's denominator.",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",title:"opacity"},refreshInterval:{description:"Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled.",title:"refreshInterval"},showLegend:{description:"Indicates whether to allow map authors the ability to control what layers should be shown in a client's legend.",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",title:"title"},type:{description:"Deprecated, use layerType instead.",const:"KML",type:"string",title:"type"},visibleFolders:{description:"Array of numeric IDs of folders that will be made visible.",type:"array",items:{type:"number"},title:"visibleFolders"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IKmlLayer"},IArcGisStreamLayer:{type:"object",properties:{definitionEditor:{description:"Stores interactive filters.",$ref:"#/definitions/IDefinitionEditor",title:"definitionEditor"},disablePopup:{description:"Indicates whether to ignore popups defined by the service item.",type:"boolean",title:"disablePopup"},layerDefinition:{description:"A layerDefinition object defining the attribute schema and drawing information for the layer.",$ref:"#/definitions/ILayerDefinition",title:"layerDefinition"},layerType:{description:"String indicating the layer type.",type:"string",const:"ArcGISStreamLayer",title:"layerType"},popupInfo:{description:"A popupInfo object defining the content of pop-up windows when you click or query a feature.",$ref:"#/definitions/IPopupInfo",title:"popupInfo"},id:{description:"A unique identifying string for the layer.",title:"id"},name:{description:"Layer name",type:"string",title:"name"},itemId:{description:"Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal.",type:"string",title:"itemId"},maxScale:{description:"Integer property used to determine the maximum scale at which the layer is displayed.",type:"number",title:"maxScale"},minScale:{description:"Integer property used to determine the minimum scale at which the layer is displayed.",type:"number",title:"minScale"},opacity:{description:"The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency.",type:"number",title:"opacity"},showLegend:{description:"Boolean property indicating whether to display in the legend.",type:"boolean",title:"showLegend"},title:{description:"A user-friendly string title for the layer that can be used in a table of contents.",type:"string",title:"title"},type:{description:"Deprecated, use layerType instead.",type:"string",title:"type"},visibility:{description:"Boolean property determining whether the layer is initially visible in the web map.",type:"boolean",title:"visibility"},url:{description:"The URL to the layer. Not applicable to all layer types.",type:"string",title:"url"}},required:["id","layerType"],title:"IArcGisStreamLayer"},SupportedLayer:{description:"Supported layer type for ArcGIS charts.",anyOf:[{$ref:"#/definitions/__esri.FeatureLayer"},{$ref:"#/definitions/__esri.SubtypeSublayer"}],title:"SupportedLayer"},RGBObject:{description:"JSON representation of the color object",title:"RGBObject",type:"object",properties:{r:{type:"number",title:"r"},g:{type:"number",title:"g"},b:{type:"number",title:"b"},a:{default:1,type:"number",title:"a"}},required:["b","g","r"]},IRendererSymbol:{title:"IRendererSymbol",allOf:[{$ref:"#/definitions/ISymbol"},{type:"object",properties:{style:{enum:["esriSFSBackwardDiagonal","esriSFSCross","esriSFSDiagonalCross","esriSFSForwardDiagonal","esriSFSHorizontal","esriSFSNull","esriSFSSolid","esriSFSVertical","esriSLSDash","esriSLSDashDot","esriSLSDashDotDot","esriSLSDot","esriSLSNull","esriSLSSolid","esriSMSCircle","esriSMSCross","esriSMSDiamond","esriSMSSquare","esriSMSTriangle","esriSMSX"],type:"string",title:"style"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},outline:{$ref:"#/definitions/ISimpleLineSymbol",title:"outline"},label:{type:"string",title:"label"}},required:["color"]}]},RGBArray:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3,title:"RGBArray"},WebChartDataItemColor:{anyOf:[{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{$ref:"#/definitions/RGBObject"},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},{type:"string"}],title:"WebChartDataItemColor"},WebChartDataItemValue:{anyOf:[{type:"array",items:{type:"string"}},{$ref:"#/definitions/IExtent"},{type:"array",items:{type:"number"}},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{$ref:"#/definitions/RGBObject"},{$ref:"#/definitions/IRendererSymbol"},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},{type:"string",format:"date-time"},{type:"array",items:{$ref:"#/definitions/WebChartDataItem"}},{type:["null","string","number","boolean"]}],title:"WebChartDataItemValue"},WebChartDataItem:{description:"JSON representation of a typical data item",title:"WebChartDataItem",type:"object"},WebChartBoxPlotDataItem:{description:"JSON representation of the processed data for a Box Plot",title:"WebChartBoxPlotDataItem",type:"object",properties:{dataItems:{type:"array",items:{$ref:"#/definitions/WebChartDataItem"},title:"dataItems"},outliers:{type:"array",items:{$ref:"#/definitions/WebChartDataItem"},title:"outliers"},meanLines:{type:"array",items:{$ref:"#/definitions/WebChartDataItem"},title:"meanLines"}},required:["dataItems"]},WebChartScatterPlotDataItem:{description:"JSON representation of the processed data for a Scatter plot",title:"WebChartScatterPlotDataItem",type:"object",properties:{r2:{type:"number",title:"r2"},trendLinePoints:{type:"array",items:[{$ref:"#/definitions/WebChartDataItem"},{$ref:"#/definitions/WebChartDataItem"}],minItems:2,maxItems:2,title:"trendLinePoints"},dataItems:{type:"array",items:{$ref:"#/definitions/WebChartDataItem"},title:"dataItems"}},required:["dataItems"]},TimeIntervalInfo:{title:"TimeIntervalInfo",type:"object",properties:{timeIntervalUnits:{description:"Represents the different types of time intervals that can be applied to a chart using the time binning feature.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"timeIntervalUnits"},timeIntervalSize:{type:"number",title:"timeIntervalSize"}}},WebChartGenericDataItem:{description:"JSON representation of the generic data structure for bar, line bar-line, gauge and pie chart",title:"WebChartGenericDataItem",type:"object",properties:{dataItems:{type:"array",items:{$ref:"#/definitions/WebChartDataItem"},title:"dataItems"},timeIntervalInfo:{description:"Time interval information, only for line charts",$ref:"#/definitions/TimeIntervalInfo",title:"timeIntervalInfo"}},required:["dataItems"]},WebChartBin:{description:"JSON representation of a Histogram bin",title:"WebChartBin",type:"object",properties:{count:{type:"number",title:"count"},minValue:{description:"Min value in the bin",type:"number",title:"minValue"},maxValue:{description:"Max value in the bin",type:"number",title:"maxValue"},symbol:{description:"JSON representation of a typical data item",$ref:"#/definitions/WebChartDataItem",title:"symbol"}},required:["count","maxValue","minValue"]},WebChartHistogramDataItem:{description:"JSON representation of the processed data for a Histogram",title:"WebChartHistogramDataItem",type:"object",properties:{mean:{type:"number",title:"mean"},median:{type:"number",title:"median"},stddev:{type:"number",title:"stddev"},max:{type:"number",title:"max"},min:{type:"number",title:"min"},sum:{description:"Sum of the values of all the points",type:"number",title:"sum"},count:{description:"Number of all the points/features in un-binned data (including only non-null entries)",type:"number",title:"count"},nulls:{description:"Number of null entries in the pool of points",type:"number",title:"nulls"},bins:{type:"array",items:{$ref:"#/definitions/WebChartBin"},title:"bins"}},required:["bins","max","mean","median","min","stddev"]},WebChartDataTypes:{anyOf:[{$ref:"#/definitions/WebChartBoxPlotDataItem"},{$ref:"#/definitions/WebChartScatterPlotDataItem"},{$ref:"#/definitions/WebChartGenericDataItem"},{$ref:"#/definitions/WebChartHistogramDataItem"}],title:"WebChartDataTypes"},ValueConversion:{description:"Stores information regarding a numeric conversion",title:"ValueConversion",type:"object",properties:{factor:{description:"A numeric value multiplying the value to convert",type:"number",title:"factor"},offset:{description:"A numeric offset to apply to the value to convert",type:"number",title:"offset"}}},WebChartAxisScrollBar:{description:"Describes the properties of an axis scrollbar",title:"WebChartAxisScrollBar",type:"object",properties:{visible:{description:"Scrollbar visibility",default:!1,type:"boolean",title:"visible"},width:{description:"Scrollbar width in pixels",type:"number",title:"width"},color:{description:"Scrollbar color",type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},gripSize:{description:"Grip size in pixels",type:"number",title:"gripSize"},margin:{description:"Margin between the scrollbar and the series container in pixels",type:"number",title:"margin"}}},WebChartTextSymbol:{description:"Represents a text symbol.",title:"WebChartTextSymbol",allOf:[{$ref:'#/definitions/Omit<ITextSymbol,"xoffset"|"yoffset">'},{type:"object",properties:{xoffset:{description:'Horizontal offset. Can be a number for a fixed value in pixels, or a string as "25%" for a value\nrelative to the label\'s container width.',type:["string","number"],title:"xoffset"},yoffset:{description:'Horizontal offset. Can be a number for a fixed value in pixels, or a string as "25%" for a value\nrelative to the label\'s container height.',type:["string","number"],title:"yoffset"}}}]},WebChartText:{description:"Stores info on how some text is rendered on the chart and whether it is visible or not.",title:"WebChartText",type:"object",properties:{type:{description:'Represents a unique string identifier for the ChartText object. For ChartText object, it is "chartText".',type:"string",const:"chartText",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},content:{$ref:"#/definitions/WebChartTextSymbol",description:"Contains the styling info and text content. Details on **esriTS** are [here](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm).",title:"content"}},required:["content","type"]},WebChartCursorCrosshair:{description:"JSON representation of the cursor's crosshair for a chart.",title:"WebChartCursorCrosshair",type:"object",properties:{type:{description:"Represents a unique string identifier for the chart cursor's crosshair.",type:"string",const:"cursorCrosshair",title:"type"},style:{description:"Contains styling info on how the chart cursor's crosshair should be rendered.",$ref:"#/definitions/ISimpleLineSymbol",title:"style"},verticalLineVisible:{description:"Indicates whether the vertical crosshair line should be displayed",default:!1,type:"boolean",title:"verticalLineVisible"},horizontalLineVisible:{description:"Indicates whether the horizontal crosshair line should be displayed",default:!1,type:"boolean",title:"horizontalLineVisible"}},required:["type"]},WebChartLegend:{description:"JSON representation of the Chart's legend box",title:"WebChartLegend",type:"object",properties:{type:{description:'Represents a unique string identifier for the ChartLegend object. For ChartLegend object, it is "chartLegend".',type:"string",const:"chartLegend",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},title:{description:"Contains styling info on how the title of the legend box should be rendered",$ref:"#/definitions/WebChartText",title:"title"},body:{description:"Contains styling info on how legend body (excluding the **title**) should be rendered.\nWill use default styling if not provided.",$ref:"#/definitions/WebChartTextSymbol",title:"body"},position:{description:'Positions the legends at `"right"`, `"left"`, `"top"`, or `"bottom"` of the chart.',default:"WebChartLegendPositions.Right",enum:["bottom","left","right","top"],type:"string",title:"position"},maxHeight:{description:"Legend's maximum height. If not set the legend will occupy the same height as the series container or pie chart.",default:null,type:["null","number"],title:"maxHeight"},roundMarkers:{description:"Allows the legend markers to be displayed as circles. If the property is to:\n- `false` or `undefined` they will be rounded rectangles\n- `true` they will be circles",default:!1,type:"boolean",title:"roundMarkers"}},required:["type"]},WebChartPieChartLegend:{description:"Specific legend for the Pie chart",title:"WebChartPieChartLegend",type:"object",properties:{displayNumericValue:{description:"Indicates whether the numeric value associated to a slice is to be displayed in the legend.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`",default:!1,type:"boolean",title:"displayNumericValue"},displayPercentage:{description:"Indicates whether the percentage to a slice is to be displayed in the legend.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`",default:!1,type:"boolean",title:"displayPercentage"},labelMaxWidth:{description:"Maximum width in pixels of the label displaying the slice name. If the label is larger than the maximum width, it will automatically wrap.",default:200,type:"number",title:"labelMaxWidth"},valueLabelMaxWidth:{description:"Maximum width in pixels of the label displaying the slice name. If the label is larger than the maximum width, it will automatically wrap.",default:200,type:"number",title:"valueLabelMaxWidth"},type:{description:'Represents a unique string identifier for the ChartLegend object. For ChartLegend object, it is "chartLegend".',type:"string",const:"chartLegend",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},title:{description:"Contains styling info on how the title of the legend box should be rendered",$ref:"#/definitions/WebChartText",title:"title"},body:{description:"Contains styling info on how legend body (excluding the **title**) should be rendered.\nWill use default styling if not provided.",$ref:"#/definitions/WebChartTextSymbol",title:"body"},position:{description:'Positions the legends at `"right"`, `"left"`, `"top"`, or `"bottom"` of the chart.',default:"WebChartLegendPositions.Right",enum:["bottom","left","right","top"],type:"string",title:"position"},maxHeight:{description:"Legend's maximum height. If not set the legend will occupy the same height as the series container or pie chart.",default:null,type:["null","number"],title:"maxHeight"},roundMarkers:{description:"Allows the legend markers to be displayed as circles. If the property is to:\n- `false` or `undefined` they will be rounded rectangles\n- `true` they will be circles",default:!1,type:"boolean",title:"roundMarkers"}},required:["type"]},WebChartOverlay:{description:"JSON representation of the chart's overlays like trendline scatter plot, and median in histogram",title:"WebChartOverlay",type:"object",properties:{type:{description:'Represents a unique string identifier for the ChartOverlay object. For ChartOverlay object, it is "chartOverlay".',type:"string",const:"chartOverlay",title:"type"},created:{description:"Determines whether the overlay is created under the hood. It may or may not be visible.",default:!1,type:"boolean",title:"created"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},symbol:{description:"Contains styling info on how the overlay should be rendered\nIf not provided a default style is applied.",$ref:"#/definitions/ISimpleLineSymbol",title:"symbol"}},required:["type"]},NumberFormatOptions:{description:"Defines how the numerical(value) axis data should be formatted.",title:"NumberFormatOptions",type:"object",properties:{type:{description:'Represents a unique string identifier for the NumberFormatOptions object. For NumberFormatOptions object, it is "number". It can help us to differentiate numerical (value) axis from other types of axes viz., date-time axis and category axis.',type:"string",const:"number",title:"type"},intlOptions:{$ref:"#/definitions/Intl.NumberFormatOptions",description:"Represents the JS native [Intl.NumberFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat), which is based on [CLDR](http://cldr.unicode.org/translation/numbers-currency/number-patterns) specifications.",title:"intlOptions"}},required:["intlOptions","type"]},WebChartDateTimeUnitFormatOptions:{description:'Interface used by the axis `valueFormat` property to describe how to format specific date and time units when displayed on the axis.\nFor instance:\n"year": { year: "numeric" }\n"month": { month: "numeric" }\n"day": { day: "2-digit" }\n"hour": { day: "numeric" }\n"minute": { minute: "numeric" }\n"second": { second: "numeric" }\nReference: https://tc39.es/ecma402/#sec-datetimeformat-abstracts',title:"WebChartDateTimeUnitFormatOptions",type:"object",properties:{year:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"year"},month:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"month"},day:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"day"},hour:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"hour"},minute:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"minute"},second:{$ref:"#/definitions/Intl.DateTimeFormatOptions",title:"second"}}},CategoryFormatOptions:{description:"Defines how the category axis data (Categories) should be formatted.",title:"CategoryFormatOptions",type:"object",properties:{type:{description:'Represents a unique string identifier for the CategoryFormatOptions object. For CategoryFormatOptions object, it is "category". It can help us to differentiate category axis from other types of axes, viz., date-time axis and numeric (value) axis.',type:"string",const:"category",title:"type"},characterLimit:{description:"Represents a positive integer which represents the limit on the number of characters to be displayed for all the category strings. The truncated string are appended with `...`. If property is not present or `null`, no truncation is done.",minimum:1,multipleOf:1,type:["null","number"],title:"characterLimit"}},required:["type"]},WebChartGuide:{description:"JSON representation of the chart's guide object. Can be used to represent both line and fill guides.",title:"WebChartGuide",type:"object",properties:{type:{description:'Represents a unique string identifier for the Guide object. For Guide class, it is "chartGuide".',type:"string",const:"chartGuide",title:"type"},start:{description:"Determines the value where the guide should begin.",anyOf:[{type:"string",format:"date-time"},{type:["null","string","number"]}],title:"start"},end:{description:"Determines the value where the guide should end. If it is not specified, we get a line guide, otherwise we get a fill/rectangular guide.",anyOf:[{type:"string",format:"date-time"},{type:["null","string","number"]}],title:"end"},style:{description:"Determines how the guide should be rendered. Line guide requires [esriSLS](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm) format, and fill guide requires [esriSFS](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm) format.",anyOf:[{$ref:"#/definitions/ISimpleLineSymbol"},{$ref:"#/definitions/ISimpleFillSymbol"}],title:"style"},name:{description:"A unique string identifier which is used to refer to a particular guide. It is displayed in the Chart Authoring UI to differentiate between different guides.",type:"string",title:"name"},label:{description:"Defines a text label for the given guide. It is displayed on the chart next to the concerned guide and is styled using **esriTS** format.",$ref:"#/definitions/WebChartTextSymbol",title:"label"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},above:{description:"Determines whether the guide should be rendered on top of (overlapping) the series or under the series.",default:!1,type:"boolean",title:"above"},tooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the guide's tooltip background (false) or its outline (true).",default:!1,type:"boolean",title:"tooltipReverseColor"}},required:["name","start","style","type"]},WebChartAxis:{description:"JSON representation of the chart's axis object",title:"WebChartAxis",type:"object",properties:{type:{description:'Represents a unique string identifier for the WebChartAxis object. For ChartAxis object, it is "chartAxis".',type:"string",const:"chartAxis",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},isLogarithmic:{description:"Specifies whether the axis has a logarithmic scale or not.",default:!1,type:"boolean",title:"isLogarithmic"},title:{description:"Contains styling info on how the title of the axis should be rendered",$ref:"#/definitions/WebChartText",title:"title"},valueFormat:{description:"Specifies how numerical/categorical/date-time values should be formatted.",anyOf:[{$ref:"#/definitions/NumberFormatOptions"},{$ref:"#/definitions/DateTimeFormatOptions"},{$ref:"#/definitions/CategoryFormatOptions"}],title:"valueFormat"},minimum:{description:"The minimum value which the axis should represent, when it is not defined or null, then the minimum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"minimum"},maximum:{description:"The maximum value which the axis should represent, when it is not defined or null, then the maximum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"maximum"},grid:{description:"Dictates how the grid lines associated with a particular axis should be rendered.",$ref:"#/definitions/ISimpleLineSymbol",title:"grid"},guides:{description:"Represent an array of guides that should be rendered onto the axis.",type:"array",items:{$ref:"#/definitions/WebChartGuide"},title:"guides"},lineSymbol:{description:"Contains styling info on how the axis line should be rendered.\nIf not provided a default style is applied.",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},labels:{$ref:"#/definitions/WebChartText",description:"Contains styling info on how the axis labels should be rendered.",title:"labels"},scrollbar:{description:"Represents the axis scrollbar style and visibility",$ref:"#/definitions/WebChartAxisScrollBar",title:"scrollbar"},displayZeroLine:{description:"Represents an option to hide/un-hide the zero line on value axis",default:!1,type:"boolean",title:"displayZeroLine"},integerOnlyValues:{description:"Represents an option to show `integer-only` values for a value axis",default:!1,type:"boolean",title:"integerOnlyValues"},displayCursorTooltip:{description:"Specifies whether cursor tooltip should be displayed.",default:!1,type:"boolean",title:"displayCursorTooltip"},buffer:{description:"Allows setting a buffer to a **value axis** to provide some space around the series.",default:!1,type:"boolean",title:"buffer"},tickSpacing:{description:"The desired minimum distance between two adjacent axis ticks. The actual distance may fluctuate depending on the chart's size.\nWhen not provided a default value is assigned according to the axis type and axis labels behavior.",minimum:1,type:"number",title:"tickSpacing"}},required:["labels","type","valueFormat"]},WebChartGaugeAxisTick:{description:"JSON representation of the gauge axis ticks. Currently only used by WebChartGaugeAxis.",title:"WebChartGaugeAxisTick",type:"object",properties:{type:{description:'Represents a unique string identifier for the GaugeAxisTick object. For WebChartGaugeAxisTick object, it is "gaugeAxisTick".',type:"string",const:"gaugeAxisTick",title:"type"},visible:{description:"Determines the visibility of the axis ticks.",default:!0,type:"boolean",title:"visible"}},required:["type"]},WebChartNeedle:{description:"JSON representation of a gauge needle.",title:"WebChartNeedle",type:"object",properties:{type:{description:'Represents a unique string identifier for the ChartNeedle object. For WebChartNeedle object, it is "gaugeNeedle".',type:"string",const:"gaugeNeedle",title:"type"},visible:{description:"Hides or shows the needle.",default:!0,type:"boolean",title:"visible"},symbol:{description:"Contains styling info on how the needle should be rendered",$ref:"#/definitions/ISimpleFillSymbol",title:"symbol"},startWidth:{description:"Represents the needle's thickness at the bottom (chart's center), in px",minimum:1,default:10,type:["null","number"],title:"startWidth"},endWidth:{description:"Represents the needle's thickness at the top, in px",minimum:1,default:1,type:["null","number"],title:"endWidth"},innerRadius:{description:"Represents the size of the hole in the middle of the chart. Can be visualized when guides are displayed.",minimum:0,maximum:100,default:25,type:["null","number"],title:"innerRadius"},displayPin:{description:"Hides or shows the needle's pin (centroid circle)",default:!1,type:"boolean",title:"displayPin"}},required:["type"]},WebChartGaugeAxis:{description:"JSON representation of the gauge chart's axis object. Inherits from the WebChartAxis properties.",title:"WebChartGaugeAxis",type:"object",properties:{innerLabel:{description:"Specifies how the axis' inner label needs to be displayed",$ref:"#/definitions/WebChartText",title:"innerLabel"},needle:{description:"Specifies how the axis' needle needs to be displayed",$ref:"#/definitions/WebChartNeedle",title:"needle"},ticks:{description:"Specifies how the axis' ticks need to be displayed",$ref:"#/definitions/WebChartGaugeAxisTick",title:"ticks"},labelsIncrement:{description:"If a label has a value being a multiple of that property, it will be displayed. Otherwise it will be hidden.\n\nIf the property is `undefined` or 0, the chart will be displayed with 6 axis labels distributed evenly along\nthe axis min and max.\n\nIf the property has a value that results in more than a set limit of axis labels (25 as defined in `ChartDefaults.gauge.maximumNumberOfLabelIntervals`)\nthis property value will be ignored and the chart will be displayed with only axis min/max with 4 ticks in between.",default:"undefined",type:"number",title:"labelsIncrement"},onlyShowFirstAndLastLabels:{description:"Specifies if only the first and last labels need to be displayed. If set to `true` all the other labels\nwill be hidden.\nTheir visibility still depends on the axis labels visibility (WebChartAxis.labels.visible).",default:!1,type:"boolean",title:"onlyShowFirstAndLastLabels"},minimumValueConversion:{description:"Defines how to convert the axis minimum",$ref:"#/definitions/ValueConversion",title:"minimumValueConversion"},maximumValueConversion:{description:"Defines how to convert the axis maximum",$ref:"#/definitions/ValueConversion",title:"maximumValueConversion"},minimumFromField:{description:"If used with a gauge by feature:\n- `minimumFromField` is expected to be a field name. The value from that field for the given feature is mapped to the axis minimum value\nIf used with a statistic gauge:\n- If `minimumFromField` is set to a field name (string), the minimum from that field is mapped to the axis minimum value\n- If it is set to an `IStatisticDefinition` the statistic (min, max, avg...) from the given field is mapped to the axis minimum value\nWhen `minimumFromField` is not provided or when it leads to an invalid value, the `minimum` value from the axis config, if provided, or\nthe default value of 0, in that order, will be used.",anyOf:[{$ref:"#/definitions/IStatisticDefinition"},{type:"string"}],title:"minimumFromField"},maximumFromField:{description:"If used with a gauge by feature:\n- `maximumFromField` is expected to be a field name. The value from that field for the given feature is mapped to the axis maximum value\nIf used with a statistic gauge:\n- If `maximumFromField` is set to a field name (string), the maximum from that field is mapped to the axis maximum value\n- If it is set to an `IStatisticDefinition` the statistic (min, max, avg...) from the given field is mapped to the axis maximum value\nWhen `maximumFromField` is not provided or when it leads to an invalid value, the `maximum` value from the axis config, if provided, or\nthe default value of 0, in that order, will be used.",anyOf:[{$ref:"#/definitions/IStatisticDefinition"},{type:"string"}],title:"maximumFromField"},type:{description:'Represents a unique string identifier for the WebChartAxis object. For ChartAxis object, it is "chartAxis".',type:"string",const:"chartAxis",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},isLogarithmic:{description:"Specifies whether the axis has a logarithmic scale or not.",default:!1,type:"boolean",title:"isLogarithmic"},title:{description:"Contains styling info on how the title of the axis should be rendered",$ref:"#/definitions/WebChartText",title:"title"},valueFormat:{description:"Specifies how numerical/categorical/date-time values should be formatted.",anyOf:[{$ref:"#/definitions/NumberFormatOptions"},{$ref:"#/definitions/DateTimeFormatOptions"},{$ref:"#/definitions/CategoryFormatOptions"}],title:"valueFormat"},minimum:{description:"The minimum value which the axis should represent, when it is not defined or null, then the minimum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"minimum"},maximum:{description:"The maximum value which the axis should represent, when it is not defined or null, then the maximum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"maximum"},grid:{description:"Dictates how the grid lines associated with a particular axis should be rendered.",$ref:"#/definitions/ISimpleLineSymbol",title:"grid"},guides:{description:"Represent an array of guides that should be rendered onto the axis.",type:"array",items:{$ref:"#/definitions/WebChartGuide"},title:"guides"},lineSymbol:{description:"Contains styling info on how the axis line should be rendered.\nIf not provided a default style is applied.",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},labels:{$ref:"#/definitions/WebChartText",description:"Contains styling info on how the axis labels should be rendered.",title:"labels"},scrollbar:{description:"Represents the axis scrollbar style and visibility",$ref:"#/definitions/WebChartAxisScrollBar",title:"scrollbar"},displayZeroLine:{description:"Represents an option to hide/un-hide the zero line on value axis",default:!1,type:"boolean",title:"displayZeroLine"},integerOnlyValues:{description:"Represents an option to show `integer-only` values for a value axis",default:!1,type:"boolean",title:"integerOnlyValues"},displayCursorTooltip:{description:"Specifies whether cursor tooltip should be displayed.",default:!1,type:"boolean",title:"displayCursorTooltip"},buffer:{description:"Allows setting a buffer to a **value axis** to provide some space around the series.",default:!1,type:"boolean",title:"buffer"},tickSpacing:{description:"The desired minimum distance between two adjacent axis ticks. The actual distance may fluctuate depending on the chart's size.\nWhen not provided a default value is assigned according to the axis type and axis labels behavior.",minimum:1,type:"number",title:"tickSpacing"}},required:["labels","type","valueFormat"]},WebChartRadarChartAxis:{description:"JSON representation of the radar chart's axis object.",title:"WebChartRadarChartAxis",type:"object",properties:{labelsOrientation:{description:"Defines the labels orientation",default:"WebChartRadarChartAxisLabelsOrientation.Circular",enum:["circular","horizontal","radial"],type:"string",title:"labelsOrientation"},type:{description:'Represents a unique string identifier for the WebChartAxis object. For ChartAxis object, it is "chartAxis".',type:"string",const:"chartAxis",title:"type"},visible:{description:"Determines the visibility of the content.",default:!0,type:"boolean",title:"visible"},isLogarithmic:{description:"Specifies whether the axis has a logarithmic scale or not.",default:!1,type:"boolean",title:"isLogarithmic"},title:{description:"Contains styling info on how the title of the axis should be rendered",$ref:"#/definitions/WebChartText",title:"title"},valueFormat:{description:"Specifies how numerical/categorical/date-time values should be formatted.",anyOf:[{$ref:"#/definitions/NumberFormatOptions"},{$ref:"#/definitions/DateTimeFormatOptions"},{$ref:"#/definitions/CategoryFormatOptions"}],title:"valueFormat"},minimum:{description:"The minimum value which the axis should represent, when it is not defined or null, then the minimum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"minimum"},maximum:{description:"The maximum value which the axis should represent, when it is not defined or null, then the maximum value for the corresponding axis is automatically calculated.",type:["null","number"],title:"maximum"},grid:{description:"Dictates how the grid lines associated with a particular axis should be rendered.",$ref:"#/definitions/ISimpleLineSymbol",title:"grid"},guides:{description:"Represent an array of guides that should be rendered onto the axis.",type:"array",items:{$ref:"#/definitions/WebChartGuide"},title:"guides"},lineSymbol:{description:"Contains styling info on how the axis line should be rendered.\nIf not provided a default style is applied.",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},labels:{$ref:"#/definitions/WebChartText",description:"Contains styling info on how the axis labels should be rendered.",title:"labels"},scrollbar:{description:"Represents the axis scrollbar style and visibility",$ref:"#/definitions/WebChartAxisScrollBar",title:"scrollbar"},displayZeroLine:{description:"Represents an option to hide/un-hide the zero line on value axis",default:!1,type:"boolean",title:"displayZeroLine"},integerOnlyValues:{description:"Represents an option to show `integer-only` values for a value axis",default:!1,type:"boolean",title:"integerOnlyValues"},displayCursorTooltip:{description:"Specifies whether cursor tooltip should be displayed.",default:!1,type:"boolean",title:"displayCursorTooltip"},buffer:{description:"Allows setting a buffer to a **value axis** to provide some space around the series.",default:!1,type:"boolean",title:"buffer"},tickSpacing:{description:"The desired minimum distance between two adjacent axis ticks. The actual distance may fluctuate depending on the chart's size.\nWhen not provided a default value is assigned according to the axis type and axis labels behavior.",minimum:1,type:"number",title:"tickSpacing"}},required:["labels","type","valueFormat"]},WebChartQuery:{description:"Chart query object inspired by [JSAPI Query](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html) class.",type:"object",properties:{outFields:{description:"Attribute fields to include in the FeatureSet. Will have an effect on chart with no aggregation.",type:"array",items:{type:"string"},title:"outFields"},where:{description:"Acts as a filter on the base data for attribute-based filtering, expect for bar/line charts for which is is used to handle the split-by field values.",type:"string",title:"where"},groupByFieldsForStatistics:{description:"An array of fields which determine how the base data is grouped. Only one **groupBy** Field is supported, but ArcGIS JSAPI [supports multiple groupBy fields](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#groupByFieldsForStatistics). While splitting by multiple group-by fields is possible, it is not being done because of the number of series it will give rise to (equal to the length of the Cartesian product set) possibly making the visualization hard to interpret.",maxItems:1,type:"array",items:{type:"string"},title:"groupByFieldsForStatistics"},outStatistics:{description:"Represents an array of statistics definitions which dictate how a particular field should be aggregated. Refer to [JSAPI Statistics Definition class](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-StatisticDefinition.html) for more info.",type:"array",items:{$ref:"#/definitions/IStatisticDefinition"},title:"outStatistics"},orderByFields:{description:"Represents the sorting order of the output result. More info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending.",type:"array",items:{type:"string"},title:"orderByFields"},gdbVersion:{description:"Specifies the geodatabase version to display for feature service queries.",type:"string",title:"gdbVersion"},geometry:{description:"The geometry to apply to the spatial filter. A buffer can be applied to it by setting the properties `distance` and `units`.",anyOf:[{$ref:"#/definitions/IPoint"},{$ref:"#/definitions/IPolyline"},{$ref:"#/definitions/IPolygon"},{$ref:"#/definitions/IPolygonWithCurves"},{$ref:"#/definitions/IEnvelope"},{$ref:"#/definitions/IExtent"}],title:"geometry"},distance:{description:"Specifies a search distance for the `geometry`. To be associated with the `units` property. For compatible layers only.",type:"number",title:"distance"},units:{description:"The unit for calculating the buffer distance when `distance` and `geometry` are provided.\nIf not specified, the unit is derived from the geometry spatial reference.",enum:["feet","kilometers","meters","miles","nautical-miles","us-nautical-miles"],type:"string",title:"units"},timeExtent:{description:"A time extent ([timestamp, timestamp]) for a temporal query against time-aware layers.",type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"timeExtent"},start:{description:"The zero-based index indicating where to begin retrieving features.",type:"number",title:"start"},num:{description:"The number of features to retrieve.",type:"number",title:"num"},returnDistinctValues:{description:"If true then the query returns distinct values based on the field(s) specified in outFields. Available for count-based aggregations only.",default:!1,type:"boolean",title:"returnDistinctValues"},fetchNullValues:{description:"Indicates whether to fetch null values for them to be counted or displayed as categories on the chart.",default:!1,type:"boolean",title:"fetchNullValues"}},title:"WebChartQuery"},WebChartSeriesQuery:{description:"Subset of the WebChartQuery, used at the series level",title:"WebChartSeriesQuery",type:"object",properties:{outFields:{description:"Attribute fields to include in the FeatureSet. Will have an effect on chart with no aggregation.",type:"array",items:{type:"string"},title:"outFields"},where:{description:"Acts as a filter on the base data for attribute-based filtering, expect for bar/line charts for which is is used to handle the split-by field values.",type:"string",title:"where"},groupByFieldsForStatistics:{description:"An array of fields which determine how the base data is grouped. Only one **groupBy** Field is supported, but ArcGIS JSAPI [supports multiple groupBy fields](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#groupByFieldsForStatistics). While splitting by multiple group-by fields is possible, it is not being done because of the number of series it will give rise to (equal to the length of the Cartesian product set) possibly making the visualization hard to interpret.",maxItems:1,type:"array",items:{type:"string"},title:"groupByFieldsForStatistics"},outStatistics:{description:"Represents an array of statistics definitions which dictate how a particular field should be aggregated. Refer to [JSAPI Statistics Definition class](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-StatisticDefinition.html) for more info.",type:"array",items:{$ref:"#/definitions/IStatisticDefinition"},title:"outStatistics"},returnDistinctValues:{description:"If true then the query returns distinct values based on the field(s) specified in outFields. Available for count-based aggregations only.",default:!1,type:"boolean",title:"returnDistinctValues"},fetchNullValues:{description:"Indicates whether to fetch null values for them to be counted or displayed as categories on the chart.",default:!1,type:"boolean",title:"fetchNullValues"}}},WebChartDataFilters:{description:"JSON representation of filters applied to the data",title:"WebChartDataFilters",type:"object",properties:{distance:{description:"Specifies a search distance for the `geometry`. To be associated with the `units` property. For compatible layers only.",type:"number",title:"distance"},gdbVersion:{description:"Specifies the geodatabase version to display for feature service queries.",type:"string",title:"gdbVersion"},geometry:{description:"The geometry to apply to the spatial filter. A buffer can be applied to it by setting the properties `distance` and `units`.",anyOf:[{$ref:"#/definitions/IPoint"},{$ref:"#/definitions/IPolyline"},{$ref:"#/definitions/IPolygon"},{$ref:"#/definitions/IPolygonWithCurves"},{$ref:"#/definitions/IEnvelope"},{$ref:"#/definitions/IExtent"}],title:"geometry"},timeExtent:{description:"A time extent ([timestamp, timestamp]) for a temporal query against time-aware layers.",type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2,title:"timeExtent"},units:{description:"The unit for calculating the buffer distance when `distance` and `geometry` are provided.\nIf not specified, the unit is derived from the geometry spatial reference.",enum:["feet","kilometers","meters","miles","nautical-miles","us-nautical-miles"],type:"string",title:"units"},where:{description:"Acts as a filter on the base data for attribute-based filtering, expect for bar/line charts for which is is used to handle the split-by field values.",type:"string",title:"where"}}},WebChartSeries:{description:"JSON representation of the chart's series object. All other series extends this interface.",type:"object",properties:{type:{type:"string",title:"type"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x"],title:"WebChartSeries"},WebChartTemporalSeries:{description:"Describes the properties related to a temporal series",type:"object",properties:{binTemporalData:{description:"Whether to use the time properties to bin the temporal data.\nIf set to `false` the `timeIntervalSize` and `timeIntervalUnits` properties can be used to set the date axis base interval.",default:!0,type:"boolean",title:"binTemporalData"},timeIntervalUnits:{description:"The time unit that corresponds to the `timeIntervalSize`. Valid options include seconds, minutes, hours, days, weeks, months, and years.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"timeIntervalUnits"},timeIntervalSize:{description:"The span of time that will be binned or aggregated together. This property must be used in conjunction with `timeIntervalUnits`.",type:"number",title:"timeIntervalSize"},timeAggregationType:{description:"The time interval alignment type. Valid options include `equalIntervalsFromStartTime` and `equalIntervalsFromEndTime`.",default:"equalIntervalsFromStartTime",enum:["equalIntervalsFromEndTime","equalIntervalsFromStartTime"],type:"string",title:"timeAggregationType"},trimIncompleteTimeInterval:{description:"Determines whether incomplete time intervals at the start or end of the data span (depending on the `timeAggregationType`) will be removed from the chart.\nIncomplete intervals on a chart can cause misleading results in which the period in question is under- or overreported due to a different amount of time in the interval.\nSetting `true` indicates to trim these incomplete intervals. Setting `false` does not trim incomplete intervals.",default:!0,type:"boolean",title:"trimIncompleteTimeInterval"},nullPolicy:{description:"How summarized bins returning a null value are displayed. Supported options are:\n- `null`, `zero`, and `interpolate` for line series\n- `null` and `zero` for bar series",default:"null",enum:["interpolate","null","zero"],type:"string",title:"nullPolicy"}},title:"WebChartTemporalSeries"},WebChartBarChartSeries:{description:"[Bar chart](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/bar-chart.htm) shows the categorical distribution of String/DateTime data.",title:"WebChartBarChartSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the BarChartSeries object. For BarSeries object, it is "barSeries".',type:"string",const:"barSeries",title:"type"},y:{description:"Specifies which field represents the y-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"y"},fillSymbol:{description:"Contains styling info on how the columns/bars should be rendered",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"},hideOversizedStackedLabels:{description:"When true or undefined (default), the labels displayed within a small column or stack are hidden to avoid cluttering.\nWhen false, all the data labels are displayed.",default:!0,type:"boolean",title:"hideOversizedStackedLabels"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"},binTemporalData:{description:"Whether to use the time properties to bin the temporal data.\nIf set to `false` the `timeIntervalSize` and `timeIntervalUnits` properties can be used to set the date axis base interval.",default:!0,type:"boolean",title:"binTemporalData"},timeIntervalUnits:{description:"The time unit that corresponds to the `timeIntervalSize`. Valid options include seconds, minutes, hours, days, weeks, months, and years.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"timeIntervalUnits"},timeIntervalSize:{description:"The span of time that will be binned or aggregated together. This property must be used in conjunction with `timeIntervalUnits`.",type:"number",title:"timeIntervalSize"},timeAggregationType:{description:"The time interval alignment type. Valid options include `equalIntervalsFromStartTime` and `equalIntervalsFromEndTime`.",default:"equalIntervalsFromStartTime",enum:["equalIntervalsFromEndTime","equalIntervalsFromStartTime"],type:"string",title:"timeAggregationType"},trimIncompleteTimeInterval:{description:"Determines whether incomplete time intervals at the start or end of the data span (depending on the `timeAggregationType`) will be removed from the chart.\nIncomplete intervals on a chart can cause misleading results in which the period in question is under- or overreported due to a different amount of time in the interval.\nSetting `true` indicates to trim these incomplete intervals. Setting `false` does not trim incomplete intervals.",default:!0,type:"boolean",title:"trimIncompleteTimeInterval"},nullPolicy:{description:"How summarized bins returning a null value are displayed. Supported options are:\n- `null`, `zero`, and `interpolate` for line series\n- `null` and `zero` for bar series",default:"null",enum:["interpolate","null","zero"],type:"string",title:"nullPolicy"}},required:["id","name","type","x","y"]},HistogramOverlays:{description:"Object containing Histogram overlays",title:"HistogramOverlays",type:"object",properties:{type:{description:'Represents a unique string identifier for the HistogramOverlays object. For HistogramOverlays object, it is "chartOverlays".',type:"string",const:"chartOverlays",title:"type"},mean:{description:"Specifies the mean overlay for histogram.\nIf not provided, the mean overlay is not displayed.",$ref:"#/definitions/WebChartOverlay",title:"mean"},median:{description:"Specifies the median overlay for histogram.\nIf not provided, the median overlay is not displayed.",$ref:"#/definitions/WebChartOverlay",title:"median"},standardDeviation:{description:"Specifies the standard deviation overlay for histogram.\nIf not provided, the standard deviation overlay is not displayed.",$ref:"#/definitions/WebChartOverlay",title:"standardDeviation"},comparisonDistribution:{description:"Specifies the comparison distribution overlay for histogram.\nIf not provided, the comparison distribution overlay is not displayed.",$ref:"#/definitions/WebChartOverlay",title:"comparisonDistribution"}},required:["type"]},WebChartHistogramSeries:{description:"[Histogram](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/histogram.htm) shows the numerical(frequency) distribution of a numerical field.",title:"WebChartHistogramSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the HistogramSeries object. For BarSeries object, it is "histogramSeries".',type:"string",const:"histogramSeries",title:"type"},binCount:{description:"Bin count must be a positive integer.",minimum:1,multipleOf:1,default:32,type:["null","number"],title:"binCount"},overlays:{description:"Specifies the chart overlays. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.\nThe overlays won't show if the property is not defined.",$ref:"#/definitions/HistogramOverlays",title:"overlays"},dataTransformationType:{description:"Specifies how the data should be transformed (e.g. square root, log, etc.) before binning.",enum:["logarithmic","none","squareRoot"],type:"string",title:"dataTransformationType"},fillSymbol:{description:"Contains styling info on how the columns/bars should be rendered",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x"]},ScatterPlotOverlays:{description:"Object containing Scatter Plot overlays",title:"ScatterPlotOverlays",type:"object",properties:{type:{description:'Represents a unique string identifier for the ScatterPlotOverlays object. For ScatterPlotOverlays object, it is "chartOverlays".',type:"string",const:"chartOverlays",title:"type"},trendLine:{description:"Specifies the trendline overlay for scatter plot.\nThe trendline won't show if the property is not defined.",$ref:"#/definitions/WebChartOverlay",title:"trendLine"}},required:["type"]},SizePolicy:{title:"SizePolicy",type:"object",properties:{type:{description:'Represents a unique string identifier for the sizePolicy object. For sizePolicy object, it is "sizeScale".',type:"string",const:"sizeScale",title:"type"},scaleType:{description:"The type of scale to apply to the markers (linear or logarithmic)",default:"SizePolicyScaleTypes.Linear",enum:["linear","logarithmic"],type:"string",title:"scaleType"},field:{description:"The field which determines the markers size",type:"string",title:"field"},minSize:{description:"The minimum marker size",default:5,multipleOf:1,type:"number",title:"minSize"},maxSize:{description:"The maximum marker size",default:30,multipleOf:1,type:"number",title:"maxSize"}},required:["field","type"]},WebChartScatterPlotSeries:{description:"[Scatter plot](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/scatter-plot.htm) shows the relationship between two numerical fields.",title:"WebChartScatterPlotSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the ScatterSeries object. For ScatterSeries object, it is "scatterSeries".',type:"string",const:"scatterSeries",title:"type"},y:{description:"Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"y"},markerSymbol:{description:'Specifies how each data point in the scatter plot should be rendered. The type is `"esriSMS"` and it is adopted from the [REST API Types](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm#GUID-C8D40B32-5F4B-45EB-8048-6D5A8763E13B).',$ref:"#/definitions/ISimpleMarkerSymbol",title:"markerSymbol"},overlays:{description:"Specifies all the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.\nThe overlays won't show if the property is not defined.",$ref:"#/definitions/ScatterPlotOverlays",title:"overlays"},sizePolicy:{description:"Specifies rules to use the scatter plot as bubble plot, by changing dynamically the markers size according to a specific field value",$ref:"#/definitions/SizePolicy",title:"sizePolicy"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x","y"]},WebChartPieChartTick:{description:"JSON representation of the pie ticks.",title:"WebChartPieChartTick",type:"object",properties:{type:{description:'Represents a unique string identifier for the WebChartPieChartTick object. For PieTick object, it is "pieTick".',type:"string",const:"pieTick",title:"type"},visible:{description:"Determines the visibility of the tick.\nAssigning the `true` value will only be considered when the data labels are visible (`series.dataLabels.visible`) and\nwhen the data label associated to the tick is outside of the chart (`series.dataLabelsOffset` > 0).",type:"boolean",title:"visible"},lineSymbol:{description:"Contains styling info on how the pie chart ticks should be rendered",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"}},required:["type"]},WebChartPieChartSlice:{description:"JSON representation of the pie slices",title:"WebChartPieChartSlice",type:"object",properties:{sliceId:{description:"A unique string used identify the slice of a pie chart.",type:"string",title:"sliceId"},originalLabel:{description:"The slice's original label.",anyOf:[{type:"string",format:"date-time"},{type:["null","string","number"]}],title:"originalLabel"},label:{description:"Custom label for the slice.\nFor grouped slice, the default value is `Other`.\nFor regular slice, it will be either the category or field name.",type:"string",title:"label"},fillSymbol:{description:"Contains styling info on how the slice should be rendered. If not provided, the slice will\nbe styled with default values.",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"}},required:["sliceId"]},WebChartPieChartGroupSlice:{description:"JSON representation of the pie grouped slice",title:"WebChartPieChartGroupSlice",type:"object",properties:{percentageThreshold:{description:"Slices that have a percent value equal or lesser to this threshold are grouped into a unique slice",type:"number",title:"percentageThreshold"},dataLabels:{description:"Specifies how the grouped slice data labels should be rendered.\nIf the property is not set the `series.dataLabels` will be used instead.",$ref:"#/definitions/WebChartText",title:"dataLabels"},sliceId:{description:"A unique string used identify the slice of a pie chart.",type:"string",title:"sliceId"},originalLabel:{description:"The slice's original label.",anyOf:[{type:"string",format:"date-time"},{type:["null","string","number"]}],title:"originalLabel"},label:{description:"Custom label for the slice.\nFor grouped slice, the default value is `Other`.\nFor regular slice, it will be either the category or field name.",type:"string",title:"label"},fillSymbol:{description:"Contains styling info on how the slice should be rendered. If not provided, the slice will\nbe styled with default values.",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"}},required:["percentageThreshold","sliceId"]},WebChartPieChartSeries:{description:"JSON representation of the Pie Chart series",title:"WebChartPieChartSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the PieSeries object. For PieSeries object, it is "pieSeries".',type:"string",const:"pieSeries",title:"type"},y:{description:"Specifies which field represents the y-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"y"},innerRadius:{description:"Represents the size of the hole in middle of the chart. The number is used as a percentage rather than a fixed value.",minimum:0,maximum:100,default:50,type:["null","number"],title:"innerRadius"},startAngle:{default:-90,type:["null","number"],title:"startAngle"},endAngle:{default:270,type:["null","number"],title:"endAngle"},fillSymbol:{description:"Contains styling info on how the slices should be rendered",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"},displayNumericValueOnDataLabel:{description:"Indicates whether the numeric value associated to a slice is to be displayed on its data label.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`.\nThis property will be ignored if the chart options `dataLabelFormatter` is provided.",default:!0,type:"boolean",title:"displayNumericValueOnDataLabel"},displayPercentageOnDataLabel:{description:"Indicates whether the percentage associated to a slice is to be displayed on its data label.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`\nThis property will be ignored if the chart options `dataLabelFormatter` is provided.",default:!1,type:"boolean",title:"displayPercentageOnDataLabel"},displayNumericValueOnTooltip:{description:"Indicates whether the numeric value associated to a slice is to be displayed on its tooltip.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`\nThis property will be ignored if the chart options `tooltipFormatter` is provided.",default:!0,type:"boolean",title:"displayNumericValueOnTooltip"},displayPercentageOnTooltip:{description:"Indicates whether the percentage associated to a slice is to be displayed on its tooltip.\nIf both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`\nThis property will be ignored if the chart options `tooltipFormatter` is provided.",default:!0,type:"boolean",title:"displayPercentageOnTooltip"},numericValueFormat:{description:"Specifies how the numerical values should be formatted (applied to label, tooltip and legend).\nCan be overridden for the tooltips by series.dataTooltipValueFormat.",$ref:"#/definitions/NumberFormatOptions",title:"numericValueFormat"},percentValueFormat:{description:"Specifies how the percent values should be formatted (applied to label, tooltip and legend)\nCan be overridden for the tooltips by series.dataTooltipPercentFormat.",$ref:"#/definitions/NumberFormatOptions",title:"percentValueFormat"},valuePrefix:{description:"Adds a prefix to all the values displayed on the pie chart: data labels, tooltips and legend",type:"string",title:"valuePrefix"},valueSuffix:{description:"Adds a suffix to all the values displayed on the pie chart: data labels, tooltips and legend",type:"string",title:"valueSuffix"},percentagePrefix:{description:"Adds a prefix to all the percentages displayed on the pie chart: data labels, tooltips and legend",type:"string",title:"percentagePrefix"},percentageSuffix:{description:"Adds a suffix to all the percentages displayed on the pie chart: data labels, tooltips and legend",type:"string",title:"percentageSuffix"},dataLabelsCharacterLimit:{description:'If set, the category on the data label is truncated to display only `characterLimit` characters, and an ellipsis ("...")\nis added to the end of the label.\nThis does not affect the value and percentage part of the labels.\nDoes not apply to tooltips and legend labels.',default:"undefined",minimum:1,multipleOf:1,type:["null","number"],title:"dataLabelsCharacterLimit"},ticks:{description:"Specifies how to render the ticks shown on each slide.\nTicks will be displayed with default values if not provided.",$ref:"#/definitions/WebChartPieChartTick",title:"ticks"},dataLabelsOffset:{description:"Determines in pixel how far the data labels should be placed from their slice.\nIf a negative value is provided the label will be placed inside of the chart.",default:10,type:"number",title:"dataLabelsOffset"},alignDataLabels:{description:"Aligns labels into columns to make them more readable and avoid them to overlap each other.",default:!1,type:"boolean",title:"alignDataLabels"},optimizeDataLabelsOverlapping:{description:"Optimizes the data labels rendering to avoid them to be cut off on the edges or to overlap the legend by wrapping them and adding padding to the chart.",default:!1,type:"boolean",title:"optimizeDataLabelsOverlapping"},sliceGrouping:{description:"Specifies if and how the slices under a given percentage threshold are grouped into a unique slice",$ref:"#/definitions/WebChartPieChartGroupSlice",title:"sliceGrouping"},slices:{description:"An array of WebChartPieChartSlice representing the ids, labels and styles of the pie slices.\n\nWhen this property is not defined, or when a pie slice does not have a matching slice in this array,\nthe series' fillSymbol will be used. If the series' fillSymbol does not contain color information, colors from the\ncolor ramps will be utilized.",type:"array",items:{$ref:"#/definitions/WebChartPieChartSlice"},title:"slices"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x","y"]},WebChartGaugeSeries:{description:"JSON representation of the `Gauge` series",title:"WebChartGaugeSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the GaugeSeries object. For GaugeSeries object, it is "gaugeSeries".',type:"string",const:"gaugeSeries",title:"type"},valueConversion:{description:"Defines the conversion to apply to the gauge value",$ref:"#/definitions/ValueConversion",title:"valueConversion"},featureIndex:{description:"Specifies the index of the feature to be rendered.\nThis property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).\nFor feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)",type:"number",title:"featureIndex"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x"]},WebChartLineChartSeries:{description:"JSON representation of the Line Chart series",title:"WebChartLineChartSeries",type:"object",properties:{type:{description:'Represents a unique string identifier for the LineSeries object. For LineSeries object, it is "lineSeries".',type:"string",const:"lineSeries",title:"type"},y:{description:"Specifies the numeric field(s) used by the series. The array type is useful when used for a box plot.",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}],title:"y"},lineSymbol:{description:"Contains styling info on how the line/line segments should be rendered",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},lineSmoothed:{description:"Specifies whether line segments should be smoothed.",default:!1,type:"boolean",title:"lineSmoothed"},showArea:{description:"Indicates whether line series show area.",default:!1,type:"boolean",title:"showArea"},markerVisible:{description:"Indicates whether to show or hide the markers/bullets of the line series.",default:!0,type:"boolean",title:"markerVisible"},markerSymbol:{description:"Contains styling info on how the marker should be rendered",$ref:"#/definitions/ISimpleMarkerSymbol",title:"markerSymbol"},areaColor:{description:"Specifies the color of the filled area for line chart.\nareaColor will be applied only if showArea is true, and is defaulted to the line color if not provided.",type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"areaColor"},stackNegativeValuesToBaseline:{description:"Specifies how negative values are treated in stacked series.\nIf true, negative values will be stacked on the base line.\nIf false, negative values will be stacked in relation to their previous values in the stack.",default:!0,type:"boolean",title:"stackNegativeValuesToBaseline"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"},binTemporalData:{description:"Whether to use the time properties to bin the temporal data.\nIf set to `false` the `timeIntervalSize` and `timeIntervalUnits` properties can be used to set the date axis base interval.",default:!0,type:"boolean",title:"binTemporalData"},timeIntervalUnits:{description:"The time unit that corresponds to the `timeIntervalSize`. Valid options include seconds, minutes, hours, days, weeks, months, and years.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"timeIntervalUnits"},timeIntervalSize:{description:"The span of time that will be binned or aggregated together. This property must be used in conjunction with `timeIntervalUnits`.",type:"number",title:"timeIntervalSize"},timeAggregationType:{description:"The time interval alignment type. Valid options include `equalIntervalsFromStartTime` and `equalIntervalsFromEndTime`.",default:"equalIntervalsFromStartTime",enum:["equalIntervalsFromEndTime","equalIntervalsFromStartTime"],type:"string",title:"timeAggregationType"},trimIncompleteTimeInterval:{description:"Determines whether incomplete time intervals at the start or end of the data span (depending on the `timeAggregationType`) will be removed from the chart.\nIncomplete intervals on a chart can cause misleading results in which the period in question is under- or overreported due to a different amount of time in the interval.\nSetting `true` indicates to trim these incomplete intervals. Setting `false` does not trim incomplete intervals.",default:!0,type:"boolean",title:"trimIncompleteTimeInterval"},nullPolicy:{description:"How summarized bins returning a null value are displayed. Supported options are:\n- `null`, `zero`, and `interpolate` for line series\n- `null` and `zero` for bar series",default:"null",enum:["interpolate","null","zero"],type:"string",title:"nullPolicy"}},required:["id","name","type","x","y"]},WebChartBoxPlotSeries:{description:"JSON representation of the Box plot series",title:"WebChartBoxPlotSeries",type:"object",properties:{type:{type:"string",const:"boxPlotSeries",title:"type"},y:{description:"Specifies the numeric field(s) used by the box plot series.",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}],title:"y"},fillSymbol:{description:"Contains styling info on how the box and whiskers should be rendered. The whiskers use the fillSymbol.outline.",$ref:"#/definitions/ISimpleFillSymbol",title:"fillSymbol"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"}},required:["id","name","type","x","y"]},WebChartRadarChartSeries:{title:"WebChartRadarChartSeries",allOf:[{$ref:'#/definitions/Omit<WebChartLineChartSeries,"type">'},{type:"object",properties:{type:{type:"string",const:"radarSeries",title:"type"}},required:["type"]}]},WebChartSeriesType:{description:"Type containing all the series types available",title:"WebChartSeriesType",anyOf:[{$ref:"#/definitions/WebChartBarChartSeries"},{$ref:"#/definitions/WebChartHistogramSeries"},{$ref:"#/definitions/WebChartScatterPlotSeries"},{$ref:"#/definitions/WebChartPieChartSeries"},{$ref:"#/definitions/WebChartGaugeSeries"},{$ref:"#/definitions/WebChartLineChartSeries"},{$ref:"#/definitions/WebChartBoxPlotSeries"},{$ref:"#/definitions/WebChartRadarChartSeries"}]},WebMapWebChart:{description:"Gives a JSON representation of the Chart object.",type:"object",properties:{version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},axes:{description:"Represents an array of **at least 1 or at most 3** Chart Axis accompanying the chart. The axes property is optional because Pie chart does not use any axis.\nThe third axis config is used when a series `assignToSecondValueAxis` is set to `true`.\nSome of the axis features won't apply to the third axis (e.g. labels behaviors).",type:"array",items:[{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:1,maxItems:3,title:"axes"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},series:{description:"Represents an array of various chart series to be plot inside the chart.\nEmpty array is not allowed.",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartSeriesType"},title:"series"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"}},required:["series","type","version"],title:"WebMapWebChart"},WebMapWebGaugeChart:{description:"JSON representation of Gauge chart.",type:"object",properties:{innerRadius:{description:"Represents the size of the hole in middle of the chart. The number is used as a percentage rather than a fixed value.",default:50,type:["null","number"],title:"innerRadius"},startAngle:{description:"Represents where is the chart's starting point",default:-180,type:["null","number"],title:"startAngle"},endAngle:{description:"Represents where is the chart's ending point. To be related with startAngle. If endAngle-startAngle is 360 the chart will render as full circle.",default:180,type:["null","number"],title:"endAngle"},axes:{description:"Array of one WebChartGaugeAxis",type:"array",items:[{$ref:"#/definitions/WebChartGaugeAxis"}],minItems:1,maxItems:1,title:"axes"},subType:{description:"The type of Gauge, like FeatureGauge and StatisticGauge.\n\nWhen this property is not specified, it will be defaulted to `GaugeChartSubTypes.StatisticGauge`.",enum:["featureGauge","statisticGauge"],type:"string",title:"subType"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},series:{description:"Represents an array of various chart series to be plot inside the chart.\nEmpty array is not allowed.",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartSeriesType"},title:"series"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"}},required:["axes","series","type","version"],title:"WebMapWebGaugeChart"},WebMapWebBoxPlot:{description:"JSON representation of Gauge",type:"object",properties:{showOutliers:{description:"Whether to show the outliers on the chart",type:"boolean",title:"showOutliers"},standardizeValues:{description:"Whether to standardize the values by calculating the series z-score",type:"boolean",title:"standardizeValues"},showMean:{description:"Whether to show the mean lines on the chart. Applies only if a split-by field is set.\nAdditionally the chart will render with that option enabled only if the the series array\ncontains one box plot series and N lines series.",default:!1,type:"boolean",title:"showMean"},series:{description:'The box plot series can be of type "boxPlotSeries" or "lineSeries".',type:"array",items:{anyOf:[{$ref:"#/definitions/WebChartLineChartSeries"},{$ref:"#/definitions/WebChartBoxPlotSeries"}]},title:"series"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},axes:{description:"Represents an array of **at least 1 or at most 3** Chart Axis accompanying the chart. The axes property is optional because Pie chart does not use any axis.\nThe third axis config is used when a series `assignToSecondValueAxis` is set to `true`.\nSome of the axis features won't apply to the third axis (e.g. labels behaviors).",type:"array",items:[{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:1,maxItems:3,title:"axes"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"}},required:["series","type","version"],title:"WebMapWebBoxPlot"},WebChartDataSource:{type:"object",properties:{iLayer:{description:"Property representing the layer to be used by the chart.",$ref:"#/definitions/IFeatureLayer",title:"iLayer"}},title:"WebChartDataSource"},WebChart:{description:"Gives a JSON representation of the Chart object when using a `iLayer`.",type:"object",properties:{version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},axes:{description:"Represents an array of **at least 1 or at most 3** Chart Axis accompanying the chart. The axes property is optional because Pie chart does not use any axis.\nThe third axis config is used when a series `assignToSecondValueAxis` is set to `true`.\nSome of the axis features won't apply to the third axis (e.g. labels behaviors).",type:"array",items:[{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:1,maxItems:3,title:"axes"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},series:{description:"Represents an array of various chart series to be plot inside the chart.\nEmpty array is not allowed.",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartSeriesType"},title:"series"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"},iLayer:{description:"Property representing the layer to be used by the chart.",$ref:"#/definitions/IFeatureLayer",title:"iLayer"}},required:["series","type","version"],title:"WebChart"},WebGaugeChart:{description:"Gives a JSON representation of the Gauge Chart object when using a `iLayer`.",type:"object",properties:{innerRadius:{description:"Represents the size of the hole in middle of the chart. The number is used as a percentage rather than a fixed value.",default:50,type:["null","number"],title:"innerRadius"},startAngle:{description:"Represents where is the chart's starting point",default:-180,type:["null","number"],title:"startAngle"},endAngle:{description:"Represents where is the chart's ending point. To be related with startAngle. If endAngle-startAngle is 360 the chart will render as full circle.",default:180,type:["null","number"],title:"endAngle"},axes:{description:"Array of one WebChartGaugeAxis",type:"array",items:[{$ref:"#/definitions/WebChartGaugeAxis"}],minItems:1,maxItems:1,title:"axes"},subType:{description:"The type of Gauge, like FeatureGauge and StatisticGauge.\n\nWhen this property is not specified, it will be defaulted to `GaugeChartSubTypes.StatisticGauge`.",enum:["featureGauge","statisticGauge"],type:"string",title:"subType"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},series:{description:"Represents an array of various chart series to be plot inside the chart.\nEmpty array is not allowed.",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartSeriesType"},title:"series"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"},iLayer:{description:"Property representing the layer to be used by the chart.",$ref:"#/definitions/IFeatureLayer",title:"iLayer"}},required:["axes","series","type","version"],title:"WebGaugeChart"},WebBoxPlot:{description:"Gives a JSON representation of the Box Plot Chart object when a `iLayer`.",type:"object",properties:{showOutliers:{description:"Whether to show the outliers on the chart",type:"boolean",title:"showOutliers"},standardizeValues:{description:"Whether to standardize the values by calculating the series z-score",type:"boolean",title:"standardizeValues"},showMean:{description:"Whether to show the mean lines on the chart. Applies only if a split-by field is set.\nAdditionally the chart will render with that option enabled only if the the series array\ncontains one box plot series and N lines series.",default:!1,type:"boolean",title:"showMean"},series:{description:'The box plot series can be of type "boxPlotSeries" or "lineSeries".',type:"array",items:{anyOf:[{$ref:"#/definitions/WebChartLineChartSeries"},{$ref:"#/definitions/WebChartBoxPlotSeries"}]},title:"series"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},axes:{description:"Represents an array of **at least 1 or at most 3** Chart Axis accompanying the chart. The axes property is optional because Pie chart does not use any axis.\nThe third axis config is used when a series `assignToSecondValueAxis` is set to `true`.\nSome of the axis features won't apply to the third axis (e.g. labels behaviors).",type:"array",items:[{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:1,maxItems:3,title:"axes"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"},iLayer:{description:"Property representing the layer to be used by the chart.",$ref:"#/definitions/IFeatureLayer",title:"iLayer"}},required:["series","type","version"],title:"WebBoxPlot"},WebMapWebRadarChart:{description:"Gives a JSON representation of the Radar Chart object.",type:"object",properties:{series:{description:"The radar chart series",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartRadarChartSeries"},title:"series"},axes:{description:"Array of two axes, one specific to the radar chart and the other one common to all charts",type:"array",items:[{$ref:"#/definitions/WebChartRadarChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:2,maxItems:2,title:"axes"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"}},required:["axes","series","type","version"],title:"WebMapWebRadarChart"},WebRadarChart:{description:"Gives a JSON representation of the Radar Chart object when using a `iLayer`.",type:"object",properties:{series:{description:"The radar chart series",minItems:1,type:"array",items:{$ref:"#/definitions/WebChartRadarChartSeries"},title:"series"},axes:{description:"Array of two axes, one specific to the radar chart and the other one common to all charts",type:"array",items:[{$ref:"#/definitions/WebChartRadarChartAxis"},{$ref:"#/definitions/WebChartAxis"}],minItems:2,maxItems:2,title:"axes"},version:{description:"Version of the specification. Used to identify when a saved config was created.",type:"string",const:"18.1.0",title:"version"},type:{description:"Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.",type:"string",const:"chart",title:"type"},id:{description:"Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.",type:"string",title:"id"},dataFilters:{description:"Used to filter the chart's data while in Layer mode.",$ref:"#/definitions/WebChartDataFilters",title:"dataFilters"},title:{description:"Specifies heading/title of the chart.",$ref:"#/definitions/WebChartText",title:"title"},subTitle:{description:"Specifies sub-heading/subtitle of the chart.",$ref:"#/definitions/WebChartText",title:"subTitle"},footer:{description:"Specifies footer of the chart",$ref:"#/definitions/WebChartText",title:"footer"},background:{description:"Specifies the background color of the chart.",default:[255,255,255,255],type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"background"},theme:{description:"A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.",type:"string",title:"theme"},cursorCrosshair:{description:"Specifies cursor's crosshair information for the chart. Only for XY charts.",$ref:"#/definitions/WebChartCursorCrosshair",title:"cursorCrosshair"},legend:{description:"Specifies the Legend information for the chart.",anyOf:[{$ref:"#/definitions/WebChartLegend"},{$ref:"#/definitions/WebChartPieChartLegend"}],title:"legend"},horizontalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the horizontal axis can\'t display them all.\nThe available options are: "none", "rotate", "stagger" and "wrap".\nFor XY Chart only. Histogram can handle "none" and "rotate" only.\nThe default value for the horizontal axis is "rotate".',default:"rotate",enum:["hide","rotate","stagger","wrap"],type:"string",title:"horizontalAxisLabelsBehavior"},verticalAxisLabelsBehavior:{description:'Represents the way the labels should behave when the vertical axis can\'t display them all. For XY Chart only.\nThe available options are: "none" and "wrap".\nThe default value for the vertical axis is "wrap".',default:"wrap",enum:["hide","rotate","stagger","wrap"],type:"string",title:"verticalAxisLabelsBehavior"},rotated:{description:"Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.",default:!1,type:"boolean",title:"rotated"},stackedType:{description:'Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or\nwhen multiple attributes/fields corresponding to the same set of classes are to be visualized.\n\nCurrently this property is only used for bar and line series.',default:"sideBySide",enum:["sideBySide","stacked","stacked100"],type:"string",title:"stackedType"},colorMatch:{description:"Specifies whether to first try matching the colors from the layer renderer or the chart renderer\nfor coloring the chart elements, like markers, line segments, columns, etc.\n\nTo do so, this property needs to be set to `true`.\n\nWhen there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,\nthe colors from the config, and then from the color ramps will be used, in that order.",default:!1,type:"boolean",title:"colorMatch"},chartRenderer:{description:"Renderer to use to style the series when the chart uses the color match mode.\nConsidered before the layer's renderer.",title:"chartRenderer"},orderOptions:{description:"Chart order options (data and series)",type:"object",properties:{series:{description:"How series should be ordered and dislayed in a multi-series chart.\nIf not provided the series will be displayed as they are ordered in the config.",$ref:"#/definitions/WebChartOrderSeriesBy",title:"series"},data:{description:"How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.\n\nIf not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.",anyOf:[{$ref:"#/definitions/WebChartDirectionalDataOrder"},{$ref:"#/definitions/WebChartPredefinedLabelsDataOrder"}],title:"data"},orderByFields:{description:"The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.\n\nMore info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).\nThe format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending",type:"array",items:{type:"string"},title:"orderByFields"}},title:"orderOptions"},iLayer:{description:"Property representing the layer to be used by the chart.",$ref:"#/definitions/IFeatureLayer",title:"iLayer"}},required:["axes","series","type","version"],title:"WebRadarChart"},OverlayTerms:{enum:["Mean","Median","Normal Distribution","Standard Deviation","Trendline"],type:"string",title:"OverlayTerms"},CalculatedMinMaxBoundsPayload:{description:"+\nRepresents a subset of the event payload carrying the chart's axes bounds.\nSee event `arcgisChartsAxesMinMaxChange`.",type:"object",properties:{isXAxis:{type:"boolean",title:"isXAxis"},isSecondValueAxis:{type:"boolean",title:"isSecondValueAxis"},minimum:{type:["null","number"],title:"minimum"},maximum:{type:["null","number"],title:"maximum"}},required:["isXAxis","maximum","minimum"],title:"CalculatedMinMaxBoundsPayload"},ChartDeletePayload:{description:"Represents the payload of the event sent when a chart is removed from the chart list (component arcgis-charts-config-view-charts).",type:"object",properties:{chartId:{type:"string",title:"chartId"}},required:["chartId"],title:"ChartDeletePayload"},LegendItemVisibility:{description:"Represents the payload of the event sent when an item is toggled in the chart's legend (slice or series).",type:"object",properties:{visible:{type:"boolean",title:"visible"},seriesId:{type:"string",title:"seriesId"},overlayType:{enum:["Mean","Median","Normal Distribution","Standard Deviation","Trendline"],type:"string",title:"overlayType"},sliceId:{type:"string",title:"sliceId"},sliceData:{description:"JSON representation of a typical data item",$ref:"#/definitions/WebChartDataItem",title:"sliceData"}},required:["visible"],title:"LegendItemVisibility"},"Record<string,any>":{title:"Record<string,any>",type:"object"},SymbolType:{title:"SymbolType",enum:["esriPFS","esriPMS","esriSFS","esriSLS","esriSMS","esriTS"],type:"string"},"Record<string,string>":{title:"Record<string,string>",type:"object"},Position:{title:"Position",anyOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3}]},"Record<string,boolean>":{title:"Record<string,boolean>",type:"object"},"Record<string,unknown>":{title:"Record<string,unknown>",type:"object"},"Record<string,ITypeInfoDomain>":{title:"Record<string,ITypeInfoDomain>",type:"object"},"__esri.FeatureLayer":{title:"__esri.FeatureLayer",type:"object",properties:{apiKey:{description:"An authorization string used to access a resource or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#apiKey Read more...}",type:["null","string"],title:"apiKey"},blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},capabilities:{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#capabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"capabilities"},charts:{description:"Array of Chart Items of type WebMapWebChart available on the feature layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#charts Read more...}",anyOf:[{type:"array",items:{}},{type:"null"}],title:"charts"},copyright:{description:"Copyright information for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#copyright Read more...}",type:["null","string"],title:"copyright"},customParameters:{description:"A list of custom parameters appended to the URL of all resources fetched by the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#customParameters Read more...}",title:"customParameters"},dateFieldsTimeZone:{description:"The time zone that dates are stored in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#dateFieldsTimeZone Read more...}",type:["null","string"],title:"dateFieldsTimeZone"},datesInUnknownTimezone:{description:"This property is set by the service publisher and indicates that dates should be considered without the local timezone.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#datesInUnknownTimezone Read more...}",type:"boolean",title:"datesInUnknownTimezone"},definitionExpression:{description:"The SQL where clause used to filter features on the client.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression Read more...}",type:["null","string"],title:"definitionExpression"},displayField:{description:"The name of the layer's primary display field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#displayField Read more...}",type:["null","string"],title:"displayField"},displayFilterEnabled:{description:"Indicates whether the layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#displayFilterInfo displayFilterInfo} is applied when rendering the layer in the view.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#displayFilterEnabled Read more...}",type:"boolean",title:"displayFilterEnabled"},displayFilterInfo:{description:"Information related to a display filter associated with a layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#displayFilterInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.DisplayFilterInfo"},{type:"null"}],title:"displayFilterInfo"},dynamicDataSource:{description:"An object that allows you to create a dynamic layer with data\neither from map service sublayers or data from a registered workspace.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#dynamicDataSource Read more...}",anyOf:[{$ref:"#/definitions/__esri.DynamicDataLayer"},{type:"null"}],title:"dynamicDataSource"},editFieldsInfo:{description:"The editor tracking fields, which record who adds or edits the data through the feature service\nand when edits are made.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#editFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditFieldsInfo"},{type:"null"}],title:"editFieldsInfo"},editingEnabled:{description:"Determines if the layer is editable.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#editingEnabled Read more...}",type:"boolean",title:"editingEnabled"},editingInfo:{description:"Specifies information about editing.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#editingInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditingInfo"},{type:"null"}],title:"editingInfo"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},effectiveCapabilities:{description:"Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#effectiveCapabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"effectiveCapabilities"},effectiveEditingEnabled:{description:"Indicates whether the layer is editable taking in to consideration privileges of the\ncurrently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#effectiveEditingEnabled Read more...}",type:"boolean",title:"effectiveEditingEnabled"},fieldsIndex:{$ref:"#/definitions/__esri.FieldsIndex",description:"A convenient property that can be used to make case-insensitive lookups for a field by name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fieldsIndex Read more...}",title:"fieldsIndex"},gdbVersion:{description:"The version of the geodatabase of the feature service data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#gdbVersion Read more...}",type:["null","string"],title:"gdbVersion"},geometryFieldsInfo:{description:"Provides information on the system maintained area and length fields along with their respective units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#geometryFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.GeometryFieldsInfo"},{type:"null"}],title:"geometryFieldsInfo"},geometryType:{description:"The geometry type of features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#geometryType Read more...}",anyOf:[{enum:["mesh","multipatch","multipoint","point","polygon","polyline"],type:"string"},{type:"null"}],title:"geometryType"},hasM:{description:"Indicates whether the client-side features in the layer have `M` (measurement) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates whether the client-side features in the layer have `Z` (elevation) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#hasZ Read more...}",type:"boolean",title:"hasZ"},isTable:{description:"Returns `true` if the layer is loaded from a non-spatial table in a service.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#isTable Read more...}",type:"boolean",title:"isTable"},labelsVisible:{description:"Indicates whether to display labels for this layer.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},layerId:{description:"The layer ID, or layer index, of a Feature Service layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#layerId Read more...}",type:["null","number"],title:"layerId"},legendEnabled:{description:"Indicates whether the layer will be included in the legend.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#legendEnabled Read more...}",type:"boolean",title:"legendEnabled"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#minScale Read more...}",type:"number",title:"minScale"},objectIdField:{description:"The name of an `oid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields field} containing\na unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#objectIdField Read more...}",type:"string",title:"objectIdField"},outFields:{description:"An array of field names from the service to include with each feature.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#outFields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"outFields"},persistenceEnabled:{description:"Enable persistence of the layer in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html WebScene}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},popupEnabled:{description:"Indicates whether to display popups when features in the layer are clicked.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},preferredTimeZone:{description:"The IANA time zone the author of the service intended data from date fields to be viewed in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#preferredTimeZone Read more...}",type:["null","string"],title:"preferredTimeZone"},publishingInfo:{description:"Checks layer's publishing status while the layer is being published to the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#publishingInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.PublishingInfo"},{type:"null"}],title:"publishingInfo"},refreshInterval:{description:"Refresh interval of the layer in minutes.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#refreshInterval Read more...}",type:"number",title:"refreshInterval"},relationships:{description:"Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html relationships} set up for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#relationships Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Relationship"}},{type:"null"}],title:"relationships"},returnM:{description:"When `true`, indicates that M values will be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#returnM Read more...}",type:["null","boolean"],title:"returnM"},returnZ:{description:"When `true`, indicates that z-values will always be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#returnZ Read more...}",type:["null","boolean"],title:"returnZ"},screenSizePerspectiveEnabled:{description:"Apply perspective scaling to screen-size point symbols in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html SceneView}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#screenSizePerspectiveEnabled Read more...}",type:"boolean",title:"screenSizePerspectiveEnabled"},serviceDefinitionExpression:{description:"The service definition expression limits the features available for display and query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#serviceDefinitionExpression Read more...}",type:["null","string"],title:"serviceDefinitionExpression"},serviceItemId:{description:"Indicates the portal item of the hosted feature service that contains this layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#serviceItemId Read more...}",type:["null","string"],title:"serviceItemId"},sourceJSON:{description:"The [feature service's metadata JSON](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm)\nexposed by the ArcGIS REST API.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#sourceJSON Read more...}",title:"sourceJSON"},subtypeField:{description:"The name of the field which holds the id of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#subtypes subtypes}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#subtypeField Read more...}",type:["null","string"],title:"subtypeField"},subtypes:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html subtypes} defined in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#subtypes Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Subtype"}},{type:"null"}],title:"subtypes"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widgets.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#title Read more...}",type:["null","string"],title:"title"},type:{type:"string",const:"feature",title:"type"},typeIdField:{description:"The name of the field holding the type ID for the features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#typeIdField Read more...}",type:["null","string"],title:"typeIdField"},url:{description:"The absolute URL of the REST endpoint of the layer, non-spatial table or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#url Read more...}",type:["null","string"],title:"url"},useViewTime:{description:"Determines if the time enabled layer will update its temporal data based on the view's\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent timeExtent}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#useViewTime Read more...}",type:"boolean",title:"useViewTime"},version:{description:"The version of ArcGIS Server in which the layer is published.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#version Read more...}",type:["null","number"],title:"version"},attributeTableTemplate:{description:"This property is used to configure the associated layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html FeatureTable}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#attributeTableTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.AttributeTableTemplate"},{type:"null"}],title:"attributeTableTemplate"},elevationInfo:{description:"Specifies how features are placed on the vertical axis (z).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#elevationInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureLayerBaseElevationInfo"},{type:"null"}],title:"elevationInfo"},featureEffect:{description:"The featureEffect can be used to draw attention features of interest.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#featureEffect Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureEffect"},{type:"null"}],title:"featureEffect"},featureReduction:{description:"Configures the method for reducing the number of features in the view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#featureReduction Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureReductionBinning"},{$ref:"#/definitions/__esri.FeatureReductionCluster"},{$ref:"#/definitions/__esri.FeatureReductionSelection"},{type:"null"}],title:"featureReduction"},fields:{description:"An array of fields in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.Field"},title:"fields"},floorInfo:{description:"When a feature layer is configured as floor-aware, it has a floorInfo property defined.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#floorInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.LayerFloorInfo"},{type:"null"}],title:"floorInfo"},formTemplate:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html template} used in an associated layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html FeatureForm}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#formTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.FormTemplate"},{type:"null"}],title:"formTemplate"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},historicMoment:{description:"The historic moment to query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#historicMoment Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"historicMoment"},labelingInfo:{description:"The label definition for this layer, specified as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},orderBy:{description:"Determines the order in which features are drawn in the view.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#orderBy Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.OrderByInfo"}},{type:"null"}],title:"orderBy"},popupTemplate:{description:"The popup template for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},portalItem:{description:"The portal item from which the layer is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#portalItem Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalItem"},{type:"null"}],title:"portalItem"},renderer:{description:"The renderer assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},source:{$ref:"#/definitions/__esri.Collection<__esri.Graphic>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html Graphic} objects used to create a FeatureLayer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#source Read more...}",title:"source"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#spatialReference Read more...}",title:"spatialReference"},templates:{description:"An array of feature templates defined in the feature layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#templates Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.FeatureTemplate"}},{type:"null"}],title:"templates"},timeExtent:{description:"The layer's time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#timeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"timeExtent"},timeInfo:{description:"TimeInfo provides information such as date fields that store\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField start}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField end} time\nfor each feature and the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent fullTimeExtent}\nfor the layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#timeInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInfo"},{type:"null"}],title:"timeInfo"},timeOffset:{description:"A temporary offset of the time data based on a certain {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html TimeInterval}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#timeOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"timeOffset"},trackInfo:{description:"Allows you to render track data for a layer, including a track line, previous observations, and latest observations.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#trackInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.TrackInfo"},{type:"null"}],title:"trackInfo"},types:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html types} defined in the feature service exposed by ArcGIS REST API.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#types Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.FeatureType"}},{type:"null"}],title:"types"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["blendMode","customParameters","datesInUnknownTimezone","declaredClass","destroyed","displayFilterEnabled","editingEnabled","effectiveEditingEnabled","fields","fieldsIndex","hasM","hasZ","id","initialized","isTable","labelsVisible","legendEnabled","listMode","loadStatus","loadWarnings","loaded","maxScale","minScale","objectIdField","opacity","persistenceEnabled","popupEnabled","refreshInterval","screenSizePerspectiveEnabled","source","sourceJSON","spatialReference","type","useViewTime","visible"]},"__esri.Capabilities":{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities Read more...}",title:"__esri.Capabilities",type:"object",properties:{analytics:{$ref:"#/definitions/__esri.CapabilitiesAnalytics",title:"analytics"},attachment:{anyOf:[{$ref:"#/definitions/__esri.CapabilitiesAttachment"},{type:"null"}],title:"attachment"},data:{$ref:"#/definitions/__esri.CapabilitiesData",title:"data"},editing:{$ref:"#/definitions/__esri.CapabilitiesEditing",title:"editing"},metadata:{$ref:"#/definitions/__esri.CapabilitiesMetadata",title:"metadata"},operations:{$ref:"#/definitions/__esri.CapabilitiesOperations",title:"operations"},query:{$ref:"#/definitions/__esri.CapabilitiesQuery",title:"query"},queryAttributeBins:{$ref:"#/definitions/__esri.CapabilitiesQueryAttributeBins",title:"queryAttributeBins"},queryRelated:{$ref:"#/definitions/__esri.CapabilitiesQueryRelated",title:"queryRelated"},queryTopFeatures:{$ref:"#/definitions/__esri.CapabilitiesQueryTopFeatures",title:"queryTopFeatures"}},required:["analytics","attachment","data","editing","metadata","operations","query","queryAttributeBins","queryRelated","queryTopFeatures"]},"__esri.CapabilitiesAnalytics":{title:"__esri.CapabilitiesAnalytics",type:"object",properties:{supportsCacheHint:{type:"boolean",title:"supportsCacheHint"}},required:["supportsCacheHint"]},"__esri.CapabilitiesAttachment":{title:"__esri.CapabilitiesAttachment",type:"object",properties:{supportsCacheHint:{type:"boolean",title:"supportsCacheHint"},supportsContentType:{type:"boolean",title:"supportsContentType"},supportsExifInfo:{type:"boolean",title:"supportsExifInfo"},supportsKeywords:{type:"boolean",title:"supportsKeywords"},supportsOrderByFields:{type:"boolean",title:"supportsOrderByFields"},supportsName:{type:"boolean",title:"supportsName"},supportsSize:{type:"boolean",title:"supportsSize"},supportsResize:{type:"boolean",title:"supportsResize"}},required:["supportsCacheHint","supportsContentType","supportsExifInfo","supportsKeywords","supportsName","supportsOrderByFields","supportsResize","supportsSize"]},"__esri.CapabilitiesData":{title:"__esri.CapabilitiesData",type:"object",properties:{isVersioned:{type:"boolean",title:"isVersioned"},isBranchVersioned:{type:"boolean",title:"isBranchVersioned"},supportsAttachment:{type:"boolean",title:"supportsAttachment"},supportsM:{type:"boolean",title:"supportsM"},supportsZ:{type:"boolean",title:"supportsZ"}},required:["isBranchVersioned","isVersioned","supportsAttachment","supportsM","supportsZ"]},"__esri.CapabilitiesEditing":{title:"__esri.CapabilitiesEditing",type:"object",properties:{supportsDeleteByAnonymous:{type:"boolean",title:"supportsDeleteByAnonymous"},supportsDeleteByOthers:{type:"boolean",title:"supportsDeleteByOthers"},supportsGeometryUpdate:{type:"boolean",title:"supportsGeometryUpdate"},supportsGlobalId:{type:"boolean",title:"supportsGlobalId"},supportsRollbackOnFailure:{type:"boolean",title:"supportsRollbackOnFailure"},supportsUpdateByAnonymous:{type:"boolean",title:"supportsUpdateByAnonymous"},supportsUpdateByOthers:{type:"boolean",title:"supportsUpdateByOthers"},supportsUploadWithItemId:{type:"boolean",title:"supportsUploadWithItemId"},supportsUpdateWithoutM:{type:"boolean",title:"supportsUpdateWithoutM"}},required:["supportsDeleteByAnonymous","supportsDeleteByOthers","supportsGeometryUpdate","supportsGlobalId","supportsRollbackOnFailure","supportsUpdateByAnonymous","supportsUpdateByOthers","supportsUpdateWithoutM","supportsUploadWithItemId"]},"__esri.CapabilitiesMetadata":{title:"__esri.CapabilitiesMetadata",type:"object",properties:{supportsAdvancedFieldProperties:{type:"boolean",title:"supportsAdvancedFieldProperties"}},required:["supportsAdvancedFieldProperties"]},"__esri.CapabilitiesOperations":{title:"__esri.CapabilitiesOperations",type:"object",properties:{supportsAdd:{type:"boolean",title:"supportsAdd"},supportsCalculate:{type:"boolean",title:"supportsCalculate"},supportsDelete:{type:"boolean",title:"supportsDelete"},supportsEditing:{type:"boolean",title:"supportsEditing"},supportsQuery:{type:"boolean",title:"supportsQuery"},supportsQueryAttachments:{type:"boolean",title:"supportsQueryAttachments"},supportsResizeAttachments:{type:"boolean",title:"supportsResizeAttachments"},supportsQueryTopFeatures:{type:"boolean",title:"supportsQueryTopFeatures"},supportsUpdate:{type:"boolean",title:"supportsUpdate"},supportsValidateSql:{type:"boolean",title:"supportsValidateSql"}},required:["supportsAdd","supportsCalculate","supportsDelete","supportsEditing","supportsQuery","supportsQueryAttachments","supportsQueryTopFeatures","supportsResizeAttachments","supportsUpdate","supportsValidateSql"]},"__esri.CapabilitiesQuery":{title:"__esri.CapabilitiesQuery",type:"object",properties:{maxRecordCount:{type:["null","number"],title:"maxRecordCount"},supportsCacheHint:{type:"boolean",title:"supportsCacheHint"},supportsCentroid:{type:"boolean",title:"supportsCentroid"},supportsDisjointSpatialRelationship:{type:"boolean",title:"supportsDisjointSpatialRelationship"},supportsDistance:{type:"boolean",title:"supportsDistance"},supportsDistinct:{type:"boolean",title:"supportsDistinct"},supportsExtent:{type:"boolean",title:"supportsExtent"},supportsGeometryProperties:{type:"boolean",title:"supportsGeometryProperties"},supportsHavingClause:{type:"boolean",title:"supportsHavingClause"},supportsHistoricMoment:{type:"boolean",title:"supportsHistoricMoment"},supportsMaxRecordCountFactor:{type:"boolean",title:"supportsMaxRecordCountFactor"},supportsOrderBy:{type:"boolean",title:"supportsOrderBy"},supportsPagination:{type:"boolean",title:"supportsPagination"},supportsPercentileStatistics:{type:"boolean",title:"supportsPercentileStatistics"},supportsQuantization:{type:"boolean",title:"supportsQuantization"},supportsQuantizationEditMode:{type:"boolean",title:"supportsQuantizationEditMode"},supportsQueryGeometry:{type:"boolean",title:"supportsQueryGeometry"},supportsResultType:{type:"boolean",title:"supportsResultType"},supportsReturnMesh:{type:"boolean",title:"supportsReturnMesh"},supportsStandardizedQueriesOnly:{type:"boolean",title:"supportsStandardizedQueriesOnly"},supportsStatistics:{type:"boolean",title:"supportsStatistics"},supportsSqlExpression:{type:"boolean",title:"supportsSqlExpression"},supportsSpatialAggregationStatistics:{type:"boolean",title:"supportsSpatialAggregationStatistics"},supportsTrueCurve:{type:"boolean",title:"supportsTrueCurve"},supportedSpatialAggregationStatistics:{$ref:"#/definitions/__esri.CapabilitiesQuerySupportedSpatialAggregationStatistics",title:"supportedSpatialAggregationStatistics"}},required:["maxRecordCount","supportedSpatialAggregationStatistics","supportsCacheHint","supportsCentroid","supportsDisjointSpatialRelationship","supportsDistance","supportsDistinct","supportsExtent","supportsGeometryProperties","supportsHavingClause","supportsHistoricMoment","supportsMaxRecordCountFactor","supportsOrderBy","supportsPagination","supportsPercentileStatistics","supportsQuantization","supportsQuantizationEditMode","supportsQueryGeometry","supportsResultType","supportsReturnMesh","supportsSpatialAggregationStatistics","supportsSqlExpression","supportsStandardizedQueriesOnly","supportsStatistics","supportsTrueCurve"]},"__esri.CapabilitiesQuerySupportedSpatialAggregationStatistics":{title:"__esri.CapabilitiesQuerySupportedSpatialAggregationStatistics",type:"object",properties:{centroid:{type:"boolean",title:"centroid"},envelope:{type:"boolean",title:"envelope"},convexHull:{type:"boolean",title:"convexHull"}},required:["centroid","convexHull","envelope"]},"__esri.CapabilitiesQueryAttributeBins":{title:"__esri.CapabilitiesQueryAttributeBins",type:"object",properties:{supportsDate:{type:"boolean",title:"supportsDate"},supportsFixedInterval:{type:"boolean",title:"supportsFixedInterval"},supportsAutoInterval:{type:"boolean",title:"supportsAutoInterval"},supportsFixedBoundaries:{type:"boolean",title:"supportsFixedBoundaries"},supportsStackBy:{type:"boolean",title:"supportsStackBy"},supportsSplitBy:{type:"boolean",title:"supportsSplitBy"},supportsSnapToData:{type:"boolean",title:"supportsSnapToData"},supportsReturnFullIntervalBin:{type:"boolean",title:"supportsReturnFullIntervalBin"},supportsFirstDayOfWeek:{type:"boolean",title:"supportsFirstDayOfWeek"},supportsNormalization:{type:"boolean",title:"supportsNormalization"},supportedNormalizationTypes:{anyOf:[{$ref:"#/definitions/__esri.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes"},{type:"null"}],title:"supportedNormalizationTypes"},supportedStatistics:{anyOf:[{$ref:"#/definitions/__esri.CapabilitiesQueryAttributeBinsSupportedStatistics"},{type:"null"}],title:"supportedStatistics"}},required:["supportsAutoInterval","supportsDate","supportsFirstDayOfWeek","supportsFixedBoundaries","supportsFixedInterval","supportsNormalization","supportsReturnFullIntervalBin","supportsSnapToData","supportsSplitBy","supportsStackBy"]},"__esri.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes":{title:"__esri.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes",type:"object",properties:{field:{type:"boolean",title:"field"},log:{type:"boolean",title:"log"},naturalLog:{type:"boolean",title:"naturalLog"},percentOfTotal:{type:"boolean",title:"percentOfTotal"},squareRoot:{type:"boolean",title:"squareRoot"}}},"__esri.CapabilitiesQueryAttributeBinsSupportedStatistics":{title:"__esri.CapabilitiesQueryAttributeBinsSupportedStatistics",type:"object",properties:{count:{type:"boolean",title:"count"},sum:{type:"boolean",title:"sum"},avg:{type:"boolean",title:"avg"},var:{type:"boolean",title:"var"},stddev:{type:"boolean",title:"stddev"},min:{type:"boolean",title:"min"},max:{type:"boolean",title:"max"},percentileContinuous:{type:"boolean",title:"percentileContinuous"},percentileDiscrete:{type:"boolean",title:"percentileDiscrete"}}},"__esri.CapabilitiesQueryRelated":{title:"__esri.CapabilitiesQueryRelated",type:"object",properties:{supportsCacheHint:{type:"boolean",title:"supportsCacheHint"},supportsCount:{type:"boolean",title:"supportsCount"},supportsOrderBy:{type:"boolean",title:"supportsOrderBy"},supportsPagination:{type:"boolean",title:"supportsPagination"}},required:["supportsCacheHint","supportsCount","supportsOrderBy","supportsPagination"]},"__esri.CapabilitiesQueryTopFeatures":{title:"__esri.CapabilitiesQueryTopFeatures",type:"object",properties:{supportsCacheHint:{type:"boolean",title:"supportsCacheHint"}},required:["supportsCacheHint"]},"__esri.DisplayFilterInfo":{title:"__esri.DisplayFilterInfo",type:"object",properties:{activeFilterId:{description:"The active filter id.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#activeFilterId Read more...}",type:["null","string"],title:"activeFilterId"},mode:{description:"The display filter mode.",default:'"manual"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#mode Read more...}',enum:["manual","scale"],type:"string",title:"mode"},filters:{$ref:"#/definitions/__esri.Collection<__esri.DisplayFilter>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilter.html filters} that define which features should be rendered on the display.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#filters Read more...}",title:"filters"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","filters","initialized","mode"]},"__esri.Collection<__esri.DisplayFilter>":{title:"__esri.Collection<__esri.DisplayFilter>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.DynamicDataLayer":{description:"A dynamic data layer is a layer created on-the-fly with data stored in a\n[registered workspace](https://enterprise.arcgis.com/en/server/latest/manage-data/windows/overview-register-data-with-arcgis-server.htm).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#DynamicDataLayer Read more...}",title:"__esri.DynamicDataLayer",type:"object",properties:{type:{type:"string",const:"data-layer",title:"type"},dataSource:{anyOf:[{$ref:"#/definitions/__esri.JoinTableDataSource"},{$ref:"#/definitions/__esri.QueryTableDataSource"},{$ref:"#/definitions/__esri.RasterDataSource"},{$ref:"#/definitions/__esri.TableDataSource"}],title:"dataSource"},fields:{type:"array",items:{$ref:"#/definitions/__esri.DynamicDataLayerFields"},title:"fields"}},required:["dataSource","fields","type"]},"__esri.JoinTableDataSource":{description:"The result of an on-the-fly join operation at runtime.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#JoinTableDataSource Read more...}",title:"__esri.JoinTableDataSource",type:"object",properties:{type:{type:"string",const:"join-table",title:"type"},leftTableKey:{type:"string",title:"leftTableKey"},rightTableKey:{type:"string",title:"rightTableKey"},leftTableSource:{anyOf:[{$ref:"#/definitions/__esri.DynamicDataLayer"},{$ref:"#/definitions/__esri.DynamicMapLayer"}],title:"leftTableSource"},rightTableSource:{anyOf:[{$ref:"#/definitions/__esri.DynamicDataLayer"},{$ref:"#/definitions/__esri.DynamicMapLayer"}],title:"rightTableSource"},joinType:{enum:["left-inner-join","left-outer-join"],type:"string",title:"joinType"}},required:["joinType","leftTableKey","leftTableSource","rightTableKey","rightTableSource","type"]},"__esri.DynamicMapLayer":{description:"A dynamic map layer refers to a layer published in a map service that has\ndynamic layers enabled.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#DynamicMapLayer Read more...}",title:"__esri.DynamicMapLayer",type:"object",properties:{type:{type:"string",const:"map-layer",title:"type"},mapLayerId:{type:"number",title:"mapLayerId"},gdbVersion:{type:"string",title:"gdbVersion"}},required:["gdbVersion","mapLayerId","type"]},"__esri.QueryTableDataSource":{description:"A query table is a feature class or table defined by a SQL query on the fly.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource Read more...}",title:"__esri.QueryTableDataSource",type:"object",properties:{type:{type:"string",const:"query-table",title:"type"},workspaceId:{type:"string",title:"workspaceId"},query:{type:"string",title:"query"},oidFields:{type:"string",title:"oidFields"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",title:"spatialReference"},geometryType:{enum:["multipatch","multipoint","point","polygon","polyline"],type:"string",title:"geometryType"}},required:["geometryType","oidFields","query","spatialReference","type","workspaceId"]},"__esri.SpatialReference":{title:"__esri.SpatialReference",type:"object",properties:{imageCoordinateSystem:{description:"An [image coordinate system](https://developers.arcgis.com/rest/services-reference/raster-ics.htm) defines the\nspatial reference used to display the image in its original coordinates\nwithout distortion, map transformations or ortho-rectification.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#imageCoordinateSystem Read more...}",title:"imageCoordinateSystem"},isGeographic:{description:"Indicates if the spatial reference refers to a geographic coordinate system.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#isGeographic Read more...}",type:"boolean",title:"isGeographic"},isWebMercator:{description:"Indicates if the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#wkid wkid} of the spatial reference object is one of the following values:\n`102113`, `102100`, `3857`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#isWebMercator Read more...}",type:"boolean",title:"isWebMercator"},isWGS84:{description:"Indicates if the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#wkid wkid} of the spatial reference object is\n`4326`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#isWGS84 Read more...}",type:"boolean",title:"isWGS84"},isWrappable:{description:"Indicates if the spatial reference of the map supports wrapping around the International\nDate Line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#isWrappable Read more...}",type:"boolean",title:"isWrappable"},metersPerUnit:{description:"The factor to convert one unit value in the spatial reference's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#unit unit} to meters.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#metersPerUnit Read more...}",type:"number",title:"metersPerUnit"},unit:{description:"The unit of the spatial reference.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#unit Read more...}",anyOf:[{enum:["150-kilometers","1865-feet","50-kilometers","benoit-1895-a-chains","benoit-1895-a-feet","benoit-1895-a-links","benoit-1895-a-yards","benoit-1895-b-chains","benoit-1895-b-feet","benoit-1895-b-links","benoit-1895-b-yards","british-1936-feet","centimeters","chains","clarke-chains","clarke-feet","clarke-links","clarke-yards","decimeters","degrees","fathoms","feet","german-meters","gold-coast-feet","inches","indian-1937-feet","indian-1937-yards","indian-1962-feet","indian-1962-yards","indian-1975-feet","indian-1975-yards","indian-feet","indian-yards","kilometers","links","meters","micrometers","millimeters","nanometers","nautical-miles","points","rods","sears-1922-truncated-chains","sears-1922-truncated-feet","sears-1922-truncated-links","sears-1922-truncated-yards","sears-chains","sears-feet","sears-links","sears-yards","smoots","statute-miles","tx-vara","uk-nautical-miles","us-chains","us-feet","us-inches","us-links","us-miles","us-nautical-miles","us-rods","us-yards","yards"],type:"string"},{type:"null"}],title:"unit"},wkid:{description:"The well-known ID of a spatial reference.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#wkid Read more...}",type:["null","number"],title:"wkid"},wkt:{description:"The well-known text that defines a spatial reference.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#wkt Read more...}",type:["null","string"],title:"wkt"},wkt2:{description:"The well-known text of the coordinate system as defined by OGC standard for well-known text strings.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-SpatialReference.html#wkt2 Read more...}",type:["null","string"],title:"wkt2"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","imageCoordinateSystem","initialized","isGeographic","isWGS84","isWebMercator","isWrappable","metersPerUnit"]},"__esri.RasterDataSource":{description:"A file-based raster that resides in a registered raster workspace.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#RasterDataSource Read more...}",title:"__esri.RasterDataSource",type:"object",properties:{type:{type:"string",const:"raster",title:"type"},workspaceId:{type:"string",title:"workspaceId"},dataSourceName:{type:"string",title:"dataSourceName"}},required:["dataSourceName","type","workspaceId"]},"__esri.TableDataSource":{description:"A table or feature class that resides in a registered workspace (either a folder or geodatabase).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#TableDataSource Read more...}",title:"__esri.TableDataSource",type:"object",properties:{type:{type:"string",title:"type"},workspaceId:{type:"string",title:"workspaceId"},dataSourceName:{type:"string",title:"dataSourceName"},gdbVersion:{type:"string",title:"gdbVersion"}},required:["dataSourceName","gdbVersion","type","workspaceId"]},"__esri.DynamicDataLayerFields":{title:"__esri.DynamicDataLayerFields",type:"object",properties:{name:{type:"string",title:"name"},alias:{type:"string",title:"alias"}},required:["alias","name"]},"__esri.EditFieldsInfo":{description:"The fields that record who adds or edits data in the feature service and when the edit is made.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#EditFieldsInfo Read more...}",title:"__esri.EditFieldsInfo",type:"object",properties:{creatorField:{type:"string",title:"creatorField"},creationDateField:{type:"string",title:"creationDateField"},editorField:{type:"string",title:"editorField"},editDateField:{type:"string",title:"editDateField"}},required:["creationDateField","creatorField","editDateField","editorField"]},"__esri.EditingInfo":{description:"Specifies information about editing.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#EditingInfo Read more...}",title:"__esri.EditingInfo",type:"object",properties:{lastEditDate:{anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"lastEditDate"}},required:["lastEditDate"]},"__esri.FieldsIndex":{title:"__esri.FieldsIndex",type:"object",properties:{dateFields:{description:"An array of date fields or field json objects.",default:"[]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FieldsIndex.html#dateFields Read more...}",anyOf:[{type:"array",items:{}},{type:"array",items:{$ref:"#/definitions/__esri.Field"}}],title:"dateFields"}},required:["dateFields"]},"__esri.Field":{title:"__esri.Field",type:"object",properties:{alias:{description:"The display name for the field.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#alias Read more...}",type:["null","string"],title:"alias"},defaultValue:{description:"The default value set for the field.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#defaultValue Read more...}",type:["null","string","number"],title:"defaultValue"},description:{description:"Contains information describing the purpose of each field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#description Read more...}",type:["null","string"],title:"description"},editable:{description:"Indicates whether the field is editable.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#editable Read more...}",type:"boolean",title:"editable"},length:{description:"The field length.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#length Read more...}",type:["null","number"],title:"length"},name:{description:"The name of the field.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#name Read more...}",type:"string",title:"name"},nullable:{description:"Indicates if the field can accept `null` values.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#nullable Read more...}",type:"boolean",title:"nullable"},type:{description:"The data type of the field.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#type Read more...}",enum:["big-integer","blob","date","date-only","double","geometry","global-id","guid","integer","long","oid","raster","single","small-integer","string","time-only","timestamp-offset","xml"],type:"string",title:"type"},valueType:{description:"The types of values that can be assigned to a field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#valueType Read more...}",anyOf:[{enum:["binary","coordinate","count-or-amount","date-and-time","description","location-or-place-name","measurement","name-or-title","none","ordered-or-ranked","percentage-or-ratio","type-or-category","unique-identifier"],type:"string"},{type:"null"}],title:"valueType"},domain:{description:"The domain associated with the field.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#domain Read more...}",anyOf:[{$ref:"#/definitions/__esri.CodedValueDomain"},{$ref:"#/definitions/__esri.InheritedDomain"},{$ref:"#/definitions/__esri.RangeDomain"},{type:"null"}],title:"domain"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","editable","initialized","name","nullable","type"]},"__esri.CodedValueDomain":{title:"__esri.CodedValueDomain",type:"object",properties:{codedValues:{description:"An array of the coded values in the domain.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-CodedValueDomain.html#codedValues Read more...}",type:"array",items:{$ref:"#/definitions/__esri.CodedValue"},title:"codedValues"},type:{description:"The domain type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html#type Read more...}",type:"string",const:"coded-value",title:"type"},name:{description:"The domain name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html#name Read more...}",type:"string",title:"name"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["codedValues","declaredClass","destroyed","initialized","name","type"]},"__esri.CodedValue":{description:"The coded value in a domain.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-CodedValueDomain.html#CodedValue Read more...}",title:"__esri.CodedValue",type:"object",properties:{name:{type:"string",title:"name"},code:{type:["string","number"],title:"code"}},required:["code","name"]},"__esri.InheritedDomain":{title:"__esri.InheritedDomain",type:"object",properties:{type:{description:"The domain type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-InheritedDomain.html#type Read more...}",type:"string",const:"inherited",title:"type"},name:{description:"The domain name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html#name Read more...}",type:"string",title:"name"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","name","type"]},"__esri.RangeDomain":{title:"__esri.RangeDomain",type:"object",properties:{maxValue:{description:"The maximum valid value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html#maxValue Read more...}",type:["string","number"],title:"maxValue"},minValue:{description:"The minimum valid value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html#minValue Read more...}",type:["string","number"],title:"minValue"},type:{description:"The domain type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html#type Read more...}",type:"string",const:"range",title:"type"},name:{description:"The domain name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html#name Read more...}",type:"string",title:"name"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","maxValue","minValue","name","type"]},"__esri.GeometryFieldsInfo":{title:"__esri.GeometryFieldsInfo",type:"object",properties:{shapeAreaField:{description:"The name of the field that stores the feature's area, e.g.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-GeometryFieldsInfo.html#shapeAreaField Read more...}",type:["null","string"],title:"shapeAreaField"},shapeLengthField:{description:"The name of the field that stores the feature's length, e.g.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-GeometryFieldsInfo.html#shapeLengthField Read more...}",type:["null","string"],title:"shapeLengthField"},units:{description:"The units of measure for the area and length field values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-GeometryFieldsInfo.html#units Read more...}",type:["null","string"],title:"units"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.PublishingInfo":{title:"__esri.PublishingInfo",type:"object",properties:{status:{description:"Layer's publishing status while the layer is being published to the portal.",default:'"unknown"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-PublishingInfo.html#status Read more...}',enum:["published","publishing","unavailable","unknown"],type:"string",title:"status"},updating:{description:"Indicates if the layer's status is still being updated.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-PublishingInfo.html#updating Read more...}",type:"boolean",title:"updating"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","status","updating"]},"__esri.Relationship":{title:"__esri.Relationship",type:"object",properties:{cardinality:{description:"The cardinality which specifies the number of objects in the origin\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html FeatureLayer} related to the\nnumber of objects in the destination {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html FeatureLayer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#cardinality Read more...}",enum:["many-to-many","one-to-many","one-to-one"],type:"string",title:"cardinality"},catalogId:{description:"The globally unique identifier for the relationship.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#catalogId Read more...}",type:["null","string"],title:"catalogId"},composite:{description:"Indicates whether the relationship is composite.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#composite Read more...}",type:"boolean",title:"composite"},id:{description:"The unique ID for the relationship.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#id Read more...}",type:"number",title:"id"},keyField:{description:"The field used to establish the relate within the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html FeatureLayer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#keyField Read more...}",type:"string",title:"keyField"},keyFieldInRelationshipTable:{description:"The key field in an attributed relationship class table that matches the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#keyField keyField}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#keyFieldInRelationshipTable Read more...}",type:"string",title:"keyFieldInRelationshipTable"},name:{description:"The name of the relationship.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#name Read more...}",type:["null","string"],title:"name"},relatedTableId:{description:"The unique ID of the related {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html FeatureLayer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#relatedTableId Read more...}",type:"number",title:"relatedTableId"},relationshipTableId:{description:"The relationship table id.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#relationshipTableId Read more...}",type:"number",title:"relationshipTableId"},role:{description:"Indicates whether the table participating in the relationship is the `origin` or `destination` table.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html#role Read more...}",enum:["destination","origin"],type:"string",title:"role"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cardinality","composite","declaredClass","destroyed","id","initialized","keyField","keyFieldInRelationshipTable","relatedTableId","relationshipTableId","role"]},"__esri.Subtype":{title:"__esri.Subtype",type:"object",properties:{code:{description:"The subtype unique identifier number.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#code Read more...}",type:"number",title:"code"},defaultValues:{description:"Name-value pairs of fields and their default field values associated with the subtype.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#defaultValues Read more...}",title:"defaultValues"},domains:{description:"{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html Domains} associated with the subtype.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#domains Read more...}",anyOf:[{$ref:"#/definitions/HashMap<__esri.CodedValueDomain|__esri.InheritedDomain|__esri.RangeDomain>"},{type:"null"}],title:"domains"},name:{description:"The subtype name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#name Read more...}",type:"string",title:"name"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["code","declaredClass","defaultValues","destroyed","initialized","name"]},"HashMap<__esri.CodedValueDomain|__esri.InheritedDomain|__esri.RangeDomain>":{title:"HashMap<__esri.CodedValueDomain|__esri.InheritedDomain|__esri.RangeDomain>",type:"object"},"__esri.AttributeTableTemplate":{title:"__esri.AttributeTableTemplate",type:"object",properties:{orderByFields:{description:"An Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-AttributeTableTemplate.html#FieldOrder FieldOrder} objects indicating the records' sort order.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-AttributeTableTemplate.html#orderByFields Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.FieldOrder"}},{type:"null"}],title:"orderByFields"},elements:{description:"An array of attribute table element\nobjects that represent an ordered list of table elements.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-AttributeTableTemplate.html#elements Read more...}",anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.AttributeTableFieldElement"},{$ref:"#/definitions/__esri.AttributeTableGroupElement"},{$ref:"#/definitions/__esri.AttributeTableRelationshipElement"},{$ref:"#/definitions/__esri.AttributeTableAttachmentElement"}]}},{type:"null"}],title:"elements"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.FieldOrder":{description:"This object sets a field and sort order for how records display within the table.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-AttributeTableTemplate.html#FieldOrder Read more...}",title:"__esri.FieldOrder",type:"object",properties:{field:{type:"string",title:"field"},order:{enum:["asc","desc"],type:"string",title:"order"}}},"__esri.AttributeTableFieldElement":{title:"__esri.AttributeTableFieldElement",type:"object",properties:{fieldName:{description:"The field name as defined by the feature layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableFieldElement.html#fieldName Read more...}",type:["null","string"],title:"fieldName"},type:{description:"Indicates the type of attribute table {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableFieldElement.html#type Read more...}",type:"string",const:"field",title:"type"},description:{description:"The table element's description which provides the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#label Read more...}",type:["null","string"],title:"label"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.AttributeTableGroupElement":{title:"__esri.AttributeTableGroupElement",type:"object",properties:{type:{description:"The type of the attribute table {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableGroupElement.html#type Read more...}",type:"string",const:"group",title:"type"},elements:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableFieldElement.html field}, {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableRelationshipElement.html relationship}, and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableAttachmentElement.html attachment} elements to display as grouped.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableGroupElement.html#elements Read more...}",type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.AttributeTableFieldElement"},{$ref:"#/definitions/__esri.AttributeTableRelationshipElement"},{$ref:"#/definitions/__esri.AttributeTableAttachmentElement"}]},title:"elements"},description:{description:"The table element's description which provides the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#label Read more...}",type:["null","string"],title:"label"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","elements","initialized","label","type"]},"__esri.AttributeTableRelationshipElement":{title:"__esri.AttributeTableRelationshipElement",type:"object",properties:{relationshipId:{description:"The numeric id value for the defined relationship.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableRelationshipElement.html#relationshipId Read more...}",type:"number",title:"relationshipId"},type:{description:"Indicates the type of attribute table {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableRelationshipElement.html#type Read more...}",type:"string",const:"relationship",title:"type"},description:{description:"The table element's description which provides the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#label Read more...}",type:["null","string"],title:"label"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","initialized","label","relationshipId","type"]},"__esri.AttributeTableAttachmentElement":{title:"__esri.AttributeTableAttachmentElement",type:"object",properties:{displayType:{description:"The display type of the attachment element in the table.",default:'"auto"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableAttachmentElement.html#displayType Read more...}',type:"string",const:"auto",title:"displayType"},type:{description:"The type of the attribute table {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableAttachmentElement.html#type Read more...}",type:"string",const:"attachment",title:"type"},description:{description:"The table element's description which provides the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-tables-elements-AttributeTableElement.html#label Read more...}",type:["null","string"],title:"label"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","displayType","initialized","label","type"]},"__esri.FeatureLayerBaseElevationInfo":{title:"__esri.FeatureLayerBaseElevationInfo",type:"object",properties:{featureExpressionInfo:{anyOf:[{$ref:"#/definitions/__esri.FeatureLayerBaseElevationInfoFeatureExpressionInfo"},{type:"null"}],title:"featureExpressionInfo"},mode:{enum:["absolute-height","on-the-ground","relative-to-ground","relative-to-scene"],type:"string",title:"mode"},offset:{type:["null","number"],title:"offset"},unit:{anyOf:[{enum:["centimeters","decimal-degrees","decimeters","feet","inches","kilometers","meters","miles","millimeters","nautical-miles","unknown","us-feet","yards"],type:"string"},{type:"null"}],title:"unit"}},required:["mode"]},"__esri.FeatureLayerBaseElevationInfoFeatureExpressionInfo":{title:"__esri.FeatureLayerBaseElevationInfoFeatureExpressionInfo",type:"object",properties:{title:{type:"string",title:"title"},expression:{type:"string",title:"expression"}},required:["expression","title"]},"__esri.FeatureEffect":{title:"__esri.FeatureEffect",type:"object",properties:{excludedEffect:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#Effect effect} applied to features that do not meet\nthe {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter filter} requirements.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedEffect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"excludedEffect"},excludedLabelsVisible:{description:"Indicates if labels are visible for features that are {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedEffect excluded} from the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter filter}.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedLabelsVisible Read more...}",type:"boolean",title:"excludedLabelsVisible"},includedEffect:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#Effect effect} applied to features that meet the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter filter} requirements.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#includedEffect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"includedEffect"},filter:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html filter} that drives the effect.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureFilter"},{type:"null"}],title:"filter"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","excludedLabelsVisible","initialized"]},"__esri.FeatureFilter":{title:"__esri.FeatureFilter",type:"object",properties:{distance:{description:"Specifies a search distance from a given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry geometry} in a spatial filter.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#distance Read more...}",type:["null","number"],title:"distance"},objectIds:{description:"An array of objectIds of the features to be filtered.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#objectIds Read more...}",anyOf:[{type:"array",items:{type:"number"}},{type:"null"}],title:"objectIds"},spatialRelationship:{description:"For spatial filters, this parameter defines the spatial relationship to filter features in the layer view\nagainst the filter {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry geometry}.",default:'"intersects"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#spatialRelationship Read more...}',type:"string",title:"spatialRelationship"},units:{description:"The unit for calculating the buffer distance when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#distance distance} is specified in a spatial filter.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#units Read more...}",anyOf:[{enum:["feet","kilometers","meters","miles","nautical-miles","us-nautical-miles"],type:"string"},{type:"null"}],title:"units"},where:{description:"A where clause for the feature filter.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#where Read more...}",type:["null","string"],title:"where"},geometry:{description:"The geometry to apply to the spatial filter.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{$ref:"#/definitions/__esri.Multipoint"},{$ref:"#/definitions/__esri.Point"},{$ref:"#/definitions/__esri.Polygon"},{$ref:"#/definitions/__esri.Polyline"},{$ref:"#/definitions/__esri.Mesh"},{type:"null"}],title:"geometry"},timeExtent:{description:"A range of time with start and end date.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#timeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"timeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","spatialRelationship"]},"__esri.Extent":{title:"__esri.Extent",type:"object",properties:{center:{$ref:"#/definitions/__esri.Point",description:"The center point of the extent in map units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#center Read more...}",title:"center"},height:{description:"The height of the extent in map units (the distance between {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymin ymin} and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymax ymax}).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#height Read more...}",type:"number",title:"height"},mmax:{description:"The maximum possible `m` value in an extent envelope.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#mmax Read more...}",type:"number",title:"mmax"},mmin:{description:"The minimum possible `m` value of an extent envelope.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#mmin Read more...}",type:"number",title:"mmin"},type:{description:"The geometry type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#type Read more...}",type:"string",const:"extent",title:"type"},width:{description:"The width of the extent in map units (the distance between {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmin xmin} and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmax xmax}).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#width Read more...}",type:"number",title:"width"},xmax:{description:"The maximum X-coordinate of an extent envelope.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmax Read more...}",type:"number",title:"xmax"},xmin:{description:"The minimum X-coordinate of an extent envelope.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#xmin Read more...}",type:"number",title:"xmin"},ymax:{description:"The maximum Y-coordinate of an extent envelope.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymax Read more...}",type:"number",title:"ymax"},ymin:{description:"The minimum Y-coordinate of an extent envelope.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#ymin Read more...}",type:"number",title:"ymin"},zmax:{description:"The maximum possible `z`, or elevation, value in an extent envelope.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#zmax Read more...}",type:"number",title:"zmax"},zmin:{description:"The minimum possible `z`, or elevation, value of an extent envelope.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html#zmin Read more...}",type:"number",title:"zmin"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},extent:{description:"The extent of the geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","center","declaredClass","destroyed","hasM","hasZ","height","initialized","spatialReference","type","width","xmax","xmin","ymax","ymin"]},"__esri.Point":{title:"__esri.Point",type:"object",properties:{latitude:{description:"The latitude of the point.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#latitude Read more...}",type:["null","number"],title:"latitude"},longitude:{description:"The longitude of the point.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#longitude Read more...}",type:["null","number"],title:"longitude"},m:{description:"The m-coordinate of the point in map units.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#m Read more...}",type:"number",title:"m"},type:{description:"The string value representing the type of geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#type Read more...}",type:"string",const:"point",title:"type"},x:{description:"The x-coordinate (easting) of the point in map units.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#x Read more...}",type:"number",title:"x"},y:{description:"The y-coordinate (northing) of the point in map units.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#y Read more...}",type:"number",title:"y"},z:{description:"The z-coordinate (or elevation) of the point in map units.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Point.html#z Read more...}",type:"number",title:"z"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},extent:{description:"The extent of the geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","declaredClass","destroyed","extent","hasM","hasZ","initialized","spatialReference","type","x","y"]},"__esri.Multipoint":{title:"__esri.Multipoint",type:"object",properties:{points:{description:"An array of points.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Multipoint.html#points Read more...}",type:"array",items:{type:"array",items:{type:"number"}},title:"points"},type:{description:"The string value representing the type of geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Multipoint.html#type Read more...}",type:"string",const:"multipoint",title:"type"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},extent:{description:"The extent of the geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","declaredClass","destroyed","extent","hasM","hasZ","initialized","points","spatialReference","type"]},"__esri.Polygon":{title:"__esri.Polygon",type:"object",properties:{centroid:{description:"The centroid of the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html#centroid Read more...}",anyOf:[{$ref:"#/definitions/__esri.Point"},{type:"null"}],title:"centroid"},curveRings:{description:"A two dimensional array of points and curves that define the polygon geometry.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html#curveRings Read more...}",type:"array",items:{type:"array",items:{}},title:"curveRings"},isSelfIntersecting:{description:"Checks to see if polygon rings cross each other and indicates if the polygon is\nself-intersecting, which means the ring of the polygon crosses itself.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html#isSelfIntersecting Read more...}",type:"boolean",title:"isSelfIntersecting"},rings:{description:"An array of rings.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html#rings Read more...}",type:"array",items:{type:"array",items:{type:"array",items:{type:"number"}}},title:"rings"},type:{description:"The string value representing the type of geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polygon.html#type Read more...}",type:"string",const:"polygon",title:"type"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},extent:{description:"The extent of the geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","declaredClass","destroyed","extent","hasM","hasZ","initialized","isSelfIntersecting","rings","spatialReference","type"]},"__esri.Polyline":{title:"__esri.Polyline",type:"object",properties:{curvePaths:{description:"A two dimensional array of points and curves that define the polyline geometry.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#curvePaths Read more...}",type:"array",items:{type:"array",items:{}},title:"curvePaths"},paths:{description:"An array of paths, or line segments, that make up the polyline.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Polyline.html#paths Read more...}",type:"array",items:{type:"array",items:{type:"array",items:{type:"number"}}},title:"paths"},type:{description:"The geometry type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#type Read more...}",type:"string",const:"polyline",title:"type"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},extent:{description:"The extent of the geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","declaredClass","destroyed","extent","hasM","hasZ","initialized","paths","spatialReference","type"]},"__esri.Mesh":{title:"__esri.Mesh",type:"object",properties:{extent:{$ref:"#/definitions/__esri.Extent",description:"The 3D extent of the mesh geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#extent Read more...}",title:"extent"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},origin:{$ref:"#/definitions/__esri.Point",description:"The origin of the mesh.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#origin Read more...}",title:"origin"},type:{description:"The string value representing the type of geometry.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#type Read more...}",type:"string",const:"mesh",title:"type"},vertexAttributes:{$ref:"#/definitions/__esri.MeshVertexAttributes",description:"Object describing the attributes of each vertex of the mesh.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes Read more...}",title:"vertexAttributes"},components:{description:"An array of mesh components that can be used to apply materials\nto different regions of the same mesh.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#components Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.MeshComponent"}},{type:"null"}],title:"components"},transform:{description:"Additional local transformation of the mesh vertices.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#transform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTransform"},{type:"null"}],title:"transform"},vertexSpace:{description:"The vertex space of the mesh.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexSpace Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshGeoreferencedVertexSpace"},{$ref:"#/definitions/__esri.MeshLocalVertexSpace"}],title:"vertexSpace"},cache:{description:"The cache is used to store values computed from geometries that need to be cleared or recomputed upon mutation.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#cache Read more...}",title:"cache"},hasM:{description:"Indicates if the geometry has M values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates if the geometry has z-values (elevation).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#hasZ Read more...}",type:"boolean",title:"hasZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the geometry.",default:"SpatialReference.WGS84 // wkid: 4326\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Geometry.html#spatialReference Read more...}",title:"spatialReference"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cache","declaredClass","destroyed","extent","hasM","hasZ","initialized","loadStatus","loadWarnings","origin","spatialReference","type","vertexAttributes","vertexSpace"]},"__esri.Error":{title:"__esri.Error",type:"object",properties:{details:{description:"The details object provides additional details specific to the error,\ngiving more information about why the error was raised.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html#details Read more...}",title:"details"},message:{description:"A message describing the details of the error.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html#message Read more...}",type:"string",title:"message"},name:{description:"A unique error name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html#name Read more...}",type:"string",title:"name"}},required:["details","message","name"]},"__esri.MeshVertexAttributes":{title:"__esri.MeshVertexAttributes",type:"object",properties:{position:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Float64Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"],title:"position"},uv:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Float32Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"]},{type:"null"}],title:"uv"},normal:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Float32Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"]},{type:"null"}],title:"normal"},color:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Uint8Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"]},{type:"null"}],title:"color"},tangent:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Float32Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"]},{type:"null"}],title:"tangent"}},required:["position"]},ArrayBufferLike:{title:"ArrayBufferLike",anyOf:[{$ref:"#/definitions/ArrayBuffer"},{$ref:"#/definitions/SharedArrayBuffer"}]},ArrayBuffer:{title:"ArrayBuffer",type:"object",properties:{byteLength:{type:"number",title:"byteLength"},"__@toStringTag@16125":{type:"string",title:"__@toStringTag@16125"}},required:["__@toStringTag@16125","byteLength"]},SharedArrayBuffer:{title:"SharedArrayBuffer",type:"object",properties:{byteLength:{type:"number",title:"byteLength"},"__@species@14450":{$ref:"#/definitions/SharedArrayBuffer",title:"__@species@14450"},"__@toStringTag@16125":{type:"string",const:"SharedArrayBuffer",title:"__@toStringTag@16125"}},required:["__@species@14450","__@toStringTag@16125","byteLength"]},"__esri.MeshComponent":{title:"__esri.MeshComponent",type:"object",properties:{name:{description:"Specifies a name of the component.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#name Read more...}",type:["null","string"],title:"name"},shading:{description:"Specifies the type of normals used for lighting.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#shading Read more...}",enum:["flat","smooth","source"],type:"string",title:"shading"},faces:{description:"A flat array of indices that refer to vertices in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Mesh.html#vertexAttributes vertexAttributes} of the\nmesh to which the component belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#faces Read more...}",anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Uint32Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"]},{type:"null"}],title:"faces"},material:{description:"The material determines how the component is visualized.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html#material Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshMaterial"},{$ref:"#/definitions/__esri.MeshMaterialMetallicRoughness"},{type:"null"}],title:"material"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","shading"]},"__esri.MeshMaterial":{title:"__esri.MeshMaterial",type:"object",properties:{alphaCutoff:{description:"Specifies how transparency on the object is handled.",default:"0.5\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaCutoff Read more...}",type:"number",title:"alphaCutoff"},alphaMode:{description:"Specifies how transparency on the object is handled.",default:'"auto"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaMode Read more...}',enum:["auto","blend","mask","opaque"],type:"string",title:"alphaMode"},doubleSided:{description:"Specifies whether both sides of each triangle are displayed, or only the front sides.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#doubleSided Read more...}",type:"boolean",title:"doubleSided"},color:{description:"Specifies a single, uniform color for the mesh component.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#color Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},colorTexture:{description:"Specifies a texture from which to get color information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"colorTexture"},colorTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the color texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"colorTextureTransform"},normalTexture:{description:"Specifies a texture from which to get normal information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"normalTexture"},normalTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the normal texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"normalTextureTransform"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["alphaCutoff","alphaMode","declaredClass","destroyed","doubleSided","initialized"]},"__esri.Color":{title:"__esri.Color",type:"object",properties:{a:{description:"The alpha value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html#a Read more...}",type:"number",title:"a"},b:{description:"The blue value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html#b Read more...}",type:"number",title:"b"},g:{description:"The green value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html#g Read more...}",type:"number",title:"g"},r:{description:"The red value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html#r Read more...}",type:"number",title:"r"}},required:["a","b","g","r"]},"__esri.MeshTexture":{title:"__esri.MeshTexture",type:"object",properties:{data:{description:"A direct reference to the image or video data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#data Read more...}",anyOf:[{$ref:"#/definitions/HTMLCanvasElement"},{$ref:"#/definitions/HTMLImageElement"},{$ref:"#/definitions/HTMLVideoElement"},{$ref:"#/definitions/ImageData"},{$ref:"#/definitions/__esri.CompressedTextureData"},{type:"null"}],title:"data"},transparent:{description:"Indicates whether the image data should be interpreted as being semi-transparent.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#transparent Read more...}",type:"boolean",title:"transparent"},url:{description:"The url to the image resource.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#url Read more...}",type:["null","string"],title:"url"},wrap:{description:"Specifies how uv coordinates outside the [0, 1] range are handled.",default:'"repeat"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#wrap Read more...}',anyOf:[{$ref:"#/definitions/__esri.SeparableWrapModes"},{enum:["clamp","mirror","repeat"],type:"string"}],title:"wrap"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","transparent","wrap"]},HTMLCanvasElement:{title:"HTMLCanvasElement",type:"object",properties:{height:{type:"number",title:"height"},width:{type:"number",title:"width"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","enterKeyHint","firstChild","firstElementChild","height","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","style","tabIndex","tagName","textContent","title","translate","width"]},Element:{title:"Element",type:"object",properties:{attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributes","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","firstChild","firstElementChild","id","innerHTML","isConnected","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","onfullscreenchange","onfullscreenerror","outerHTML","ownerDocument","parentElement","parentNode","part","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","tagName","textContent"]},Attr:{title:"Attr",type:"object",properties:{localName:{type:"string",title:"localName"},name:{type:"string",title:"name"},namespaceURI:{type:["null","string"],title:"namespaceURI"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},ownerElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"ownerElement"},prefix:{type:["null","string"],title:"prefix"},specified:{type:"boolean",title:"specified"},value:{type:"string",title:"value"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","baseURI","childNodes","firstChild","isConnected","lastChild","localName","name","namespaceURI","nextSibling","nodeName","nodeType","nodeValue","ownerDocument","ownerElement","parentElement","parentNode","prefix","previousSibling","specified","textContent","value"]},Document:{title:"Document",type:"object",properties:{URL:{type:"string",title:"URL"},alinkColor:{type:"string",title:"alinkColor"},all:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"all"},anchors:{type:"array",items:{$ref:"#/definitions/HTMLAnchorElement"},title:"anchors"},applets:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"applets"},bgColor:{type:"string",title:"bgColor"},body:{$ref:"#/definitions/HTMLElement",title:"body"},characterSet:{type:"string",title:"characterSet"},charset:{type:"string",title:"charset"},compatMode:{type:"string",title:"compatMode"},contentType:{type:"string",title:"contentType"},cookie:{type:"string",title:"cookie"},currentScript:{anyOf:[{$ref:"#/definitions/HTMLScriptElement"},{$ref:"#/definitions/SVGScriptElement"},{type:"null"}],title:"currentScript"},defaultView:{anyOf:[{allOf:[{$ref:"#/definitions/Window"},{type:"object"}]},{type:"null"}],title:"defaultView"},designMode:{type:"string",title:"designMode"},dir:{type:"string",title:"dir"},doctype:{anyOf:[{$ref:"#/definitions/DocumentType"},{type:"null"}],title:"doctype"},documentElement:{$ref:"#/definitions/HTMLElement",title:"documentElement"},documentURI:{type:"string",title:"documentURI"},domain:{type:"string",title:"domain"},embeds:{type:"array",items:{$ref:"#/definitions/HTMLEmbedElement"},title:"embeds"},fgColor:{type:"string",title:"fgColor"},forms:{type:"array",items:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{acceptCharset:{type:"string",title:"acceptCharset"},action:{type:"string",title:"action"},autocomplete:{$ref:"#/definitions/AutoFillBase",title:"autocomplete"},elements:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"elements"},encoding:{type:"string",title:"encoding"},enctype:{type:"string",title:"enctype"},length:{type:"number",title:"length"},method:{type:"string",title:"method"},name:{type:"string",title:"name"},noValidate:{type:"boolean",title:"noValidate"},rel:{type:"string",title:"rel"},relList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"relList"},target:{type:"string",title:"target"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","acceptCharset","accessKey","accessKeyLabel","action","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autocomplete","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","elements","encoding","enctype","enterKeyHint","firstChild","firstElementChild","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","length","localName","method","name","namespaceURI","nextElementSibling","nextSibling","noValidate","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","rel","relList","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","style","tabIndex","tagName","target","textContent","title","translate"]},title:"forms"},fullscreen:{type:"boolean",title:"fullscreen"},fullscreenEnabled:{type:"boolean",title:"fullscreenEnabled"},head:{$ref:"#/definitions/HTMLHeadElement",title:"head"},hidden:{type:"boolean",title:"hidden"},images:{type:"array",items:{$ref:"#/definitions/HTMLImageElement"},title:"images"},implementation:{$ref:"#/definitions/DOMImplementation",title:"implementation"},inputEncoding:{type:"string",title:"inputEncoding"},lastModified:{type:"string",title:"lastModified"},linkColor:{type:"string",title:"linkColor"},links:{type:"array",items:{anyOf:[{$ref:"#/definitions/HTMLAnchorElement"},{$ref:"#/definitions/HTMLAreaElement"}]},title:"links"},location:{$ref:"#/definitions/Location",title:"location"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},onpointerlockchange:{type:["null","object"],title:"onpointerlockchange"},onpointerlockerror:{type:["null","object"],title:"onpointerlockerror"},onreadystatechange:{type:["null","object"],title:"onreadystatechange"},onvisibilitychange:{type:["null","object"],title:"onvisibilitychange"},ownerDocument:{type:"null",title:"ownerDocument"},pictureInPictureEnabled:{type:"boolean",title:"pictureInPictureEnabled"},plugins:{type:"array",items:{$ref:"#/definitions/HTMLEmbedElement"},title:"plugins"},readyState:{$ref:"#/definitions/DocumentReadyState",title:"readyState"},referrer:{type:"string",title:"referrer"},rootElement:{anyOf:[{$ref:"#/definitions/SVGSVGElement"},{type:"null"}],title:"rootElement"},scripts:{type:"array",items:{$ref:"#/definitions/HTMLScriptElement"},title:"scripts"},scrollingElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"scrollingElement"},timeline:{$ref:"#/definitions/DocumentTimeline",title:"timeline"},title:{type:"string",title:"title"},visibilityState:{$ref:"#/definitions/DocumentVisibilityState",title:"visibilityState"},vlinkColor:{type:"string",title:"vlinkColor"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},activeElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"activeElement"},adoptedStyleSheets:{type:"array",items:{$ref:"#/definitions/CSSStyleSheet"},title:"adoptedStyleSheets"},fullscreenElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"fullscreenElement"},pictureInPictureElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"pictureInPictureElement"},pointerLockElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"pointerLockElement"},styleSheets:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/CSSStyleSheet"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"styleSheets"},fonts:{$ref:"#/definitions/FontFaceSet",title:"fonts"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","URL","activeElement","adoptedStyleSheets","alinkColor","all","anchors","applets","baseURI","bgColor","body","characterSet","charset","childElementCount","childNodes","children","compatMode","contentType","cookie","currentScript","defaultView","designMode","dir","doctype","documentElement","documentURI","domain","embeds","fgColor","firstChild","firstElementChild","fonts","forms","fullscreen","fullscreenElement","fullscreenEnabled","head","hidden","images","implementation","inputEncoding","isConnected","lastChild","lastElementChild","lastModified","linkColor","links","location","nextSibling","nodeName","nodeType","nodeValue","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointerlockchange","onpointerlockerror","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreadystatechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvisibilitychange","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","ownerDocument","parentElement","parentNode","pictureInPictureElement","pictureInPictureEnabled","plugins","pointerLockElement","previousSibling","readyState","referrer","rootElement","scripts","scrollingElement","styleSheets","textContent","timeline","title","visibilityState","vlinkColor"]},HTMLAnchorElement:{title:"HTMLAnchorElement",type:"object",properties:{charset:{type:"string",title:"charset"},coords:{type:"string",title:"coords"},download:{type:"string",title:"download"},hreflang:{type:"string",title:"hreflang"},name:{type:"string",title:"name"},ping:{type:"string",title:"ping"},referrerPolicy:{type:"string",title:"referrerPolicy"},rel:{type:"string",title:"rel"},relList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"relList"},rev:{type:"string",title:"rev"},shape:{type:"string",title:"shape"},target:{type:"string",title:"target"},text:{type:"string",title:"text"},type:{type:"string",title:"type"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"},hash:{type:"string",title:"hash"},host:{type:"string",title:"host"},hostname:{type:"string",title:"hostname"},href:{type:"string",title:"href"},origin:{type:"string",title:"origin"},password:{type:"string",title:"password"},pathname:{type:"string",title:"pathname"},port:{type:"string",title:"port"},protocol:{type:"string",title:"protocol"},search:{type:"string",title:"search"},username:{type:"string",title:"username"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","charset","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","coords","dataset","dir","download","draggable","enterKeyHint","firstChild","firstElementChild","hash","hidden","host","hostname","href","hreflang","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","name","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","origin","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","password","pathname","ping","popover","port","prefix","previousElementSibling","previousSibling","protocol","referrerPolicy","rel","relList","rev","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","search","shadowRoot","shape","slot","spellcheck","style","tabIndex","tagName","target","text","textContent","title","translate","type","username"]},ShadowRoot:{title:"ShadowRoot",type:"object",properties:{clonable:{type:"boolean",title:"clonable"},delegatesFocus:{type:"boolean",title:"delegatesFocus"},host:{$ref:"#/definitions/Element",title:"host"},mode:{$ref:"#/definitions/ShadowRootMode",title:"mode"},onslotchange:{type:["null","object"],title:"onslotchange"},slotAssignment:{$ref:"#/definitions/SlotAssignmentMode",title:"slotAssignment"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},activeElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"activeElement"},adoptedStyleSheets:{type:"array",items:{$ref:"#/definitions/CSSStyleSheet"},title:"adoptedStyleSheets"},fullscreenElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"fullscreenElement"},pictureInPictureElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"pictureInPictureElement"},pointerLockElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"pointerLockElement"},styleSheets:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/CSSStyleSheet"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"styleSheets"},innerHTML:{type:"string",title:"innerHTML"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","activeElement","adoptedStyleSheets","baseURI","childElementCount","childNodes","children","clonable","delegatesFocus","firstChild","firstElementChild","fullscreenElement","host","innerHTML","isConnected","lastChild","lastElementChild","mode","nextSibling","nodeName","nodeType","nodeValue","onslotchange","ownerDocument","parentElement","parentNode","pictureInPictureElement","pointerLockElement","previousSibling","slotAssignment","styleSheets","textContent"]},ShadowRootMode:{title:"ShadowRootMode",enum:["closed","open"],type:"string"},SlotAssignmentMode:{title:"SlotAssignmentMode",enum:["manual","named"],type:"string"},ChildNode:{title:"ChildNode",type:"object",properties:{baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},ownerDocument:{anyOf:[{$ref:"#/definitions/Document"},{type:"null"}],title:"ownerDocument"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","baseURI","childNodes","firstChild","isConnected","lastChild","nextSibling","nodeName","nodeType","nodeValue","ownerDocument","parentElement","parentNode","previousSibling","textContent"]},HTMLElement:{title:"HTMLElement",type:"object",properties:{accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","enterKeyHint","firstChild","firstElementChild","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","style","tabIndex","tagName","textContent","title","translate"]},ParentNode:{title:"ParentNode",type:"object",properties:{childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},ownerDocument:{anyOf:[{$ref:"#/definitions/Document"},{type:"null"}],title:"ownerDocument"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","baseURI","childElementCount","childNodes","children","firstChild","firstElementChild","isConnected","lastChild","lastElementChild","nextSibling","nodeName","nodeType","nodeValue","ownerDocument","parentElement","parentNode","previousSibling","textContent"]},HTMLSlotElement:{title:"HTMLSlotElement",type:"object",properties:{name:{type:"string",title:"name"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","enterKeyHint","firstChild","firstElementChild","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","name","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","style","tabIndex","tagName","textContent","title","translate"]},StylePropertyMap:{title:"StylePropertyMap",type:"object",properties:{size:{type:"number",title:"size"}},required:["size"]},CSSRule:{title:"CSSRule",type:"object",properties:{cssText:{type:"string",title:"cssText"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},parentStyleSheet:{anyOf:[{$ref:"#/definitions/CSSStyleSheet"},{type:"null"}],title:"parentStyleSheet"},type:{type:"number",title:"type"},STYLE_RULE:{type:"number",const:1,title:"STYLE_RULE"},CHARSET_RULE:{type:"number",const:2,title:"CHARSET_RULE"},IMPORT_RULE:{type:"number",const:3,title:"IMPORT_RULE"},MEDIA_RULE:{type:"number",const:4,title:"MEDIA_RULE"},FONT_FACE_RULE:{type:"number",const:5,title:"FONT_FACE_RULE"},PAGE_RULE:{type:"number",const:6,title:"PAGE_RULE"},NAMESPACE_RULE:{type:"number",const:10,title:"NAMESPACE_RULE"},KEYFRAMES_RULE:{type:"number",const:7,title:"KEYFRAMES_RULE"},KEYFRAME_RULE:{type:"number",const:8,title:"KEYFRAME_RULE"},SUPPORTS_RULE:{type:"number",const:12,title:"SUPPORTS_RULE"},COUNTER_STYLE_RULE:{type:"number",const:11,title:"COUNTER_STYLE_RULE"},FONT_FEATURE_VALUES_RULE:{type:"number",const:14,title:"FONT_FEATURE_VALUES_RULE"}},required:["CHARSET_RULE","COUNTER_STYLE_RULE","FONT_FACE_RULE","FONT_FEATURE_VALUES_RULE","IMPORT_RULE","KEYFRAMES_RULE","KEYFRAME_RULE","MEDIA_RULE","NAMESPACE_RULE","PAGE_RULE","STYLE_RULE","SUPPORTS_RULE","cssText","parentRule","parentStyleSheet","type"]},CSSStyleSheet:{title:"CSSStyleSheet",type:"object",properties:{cssRules:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/CSSRule"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"cssRules"},ownerRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"ownerRule"},rules:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/CSSRule"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"rules"},disabled:{type:"boolean",title:"disabled"},href:{type:["null","string"],title:"href"},media:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},mediaText:{type:"string",title:"mediaText"}},required:["length","mediaText"],title:"media"},ownerNode:{anyOf:[{$ref:"#/definitions/Element"},{$ref:"#/definitions/ProcessingInstruction"},{type:"null"}],title:"ownerNode"},parentStyleSheet:{anyOf:[{$ref:"#/definitions/CSSStyleSheet"},{type:"null"}],title:"parentStyleSheet"},title:{type:["null","string"],title:"title"},type:{type:"string",title:"type"}},required:["cssRules","disabled","href","media","ownerNode","ownerRule","parentStyleSheet","rules","title","type"]},ProcessingInstruction:{title:"ProcessingInstruction",type:"object",properties:{ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},target:{type:"string",title:"target"},data:{type:"string",title:"data"},length:{type:"number",title:"length"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},sheet:{anyOf:[{$ref:"#/definitions/CSSStyleSheet"},{type:"null"}],title:"sheet"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","baseURI","childNodes","data","firstChild","isConnected","lastChild","length","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","ownerDocument","parentElement","parentNode","previousElementSibling","previousSibling","sheet","target","textContent"]},OnErrorEventHandler:{title:"OnErrorEventHandler",anyOf:[{$ref:"#/definitions/OnErrorEventHandlerNonNull"},{type:"null"}]},OnErrorEventHandlerNonNull:{title:"OnErrorEventHandlerNonNull",type:"object"},DOMStringMap:{title:"DOMStringMap",type:"object",additionalProperties:{type:"string"}},HTMLScriptElement:{title:"HTMLScriptElement",type:"object",properties:{async:{type:"boolean",title:"async"},charset:{type:"string",title:"charset"},crossOrigin:{type:["null","string"],title:"crossOrigin"},defer:{type:"boolean",title:"defer"},event:{type:"string",title:"event"},fetchPriority:{type:"string",title:"fetchPriority"},htmlFor:{type:"string",title:"htmlFor"},integrity:{type:"string",title:"integrity"},noModule:{type:"boolean",title:"noModule"},referrerPolicy:{type:"string",title:"referrerPolicy"},src:{type:"string",title:"src"},text:{type:"string",title:"text"},type:{type:"string",title:"type"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","async","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","charset","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","crossOrigin","dataset","defer","dir","draggable","enterKeyHint","event","fetchPriority","firstChild","firstElementChild","hidden","htmlFor","id","inert","innerHTML","innerText","inputMode","integrity","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","noModule","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","referrerPolicy","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","src","style","tabIndex","tagName","text","textContent","title","translate","type"]},SVGScriptElement:{title:"SVGScriptElement",type:"object",properties:{type:{type:"string",title:"type"},className:{title:"className"},ownerSVGElement:{anyOf:[{$ref:"#/definitions/SVGSVGElement"},{type:"null"}],title:"ownerSVGElement"},viewportElement:{anyOf:[{$ref:"#/definitions/SVGElement"},{type:"null"}],title:"viewportElement"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"},href:{$ref:"#/definitions/SVGAnimatedString",title:"href"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","dataset","firstChild","firstElementChild","href","id","innerHTML","isConnected","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","ownerDocument","ownerSVGElement","parentElement","parentNode","part","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","style","tabIndex","tagName","textContent","type","viewportElement"]},SVGSVGElement:{title:"SVGSVGElement",type:"object",properties:{currentScale:{type:"number",title:"currentScale"},currentTranslate:{$ref:"#/definitions/DOMPointReadOnly",title:"currentTranslate"},height:{$ref:"#/definitions/SVGAnimatedLength",title:"height"},width:{$ref:"#/definitions/SVGAnimatedLength",title:"width"},x:{$ref:"#/definitions/SVGAnimatedLength",title:"x"},y:{$ref:"#/definitions/SVGAnimatedLength",title:"y"},transform:{$ref:"#/definitions/SVGAnimatedTransformList",title:"transform"},className:{title:"className"},ownerSVGElement:{anyOf:[{$ref:"#/definitions/SVGSVGElement"},{type:"null"}],title:"ownerSVGElement"},viewportElement:{anyOf:[{$ref:"#/definitions/SVGElement"},{type:"null"}],title:"viewportElement"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"},requiredExtensions:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},numberOfItems:{type:"number",title:"numberOfItems"}},required:["length","numberOfItems"],title:"requiredExtensions"},systemLanguage:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},numberOfItems:{type:"number",title:"numberOfItems"}},required:["length","numberOfItems"],title:"systemLanguage"},preserveAspectRatio:{$ref:"#/definitions/SVGAnimatedPreserveAspectRatio",title:"preserveAspectRatio"},viewBox:{$ref:"#/definitions/SVGAnimatedRect",title:"viewBox"},onafterprint:{type:["null","object"],title:"onafterprint"},onbeforeprint:{type:["null","object"],title:"onbeforeprint"},onbeforeunload:{type:["null","object"],title:"onbeforeunload"},ongamepadconnected:{type:["null","object"],title:"ongamepadconnected"},ongamepaddisconnected:{type:["null","object"],title:"ongamepaddisconnected"},onhashchange:{type:["null","object"],title:"onhashchange"},onlanguagechange:{type:["null","object"],title:"onlanguagechange"},onmessage:{type:["null","object"],title:"onmessage"},onmessageerror:{type:["null","object"],title:"onmessageerror"},onoffline:{type:["null","object"],title:"onoffline"},ononline:{type:["null","object"],title:"ononline"},onpagehide:{type:["null","object"],title:"onpagehide"},onpageshow:{type:["null","object"],title:"onpageshow"},onpopstate:{type:["null","object"],title:"onpopstate"},onrejectionhandled:{type:["null","object"],title:"onrejectionhandled"},onstorage:{type:["null","object"],title:"onstorage"},onunhandledrejection:{type:["null","object"],title:"onunhandledrejection"},onunload:{type:["null","object"],title:"onunload"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","currentScale","currentTranslate","dataset","firstChild","firstElementChild","height","id","innerHTML","isConnected","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","onabort","onafterprint","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforeprint","onbeforetoggle","onbeforeunload","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongamepadconnected","ongamepaddisconnected","ongotpointercapture","onhashchange","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onlanguagechange","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmessage","onmessageerror","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onoffline","ononline","onpagehide","onpageshow","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onpopstate","onprogress","onratechange","onrejectionhandled","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onstorage","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onunhandledrejection","onunload","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","ownerDocument","ownerSVGElement","parentElement","parentNode","part","prefix","preserveAspectRatio","previousElementSibling","previousSibling","requiredExtensions","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","style","systemLanguage","tabIndex","tagName","textContent","transform","viewBox","viewportElement","width","x","y"]},DOMPointReadOnly:{title:"DOMPointReadOnly",type:"object",properties:{w:{type:"number",title:"w"},x:{type:"number",title:"x"},y:{type:"number",title:"y"},z:{type:"number",title:"z"}},required:["w","x","y","z"]},SVGAnimatedLength:{title:"SVGAnimatedLength",type:"object",properties:{animVal:{$ref:"#/definitions/SVGLength",title:"animVal"},baseVal:{$ref:"#/definitions/SVGLength",title:"baseVal"}},required:["animVal","baseVal"]},SVGLength:{title:"SVGLength",type:"object",properties:{unitType:{type:"number",title:"unitType"},value:{type:"number",title:"value"},valueAsString:{type:"string",title:"valueAsString"},valueInSpecifiedUnits:{type:"number",title:"valueInSpecifiedUnits"},SVG_LENGTHTYPE_UNKNOWN:{type:"number",const:0,title:"SVG_LENGTHTYPE_UNKNOWN"},SVG_LENGTHTYPE_NUMBER:{type:"number",const:1,title:"SVG_LENGTHTYPE_NUMBER"},SVG_LENGTHTYPE_PERCENTAGE:{type:"number",const:2,title:"SVG_LENGTHTYPE_PERCENTAGE"},SVG_LENGTHTYPE_EMS:{type:"number",const:3,title:"SVG_LENGTHTYPE_EMS"},SVG_LENGTHTYPE_EXS:{type:"number",const:4,title:"SVG_LENGTHTYPE_EXS"},SVG_LENGTHTYPE_PX:{type:"number",const:5,title:"SVG_LENGTHTYPE_PX"},SVG_LENGTHTYPE_CM:{type:"number",const:6,title:"SVG_LENGTHTYPE_CM"},SVG_LENGTHTYPE_MM:{type:"number",const:7,title:"SVG_LENGTHTYPE_MM"},SVG_LENGTHTYPE_IN:{type:"number",const:8,title:"SVG_LENGTHTYPE_IN"},SVG_LENGTHTYPE_PT:{type:"number",const:9,title:"SVG_LENGTHTYPE_PT"},SVG_LENGTHTYPE_PC:{type:"number",const:10,title:"SVG_LENGTHTYPE_PC"}},required:["SVG_LENGTHTYPE_CM","SVG_LENGTHTYPE_EMS","SVG_LENGTHTYPE_EXS","SVG_LENGTHTYPE_IN","SVG_LENGTHTYPE_MM","SVG_LENGTHTYPE_NUMBER","SVG_LENGTHTYPE_PC","SVG_LENGTHTYPE_PERCENTAGE","SVG_LENGTHTYPE_PT","SVG_LENGTHTYPE_PX","SVG_LENGTHTYPE_UNKNOWN","unitType","value","valueAsString","valueInSpecifiedUnits"]},SVGAnimatedTransformList:{title:"SVGAnimatedTransformList",type:"object",properties:{animVal:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/SVGTransform"}},properties:{length:{type:"number",title:"length"},numberOfItems:{type:"number",title:"numberOfItems"}},required:["length","numberOfItems"],title:"animVal"},baseVal:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/SVGTransform"}},properties:{length:{type:"number",title:"length"},numberOfItems:{type:"number",title:"numberOfItems"}},required:["length","numberOfItems"],title:"baseVal"}},required:["animVal","baseVal"]},SVGTransform:{title:"SVGTransform",type:"object",properties:{angle:{type:"number",title:"angle"},matrix:{$ref:"#/definitions/DOMMatrix",title:"matrix"},type:{type:"number",title:"type"},SVG_TRANSFORM_UNKNOWN:{type:"number",const:0,title:"SVG_TRANSFORM_UNKNOWN"},SVG_TRANSFORM_MATRIX:{type:"number",const:1,title:"SVG_TRANSFORM_MATRIX"},SVG_TRANSFORM_TRANSLATE:{type:"number",const:2,title:"SVG_TRANSFORM_TRANSLATE"},SVG_TRANSFORM_SCALE:{type:"number",const:3,title:"SVG_TRANSFORM_SCALE"},SVG_TRANSFORM_ROTATE:{type:"number",const:4,title:"SVG_TRANSFORM_ROTATE"},SVG_TRANSFORM_SKEWX:{type:"number",const:5,title:"SVG_TRANSFORM_SKEWX"},SVG_TRANSFORM_SKEWY:{type:"number",const:6,title:"SVG_TRANSFORM_SKEWY"}},required:["SVG_TRANSFORM_MATRIX","SVG_TRANSFORM_ROTATE","SVG_TRANSFORM_SCALE","SVG_TRANSFORM_SKEWX","SVG_TRANSFORM_SKEWY","SVG_TRANSFORM_TRANSLATE","SVG_TRANSFORM_UNKNOWN","angle","matrix","type"]},DOMMatrix:{title:"DOMMatrix",type:"object",properties:{a:{type:"number",title:"a"},b:{type:"number",title:"b"},c:{type:"number",title:"c"},d:{type:"number",title:"d"},e:{type:"number",title:"e"},f:{type:"number",title:"f"},m11:{type:"number",title:"m11"},m12:{type:"number",title:"m12"},m13:{type:"number",title:"m13"},m14:{type:"number",title:"m14"},m21:{type:"number",title:"m21"},m22:{type:"number",title:"m22"},m23:{type:"number",title:"m23"},m24:{type:"number",title:"m24"},m31:{type:"number",title:"m31"},m32:{type:"number",title:"m32"},m33:{type:"number",title:"m33"},m34:{type:"number",title:"m34"},m41:{type:"number",title:"m41"},m42:{type:"number",title:"m42"},m43:{type:"number",title:"m43"},m44:{type:"number",title:"m44"},is2D:{type:"boolean",title:"is2D"},isIdentity:{type:"boolean",title:"isIdentity"}},required:["a","b","c","d","e","f","is2D","isIdentity","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44"]},SVGElement:{title:"SVGElement",type:"object",properties:{className:{title:"className"},ownerSVGElement:{anyOf:[{$ref:"#/definitions/SVGSVGElement"},{type:"null"}],title:"ownerSVGElement"},viewportElement:{anyOf:[{$ref:"#/definitions/SVGElement"},{type:"null"}],title:"viewportElement"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","dataset","firstChild","firstElementChild","id","innerHTML","isConnected","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","ownerDocument","ownerSVGElement","parentElement","parentNode","part","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","style","tabIndex","tagName","textContent","viewportElement"]},SVGAnimatedPreserveAspectRatio:{title:"SVGAnimatedPreserveAspectRatio",type:"object",properties:{animVal:{$ref:"#/definitions/SVGPreserveAspectRatio",title:"animVal"},baseVal:{$ref:"#/definitions/SVGPreserveAspectRatio",title:"baseVal"}},required:["animVal","baseVal"]},SVGPreserveAspectRatio:{title:"SVGPreserveAspectRatio",type:"object",properties:{align:{type:"number",title:"align"},meetOrSlice:{type:"number",title:"meetOrSlice"},SVG_PRESERVEASPECTRATIO_UNKNOWN:{type:"number",const:0,title:"SVG_PRESERVEASPECTRATIO_UNKNOWN"},SVG_PRESERVEASPECTRATIO_NONE:{type:"number",const:1,title:"SVG_PRESERVEASPECTRATIO_NONE"},SVG_PRESERVEASPECTRATIO_XMINYMIN:{type:"number",const:2,title:"SVG_PRESERVEASPECTRATIO_XMINYMIN"},SVG_PRESERVEASPECTRATIO_XMIDYMIN:{type:"number",const:3,title:"SVG_PRESERVEASPECTRATIO_XMIDYMIN"},SVG_PRESERVEASPECTRATIO_XMAXYMIN:{type:"number",const:4,title:"SVG_PRESERVEASPECTRATIO_XMAXYMIN"},SVG_PRESERVEASPECTRATIO_XMINYMID:{type:"number",const:5,title:"SVG_PRESERVEASPECTRATIO_XMINYMID"},SVG_PRESERVEASPECTRATIO_XMIDYMID:{type:"number",const:6,title:"SVG_PRESERVEASPECTRATIO_XMIDYMID"},SVG_PRESERVEASPECTRATIO_XMAXYMID:{type:"number",const:7,title:"SVG_PRESERVEASPECTRATIO_XMAXYMID"},SVG_PRESERVEASPECTRATIO_XMINYMAX:{type:"number",const:8,title:"SVG_PRESERVEASPECTRATIO_XMINYMAX"},SVG_PRESERVEASPECTRATIO_XMIDYMAX:{type:"number",const:9,title:"SVG_PRESERVEASPECTRATIO_XMIDYMAX"},SVG_PRESERVEASPECTRATIO_XMAXYMAX:{type:"number",const:10,title:"SVG_PRESERVEASPECTRATIO_XMAXYMAX"},SVG_MEETORSLICE_UNKNOWN:{type:"number",const:0,title:"SVG_MEETORSLICE_UNKNOWN"},SVG_MEETORSLICE_MEET:{type:"number",const:1,title:"SVG_MEETORSLICE_MEET"},SVG_MEETORSLICE_SLICE:{type:"number",const:2,title:"SVG_MEETORSLICE_SLICE"}},required:["SVG_MEETORSLICE_MEET","SVG_MEETORSLICE_SLICE","SVG_MEETORSLICE_UNKNOWN","SVG_PRESERVEASPECTRATIO_NONE","SVG_PRESERVEASPECTRATIO_UNKNOWN","SVG_PRESERVEASPECTRATIO_XMAXYMAX","SVG_PRESERVEASPECTRATIO_XMAXYMID","SVG_PRESERVEASPECTRATIO_XMAXYMIN","SVG_PRESERVEASPECTRATIO_XMIDYMAX","SVG_PRESERVEASPECTRATIO_XMIDYMID","SVG_PRESERVEASPECTRATIO_XMIDYMIN","SVG_PRESERVEASPECTRATIO_XMINYMAX","SVG_PRESERVEASPECTRATIO_XMINYMID","SVG_PRESERVEASPECTRATIO_XMINYMIN","align","meetOrSlice"]},SVGAnimatedRect:{title:"SVGAnimatedRect",type:"object",properties:{animVal:{$ref:"#/definitions/DOMRectReadOnly",title:"animVal"},baseVal:{$ref:"#/definitions/DOMRect",title:"baseVal"}},required:["animVal","baseVal"]},DOMRectReadOnly:{title:"DOMRectReadOnly",type:"object",properties:{bottom:{type:"number",title:"bottom"},height:{type:"number",title:"height"},left:{type:"number",title:"left"},right:{type:"number",title:"right"},top:{type:"number",title:"top"},width:{type:"number",title:"width"},x:{type:"number",title:"x"},y:{type:"number",title:"y"}},required:["bottom","height","left","right","top","width","x","y"]},DOMRect:{title:"DOMRect",type:"object",properties:{height:{type:"number",title:"height"},width:{type:"number",title:"width"},x:{type:"number",title:"x"},y:{type:"number",title:"y"},bottom:{type:"number",title:"bottom"},left:{type:"number",title:"left"},right:{type:"number",title:"right"},top:{type:"number",title:"top"}},required:["bottom","height","left","right","top","width","x","y"]},SVGAnimatedString:{title:"SVGAnimatedString",type:"object",properties:{animVal:{type:"string",title:"animVal"},baseVal:{type:"string",title:"baseVal"}},required:["animVal","baseVal"]},Window:{title:"Window",type:"object",additionalProperties:{$ref:"#/definitions/Window"},properties:{clientInformation:{$ref:"#/definitions/Navigator",title:"clientInformation"},closed:{type:"boolean",title:"closed"},customElements:{$ref:"#/definitions/CustomElementRegistry",title:"customElements"},devicePixelRatio:{type:"number",title:"devicePixelRatio"},document:{$ref:"#/definitions/Document",title:"document"},event:{$ref:"#/definitions/Event",title:"event"},external:{$ref:"#/definitions/External",title:"external"},frameElement:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"frameElement"},frames:{$ref:"#/definitions/Window",title:"frames"},history:{$ref:"#/definitions/History",title:"history"},innerHeight:{type:"number",title:"innerHeight"},innerWidth:{type:"number",title:"innerWidth"},length:{type:"number",title:"length"},location:{$ref:"#/definitions/Location",title:"location"},locationbar:{$ref:"#/definitions/BarProp",title:"locationbar"},menubar:{$ref:"#/definitions/BarProp",title:"menubar"},name:{type:"string",title:"name"},navigator:{$ref:"#/definitions/Navigator",title:"navigator"},ondevicemotion:{type:["null","object"],title:"ondevicemotion"},ondeviceorientation:{type:["null","object"],title:"ondeviceorientation"},ondeviceorientationabsolute:{type:["null","object"],title:"ondeviceorientationabsolute"},onorientationchange:{type:["null","object"],title:"onorientationchange"},opener:{title:"opener"},orientation:{type:"number",title:"orientation"},outerHeight:{type:"number",title:"outerHeight"},outerWidth:{type:"number",title:"outerWidth"},pageXOffset:{type:"number",title:"pageXOffset"},pageYOffset:{type:"number",title:"pageYOffset"},parent:{$ref:"#/definitions/Window",title:"parent"},personalbar:{$ref:"#/definitions/BarProp",title:"personalbar"},screen:{$ref:"#/definitions/Screen",title:"screen"},screenLeft:{type:"number",title:"screenLeft"},screenTop:{type:"number",title:"screenTop"},screenX:{type:"number",title:"screenX"},screenY:{type:"number",title:"screenY"},scrollX:{type:"number",title:"scrollX"},scrollY:{type:"number",title:"scrollY"},scrollbars:{$ref:"#/definitions/BarProp",title:"scrollbars"},self:{allOf:[{$ref:"#/definitions/Window"},{type:"object"}],title:"self"},speechSynthesis:{$ref:"#/definitions/SpeechSynthesis",title:"speechSynthesis"},status:{type:"string",title:"status"},statusbar:{$ref:"#/definitions/BarProp",title:"statusbar"},toolbar:{$ref:"#/definitions/BarProp",title:"toolbar"},top:{anyOf:[{$ref:"#/definitions/Window"},{type:"null"}],title:"top"},visualViewport:{anyOf:[{$ref:"#/definitions/VisualViewport"},{type:"null"}],title:"visualViewport"},window:{allOf:[{$ref:"#/definitions/Window"},{type:"object"}],title:"window"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},onafterprint:{type:["null","object"],title:"onafterprint"},onbeforeprint:{type:["null","object"],title:"onbeforeprint"},onbeforeunload:{type:["null","object"],title:"onbeforeunload"},ongamepadconnected:{type:["null","object"],title:"ongamepadconnected"},ongamepaddisconnected:{type:["null","object"],title:"ongamepaddisconnected"},onhashchange:{type:["null","object"],title:"onhashchange"},onlanguagechange:{type:["null","object"],title:"onlanguagechange"},onmessage:{type:["null","object"],title:"onmessage"},onmessageerror:{type:["null","object"],title:"onmessageerror"},onoffline:{type:["null","object"],title:"onoffline"},ononline:{type:["null","object"],title:"ononline"},onpagehide:{type:["null","object"],title:"onpagehide"},onpageshow:{type:["null","object"],title:"onpageshow"},onpopstate:{type:["null","object"],title:"onpopstate"},onrejectionhandled:{type:["null","object"],title:"onrejectionhandled"},onstorage:{type:["null","object"],title:"onstorage"},onunhandledrejection:{type:["null","object"],title:"onunhandledrejection"},onunload:{type:["null","object"],title:"onunload"},localStorage:{$ref:"#/definitions/Storage",title:"localStorage"},caches:{$ref:"#/definitions/CacheStorage",title:"caches"},crossOriginIsolated:{type:"boolean",title:"crossOriginIsolated"},crypto:{$ref:"#/definitions/Crypto",title:"crypto"},indexedDB:{$ref:"#/definitions/IDBFactory",title:"indexedDB"},isSecureContext:{type:"boolean",title:"isSecureContext"},origin:{type:"string",title:"origin"},performance:{$ref:"#/definitions/Performance",title:"performance"},sessionStorage:{$ref:"#/definitions/Storage",title:"sessionStorage"},trustedTypes:{$ref:"#/definitions/TrustedTypePolicyFactory",title:"trustedTypes"},TrustedHTML:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedHTML",title:"prototype"}},required:["prototype"],title:"TrustedHTML"},TrustedScript:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedScript",title:"prototype"}},required:["prototype"],title:"TrustedScript"},TrustedScriptURL:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedScriptURL",title:"prototype"}},required:["prototype"],title:"TrustedScriptURL"},TrustedTypePolicyFactory:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedTypePolicyFactory",title:"prototype"}},required:["prototype"],title:"TrustedTypePolicyFactory"},TrustedTypePolicy:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedTypePolicy<any>",title:"prototype"}},required:["prototype"],title:"TrustedTypePolicy"}},required:["TrustedHTML","TrustedScript","TrustedScriptURL","TrustedTypePolicy","TrustedTypePolicyFactory","caches","clientInformation","closed","crossOriginIsolated","crypto","customElements","devicePixelRatio","document","external","frameElement","frames","history","indexedDB","innerHeight","innerWidth","isSecureContext","length","localStorage","location","locationbar","menubar","name","navigator","onabort","onafterprint","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforeprint","onbeforetoggle","onbeforeunload","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondevicemotion","ondeviceorientation","ondeviceorientationabsolute","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","ongamepadconnected","ongamepaddisconnected","ongotpointercapture","onhashchange","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onlanguagechange","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmessage","onmessageerror","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onoffline","ononline","onorientationchange","onpagehide","onpageshow","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onpopstate","onprogress","onratechange","onrejectionhandled","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onstorage","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onunhandledrejection","onunload","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","opener","orientation","origin","outerHeight","outerWidth","pageXOffset","pageYOffset","parent","performance","personalbar","screen","screenLeft","screenTop","screenX","screenY","scrollX","scrollY","scrollbars","self","sessionStorage","speechSynthesis","status","statusbar","toolbar","top","visualViewport","window"]},Navigator:{title:"Navigator",type:"object",properties:{clipboard:{$ref:"#/definitions/Clipboard",title:"clipboard"},credentials:{$ref:"#/definitions/CredentialsContainer",title:"credentials"},doNotTrack:{type:["null","string"],title:"doNotTrack"},geolocation:{$ref:"#/definitions/Geolocation",title:"geolocation"},maxTouchPoints:{type:"number",title:"maxTouchPoints"},mediaCapabilities:{$ref:"#/definitions/MediaCapabilities",title:"mediaCapabilities"},mediaDevices:{$ref:"#/definitions/MediaDevices",title:"mediaDevices"},mediaSession:{$ref:"#/definitions/MediaSession",title:"mediaSession"},permissions:{$ref:"#/definitions/Permissions",title:"permissions"},serviceWorker:{$ref:"#/definitions/ServiceWorkerContainer",title:"serviceWorker"},userActivation:{$ref:"#/definitions/UserActivation",title:"userActivation"},wakeLock:{$ref:"#/definitions/WakeLock",title:"wakeLock"},bluetooth:{$ref:"#/definitions/Bluetooth",title:"bluetooth"},webdriver:{type:"boolean",title:"webdriver"},hardwareConcurrency:{type:"number",title:"hardwareConcurrency"},cookieEnabled:{type:"boolean",title:"cookieEnabled"},appCodeName:{type:"string",title:"appCodeName"},appName:{type:"string",title:"appName"},appVersion:{type:"string",title:"appVersion"},platform:{type:"string",title:"platform"},product:{type:"string",title:"product"},productSub:{type:"string",title:"productSub"},userAgent:{type:"string",title:"userAgent"},vendor:{type:"string",title:"vendor"},vendorSub:{type:"string",title:"vendorSub"},language:{type:"string",title:"language"},languages:{type:"array",items:{type:"string"},title:"languages"},locks:{$ref:"#/definitions/LockManager",title:"locks"},onLine:{type:"boolean",title:"onLine"},mimeTypes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/MimeType"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"mimeTypes"},pdfViewerEnabled:{type:"boolean",title:"pdfViewerEnabled"},plugins:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/MimeType"}},properties:{description:{type:"string",title:"description"},filename:{type:"string",title:"filename"},length:{type:"number",title:"length"},name:{type:"string",title:"name"}},required:["description","filename","length","name"]}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"plugins"},storage:{$ref:"#/definitions/StorageManager",title:"storage"}},required:["appCodeName","appName","appVersion","bluetooth","clipboard","cookieEnabled","credentials","doNotTrack","geolocation","hardwareConcurrency","language","languages","locks","maxTouchPoints","mediaCapabilities","mediaDevices","mediaSession","mimeTypes","onLine","pdfViewerEnabled","permissions","platform","plugins","product","productSub","serviceWorker","storage","userActivation","userAgent","vendor","vendorSub","wakeLock","webdriver"]},Clipboard:{title:"Clipboard",type:"object"},CredentialsContainer:{title:"CredentialsContainer",type:"object"},Geolocation:{title:"Geolocation",type:"object"},MediaCapabilities:{title:"MediaCapabilities",type:"object"},MediaDevices:{title:"MediaDevices",type:"object",properties:{ondevicechange:{type:["null","object"],title:"ondevicechange"}},required:["ondevicechange"]},MediaSession:{title:"MediaSession",type:"object",properties:{metadata:{anyOf:[{$ref:"#/definitions/MediaMetadata"},{type:"null"}],title:"metadata"},playbackState:{$ref:"#/definitions/MediaSessionPlaybackState",title:"playbackState"}},required:["metadata","playbackState"]},MediaMetadata:{title:"MediaMetadata",type:"object",properties:{album:{type:"string",title:"album"},artist:{type:"string",title:"artist"},artwork:{type:"array",items:{$ref:"#/definitions/MediaImage"},title:"artwork"},title:{type:"string",title:"title"}},required:["album","artist","artwork","title"]},MediaImage:{title:"MediaImage",type:"object",properties:{sizes:{type:"string",title:"sizes"},src:{type:"string",title:"src"},type:{type:"string",title:"type"}},required:["src"]},MediaSessionPlaybackState:{title:"MediaSessionPlaybackState",enum:["none","paused","playing"],type:"string"},Permissions:{title:"Permissions",type:"object"},ServiceWorkerContainer:{title:"ServiceWorkerContainer",type:"object",properties:{controller:{anyOf:[{$ref:"#/definitions/ServiceWorker"},{type:"null"}],title:"controller"},oncontrollerchange:{type:["null","object"],title:"oncontrollerchange"},onmessage:{type:["null","object"],title:"onmessage"},onmessageerror:{type:["null","object"],title:"onmessageerror"},ready:{$ref:"#/definitions/Promise<ServiceWorkerRegistration>",title:"ready"}},required:["controller","oncontrollerchange","onmessage","onmessageerror","ready"]},ServiceWorker:{title:"ServiceWorker",type:"object",properties:{onstatechange:{type:["null","object"],title:"onstatechange"},scriptURL:{type:"string",title:"scriptURL"},state:{$ref:"#/definitions/ServiceWorkerState",title:"state"},onerror:{type:["null","object"],title:"onerror"}},required:["onerror","onstatechange","scriptURL","state"]},ServiceWorkerState:{title:"ServiceWorkerState",enum:["activated","activating","installed","installing","parsed","redundant"],type:"string"},"Promise<ServiceWorkerRegistration>":{title:"Promise<ServiceWorkerRegistration>",type:"object",properties:{"__@toStringTag@16125":{type:"string",title:"__@toStringTag@16125"}},required:["__@toStringTag@16125"]},UserActivation:{title:"UserActivation",type:"object",properties:{hasBeenActive:{type:"boolean",title:"hasBeenActive"},isActive:{type:"boolean",title:"isActive"}},required:["hasBeenActive","isActive"]},WakeLock:{title:"WakeLock",type:"object"},Bluetooth:{title:"Bluetooth",type:"object",properties:{onavailabilitychanged:{type:"object",title:"onavailabilitychanged"},referringDevice:{$ref:"#/definitions/BluetoothDevice",title:"referringDevice"},onadvertisementreceived:{type:"object",title:"onadvertisementreceived"},ongattserverdisconnected:{type:"object",title:"ongattserverdisconnected"},oncharacteristicvaluechanged:{type:"object",title:"oncharacteristicvaluechanged"},onserviceadded:{type:"object",title:"onserviceadded"},onservicechanged:{type:"object",title:"onservicechanged"},onserviceremoved:{type:"object",title:"onserviceremoved"}},required:["onadvertisementreceived","onavailabilitychanged","oncharacteristicvaluechanged","ongattserverdisconnected","onserviceadded","onservicechanged","onserviceremoved"]},BluetoothDevice:{title:"BluetoothDevice",type:"object",properties:{id:{type:"string",title:"id"},name:{type:"string",title:"name"},gatt:{$ref:"#/definitions/BluetoothRemoteGATTServer",title:"gatt"},watchingAdvertisements:{type:"boolean",title:"watchingAdvertisements"},onadvertisementreceived:{type:"object",title:"onadvertisementreceived"},ongattserverdisconnected:{type:"object",title:"ongattserverdisconnected"},oncharacteristicvaluechanged:{type:"object",title:"oncharacteristicvaluechanged"},onserviceadded:{type:"object",title:"onserviceadded"},onservicechanged:{type:"object",title:"onservicechanged"},onserviceremoved:{type:"object",title:"onserviceremoved"}},required:["id","onadvertisementreceived","oncharacteristicvaluechanged","ongattserverdisconnected","onserviceadded","onservicechanged","onserviceremoved","watchingAdvertisements"]},BluetoothRemoteGATTServer:{title:"BluetoothRemoteGATTServer",type:"object",properties:{device:{$ref:"#/definitions/BluetoothDevice",title:"device"},connected:{type:"boolean",title:"connected"}},required:["connected","device"]},LockManager:{title:"LockManager",type:"object"},MimeType:{title:"MimeType",type:"object",properties:{description:{type:"string",title:"description"},enabledPlugin:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/MimeType"}},properties:{description:{type:"string",title:"description"},filename:{type:"string",title:"filename"},length:{type:"number",title:"length"},name:{type:"string",title:"name"}},required:["description","filename","length","name"],title:"enabledPlugin"},suffixes:{type:"string",title:"suffixes"},type:{type:"string",title:"type"}},required:["description","enabledPlugin","suffixes","type"]},StorageManager:{title:"StorageManager",type:"object"},CustomElementRegistry:{title:"CustomElementRegistry",type:"object"},Event:{title:"Event",type:"object",properties:{bubbles:{type:"boolean",title:"bubbles"},cancelBubble:{type:"boolean",title:"cancelBubble"},cancelable:{type:"boolean",title:"cancelable"},composed:{type:"boolean",title:"composed"},currentTarget:{anyOf:[{$ref:"#/definitions/EventTarget"},{type:"null"}],title:"currentTarget"},defaultPrevented:{type:"boolean",title:"defaultPrevented"},eventPhase:{type:"number",title:"eventPhase"},isTrusted:{type:"boolean",title:"isTrusted"},returnValue:{type:"boolean",title:"returnValue"},srcElement:{anyOf:[{$ref:"#/definitions/EventTarget"},{type:"null"}],title:"srcElement"},target:{anyOf:[{$ref:"#/definitions/EventTarget"},{type:"null"}],title:"target"},timeStamp:{type:"number",title:"timeStamp"},type:{type:"string",title:"type"},NONE:{type:"number",const:0,title:"NONE"},CAPTURING_PHASE:{type:"number",const:1,title:"CAPTURING_PHASE"},AT_TARGET:{type:"number",const:2,title:"AT_TARGET"},BUBBLING_PHASE:{type:"number",const:3,title:"BUBBLING_PHASE"}},required:["AT_TARGET","BUBBLING_PHASE","CAPTURING_PHASE","NONE","bubbles","cancelBubble","cancelable","composed","currentTarget","defaultPrevented","eventPhase","isTrusted","returnValue","srcElement","target","timeStamp","type"]},EventTarget:{title:"EventTarget",type:"object"},External:{title:"External",type:"object"},History:{title:"History",type:"object",properties:{length:{type:"number",title:"length"},scrollRestoration:{$ref:"#/definitions/ScrollRestoration",title:"scrollRestoration"},state:{title:"state"}},required:["length","scrollRestoration","state"]},ScrollRestoration:{title:"ScrollRestoration",enum:["auto","manual"],type:"string"},Location:{title:"Location",type:"object",properties:{ancestorOrigins:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"ancestorOrigins"},hash:{type:"string",title:"hash"},host:{type:"string",title:"host"},hostname:{type:"string",title:"hostname"},href:{type:"string",title:"href"},origin:{type:"string",title:"origin"},pathname:{type:"string",title:"pathname"},port:{type:"string",title:"port"},protocol:{type:"string",title:"protocol"},search:{type:"string",title:"search"}},required:["ancestorOrigins","hash","host","hostname","href","origin","pathname","port","protocol","search"]},BarProp:{title:"BarProp",type:"object",properties:{visible:{type:"boolean",title:"visible"}},required:["visible"]},Screen:{title:"Screen",type:"object",properties:{availHeight:{type:"number",title:"availHeight"},availWidth:{type:"number",title:"availWidth"},colorDepth:{type:"number",title:"colorDepth"},height:{type:"number",title:"height"},orientation:{$ref:"#/definitions/ScreenOrientation",title:"orientation"},pixelDepth:{type:"number",title:"pixelDepth"},width:{type:"number",title:"width"}},required:["availHeight","availWidth","colorDepth","height","orientation","pixelDepth","width"]},ScreenOrientation:{title:"ScreenOrientation",type:"object",properties:{angle:{type:"number",title:"angle"},onchange:{type:["null","object"],title:"onchange"},type:{$ref:"#/definitions/OrientationType",title:"type"}},required:["angle","onchange","type"]},OrientationType:{title:"OrientationType",enum:["landscape-primary","landscape-secondary","portrait-primary","portrait-secondary"],type:"string"},SpeechSynthesis:{title:"SpeechSynthesis",type:"object",properties:{onvoiceschanged:{type:["null","object"],title:"onvoiceschanged"},paused:{type:"boolean",title:"paused"},pending:{type:"boolean",title:"pending"},speaking:{type:"boolean",title:"speaking"}},required:["onvoiceschanged","paused","pending","speaking"]},VisualViewport:{title:"VisualViewport",type:"object",properties:{height:{type:"number",title:"height"},offsetLeft:{type:"number",title:"offsetLeft"},offsetTop:{type:"number",title:"offsetTop"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},pageLeft:{type:"number",title:"pageLeft"},pageTop:{type:"number",title:"pageTop"},scale:{type:"number",title:"scale"},width:{type:"number",title:"width"}},required:["height","offsetLeft","offsetTop","onresize","onscroll","pageLeft","pageTop","scale","width"]},Storage:{title:"Storage",type:"object",additionalProperties:{},properties:{length:{type:"number",title:"length"}},required:["length"]},CacheStorage:{title:"CacheStorage",type:"object"},Crypto:{title:"Crypto",type:"object",properties:{subtle:{$ref:"#/definitions/SubtleCrypto",title:"subtle"}},required:["subtle"]},SubtleCrypto:{title:"SubtleCrypto",type:"object"},IDBFactory:{title:"IDBFactory",type:"object"},Performance:{title:"Performance",type:"object",properties:{eventCounts:{$ref:"#/definitions/EventCounts",title:"eventCounts"},navigation:{$ref:"#/definitions/PerformanceNavigation",title:"navigation"},onresourcetimingbufferfull:{type:["null","object"],title:"onresourcetimingbufferfull"},timeOrigin:{type:"number",title:"timeOrigin"},timing:{$ref:"#/definitions/PerformanceTiming",title:"timing"}},required:["eventCounts","navigation","onresourcetimingbufferfull","timeOrigin","timing"]},EventCounts:{title:"EventCounts",type:"object",properties:{size:{type:"number",title:"size"}},required:["size"]},PerformanceNavigation:{title:"PerformanceNavigation",type:"object",properties:{redirectCount:{type:"number",title:"redirectCount"},type:{type:"number",title:"type"},TYPE_NAVIGATE:{type:"number",const:0,title:"TYPE_NAVIGATE"},TYPE_RELOAD:{type:"number",const:1,title:"TYPE_RELOAD"},TYPE_BACK_FORWARD:{type:"number",const:2,title:"TYPE_BACK_FORWARD"},TYPE_RESERVED:{type:"number",const:255,title:"TYPE_RESERVED"}},required:["TYPE_BACK_FORWARD","TYPE_NAVIGATE","TYPE_RELOAD","TYPE_RESERVED","redirectCount","type"]},PerformanceTiming:{title:"PerformanceTiming",type:"object",properties:{connectEnd:{type:"number",title:"connectEnd"},connectStart:{type:"number",title:"connectStart"},domComplete:{type:"number",title:"domComplete"},domContentLoadedEventEnd:{type:"number",title:"domContentLoadedEventEnd"},domContentLoadedEventStart:{type:"number",title:"domContentLoadedEventStart"},domInteractive:{type:"number",title:"domInteractive"},domLoading:{type:"number",title:"domLoading"},domainLookupEnd:{type:"number",title:"domainLookupEnd"},domainLookupStart:{type:"number",title:"domainLookupStart"},fetchStart:{type:"number",title:"fetchStart"},loadEventEnd:{type:"number",title:"loadEventEnd"},loadEventStart:{type:"number",title:"loadEventStart"},navigationStart:{type:"number",title:"navigationStart"},redirectEnd:{type:"number",title:"redirectEnd"},redirectStart:{type:"number",title:"redirectStart"},requestStart:{type:"number",title:"requestStart"},responseEnd:{type:"number",title:"responseEnd"},responseStart:{type:"number",title:"responseStart"},secureConnectionStart:{type:"number",title:"secureConnectionStart"},unloadEventEnd:{type:"number",title:"unloadEventEnd"},unloadEventStart:{type:"number",title:"unloadEventStart"}},required:["connectEnd","connectStart","domComplete","domContentLoadedEventEnd","domContentLoadedEventStart","domInteractive","domLoading","domainLookupEnd","domainLookupStart","fetchStart","loadEventEnd","loadEventStart","navigationStart","redirectEnd","redirectStart","requestStart","responseEnd","responseStart","secureConnectionStart","unloadEventEnd","unloadEventStart"]},TrustedTypePolicyFactory:{title:"TrustedTypePolicyFactory",oneOf:[{$ref:"#/definitions/TrustedTypePolicyFactory_1"},{$ref:"#/definitions/InternalTrustedTypePolicyFactory"}]},TrustedTypePolicyFactory_1:{title:"TrustedTypePolicyFactory_1",type:"object",properties:{emptyHTML:{$ref:"#/definitions/TrustedHTML",title:"emptyHTML"},emptyScript:{$ref:"#/definitions/TrustedScript",title:"emptyScript"},defaultPolicy:{anyOf:[{$ref:"#/definitions/TrustedTypePolicy<TrustedTypePolicyOptions>"},{type:"null"}],title:"defaultPolicy"}},required:["defaultPolicy","emptyHTML","emptyScript"]},TrustedHTML:{title:"TrustedHTML",type:"object",properties:{brand:{type:"boolean",const:!0,title:"brand"}},required:["brand"]},TrustedScript:{title:"TrustedScript",type:"object",properties:{brand:{type:"boolean",const:!0,title:"brand"}},required:["brand"]},"TrustedTypePolicy<TrustedTypePolicyOptions>":{title:"TrustedTypePolicy<TrustedTypePolicyOptions>",oneOf:[{$ref:"#/definitions/TrustedTypePolicy"}]},TrustedTypePolicy:{title:"TrustedTypePolicy",type:"object",properties:{name:{type:"string",title:"name"}},required:["name"]},InternalTrustedTypePolicyFactory:{title:"InternalTrustedTypePolicyFactory",type:"object",properties:{TrustedHTML:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedHTML",title:"prototype"}},required:["prototype"],title:"TrustedHTML"},TrustedScript:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedScript",title:"prototype"}},required:["prototype"],title:"TrustedScript"},TrustedScriptURL:{type:"object",properties:{prototype:{$ref:"#/definitions/TrustedScriptURL",title:"prototype"}},required:["prototype"],title:"TrustedScriptURL"},emptyHTML:{$ref:"#/definitions/TrustedHTML",title:"emptyHTML"},emptyScript:{$ref:"#/definitions/TrustedScript",title:"emptyScript"},defaultPolicy:{anyOf:[{$ref:"#/definitions/TrustedTypePolicy<TrustedTypePolicyOptions>"},{type:"null"}],title:"defaultPolicy"}},required:["TrustedHTML","TrustedScript","TrustedScriptURL","defaultPolicy","emptyHTML","emptyScript"]},TrustedScriptURL:{title:"TrustedScriptURL",type:"object",properties:{brand:{type:"boolean",const:!0,title:"brand"}},required:["brand"]},"TrustedTypePolicy<any>":{title:"TrustedTypePolicy<any>",type:"object",properties:{name:{type:"string",title:"name"}},required:["name"]},DocumentType:{title:"DocumentType",type:"object",properties:{name:{type:"string",title:"name"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},publicId:{type:"string",title:"publicId"},systemId:{type:"string",title:"systemId"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","baseURI","childNodes","firstChild","isConnected","lastChild","name","nextSibling","nodeName","nodeType","nodeValue","ownerDocument","parentElement","parentNode","previousSibling","publicId","systemId","textContent"]},HTMLEmbedElement:{title:"HTMLEmbedElement",type:"object",properties:{align:{type:"string",title:"align"},height:{type:"string",title:"height"},name:{type:"string",title:"name"},src:{type:"string",title:"src"},type:{type:"string",title:"type"},width:{type:"string",title:"width"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","align","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","enterKeyHint","firstChild","firstElementChild","height","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","name","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","src","style","tabIndex","tagName","textContent","title","translate","type","width"]},AutoFillBase:{title:"AutoFillBase",enum:["","off","on"],type:"string"},HTMLHeadElement:{title:"HTMLHeadElement",type:"object",properties:{accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","dataset","dir","draggable","enterKeyHint","firstChild","firstElementChild","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","slot","spellcheck","style","tabIndex","tagName","textContent","title","translate"]},HTMLImageElement:{title:"HTMLImageElement",type:"object",properties:{align:{type:"string",title:"align"},alt:{type:"string",title:"alt"},border:{type:"string",title:"border"},complete:{type:"boolean",title:"complete"},crossOrigin:{type:["null","string"],title:"crossOrigin"},currentSrc:{type:"string",title:"currentSrc"},decoding:{enum:["async","auto","sync"],type:"string",title:"decoding"},fetchPriority:{type:"string",title:"fetchPriority"},height:{type:"number",title:"height"},hspace:{type:"number",title:"hspace"},isMap:{type:"boolean",title:"isMap"},loading:{enum:["eager","lazy"],type:"string",title:"loading"},longDesc:{type:"string",title:"longDesc"},lowsrc:{type:"string",title:"lowsrc"},name:{type:"string",title:"name"},naturalHeight:{type:"number",title:"naturalHeight"},naturalWidth:{type:"number",title:"naturalWidth"},referrerPolicy:{type:"string",title:"referrerPolicy"},sizes:{type:"string",title:"sizes"},src:{type:"string",title:"src"},srcset:{type:"string",title:"srcset"},useMap:{type:"string",title:"useMap"},vspace:{type:"number",title:"vspace"},width:{type:"number",title:"width"},x:{type:"number",title:"x"},y:{type:"number",title:"y"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","align","alt","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","border","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","complete","contentEditable","crossOrigin","currentSrc","dataset","decoding","dir","draggable","enterKeyHint","fetchPriority","firstChild","firstElementChild","height","hidden","hspace","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","isMap","lang","lastChild","lastElementChild","loading","localName","longDesc","lowsrc","name","namespaceURI","naturalHeight","naturalWidth","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","popover","prefix","previousElementSibling","previousSibling","referrerPolicy","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","shadowRoot","sizes","slot","spellcheck","src","srcset","style","tabIndex","tagName","textContent","title","translate","useMap","vspace","width","x","y"]},DOMImplementation:{title:"DOMImplementation",type:"object"},HTMLAreaElement:{title:"HTMLAreaElement",type:"object",properties:{alt:{type:"string",title:"alt"},coords:{type:"string",title:"coords"},download:{type:"string",title:"download"},noHref:{type:"boolean",title:"noHref"},ping:{type:"string",title:"ping"},referrerPolicy:{type:"string",title:"referrerPolicy"},rel:{type:"string",title:"rel"},relList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"relList"},shape:{type:"string",title:"shape"},target:{type:"string",title:"target"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"},hash:{type:"string",title:"hash"},host:{type:"string",title:"host"},hostname:{type:"string",title:"hostname"},href:{type:"string",title:"href"},origin:{type:"string",title:"origin"},password:{type:"string",title:"password"},pathname:{type:"string",title:"pathname"},port:{type:"string",title:"port"},protocol:{type:"string",title:"protocol"},search:{type:"string",title:"search"},username:{type:"string",title:"username"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","alt","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","baseURI","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","coords","dataset","dir","download","draggable","enterKeyHint","firstChild","firstElementChild","hash","hidden","host","hostname","href","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","namespaceURI","nextElementSibling","nextSibling","noHref","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onended","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","origin","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","password","pathname","ping","popover","port","prefix","previousElementSibling","previousSibling","protocol","referrerPolicy","rel","relList","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","search","shadowRoot","shape","slot","spellcheck","style","tabIndex","tagName","target","textContent","title","translate","username"]},DocumentReadyState:{title:"DocumentReadyState",enum:["complete","interactive","loading"],type:"string"},DocumentTimeline:{title:"DocumentTimeline",type:"object",properties:{currentTime:{anyOf:[{$ref:"#/definitions/CSSNumericValue"},{type:["null","number"]}],title:"currentTime"}},required:["currentTime"]},CSSNumericValue:{title:"CSSNumericValue",type:"object"},DocumentVisibilityState:{title:"DocumentVisibilityState",enum:["hidden","visible"],type:"string"},FontFaceSet:{title:"FontFaceSet",type:"object",properties:{onloading:{type:["null","object"],title:"onloading"},onloadingdone:{type:["null","object"],title:"onloadingdone"},onloadingerror:{type:["null","object"],title:"onloadingerror"},ready:{$ref:"#/definitions/Promise<FontFaceSet>",title:"ready"},status:{$ref:"#/definitions/FontFaceSetLoadStatus",title:"status"},size:{type:"number",title:"size"},"__@toStringTag@16125":{type:"string",title:"__@toStringTag@16125"}},required:["__@toStringTag@16125","onloading","onloadingdone","onloadingerror","ready","size","status"]},"Promise<FontFaceSet>":{title:"Promise<FontFaceSet>",type:"object",properties:{"__@toStringTag@16125":{type:"string",title:"__@toStringTag@16125"}},required:["__@toStringTag@16125"]},FontFaceSetLoadStatus:{title:"FontFaceSetLoadStatus",enum:["loaded","loading"],type:"string"},HTMLVideoElement:{title:"HTMLVideoElement",type:"object",properties:{disablePictureInPicture:{type:"boolean",title:"disablePictureInPicture"},height:{type:"number",title:"height"},onenterpictureinpicture:{type:["null","object"],title:"onenterpictureinpicture"},onleavepictureinpicture:{type:["null","object"],title:"onleavepictureinpicture"},playsInline:{type:"boolean",title:"playsInline"},poster:{type:"string",title:"poster"},videoHeight:{type:"number",title:"videoHeight"},videoWidth:{type:"number",title:"videoWidth"},width:{type:"number",title:"width"},autoplay:{type:"boolean",title:"autoplay"},buffered:{$ref:"#/definitions/TimeRanges",title:"buffered"},controls:{type:"boolean",title:"controls"},crossOrigin:{type:["null","string"],title:"crossOrigin"},currentSrc:{type:"string",title:"currentSrc"},currentTime:{type:"number",title:"currentTime"},defaultMuted:{type:"boolean",title:"defaultMuted"},defaultPlaybackRate:{type:"number",title:"defaultPlaybackRate"},disableRemotePlayback:{type:"boolean",title:"disableRemotePlayback"},duration:{type:"number",title:"duration"},ended:{type:"boolean",title:"ended"},error:{anyOf:[{$ref:"#/definitions/MediaError"},{type:"null"}],title:"error"},loop:{type:"boolean",title:"loop"},mediaKeys:{anyOf:[{$ref:"#/definitions/MediaKeys"},{type:"null"}],title:"mediaKeys"},muted:{type:"boolean",title:"muted"},networkState:{type:"number",title:"networkState"},onencrypted:{type:["null","object"],title:"onencrypted"},onwaitingforkey:{type:["null","object"],title:"onwaitingforkey"},paused:{type:"boolean",title:"paused"},playbackRate:{type:"number",title:"playbackRate"},played:{$ref:"#/definitions/TimeRanges",title:"played"},preload:{enum:["","auto","metadata","none"],type:"string",title:"preload"},preservesPitch:{type:"boolean",title:"preservesPitch"},readyState:{type:"number",title:"readyState"},remote:{$ref:"#/definitions/RemotePlayback",title:"remote"},seekable:{$ref:"#/definitions/TimeRanges",title:"seekable"},seeking:{type:"boolean",title:"seeking"},sinkId:{type:"string",title:"sinkId"},src:{type:"string",title:"src"},srcObject:{anyOf:[{$ref:"#/definitions/Blob"},{$ref:"#/definitions/MediaSource"},{$ref:"#/definitions/MediaStream"},{type:"null"}],title:"srcObject"},textTracks:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/TextTrack"}},properties:{length:{type:"number",title:"length"},onaddtrack:{type:["null","object"],title:"onaddtrack"},onchange:{type:["null","object"],title:"onchange"},onremovetrack:{type:["null","object"],title:"onremovetrack"}},required:["length","onaddtrack","onchange","onremovetrack"],title:"textTracks"},volume:{type:"number",title:"volume"},NETWORK_EMPTY:{type:"number",const:0,title:"NETWORK_EMPTY"},NETWORK_IDLE:{type:"number",const:1,title:"NETWORK_IDLE"},NETWORK_LOADING:{type:"number",const:2,title:"NETWORK_LOADING"},NETWORK_NO_SOURCE:{type:"number",const:3,title:"NETWORK_NO_SOURCE"},HAVE_NOTHING:{type:"number",const:0,title:"HAVE_NOTHING"},HAVE_METADATA:{type:"number",const:1,title:"HAVE_METADATA"},HAVE_CURRENT_DATA:{type:"number",const:2,title:"HAVE_CURRENT_DATA"},HAVE_FUTURE_DATA:{type:"number",const:3,title:"HAVE_FUTURE_DATA"},HAVE_ENOUGH_DATA:{type:"number",const:4,title:"HAVE_ENOUGH_DATA"},accessKey:{type:"string",title:"accessKey"},accessKeyLabel:{type:"string",title:"accessKeyLabel"},autocapitalize:{type:"string",title:"autocapitalize"},dir:{type:"string",title:"dir"},draggable:{type:"boolean",title:"draggable"},hidden:{type:"boolean",title:"hidden"},inert:{type:"boolean",title:"inert"},innerText:{type:"string",title:"innerText"},lang:{type:"string",title:"lang"},offsetHeight:{type:"number",title:"offsetHeight"},offsetLeft:{type:"number",title:"offsetLeft"},offsetParent:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"offsetParent"},offsetTop:{type:"number",title:"offsetTop"},offsetWidth:{type:"number",title:"offsetWidth"},outerText:{type:"string",title:"outerText"},popover:{type:["null","string"],title:"popover"},spellcheck:{type:"boolean",title:"spellcheck"},title:{type:"string",title:"title"},translate:{type:"boolean",title:"translate"},attributes:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Attr"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"attributes"},classList:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"classList"},className:{type:"string",title:"className"},clientHeight:{type:"number",title:"clientHeight"},clientLeft:{type:"number",title:"clientLeft"},clientTop:{type:"number",title:"clientTop"},clientWidth:{type:"number",title:"clientWidth"},id:{type:"string",title:"id"},localName:{type:"string",title:"localName"},namespaceURI:{type:["null","string"],title:"namespaceURI"},onfullscreenchange:{type:["null","object"],title:"onfullscreenchange"},onfullscreenerror:{type:["null","object"],title:"onfullscreenerror"},outerHTML:{type:"string",title:"outerHTML"},ownerDocument:{$ref:"#/definitions/Document",title:"ownerDocument"},part:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{length:{type:"number",title:"length"},value:{type:"string",title:"value"}},required:["length","value"],title:"part"},prefix:{type:["null","string"],title:"prefix"},scrollHeight:{type:"number",title:"scrollHeight"},scrollLeft:{type:"number",title:"scrollLeft"},scrollTop:{type:"number",title:"scrollTop"},scrollWidth:{type:"number",title:"scrollWidth"},shadowRoot:{anyOf:[{$ref:"#/definitions/ShadowRoot"},{type:"null"}],title:"shadowRoot"},slot:{type:"string",title:"slot"},tagName:{type:"string",title:"tagName"},baseURI:{type:"string",title:"baseURI"},childNodes:{type:"array",items:{$ref:"#/definitions/ChildNode"},title:"childNodes"},firstChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"firstChild"},isConnected:{type:"boolean",title:"isConnected"},lastChild:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"lastChild"},nextSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"nextSibling"},nodeName:{type:"string",title:"nodeName"},nodeType:{type:"number",title:"nodeType"},nodeValue:{type:["null","string"],title:"nodeValue"},parentElement:{anyOf:[{$ref:"#/definitions/HTMLElement"},{type:"null"}],title:"parentElement"},parentNode:{anyOf:[{$ref:"#/definitions/ParentNode"},{type:"null"}],title:"parentNode"},previousSibling:{anyOf:[{$ref:"#/definitions/ChildNode"},{type:"null"}],title:"previousSibling"},textContent:{type:["null","string"],title:"textContent"},ELEMENT_NODE:{type:"number",const:1,title:"ELEMENT_NODE"},ATTRIBUTE_NODE:{type:"number",const:2,title:"ATTRIBUTE_NODE"},TEXT_NODE:{type:"number",const:3,title:"TEXT_NODE"},CDATA_SECTION_NODE:{type:"number",const:4,title:"CDATA_SECTION_NODE"},ENTITY_REFERENCE_NODE:{type:"number",const:5,title:"ENTITY_REFERENCE_NODE"},ENTITY_NODE:{type:"number",const:6,title:"ENTITY_NODE"},PROCESSING_INSTRUCTION_NODE:{type:"number",const:7,title:"PROCESSING_INSTRUCTION_NODE"},COMMENT_NODE:{type:"number",const:8,title:"COMMENT_NODE"},DOCUMENT_NODE:{type:"number",const:9,title:"DOCUMENT_NODE"},DOCUMENT_TYPE_NODE:{type:"number",const:10,title:"DOCUMENT_TYPE_NODE"},DOCUMENT_FRAGMENT_NODE:{type:"number",const:11,title:"DOCUMENT_FRAGMENT_NODE"},NOTATION_NODE:{type:"number",const:12,title:"NOTATION_NODE"},DOCUMENT_POSITION_DISCONNECTED:{type:"number",const:1,title:"DOCUMENT_POSITION_DISCONNECTED"},DOCUMENT_POSITION_PRECEDING:{type:"number",const:2,title:"DOCUMENT_POSITION_PRECEDING"},DOCUMENT_POSITION_FOLLOWING:{type:"number",const:4,title:"DOCUMENT_POSITION_FOLLOWING"},DOCUMENT_POSITION_CONTAINS:{type:"number",const:8,title:"DOCUMENT_POSITION_CONTAINS"},DOCUMENT_POSITION_CONTAINED_BY:{type:"number",const:16,title:"DOCUMENT_POSITION_CONTAINED_BY"},DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:{type:"number",const:32,title:"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"},ariaAtomic:{type:["null","string"],title:"ariaAtomic"},ariaAutoComplete:{type:["null","string"],title:"ariaAutoComplete"},ariaBrailleLabel:{type:["null","string"],title:"ariaBrailleLabel"},ariaBrailleRoleDescription:{type:["null","string"],title:"ariaBrailleRoleDescription"},ariaBusy:{type:["null","string"],title:"ariaBusy"},ariaChecked:{type:["null","string"],title:"ariaChecked"},ariaColCount:{type:["null","string"],title:"ariaColCount"},ariaColIndex:{type:["null","string"],title:"ariaColIndex"},ariaColSpan:{type:["null","string"],title:"ariaColSpan"},ariaCurrent:{type:["null","string"],title:"ariaCurrent"},ariaDescription:{type:["null","string"],title:"ariaDescription"},ariaDisabled:{type:["null","string"],title:"ariaDisabled"},ariaExpanded:{type:["null","string"],title:"ariaExpanded"},ariaHasPopup:{type:["null","string"],title:"ariaHasPopup"},ariaHidden:{type:["null","string"],title:"ariaHidden"},ariaInvalid:{type:["null","string"],title:"ariaInvalid"},ariaKeyShortcuts:{type:["null","string"],title:"ariaKeyShortcuts"},ariaLabel:{type:["null","string"],title:"ariaLabel"},ariaLevel:{type:["null","string"],title:"ariaLevel"},ariaLive:{type:["null","string"],title:"ariaLive"},ariaModal:{type:["null","string"],title:"ariaModal"},ariaMultiLine:{type:["null","string"],title:"ariaMultiLine"},ariaMultiSelectable:{type:["null","string"],title:"ariaMultiSelectable"},ariaOrientation:{type:["null","string"],title:"ariaOrientation"},ariaPlaceholder:{type:["null","string"],title:"ariaPlaceholder"},ariaPosInSet:{type:["null","string"],title:"ariaPosInSet"},ariaPressed:{type:["null","string"],title:"ariaPressed"},ariaReadOnly:{type:["null","string"],title:"ariaReadOnly"},ariaRequired:{type:["null","string"],title:"ariaRequired"},ariaRoleDescription:{type:["null","string"],title:"ariaRoleDescription"},ariaRowCount:{type:["null","string"],title:"ariaRowCount"},ariaRowIndex:{type:["null","string"],title:"ariaRowIndex"},ariaRowSpan:{type:["null","string"],title:"ariaRowSpan"},ariaSelected:{type:["null","string"],title:"ariaSelected"},ariaSetSize:{type:["null","string"],title:"ariaSetSize"},ariaSort:{type:["null","string"],title:"ariaSort"},ariaValueMax:{type:["null","string"],title:"ariaValueMax"},ariaValueMin:{type:["null","string"],title:"ariaValueMin"},ariaValueNow:{type:["null","string"],title:"ariaValueNow"},ariaValueText:{type:["null","string"],title:"ariaValueText"},role:{type:["null","string"],title:"role"},innerHTML:{type:"string",title:"innerHTML"},nextElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"nextElementSibling"},previousElementSibling:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"previousElementSibling"},childElementCount:{type:"number",title:"childElementCount"},children:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/Element"}},properties:{length:{type:"number",title:"length"}},required:["length"],title:"children"},firstElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"firstElementChild"},lastElementChild:{anyOf:[{$ref:"#/definitions/Element"},{type:"null"}],title:"lastElementChild"},assignedSlot:{anyOf:[{$ref:"#/definitions/HTMLSlotElement"},{type:"null"}],title:"assignedSlot"},attributeStyleMap:{$ref:"#/definitions/StylePropertyMap",title:"attributeStyleMap"},style:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"string"}},properties:{accentColor:{type:"string",title:"accentColor"},alignContent:{type:"string",title:"alignContent"},alignItems:{type:"string",title:"alignItems"},alignSelf:{type:"string",title:"alignSelf"},alignmentBaseline:{type:"string",title:"alignmentBaseline"},all:{type:"string",title:"all"},animation:{type:"string",title:"animation"},animationComposition:{type:"string",title:"animationComposition"},animationDelay:{type:"string",title:"animationDelay"},animationDirection:{type:"string",title:"animationDirection"},animationDuration:{type:"string",title:"animationDuration"},animationFillMode:{type:"string",title:"animationFillMode"},animationIterationCount:{type:"string",title:"animationIterationCount"},animationName:{type:"string",title:"animationName"},animationPlayState:{type:"string",title:"animationPlayState"},animationTimingFunction:{type:"string",title:"animationTimingFunction"},appearance:{type:"string",title:"appearance"},aspectRatio:{type:"string",title:"aspectRatio"},backdropFilter:{type:"string",title:"backdropFilter"},backfaceVisibility:{type:"string",title:"backfaceVisibility"},background:{type:"string",title:"background"},backgroundAttachment:{type:"string",title:"backgroundAttachment"},backgroundBlendMode:{type:"string",title:"backgroundBlendMode"},backgroundClip:{type:"string",title:"backgroundClip"},backgroundColor:{type:"string",title:"backgroundColor"},backgroundImage:{type:"string",title:"backgroundImage"},backgroundOrigin:{type:"string",title:"backgroundOrigin"},backgroundPosition:{type:"string",title:"backgroundPosition"},backgroundPositionX:{type:"string",title:"backgroundPositionX"},backgroundPositionY:{type:"string",title:"backgroundPositionY"},backgroundRepeat:{type:"string",title:"backgroundRepeat"},backgroundSize:{type:"string",title:"backgroundSize"},baselineShift:{type:"string",title:"baselineShift"},baselineSource:{type:"string",title:"baselineSource"},blockSize:{type:"string",title:"blockSize"},border:{type:"string",title:"border"},borderBlock:{type:"string",title:"borderBlock"},borderBlockColor:{type:"string",title:"borderBlockColor"},borderBlockEnd:{type:"string",title:"borderBlockEnd"},borderBlockEndColor:{type:"string",title:"borderBlockEndColor"},borderBlockEndStyle:{type:"string",title:"borderBlockEndStyle"},borderBlockEndWidth:{type:"string",title:"borderBlockEndWidth"},borderBlockStart:{type:"string",title:"borderBlockStart"},borderBlockStartColor:{type:"string",title:"borderBlockStartColor"},borderBlockStartStyle:{type:"string",title:"borderBlockStartStyle"},borderBlockStartWidth:{type:"string",title:"borderBlockStartWidth"},borderBlockStyle:{type:"string",title:"borderBlockStyle"},borderBlockWidth:{type:"string",title:"borderBlockWidth"},borderBottom:{type:"string",title:"borderBottom"},borderBottomColor:{type:"string",title:"borderBottomColor"},borderBottomLeftRadius:{type:"string",title:"borderBottomLeftRadius"},borderBottomRightRadius:{type:"string",title:"borderBottomRightRadius"},borderBottomStyle:{type:"string",title:"borderBottomStyle"},borderBottomWidth:{type:"string",title:"borderBottomWidth"},borderCollapse:{type:"string",title:"borderCollapse"},borderColor:{type:"string",title:"borderColor"},borderEndEndRadius:{type:"string",title:"borderEndEndRadius"},borderEndStartRadius:{type:"string",title:"borderEndStartRadius"},borderImage:{type:"string",title:"borderImage"},borderImageOutset:{type:"string",title:"borderImageOutset"},borderImageRepeat:{type:"string",title:"borderImageRepeat"},borderImageSlice:{type:"string",title:"borderImageSlice"},borderImageSource:{type:"string",title:"borderImageSource"},borderImageWidth:{type:"string",title:"borderImageWidth"},borderInline:{type:"string",title:"borderInline"},borderInlineColor:{type:"string",title:"borderInlineColor"},borderInlineEnd:{type:"string",title:"borderInlineEnd"},borderInlineEndColor:{type:"string",title:"borderInlineEndColor"},borderInlineEndStyle:{type:"string",title:"borderInlineEndStyle"},borderInlineEndWidth:{type:"string",title:"borderInlineEndWidth"},borderInlineStart:{type:"string",title:"borderInlineStart"},borderInlineStartColor:{type:"string",title:"borderInlineStartColor"},borderInlineStartStyle:{type:"string",title:"borderInlineStartStyle"},borderInlineStartWidth:{type:"string",title:"borderInlineStartWidth"},borderInlineStyle:{type:"string",title:"borderInlineStyle"},borderInlineWidth:{type:"string",title:"borderInlineWidth"},borderLeft:{type:"string",title:"borderLeft"},borderLeftColor:{type:"string",title:"borderLeftColor"},borderLeftStyle:{type:"string",title:"borderLeftStyle"},borderLeftWidth:{type:"string",title:"borderLeftWidth"},borderRadius:{type:"string",title:"borderRadius"},borderRight:{type:"string",title:"borderRight"},borderRightColor:{type:"string",title:"borderRightColor"},borderRightStyle:{type:"string",title:"borderRightStyle"},borderRightWidth:{type:"string",title:"borderRightWidth"},borderSpacing:{type:"string",title:"borderSpacing"},borderStartEndRadius:{type:"string",title:"borderStartEndRadius"},borderStartStartRadius:{type:"string",title:"borderStartStartRadius"},borderStyle:{type:"string",title:"borderStyle"},borderTop:{type:"string",title:"borderTop"},borderTopColor:{type:"string",title:"borderTopColor"},borderTopLeftRadius:{type:"string",title:"borderTopLeftRadius"},borderTopRightRadius:{type:"string",title:"borderTopRightRadius"},borderTopStyle:{type:"string",title:"borderTopStyle"},borderTopWidth:{type:"string",title:"borderTopWidth"},borderWidth:{type:"string",title:"borderWidth"},bottom:{type:"string",title:"bottom"},boxShadow:{type:"string",title:"boxShadow"},boxSizing:{type:"string",title:"boxSizing"},breakAfter:{type:"string",title:"breakAfter"},breakBefore:{type:"string",title:"breakBefore"},breakInside:{type:"string",title:"breakInside"},captionSide:{type:"string",title:"captionSide"},caretColor:{type:"string",title:"caretColor"},clear:{type:"string",title:"clear"},clip:{type:"string",title:"clip"},clipPath:{type:"string",title:"clipPath"},clipRule:{type:"string",title:"clipRule"},color:{type:"string",title:"color"},colorInterpolation:{type:"string",title:"colorInterpolation"},colorInterpolationFilters:{type:"string",title:"colorInterpolationFilters"},colorScheme:{type:"string",title:"colorScheme"},columnCount:{type:"string",title:"columnCount"},columnFill:{type:"string",title:"columnFill"},columnGap:{type:"string",title:"columnGap"},columnRule:{type:"string",title:"columnRule"},columnRuleColor:{type:"string",title:"columnRuleColor"},columnRuleStyle:{type:"string",title:"columnRuleStyle"},columnRuleWidth:{type:"string",title:"columnRuleWidth"},columnSpan:{type:"string",title:"columnSpan"},columnWidth:{type:"string",title:"columnWidth"},columns:{type:"string",title:"columns"},contain:{type:"string",title:"contain"},containIntrinsicBlockSize:{type:"string",title:"containIntrinsicBlockSize"},containIntrinsicHeight:{type:"string",title:"containIntrinsicHeight"},containIntrinsicInlineSize:{type:"string",title:"containIntrinsicInlineSize"},containIntrinsicSize:{type:"string",title:"containIntrinsicSize"},containIntrinsicWidth:{type:"string",title:"containIntrinsicWidth"},container:{type:"string",title:"container"},containerName:{type:"string",title:"containerName"},containerType:{type:"string",title:"containerType"},content:{type:"string",title:"content"},contentVisibility:{type:"string",title:"contentVisibility"},counterIncrement:{type:"string",title:"counterIncrement"},counterReset:{type:"string",title:"counterReset"},counterSet:{type:"string",title:"counterSet"},cssFloat:{type:"string",title:"cssFloat"},cssText:{type:"string",title:"cssText"},cursor:{type:"string",title:"cursor"},cx:{type:"string",title:"cx"},cy:{type:"string",title:"cy"},d:{type:"string",title:"d"},direction:{type:"string",title:"direction"},display:{type:"string",title:"display"},dominantBaseline:{type:"string",title:"dominantBaseline"},emptyCells:{type:"string",title:"emptyCells"},fill:{type:"string",title:"fill"},fillOpacity:{type:"string",title:"fillOpacity"},fillRule:{type:"string",title:"fillRule"},filter:{type:"string",title:"filter"},flex:{type:"string",title:"flex"},flexBasis:{type:"string",title:"flexBasis"},flexDirection:{type:"string",title:"flexDirection"},flexFlow:{type:"string",title:"flexFlow"},flexGrow:{type:"string",title:"flexGrow"},flexShrink:{type:"string",title:"flexShrink"},flexWrap:{type:"string",title:"flexWrap"},float:{type:"string",title:"float"},floodColor:{type:"string",title:"floodColor"},floodOpacity:{type:"string",title:"floodOpacity"},font:{type:"string",title:"font"},fontFamily:{type:"string",title:"fontFamily"},fontFeatureSettings:{type:"string",title:"fontFeatureSettings"},fontKerning:{type:"string",title:"fontKerning"},fontOpticalSizing:{type:"string",title:"fontOpticalSizing"},fontPalette:{type:"string",title:"fontPalette"},fontSize:{type:"string",title:"fontSize"},fontSizeAdjust:{type:"string",title:"fontSizeAdjust"},fontStretch:{type:"string",title:"fontStretch"},fontStyle:{type:"string",title:"fontStyle"},fontSynthesis:{type:"string",title:"fontSynthesis"},fontSynthesisSmallCaps:{type:"string",title:"fontSynthesisSmallCaps"},fontSynthesisStyle:{type:"string",title:"fontSynthesisStyle"},fontSynthesisWeight:{type:"string",title:"fontSynthesisWeight"},fontVariant:{type:"string",title:"fontVariant"},fontVariantAlternates:{type:"string",title:"fontVariantAlternates"},fontVariantCaps:{type:"string",title:"fontVariantCaps"},fontVariantEastAsian:{type:"string",title:"fontVariantEastAsian"},fontVariantLigatures:{type:"string",title:"fontVariantLigatures"},fontVariantNumeric:{type:"string",title:"fontVariantNumeric"},fontVariantPosition:{type:"string",title:"fontVariantPosition"},fontVariationSettings:{type:"string",title:"fontVariationSettings"},fontWeight:{type:"string",title:"fontWeight"},forcedColorAdjust:{type:"string",title:"forcedColorAdjust"},gap:{type:"string",title:"gap"},grid:{type:"string",title:"grid"},gridArea:{type:"string",title:"gridArea"},gridAutoColumns:{type:"string",title:"gridAutoColumns"},gridAutoFlow:{type:"string",title:"gridAutoFlow"},gridAutoRows:{type:"string",title:"gridAutoRows"},gridColumn:{type:"string",title:"gridColumn"},gridColumnEnd:{type:"string",title:"gridColumnEnd"},gridColumnGap:{type:"string",title:"gridColumnGap"},gridColumnStart:{type:"string",title:"gridColumnStart"},gridGap:{type:"string",title:"gridGap"},gridRow:{type:"string",title:"gridRow"},gridRowEnd:{type:"string",title:"gridRowEnd"},gridRowGap:{type:"string",title:"gridRowGap"},gridRowStart:{type:"string",title:"gridRowStart"},gridTemplate:{type:"string",title:"gridTemplate"},gridTemplateAreas:{type:"string",title:"gridTemplateAreas"},gridTemplateColumns:{type:"string",title:"gridTemplateColumns"},gridTemplateRows:{type:"string",title:"gridTemplateRows"},height:{type:"string",title:"height"},hyphenateCharacter:{type:"string",title:"hyphenateCharacter"},hyphens:{type:"string",title:"hyphens"},imageOrientation:{type:"string",title:"imageOrientation"},imageRendering:{type:"string",title:"imageRendering"},inlineSize:{type:"string",title:"inlineSize"},inset:{type:"string",title:"inset"},insetBlock:{type:"string",title:"insetBlock"},insetBlockEnd:{type:"string",title:"insetBlockEnd"},insetBlockStart:{type:"string",title:"insetBlockStart"},insetInline:{type:"string",title:"insetInline"},insetInlineEnd:{type:"string",title:"insetInlineEnd"},insetInlineStart:{type:"string",title:"insetInlineStart"},isolation:{type:"string",title:"isolation"},justifyContent:{type:"string",title:"justifyContent"},justifyItems:{type:"string",title:"justifyItems"},justifySelf:{type:"string",title:"justifySelf"},left:{type:"string",title:"left"},length:{type:"number",title:"length"},letterSpacing:{type:"string",title:"letterSpacing"},lightingColor:{type:"string",title:"lightingColor"},lineBreak:{type:"string",title:"lineBreak"},lineHeight:{type:"string",title:"lineHeight"},listStyle:{type:"string",title:"listStyle"},listStyleImage:{type:"string",title:"listStyleImage"},listStylePosition:{type:"string",title:"listStylePosition"},listStyleType:{type:"string",title:"listStyleType"},margin:{type:"string",title:"margin"},marginBlock:{type:"string",title:"marginBlock"},marginBlockEnd:{type:"string",title:"marginBlockEnd"},marginBlockStart:{type:"string",title:"marginBlockStart"},marginBottom:{type:"string",title:"marginBottom"},marginInline:{type:"string",title:"marginInline"},marginInlineEnd:{type:"string",title:"marginInlineEnd"},marginInlineStart:{type:"string",title:"marginInlineStart"},marginLeft:{type:"string",title:"marginLeft"},marginRight:{type:"string",title:"marginRight"},marginTop:{type:"string",title:"marginTop"},marker:{type:"string",title:"marker"},markerEnd:{type:"string",title:"markerEnd"},markerMid:{type:"string",title:"markerMid"},markerStart:{type:"string",title:"markerStart"},mask:{type:"string",title:"mask"},maskClip:{type:"string",title:"maskClip"},maskComposite:{type:"string",title:"maskComposite"},maskImage:{type:"string",title:"maskImage"},maskMode:{type:"string",title:"maskMode"},maskOrigin:{type:"string",title:"maskOrigin"},maskPosition:{type:"string",title:"maskPosition"},maskRepeat:{type:"string",title:"maskRepeat"},maskSize:{type:"string",title:"maskSize"},maskType:{type:"string",title:"maskType"},mathDepth:{type:"string",title:"mathDepth"},mathStyle:{type:"string",title:"mathStyle"},maxBlockSize:{type:"string",title:"maxBlockSize"},maxHeight:{type:"string",title:"maxHeight"},maxInlineSize:{type:"string",title:"maxInlineSize"},maxWidth:{type:"string",title:"maxWidth"},minBlockSize:{type:"string",title:"minBlockSize"},minHeight:{type:"string",title:"minHeight"},minInlineSize:{type:"string",title:"minInlineSize"},minWidth:{type:"string",title:"minWidth"},mixBlendMode:{type:"string",title:"mixBlendMode"},objectFit:{type:"string",title:"objectFit"},objectPosition:{type:"string",title:"objectPosition"},offset:{type:"string",title:"offset"},offsetAnchor:{type:"string",title:"offsetAnchor"},offsetDistance:{type:"string",title:"offsetDistance"},offsetPath:{type:"string",title:"offsetPath"},offsetPosition:{type:"string",title:"offsetPosition"},offsetRotate:{type:"string",title:"offsetRotate"},opacity:{type:"string",title:"opacity"},order:{type:"string",title:"order"},orphans:{type:"string",title:"orphans"},outline:{type:"string",title:"outline"},outlineColor:{type:"string",title:"outlineColor"},outlineOffset:{type:"string",title:"outlineOffset"},outlineStyle:{type:"string",title:"outlineStyle"},outlineWidth:{type:"string",title:"outlineWidth"},overflow:{type:"string",title:"overflow"},overflowAnchor:{type:"string",title:"overflowAnchor"},overflowClipMargin:{type:"string",title:"overflowClipMargin"},overflowWrap:{type:"string",title:"overflowWrap"},overflowX:{type:"string",title:"overflowX"},overflowY:{type:"string",title:"overflowY"},overscrollBehavior:{type:"string",title:"overscrollBehavior"},overscrollBehaviorBlock:{type:"string",title:"overscrollBehaviorBlock"},overscrollBehaviorInline:{type:"string",title:"overscrollBehaviorInline"},overscrollBehaviorX:{type:"string",title:"overscrollBehaviorX"},overscrollBehaviorY:{type:"string",title:"overscrollBehaviorY"},padding:{type:"string",title:"padding"},paddingBlock:{type:"string",title:"paddingBlock"},paddingBlockEnd:{type:"string",title:"paddingBlockEnd"},paddingBlockStart:{type:"string",title:"paddingBlockStart"},paddingBottom:{type:"string",title:"paddingBottom"},paddingInline:{type:"string",title:"paddingInline"},paddingInlineEnd:{type:"string",title:"paddingInlineEnd"},paddingInlineStart:{type:"string",title:"paddingInlineStart"},paddingLeft:{type:"string",title:"paddingLeft"},paddingRight:{type:"string",title:"paddingRight"},paddingTop:{type:"string",title:"paddingTop"},page:{type:"string",title:"page"},pageBreakAfter:{type:"string",title:"pageBreakAfter"},pageBreakBefore:{type:"string",title:"pageBreakBefore"},pageBreakInside:{type:"string",title:"pageBreakInside"},paintOrder:{type:"string",title:"paintOrder"},parentRule:{anyOf:[{$ref:"#/definitions/CSSRule"},{type:"null"}],title:"parentRule"},perspective:{type:"string",title:"perspective"},perspectiveOrigin:{type:"string",title:"perspectiveOrigin"},placeContent:{type:"string",title:"placeContent"},placeItems:{type:"string",title:"placeItems"},placeSelf:{type:"string",title:"placeSelf"},pointerEvents:{type:"string",title:"pointerEvents"},position:{type:"string",title:"position"},printColorAdjust:{type:"string",title:"printColorAdjust"},quotes:{type:"string",title:"quotes"},r:{type:"string",title:"r"},resize:{type:"string",title:"resize"},right:{type:"string",title:"right"},rotate:{type:"string",title:"rotate"},rowGap:{type:"string",title:"rowGap"},rubyPosition:{type:"string",title:"rubyPosition"},rx:{type:"string",title:"rx"},ry:{type:"string",title:"ry"},scale:{type:"string",title:"scale"},scrollBehavior:{type:"string",title:"scrollBehavior"},scrollMargin:{type:"string",title:"scrollMargin"},scrollMarginBlock:{type:"string",title:"scrollMarginBlock"},scrollMarginBlockEnd:{type:"string",title:"scrollMarginBlockEnd"},scrollMarginBlockStart:{type:"string",title:"scrollMarginBlockStart"},scrollMarginBottom:{type:"string",title:"scrollMarginBottom"},scrollMarginInline:{type:"string",title:"scrollMarginInline"},scrollMarginInlineEnd:{type:"string",title:"scrollMarginInlineEnd"},scrollMarginInlineStart:{type:"string",title:"scrollMarginInlineStart"},scrollMarginLeft:{type:"string",title:"scrollMarginLeft"},scrollMarginRight:{type:"string",title:"scrollMarginRight"},scrollMarginTop:{type:"string",title:"scrollMarginTop"},scrollPadding:{type:"string",title:"scrollPadding"},scrollPaddingBlock:{type:"string",title:"scrollPaddingBlock"},scrollPaddingBlockEnd:{type:"string",title:"scrollPaddingBlockEnd"},scrollPaddingBlockStart:{type:"string",title:"scrollPaddingBlockStart"},scrollPaddingBottom:{type:"string",title:"scrollPaddingBottom"},scrollPaddingInline:{type:"string",title:"scrollPaddingInline"},scrollPaddingInlineEnd:{type:"string",title:"scrollPaddingInlineEnd"},scrollPaddingInlineStart:{type:"string",title:"scrollPaddingInlineStart"},scrollPaddingLeft:{type:"string",title:"scrollPaddingLeft"},scrollPaddingRight:{type:"string",title:"scrollPaddingRight"},scrollPaddingTop:{type:"string",title:"scrollPaddingTop"},scrollSnapAlign:{type:"string",title:"scrollSnapAlign"},scrollSnapStop:{type:"string",title:"scrollSnapStop"},scrollSnapType:{type:"string",title:"scrollSnapType"},scrollbarColor:{type:"string",title:"scrollbarColor"},scrollbarGutter:{type:"string",title:"scrollbarGutter"},scrollbarWidth:{type:"string",title:"scrollbarWidth"},shapeImageThreshold:{type:"string",title:"shapeImageThreshold"},shapeMargin:{type:"string",title:"shapeMargin"},shapeOutside:{type:"string",title:"shapeOutside"},shapeRendering:{type:"string",title:"shapeRendering"},stopColor:{type:"string",title:"stopColor"},stopOpacity:{type:"string",title:"stopOpacity"},stroke:{type:"string",title:"stroke"},strokeDasharray:{type:"string",title:"strokeDasharray"},strokeDashoffset:{type:"string",title:"strokeDashoffset"},strokeLinecap:{type:"string",title:"strokeLinecap"},strokeLinejoin:{type:"string",title:"strokeLinejoin"},strokeMiterlimit:{type:"string",title:"strokeMiterlimit"},strokeOpacity:{type:"string",title:"strokeOpacity"},strokeWidth:{type:"string",title:"strokeWidth"},tabSize:{type:"string",title:"tabSize"},tableLayout:{type:"string",title:"tableLayout"},textAlign:{type:"string",title:"textAlign"},textAlignLast:{type:"string",title:"textAlignLast"},textAnchor:{type:"string",title:"textAnchor"},textCombineUpright:{type:"string",title:"textCombineUpright"},textDecoration:{type:"string",title:"textDecoration"},textDecorationColor:{type:"string",title:"textDecorationColor"},textDecorationLine:{type:"string",title:"textDecorationLine"},textDecorationSkipInk:{type:"string",title:"textDecorationSkipInk"},textDecorationStyle:{type:"string",title:"textDecorationStyle"},textDecorationThickness:{type:"string",title:"textDecorationThickness"},textEmphasis:{type:"string",title:"textEmphasis"},textEmphasisColor:{type:"string",title:"textEmphasisColor"},textEmphasisPosition:{type:"string",title:"textEmphasisPosition"},textEmphasisStyle:{type:"string",title:"textEmphasisStyle"},textIndent:{type:"string",title:"textIndent"},textOrientation:{type:"string",title:"textOrientation"},textOverflow:{type:"string",title:"textOverflow"},textRendering:{type:"string",title:"textRendering"},textShadow:{type:"string",title:"textShadow"},textTransform:{type:"string",title:"textTransform"},textUnderlineOffset:{type:"string",title:"textUnderlineOffset"},textUnderlinePosition:{type:"string",title:"textUnderlinePosition"},textWrap:{type:"string",title:"textWrap"},textWrapMode:{type:"string",title:"textWrapMode"},textWrapStyle:{type:"string",title:"textWrapStyle"},top:{type:"string",title:"top"},touchAction:{type:"string",title:"touchAction"},transform:{type:"string",title:"transform"},transformBox:{type:"string",title:"transformBox"},transformOrigin:{type:"string",title:"transformOrigin"},transformStyle:{type:"string",title:"transformStyle"},transition:{type:"string",title:"transition"},transitionBehavior:{type:"string",title:"transitionBehavior"},transitionDelay:{type:"string",title:"transitionDelay"},transitionDuration:{type:"string",title:"transitionDuration"},transitionProperty:{type:"string",title:"transitionProperty"},transitionTimingFunction:{type:"string",title:"transitionTimingFunction"},translate:{type:"string",title:"translate"},unicodeBidi:{type:"string",title:"unicodeBidi"},userSelect:{type:"string",title:"userSelect"},vectorEffect:{type:"string",title:"vectorEffect"},verticalAlign:{type:"string",title:"verticalAlign"},visibility:{type:"string",title:"visibility"},webkitAlignContent:{type:"string",title:"webkitAlignContent"},webkitAlignItems:{type:"string",title:"webkitAlignItems"},webkitAlignSelf:{type:"string",title:"webkitAlignSelf"},webkitAnimation:{type:"string",title:"webkitAnimation"},webkitAnimationDelay:{type:"string",title:"webkitAnimationDelay"},webkitAnimationDirection:{type:"string",title:"webkitAnimationDirection"},webkitAnimationDuration:{type:"string",title:"webkitAnimationDuration"},webkitAnimationFillMode:{type:"string",title:"webkitAnimationFillMode"},webkitAnimationIterationCount:{type:"string",title:"webkitAnimationIterationCount"},webkitAnimationName:{type:"string",title:"webkitAnimationName"},webkitAnimationPlayState:{type:"string",title:"webkitAnimationPlayState"},webkitAnimationTimingFunction:{type:"string",title:"webkitAnimationTimingFunction"},webkitAppearance:{type:"string",title:"webkitAppearance"},webkitBackfaceVisibility:{type:"string",title:"webkitBackfaceVisibility"},webkitBackgroundClip:{type:"string",title:"webkitBackgroundClip"},webkitBackgroundOrigin:{type:"string",title:"webkitBackgroundOrigin"},webkitBackgroundSize:{type:"string",title:"webkitBackgroundSize"},webkitBorderBottomLeftRadius:{type:"string",title:"webkitBorderBottomLeftRadius"},webkitBorderBottomRightRadius:{type:"string",title:"webkitBorderBottomRightRadius"},webkitBorderRadius:{type:"string",title:"webkitBorderRadius"},webkitBorderTopLeftRadius:{type:"string",title:"webkitBorderTopLeftRadius"},webkitBorderTopRightRadius:{type:"string",title:"webkitBorderTopRightRadius"},webkitBoxAlign:{type:"string",title:"webkitBoxAlign"},webkitBoxFlex:{type:"string",title:"webkitBoxFlex"},webkitBoxOrdinalGroup:{type:"string",title:"webkitBoxOrdinalGroup"},webkitBoxOrient:{type:"string",title:"webkitBoxOrient"},webkitBoxPack:{type:"string",title:"webkitBoxPack"},webkitBoxShadow:{type:"string",title:"webkitBoxShadow"},webkitBoxSizing:{type:"string",title:"webkitBoxSizing"},webkitFilter:{type:"string",title:"webkitFilter"},webkitFlex:{type:"string",title:"webkitFlex"},webkitFlexBasis:{type:"string",title:"webkitFlexBasis"},webkitFlexDirection:{type:"string",title:"webkitFlexDirection"},webkitFlexFlow:{type:"string",title:"webkitFlexFlow"},webkitFlexGrow:{type:"string",title:"webkitFlexGrow"},webkitFlexShrink:{type:"string",title:"webkitFlexShrink"},webkitFlexWrap:{type:"string",title:"webkitFlexWrap"},webkitJustifyContent:{type:"string",title:"webkitJustifyContent"},webkitLineClamp:{type:"string",title:"webkitLineClamp"},webkitMask:{type:"string",title:"webkitMask"},webkitMaskBoxImage:{type:"string",title:"webkitMaskBoxImage"},webkitMaskBoxImageOutset:{type:"string",title:"webkitMaskBoxImageOutset"},webkitMaskBoxImageRepeat:{type:"string",title:"webkitMaskBoxImageRepeat"},webkitMaskBoxImageSlice:{type:"string",title:"webkitMaskBoxImageSlice"},webkitMaskBoxImageSource:{type:"string",title:"webkitMaskBoxImageSource"},webkitMaskBoxImageWidth:{type:"string",title:"webkitMaskBoxImageWidth"},webkitMaskClip:{type:"string",title:"webkitMaskClip"},webkitMaskComposite:{type:"string",title:"webkitMaskComposite"},webkitMaskImage:{type:"string",title:"webkitMaskImage"},webkitMaskOrigin:{type:"string",title:"webkitMaskOrigin"},webkitMaskPosition:{type:"string",title:"webkitMaskPosition"},webkitMaskRepeat:{type:"string",title:"webkitMaskRepeat"},webkitMaskSize:{type:"string",title:"webkitMaskSize"},webkitOrder:{type:"string",title:"webkitOrder"},webkitPerspective:{type:"string",title:"webkitPerspective"},webkitPerspectiveOrigin:{type:"string",title:"webkitPerspectiveOrigin"},webkitTextFillColor:{type:"string",title:"webkitTextFillColor"},webkitTextSizeAdjust:{type:"string",title:"webkitTextSizeAdjust"},webkitTextStroke:{type:"string",title:"webkitTextStroke"},webkitTextStrokeColor:{type:"string",title:"webkitTextStrokeColor"},webkitTextStrokeWidth:{type:"string",title:"webkitTextStrokeWidth"},webkitTransform:{type:"string",title:"webkitTransform"},webkitTransformOrigin:{type:"string",title:"webkitTransformOrigin"},webkitTransformStyle:{type:"string",title:"webkitTransformStyle"},webkitTransition:{type:"string",title:"webkitTransition"},webkitTransitionDelay:{type:"string",title:"webkitTransitionDelay"},webkitTransitionDuration:{type:"string",title:"webkitTransitionDuration"},webkitTransitionProperty:{type:"string",title:"webkitTransitionProperty"},webkitTransitionTimingFunction:{type:"string",title:"webkitTransitionTimingFunction"},webkitUserSelect:{type:"string",title:"webkitUserSelect"},whiteSpace:{type:"string",title:"whiteSpace"},whiteSpaceCollapse:{type:"string",title:"whiteSpaceCollapse"},widows:{type:"string",title:"widows"},width:{type:"string",title:"width"},willChange:{type:"string",title:"willChange"},wordBreak:{type:"string",title:"wordBreak"},wordSpacing:{type:"string",title:"wordSpacing"},wordWrap:{type:"string",title:"wordWrap"},writingMode:{type:"string",title:"writingMode"},x:{type:"string",title:"x"},y:{type:"string",title:"y"},zIndex:{type:"string",title:"zIndex"},zoom:{type:"string",title:"zoom"}},required:["accentColor","alignContent","alignItems","alignSelf","alignmentBaseline","all","animation","animationComposition","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","aspectRatio","backdropFilter","backfaceVisibility","background","backgroundAttachment","backgroundBlendMode","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPosition","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize","baselineShift","baselineSource","blockSize","border","borderBlock","borderBlockColor","borderBlockEnd","borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth","borderBlockStart","borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth","borderBlockStyle","borderBlockWidth","borderBottom","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderCollapse","borderColor","borderEndEndRadius","borderEndStartRadius","borderImage","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderInline","borderInlineColor","borderInlineEnd","borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth","borderInlineStart","borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth","borderInlineStyle","borderInlineWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRadius","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderSpacing","borderStartEndRadius","borderStartStartRadius","borderStyle","borderTop","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","bottom","boxShadow","boxSizing","breakAfter","breakBefore","breakInside","captionSide","caretColor","clear","clip","clipPath","clipRule","color","colorInterpolation","colorInterpolationFilters","colorScheme","columnCount","columnFill","columnGap","columnRule","columnRuleColor","columnRuleStyle","columnRuleWidth","columnSpan","columnWidth","columns","contain","containIntrinsicBlockSize","containIntrinsicHeight","containIntrinsicInlineSize","containIntrinsicSize","containIntrinsicWidth","container","containerName","containerType","content","contentVisibility","counterIncrement","counterReset","counterSet","cssFloat","cssText","cursor","cx","cy","d","direction","display","dominantBaseline","emptyCells","fill","fillOpacity","fillRule","filter","flex","flexBasis","flexDirection","flexFlow","flexGrow","flexShrink","flexWrap","float","floodColor","floodOpacity","font","fontFamily","fontFeatureSettings","fontKerning","fontOpticalSizing","fontPalette","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontSynthesis","fontSynthesisSmallCaps","fontSynthesisStyle","fontSynthesisWeight","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontVariationSettings","fontWeight","forcedColorAdjust","gap","grid","gridArea","gridAutoColumns","gridAutoFlow","gridAutoRows","gridColumn","gridColumnEnd","gridColumnGap","gridColumnStart","gridGap","gridRow","gridRowEnd","gridRowGap","gridRowStart","gridTemplate","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","height","hyphenateCharacter","hyphens","imageOrientation","imageRendering","inlineSize","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","isolation","justifyContent","justifyItems","justifySelf","left","length","letterSpacing","lightingColor","lineBreak","lineHeight","listStyle","listStyleImage","listStylePosition","listStyleType","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginTop","marker","markerEnd","markerMid","markerStart","mask","maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPosition","maskRepeat","maskSize","maskType","mathDepth","mathStyle","maxBlockSize","maxHeight","maxInlineSize","maxWidth","minBlockSize","minHeight","minInlineSize","minWidth","mixBlendMode","objectFit","objectPosition","offset","offsetAnchor","offsetDistance","offsetPath","offsetPosition","offsetRotate","opacity","order","orphans","outline","outlineColor","outlineOffset","outlineStyle","outlineWidth","overflow","overflowAnchor","overflowClipMargin","overflowWrap","overflowX","overflowY","overscrollBehavior","overscrollBehaviorBlock","overscrollBehaviorInline","overscrollBehaviorX","overscrollBehaviorY","padding","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingBottom","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingTop","page","pageBreakAfter","pageBreakBefore","pageBreakInside","paintOrder","parentRule","perspective","perspectiveOrigin","placeContent","placeItems","placeSelf","pointerEvents","position","printColorAdjust","quotes","r","resize","right","rotate","rowGap","rubyPosition","rx","ry","scale","scrollBehavior","scrollMargin","scrollMarginBlock","scrollMarginBlockEnd","scrollMarginBlockStart","scrollMarginBottom","scrollMarginInline","scrollMarginInlineEnd","scrollMarginInlineStart","scrollMarginLeft","scrollMarginRight","scrollMarginTop","scrollPadding","scrollPaddingBlock","scrollPaddingBlockEnd","scrollPaddingBlockStart","scrollPaddingBottom","scrollPaddingInline","scrollPaddingInlineEnd","scrollPaddingInlineStart","scrollPaddingLeft","scrollPaddingRight","scrollPaddingTop","scrollSnapAlign","scrollSnapStop","scrollSnapType","scrollbarColor","scrollbarGutter","scrollbarWidth","shapeImageThreshold","shapeMargin","shapeOutside","shapeRendering","stopColor","stopOpacity","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","tableLayout","textAlign","textAlignLast","textAnchor","textCombineUpright","textDecoration","textDecorationColor","textDecorationLine","textDecorationSkipInk","textDecorationStyle","textDecorationThickness","textEmphasis","textEmphasisColor","textEmphasisPosition","textEmphasisStyle","textIndent","textOrientation","textOverflow","textRendering","textShadow","textTransform","textUnderlineOffset","textUnderlinePosition","textWrap","textWrapMode","textWrapStyle","top","touchAction","transform","transformBox","transformOrigin","transformStyle","transition","transitionBehavior","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","translate","unicodeBidi","userSelect","vectorEffect","verticalAlign","visibility","webkitAlignContent","webkitAlignItems","webkitAlignSelf","webkitAnimation","webkitAnimationDelay","webkitAnimationDirection","webkitAnimationDuration","webkitAnimationFillMode","webkitAnimationIterationCount","webkitAnimationName","webkitAnimationPlayState","webkitAnimationTimingFunction","webkitAppearance","webkitBackfaceVisibility","webkitBackgroundClip","webkitBackgroundOrigin","webkitBackgroundSize","webkitBorderBottomLeftRadius","webkitBorderBottomRightRadius","webkitBorderRadius","webkitBorderTopLeftRadius","webkitBorderTopRightRadius","webkitBoxAlign","webkitBoxFlex","webkitBoxOrdinalGroup","webkitBoxOrient","webkitBoxPack","webkitBoxShadow","webkitBoxSizing","webkitFilter","webkitFlex","webkitFlexBasis","webkitFlexDirection","webkitFlexFlow","webkitFlexGrow","webkitFlexShrink","webkitFlexWrap","webkitJustifyContent","webkitLineClamp","webkitMask","webkitMaskBoxImage","webkitMaskBoxImageOutset","webkitMaskBoxImageRepeat","webkitMaskBoxImageSlice","webkitMaskBoxImageSource","webkitMaskBoxImageWidth","webkitMaskClip","webkitMaskComposite","webkitMaskImage","webkitMaskOrigin","webkitMaskPosition","webkitMaskRepeat","webkitMaskSize","webkitOrder","webkitPerspective","webkitPerspectiveOrigin","webkitTextFillColor","webkitTextSizeAdjust","webkitTextStroke","webkitTextStrokeColor","webkitTextStrokeWidth","webkitTransform","webkitTransformOrigin","webkitTransformStyle","webkitTransition","webkitTransitionDelay","webkitTransitionDuration","webkitTransitionProperty","webkitTransitionTimingFunction","webkitUserSelect","whiteSpace","whiteSpaceCollapse","widows","width","willChange","wordBreak","wordSpacing","wordWrap","writingMode","x","y","zIndex","zoom"],title:"style"},contentEditable:{type:"string",title:"contentEditable"},enterKeyHint:{type:"string",title:"enterKeyHint"},inputMode:{type:"string",title:"inputMode"},isContentEditable:{type:"boolean",title:"isContentEditable"},onabort:{type:["null","object"],title:"onabort"},onanimationcancel:{type:["null","object"],title:"onanimationcancel"},onanimationend:{type:["null","object"],title:"onanimationend"},onanimationiteration:{type:["null","object"],title:"onanimationiteration"},onanimationstart:{type:["null","object"],title:"onanimationstart"},onauxclick:{type:["null","object"],title:"onauxclick"},onbeforeinput:{type:["null","object"],title:"onbeforeinput"},onbeforetoggle:{type:["null","object"],title:"onbeforetoggle"},onblur:{type:["null","object"],title:"onblur"},oncancel:{type:["null","object"],title:"oncancel"},oncanplay:{type:["null","object"],title:"oncanplay"},oncanplaythrough:{type:["null","object"],title:"oncanplaythrough"},onchange:{type:["null","object"],title:"onchange"},onclick:{type:["null","object"],title:"onclick"},onclose:{type:["null","object"],title:"onclose"},oncontextmenu:{type:["null","object"],title:"oncontextmenu"},oncopy:{type:["null","object"],title:"oncopy"},oncuechange:{type:["null","object"],title:"oncuechange"},oncut:{type:["null","object"],title:"oncut"},ondblclick:{type:["null","object"],title:"ondblclick"},ondrag:{type:["null","object"],title:"ondrag"},ondragend:{type:["null","object"],title:"ondragend"},ondragenter:{type:["null","object"],title:"ondragenter"},ondragleave:{type:["null","object"],title:"ondragleave"},ondragover:{type:["null","object"],title:"ondragover"},ondragstart:{type:["null","object"],title:"ondragstart"},ondrop:{type:["null","object"],title:"ondrop"},ondurationchange:{type:["null","object"],title:"ondurationchange"},onemptied:{type:["null","object"],title:"onemptied"},onended:{type:["null","object"],title:"onended"},onerror:{$ref:"#/definitions/OnErrorEventHandler",title:"onerror"},onfocus:{type:["null","object"],title:"onfocus"},onformdata:{type:["null","object"],title:"onformdata"},ongotpointercapture:{type:["null","object"],title:"ongotpointercapture"},oninput:{type:["null","object"],title:"oninput"},oninvalid:{type:["null","object"],title:"oninvalid"},onkeydown:{type:["null","object"],title:"onkeydown"},onkeypress:{type:["null","object"],title:"onkeypress"},onkeyup:{type:["null","object"],title:"onkeyup"},onload:{type:["null","object"],title:"onload"},onloadeddata:{type:["null","object"],title:"onloadeddata"},onloadedmetadata:{type:["null","object"],title:"onloadedmetadata"},onloadstart:{type:["null","object"],title:"onloadstart"},onlostpointercapture:{type:["null","object"],title:"onlostpointercapture"},onmousedown:{type:["null","object"],title:"onmousedown"},onmouseenter:{type:["null","object"],title:"onmouseenter"},onmouseleave:{type:["null","object"],title:"onmouseleave"},onmousemove:{type:["null","object"],title:"onmousemove"},onmouseout:{type:["null","object"],title:"onmouseout"},onmouseover:{type:["null","object"],title:"onmouseover"},onmouseup:{type:["null","object"],title:"onmouseup"},onpaste:{type:["null","object"],title:"onpaste"},onpause:{type:["null","object"],title:"onpause"},onplay:{type:["null","object"],title:"onplay"},onplaying:{type:["null","object"],title:"onplaying"},onpointercancel:{type:["null","object"],title:"onpointercancel"},onpointerdown:{type:["null","object"],title:"onpointerdown"},onpointerenter:{type:["null","object"],title:"onpointerenter"},onpointerleave:{type:["null","object"],title:"onpointerleave"},onpointermove:{type:["null","object"],title:"onpointermove"},onpointerout:{type:["null","object"],title:"onpointerout"},onpointerover:{type:["null","object"],title:"onpointerover"},onpointerup:{type:["null","object"],title:"onpointerup"},onprogress:{type:["null","object"],title:"onprogress"},onratechange:{type:["null","object"],title:"onratechange"},onreset:{type:["null","object"],title:"onreset"},onresize:{type:["null","object"],title:"onresize"},onscroll:{type:["null","object"],title:"onscroll"},onscrollend:{type:["null","object"],title:"onscrollend"},onsecuritypolicyviolation:{type:["null","object"],title:"onsecuritypolicyviolation"},onseeked:{type:["null","object"],title:"onseeked"},onseeking:{type:["null","object"],title:"onseeking"},onselect:{type:["null","object"],title:"onselect"},onselectionchange:{type:["null","object"],title:"onselectionchange"},onselectstart:{type:["null","object"],title:"onselectstart"},onslotchange:{type:["null","object"],title:"onslotchange"},onstalled:{type:["null","object"],title:"onstalled"},onsubmit:{type:["null","object"],title:"onsubmit"},onsuspend:{type:["null","object"],title:"onsuspend"},ontimeupdate:{type:["null","object"],title:"ontimeupdate"},ontoggle:{type:["null","object"],title:"ontoggle"},ontouchcancel:{type:["null","object"],title:"ontouchcancel"},ontouchend:{type:["null","object"],title:"ontouchend"},ontouchmove:{type:["null","object"],title:"ontouchmove"},ontouchstart:{type:["null","object"],title:"ontouchstart"},ontransitioncancel:{type:["null","object"],title:"ontransitioncancel"},ontransitionend:{type:["null","object"],title:"ontransitionend"},ontransitionrun:{type:["null","object"],title:"ontransitionrun"},ontransitionstart:{type:["null","object"],title:"ontransitionstart"},onvolumechange:{type:["null","object"],title:"onvolumechange"},onwaiting:{type:["null","object"],title:"onwaiting"},onwebkitanimationend:{type:["null","object"],title:"onwebkitanimationend"},onwebkitanimationiteration:{type:["null","object"],title:"onwebkitanimationiteration"},onwebkitanimationstart:{type:["null","object"],title:"onwebkitanimationstart"},onwebkittransitionend:{type:["null","object"],title:"onwebkittransitionend"},onwheel:{type:["null","object"],title:"onwheel"},autofocus:{type:"boolean",title:"autofocus"},dataset:{$ref:"#/definitions/DOMStringMap",title:"dataset"},nonce:{type:"string",title:"nonce"},tabIndex:{type:"number",title:"tabIndex"}},required:["ATTRIBUTE_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_TYPE_NODE","ELEMENT_NODE","ENTITY_NODE","ENTITY_REFERENCE_NODE","HAVE_CURRENT_DATA","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","HAVE_METADATA","HAVE_NOTHING","NETWORK_EMPTY","NETWORK_IDLE","NETWORK_LOADING","NETWORK_NO_SOURCE","NOTATION_NODE","PROCESSING_INSTRUCTION_NODE","TEXT_NODE","accessKey","accessKeyLabel","ariaAtomic","ariaAutoComplete","ariaBrailleLabel","ariaBrailleRoleDescription","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescription","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assignedSlot","attributeStyleMap","attributes","autocapitalize","autofocus","autoplay","baseURI","buffered","childElementCount","childNodes","children","classList","className","clientHeight","clientLeft","clientTop","clientWidth","contentEditable","controls","crossOrigin","currentSrc","currentTime","dataset","defaultMuted","defaultPlaybackRate","dir","disablePictureInPicture","disableRemotePlayback","draggable","duration","ended","enterKeyHint","error","firstChild","firstElementChild","height","hidden","id","inert","innerHTML","innerText","inputMode","isConnected","isContentEditable","lang","lastChild","lastElementChild","localName","loop","mediaKeys","muted","namespaceURI","networkState","nextElementSibling","nextSibling","nodeName","nodeType","nodeValue","offsetHeight","offsetLeft","offsetParent","offsetTop","offsetWidth","onabort","onanimationcancel","onanimationend","onanimationiteration","onanimationstart","onauxclick","onbeforeinput","onbeforetoggle","onblur","oncancel","oncanplay","oncanplaythrough","onchange","onclick","onclose","oncontextmenu","oncopy","oncuechange","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onemptied","onencrypted","onended","onenterpictureinpicture","onerror","onfocus","onformdata","onfullscreenchange","onfullscreenerror","ongotpointercapture","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onleavepictureinpicture","onload","onloadeddata","onloadedmetadata","onloadstart","onlostpointercapture","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseout","onmouseover","onmouseup","onpaste","onpause","onplay","onplaying","onpointercancel","onpointerdown","onpointerenter","onpointerleave","onpointermove","onpointerout","onpointerover","onpointerup","onprogress","onratechange","onreset","onresize","onscroll","onscrollend","onsecuritypolicyviolation","onseeked","onseeking","onselect","onselectionchange","onselectstart","onslotchange","onstalled","onsubmit","onsuspend","ontimeupdate","ontoggle","ontransitioncancel","ontransitionend","ontransitionrun","ontransitionstart","onvolumechange","onwaiting","onwaitingforkey","onwebkitanimationend","onwebkitanimationiteration","onwebkitanimationstart","onwebkittransitionend","onwheel","outerHTML","outerText","ownerDocument","parentElement","parentNode","part","paused","playbackRate","played","playsInline","popover","poster","prefix","preload","preservesPitch","previousElementSibling","previousSibling","readyState","remote","role","scrollHeight","scrollLeft","scrollTop","scrollWidth","seekable","seeking","shadowRoot","sinkId","slot","spellcheck","src","srcObject","style","tabIndex","tagName","textContent","textTracks","title","translate","videoHeight","videoWidth","volume","width"]},TimeRanges:{title:"TimeRanges",type:"object",properties:{length:{type:"number",title:"length"}},required:["length"]},MediaError:{title:"MediaError",type:"object",properties:{code:{type:"number",title:"code"},message:{type:"string",title:"message"},MEDIA_ERR_ABORTED:{type:"number",const:1,title:"MEDIA_ERR_ABORTED"},MEDIA_ERR_NETWORK:{type:"number",const:2,title:"MEDIA_ERR_NETWORK"},MEDIA_ERR_DECODE:{type:"number",const:3,title:"MEDIA_ERR_DECODE"},MEDIA_ERR_SRC_NOT_SUPPORTED:{type:"number",const:4,title:"MEDIA_ERR_SRC_NOT_SUPPORTED"}},required:["MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","code","message"]},MediaKeys:{title:"MediaKeys",type:"object"},RemotePlayback:{title:"RemotePlayback",type:"object",properties:{onconnect:{type:["null","object"],title:"onconnect"},onconnecting:{type:["null","object"],title:"onconnecting"},ondisconnect:{type:["null","object"],title:"ondisconnect"},state:{$ref:"#/definitions/RemotePlaybackState",title:"state"}},required:["onconnect","onconnecting","ondisconnect","state"]},RemotePlaybackState:{title:"RemotePlaybackState",enum:["connected","connecting","disconnected"],type:"string"},Blob:{title:"Blob",type:"object",properties:{size:{type:"number",title:"size"},type:{type:"string",title:"type"}},required:["size","type"]},MediaSource:{title:"MediaSource",type:"object",properties:{activeSourceBuffers:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/SourceBuffer"}},properties:{length:{type:"number",title:"length"},onaddsourcebuffer:{type:["null","object"],title:"onaddsourcebuffer"},onremovesourcebuffer:{type:["null","object"],title:"onremovesourcebuffer"}},required:["length","onaddsourcebuffer","onremovesourcebuffer"],title:"activeSourceBuffers"},duration:{type:"number",title:"duration"},onsourceclose:{type:["null","object"],title:"onsourceclose"},onsourceended:{type:["null","object"],title:"onsourceended"},onsourceopen:{type:["null","object"],title:"onsourceopen"},readyState:{$ref:"#/definitions/ReadyState",title:"readyState"},sourceBuffers:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/SourceBuffer"}},properties:{length:{type:"number",title:"length"},onaddsourcebuffer:{type:["null","object"],title:"onaddsourcebuffer"},onremovesourcebuffer:{type:["null","object"],title:"onremovesourcebuffer"}},required:["length","onaddsourcebuffer","onremovesourcebuffer"],title:"sourceBuffers"}},required:["activeSourceBuffers","duration","onsourceclose","onsourceended","onsourceopen","readyState","sourceBuffers"]},SourceBuffer:{title:"SourceBuffer",type:"object",properties:{appendWindowEnd:{type:"number",title:"appendWindowEnd"},appendWindowStart:{type:"number",title:"appendWindowStart"},buffered:{$ref:"#/definitions/TimeRanges",title:"buffered"},mode:{$ref:"#/definitions/AppendMode",title:"mode"},onabort:{type:["null","object"],title:"onabort"},onerror:{type:["null","object"],title:"onerror"},onupdate:{type:["null","object"],title:"onupdate"},onupdateend:{type:["null","object"],title:"onupdateend"},onupdatestart:{type:["null","object"],title:"onupdatestart"},timestampOffset:{type:"number",title:"timestampOffset"},updating:{type:"boolean",title:"updating"}},required:["appendWindowEnd","appendWindowStart","buffered","mode","onabort","onerror","onupdate","onupdateend","onupdatestart","timestampOffset","updating"]},AppendMode:{title:"AppendMode",enum:["segments","sequence"],type:"string"},ReadyState:{title:"ReadyState",enum:["closed","ended","open"],type:"string"},MediaStream:{title:"MediaStream",type:"object",properties:{active:{type:"boolean",title:"active"},id:{type:"string",title:"id"},onaddtrack:{type:["null","object"],title:"onaddtrack"},onremovetrack:{type:["null","object"],title:"onremovetrack"}},required:["active","id","onaddtrack","onremovetrack"]},TextTrack:{title:"TextTrack",type:"object",properties:{activeCues:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/TextTrackCue"}},properties:{length:{type:"number",title:"length"}},required:["length"]},{type:"null"}],title:"activeCues"},cues:{anyOf:[{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{$ref:"#/definitions/TextTrackCue"}},properties:{length:{type:"number",title:"length"}},required:["length"]},{type:"null"}],title:"cues"},id:{type:"string",title:"id"},inBandMetadataTrackDispatchType:{type:"string",title:"inBandMetadataTrackDispatchType"},kind:{$ref:"#/definitions/TextTrackKind",title:"kind"},label:{type:"string",title:"label"},language:{type:"string",title:"language"},mode:{$ref:"#/definitions/TextTrackMode",title:"mode"},oncuechange:{type:["null","object"],title:"oncuechange"}},required:["activeCues","cues","id","inBandMetadataTrackDispatchType","kind","label","language","mode","oncuechange"]},TextTrackCue:{title:"TextTrackCue",type:"object",properties:{endTime:{type:"number",title:"endTime"},id:{type:"string",title:"id"},onenter:{type:["null","object"],title:"onenter"},onexit:{type:["null","object"],title:"onexit"},pauseOnExit:{type:"boolean",title:"pauseOnExit"},startTime:{type:"number",title:"startTime"},track:{anyOf:[{$ref:"#/definitions/TextTrack"},{type:"null"}],title:"track"}},required:["endTime","id","onenter","onexit","pauseOnExit","startTime","track"]},TextTrackKind:{title:"TextTrackKind",enum:["captions","chapters","descriptions","metadata","subtitles"],type:"string"},TextTrackMode:{title:"TextTrackMode",enum:["disabled","hidden","showing"],type:"string"},ImageData:{title:"ImageData",type:"object",properties:{colorSpace:{$ref:"#/definitions/PredefinedColorSpace",title:"colorSpace"},data:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Uint8ClampedArray",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"],title:"data"},height:{type:"number",title:"height"},width:{type:"number",title:"width"}},required:["colorSpace","data","height","width"]},PredefinedColorSpace:{title:"PredefinedColorSpace",enum:["display-p3","srgb"],type:"string"},"__esri.CompressedTextureData":{description:"The definition of compressed texture data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#CompressedTextureData Read more...}",title:"__esri.CompressedTextureData",type:"object",properties:{type:{type:"string",const:"encoded-mesh-texture",title:"type"},encoding:{type:"string",const:"image/ktx2",title:"encoding"},data:{type:"object",additionalProperties:!1,patternProperties:{"^[0-9]+$":{type:"number"}},properties:{BYTES_PER_ELEMENT:{type:"number",title:"BYTES_PER_ELEMENT"},buffer:{$ref:"#/definitions/ArrayBufferLike",title:"buffer"},byteLength:{type:"number",title:"byteLength"},byteOffset:{type:"number",title:"byteOffset"},length:{type:"number",title:"length"},"__@toStringTag@16125":{type:"string",const:"Uint8Array",title:"__@toStringTag@16125"}},required:["BYTES_PER_ELEMENT","__@toStringTag@16125","buffer","byteLength","byteOffset","length"],title:"data"}},required:["data","encoding","type"]},"__esri.SeparableWrapModes":{description:"A separable wrap configuration for horizontal and vertical wrapping modes.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#SeparableWrapModes Read more...}",title:"__esri.SeparableWrapModes",type:"object",properties:{horizontal:{enum:["clamp","mirror","repeat"],type:"string",title:"horizontal"},vertical:{enum:["clamp","mirror","repeat"],type:"string",title:"vertical"}},required:["horizontal","vertical"]},"__esri.MeshTextureTransform":{title:"__esri.MeshTextureTransform",type:"object",properties:{offset:{description:"The offset of the UV coordinate origin as a factor of the texture dimensions.",default:"[0, 0]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#offset Read more...}",type:"array",items:{type:"number"},title:"offset"},rotation:{description:"The rotation of the UV coordinates in degrees, counter-clockwise around the origin.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#rotation Read more...}",type:"number",title:"rotation"},scale:{description:"The scale factor applied to the components of the UV coordinates.",default:"[1, 1]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTextureTransform.html#scale Read more...}",type:"array",items:{type:"number"},title:"scale"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","offset","rotation","scale"]},"__esri.MeshMaterialMetallicRoughness":{title:"__esri.MeshMaterialMetallicRoughness",type:"object",properties:{metallic:{description:"Specifies how much the material behaves like a metal.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallic Read more...}",type:"number",title:"metallic"},roughness:{description:"Indicates how rough the surface of the material is.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#roughness Read more...}",type:"number",title:"roughness"},emissiveColor:{description:"Specifies a single, uniform emissive color for the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html MeshComponent}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveColor Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"emissiveColor"},emissiveTexture:{description:"Specifies a texture from which to get emissive color information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"emissiveTexture"},emissiveTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the emissive texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#emissiveTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"emissiveTextureTransform"},metallicRoughnessTexture:{description:"Specifies a texture from which to get the combined metallic/roughness information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#metallicRoughnessTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"metallicRoughnessTexture"},occlusionTexture:{description:"Allows to specify a texture to get the occlusion information from.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"occlusionTexture"},occlusionTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the occlusion texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html#occlusionTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"occlusionTextureTransform"},alphaCutoff:{description:"Specifies how transparency on the object is handled.",default:"0.5\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaCutoff Read more...}",type:"number",title:"alphaCutoff"},alphaMode:{description:"Specifies how transparency on the object is handled.",default:'"auto"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaMode Read more...}',enum:["auto","blend","mask","opaque"],type:"string",title:"alphaMode"},doubleSided:{description:"Specifies whether both sides of each triangle are displayed, or only the front sides.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#doubleSided Read more...}",type:"boolean",title:"doubleSided"},color:{description:"Specifies a single, uniform color for the mesh component.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#color Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},colorTexture:{description:"Specifies a texture from which to get color information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"colorTexture"},colorTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the color texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"colorTextureTransform"},normalTexture:{description:"Specifies a texture from which to get normal information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTexture Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTexture"},{type:"null"}],title:"normalTexture"},normalTextureTransform:{description:"A transformation of UV mesh coordinates used to sample the normal texture.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTextureTransform Read more...}",anyOf:[{$ref:"#/definitions/__esri.MeshTextureTransform"},{type:"null"}],title:"normalTextureTransform"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["alphaCutoff","alphaMode","declaredClass","destroyed","doubleSided","initialized","metallic","roughness"]},"__esri.MeshTransform":{title:"__esri.MeshTransform",type:"object",properties:{rotationAngle:{description:"Rotation angle in degrees.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAngle Read more...}",type:"number",title:"rotationAngle"},rotationAxis:{description:"Axis of rotation.",default:"[0, 0, 1]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#rotationAxis Read more...}",type:"array",items:{type:"number"},title:"rotationAxis"},scale:{description:"Scale.",default:"[1, 1, 1]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#scale Read more...}",type:"array",items:{type:"number"},title:"scale"},translation:{description:"Translation.",default:"[0, 0, 0]\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTransform.html#translation Read more...}",type:"array",items:{type:"number"},title:"translation"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","rotationAngle","rotationAxis","scale","translation"]},"__esri.MeshGeoreferencedVertexSpace":{title:"__esri.MeshGeoreferencedVertexSpace",type:"object",properties:{origin:{description:"Origin of the vertex space.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshGeoreferencedVertexSpace.html#origin Read more...}",anyOf:[{type:"array",items:{type:"number"}},{type:"null"}],title:"origin"},type:{description:"Type of the vertex space.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshGeoreferencedVertexSpace.html#type Read more...}",type:"string",const:"georeferenced",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.MeshLocalVertexSpace":{title:"__esri.MeshLocalVertexSpace",type:"object",properties:{origin:{description:"Origin of the vertex space.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshLocalVertexSpace.html#origin Read more...}",type:"array",items:{type:"number"},title:"origin"},type:{description:"Type of the vertex space.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshLocalVertexSpace.html#type Read more...}",type:"string",const:"local",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","origin","type"]},"__esri.TimeExtent":{title:"__esri.TimeExtent",type:"object",properties:{end:{description:"The end time of the time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html#end Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"end"},start:{description:"The start time of the time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html#start Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"start"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.FeatureReductionBinning":{title:"__esri.FeatureReductionBinning",type:"object",properties:{fixedBinLevel:{description:"The fixed geohash level used to create bins.",default:"3\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#fixedBinLevel Read more...}",type:["null","number"],title:"fixedBinLevel"},labelsVisible:{description:"Indicates whether to display labels for the bins.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},maxScale:{description:"Defines the maximum {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#scale view scale} at which binning is enabled.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#maxScale Read more...}",type:"number",title:"maxScale"},popupEnabled:{description:"Indicates whether to display a popup when a user clicks or touches a bin.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},type:{description:"The feature reduction type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#type Read more...}",type:"string",const:"binning",title:"type"},fields:{description:"An array of aggregate fields that summarize layer {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields fields}\nfrom features contained within each bin.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AggregateField"},title:"fields"},labelingInfo:{description:"Defines labels for bins as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},popupTemplate:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html PopupTemplate} to apply to bins.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},renderer:{description:"The renderer used to style the bins.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionBinning.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","fields","initialized","labelsVisible","maxScale","popupEnabled","type"]},"__esri.AggregateField":{title:"__esri.AggregateField",type:"object",properties:{alias:{description:"The display name that describes the aggregate field in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend},\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html Popup}, and other UI elements.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#alias Read more...}",type:["null","string"],title:"alias"},isAutoGenerated:{description:"Indicates whether the field was created internally by the JS API's rendering engine for\ndefault {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html FeatureReductionCluster} visualizations.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#isAutoGenerated Read more...}",type:"boolean",title:"isAutoGenerated"},name:{description:"The name of the aggregate field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#name Read more...}",type:"string",title:"name"},onStatisticField:{description:"The name of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields layer field} to summarize with the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#statisticType statisticType}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#onStatisticField Read more...}",type:"string",title:"onStatisticField"},statisticType:{description:"Defines the type of statistic used to aggregate data returned from {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#onStatisticField onStatisticField}\nor {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#onStatisticExpression onStatisticExpression}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#statisticType Read more...}",enum:["avg","avg_angle","count","max","min","mode","sum"],type:"string",title:"statisticType"},onStatisticExpression:{$ref:"#/definitions/__esri.supportExpressionInfo",description:"An object containing an {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression, which evaluates for each child feature represented\nby the aggregate graphic.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-AggregateField.html#onStatisticExpression Read more...}",title:"onStatisticExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","isAutoGenerated","name","onStatisticExpression","onStatisticField","statisticType"]},"__esri.supportExpressionInfo":{title:"__esri.supportExpressionInfo",type:"object",properties:{expression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following\nthe specification defined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ExpressionInfo.html#expression Read more...}",type:"string",title:"expression"},returnType:{description:"Indicates the return type of the Arcade expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ExpressionInfo.html#returnType Read more...}",enum:["number","string"],type:"string",title:"returnType"},title:{description:"The title used to describe the value returned by the expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-ExpressionInfo.html#title Read more...}",type:["null","string"],title:"title"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","expression","initialized","returnType"]},"__esri.LabelClass":{title:"__esri.LabelClass",type:"object",properties:{allowOverrun:{description:"Specifies whether or not a polyline label can overrun the feature being labeled.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#allowOverrun Read more...}",type:"boolean",title:"allowOverrun"},deconflictionStrategy:{description:"Defines how labels should be placed relative to one another.",default:'"static"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#deconflictionStrategy Read more...}',enum:["none","static"],type:"string",title:"deconflictionStrategy"},labelExpression:{description:"Defines the labels for a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html MapImageLayer}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelExpression Read more...}",type:["null","string"],title:"labelExpression"},labelPlacement:{description:"The position of the label.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelPlacement Read more...}",enum:["above-after","above-along","above-before","above-center","above-end","above-left","above-right","above-start","always-horizontal","below-after","below-along","below-before","below-center","below-end","below-left","below-right","below-start","center-after","center-along","center-before","center-center","center-end","center-left","center-right","center-start"],type:"string",title:"labelPlacement"},labelPosition:{description:"Specifies the orientation of the label position of a single line polyline label.",default:'"curved"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelPosition Read more...}',enum:["curved","parallel"],type:"string",title:"labelPosition"},maxScale:{description:"The maximum scale (most zoomed in) at which labels are visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which labels are visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#minScale Read more...}",type:"number",title:"minScale"},repeatLabel:{description:"Indicates whether or not to repeat the label along the polyline feature.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#repeatLabel Read more...}",type:"boolean",title:"repeatLabel"},useCodedValues:{description:"Indicates whether to use domain names if the fields in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelExpression labelExpression}\nor {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelExpressionInfo labelExpressionInfo} have domains.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#useCodedValues Read more...}",type:"boolean",title:"useCodedValues"},where:{description:"A SQL where clause used to determine the features to which the label class should be applied.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#where Read more...}",type:["null","string"],title:"where"},labelExpressionInfo:{description:"Defines the labels for a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html FeatureLayer}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#labelExpressionInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.LabelClassLabelExpressionInfo"},{type:"null"}],title:"labelExpressionInfo"},repeatLabelDistance:{description:"The size in points of the distance between labels on a polyline.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#repeatLabelDistance Read more...}",type:["null","number"],title:"repeatLabelDistance"},symbol:{description:"Defines the symbol used for rendering the label.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html#symbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.TextSymbol"}],title:"symbol"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["allowOverrun","declaredClass","deconflictionStrategy","destroyed","initialized","labelPlacement","labelPosition","maxScale","minScale","repeatLabel","symbol","useCodedValues"]},"__esri.LabelClassLabelExpressionInfo":{title:"__esri.LabelClassLabelExpressionInfo",type:"object",properties:{expression:{type:["null","string"],title:"expression"},title:{type:["null","string"],title:"title"}}},"__esri.LabelSymbol3D":{title:"__esri.LabelSymbol3D",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LabelSymbol3D.html#type Read more...}",type:"string",const:"label-3d",title:"type"},callout:{description:"Settings for adding a callout visualization to the symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LabelSymbol3D.html#callout Read more...}",anyOf:[{$ref:"#/definitions/__esri.Callout3D"},{type:"null"}],title:"callout"},symbolLayers:{$ref:"#/definitions/__esri.Collection<__esri.TextSymbol3DLayer>",description:"A Collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3DLayer.html Symbol3DLayer} objects\nused to visualize the graphic or feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LabelSymbol3D.html#symbolLayers Read more...}",title:"symbolLayers"},verticalOffset:{description:"Shifts the symbol along the vertical world axis by a given height.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LabelSymbol3D.html#verticalOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.Symbol3DVerticalOffset"},{type:"null"}],title:"verticalOffset"},styleOrigin:{description:"The origin of the style from which the symbol was originally referenced.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3D.html#styleOrigin Read more...}",anyOf:[{$ref:"#/definitions/__esri.StyleOrigin"},{type:"null"}],title:"styleOrigin"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","symbolLayers","type"]},"__esri.Callout3D":{title:"__esri.Callout3D",type:"object",properties:{destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.Collection<__esri.TextSymbol3DLayer>":{title:"__esri.Collection<__esri.TextSymbol3DLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.Symbol3DVerticalOffset":{title:"__esri.Symbol3DVerticalOffset",type:"object",properties:{maxWorldLength:{description:"The maximum vertical symbol offset in world units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-Symbol3DVerticalOffset.html#maxWorldLength Read more...}",type:["null","number"],title:"maxWorldLength"},minWorldLength:{description:"The minimum vertical symbol offset in world units.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-Symbol3DVerticalOffset.html#minWorldLength Read more...}",type:"number",title:"minWorldLength"},screenLength:{description:"Vertical symbol offset in screen size.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-Symbol3DVerticalOffset.html#screenLength Read more...}",type:"number",title:"screenLength"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","minWorldLength","screenLength"]},"__esri.StyleOrigin":{title:"__esri.StyleOrigin",type:"object",properties:{name:{description:"Name of the symbol in the style referenced by styleName or styleUrl.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-StyleOrigin.html#name Read more...}",type:["null","string"],title:"name"},styleName:{description:"The well-known esri-provided style, such as `EsriThematicShapesStyle`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-StyleOrigin.html#styleName Read more...}",type:["null","string"],title:"styleName"},styleUrl:{description:"A url to a style definition.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-StyleOrigin.html#styleUrl Read more...}",type:["null","string"],title:"styleUrl"},portal:{description:"The portal of the style origin.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-support-StyleOrigin.html#portal Read more...}",anyOf:[{$ref:"#/definitions/__esri.Portal"},{type:"null"}],title:"portal"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.Portal":{title:"__esri.Portal",type:"object",properties:{access:{description:"The access level of the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#access Read more...}",anyOf:[{enum:["private","public"],type:"string"},{type:"null"}],title:"access"},allSSL:{description:"When `true`, access to the organization's Portal resources must occur over SSL.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#allSSL Read more...}",type:"boolean",title:"allSSL"},authMode:{description:"The authentication mode for handling authentication when the user attempts to\naccess a secure resource.",default:'"auto"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authMode Read more...}',enum:["anonymous","auto","immediate","no-prompt"],type:"string",title:"authMode"},authorizedCrossOriginDomains:{description:"Array of trusted servers to send credentials to when making Cross-Origin Resource Sharing (CORS) requests to access services\nsecured with web-tier authentication.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authorizedCrossOriginDomains Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"authorizedCrossOriginDomains"},basemapGalleryGroupQuery:{description:"The query that defines the basemaps that should be displayed in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html BasemapGallery} when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps useVectorBasemaps} is not true.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery Read more...}",type:["null","string"],title:"basemapGalleryGroupQuery"},basemapGalleryGroupQuery3D:{description:"The query that defines the 3D basemaps that should be displayed in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html BasemapGallery}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery3D Read more...}",type:["null","string"],title:"basemapGalleryGroupQuery3D"},bingKey:{description:"The Bing key to use for web maps using Bing Maps.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#bingKey Read more...}",type:["null","string"],title:"bingKey"},canListApps:{description:"Indicates whether an organization can list applications in the marketplace.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListApps Read more...}",type:"boolean",title:"canListApps"},canListData:{description:"Indicates whether an organization can list data services in the marketplace.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListData Read more...}",type:"boolean",title:"canListData"},canListPreProvisionedItems:{description:"Indicates whether an organization can list pre-provisioned items in the marketplace.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListPreProvisionedItems Read more...}",type:"boolean",title:"canListPreProvisionedItems"},canProvisionDirectPurchase:{description:"Indicates whether an organization can provision direct purchases in the marketplace without customer request.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canProvisionDirectPurchase Read more...}",type:"boolean",title:"canProvisionDirectPurchase"},canSearchPublic:{description:"When `true`, the organization's public items, groups and users are included in search queries.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSearchPublic Read more...}",type:"boolean",title:"canSearchPublic"},canShareBingPublic:{description:"The Bing key can be shared to the public and is returned as part of a portal's description call (`/sharing/rest/portals/<orgid>`).",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canShareBingPublic Read more...}",type:"boolean",title:"canShareBingPublic"},canSharePublic:{description:"When `true`, members of the organization can share resources outside the organization.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSharePublic Read more...}",type:"boolean",title:"canSharePublic"},canSignInArcGIS:{description:"Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the ArcGIS sign in.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInArcGIS Read more...}",type:"boolean",title:"canSignInArcGIS"},canSignInIDP:{description:"Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the enterprise sign in.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInIDP Read more...}",type:"boolean",title:"canSignInIDP"},colorSetsGroupQuery:{description:"The query that identifies the group containing the color sets used for rendering in the map viewer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#colorSetsGroupQuery Read more...}",type:["null","string"],title:"colorSetsGroupQuery"},commentsEnabled:{description:"Indicates whether to allow the organization to disable commenting.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#commentsEnabled Read more...}",type:"boolean",title:"commentsEnabled"},culture:{description:"The default locale (language and country) information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#culture Read more...}",type:["null","string"],title:"culture"},customBaseUrl:{description:"The custom base URL for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#customBaseUrl Read more...}",type:["null","string"],title:"customBaseUrl"},default3DBasemapQuery:{description:"The query that defines the default 3d basemap to use in scene views for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#default3DBasemapQuery Read more...}",type:["null","string"],title:"default3DBasemapQuery"},defaultBasemap:{description:"The default basemap to use for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultBasemap Read more...}",anyOf:[{$ref:"#/definitions/__esri.Basemap"},{type:"null"}],title:"defaultBasemap"},defaultDevBasemap:{description:"The default developer basemap to use for the portal when an {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#apiKey apiKey} is defined.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultDevBasemap Read more...}",anyOf:[{$ref:"#/definitions/__esri.Basemap"},{type:"null"}],title:"defaultDevBasemap"},defaultVectorBasemap:{description:"The default vector basemap to use for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultVectorBasemap Read more...}",anyOf:[{$ref:"#/definitions/__esri.Basemap"},{type:"null"}],title:"defaultVectorBasemap"},description:{description:"A description of the organization/portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#description Read more...}",type:["null","string"],title:"description"},devBasemapGalleryGroupQuery:{description:"The query that defines the basemaps that should be displayed in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html BasemapGallery} when an {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#apiKey apiKey} is defined.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#devBasemapGalleryGroupQuery Read more...}",type:["null","string"],title:"devBasemapGalleryGroupQuery"},eueiEnabled:{description:"Boolean value indicating whether to opt-in to the [Esri\nUser Experience Improvement (EUEI) program](https://doc.arcgis.com/en/arcgis-online/reference/faq.htm#ESRI_QUESTIONANSWER_AED97F28DCD84F7682623C2FA9E5CE49).",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#eueiEnabled Read more...}",type:["null","boolean"],title:"eueiEnabled"},featuredGroups:{description:"The featured groups for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredGroups Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.PortalFeaturedGroups"}},{type:"null"}],title:"featuredGroups"},featuredItemsGroupQuery:{description:"The query that defines the featured group.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredItemsGroupQuery Read more...}",type:["null","string"],title:"featuredItemsGroupQuery"},galleryTemplatesGroupQuery:{description:"The query that identifies the group containing features items for the gallery.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#galleryTemplatesGroupQuery Read more...}",type:["null","string"],title:"galleryTemplatesGroupQuery"},hasCategorySchema:{description:"Indicates whether the organization has content categories.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasCategorySchema Read more...}",type:"boolean",title:"hasCategorySchema"},hasClassificationSchema:{description:"Indicates whether the organization has classification schema.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasClassificationSchema Read more...}",type:"boolean",title:"hasClassificationSchema"},helperServices:{description:"This class contains properties to obtain information for various web services available on the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#helperServices Read more...}",title:"helperServices"},homePageFeaturedContent:{description:"The group that contains featured content to be displayed on the home page.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContent Read more...}",type:["null","string"],title:"homePageFeaturedContent"},homePageFeaturedContentCount:{description:"The number of featured items that can be displayed on the home page.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContentCount Read more...}",type:["null","number"],title:"homePageFeaturedContentCount"},httpPort:{description:"The port used by the portal for HTTP communication.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpPort Read more...}",type:["null","number"],title:"httpPort"},httpsPort:{description:"The port used by the portal for HTTPS communication.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpsPort Read more...}",type:["null","number"],title:"httpsPort"},id:{description:"The id of the organization that owns this portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#id Read more...}",type:["null","string"],title:"id"},ipCntryCode:{description:"The country code of the calling IP (ArcGIS Online only).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#ipCntryCode Read more...}",type:["null","string"],title:"ipCntryCode"},isOrganization:{description:"Indicates whether the portal is an organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isOrganization Read more...}",type:"boolean",title:"isOrganization"},isPortal:{description:"Indicates if the portal is on-premises.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isPortal Read more...}",type:"boolean",title:"isPortal"},isReadOnly:{description:"Indicates if the portal is in read-only mode.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isReadOnly Read more...}",type:"boolean",title:"isReadOnly"},layerTemplatesGroupQuery:{description:"The query that identifies the group containing editing templates.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#layerTemplatesGroupQuery Read more...}",type:["null","string"],title:"layerTemplatesGroupQuery"},loaded:{description:"Indicates whether the portal's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},maxTokenExpirationMinutes:{description:"The maximum validity in minutes of tokens issued for users of the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#maxTokenExpirationMinutes Read more...}",type:["null","number"],title:"maxTokenExpirationMinutes"},name:{description:"Name of the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#name Read more...}",type:["null","string"],title:"name"},portalHostname:{description:"URL of the portal host.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalHostname Read more...}",type:["null","string"],title:"portalHostname"},portalMode:{description:"The portal mode.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalMode Read more...}",anyOf:[{enum:["multitenant","singletenant"],type:"string"},{type:"null"}],title:"portalMode"},portalProperties:{description:'Properties specific to the organization, for example the "contact us" link.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalProperties Read more...}',title:"portalProperties"},recycleBinEnabled:{description:"Indicates whether the recycle bin is enabled for the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#recycleBinEnabled Read more...}",type:"boolean",title:"recycleBinEnabled"},region:{description:"The region for the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#region Read more...}",type:["null","string"],title:"region"},restUrl:{description:'The REST URL for the portal, for example "https://www.arcgis.com/sharing/rest" for ArcGIS Online\nand "https://www.example.com/arcgis/sharing/rest" for your in-house portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#restUrl Read more...}',type:"string",title:"restUrl"},rotatorPanels:{description:"Custom HTML for the home page.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#rotatorPanels Read more...}",anyOf:[{type:"array",items:{}},{type:"null"}],title:"rotatorPanels"},showHomePageDescription:{description:"Indicates whether the description of your organization displays on the home page.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#showHomePageDescription Read more...}",type:"boolean",title:"showHomePageDescription"},sourceJSON:{description:"The JSON used to create the property values when the `Portal` is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#sourceJSON Read more...}",title:"sourceJSON"},supportsHostedServices:{description:"Indicates whether hosted services are supported.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#supportsHostedServices Read more...}",type:"boolean",title:"supportsHostedServices"},symbolSetsGroupQuery:{description:"The query that defines the symbols sets.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#symbolSetsGroupQuery Read more...}",type:["null","string"],title:"symbolSetsGroupQuery"},templatesGroupQuery:{description:"The query that defines the collection of templates that will appear in the template\ngallery.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#templatesGroupQuery Read more...}",type:["null","string"],title:"templatesGroupQuery"},thumbnailUrl:{description:"The URL to the thumbnail of the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#thumbnailUrl Read more...}",type:["null","string"],title:"thumbnailUrl"},units:{description:"Sets the units of measure for the organization's users.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#units Read more...}",anyOf:[{enum:["english","metric"],type:"string"},{type:"null"}],title:"units"},url:{description:"The URL to the portal instance.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#url Read more...}",type:"string",title:"url"},urlKey:{description:"The prefix selected by the organization's administrator to be used with the customBaseURL.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#urlKey Read more...}",type:["null","string"],title:"urlKey"},use3dBasemaps:{description:"When `false`, 3D basemaps are hidden from the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html BasemapGallery}, regardless\nof the type of the view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#use3dBasemaps Read more...}",type:"boolean",title:"use3dBasemaps"},useDefault3dBasemap:{description:"When `false`, The default 3d basemap is not used in the SceneViewer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useDefault3dBasemap Read more...}",type:"boolean",title:"useDefault3dBasemap"},user:{description:"Information representing a registered user of the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#user Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalUser"},{type:"null"}],title:"user"},useStandardizedQuery:{description:"When `true`, only simple where clauses that are compliant with SQL92 can be used when querying layers and tables.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useStandardizedQuery Read more...}",type:"boolean",title:"useStandardizedQuery"},useVectorBasemaps:{description:"When `true`, the organization has opted in to use the vector tile basemaps,\nand (a) {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery vectorBasemapGalleryGroupQuery} should\nbe used instead of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery basemapGalleryGroupQuery}, while\n(b) {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultVectorBasemap defaultVectorBasemap} should be used instead of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultBasemap defaultBasemap}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps Read more...}",type:"boolean",title:"useVectorBasemaps"},vectorBasemapGalleryGroupQuery:{description:"The query that defines the vector tiles basemaps that should be displayed in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html BasemapGallery} when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps useVectorBasemaps} is true.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery Read more...}",type:["null","string"],title:"vectorBasemapGalleryGroupQuery"},created:{description:"Date the organization was created.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#created Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"created"},defaultExtent:{description:"The default extent to use for the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"defaultExtent"},modified:{description:"Date the organization was last modified.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#modified Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"modified"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["allSSL","authMode","canListApps","canListData","canListPreProvisionedItems","canProvisionDirectPurchase","canSearchPublic","canShareBingPublic","canSharePublic","canSignInArcGIS","canSignInIDP","commentsEnabled","declaredClass","destroyed","hasCategorySchema","hasClassificationSchema","helperServices","initialized","isOrganization","isPortal","isReadOnly","loadStatus","loadWarnings","loaded","portalProperties","recycleBinEnabled","restUrl","showHomePageDescription","sourceJSON","supportsHostedServices","url","use3dBasemaps","useDefault3dBasemap","useStandardizedQuery","useVectorBasemaps"]},"__esri.Basemap":{title:"__esri.Basemap",type:"object",properties:{id:{description:"An identifier used to refer to the basemap when referencing it elsewhere.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#id Read more...}",type:["null","string"],title:"id"},loaded:{description:"Indicates whether the basemap instance has loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},thumbnailUrl:{description:"The URL pointing to an image that represents the basemap.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#thumbnailUrl Read more...}",type:["null","string"],title:"thumbnailUrl"},title:{description:"The title of the basemap.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#title Read more...}",type:"string",title:"title"},baseLayers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of tile layers that make up the basemap's features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#baseLayers Read more...}",title:"baseLayers"},portalItem:{description:"The portal item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#portalItem Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalItem"},{type:"null"}],title:"portalItem"},referenceLayers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of reference layers which are displayed over the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#baseLayers base layers} and all other layers in the map.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#referenceLayers Read more...}",title:"referenceLayers"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the Basemap.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#spatialReference Read more...}",title:"spatialReference"},style:{description:"The style of the basemap from the [basemap styles service (v2)](https://developers.arcgis.com/rest/basemap-styles/).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#style Read more...}",anyOf:[{$ref:"#/definitions/__esri.BasemapStyle"},{type:"null"}],title:"style"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["baseLayers","declaredClass","destroyed","initialized","loadStatus","loadWarnings","loaded","referenceLayers","spatialReference","title"]},"__esri.Collection<__esri.Layer>":{title:"__esri.Collection<__esri.Layer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.PortalItem":{title:"__esri.PortalItem",type:"object",properties:{access:{description:"Indicates the level of access to this item: `private`, `shared`, `org`, or `public`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#access Read more...}",enum:["org","private","public","shared"],type:"string",title:"access"},accessInformation:{description:"Information on the source of the item and its copyright status.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#accessInformation Read more...}",type:["null","string"],title:"accessInformation"},apiKey:{description:"An authorization string used to access the portal item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#apiKey Read more...}",type:["null","string"],title:"apiKey"},applicationProxies:{description:"Contains an array of objects containing proxy information for premium platform services.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.PortalItemApplicationProxies"}},{type:"null"}],title:"applicationProxies"},avgRating:{description:"Average rating.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#avgRating Read more...}",type:["null","number"],title:"avgRating"},categories:{description:"An array of organization categories that are set on the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#categories Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"categories"},classification:{description:"The classification information for the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#classification Read more...}",anyOf:[{$ref:"#/definitions/HashMap<any>"},{type:"null"}],title:"classification"},culture:{description:"The item's locale information (language and country).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#culture Read more...}",type:["null","string"],title:"culture"},description:{description:"The detailed description of the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#description Read more...}",type:["null","string"],title:"description"},groupCategories:{description:"An array of group categories set on the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#groupCategories Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"groupCategories"},id:{description:"The unique id for the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#id Read more...}",type:["null","string"],title:"id"},isLayer:{description:"Indicates whether a layer can be created from this item using [Layer.fromPortalItem()](esri-layers-Layer.html#fromPortalItem).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#isLayer Read more...}",type:"boolean",title:"isLayer"},isOrgItem:{description:"Indicates whether this item and the user whose credential was used to fetch this item belong\nto the same ArcGIS Enterprise Portal or ArcGIS Online Organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#isOrgItem Read more...}",type:"boolean",title:"isOrgItem"},itemControl:{description:"Indicates whether an item can be updated and deleted.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemControl Read more...}",anyOf:[{enum:["admin","null","update"],type:"string"},{type:"null"}],title:"itemControl"},itemPageUrl:{description:"The URL to the [Item page](https://doc.arcgis.com/en/arcgis-online/manage-data/item-details.htm) on the portal.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemPageUrl Read more...}",type:["null","string"],title:"itemPageUrl"},itemUrl:{description:"The URL to the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemUrl Read more...}",type:["null","string"],title:"itemUrl"},licenseInfo:{description:"Information on license or restrictions related to the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#licenseInfo Read more...}",type:["null","string"],title:"licenseInfo"},loaded:{description:"Indicates whether the item's resources have loaded from the portal.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},name:{description:"The name of the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#name Read more...}",type:["null","string"],title:"name"},numComments:{description:"Number of comments on the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numComments Read more...}",type:["null","number"],title:"numComments"},numRatings:{description:"Number of ratings on the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numRatings Read more...}",type:["null","number"],title:"numRatings"},numViews:{description:"Number of views on the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numViews Read more...}",type:["null","number"],title:"numViews"},owner:{description:"The username of the user who owns this item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#owner Read more...}",type:["null","string"],title:"owner"},ownerFolder:{description:"The ID of the folder in which the owner has stored the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#ownerFolder Read more...}",type:["null","string"],title:"ownerFolder"},screenshots:{description:"An array of string URLs.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#screenshots Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"screenshots"},size:{description:"The size of the item (in bytes).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#size Read more...}",type:["null","number"],title:"size"},snippet:{description:"A summary description of the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#snippet Read more...}",type:["null","string"],title:"snippet"},sourceJSON:{description:"The JSON used to create the property values when the `PortalItem` is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#sourceJSON Read more...}",title:"sourceJSON"},tags:{description:"User defined tags that describe the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#tags Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"tags"},thumbnailUrl:{description:"The URL to the thumbnail used for the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#thumbnailUrl Read more...}",type:["null","string"],title:"thumbnailUrl"},title:{description:"The title for the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#title Read more...}",type:["null","string"],title:"title"},type:{description:"The GIS content type of this item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#type Read more...}",type:["null","string"],title:"type"},typeKeywords:{description:"Type keywords that describe the type of content of this item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#typeKeywords Read more...}",type:"array",items:{type:"string"},title:"typeKeywords"},url:{description:"The service URL of this item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#url Read more...}",type:["null","string"],title:"url"},created:{description:"The date the item was created.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#created Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"created"},extent:{description:"The geographic extent, or bounding rectangle, of the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#extent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"extent"},modified:{description:"The date the item was last modified.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#modified Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"modified"},portal:{$ref:"#/definitions/__esri.Portal",description:"The portal that contains the item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#portal Read more...}",title:"portal"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["access","declaredClass","destroyed","initialized","isLayer","isOrgItem","loadStatus","loadWarnings","loaded","portal","sourceJSON","typeKeywords"]},"__esri.PortalItemApplicationProxies":{title:"__esri.PortalItemApplicationProxies",type:"object",properties:{sourceUrl:{type:"string",title:"sourceUrl"},proxyUrl:{type:"string",title:"proxyUrl"},proxyId:{type:"string",title:"proxyId"}},required:["proxyId","proxyUrl","sourceUrl"]},"HashMap<any>":{title:"HashMap<any>",type:"object"},"__esri.BasemapStyle":{title:"__esri.BasemapStyle",type:"object",properties:{apiKey:{description:"An authorization string used to access a resource or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#apiKey Read more...}",type:["null","string"],title:"apiKey"},id:{description:"The id of the basemap style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#id Read more...}",type:["null","string"],title:"id"},language:{description:"The language of the place labels in the basemap style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#language Read more...}",type:["null","string"],title:"language"},places:{description:"Indicates whether to display {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-places.html places} with the basemap style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#places Read more...}",anyOf:[{enum:["all","attributed","none"],type:"string"},{type:"null"}],title:"places"},serviceUrl:{description:"The [URL](https://developers.arcgis.com/rest/basemap-styles/#service-url) to the basemap styles service.",default:'"https://basemapstyles-api.arcgis.com/arcgis/rest/services/styles/v2"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#serviceUrl Read more...}',type:"string",title:"serviceUrl"},worldview:{description:"Displays country boundaries and labels based on a specific view of a country.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#worldview Read more...}",type:["null","string"],title:"worldview"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","serviceUrl"]},"__esri.PortalFeaturedGroups":{title:"__esri.PortalFeaturedGroups",type:"object",properties:{owner:{type:"string",title:"owner"},title:{type:"string",title:"title"}},required:["owner","title"]},"__esri.PortalUser":{title:"__esri.PortalUser",type:"object",properties:{access:{description:"Indicates the level of access of the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#access Read more...}",anyOf:[{enum:["org","private","public"],type:"string"},{type:"null"}],title:"access"},culture:{description:"The culture information for the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#culture Read more...}",type:["null","string"],title:"culture"},description:{description:"A description of the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#description Read more...}",type:["null","string"],title:"description"},email:{description:"The user's e-mail address.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#email Read more...}",type:["null","string"],title:"email"},fullName:{description:"The user's full name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#fullName Read more...}",type:["null","string"],title:"fullName"},orgId:{description:"The ID of the organization the user belongs to.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#orgId Read more...}",type:["null","string"],title:"orgId"},portal:{$ref:"#/definitions/__esri.Portal",description:"The portal associated with the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#portal Read more...}",title:"portal"},preferredView:{description:"The user's preferred view for content, either web or GIS.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#preferredView Read more...}",type:["null","string"],title:"preferredView"},privileges:{description:"The user's privileges based on their user type or role in their organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#privileges Read more...}",type:"array",items:{type:"string"},title:"privileges"},region:{description:"The user preferred region, used to set the featured maps on the home page,\ncontent in the gallery, and the default extent of new maps in the Viewer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#region Read more...}",type:["null","string"],title:"region"},role:{description:"Defines the user's role in the organization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#role Read more...}",anyOf:[{enum:["org_admin","org_publisher","org_user"],type:"string"},{type:"null"}],title:"role"},roleId:{description:"The ID of the user's role.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#roleId Read more...}",type:["null","string"],title:"roleId"},sourceJSON:{description:"The JSON used to create the property values when the `PortalUser` is created.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#sourceJSON Read more...}",title:"sourceJSON"},thumbnailUrl:{description:"The URL to the thumbnail image for the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#thumbnailUrl Read more...}",type:["null","string"],title:"thumbnailUrl"},units:{description:"The user's personal units of measure setting.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#units Read more...}",anyOf:[{enum:["english","metric"],type:"string"},{type:"null"}],title:"units"},userContentUrl:{description:"The URL for the user's content.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#userContentUrl Read more...}",type:["null","string"],title:"userContentUrl"},username:{description:"The username of the user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#username Read more...}",type:"string",title:"username"},created:{description:"The date the user was created.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#created Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"created"},modified:{description:"The date the user was last modified.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html#modified Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"modified"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","portal","privileges","sourceJSON","username"]},"__esri.TextSymbol":{title:"__esri.TextSymbol",type:"object",properties:{angle:{description:"The angle of the text.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#angle Read more...}",type:"number",title:"angle"},borderLineSize:{description:"The border size or width of the label's bounding box.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#borderLineSize Read more...}",type:["null","number"],title:"borderLineSize"},horizontalAlignment:{description:"Adjusts the horizontal alignment of the text in multi-lines.",default:'"center"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#horizontalAlignment Read more...}',enum:["center","left","right"],type:"string",title:"horizontalAlignment"},kerning:{description:"Determines whether to adjust the spacing between characters in the text string.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#kerning Read more...}",type:"boolean",title:"kerning"},lineHeight:{description:"The height of the space between each line of text.",default:"1.0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#lineHeight Read more...}",type:"number",title:"lineHeight"},rotated:{description:"Determines whether every character in the text string is rotated.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#rotated Read more...}",type:"boolean",title:"rotated"},text:{description:"The text string to display in the view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#text Read more...}",type:"string",title:"text"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#type Read more...}",type:"string",const:"text",title:"type"},verticalAlignment:{description:"Adjusts the vertical alignment of the text.",default:'"baseline"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#verticalAlignment Read more...}',enum:["baseline","bottom","middle","top"],type:"string",title:"verticalAlignment"},backgroundColor:{description:"The background color of the label's bounding box.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#backgroundColor Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"backgroundColor"},borderLineColor:{description:"The border color of the label's bounding box.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#borderLineColor Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"borderLineColor"},font:{$ref:"#/definitions/__esri.Font",description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html Font} used to style the text.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#font Read more...}",title:"font"},haloColor:{description:"The color of the text symbol's halo.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#haloColor Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"haloColor"},haloSize:{description:"The size in points of the text symbol's halo.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#haloSize Read more...}",type:["null","number"],title:"haloSize"},lineWidth:{description:"The maximum length in points for each line of text.",default:"192\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#lineWidth Read more...}",type:"number",title:"lineWidth"},xoffset:{description:"The offset on the x-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#xoffset Read more...}",type:"number",title:"xoffset"},yoffset:{description:"The offset on the y-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#yoffset Read more...}",type:"number",title:"yoffset"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["angle","declaredClass","destroyed","font","horizontalAlignment","initialized","kerning","lineHeight","lineWidth","rotated","text","type","verticalAlignment","xoffset","yoffset"]},"__esri.Font":{title:"__esri.Font",type:"object",properties:{decoration:{description:"The text decoration.",default:'"none"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#decoration Read more...}',enum:["line-through","none","underline"],type:"string",title:"decoration"},family:{description:"The font family of the text.",default:'"sans-serif"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#family Read more...}',type:"string",title:"family"},style:{description:"The text style.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#style Read more...}',enum:["italic","normal","oblique"],type:"string",title:"style"},weight:{description:"The text weight.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#weight Read more...}',enum:["bold","bolder","lighter","normal"],type:"string",title:"weight"},size:{description:"The font size in points.",default:"9\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#size Read more...}",type:"number",title:"size"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","decoration","destroyed","family","initialized","size","style","weight"]},"__esri.PopupTemplate":{title:"__esri.PopupTemplate",type:"object",properties:{lastEditInfoEnabled:{description:"Indicates whether or not editor tracking should display.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#lastEditInfoEnabled Read more...}",type:"boolean",title:"lastEditInfoEnabled"},outFields:{description:"An array of field names used in the PopupTemplate.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#outFields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"outFields"},overwriteActions:{description:"Indicates whether actions should replace existing {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions popup actions}.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#overwriteActions Read more...}",type:"boolean",title:"overwriteActions"},returnGeometry:{description:"Indicates whether to include the feature's geometry for use by the template.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#returnGeometry Read more...}",type:"boolean",title:"returnGeometry"},title:{description:"The template for defining how to format the title used in a popup.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#title Read more...}",anyOf:[{$ref:"#/definitions/Function"},{$ref:"#/definitions/Promise<any>"},{type:"string"}],title:"title"},actions:{description:"A {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html Collection} of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html action} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html action toggle} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#actions Read more...}",anyOf:[{$ref:"#/definitions/__esri.Collection<__esri.ActionButton|__esri.ActionToggle>"},{type:"null"}],title:"actions"},content:{description:"The template for defining and formatting a popup's content.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#content Read more...}",anyOf:[{$ref:"#/definitions/Function"},{$ref:"#/definitions/Promise<any>"},{type:"array",items:{$ref:"#/definitions/__esri.Content"}},{type:["null","string"]}],title:"content"},expressionInfos:{description:"An array of objects or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html ExpressionInfo[]} that reference\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expressions following\nthe specification defined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#popup Arcade Popup Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#expressionInfos Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.popupExpressionInfo"}},{type:"null"}],title:"expressionInfos"},fieldInfos:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html FieldInfo} that defines how fields in the dataset\nor values from {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expressions participate\nin a popup.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#fieldInfos Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.FieldInfo"}},{type:"null"}],title:"fieldInfos"},layerOptions:{description:"Additional options that can be defined for the popup layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#layerOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.LayerOptions"},{type:"null"}],title:"layerOptions"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","lastEditInfoEnabled","overwriteActions","returnGeometry","title"]},Function:{title:"Function",type:"object",properties:{prototype:{title:"prototype"},length:{type:"number",title:"length"},arguments:{title:"arguments"},caller:{$ref:"#/definitions/Function",title:"caller"},name:{type:"string",title:"name"}},required:["arguments","caller","length","name","prototype"]},"Promise<any>":{title:"Promise<any>",type:"object",properties:{"__@toStringTag@16125":{type:"string",title:"__@toStringTag@16125"}},required:["__@toStringTag@16125"]},"__esri.Collection<__esri.ActionButton|__esri.ActionToggle>":{title:"__esri.Collection<__esri.ActionButton|__esri.ActionToggle>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.Content":{title:"__esri.Content",type:"object",properties:{type:{description:"The type of popup element displayed.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-Content.html#type Read more...}",anyOf:[{enum:["attachments","custom","expression","fields","media","relationship","text","utility-network-associations"],type:"string"},{type:"null"}],title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.popupExpressionInfo":{title:"__esri.popupExpressionInfo",type:"object",properties:{expression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following\nthe specification defined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#popup Arcade Popup Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html#expression Read more...}",type:"string",title:"expression"},name:{description:"The name of the expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html#name Read more...}",type:"string",title:"name"},returnType:{description:"Indicates the return type of the Arcade expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html#returnType Read more...}",enum:["number","string"],type:"string",title:"returnType"},title:{description:"The title used to describe the value returned by the expression in the\npopup.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html#title Read more...}",type:["null","string"],title:"title"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","expression","initialized","name","returnType"]},"__esri.FieldInfo":{title:"__esri.FieldInfo",type:"object",properties:{fieldName:{description:"The field name as defined by the service or the name of\nan {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade}\nexpression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#fieldName Read more...}",type:["null","string"],title:"fieldName"},isEditable:{description:"A Boolean determining whether users can edit this field.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#isEditable Read more...}",type:"boolean",title:"isEditable"},label:{description:"A string containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#label Read more...}",type:["null","string"],title:"label"},statisticType:{description:"Used in a `one:many` or `many:many` relationship to compute the statistics\non the field to show in the popup.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#statisticType Read more...}",anyOf:[{enum:["avg","count","max","min","stddev","sum","var"],type:"string"},{type:"null"}],title:"statisticType"},stringFieldOption:{description:"A string determining what type of input box editors see\nwhen editing the field.",default:'"text-box"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#stringFieldOption Read more...}',enum:["rich-text","text-area","text-box"],type:"string",title:"stringFieldOption"},tooltip:{description:"A string providing an editing hint for editors of the field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#tooltip Read more...}",type:["null","string"],title:"tooltip"},visible:{description:"Indicates whether the field is visible in the popup window.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#visible Read more...}",type:"boolean",title:"visible"},format:{description:"Class which provides formatting options for numerical or date fields and how they should display within\na popup.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html#format Read more...}",anyOf:[{$ref:"#/definitions/__esri.FieldInfoFormat"},{type:"null"}],title:"format"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","isEditable","stringFieldOption","visible"]},"__esri.FieldInfoFormat":{title:"__esri.FieldInfoFormat",type:"object",properties:{dateFormat:{description:"Used only with `Date` fields.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-FieldInfoFormat.html#dateFormat Read more...}",anyOf:[{enum:["day-short-month-year","day-short-month-year-long-time","day-short-month-year-long-time-24","day-short-month-year-short-time","day-short-month-year-short-time-24","long-date","long-date-long-time","long-date-long-time-24","long-date-short-time","long-date-short-time-24","long-month-day-year","long-month-day-year-long-time","long-month-day-year-long-time-24","long-month-day-year-short-time","long-month-day-year-short-time-24","long-month-year","short-date","short-date-le","short-date-le-long-time","short-date-le-long-time-24","short-date-le-short-time","short-date-le-short-time-24","short-date-long-time","short-date-long-time-24","short-date-short-time","short-date-short-time-24","short-month-year","year"],type:"string"},{type:"null"}],title:"dateFormat"},digitSeparator:{description:"Used only with `Number` fields.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-FieldInfoFormat.html#digitSeparator Read more...}",type:"boolean",title:"digitSeparator"},places:{description:"Used only with `Number` fields to specify the number of supported decimal places\nthat should appear in popups.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-FieldInfoFormat.html#places Read more...}",type:["null","number"],title:"places"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","digitSeparator","initialized"]},"__esri.LayerOptions":{title:"__esri.LayerOptions",type:"object",properties:{returnTopmostRaster:{description:"Applicable to {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html Imagery Layers}.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-LayerOptions.html#returnTopmostRaster Read more...}",type:["null","boolean"],title:"returnTopmostRaster"},showNoDataRecords:{description:"Applicable to {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html Imagery Layers}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-LayerOptions.html#showNoDataRecords Read more...}",type:["null","boolean"],title:"showNoDataRecords"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.ClassBreaksRenderer":{title:"__esri.ClassBreaksRenderer",type:"object",properties:{defaultLabel:{description:"Label used in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend} to describe features assigned the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#defaultSymbol default symbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#defaultLabel Read more...}",type:["null","string"],title:"defaultLabel"},field:{description:"The name of a numeric attribute field whose data determines\nthe symbol of each feature based on the class breaks defined\nin {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#classBreakInfos classBreakInfos}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#field Read more...}",type:"string",title:"field"},normalizationField:{description:"When {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#normalizationType normalizationType} is `field`, this property contains the\nattribute field name used for normalization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#normalizationField Read more...}",type:["null","string"],title:"normalizationField"},normalizationTotal:{description:"When {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#normalizationType normalizationType} is `percent-of-total`, this property\ncontains the total of all data values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#normalizationTotal Read more...}",type:["null","number"],title:"normalizationTotal"},normalizationType:{description:"Indicates how the data is normalized.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#normalizationType Read more...}",anyOf:[{enum:["field","log","percent-of-total"],type:"string"},{type:"null"}],title:"normalizationType"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#type Read more...}",type:"string",const:"class-breaks",title:"type"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade}\nexpression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},backgroundFillSymbol:{description:"When symbolizing polygon features with graduated symbols, set a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-FillSymbol.html FillSymbol}\non this property to visualize the boundaries of each feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#backgroundFillSymbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.FillSymbol"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{type:"null"}],title:"backgroundFillSymbol"},classBreakInfos:{description:"Each element in the array is an object that provides information about a class break\nassociated with the renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#classBreakInfos Read more...}",type:"array",items:{$ref:"#/definitions/__esri.ClassBreakInfo"},title:"classBreakInfos"},defaultSymbol:{description:"The default symbol assigned to features with a value not matched to a given break.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#defaultSymbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"defaultSymbol"},legendOptions:{description:"An object providing options for displaying the renderer in the Legend.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRendererLegendOptions"},{type:"null"}],title:"legendOptions"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html VisualVariable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-ClassBreaksRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.VisualVariable"}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["classBreakInfos","declaredClass","destroyed","field","initialized","type"]},"__esri.CIMSymbol":{title:"__esri.CIMSymbol",type:"object",properties:{data:{$ref:"#/definitions/__esri.CIMSymbolReference",description:"The JSON payload of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolReference CIMSymbolReference}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#data Read more...}",title:"data"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#type Read more...}",type:"string",const:"cim",title:"type"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["data","declaredClass","destroyed","initialized","type"]},"__esri.CIMSymbolReference":{description:"Represents a symbol reference from the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#data data} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolReference Read more...}",title:"__esri.CIMSymbolReference",type:"object",properties:{type:{type:"string",const:"CIMSymbolReference",title:"type"},primitiveOverrides:{anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.PrimitiveOverride"}},{type:"null"}],title:"primitiveOverrides"},symbol:{anyOf:[{$ref:"#/definitions/__esri.CIMLineSymbol"},{$ref:"#/definitions/__esri.CIMPointSymbol"},{$ref:"#/definitions/__esri.CIMPolygonSymbol"}],title:"symbol"},minScale:{type:"number",title:"minScale"},maxScale:{type:"number",title:"maxScale"}},required:["type"]},"__esri.PrimitiveOverride":{description:"Represents a primitive override.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#PrimitiveOverride Read more...}",title:"__esri.PrimitiveOverride",type:"object",properties:{type:{const:"CIMPrimitiveOverride",type:"string",title:"type"},primitiveName:{type:"string",title:"primitiveName"},propertyName:{type:"string",title:"propertyName"},valueExpressionInfo:{$ref:"#/definitions/__esri.PrimitiveOverrideValueExpressionInfo",title:"valueExpressionInfo"}},required:["primitiveName","propertyName"]},"__esri.PrimitiveOverrideValueExpressionInfo":{title:"__esri.PrimitiveOverrideValueExpressionInfo",type:"object",properties:{type:{type:"string",const:"CIMExpressionInfo",title:"type"},title:{type:"string",title:"title"},expression:{type:"string",title:"expression"},name:{type:"string",title:"name"},returnType:{enum:["Default","Numeric","String"],type:"string",title:"returnType"}},required:["expression","type"]},"__esri.CIMLineSymbol":{description:"Represents a line symbol used to draw polyline features and graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMLineSymbol Read more...}",title:"__esri.CIMLineSymbol",type:"object",properties:{type:{type:"string",const:"CIMLineSymbol",title:"type"},symbolLayers:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolLayer"},title:"symbolLayers"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},useRealWorldSymbolSizes:{type:"boolean",title:"useRealWorldSymbolSizes"}},required:["symbolLayers","type"]},"__esri.CIMSymbolLayer":{description:"Represents a symbol layer, the component that makes up a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolLayer Read more...}",title:"__esri.CIMSymbolLayer",anyOf:[{$ref:"#/definitions/__esri.CIMGradientFill"},{$ref:"#/definitions/__esri.CIMGradientStroke"},{$ref:"#/definitions/__esri.CIMHatchFill"},{$ref:"#/definitions/__esri.CIMPictureFill"},{$ref:"#/definitions/__esri.CIMPictureMarker"},{$ref:"#/definitions/__esri.CIMPictureStroke"},{$ref:"#/definitions/__esri.CIMSolidFill"},{$ref:"#/definitions/__esri.CIMSolidStroke"},{$ref:"#/definitions/__esri.CIMVectorMarker"}]},"__esri.CIMGradientFill":{description:"Represents a gradient fill which fills polygonal geometry with a specified color scheme.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGradientFill Read more...}",title:"__esri.CIMGradientFill",type:"object",properties:{type:{type:"string",const:"CIMGradientFill",title:"type"},enable:{type:"boolean",title:"enable"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},angle:{type:"number",title:"angle"},colorRamp:{$ref:"#/definitions/__esri.CIMColorRamp",title:"colorRamp"},gradientMethod:{enum:["Circular","Linear","Rectangular"],type:"string",title:"gradientMethod"},gradientSize:{type:"number",title:"gradientSize"},gradientSizeUnits:{enum:["Absolute","Relative"],type:"string",title:"gradientSizeUnits"},gradientType:{enum:["Continuous","Discrete"],type:"string",title:"gradientType"},interval:{type:"number",title:"interval"}},required:["colorRamp","enable","type"]},"__esri.CIMGeometricEffect":{description:"Represents a geometric effect.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffect Read more...}",title:"__esri.CIMGeometricEffect",anyOf:[{$ref:"#/definitions/__esri.CIMGeometricEffectArrow"},{$ref:"#/definitions/__esri.CIMGeometricEffectBuffer"},{$ref:"#/definitions/__esri.CIMGeometricEffectControlMeasureLine"},{$ref:"#/definitions/__esri.CIMGeometricEffectCut"},{$ref:"#/definitions/__esri.CIMGeometricEffectDashes"},{$ref:"#/definitions/__esri.CIMGeometricEffectDonut"},{$ref:"#/definitions/__esri.CIMGeometricEffectJog"},{$ref:"#/definitions/__esri.CIMGeometricEffectMove"},{$ref:"#/definitions/__esri.CIMGeometricEffectOffset"},{$ref:"#/definitions/__esri.CIMGeometricEffectRotate"},{$ref:"#/definitions/__esri.CIMGeometricEffectScale"},{$ref:"#/definitions/__esri.CIMGeometricEffectWave"}]},"__esri.CIMGeometricEffectArrow":{description:"Represents the arrow geometric effect which creates a dynamic line along a line feature with an arrow of a specified arrow type and width.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectArrow Read more...}",title:"__esri.CIMGeometricEffectArrow",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectArrow",title:"type"},primitiveName:{type:"string",title:"primitiveName"},geometricEffectArrowType:{enum:["Block","Crossed","OpenEnded"],type:"string",title:"geometricEffectArrowType"},width:{type:"number",title:"width"}},required:["geometricEffectArrowType","type","width"]},"__esri.CIMGeometricEffectBuffer":{description:"Represents the buffer geometric effect which creates a dynamic polygon with a specified distance around features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectBuffer Read more...}",title:"__esri.CIMGeometricEffectBuffer",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectBuffer",title:"type"},primitiveName:{type:"string",title:"primitiveName"},size:{type:"number",title:"size"}},required:["size","type"]},"__esri.CIMGeometricEffectControlMeasureLine":{description:"Represents the control measure line geometric effect.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectControlMeasureLine Read more...}",title:"__esri.CIMGeometricEffectControlMeasureLine",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectControlMeasureLine",title:"type"},primitiveName:{type:"string",title:"primitiveName"},rule:{type:"string",title:"rule"}},required:["rule","type"]},"__esri.CIMGeometricEffectCut":{description:"Represents the cut geometric effect which creates a dynamic line that is shorter on one or both ends than the line feature or polygon outline.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectCut Read more...}",title:"__esri.CIMGeometricEffectCut",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectCut",title:"type"},primitiveName:{type:"string",title:"primitiveName"},beginCut:{type:"number",title:"beginCut"},endCut:{type:"number",title:"endCut"},middleCut:{type:"number",title:"middleCut"},invert:{type:"boolean",title:"invert"}},required:["type"]},"__esri.CIMGeometricEffectDashes":{description:"Represents the dashes geometric effect which creates a dynamic multipart line geometry from a line feature or the outline of a polygon based on a template.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectDashes Read more...}",title:"__esri.CIMGeometricEffectDashes",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectDashes",title:"type"},primitiveName:{type:"string",title:"primitiveName"},customEndingOffset:{type:"number",title:"customEndingOffset"},dashTemplate:{type:"array",items:{type:"number"},title:"dashTemplate"},lineDashEnding:{enum:["Custom","FullGap","FullPattern","HalfGap","HalfPattern","NoConstraint"],type:"string",title:"lineDashEnding"},offsetAlongLine:{type:"number",title:"offsetAlongLine"}},required:["dashTemplate","type"]},"__esri.CIMGeometricEffectDonut":{description:"Represents the donut geometric effect which creates a dynamic polygon ring of a specified width in relation to the outline of polygon features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectDonut Read more...}",title:"__esri.CIMGeometricEffectDonut",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectDonut",title:"type"},primitiveName:{type:"string",title:"primitiveName"},option:{enum:["Accurate","Fast"],type:"string",title:"option"},width:{type:"number",title:"width"}},required:["type","width"]},"__esri.CIMGeometricEffectJog":{description:"Represents the jog geometric effect which creates a dynamic line with a jog of a specified angle, position, and width in the line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectJog Read more...}",title:"__esri.CIMGeometricEffectJog",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectJog",title:"type"},primitiveName:{type:"string",title:"primitiveName"},angle:{type:"number",title:"angle"},length:{type:"number",title:"length"},position:{type:"number",title:"position"}},required:["angle","length","position","type"]},"__esri.CIMGeometricEffectMove":{description:"Represents the move geometric effect which creates a point, line or polygon that is offset a specified distance in X and Y.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectMove Read more...}",title:"__esri.CIMGeometricEffectMove",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectMove",title:"type"},primitiveName:{type:"string",title:"primitiveName"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"}},required:["type"]},"__esri.CIMGeometricEffectOffset":{description:"Represents the offset geometric effect which creates a dynamic line or polygon offset at a specified distance perpendicularly from a feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectOffset Read more...}",title:"__esri.CIMGeometricEffectOffset",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectOffset",title:"type"},primitiveName:{type:"string",title:"primitiveName"},method:{enum:["Bevelled","Mitered","Rounded","Square"],type:"string",title:"method"},offset:{type:"number",title:"offset"},option:{enum:["Accurate","Fast"],type:"string",title:"option"}},required:["offset","type"]},"__esri.CIMGeometricEffectRotate":{description:"Represents the rotate geometric effect which creates a dynamic line or polygon rotated a specified angle from the feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectRotate Read more...}",title:"__esri.CIMGeometricEffectRotate",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectRotate",title:"type"},primitiveName:{type:"string",title:"primitiveName"},angle:{type:"number",title:"angle"}},required:["angle","type"]},"__esri.CIMGeometricEffectScale":{description:"Represents the scale geometric effect which creates a dynamic line or polygon scaled by a specified factor.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectScale Read more...}",title:"__esri.CIMGeometricEffectScale",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectScale",title:"type"},primitiveName:{type:"string",title:"primitiveName"},xScaleFactor:{type:"number",title:"xScaleFactor"},yScaleFactor:{type:"number",title:"yScaleFactor"}},required:["type"]},"__esri.CIMGeometricEffectWave":{description:"Represents the wave geometric effect which creates a dynamic line or polygon along a feature with a repeating wave pattern.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGeometricEffectWave Read more...}",title:"__esri.CIMGeometricEffectWave",type:"object",properties:{type:{type:"string",const:"CIMGeometricEffectWave",title:"type"},primitiveName:{type:"string",title:"primitiveName"},amplitude:{type:"number",title:"amplitude"},period:{type:"number",title:"period"},seed:{type:"number",title:"seed"},waveform:{enum:["Random","Sinus","Square","Triangle"],type:"string",title:"waveform"}},required:["type"]},"__esri.CIMColorRamp":{description:"Represents a color ramp.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMColorRamp Read more...}",title:"__esri.CIMColorRamp",anyOf:[{$ref:"#/definitions/__esri.CIMLinearContinousColorRamp"},{$ref:"#/definitions/__esri.CIMMultipartColorRamp"},{$ref:"#/definitions/__esri.CIMFixedColorRamp"}]},"__esri.CIMLinearContinousColorRamp":{description:"Represents a linear continuous color ramp scheme - a color ramp that has a linear transition between two colors.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMLinearContinousColorRamp Read more...}",title:"__esri.CIMLinearContinousColorRamp",type:"object",properties:{type:{type:"string",const:"CIMLinearContinousColorRamp",title:"type"},fromColor:{type:"array",items:{type:"number"},title:"fromColor"},toColor:{type:"array",items:{type:"number"},title:"toColor"}},required:["fromColor","toColor","type"]},"__esri.CIMMultipartColorRamp":{description:"Represents a multipart color ramp scheme - a color ramp defined by combining two or more continous or fixed ramps.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMultipartColorRamp Read more...}",title:"__esri.CIMMultipartColorRamp",type:"object",properties:{type:{type:"string",const:"CIMMultipartColorRamp",title:"type"},colorRamps:{type:"array",items:{$ref:"#/definitions/__esri.CIMColorRamp"},title:"colorRamps"},weights:{type:"array",items:{type:"number"},title:"weights"}},required:["colorRamps","type","weights"]},"__esri.CIMFixedColorRamp":{description:"Represents a color scheme composed of discrete colors.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMFixedColorRamp Read more...}",title:"__esri.CIMFixedColorRamp",type:"object",properties:{type:{type:"string",const:"CIMFixedColorRamp",title:"type"},colors:{type:"array",items:{type:"array",items:{type:"number"}},title:"colors"}},required:["colors","type"]},"__esri.CIMGradientStroke":{description:"Represents a gradient stroke which draws linear geometry with a specified color scheme.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMGradientStroke Read more...}",title:"__esri.CIMGradientStroke",type:"object",properties:{type:{type:"string",const:"CIMGradientStroke",title:"type"},enable:{type:"boolean",title:"enable"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},capStyle:{enum:["Butt","Round","Square"],type:"string",title:"capStyle"},joinStyle:{enum:["Bevel","Miter","Round"],type:"string",title:"joinStyle"},miterLimit:{type:"number",title:"miterLimit"},width:{type:"number",title:"width"},colorRamp:{$ref:"#/definitions/__esri.CIMColorRamp",title:"colorRamp"},gradientMethod:{enum:["AcrossLine","AlongLine"],type:"string",title:"gradientMethod"},gradientSize:{type:"number",title:"gradientSize"},gradientSizeUnits:{enum:["Absolute","Relative"],type:"string",title:"gradientSizeUnits"},gradientType:{enum:["Continuous","Discrete"],type:"string",title:"gradientType"},interval:{type:"number",title:"interval"}},required:["colorRamp","enable","gradientMethod","type","width"]},"__esri.CIMHatchFill":{description:"Represents a hatch fill which fills polygonal geometry with a uniform series of parallel line symbols.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMHatchFill Read more...}",title:"__esri.CIMHatchFill",type:"object",properties:{type:{type:"string",const:"CIMHatchFill",title:"type"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},lineSymbol:{$ref:"#/definitions/__esri.CIMLineSymbol",title:"lineSymbol"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},rotation:{type:"number",title:"rotation"},separation:{type:"number",title:"separation"}},required:["enable","lineSymbol","separation","type"]},"__esri.CIMPictureFill":{description:"Represents a picture fill which fills polygonal geometry with a picture.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPictureFill Read more...}",title:"__esri.CIMPictureFill",type:"object",properties:{type:{type:"string",const:"CIMPictureFill",title:"type"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},url:{type:"string",title:"url"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},rotation:{type:"number",title:"rotation"},scaleX:{type:"number",title:"scaleX"},height:{type:"number",title:"height"},colorSubstitutions:{type:"array",items:{$ref:"#/definitions/__esri.CIMColorSubstitution"},title:"colorSubstitutions"},tintColor:{type:"array",items:{type:"number"},title:"tintColor"}},required:["enable","type","url"]},"__esri.CIMColorSubstitution":{description:"Represents color substitution, an ordered list of color substitutes.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMColorSubstitution Read more...}",title:"__esri.CIMColorSubstitution",type:"object",properties:{oldColor:{type:"array",items:{type:"number"},title:"oldColor"},newColor:{type:"array",items:{type:"number"},title:"newColor"}},required:["newColor","oldColor"]},"__esri.CIMPictureMarker":{description:"Represents a picture marker created from a raster (bitmapped) image file.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPictureMarker Read more...}",title:"__esri.CIMPictureMarker",type:"object",properties:{type:{type:"string",const:"CIMPictureMarker",title:"type"},enable:{type:"boolean",title:"enable"},url:{type:"string",title:"url"},size:{type:"number",title:"size"},colorLocked:{type:"boolean",title:"colorLocked"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},primitiveName:{type:"string",title:"primitiveName"},anchorPoint:{$ref:"#/definitions/__esri.CIMPictureMarkerAnchorPoint",title:"anchorPoint"},anchorPointUnits:{enum:["Absolute","Relative"],type:"string",title:"anchorPointUnits"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},rotateClockwise:{type:"boolean",title:"rotateClockwise"},rotation:{type:"number",title:"rotation"},markerPlacement:{description:"Represents a marker placement.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#MarkerPlacement Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMMarkerPlacementAlongLineSameSize"},{$ref:"#/definitions/__esri.CIMMarkerPlacementAtExtremities"},{$ref:"#/definitions/__esri.CIMMarkerPlacementAtRatioPositions"},{$ref:"#/definitions/__esri.CIMMarkerPlacementInsidePolygon"},{$ref:"#/definitions/__esri.CIMMarkerPlacementOnLine"},{$ref:"#/definitions/__esri.CIMMarkerPlacementOnVertices"},{$ref:"#/definitions/__esri.CIMMarkerPlacementPolygonCenter"}],title:"markerPlacement"},scaleX:{type:"number",title:"scaleX"},height:{type:"number",title:"height"},colorSubstitutions:{type:"array",items:{$ref:"#/definitions/__esri.CIMColorSubstitution"},title:"colorSubstitutions"},tintColor:{type:"array",items:{type:"number"},title:"tintColor"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"},animations:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolAnimation"},title:"animations"}},required:["enable","size","type","url"]},"__esri.CIMPictureMarkerAnchorPoint":{title:"__esri.CIMPictureMarkerAnchorPoint",type:"object",properties:{x:{title:"x"},y:{title:"y"}}},"__esri.CIMMarkerPlacementAlongLineSameSize":{description:"Represents marker placement along the line which places markers that are the same size evenly along a line or polygon outline.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementAlongLineSameSize Read more...}",title:"__esri.CIMMarkerPlacementAlongLineSameSize",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementAlongLineSameSize",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},angleToLine:{type:"boolean",title:"angleToLine"},offset:{type:"number",title:"offset"},customEndingOffset:{type:"number",title:"customEndingOffset"},endings:{enum:["Custom","NoConstraint","WithFullGap","WithHalfGap","WithMarkers"],type:"string",title:"endings"},offsetAlongLine:{type:"number",title:"offsetAlongLine"},placementTemplate:{type:"array",items:{type:"number"},title:"placementTemplate"}},required:["placementTemplate","type"]},"__esri.CIMMarkerPlacementAtExtremities":{description:"Represents marker placement at extremities which places markers at only one or both endpoints of a line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementAtExtremities Read more...}",title:"__esri.CIMMarkerPlacementAtExtremities",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementAtExtremities",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},angleToLine:{type:"boolean",title:"angleToLine"},offset:{type:"number",title:"offset"},extremityPlacement:{enum:["Both","JustBegin","JustEnd","None"],type:"string",title:"extremityPlacement"},offsetAlongLine:{type:"number",title:"offsetAlongLine"}},required:["type"]},"__esri.CIMMarkerPlacementAtRatioPositions":{description:"Represents marker placement at ratio positions which places a set number of markers along the line or the outline of a polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementAtRatioPositions Read more...}",title:"__esri.CIMMarkerPlacementAtRatioPositions",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementAtRatioPositions",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},angleToLine:{type:"boolean",title:"angleToLine"},offset:{type:"number",title:"offset"},beginPosition:{type:"number",title:"beginPosition"},endPosition:{type:"number",title:"endPosition"},flipFirst:{type:"boolean",title:"flipFirst"},positionArray:{type:"array",items:{type:"number"},title:"positionArray"}},required:["positionArray","type"]},"__esri.CIMMarkerPlacementInsidePolygon":{description:"Represents marker placement inside a polygon which defines how a polygon is filled with a pattern of markers.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementInsidePolygon Read more...}",title:"__esri.CIMMarkerPlacementInsidePolygon",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementInsidePolygon",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},gridAngle:{type:"number",title:"gridAngle"},gridType:{enum:["Fixed","Random"],type:"string",title:"gridType"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},shiftOddRows:{type:"boolean",title:"shiftOddRows"},stepX:{type:"number",title:"stepX"},stepY:{type:"number",title:"stepY"},randomness:{type:"number",title:"randomness"},seed:{type:"number",title:"seed"},clipping:{const:"ClipAtBoundary",type:"string",title:"clipping"}},required:["stepX","stepY","type"]},"__esri.CIMMarkerPlacementOnLine":{description:"Represents a marker placement on the line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementOnLine Read more...}",title:"__esri.CIMMarkerPlacementOnLine",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementOnLine",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},angleToLine:{type:"boolean",title:"angleToLine"},offset:{type:"number",title:"offset"},relativeTo:{enum:["LineBeginning","LineEnd","LineMiddle","SegmentMidpoint"],type:"string",title:"relativeTo"},startPointOffset:{type:"number",title:"startPointOffset"}},required:["type"]},"__esri.CIMMarkerPlacementOnVertices":{description:"Represents a marker placement on vertices which places a single marker on a line or polygon outline at a set distance from the middle or one of the endpoints.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementOnVertices Read more...}",title:"__esri.CIMMarkerPlacementOnVertices",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementOnVertices",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},angleToLine:{type:"boolean",title:"angleToLine"},offset:{type:"number",title:"offset"},placeOnControlPoints:{type:"boolean",title:"placeOnControlPoints"},placeOnEndPoints:{type:"boolean",title:"placeOnEndPoints"},placeOnRegularVertices:{type:"boolean",title:"placeOnRegularVertices"}},required:["type"]},"__esri.CIMMarkerPlacementPolygonCenter":{description:"Represents marker placement polygon center which defines how a single marker will be placed within the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerPlacementPolygonCenter Read more...}",title:"__esri.CIMMarkerPlacementPolygonCenter",type:"object",properties:{type:{type:"string",const:"CIMMarkerPlacementPolygonCenter",title:"type"},primitiveName:{type:"string",title:"primitiveName"},placePerPart:{type:"boolean",title:"placePerPart"},method:{enum:["BoundingBoxCenter","CenterOfMass","OnPolygon"],type:"string",title:"method"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},clipAtBoundary:{type:"boolean",title:"clipAtBoundary"}},required:["type"]},"__esri.CIMAnimatedSymbolProperties":{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",title:"__esri.CIMAnimatedSymbolProperties",type:"object",properties:{playAnimation:{type:"boolean",title:"playAnimation"},reverseAnimation:{type:"boolean",title:"reverseAnimation"},randomizeStartTime:{type:"boolean",title:"randomizeStartTime"},randomizeStartSeed:{type:"number",title:"randomizeStartSeed"},startTimeOffset:{type:"number",title:"startTimeOffset"},duration:{type:"number",title:"duration"},repeatType:{enum:["Loop","None","Oscillate"],type:"string",title:"repeatType"},repeatDelay:{type:"number",title:"repeatDelay"},easing:{enum:["EaseIn","EaseInOut","EaseOut","Linear"],type:"string",title:"easing"}}},"__esri.CIMSymbolAnimation":{description:"Represents a symbol animation used to animate the appearance of a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimation Read more...}",title:"__esri.CIMSymbolAnimation",anyOf:[{$ref:"#/definitions/__esri.CIMSymbolAnimationSize"},{$ref:"#/definitions/__esri.CIMSymbolAnimationScale"},{$ref:"#/definitions/__esri.CIMSymbolAnimationColor"},{$ref:"#/definitions/__esri.CIMSymbolAnimationTransparency"},{$ref:"#/definitions/__esri.CIMSymbolAnimationRotation"},{$ref:"#/definitions/__esri.CIMSymbolAnimationOffset"}]},"__esri.CIMSymbolAnimationSize":{description:"Represents a symbol animation that changes the size of a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationSize Read more...}",title:"__esri.CIMSymbolAnimationSize",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationSize",title:"type"},toSize:{type:"number",title:"toSize"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["toSize","type"]},"__esri.CIMSymbolAnimationScale":{description:"Represents a symbol animation that scales a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationScale Read more...}",title:"__esri.CIMSymbolAnimationScale",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationScale",title:"type"},scaleFactor:{type:"number",title:"scaleFactor"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["scaleFactor","type"]},"__esri.CIMSymbolAnimationColor":{description:"Represents a symbol animation that changes the color of a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationColor Read more...}",title:"__esri.CIMSymbolAnimationColor",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationColor",title:"type"},toColor:{$ref:"#/definitions/__esri.Color",title:"toColor"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["toColor","type"]},"__esri.CIMSymbolAnimationTransparency":{description:"Represents a symbol animation that changes the transparency of a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationTransparency Read more...}",title:"__esri.CIMSymbolAnimationTransparency",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationTransparency",title:"type"},toTransparency:{type:"number",title:"toTransparency"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["type"]},"__esri.CIMSymbolAnimationRotation":{description:"Represents a symbol animation that rotates a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationRotation Read more...}",title:"__esri.CIMSymbolAnimationRotation",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationRotation",title:"type"},toRotation:{type:"number",title:"toRotation"},rotateClockwise:{type:"boolean",title:"rotateClockwise"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["toRotation","type"]},"__esri.CIMSymbolAnimationOffset":{description:"Represents a symbol animation that offsets a symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSymbolAnimationOffset Read more...}",title:"__esri.CIMSymbolAnimationOffset",type:"object",properties:{type:{type:"string",const:"CIMSymbolAnimationOffset",title:"type"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},animatedSymbolProperties:{description:"Represents animated symbol properties, a collection of symbol properties that apply when the symbol layer has animation data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMAnimatedSymbolProperties Read more...}",$ref:"#/definitions/__esri.CIMAnimatedSymbolProperties",title:"animatedSymbolProperties"}},required:["type"]},"__esri.CIMPictureStroke":{description:"Represents a picture stroke which draws linear geometry with a repeating image file.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPictureStroke Read more...}",title:"__esri.CIMPictureStroke",type:"object",properties:{type:{type:"string",const:"CIMPictureStroke",title:"type"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},url:{type:"string",title:"url"},colorSubstitutions:{type:"array",items:{$ref:"#/definitions/__esri.CIMColorSubstitution"},title:"colorSubstitutions"},tintColor:{type:"array",items:{type:"number"},title:"tintColor"},width:{type:"number",title:"width"},capStyle:{enum:["Butt","Round","Square"],type:"string",title:"capStyle"},joinStyle:{enum:["Bevel","Miter","Round"],type:"string",title:"joinStyle"},miterLimit:{type:"number",title:"miterLimit"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"}},required:["enable","type","url","width"]},"__esri.CIMSolidFill":{description:"Represents a solid fill which fills polygonal geometry with a single solid color.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSolidFill Read more...}",title:"__esri.CIMSolidFill",type:"object",properties:{type:{type:"string",const:"CIMSolidFill",title:"type"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},color:{type:"array",items:{type:"number"},title:"color"},animations:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolAnimation"},title:"animations"}},required:["color","enable","type"]},"__esri.CIMSolidStroke":{description:"Represents a solid stroke which draws linear geometry with a single solid color.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMSolidStroke Read more...}",title:"__esri.CIMSolidStroke",type:"object",properties:{type:{type:"string",const:"CIMSolidStroke",title:"type"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},color:{type:"array",items:{type:"number"},title:"color"},width:{type:"number",title:"width"},capStyle:{enum:["Butt","Round","Square"],type:"string",title:"capStyle"},joinStyle:{enum:["Bevel","Miter","Round"],type:"string",title:"joinStyle"},miterLimit:{type:"number",title:"miterLimit"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},animations:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolAnimation"},title:"animations"}},required:["color","enable","type","width"]},"__esri.CIMVectorMarker":{description:"Represents a vector marker which can represent vector graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMVectorMarker Read more...}",title:"__esri.CIMVectorMarker",type:"object",properties:{type:{type:"string",const:"CIMVectorMarker",title:"type"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},enable:{type:"boolean",title:"enable"},colorLocked:{type:"boolean",title:"colorLocked"},primitiveName:{type:"string",title:"primitiveName"},size:{type:"number",title:"size"},anchorPoint:{$ref:"#/definitions/__esri.CIMVectorMarkerAnchorPoint",title:"anchorPoint"},anchorPointUnits:{enum:["Absolute","Relative"],type:"string",title:"anchorPointUnits"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},rotateClockwise:{type:"boolean",title:"rotateClockwise"},rotation:{type:"number",title:"rotation"},markerPlacement:{description:"Represents a marker placement.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#MarkerPlacement Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMMarkerPlacementAlongLineSameSize"},{$ref:"#/definitions/__esri.CIMMarkerPlacementAtExtremities"},{$ref:"#/definitions/__esri.CIMMarkerPlacementAtRatioPositions"},{$ref:"#/definitions/__esri.CIMMarkerPlacementInsidePolygon"},{$ref:"#/definitions/__esri.CIMMarkerPlacementOnLine"},{$ref:"#/definitions/__esri.CIMMarkerPlacementOnVertices"},{$ref:"#/definitions/__esri.CIMMarkerPlacementPolygonCenter"}],title:"markerPlacement"},frame:{$ref:"#/definitions/__esri.Envelope",title:"frame"},markerGraphics:{type:"array",items:{$ref:"#/definitions/__esri.CIMMarkerGraphic"},title:"markerGraphics"},scaleSymbolsProportionally:{type:"boolean",title:"scaleSymbolsProportionally"},respectFrame:{type:"boolean",title:"respectFrame"},animations:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolAnimation"},title:"animations"}},required:["enable","frame","markerGraphics","size","type"]},"__esri.CIMVectorMarkerAnchorPoint":{title:"__esri.CIMVectorMarkerAnchorPoint",type:"object",properties:{x:{title:"x"},y:{title:"y"}}},"__esri.Envelope":{description:"An envelope is a rectangle defined by a range of values for each coordinate and attribute.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#Envelope Read more...}",title:"__esri.Envelope",type:"object",properties:{xmin:{type:"number",title:"xmin"},xmax:{type:"number",title:"xmax"},ymin:{type:"number",title:"ymin"},ymax:{type:"number",title:"ymax"}},required:["xmax","xmin","ymax","ymin"]},"__esri.CIMMarkerGraphic":{description:"Represents a marker graphic which is used to define vector graphics in a vector marker.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMMarkerGraphic Read more...}",title:"__esri.CIMMarkerGraphic",type:"object",properties:{type:{type:"string",const:"CIMMarkerGraphic",title:"type"},geometry:{title:"geometry"},symbol:{anyOf:[{$ref:"#/definitions/__esri.CIMLineSymbol"},{$ref:"#/definitions/__esri.CIMPointSymbol"},{$ref:"#/definitions/__esri.CIMPolygonSymbol"},{$ref:"#/definitions/__esri.CIMTextSymbol"}],title:"symbol"},textString:{type:"string",title:"textString"},primitiveName:{type:"string",title:"primitiveName"}},required:["geometry","symbol","type"]},"__esri.CIMPointSymbol":{description:"Represents a point symbol used to draw point features and graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPointSymbol Read more...}",title:"__esri.CIMPointSymbol",type:"object",properties:{type:{type:"string",const:"CIMPointSymbol",title:"type"},symbolLayers:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolLayer"},title:"symbolLayers"},angle:{type:"number",title:"angle"},angleAlignment:{enum:["Display","Map"],type:"string",title:"angleAlignment"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},primitiveName:{type:"string",title:"primitiveName"},scaleX:{type:"number",title:"scaleX"},useRealWorldSymbolSizes:{type:"boolean",title:"useRealWorldSymbolSizes"},animations:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolAnimation"},title:"animations"}},required:["type"]},"__esri.CIMPolygonSymbol":{description:"Represents a polygon symbol used to draw polygon features and graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPolygonSymbol Read more...}",title:"__esri.CIMPolygonSymbol",type:"object",properties:{type:{type:"string",const:"CIMPolygonSymbol",title:"type"},symbolLayers:{type:"array",items:{$ref:"#/definitions/__esri.CIMSymbolLayer"},title:"symbolLayers"},effects:{type:"array",items:{$ref:"#/definitions/__esri.CIMGeometricEffect"},title:"effects"},useRealWorldSymbolSizes:{type:"boolean",title:"useRealWorldSymbolSizes"}},required:["symbolLayers","type"]},"__esri.CIMTextSymbol":{description:"Represents a text symbol which is used to draw text graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMTextSymbol Read more...}",title:"__esri.CIMTextSymbol",type:"object",properties:{type:{type:"string",const:"CIMTextSymbol",title:"type"},angle:{type:"number",title:"angle"},fontFamilyName:{type:"string",title:"fontFamilyName"},fontStyleName:{enum:["Bold","Italic","Regular"],type:"string",title:"fontStyleName"},haloSize:{type:"number",title:"haloSize"},haloSymbol:{description:"Represents a polygon symbol used to draw polygon features and graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMPolygonSymbol Read more...}",$ref:"#/definitions/__esri.CIMPolygonSymbol",title:"haloSymbol"},height:{type:"number",title:"height"},horizontalAlignment:{enum:["Center","Left","Right"],type:"string",title:"horizontalAlignment"},offsetX:{type:"number",title:"offsetX"},offsetY:{type:"number",title:"offsetY"},strikethrough:{type:"boolean",title:"strikethrough"},symbol:{$ref:"#/definitions/__esri.CIMPolygonSymbol",title:"symbol"},underline:{type:"boolean",title:"underline"},verticalAlignment:{enum:["Baseline","Bottom","Center","Top"],type:"string",title:"verticalAlignment"},callout:{description:"Represents a background callout for a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMTextSymbol CIMTextSymbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMBackgroundCallout Read more...}",$ref:"#/definitions/__esri.CIMBackgroundCallout",title:"callout"}},required:["fontFamilyName","height","symbol","type"]},"__esri.CIMBackgroundCallout":{description:"Represents a background callout for a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMTextSymbol CIMTextSymbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-CIMSymbol.html#CIMBackgroundCallout Read more...}",title:"__esri.CIMBackgroundCallout",type:"object",properties:{type:{type:"string",const:"CIMBackgroundCallout",title:"type"},backgroundSymbol:{$ref:"#/definitions/__esri.CIMPolygonSymbol",title:"backgroundSymbol"}},required:["backgroundSymbol","type"]},"__esri.FillSymbol":{title:"__esri.FillSymbol",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-FillSymbol.html#type Read more...}",enum:["picture-fill","simple-fill"],type:"string",title:"type"},outline:{description:"The outline of the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-FillSymbol.html#outline Read more...}",anyOf:[{$ref:"#/definitions/__esri.SimpleLineSymbol"},{type:"null"}],title:"outline"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.SimpleLineSymbol":{title:"__esri.SimpleLineSymbol",type:"object",properties:{cap:{description:"Specifies the cap style.",default:'"round"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html#cap Read more...}',enum:["butt","round","square"],type:"string",title:"cap"},join:{description:"Specifies the join style.",default:'"round"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html#join Read more...}',enum:["bevel","miter","round"],type:"string",title:"join"},miterLimit:{description:"Maximum allowed ratio of the width of a miter join to the line width.",default:"2\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html#miterLimit Read more...}",type:"number",title:"miterLimit"},style:{description:"Specifies the line style.",default:'"solid"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html#style Read more...}',enum:["dash","dash-dot","dot","long-dash","long-dash-dot","long-dash-dot-dot","none","short-dash","short-dash-dot","short-dash-dot-dot","short-dot","solid"],type:"string",title:"style"},marker:{description:"Specifies the color, style, and placement of a symbol marker on the line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleLineSymbol.html#marker Read more...}",anyOf:[{$ref:"#/definitions/__esri.LineSymbolMarker"},{type:"null"}],title:"marker"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbol.html#type Read more...}",type:"string",const:"simple-line",title:"type"},width:{description:"The width of the symbol in points.",default:"0.75\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbol.html#width Read more...}",type:"number",title:"width"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["cap","declaredClass","destroyed","initialized","join","miterLimit","style","type","width"]},"__esri.LineSymbolMarker":{title:"__esri.LineSymbolMarker",type:"object",properties:{placement:{description:"The placement of the marker(s) on the line.",default:'"begin-end"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbolMarker.html#placement Read more...}',enum:["begin","begin-end","end"],type:"string",title:"placement"},style:{description:"The marker style.",default:'"arrow"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbolMarker.html#style Read more...}',enum:["arrow","circle","cross","diamond","square","x"],type:"string",title:"style"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbolMarker.html#type Read more...}",type:"string",const:"line-marker",title:"type"},color:{$ref:"#/definitions/__esri.Color",description:"The color of the marker.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbolMarker.html#color Read more...}",title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["color","declaredClass","destroyed","initialized","placement","style","type"]},"__esri.PolygonSymbol3D":{title:"__esri.PolygonSymbol3D",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PolygonSymbol3D.html#type Read more...}",type:"string",const:"polygon-3d",title:"type"},symbolLayers:{$ref:"#/definitions/__esri.Collection<__esri.ExtrudeSymbol3DLayer|__esri.FillSymbol3DLayer|__esri.WaterSymbol3DLayer|__esri.IconSymbol3DLayer|__esri.LineSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>",description:"A Collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3DLayer.html Symbol3DLayer} objects\nused to visualize the graphic or feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PolygonSymbol3D.html#symbolLayers Read more...}",title:"symbolLayers"},styleOrigin:{description:"The origin of the style from which the symbol was originally referenced.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3D.html#styleOrigin Read more...}",anyOf:[{$ref:"#/definitions/__esri.StyleOrigin"},{type:"null"}],title:"styleOrigin"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","symbolLayers","type"]},"__esri.Collection<__esri.ExtrudeSymbol3DLayer|__esri.FillSymbol3DLayer|__esri.WaterSymbol3DLayer|__esri.IconSymbol3DLayer|__esri.LineSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>":{title:"__esri.Collection<__esri.ExtrudeSymbol3DLayer|__esri.FillSymbol3DLayer|__esri.WaterSymbol3DLayer|__esri.IconSymbol3DLayer|__esri.LineSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.ClassBreakInfo":{title:"__esri.ClassBreakInfo",type:"object",properties:{label:{description:"Describes the data represented by the class break.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-ClassBreakInfo.html#label Read more...}",type:["null","string"],title:"label"},maxValue:{description:"Sets the maximum value for the class break.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-ClassBreakInfo.html#maxValue Read more...}",type:"number",title:"maxValue"},minValue:{description:"Sets the minimum value for the class break.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-ClassBreakInfo.html#minValue Read more...}",type:"number",title:"minValue"},symbol:{$ref:"#/definitions/__esri.SymbolUnion",description:"Defines the symbol used to render features with data values that are within the bounds\ndefined for the class break.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-ClassBreakInfo.html#symbol Read more...}",title:"symbol"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","maxValue","minValue","symbol"]},"__esri.SymbolUnion":{description:"Union of symbols.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-unionTypes.html#SymbolUnion Read more...}",title:"__esri.SymbolUnion",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"}]},"__esri.LineSymbol3D":{title:"__esri.LineSymbol3D",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbol3D.html#type Read more...}",type:"string",const:"line-3d",title:"type"},symbolLayers:{$ref:"#/definitions/__esri.Collection<__esri.LineSymbol3DLayer|__esri.PathSymbol3DLayer>",description:"A Collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3DLayer.html Symbol3DLayer} objects\nused to visualize the graphic or feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-LineSymbol3D.html#symbolLayers Read more...}",title:"symbolLayers"},styleOrigin:{description:"The origin of the style from which the symbol was originally referenced.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3D.html#styleOrigin Read more...}",anyOf:[{$ref:"#/definitions/__esri.StyleOrigin"},{type:"null"}],title:"styleOrigin"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","symbolLayers","type"]},"__esri.Collection<__esri.LineSymbol3DLayer|__esri.PathSymbol3DLayer>":{title:"__esri.Collection<__esri.LineSymbol3DLayer|__esri.PathSymbol3DLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.MeshSymbol3D":{title:"__esri.MeshSymbol3D",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MeshSymbol3D.html#type Read more...}",type:"string",const:"mesh-3d",title:"type"},symbolLayers:{$ref:"#/definitions/__esri.Collection<__esri.FillSymbol3DLayer>",description:"A Collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3DLayer.html Symbol3DLayer} objects\nused to visualize the graphic or feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MeshSymbol3D.html#symbolLayers Read more...}",title:"symbolLayers"},styleOrigin:{description:"The origin of the style from which the symbol was originally referenced.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3D.html#styleOrigin Read more...}",anyOf:[{$ref:"#/definitions/__esri.StyleOrigin"},{type:"null"}],title:"styleOrigin"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","symbolLayers","type"]},"__esri.Collection<__esri.FillSymbol3DLayer>":{title:"__esri.Collection<__esri.FillSymbol3DLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.PictureFillSymbol":{title:"__esri.PictureFillSymbol",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#type Read more...}",type:"string",const:"picture-fill",title:"type"},url:{description:"The URL to the image.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#url Read more...}",type:["null","string"],title:"url"},xscale:{description:"The scale factor on the x axis of the symbol.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#xscale Read more...}",type:"number",title:"xscale"},yscale:{description:"The scale factor on the y axis of the symbol.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#yscale Read more...}",type:"number",title:"yscale"},height:{description:"The height of the image in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#height Read more...}",type:"number",title:"height"},width:{description:"The width of the image in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#width Read more...}",type:"number",title:"width"},xoffset:{description:"The offset on the x-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#xoffset Read more...}",type:"number",title:"xoffset"},yoffset:{description:"The offset on the y-axis in pixels or points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureFillSymbol.html#yoffset Read more...}",type:"number",title:"yoffset"},outline:{description:"The outline of the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-FillSymbol.html#outline Read more...}",anyOf:[{$ref:"#/definitions/__esri.SimpleLineSymbol"},{type:"null"}],title:"outline"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","height","initialized","type","width","xoffset","xscale","yoffset","yscale"]},"__esri.PictureMarkerSymbol":{title:"__esri.PictureMarkerSymbol",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureMarkerSymbol.html#type Read more...}",type:"string",const:"picture-marker",title:"type"},url:{description:"The URL to an image or SVG document.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureMarkerSymbol.html#url Read more...}",type:["null","string"],title:"url"},height:{description:"The height of the image in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureMarkerSymbol.html#height Read more...}",type:"number",title:"height"},width:{description:"The width of the image in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PictureMarkerSymbol.html#width Read more...}",type:"number",title:"width"},angle:{description:"The angle of the marker relative to the screen in degrees.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#angle Read more...}",type:"number",title:"angle"},xoffset:{description:"The offset on the x-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#xoffset Read more...}",type:"number",title:"xoffset"},yoffset:{description:"The offset on the y-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#yoffset Read more...}",type:"number",title:"yoffset"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["angle","declaredClass","destroyed","height","initialized","type","width","xoffset","yoffset"]},"__esri.PointSymbol3D":{title:"__esri.PointSymbol3D",type:"object",properties:{type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PointSymbol3D.html#type Read more...}",type:"string",const:"point-3d",title:"type"},callout:{description:"Settings for adding a callout visualization to the symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PointSymbol3D.html#callout Read more...}",anyOf:[{$ref:"#/definitions/__esri.LineCallout3D"},{type:"null"}],title:"callout"},symbolLayers:{$ref:"#/definitions/__esri.Collection<__esri.IconSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>",description:"A Collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3DLayer.html Symbol3DLayer} objects\nused to visualize the graphic or feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PointSymbol3D.html#symbolLayers Read more...}",title:"symbolLayers"},verticalOffset:{description:"Shifts the symbol along the vertical world axis by a given height.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-PointSymbol3D.html#verticalOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.Symbol3DVerticalOffset"},{type:"null"}],title:"verticalOffset"},styleOrigin:{description:"The origin of the style from which the symbol was originally referenced.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol3D.html#styleOrigin Read more...}",anyOf:[{$ref:"#/definitions/__esri.StyleOrigin"},{type:"null"}],title:"styleOrigin"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","symbolLayers","type"]},"__esri.LineCallout3D":{title:"__esri.LineCallout3D",type:"object",properties:{type:{type:"string",const:"line",title:"type"},border:{description:"The border settings of the callout line.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-callouts-LineCallout3D.html#border Read more...}",anyOf:[{$ref:"#/definitions/__esri.LineCallout3DBorder"},{type:"null"}],title:"border"},color:{description:"The color of the callout line.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-callouts-LineCallout3D.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},size:{description:"The width of the callout line in points.",default:"1px\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-callouts-LineCallout3D.html#size Read more...}",type:"number",title:"size"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","size","type"]},"__esri.LineCallout3DBorder":{title:"__esri.LineCallout3DBorder",type:"object",properties:{color:{anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"}}},"__esri.Collection<__esri.IconSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>":{title:"__esri.Collection<__esri.IconSymbol3DLayer|__esri.ObjectSymbol3DLayer|__esri.TextSymbol3DLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.SimpleFillSymbol":{title:"__esri.SimpleFillSymbol",type:"object",properties:{style:{description:"The fill style.",default:'"solid"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html#style Read more...}',enum:["backward-diagonal","cross","diagonal-cross","forward-diagonal","horizontal","none","solid","vertical"],type:"string",title:"style"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html#type Read more...}",type:"string",const:"simple-fill",title:"type"},color:{$ref:"#/definitions/__esri.Color",description:"The color of the symbol.",default:"[0, 0, 0, 0.25] - black, semitransparent\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html#color Read more...}",title:"color"},outline:{description:"The outline of the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-FillSymbol.html#outline Read more...}",anyOf:[{$ref:"#/definitions/__esri.SimpleLineSymbol"},{type:"null"}],title:"outline"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["color","declaredClass","destroyed","initialized","style","type"]},"__esri.SimpleMarkerSymbol":{title:"__esri.SimpleMarkerSymbol",type:"object",properties:{path:{description:"The SVG path of the icon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#path Read more...}",type:"string",title:"path"},style:{description:"The marker style.",default:'"circle"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#style Read more...}',enum:["circle","cross","diamond","path","square","triangle","x"],type:"string",title:"style"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#type Read more...}",type:"string",const:"simple-marker",title:"type"},color:{$ref:"#/definitions/__esri.Color",description:"The color of the symbol.",default:"[255, 255, 255, 0.25] - white, semitransparent\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#color Read more...}",title:"color"},outline:{$ref:"#/definitions/__esri.SimpleLineSymbol",description:"The outline of the marker symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#outline Read more...}",title:"outline"},size:{description:"The size of the marker in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleMarkerSymbol.html#size Read more...}",type:"number",title:"size"},angle:{description:"The angle of the marker relative to the screen in degrees.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#angle Read more...}",type:"number",title:"angle"},xoffset:{description:"The offset on the x-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#xoffset Read more...}",type:"number",title:"xoffset"},yoffset:{description:"The offset on the y-axis in points.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html#yoffset Read more...}",type:"number",title:"yoffset"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["angle","color","declaredClass","destroyed","initialized","outline","path","size","style","type","xoffset","yoffset"]},"__esri.WebStyleSymbol":{title:"__esri.WebStyleSymbol",type:"object",properties:{name:{description:"The name of the symbol within the web style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-WebStyleSymbol.html#name Read more...}",type:["null","string"],title:"name"},styleName:{description:"A registered web style name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-WebStyleSymbol.html#styleName Read more...}",type:["null","string"],title:"styleName"},styleUrl:{description:"URL that points to the web style definition.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-WebStyleSymbol.html#styleUrl Read more...}",type:["null","string"],title:"styleUrl"},type:{description:"The symbol type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#type Read more...}",type:"string",const:"web-style",title:"type"},portal:{description:"The portal that contains the web style this symbol refers to.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-WebStyleSymbol.html#portal Read more...}",anyOf:[{$ref:"#/definitions/__esri.Portal"},{type:"null"}],title:"portal"},color:{description:"The color of the symbol.",default:'"black"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color Read more...}',anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.ClassBreaksRendererLegendOptions":{title:"__esri.ClassBreaksRendererLegendOptions",type:"object",properties:{title:{type:["null","string"],title:"title"}}},"__esri.VisualVariable":{title:"__esri.VisualVariable",type:"object",properties:{field:{description:"The name of the numeric attribute field that contains the data\nvalues used to determine the color/opacity/size/rotation of each feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#field Read more...}",type:"string",title:"field"},type:{description:"The visual variable type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#type Read more...}",anyOf:[{enum:["color","opacity","rotation","size"],type:"string"},{type:"null"}],title:"type"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},legendOptions:{description:"An object providing options for displaying the visual variable in\nthe {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.VisualVariableLegendOptions"},{type:"null"}],title:"legendOptions"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","field","initialized"]},"__esri.VisualVariableLegendOptions":{title:"__esri.VisualVariableLegendOptions",type:"object",properties:{showLegend:{type:["null","boolean"],title:"showLegend"},title:{type:["null","string"],title:"title"}}},"__esri.AuthoringInfo":{title:"__esri.AuthoringInfo",type:"object",properties:{classificationMethod:{description:"Indicates which classification method was used if a\nclassed color or classed size renderer was generated using one of the Smart Mapping functions.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#classificationMethod Read more...}",anyOf:[{enum:["defined-interval","equal-interval","manual","natural-breaks","quantile","standard-deviation"],type:"string"},{type:"null"}],title:"classificationMethod"},fadeRatio:{description:"Only applicable to {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html HeatmapRenderer}\ncreated with the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-heatmap.html heatmap renderer creator}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fadeRatio Read more...}",type:["null","number"],title:"fadeRatio"},fields:{description:"An array of string values representing field names used for creating a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-predominance.html predominance renderer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#fields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"fields"},flowTheme:{description:"Only applicable to flow renderers.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#flowTheme Read more...}",anyOf:[{enum:["flow-line","wave-front"],type:"string"},{type:"null"}],title:"flowTheme"},focus:{description:"The focus of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html relationship renderer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#focus Read more...}",type:["null","string"],title:"focus"},isAutoGenerated:{description:"Indicates whether the renderer was created internally by the JS API's rendering engine for\ndefault {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html FeatureReductionCluster} visualizations.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#isAutoGenerated Read more...}",type:"boolean",title:"isAutoGenerated"},lengthUnit:{description:"**Only applicable to renderer used in web scenes.** Indicates the unit used in real-world sizes.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#lengthUnit Read more...}",anyOf:[{enum:["centimeters","decimeters","feet","inches","kilometers","meters","miles","millimeters","nautical-miles","yards"],type:"string"},{type:"null"}],title:"lengthUnit"},maxSliderValue:{description:"Indicates the value of the upper handle if a slider was used to generate the dot value for dot density renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#maxSliderValue Read more...}",type:["null","number"],title:"maxSliderValue"},minSliderValue:{description:"Indicates the value of the lower handle if a slider was used to generate the dot value for dot density renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#minSliderValue Read more...}",type:["null","number"],title:"minSliderValue"},numClasses:{description:"The number of classes used to classify each field of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html relationship renderer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#numClasses Read more...}",type:["null","number"],title:"numClasses"},standardDeviationInterval:{description:"Indicates the standard deviation interval for each stop in a classed color or\nclassed size renderer that was generated using the `standard-deviation` classification method.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#standardDeviationInterval Read more...}",type:["null","number"],title:"standardDeviationInterval"},statistics:{description:"Only for renderers of type `univariate-color-size` with an `above-and-below` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme univariateTheme}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#statistics Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfoStatistics"},{type:"null"}],title:"statistics"},type:{description:"Indicates the renderer type generated from one of the Smart Mapping functions.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#type Read more...}",enum:["class-breaks-color","class-breaks-size","classed-color","classed-size","dot-density","flow","predominance","relationship","univariate-color-size"],type:"string",title:"type"},univariateSymbolStyle:{description:"Only applicable to {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html univariateColorSize} renderers with an `above-and-below` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme univariateTheme}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateSymbolStyle Read more...}",anyOf:[{enum:["arrow","caret","circle","circle-arrow","circle-caret","circle-plus-minus","custom","happy-sad","plus-minus","square","thumb","triangle"],type:"string"},{type:"null"}],title:"univariateSymbolStyle"},univariateTheme:{description:"Only applicable to {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-univariateColorSize.html univariateColorSize} renderers.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#univariateTheme Read more...}",anyOf:[{enum:["above","above-and-below","below","high-to-low"],type:"string"},{type:"null"}],title:"univariateTheme"},colorRamp:{description:"Indicates the color ramp was used to create the symbols for Unique Value or Class Breaks renderer for Imagery Layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#colorRamp Read more...}",anyOf:[{$ref:"#/definitions/__esri.ColorRamp"},{type:"null"}],title:"colorRamp"},field1:{description:"A numeric field used for generating a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html relationship renderer}\nalong with {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2 field2}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1 Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfoField1"},{type:"null"}],title:"field1"},field2:{description:"A numeric field used for generating a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-relationship.html relationship renderer}\nalong with {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field1 field1}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#field2 Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfoField2"},{type:"null"}],title:"field2"},visualVariables:{description:"Contains authoring properties of visual variables generated from\none of the Smart Mapping methods or sliders.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfo.html#visualVariables Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AuthoringInfoVisualVariable"},title:"visualVariables"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","isAutoGenerated","type","visualVariables"]},"__esri.AuthoringInfoStatistics":{title:"__esri.AuthoringInfoStatistics",type:"object",properties:{max:{type:"number",title:"max"},min:{type:"number",title:"min"}},required:["max","min"]},"__esri.ColorRamp":{title:"__esri.ColorRamp",type:"object",properties:{type:{description:"A string value representing the color ramp type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ColorRamp.html#type Read more...}",anyOf:[{enum:["algorithmic","multipart"],type:"string"},{type:"null"}],title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.AuthoringInfoField1":{title:"__esri.AuthoringInfoField1",type:"object",properties:{field:{type:"string",title:"field"},normalizationField:{type:"string",title:"normalizationField"},classBreakInfos:{type:"array",items:{$ref:"#/definitions/__esri.AuthoringInfoField1ClassBreakInfos"},title:"classBreakInfos"},label:{type:"string",title:"label"}},required:["classBreakInfos","field","label","normalizationField"]},"__esri.AuthoringInfoField1ClassBreakInfos":{title:"__esri.AuthoringInfoField1ClassBreakInfos",type:"object",properties:{maxValue:{type:"number",title:"maxValue"},minValue:{type:"number",title:"minValue"}},required:["maxValue","minValue"]},"__esri.AuthoringInfoField2":{title:"__esri.AuthoringInfoField2",type:"object",properties:{field:{type:"string",title:"field"},normalizationField:{type:"string",title:"normalizationField"},classBreakInfos:{type:"array",items:{$ref:"#/definitions/__esri.AuthoringInfoField2ClassBreakInfos"},title:"classBreakInfos"},label:{type:"string",title:"label"}},required:["classBreakInfos","field","label","normalizationField"]},"__esri.AuthoringInfoField2ClassBreakInfos":{title:"__esri.AuthoringInfoField2ClassBreakInfos",type:"object",properties:{maxValue:{type:"number",title:"maxValue"},minValue:{type:"number",title:"minValue"}},required:["maxValue","minValue"]},"__esri.AuthoringInfoVisualVariable":{title:"__esri.AuthoringInfoVisualVariable",type:"object",properties:{endTime:{description:"If an age or timeline renderer was generated, indicates the end\ntime of the visualization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#endTime Read more...}",type:["null","string","number"],title:"endTime"},field:{description:"Indicates the field name used for generating the data-driven visualization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#field Read more...}",type:["null","string"],title:"field"},maxSliderValue:{description:"Indicates the value of the upper handle if a slider was used to generate the visual variable.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#maxSliderValue Read more...}",type:["null","number"],title:"maxSliderValue"},minSliderValue:{description:"Indicates the value of the lower handle if a slider was used to generate the visual variable.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#minSliderValue Read more...}",type:["null","number"],title:"minSliderValue"},normalizationField:{description:"Only applicable when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme theme} is `reference-size`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#normalizationField Read more...}",type:["null","string"],title:"normalizationField"},referenceSizeScale:{description:"Only applicable when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme theme} is `reference-size`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeScale Read more...}",type:["null","number"],title:"referenceSizeScale"},referenceSizeSymbolStyle:{description:"Only applicable when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme theme} is `reference-size`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#referenceSizeSymbolStyle Read more...}",anyOf:[{enum:["circle","diamond","hexagon-flat","hexagon-pointy","square"],type:"string"},{type:"null"}],title:"referenceSizeSymbolStyle"},startTime:{description:"If an age or timeline renderer was generated, indicates the start\ntime of the visualization.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#startTime Read more...}",type:["null","string","number"],title:"startTime"},style:{description:"If the UI offers the option to display values based on a ratio or\npercentage, this indicates which selection was made.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#style Read more...}",anyOf:[{enum:["percent","percent-of-total","ratio"],type:"string"},{type:"null"}],title:"style"},theme:{description:"Indicates the theme selected by the user when generating a renderer\nor visual variable with one of the Smart Mapping functions.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme Read more...}",anyOf:[{enum:["above","above-and-below","below","centered-on","extremes","high-to-low","reference-size"],type:"string"},{type:"null"}],title:"theme"},type:{description:"The type of visual variable generated.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#type Read more...}",anyOf:[{enum:["color","opacity","size"],type:"string"},{type:"null"}],title:"type"},units:{description:"If an age or timeline renderer was generated, indicates the time units used.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#units Read more...}",anyOf:[{enum:["days","hours","minutes","months","seconds","years"],type:"string"},{type:"null"}],title:"units"},sizeStops:{description:"Only applicable when {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#theme theme} is `reference-size`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AuthoringInfoVisualVariable.html#sizeStops Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.SizeStop"}},{type:"null"}],title:"sizeStops"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.SizeStop":{title:"__esri.SizeStop",type:"object",properties:{label:{description:"A string value used to label the stop in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-SizeStop.html#label Read more...}",type:["null","string"],title:"label"},value:{description:"Specifies the data value to map to the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-SizeStop.html#size size}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-SizeStop.html#value Read more...}",type:"number",title:"value"},size:{description:"The size value in points (between `0` and `90`) used to render features with the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-SizeStop.html#value value}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-SizeStop.html#size Read more...}",type:"number",title:"size"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","size","value"]},"__esri.UniqueValueRenderer":{title:"__esri.UniqueValueRenderer",type:"object",properties:{defaultLabel:{description:"The label used in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend} to describe features assigned the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultSymbol default symbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultLabel Read more...}",type:["null","string"],title:"defaultLabel"},field:{description:"The name of the attribute field containing types or categorical values referenced\nin {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos uniqueValueInfos} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups uniqueValueGroups}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field Read more...}",type:["null","string"],title:"field"},field2:{description:"Specifies the name of an additional attribute field used to categorize features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field2 Read more...}",type:["null","string"],title:"field2"},field3:{description:"Specifies the name of a third attribute field used to categorize features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field3 Read more...}",type:["null","string"],title:"field3"},fieldDelimiter:{description:"A string used as a separator between the values in the legend\nif multiple attribute fields are used to categorize values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#fieldDelimiter Read more...}",type:["null","string"],title:"fieldDelimiter"},orderByClassesEnabled:{description:"Indicates whether the order of the classes or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos uniqueValueInfos} in the renderer definition\nshould be used for the feature drawing order of the layer.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#orderByClassesEnabled Read more...}",type:"boolean",title:"orderByClassesEnabled"},type:{description:"The type of Renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#type Read more...}",type:"string",const:"unique-value",title:"type"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade}\nexpression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},backgroundFillSymbol:{description:"This property is only relevant when symbolizing polygon features with marker symbols\n(or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-IconSymbol3DLayer.html IconSymbol3DLayer}) in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos uniqueValueInfos} of this renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#backgroundFillSymbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.FillSymbol"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{type:"null"}],title:"backgroundFillSymbol"},defaultSymbol:{description:"The symbol used to draw\nall features with values not referenced by {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos uniqueValueInfos} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups uniqueValueGroups}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultSymbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"defaultSymbol"},legendOptions:{description:"An object providing options for displaying the renderer in the Legend.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.UniqueValueRendererLegendOptions"},{type:"null"}],title:"legendOptions"},uniqueValueGroups:{description:"An array of objects defining groups of unique values.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.UniqueValueGroup"}},{type:"null"}],title:"uniqueValueGroups"},uniqueValueInfos:{description:"Defines categories and their corresponding symbols based on a set of values expected\nfrom the provided {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field field} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression valueExpression}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.UniqueValueInfo"}},{type:"null"}],title:"uniqueValueInfos"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html VisualVariable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.VisualVariable"}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","orderByClassesEnabled","type"]},"__esri.UniqueValueRendererLegendOptions":{title:"__esri.UniqueValueRendererLegendOptions",type:"object",properties:{title:{type:["null","string"],title:"title"}}},"__esri.UniqueValueGroup":{title:"__esri.UniqueValueGroup",type:"object",properties:{heading:{description:"The heading to be displayed for the group of unique classes in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueGroup.html#heading Read more...}",type:["null","string"],title:"heading"},classes:{description:"Specifies the classes (or unique categories) to group under a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueGroup.html#heading heading}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueGroup.html#classes Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.UniqueValueClass"}},{type:"null"}],title:"classes"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.UniqueValueClass":{title:"__esri.UniqueValueClass",type:"object",properties:{label:{description:"Describes the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#values values} represented by the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#symbol symbol} in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#label Read more...}",type:["null","string"],title:"label"},symbol:{description:"Defines the symbol used to represent features containing the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#values values}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#symbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"symbol"},values:{description:"An array of unique values that should be rendered with the same symbol.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html#values Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.UniqueValue"}},{type:"null"}],title:"values"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.UniqueValue":{title:"__esri.UniqueValue",type:"object",properties:{value:{description:"Defines a value (possibly in combination with {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value2 value2} and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value3 value3}) returned from the field\nreferenced in {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field UniqueValueRenderer.field}\nor returned from an Arcade expression defined in\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression UniqueValueRenderer.valueExpression} to be categorized\nin a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html UniqueValueClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value Read more...}",type:["null","string","number"],title:"value"},value2:{description:"Defines a value returned from the field referenced in {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field2 UniqueValueRenderer.field2}\nto be categorized in combination with {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value value} (and possibly {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value3 value3}) in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html UniqueValueClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value2 Read more...}",type:["null","string","number"],title:"value2"},value3:{description:"Defines a value returned from the field referenced in {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field3 UniqueValueRenderer.field3}\nto be categorized in combination with {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value value} and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value2 value2} in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueClass.html UniqueValueClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValue.html#value3 Read more...}",type:["null","string","number"],title:"value3"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.UniqueValueInfo":{title:"__esri.UniqueValueInfo",type:"object",properties:{label:{description:"Describes the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#value value} represented by the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#symbol symbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#label Read more...}",type:["null","string"],title:"label"},value:{description:"Features with this value will be rendered with the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#symbol symbol}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#value Read more...}",type:["string","number"],title:"value"},symbol:{description:"Defines the symbol used to render features with the provided {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#value value}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-UniqueValueInfo.html#symbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"symbol"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","value"]},"__esri.DictionaryRenderer":{title:"__esri.DictionaryRenderer",type:"object",properties:{config:{description:"This property allows you to set display options that can be configured on the dictionary symbol style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#config Read more...}",title:"config"},fieldMap:{description:"Defines a field mapping that maps input fields from the feature to the dictionary symbol style's expected fields for symbols and\ntext.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#fieldMap Read more...}",anyOf:[{$ref:"#/definitions/HashMap<string>"},{type:"null"}],title:"fieldMap"},scaleExpression:{description:"A scaling expression can be set to increase or decrease the size of the dictionary symbols.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#scaleExpression Read more...}",type:["null","string"],title:"scaleExpression"},scaleExpressionTitle:{description:"The title identifying and describing the associated {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade}\nexpression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#scaleExpression scaleExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#scaleExpressionTitle Read more...}",type:["null","string"],title:"scaleExpressionTitle"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#type Read more...}",type:"string",const:"dictionary",title:"type"},url:{description:"The URL to the dictionary style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#url Read more...}",type:["null","string"],title:"url"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html VisualVariable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DictionaryRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.VisualVariable"}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["config","declaredClass","destroyed","initialized","type"]},"HashMap<string>":{title:"HashMap<string>",type:"object"},"__esri.SimpleRenderer":{title:"__esri.SimpleRenderer",type:"object",properties:{label:{description:"The label for the renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-SimpleRenderer.html#label Read more...}",type:["null","string"],title:"label"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-SimpleRenderer.html#type Read more...}",type:"string",const:"simple",title:"type"},symbol:{description:"The symbol used by the renderer to visualize all features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-SimpleRenderer.html#symbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.LabelSymbol3D"},{$ref:"#/definitions/__esri.LineSymbol3D"},{$ref:"#/definitions/__esri.MeshSymbol3D"},{$ref:"#/definitions/__esri.PictureFillSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.PointSymbol3D"},{$ref:"#/definitions/__esri.PolygonSymbol3D"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{$ref:"#/definitions/__esri.SimpleLineSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"symbol"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html VisualVariable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-SimpleRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.VisualVariable"}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.DotDensityRenderer":{title:"__esri.DotDensityRenderer",type:"object",properties:{dotBlendingEnabled:{description:"Only applicable when two or more {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#attributes attributes} are specified.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#dotBlendingEnabled Read more...}",type:"boolean",title:"dotBlendingEnabled"},dotSize:{description:"Defines the size of the dots in points.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#dotSize Read more...}",type:"number",title:"dotSize"},dotValue:{description:"Defines the initial dot value used for visualizing density.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#dotValue Read more...}",type:"number",title:"dotValue"},referenceScale:{description:"When defined, the renderer will recalculate the dot value linearly based on the change in the view's scale\nusing the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#calculateDotValue calculateDotValue()} method.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#referenceScale Read more...}",type:"number",title:"referenceScale"},seed:{description:"When set to a consistent value, dot placements will be preserved for the same\nscale given all parameters are the same in the renderer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#seed Read more...}",type:"number",title:"seed"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#type Read more...}",type:"string",const:"dot-density",title:"type"},attributes:{description:"Defines the variable(s) used to visualize density.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#attributes Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AttributeColorInfo"},title:"attributes"},backgroundColor:{$ref:"#/definitions/__esri.Color",description:"The color used to shade the polygon fill behind the dots.",default:"[0, 0, 0, 0.25] - black, semitransparent\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#backgroundColor Read more...}",title:"backgroundColor"},legendOptions:{description:"An object providing options for configuring the renderer in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.DotDensityRendererLegendOptions"},{type:"null"}],title:"legendOptions"},outline:{$ref:"#/definitions/__esri.SimpleLineSymbol",description:"The outline of the polygon.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#outline Read more...}",title:"outline"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html Size Visual Variable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.VisualVariable"}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["attributes","backgroundColor","declaredClass","destroyed","dotBlendingEnabled","dotSize","dotValue","initialized","outline","referenceScale","seed","type"]},"__esri.AttributeColorInfo":{title:"__esri.AttributeColorInfo",type:"object",properties:{field:{description:"The name of the numeric attribute field represented by the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#color color}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#field Read more...}",type:["null","string"],title:"field"},label:{description:"The label used to describe the field or attribute in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend} widget.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#label Read more...}",type:["null","string"],title:"label"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},color:{description:"The color used to render dots representing the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#field field} in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-DotDensityRenderer.html DotDensityRenderer} or\nthe color used to represent a pie chart slice in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html PieChartRenderer}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-AttributeColorInfo.html#color Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.DotDensityRendererLegendOptions":{title:"__esri.DotDensityRendererLegendOptions",type:"object",properties:{unit:{type:["null","string"],title:"unit"}}},"__esri.PieChartRenderer":{title:"__esri.PieChartRenderer",type:"object",properties:{defaultLabel:{description:"Describes the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#defaultColor defaultColor} in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#defaultLabel Read more...}",type:["null","string"],title:"defaultLabel"},holePercentage:{description:"Use this property to create a donut chart.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#holePercentage Read more...}",type:"number",title:"holePercentage"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#type Read more...}",type:"string",const:"pie-chart",title:"type"},attributes:{description:"Defines the variable(s) to include in the pie charts.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#attributes Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AttributeColorInfo"},title:"attributes"},backgroundFillSymbol:{description:"The symbol used to render polygons behind the pie symbols.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#backgroundFillSymbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.SimpleFillSymbol"},{type:"null"}],title:"backgroundFillSymbol"},defaultColor:{$ref:"#/definitions/__esri.Color",description:"The color used to visualize features whose {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#attributes attributes} all have null or empty values.",default:"new Color([0, 0, 0, 0])\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#defaultColor Read more...}",title:"defaultColor"},legendOptions:{description:"An object providing options for describing the renderer in the Legend.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.PieChartRendererLegendOptions"},{type:"null"}],title:"legendOptions"},othersCategory:{description:'Defines the rules for how to aggregate small categories to a generic "others" category.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#othersCategory Read more...}',anyOf:[{$ref:"#/definitions/__esri.PieChartRendererOthersCategory"},{type:"null"}],title:"othersCategory"},outline:{description:"Defines the outline of the pie chart.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#outline Read more...}",anyOf:[{$ref:"#/definitions/__esri.SimpleLineSymbol"},{type:"null"}],title:"outline"},size:{description:"Defines the size of each pie chart in points.",default:"12\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#size Read more...}",type:"number",title:"size"},visualVariables:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html Size Visual Variable} objects.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-PieChartRenderer.html#visualVariables Read more...}",anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.OpacityVariable"},{$ref:"#/definitions/__esri.SizeVariable"}]}},{type:"null"}],title:"visualVariables"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["attributes","declaredClass","defaultColor","destroyed","holePercentage","initialized","size","type"]},"__esri.PieChartRendererLegendOptions":{title:"__esri.PieChartRendererLegendOptions",type:"object",properties:{title:{type:["null","string"],title:"title"}}},"__esri.PieChartRendererOthersCategory":{title:"__esri.PieChartRendererOthersCategory",type:"object",properties:{color:{$ref:"#/definitions/__esri.Color",title:"color"},label:{type:["null","string"],title:"label"},threshold:{type:"number",title:"threshold"}},required:["color","threshold"]},"__esri.OpacityVariable":{title:"__esri.OpacityVariable",type:"object",properties:{normalizationField:{description:"Name of the numeric attribute field by which to normalize\nthe data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-OpacityVariable.html#normalizationField Read more...}",type:["null","string"],title:"normalizationField"},type:{description:"The visual variable type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-OpacityVariable.html#type Read more...}",type:"string",const:"opacity",title:"type"},stops:{description:"An array of objects that defines the opacity to apply to features in a layer in a sequence of stops.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-OpacityVariable.html#stops Read more...}",type:"array",items:{$ref:"#/definitions/__esri.OpacityStop"},title:"stops"},field:{description:"The name of the numeric attribute field that contains the data\nvalues used to determine the color/opacity/size/rotation of each feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#field Read more...}",type:"string",title:"field"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},legendOptions:{description:"An object providing options for displaying the visual variable in\nthe {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.VisualVariableLegendOptions"},{type:"null"}],title:"legendOptions"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","field","initialized","stops","type","valueExpression","valueExpressionTitle"]},"__esri.OpacityStop":{title:"__esri.OpacityStop",type:"object",properties:{label:{description:"A string value used to label the stop in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-OpacityStop.html#label Read more...}",type:["null","string"],title:"label"},opacity:{description:"The opacity value (between `0.0` and `1.0`) used to render features with the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-OpacityStop.html#value value}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-OpacityStop.html#opacity Read more...}",type:"number",title:"opacity"},value:{description:"Specifies the data value to map to the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-OpacityStop.html#opacity opacity value}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-support-OpacityStop.html#value Read more...}",type:"number",title:"value"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","opacity","value"]},"__esri.SizeVariable":{title:"__esri.SizeVariable",type:"object",properties:{axis:{description:"Only applicable when working in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html SceneView}.",default:'"all"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#axis Read more...}',enum:["all","depth","height","width","width-and-depth"],type:"string",title:"axis"},maxDataValue:{description:"The maximum data value used in the size ramp.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#maxDataValue Read more...}",type:["null","number"],title:"maxDataValue"},minDataValue:{description:"The minimum data value used in the size ramp.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#minDataValue Read more...}",type:["null","number"],title:"minDataValue"},normalizationField:{description:"The name of the numeric attribute field used to normalize\nthe data in the given {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#field field}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#normalizationField Read more...}",type:["null","string"],title:"normalizationField"},target:{description:"This value must be `outline` when scaling polygon outline widths\nbased on the view scale.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#target Read more...}",type:["null","string"],title:"target"},type:{description:"The visual variable type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#type Read more...}",type:"string",const:"size",title:"type"},useSymbolValue:{description:"When setting a size visual variable on a renderer using an\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html ObjectSymbol3DLayer}, this property indicates whether to apply the value\ndefined by the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html#height height},\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html#width width}, or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-ObjectSymbol3DLayer.html#depth depth} properties to the corresponding {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#axis axis} of\nthis visual variable instead of proportionally scaling this axis' value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#useSymbolValue Read more...}",type:["null","boolean"],title:"useSymbolValue"},valueRepresentation:{description:"Specifies how to apply the data value when mapping real-world sizes.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#valueRepresentation Read more...}",anyOf:[{enum:["area","diameter","distance","radius","width"],type:"string"},{type:"null"}],title:"valueRepresentation"},valueUnit:{description:"Indicates the unit of measurement used to interpret the value returned by {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#field field} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#valueExpression valueExpression}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#valueUnit Read more...}",enum:["centimeters","decimeters","feet","inches","kilometers","meters","miles","millimeters","nautical-miles","unknown","yards"],type:"string",title:"valueUnit"},maxSize:{description:"The size used to render a feature containing the maximum data value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#maxSize Read more...}",anyOf:[{$ref:"#/definitions/__esri.SizeVariable"},{type:["null","number"]}],title:"maxSize"},minSize:{description:"The size used to render a feature containing the minimum data value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#minSize Read more...}",anyOf:[{$ref:"#/definitions/__esri.SizeVariable"},{type:["null","number"]}],title:"minSize"},stops:{description:"An array of objects that defines the mapping of data values returned from {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#field field} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#valueExpression valueExpression} to icon sizes.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-SizeVariable.html#stops Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.SizeStop"}},{type:"null"}],title:"stops"},field:{description:"The name of the numeric attribute field that contains the data\nvalues used to determine the color/opacity/size/rotation of each feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#field Read more...}",type:"string",title:"field"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the associated\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},legendOptions:{description:"An object providing options for displaying the visual variable in\nthe {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.VisualVariableLegendOptions"},{type:"null"}],title:"legendOptions"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["axis","declaredClass","destroyed","field","initialized","type","valueExpression","valueExpressionTitle","valueUnit"]},"__esri.HeatmapRenderer":{title:"__esri.HeatmapRenderer",type:"object",properties:{field:{description:"The name of the attribute field used to weight the density of each heatmap point.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#field Read more...}",type:"string",title:"field"},maxDensity:{description:"The max density value to be assigned a color in the heatmap surface.",default:"0.04\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#maxDensity Read more...}",type:"number",title:"maxDensity"},minDensity:{description:"The minimum density value to be assigned a color in the heatmap surface.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#minDensity Read more...}",type:"number",title:"minDensity"},referenceScale:{description:"When set, the heatmap's visualization at the given scale will remain static and not\nchange as the user zooms in and out of the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#referenceScale Read more...}",type:"number",title:"referenceScale"},type:{description:"The type of renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#type Read more...}",type:"string",const:"heatmap",title:"type"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#visualization Arcade Visualization Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},valueExpressionTitle:{description:"The title identifying and describing the {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade}\nexpression as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#valueExpression valueExpression} property.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#valueExpressionTitle Read more...}",type:["null","string"],title:"valueExpressionTitle"},colorStops:{description:"An array of objects describing the renderer's color ramp.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#colorStops Read more...}",type:"array",items:{$ref:"#/definitions/__esri.HeatmapColorStop"},title:"colorStops"},legendOptions:{description:"An object providing options for describing the renderer in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#legendOptions Read more...}",anyOf:[{$ref:"#/definitions/__esri.HeatmapRendererLegendOptions"},{type:"null"}],title:"legendOptions"},radius:{description:"The search radius (in points) used to create a smooth kernel surface fitted around each point.",default:"18\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#radius Read more...}",type:"number",title:"radius"},authoringInfo:{description:"Authoring metadata only included in renderers generated from one of the\nSmart Mapping creator methods, such as\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer sizeRendererCreator.createContinuousRenderer()} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer colorRendererCreator.createContinuousRenderer()}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.AuthoringInfo"},{type:"null"}],title:"authoringInfo"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["colorStops","declaredClass","destroyed","field","initialized","maxDensity","minDensity","radius","referenceScale","type"]},"__esri.HeatmapColorStop":{title:"__esri.HeatmapColorStop",type:"object",properties:{ratio:{description:"The ratio of a pixel's density value to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-HeatmapRenderer.html#maxDensity maxDensity} of the renderer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-HeatmapColorStop.html#ratio Read more...}",type:"number",title:"ratio"},color:{$ref:"#/definitions/__esri.Color",description:"The color to shade a given pixel based on its calculated density {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-HeatmapColorStop.html#ratio ratio}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-HeatmapColorStop.html#color Read more...}",title:"color"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["color","declaredClass","destroyed","initialized","ratio"]},"__esri.HeatmapRendererLegendOptions":{title:"__esri.HeatmapRendererLegendOptions",type:"object",properties:{minLabel:{type:["null","string"],title:"minLabel"},maxLabel:{type:["null","string"],title:"maxLabel"},title:{type:["null","string"],title:"title"}}},"__esri.FeatureReductionCluster":{title:"__esri.FeatureReductionCluster",type:"object",properties:{labelsVisible:{description:"Indicates whether to display labels for the clusters.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},maxScale:{description:"Defines the maximum {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#scale view scale} at which clustering is enabled.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#maxScale Read more...}",type:"number",title:"maxScale"},popupEnabled:{description:"Indicates whether to display the cluster popup.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},type:{description:"The feature reduction type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#type Read more...}",type:"string",const:"cluster",title:"type"},clusterMaxSize:{description:"Defines the symbol size of the largest cluster in points (or pixels if specified).",default:"37.5\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#clusterMaxSize Read more...}",type:"number",title:"clusterMaxSize"},clusterMinSize:{description:"Defines the symbol size of the smallest cluster in points (or pixels if specified).",default:"9\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#clusterMinSize Read more...}",type:"number",title:"clusterMinSize"},clusterRadius:{description:"Defines the radius in points (or pixels if specified) of the area in which multiple features will be grouped\nand visualized as a single cluster.",default:"60\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#clusterRadius Read more...}",type:"number",title:"clusterRadius"},fields:{description:"An array of aggregate fields that summarize layer {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields fields}\nfrom features contained within each cluster.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AggregateField"},title:"fields"},labelingInfo:{description:"Defines labels for clusters as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},popupTemplate:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html PopupTemplate} to apply to clustered graphics.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},renderer:{description:"The renderer used to override the default style of the clusters.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},symbol:{description:"A symbol used to override the default cluster style.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html#symbol Read more...}",anyOf:[{$ref:"#/definitions/__esri.CIMSymbol"},{$ref:"#/definitions/__esri.PictureMarkerSymbol"},{$ref:"#/definitions/__esri.SimpleMarkerSymbol"},{$ref:"#/definitions/__esri.TextSymbol"},{$ref:"#/definitions/__esri.WebStyleSymbol"},{type:"null"}],title:"symbol"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["clusterMaxSize","clusterMinSize","clusterRadius","declaredClass","destroyed","fields","initialized","labelsVisible","maxScale","popupEnabled","type"]},"__esri.FeatureReductionSelection":{title:"__esri.FeatureReductionSelection",type:"object",properties:{type:{description:"The feature reduction type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionSelection.html#type Read more...}",type:"string",const:"selection",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.LayerFloorInfo":{title:"__esri.LayerFloorInfo",type:"object",properties:{floorField:{description:"The field name derived from a floor-aware layer and used to filter features by floor level.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LayerFloorInfo.html#floorField Read more...}",type:"string",title:"floorField"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","floorField","initialized"]},"__esri.FormTemplate":{title:"__esri.FormTemplate",type:"object",properties:{description:{description:"The description of the form.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#description Read more...}",type:["null","string"],title:"description"},preserveFieldValuesWhenHidden:{description:"Indicates whether to retain or clear a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html form's} {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html field element} values.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#preserveFieldValuesWhenHidden Read more...}",type:"boolean",title:"preserveFieldValuesWhenHidden"},title:{description:"The string defining how to format the title displayed at the top of a form.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#title Read more...}",type:["null","string"],title:"title"},elements:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html form element}\nobjects that represent an ordered list of form elements.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#elements Read more...}",anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.FieldElement"},{$ref:"#/definitions/__esri.GroupElement"},{$ref:"#/definitions/__esri.RelationshipElement"},{$ref:"#/definitions/__esri.TextElement"},{$ref:"#/definitions/__esri.AttachmentElement"},{$ref:"#/definitions/__esri.UtilityNetworkAssociationsElement"}]}},{type:"null"}],title:"elements"},expressionInfos:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html ExpressionInfo} objects\nthat reference {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expressions following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#constraint Form Constraint Profile} or the\n{@link https://developers.arcgis.com/javascript/latest/arcade/#form-calculation Form Calculation Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.ExpressionInfo"}},{type:"null"}],title:"expressionInfos"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","preserveFieldValuesWhenHidden"]},"__esri.FieldElement":{title:"__esri.FieldElement",type:"object",properties:{editableExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the FormTemplate.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#editableExpression Read more...}",type:["null","string"],title:"editableExpression"},fieldName:{description:"The field name as defined by the feature layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#fieldName Read more...}",type:["null","string"],title:"fieldName"},hint:{description:"Contains a hint used to help editors while editing fields.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#hint Read more...}",type:["null","string"],title:"hint"},requiredExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#requiredExpression Read more...}",type:["null","string"],title:"requiredExpression"},type:{description:"Indicates the type of form {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#type Read more...}",type:"string",const:"field",title:"type"},valueExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},domain:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-CodedValueDomain.html coded value domain} or\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html range domain} of the field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#domain Read more...}",anyOf:[{$ref:"#/definitions/__esri.CodedValueDomain"},{$ref:"#/definitions/__esri.RangeDomain"},{type:"null"}],title:"domain"},input:{description:"The input to use for the element.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#input Read more...}",anyOf:[{$ref:"#/definitions/__esri.BarcodeScannerInput"},{$ref:"#/definitions/__esri.ComboBoxInput"},{$ref:"#/definitions/__esri.DatePickerInput"},{$ref:"#/definitions/__esri.DateTimeOffsetPickerInput"},{$ref:"#/definitions/__esri.DateTimePickerInput"},{$ref:"#/definitions/__esri.RadioButtonsInput"},{$ref:"#/definitions/__esri.SwitchInput"},{$ref:"#/definitions/__esri.TextAreaInput"},{$ref:"#/definitions/__esri.TextBoxInput"},{$ref:"#/definitions/__esri.TimePickerInput"},{type:"null"}],title:"input"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.BarcodeScannerInput":{title:"__esri.BarcodeScannerInput",type:"object",properties:{maxLength:{description:"When set, defines the text input's maximum length.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-BarcodeScannerInput.html#maxLength Read more...}",type:["null","number"],title:"maxLength"},minLength:{description:"When set, defines the text input's minimum length.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-BarcodeScannerInput.html#minLength Read more...}",type:["null","number"],title:"minLength"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-BarcodeScannerInput.html#type Read more...}",type:"string",const:"barcode-scanner",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.ComboBoxInput":{title:"__esri.ComboBoxInput",type:"object",properties:{noValueOptionLabel:{description:"The text used to represent a null value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-ComboBoxInput.html#noValueOptionLabel Read more...}",type:["null","string"],title:"noValueOptionLabel"},showNoValueOption:{description:"Determines whether a null value option is displayed.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-ComboBoxInput.html#showNoValueOption Read more...}",type:"boolean",title:"showNoValueOption"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-ComboBoxInput.html#type Read more...}",type:"string",const:"combo-box",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","showNoValueOption","type"]},"__esri.DatePickerInput":{title:"__esri.DatePickerInput",type:"object",properties:{max:{description:"The maximum date to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DatePickerInput.html#max Read more...}",type:["null","string"],title:"max"},min:{description:"The minimum date to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DatePickerInput.html#min Read more...}",type:["null","string"],title:"min"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DatePickerInput.html#type Read more...}",type:"string",const:"date-picker",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.DateTimeOffsetPickerInput":{title:"__esri.DateTimeOffsetPickerInput",type:"object",properties:{includeTimeOffset:{description:"Indicates if the input should provide an option to select the time offset.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimeOffsetPickerInput.html#includeTimeOffset Read more...}",type:"boolean",title:"includeTimeOffset"},max:{description:"The maximum date/time offset to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimeOffsetPickerInput.html#max Read more...}",type:["null","string"],title:"max"},min:{description:"The minimum date/time offset to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimeOffsetPickerInput.html#min Read more...}",type:["null","string"],title:"min"},timeResolution:{description:"The level of detail used to represent time.",default:'"minutes"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimeOffsetPickerInput.html#timeResolution Read more...}',enum:["milliseconds","minutes","seconds"],type:"string",title:"timeResolution"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimeOffsetPickerInput.html#type Read more...}",type:"string",const:"datetimeoffset-picker",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","includeTimeOffset","initialized","timeResolution","type"]},"__esri.DateTimePickerInput":{title:"__esri.DateTimePickerInput",type:"object",properties:{includeTime:{description:"Indicates if the input should provide an option to select the time.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimePickerInput.html#includeTime Read more...}",type:"boolean",title:"includeTime"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimePickerInput.html#type Read more...}",type:"string",const:"datetime-picker",title:"type"},max:{description:"The maximum date to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimePickerInput.html#max Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"max"},min:{description:"The minimum date to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-DateTimePickerInput.html#min Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"min"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","includeTime","initialized","type"]},"__esri.RadioButtonsInput":{title:"__esri.RadioButtonsInput",type:"object",properties:{noValueOptionLabel:{description:"The text used to represent a null value.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-RadioButtonsInput.html#noValueOptionLabel Read more...}",type:["null","string"],title:"noValueOptionLabel"},showNoValueOption:{description:"Determines whether a null value option is displayed.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-RadioButtonsInput.html#showNoValueOption Read more...}",type:"boolean",title:"showNoValueOption"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-RadioButtonsInput.html#type Read more...}",type:"string",const:"radio-buttons",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","showNoValueOption","type"]},"__esri.SwitchInput":{title:"__esri.SwitchInput",type:"object",properties:{offValue:{description:"Coded value used when the switch state is turned off.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-SwitchInput.html#offValue Read more...}",type:["string","number"],title:"offValue"},onValue:{description:"Coded value used when the switch state is turned on.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-SwitchInput.html#onValue Read more...}",type:["string","number"],title:"onValue"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-SwitchInput.html#type Read more...}",type:"string",const:"switch",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","offValue","onValue","type"]},"__esri.TextAreaInput":{title:"__esri.TextAreaInput",type:"object",properties:{maxLength:{description:"When set, defines the text input's maximum length.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextAreaInput.html#maxLength Read more...}",type:["null","number"],title:"maxLength"},minLength:{description:"When set, defines the text input's minimum length.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextAreaInput.html#minLength Read more...}",type:["null","number"],title:"minLength"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextAreaInput.html#type Read more...}",type:"string",const:"text-area",title:"type"}},required:["type"]},"__esri.TextBoxInput":{title:"__esri.TextBoxInput",type:"object",properties:{maxLength:{description:"When set, defines the text input's maximum length.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextBoxInput.html#maxLength Read more...}",type:["null","number"],title:"maxLength"},minLength:{description:"When set, defines the text input's minimum length.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextBoxInput.html#minLength Read more...}",type:["null","number"],title:"minLength"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TextBoxInput.html#type Read more...}",type:"string",const:"text-box",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.TimePickerInput":{title:"__esri.TimePickerInput",type:"object",properties:{max:{description:"The maximum time to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TimePickerInput.html#max Read more...}",type:["null","string"],title:"max"},min:{description:"The minimum time to allow.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TimePickerInput.html#min Read more...}",type:["null","string"],title:"min"},timeResolution:{description:"The level of detail used to represent time.",default:'"minutes"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TimePickerInput.html#timeResolution Read more...}',enum:["minutes","seconds"],type:"string",title:"timeResolution"},type:{description:"The type of form element input.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-TimePickerInput.html#type Read more...}",type:"string",const:"time-picker",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","timeResolution","type"]},"__esri.GroupElement":{title:"__esri.GroupElement",type:"object",properties:{initialState:{description:"Defines if the group should be expanded or collapsed when the form is initially displayed.",default:'"expanded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-GroupElement.html#initialState Read more...}',enum:["collapsed","expanded"],type:"string",title:"initialState"},type:{description:"The type of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-GroupElement.html#type Read more...}",type:"string",const:"group",title:"type"},elements:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html field}, {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html relationship}, and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-TextElement.html text} elements to display as grouped.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-GroupElement.html#elements Read more...}",type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.FieldElement"},{$ref:"#/definitions/__esri.RelationshipElement"},{$ref:"#/definitions/__esri.TextElement"}]},title:"elements"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","elements","initialState","initialized","label","type","visibilityExpression"]},"__esri.RelationshipElement":{title:"__esri.RelationshipElement",type:"object",properties:{displayCount:{description:"A numeric value indicating the maximum number of related features to display in the list of related records.",default:"3\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#displayCount Read more...}",type:["null","number"],title:"displayCount"},displayType:{description:"A string value indicating how to display related records within the relationship content.",default:'"list"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#displayType Read more...}',type:"string",const:"list",title:"displayType"},editableExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the FormTemplate.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#editableExpression Read more...}",type:["null","string"],title:"editableExpression"},relationshipId:{description:"The numeric id value for the defined relationship.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#relationshipId Read more...}",type:"number",title:"relationshipId"},type:{description:"Indicates the type of form {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#type Read more...}",type:"string",const:"relationship",title:"type"},orderByFields:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-RelatedRecordsInfoFieldOrder.html RelatedRecordsInfoFieldOrder}\nobjects indicating the field display order for the related records\nand whether they should be sorted in ascending `asc` or descending `desc` order.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-RelationshipElement.html#orderByFields Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.RelatedRecordsInfoFieldOrder"}},{type:"null"}],title:"orderByFields"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","displayType","initialized","label","relationshipId","type","visibilityExpression"]},"__esri.RelatedRecordsInfoFieldOrder":{title:"__esri.RelatedRecordsInfoFieldOrder",type:"object",properties:{field:{description:"The attribute value of the field selected that will drive\nthe sorting of related records.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-RelatedRecordsInfoFieldOrder.html#field Read more...}",type:"string",title:"field"},order:{description:"Set the ascending or descending sort order of the returned related records.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-RelatedRecordsInfoFieldOrder.html#order Read more...}",enum:["asc","desc"],type:"string",title:"order"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","field","initialized","order"]},"__esri.TextElement":{title:"__esri.TextElement",type:"object",properties:{text:{description:"The formatted string content to display.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-TextElement.html#text Read more...}",type:["null","string"],title:"text"},textFormat:{description:"Defines the format of the `text` property.",default:'"plain-text"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-TextElement.html#textFormat Read more...}',enum:["markdown","plain-text"],type:"string",title:"textFormat"},type:{description:"Indicates the type of form {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-TextElement.html#type Read more...}",type:"string",const:"text",title:"type"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","initialized","label","textFormat","type","visibilityExpression"]},"__esri.AttachmentElement":{title:"__esri.AttachmentElement",type:"object",properties:{allowUserRename:{description:"Determines whether the user renaming an attachment is allowed.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#allowUserRename Read more...}",type:["null","boolean"],title:"allowUserRename"},attachmentKeyword:{description:"A string to identify the attachment(s).",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#attachmentKeyword Read more...}",type:["null","string"],title:"attachmentKeyword"},displayFilename:{description:"Determines whether the file name should be displayed.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#displayFilename Read more...}",type:["null","boolean"],title:"displayFilename"},editableExpression:{description:"A reference to an Arcade expression that returns a boolean value.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#editableExpression Read more...}",type:["null","string"],title:"editableExpression"},filenameExpression:{description:"Determines the name of a new attachment.",default:"{attachmentKeyword}_{now}\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#filenameExpression Read more...}",type:["null","string"],title:"filenameExpression"},maxAttachmentCount:{description:"Defines the maximum number of attachments allowed for this element.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#maxAttachmentCount Read more...}",type:["null","number"],title:"maxAttachmentCount"},minAttachmentCount:{description:"Defines the minimum number of attachments required for this element.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#minAttachmentCount Read more...}",type:["null","number"],title:"minAttachmentCount"},type:{description:"The type of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#type Read more...}",type:"string",const:"attachment",title:"type"},useOriginalFilename:{description:"Determines whether the uploaded attachment's file name is preserved.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#useOriginalFilename Read more...}",type:["null","boolean"],title:"useOriginalFilename"},input:{description:"The input user interface to use for the attachment.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-AttachmentElement.html#input Read more...}",anyOf:[{$ref:"#/definitions/__esri.AttachmentInput"},{$ref:"#/definitions/__esri.AudioInput"},{$ref:"#/definitions/__esri.DocumentInput"},{$ref:"#/definitions/__esri.ImageInput"},{$ref:"#/definitions/__esri.SignatureInput"},{$ref:"#/definitions/__esri.VideoInput"},{type:"null"}],title:"input"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","description","destroyed","initialized","label","type","visibilityExpression"]},"__esri.AttachmentInput":{title:"__esri.AttachmentInput",type:"object",properties:{attachmentAssociationType:{description:"String value which indicates if existing attachments should be associated with the element and how they should be associated.",default:'"exact"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AttachmentInput.html#attachmentAssociationType Read more...}',enum:["any","exact","exactOrNone"],type:"string",title:"attachmentAssociationType"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AttachmentInput.html#type Read more...}",type:"string",const:"attachment",title:"type"},inputTypes:{description:"Available inputs to add an attachment.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AttachmentInput.html#inputTypes Read more...}",anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/__esri.AudioInput"},{$ref:"#/definitions/__esri.DocumentInput"},{$ref:"#/definitions/__esri.ImageInput"},{$ref:"#/definitions/__esri.SignatureInput"},{$ref:"#/definitions/__esri.VideoInput"}]}},{type:"null"}],title:"inputTypes"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["attachmentAssociationType","declaredClass","destroyed","initialized","type"]},"__esri.AudioInput":{title:"__esri.AudioInput",type:"object",properties:{inputMethod:{description:"The supported input methods used to attach an audio file.",default:"any\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AudioInput.html#inputMethod Read more...}",enum:["any","capture","upload"],type:"string",title:"inputMethod"},maxDuration:{description:"Defines the maximum length of an attachment for this element in seconds.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AudioInput.html#maxDuration Read more...}",type:["null","number"],title:"maxDuration"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-AudioInput.html#type Read more...}",type:"string",const:"audio",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","inputMethod","type"]},"__esri.DocumentInput":{title:"__esri.DocumentInput",type:"object",properties:{maxFileSize:{description:"Defines the maximum length of an attachment for this element in megabytes.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-DocumentInput.html#maxFileSize Read more...}",type:["null","number"],title:"maxFileSize"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-DocumentInput.html#type Read more...}",type:"string",const:"document",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","type"]},"__esri.ImageInput":{title:"__esri.ImageInput",type:"object",properties:{inputMethod:{description:"The supported input methods used to attach an image.",default:"any\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-ImageInput.html#inputMethod Read more...}",enum:["any","capture","upload"],type:"string",title:"inputMethod"},maxImageSize:{description:"Number of pixels on the longest edge depending on orientation.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-ImageInput.html#maxImageSize Read more...}",type:["null","number"],title:"maxImageSize"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-ImageInput.html#type Read more...}",type:"string",const:"image",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","inputMethod","type"]},"__esri.SignatureInput":{title:"__esri.SignatureInput",type:"object",properties:{inputMethod:{description:"The supported input methods used to attach a signature.",default:"any\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-SignatureInput.html#inputMethod Read more...}",enum:["any","capture","upload"],type:"string",title:"inputMethod"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-SignatureInput.html#type Read more...}",type:"string",const:"signature",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","inputMethod","type"]},"__esri.VideoInput":{title:"__esri.VideoInput",type:"object",properties:{inputMethod:{description:"The supported input methods used to attach a video.",default:"any\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-VideoInput.html#inputMethod Read more...}",enum:["any","capture","upload"],type:"string",title:"inputMethod"},maxDuration:{description:"Defines the maximum length of an attachment for this element in seconds.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-VideoInput.html#maxDuration Read more...}",type:["null","number"],title:"maxDuration"},type:{description:"The input type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-inputs-attachments-VideoInput.html#type Read more...}",type:"string",const:"video",title:"type"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","inputMethod","type"]},"__esri.UtilityNetworkAssociationsElement":{title:"__esri.UtilityNetworkAssociationsElement",type:"object",properties:{editableExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the FormTemplate.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-UtilityNetworkAssociationsElement.html#editableExpression Read more...}",type:["null","string"],title:"editableExpression"},type:{description:"Indicates the type of form {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html element}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-UtilityNetworkAssociationsElement.html#type Read more...}",type:"string",const:"utilityNetworkAssociations",title:"type"},associationTypes:{description:"The association types.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-UtilityNetworkAssociationsElement.html#associationTypes Read more...}",type:"array",items:{$ref:"#/definitions/__esri.UtilityNetworkAssociationType"},title:"associationTypes"},description:{description:"The element's description providing the purpose behind it.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description Read more...}",type:["null","string"],title:"description"},label:{description:"A string value containing the field alias.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label Read more...}",type:["null","string"],title:"label"},visibilityExpression:{description:"A reference to the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name name} of an\n{@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression defined in the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos expressionInfos} of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html FormTemplate}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression Read more...}",type:["null","string"],title:"visibilityExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["associationTypes","declaredClass","description","destroyed","initialized","label","type","visibilityExpression"]},"__esri.UtilityNetworkAssociationType":{title:"__esri.UtilityNetworkAssociationType",type:"object",properties:{associatedAssetGroup:{description:"This property is used to filter the associations by asset group.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#associatedAssetGroup Read more...}",type:"number",title:"associatedAssetGroup"},associatedAssetType:{description:"This property is used to filter the associations by asset type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#associatedAssetType Read more...}",type:"number",title:"associatedAssetType"},associatedNetworkSourceId:{description:"This property is used to filter the associations by network sourceId.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#associatedNetworkSourceId Read more...}",type:"number",title:"associatedNetworkSourceId"},description:{description:"The description for the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#type type} of association in the list of association {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#type types} on the popup or form.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#description Read more...}",type:"string",title:"description"},title:{description:"The title for the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#type type} of association in the list of association {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#type types} on the popup or form.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#title Read more...}",type:"string",title:"title"},type:{description:"The type of association.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-support-UtilityNetworkAssociationType.html#type Read more...}",enum:["attachment","connectivity","container","content","structure"],type:"string",title:"type"}},required:["associatedAssetGroup","associatedAssetType","associatedNetworkSourceId","description","title","type"]},"__esri.ExpressionInfo":{title:"__esri.ExpressionInfo",type:"object",properties:{expression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression following the specification\ndefined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#forms Form Constraint} or {@link https://developers.arcgis.com/javascript/latest/arcade/#form-calculation Form Calculation} profiles.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#expression Read more...}",type:"string",title:"expression"},name:{description:"The name of the expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name Read more...}",type:"string",title:"name"},returnType:{description:"Indicates the return type of the Arcade expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#returnType Read more...}",enum:["boolean","date","number","string"],type:"string",title:"returnType"},title:{description:"The title used to describe the value returned by the expression.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#title Read more...}",type:["null","string"],title:"title"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","expression","initialized","name","returnType"]},"__esri.OrderByInfo":{title:"__esri.OrderByInfo",type:"object",properties:{field:{description:"The number or date field whose values will be used to sort features.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#field Read more...}",type:["null","string"],title:"field"},order:{description:"The sort order.",default:'"ascending"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#order Read more...}',enum:["ascending","descending"],type:"string",title:"order"},valueExpression:{description:"An {@link https://developers.arcgis.com/javascript/latest/arcade/ Arcade} expression\nfollowing the specification defined by the {@link https://developers.arcgis.com/javascript/latest/arcade/#feature-sorting Arcade Feature Z Profile}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#valueExpression Read more...}",type:["null","string"],title:"valueExpression"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","order"]},"__esri.Collection<__esri.Graphic>":{title:"__esri.Collection<__esri.Graphic>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.FeatureTemplate":{title:"__esri.FeatureTemplate",type:"object",properties:{description:{description:"Description of the feature template.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html#description Read more...}",type:["null","string"],title:"description"},drawingTool:{description:"Name of the default drawing tool defined for the template to create a feature.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html#drawingTool Read more...}",anyOf:[{enum:["arrow","auto-complete-polygon","circle","down-arrow","ellipse","freehand","left-arrow","line","none","point","polygon","rectangle","right-arrow","triangle","up-arrow"],type:"string"},{type:"null"}],title:"drawingTool"},name:{description:"Name of the feature template.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html#name Read more...}",type:["null","string"],title:"name"},prototype:{description:"An instance of the prototypical feature described by the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html feature template}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html#prototype Read more...}",title:"prototype"},thumbnail:{description:"An object used to create a thumbnail image that represents a feature type in the feature template.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html#thumbnail Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureTemplateThumbnail"},{type:"null"}],title:"thumbnail"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","prototype"]},"__esri.FeatureTemplateThumbnail":{title:"__esri.FeatureTemplateThumbnail",type:"object",properties:{contentType:{enum:["image","jpeg","jpg","png"],type:"string",title:"contentType"},imageData:{type:"string",title:"imageData"},height:{type:"number",title:"height"},width:{type:"number",title:"width"}},required:["contentType","height","imageData","width"]},"__esri.TimeInfo":{title:"__esri.TimeInfo",type:"object",properties:{endField:{description:"The name of the field containing the end time information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField Read more...}",type:["null","string"],title:"endField"},startField:{description:"The name of the field containing the start time information.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField Read more...}",type:["null","string"],title:"startField"},stops:{description:"Indicates the time instants that the layer has data for.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#stops Read more...}",anyOf:[{type:"array",items:{type:"string",format:"date-time"}},{type:"null"}],title:"stops"},timeZone:{description:"The IANA time zone that dates are stored in.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#timeZone Read more...}",type:["null","string"],title:"timeZone"},trackIdField:{description:"The name of the field used to join or group discrete locations.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#trackIdField Read more...}",type:["null","string"],title:"trackIdField"},fullTimeExtent:{description:"The time extent defines the start time and end time for all data in the layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"fullTimeExtent"},interval:{description:"The time interval defines the granularity of the temporal data and allows you to\nvisualize the data at specified intervals using the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html time slider widget}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#interval Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"interval"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized"]},"__esri.TimeInterval":{title:"__esri.TimeInterval",type:"object",properties:{unit:{description:"Temporal units.",default:'"milliseconds"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html#unit Read more...}',enum:["centuries","days","decades","hours","milliseconds","minutes","months","seconds","weeks","years"],type:"string",title:"unit"},value:{description:"The numerical value of the time extent.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html#value Read more...}",type:"number",title:"value"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","unit","value"]},"__esri.TrackInfo":{title:"__esri.TrackInfo",type:"object",properties:{enabled:{description:"Indicates whether the track info is enabled.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#enabled Read more...}",type:"boolean",title:"enabled"},maxDisplayObservationsPerTrack:{description:"The maximum number of observations to display per track.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayObservationsPerTrack Read more...}",type:"number",title:"maxDisplayObservationsPerTrack"},popupEnabled:{description:"Indicates whether to display the popup for the track as defined in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate popupTemplate}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},timeField:{description:"Indicates which field from the layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html timeInfo} will be used to\ncalculate observation ages for {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration trackInfo.maxDisplayDuration}.",default:'"startTimeField"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#timeField Read more...}',enum:["endTimeField","startTimeField","timeReceived"],type:"string",title:"timeField"},fields:{description:"An array of aggregate fields that summarize {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields layer.fields}\nin all observations of the track.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.AggregateField"},title:"fields"},latestObservations:{$ref:"#/definitions/__esri.TrackPartInfo",description:"Configuration properties for displaying the latest observations.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#latestObservations Read more...}",title:"latestObservations"},maxDisplayDuration:{description:"The maximum age of displayed observations.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"maxDisplayDuration"},popupTemplate:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html PopupTemplate} to apply to the track.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},previousObservations:{$ref:"#/definitions/__esri.TrackPartInfo",description:"Configuration properties for displaying previous observations.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#previousObservations Read more...}",title:"previousObservations"},trackLines:{$ref:"#/definitions/__esri.TrackPartInfo",description:"Configuration properties for displaying track lines.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#trackLines Read more...}",title:"trackLines"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","enabled","fields","initialized","latestObservations","maxDisplayObservationsPerTrack","popupEnabled","previousObservations","timeField","trackLines"]},"__esri.TrackPartInfo":{title:"__esri.TrackPartInfo",type:"object",properties:{labelsVisible:{description:"Indicates whether to display labels for the track.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackPartInfo.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},visible:{description:"Indicates whether the renderer of the track part is visible.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackPartInfo.html#visible Read more...}",type:"boolean",title:"visible"},labelingInfo:{description:"Defines labels for the track part as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackPartInfo.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},renderer:{description:"The renderer used to style the track part.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackPartInfo.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","labelsVisible","visible"]},"__esri.FeatureType":{title:"__esri.FeatureType",type:"object",properties:{domains:{$ref:"#/definitions/HashMap<__esri.CodedValueDomain|__esri.InheritedDomain|__esri.RangeDomain>",description:"Domains associated with the feature type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html#domains Read more...}",title:"domains"},id:{description:"The feature type identifier.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html#id Read more...}",type:["string","number"],title:"id"},name:{description:"The feature type name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html#name Read more...}",type:"string",title:"name"},templates:{description:"Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureTemplate.html feature templates} associated with the feature type.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureType.html#templates Read more...}",type:"array",items:{$ref:"#/definitions/__esri.FeatureTemplate"},title:"templates"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","domains","id","initialized","name","templates"]},"__esri.CatalogLayer":{title:"__esri.CatalogLayer",type:"object",properties:{apiKey:{description:"An authorization string used to access a resource or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#apiKey Read more...}",type:["null","string"],title:"apiKey"},blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},capabilities:{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#capabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"capabilities"},copyright:{description:"Copyright information for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#copyright Read more...}",type:["null","string"],title:"copyright"},customParameters:{description:"A list of custom parameters appended to the URL of all resources fetched by the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#customParameters Read more...}",title:"customParameters"},dateFieldsTimeZone:{description:"The time zone that dates are stored in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#dateFieldsTimeZone Read more...}",type:["null","string"],title:"dateFieldsTimeZone"},datesInUnknownTimezone:{description:"This property is set by the service publisher and indicates that dates should be considered without the local timezone.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#datesInUnknownTimezone Read more...}",type:"boolean",title:"datesInUnknownTimezone"},definitionExpression:{description:"The SQL where clause used to filter features on the client.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#definitionExpression Read more...}",type:["null","string"],title:"definitionExpression"},displayField:{description:"The name of the layer's primary display field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#displayField Read more...}",type:["null","string"],title:"displayField"},displayFilterEnabled:{description:"Indicates whether the layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#displayFilterInfo displayFilterInfo} is applied when rendering the layer in the view.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#displayFilterEnabled Read more...}",type:"boolean",title:"displayFilterEnabled"},displayFilterInfo:{description:"Information related to a display filter associated with a layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#displayFilterInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.DisplayFilterInfo"},{type:"null"}],title:"displayFilterInfo"},drawOrderField:{description:"The draw order field holds the value to sort catalog items (layers).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#drawOrderField Read more...}",type:"string",const:"cd_draworder",title:"drawOrderField"},dynamicGroupLayer:{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer",description:"The dynamicGroupLayer includes the catalog items (layers) that are currently visible in your view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#dynamicGroupLayer Read more...}",title:"dynamicGroupLayer"},editFieldsInfo:{description:"The editor tracking fields, which record who adds or edits the data through the feature service\nand when edits are made.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#editFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditFieldsInfo"},{type:"null"}],title:"editFieldsInfo"},editingInfo:{description:"Specifies information about editing.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#editingInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditingInfo"},{type:"null"}],title:"editingInfo"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},effectiveCapabilities:{description:"Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#effectiveCapabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"effectiveCapabilities"},effectiveEditingEnabled:{description:"Indicates whether the layer is editable taking in to consideration privileges of the\ncurrently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#effectiveEditingEnabled Read more...}",type:"boolean",title:"effectiveEditingEnabled"},fields:{description:"An array of fields in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#fields Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Field"}},{type:"null"}],title:"fields"},fieldsIndex:{$ref:"#/definitions/__esri.FieldsIndex",description:"A convenient property that can be used to make case-insensitive lookups for a field by name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#fieldsIndex Read more...}",title:"fieldsIndex"},footprintLayer:{$ref:"#/definitions/__esri.CatalogFootprintLayer",description:"The footprint layer is a layer that displays footprints of items referenced in a CatalogLayer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#footprintLayer Read more...}",title:"footprintLayer"},gdbVersion:{description:"The version of the geodatabase of the feature service data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#gdbVersion Read more...}",type:["null","string"],title:"gdbVersion"},geometryFieldsInfo:{description:"Provides information on the system maintained area and length fields along with their respective units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#geometryFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.GeometryFieldsInfo"},{type:"null"}],title:"geometryFieldsInfo"},geometryType:{description:"The geometry type of features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#geometryType Read more...}",type:"string",const:"polygon",title:"geometryType"},hasM:{description:"Indicates whether the client-side features in the layer have `M` (measurement) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates whether the client-side features in the layer have `Z` (elevation) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#hasZ Read more...}",type:"boolean",title:"hasZ"},isTable:{description:"Returns `true` if the layer is loaded from a non-spatial table in a service.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#isTable Read more...}",type:"boolean",title:"isTable"},itemNameField:{description:"The item name field stores the name of the catalog item referenced in the CatalogLayer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#itemNameField Read more...}",type:"string",const:"cd_itemname",title:"itemNameField"},itemSourceField:{description:"The item source field stores the original source path of the catalog item.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#itemSourceField Read more...}",type:"string",const:"cd_itemsource",title:"itemSourceField"},itemTypeField:{description:"The item type field stores the type of the catalog item, such as `Feature Service` or `Map Service`.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#itemTypeField Read more...}",type:"string",const:"cd_itemtype",title:"itemTypeField"},layerId:{description:"The layer ID, or layer index, of a Feature Service layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#layerId Read more...}",type:["null","number"],title:"layerId"},layers:{$ref:"#/definitions/__esri.Collection<__esri.CatalogFootprintLayer|__esri.CatalogDynamicGroupLayer>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html CatalogFootprintLayer} and {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html CatalogDynamicGroupLayers}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#layers Read more...}",title:"layers"},legendEnabled:{description:"Indicates whether the layer will be included in the legend.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#legendEnabled Read more...}",type:"boolean",title:"legendEnabled"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},maxScaleField:{description:"The max scale field holds the maximum scale at which the catalog item is visible in the view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#maxScaleField Read more...}",type:"string",const:"cd_maxscale",title:"maxScaleField"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#minScale Read more...}",type:"number",title:"minScale"},minScaleField:{description:"The min scale field holds the minimum scale at which the catalog item is visible in the view.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#minScaleField Read more...}",type:"string",const:"cd_minscale",title:"minScaleField"},objectIdField:{description:"The name of an `oid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#fields field} containing\na unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#objectIdField Read more...}",type:"string",title:"objectIdField"},outFields:{description:"An array of field names from the service to include with each feature.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#outFields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"outFields"},persistenceEnabled:{description:"Enable persistence of the layer in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html WebScene}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},preferredTimeZone:{description:"The IANA time zone the author of the service intended data from date fields to be viewed in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#preferredTimeZone Read more...}",type:["null","string"],title:"preferredTimeZone"},refreshInterval:{description:"Refresh interval of the layer in minutes.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#refreshInterval Read more...}",type:"number",title:"refreshInterval"},relationships:{description:"Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html relationships} set up for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#relationships Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Relationship"}},{type:"null"}],title:"relationships"},returnM:{description:"When `true`, indicates that M values will be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#returnM Read more...}",type:["null","boolean"],title:"returnM"},returnZ:{description:"When `true`, indicates that z-values will always be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#returnZ Read more...}",type:["null","boolean"],title:"returnZ"},serviceDefinitionExpression:{description:"The service definition expression limits the features available for display and query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#serviceDefinitionExpression Read more...}",type:["null","string"],title:"serviceDefinitionExpression"},serviceItemId:{description:"Indicates the portal item of the hosted feature service that contains this layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#serviceItemId Read more...}",type:["null","string"],title:"serviceItemId"},sourceJSON:{description:"The [feature service's metadata JSON](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm)\nexposed by the ArcGIS REST API.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#sourceJSON Read more...}",title:"sourceJSON"},subtypeField:{description:"The name of the field which holds the id of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#subtypes subtypes}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#subtypeField Read more...}",type:["null","string"],title:"subtypeField"},subtypes:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html subtypes} defined in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#subtypes Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Subtype"}},{type:"null"}],title:"subtypes"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widgets.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#title Read more...}",type:["null","string"],title:"title"},type:{type:"string",const:"catalog",title:"type"},url:{description:"The absolute URL of the REST endpoint of the layer, non-spatial table or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#url Read more...}",type:["null","string"],title:"url"},useViewTime:{description:"Determines if the time enabled layer will update its temporal data based on the view's\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent timeExtent}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#useViewTime Read more...}",type:"boolean",title:"useViewTime"},version:{description:"The version of ArcGIS Server in which the layer is published.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#version Read more...}",type:["null","number"],title:"version"},elevationInfo:{description:"Specifies how features are placed on the vertical axis (z).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#elevationInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureLayerBaseElevationInfo"},{type:"null"}],title:"elevationInfo"},floorInfo:{description:"When a feature layer is configured as floor-aware, it has a floorInfo property defined.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#floorInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.LayerFloorInfo"},{type:"null"}],title:"floorInfo"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},historicMoment:{description:"The historic moment to query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#historicMoment Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"historicMoment"},orderBy:{description:"Determines the order in which features are drawn in the view.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#orderBy Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.OrderByInfo"}},{type:"null"}],title:"orderBy"},portalItem:{description:"The portal item from which the layer is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#portalItem Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalItem"},{type:"null"}],title:"portalItem"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#spatialReference Read more...}",title:"spatialReference"},timeExtent:{description:"The layer's time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#timeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"timeExtent"},timeInfo:{description:"TimeInfo provides information such as date fields that store\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField start}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField end} time\nfor each feature and the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent fullTimeExtent}\nfor the layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#timeInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInfo"},{type:"null"}],title:"timeInfo"},timeOffset:{description:"A temporary offset of the time data based on a certain {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html TimeInterval}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#timeOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"timeOffset"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["blendMode","customParameters","datesInUnknownTimezone","declaredClass","destroyed","displayFilterEnabled","drawOrderField","dynamicGroupLayer","effectiveEditingEnabled","fieldsIndex","footprintLayer","geometryType","hasM","hasZ","id","initialized","isTable","itemNameField","itemSourceField","itemTypeField","layers","legendEnabled","listMode","loadError","loadStatus","loadWarnings","loaded","maxScale","maxScaleField","minScale","minScaleField","objectIdField","opacity","parent","persistenceEnabled","refreshInterval","sourceJSON","spatialReference","type","useViewTime","visible"]},"__esri.CatalogDynamicGroupLayer":{title:"__esri.CatalogDynamicGroupLayer",type:"object",properties:{blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},layers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layers} referenced in the CatalogLayer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#layers Read more...}",title:"layers"},legendEnabled:{description:"Indicates whether the layer will be included in the legend.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#legendEnabled Read more...}",type:"boolean",title:"legendEnabled"},maximumVisibleSublayers:{description:"The maximum number of sublayers that can be visible at once in a CatalogDynamicGroupLayer.",default:"10\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#maximumVisibleSublayers Read more...}",type:"number",title:"maximumVisibleSublayers"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogDynamicGroupLayer.html#minScale Read more...}",type:"number",title:"minScale"},type:{type:"string",const:"catalog-dynamic-group",title:"type"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},persistenceEnabled:{description:"When `true`, the layer can be persisted.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title Read more...}",type:["null","string"],title:"title"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["blendMode","declaredClass","destroyed","id","initialized","layers","legendEnabled","listMode","loadError","loadStatus","loadWarnings","loaded","maxScale","maximumVisibleSublayers","minScale","opacity","parent","persistenceEnabled","type","visible"]},"__esri.Map":{title:"__esri.Map",type:"object",properties:{allLayers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A flattened collection of all {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layers} in the map.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#allLayers Read more...}",title:"allLayers"},allTables:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A flattened collection of tables anywhere in the map's hierarchy.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#allTables Read more...}",title:"allTables"},editableLayers:{$ref:"#/definitions/__esri.Collection<__esri.FeatureLayer|__esri.GeoJSONLayer|__esri.OrientedImageryLayer|__esri.SubtypeGroupLayer|__esri.SceneLayer>",description:"A collection of editable layers.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#editableLayers Read more...}",title:"editableLayers"},basemap:{description:"Specifies a basemap for the map.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap Read more...}",anyOf:[{$ref:"#/definitions/__esri.Basemap"},{type:"null"}],title:"basemap"},ground:{$ref:"#/definitions/__esri.Ground",description:"Specifies the surface properties for the map.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#ground Read more...}",title:"ground"},layers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of operational {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layers}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers Read more...}",title:"layers"},tables:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layer} instances that are tables\nsaved in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html Map} and/or a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#tables Read more...}",title:"tables"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["allLayers","allTables","declaredClass","destroyed","editableLayers","ground","initialized","layers","tables"]},"__esri.Collection<__esri.FeatureLayer|__esri.GeoJSONLayer|__esri.OrientedImageryLayer|__esri.SubtypeGroupLayer|__esri.SceneLayer>":{title:"__esri.Collection<__esri.FeatureLayer|__esri.GeoJSONLayer|__esri.OrientedImageryLayer|__esri.SubtypeGroupLayer|__esri.SceneLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.Ground":{title:"__esri.Ground",type:"object",properties:{loaded:{description:"Indicates whether the instance has loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"Opacity of the ground, including surface default color and the basemap (without reference layers).",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#opacity Read more...}",type:"number",title:"opacity"},layers:{$ref:"#/definitions/__esri.Collection<__esri.BaseElevationLayer|__esri.ElevationLayer>",description:"A collection of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html ElevationLayers}\nthat define the elevation or terrain that makes up the ground surface.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#layers Read more...}",title:"layers"},navigationConstraint:{description:"Specifies the user navigation constraints relative to\nthe ground surface.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#navigationConstraint Read more...}",anyOf:[{$ref:"#/definitions/__esri.GroundNavigationConstraint"},{type:"null"}],title:"navigationConstraint"},surfaceColor:{description:"The color of the ground surface, displayed underneath the basemap.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Ground.html#surfaceColor Read more...}",anyOf:[{$ref:"#/definitions/__esri.Color"},{type:"null"}],title:"surfaceColor"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","layers","loadStatus","loadWarnings","loaded","opacity"]},"__esri.Collection<__esri.BaseElevationLayer|__esri.ElevationLayer>":{title:"__esri.Collection<__esri.BaseElevationLayer|__esri.ElevationLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.GroundNavigationConstraint":{title:"__esri.GroundNavigationConstraint",type:"object",properties:{type:{enum:["none","stay-above"],type:"string",title:"type"}},required:["type"]},"__esri.GroupLayer":{title:"__esri.GroupLayer",type:"object",properties:{allLayers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A flattened collection of all {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layers} in the group layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#allLayers Read more...}",title:"allLayers"},allTables:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A flattened collection of tables anywhere in the group layer's hierarchy.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#allTables Read more...}",title:"allTables"},blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#minScale Read more...}",type:"number",title:"minScale"},persistenceEnabled:{description:"Enable persistence of the layer in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html WebScene}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},type:{type:"string",const:"group",title:"type"},visibilityMode:{description:"Indicates how to manage the visibility of the children layers.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#visibilityMode Read more...}",enum:["exclusive","independent","inherited"],type:"string",title:"visibilityMode"},layers:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of operational {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layers}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#layers Read more...}",title:"layers"},portalItem:{description:"The portal item from which the layer is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#portalItem Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalItem"},{type:"null"}],title:"portalItem"},tables:{$ref:"#/definitions/__esri.Collection<__esri.Layer>",description:"A collection of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html layer} instances that are tables\nsaved in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html Map} and/or a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GroupLayer.html#tables Read more...}",title:"tables"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title Read more...}",type:["null","string"],title:"title"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["allLayers","allTables","blendMode","declaredClass","destroyed","id","initialized","layers","listMode","loadError","loadStatus","loadWarnings","loaded","maxScale","minScale","opacity","parent","persistenceEnabled","tables","title","type","visibilityMode","visible"]},"__esri.CatalogFootprintLayer":{title:"__esri.CatalogFootprintLayer",type:"object",properties:{apiKey:{description:"An authorization string used to access a resource or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#apiKey Read more...}",type:["null","string"],title:"apiKey"},blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},capabilities:{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#capabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"capabilities"},charts:{description:"Array of Chart Items of type WebMapWebChart available on the footprint layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#charts Read more...}",anyOf:[{type:"array",items:{}},{type:"null"}],title:"charts"},customParameters:{description:"A list of custom parameters appended to the URL of all resources fetched by the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#customParameters Read more...}",title:"customParameters"},dateFieldsTimeZone:{description:"The time zone that dates are stored in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#dateFieldsTimeZone Read more...}",type:["null","string"],title:"dateFieldsTimeZone"},datesInUnknownTimezone:{description:"This property is set by the service publisher and indicates that dates should be considered without the local timezone.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#datesInUnknownTimezone Read more...}",title:"datesInUnknownTimezone"},definitionExpression:{description:"The SQL where clause used to filter features on the client.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#definitionExpression Read more...}",type:["null","string"],title:"definitionExpression"},displayField:{description:"The name of the layer's primary display field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#displayField Read more...}",type:["null","string"],title:"displayField"},displayFilterEnabled:{description:"Indicates whether the layer supports display filters.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#displayFilterEnabled Read more...}",type:"boolean",title:"displayFilterEnabled"},displayFilterInfo:{description:"Information pertaining to a display filter associated with a layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#displayFilterInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.DisplayFilterInfo"},{type:"null"}],title:"displayFilterInfo"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},effectiveCapabilities:{description:"Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#effectiveCapabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"effectiveCapabilities"},fields:{description:"An array of fields in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#fields Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Field"}},{type:"null"}],title:"fields"},fieldsIndex:{$ref:"#/definitions/__esri.FieldsIndex",description:"A convenient property that can be used to make case-insensitive lookups for a field by name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#fieldsIndex Read more...}",title:"fieldsIndex"},geometryFieldsInfo:{description:"Provides information on the system maintained area and length fields along with their respective units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#geometryFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.GeometryFieldsInfo"},{type:"null"}],title:"geometryFieldsInfo"},geometryType:{description:"The geometry type of features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#geometryType Read more...}",type:"string",const:"polygon",title:"geometryType"},hasM:{description:"Indicates whether the client-side features in the layer have `M` (measurement) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates whether the client-side features in the layer have `Z` (elevation) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#hasZ Read more...}",type:"boolean",title:"hasZ"},labelsVisible:{description:"Indicates whether to display labels for this layer.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},legendEnabled:{description:"Indicates whether the layer will be included in the legend.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#legendEnabled Read more...}",type:"boolean",title:"legendEnabled"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#minScale Read more...}",type:"number",title:"minScale"},objectIdField:{description:"The name of an `oid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#fields field} containing a unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#objectIdField Read more...}",type:"string",title:"objectIdField"},orderBy:{description:"The rendering order of features in the view based on the CatalogLayer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html#orderBy orderBy} property.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#orderBy Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.OrderByInfo"}},{type:"null"}],title:"orderBy"},outFields:{description:"An array of field names from the service to include with each feature.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#outFields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"outFields"},popupEnabled:{description:"Indicates whether to display popups when features in the layer are clicked.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},preferredTimeZone:{description:"The IANA time zone the author of the service intended data from date fields to be viewed in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#preferredTimeZone Read more...}",type:["null","string"],title:"preferredTimeZone"},returnM:{description:"When `true`, indicates that m-values will be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#returnM Read more...}",type:["null","boolean"],title:"returnM"},returnZ:{description:"When `true`, indicates that z-values will always be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#returnZ Read more...}",type:["null","boolean"],title:"returnZ"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference the source data is stored in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#spatialReference Read more...}",title:"spatialReference"},timeExtent:{description:"The layer's time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#timeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"timeExtent"},timeInfo:{description:"TimeInfo provides information such as date fields that store {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField start}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField end} time for each feature and the\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent fullTimeExtent} for the layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#timeInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInfo"},{type:"null"}],title:"timeInfo"},timeOffset:{description:"A temporary offset of the time data based on a certain {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html TimeInterval}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#timeOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"timeOffset"},type:{type:"string",const:"catalog-footprint",title:"type"},useViewTime:{description:"Determines if the layer will update its temporal data based on the view's\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent timeExtent}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#useViewTime Read more...}",type:"boolean",title:"useViewTime"},elevationInfo:{description:"Specifies how features are placed on the vertical axis (z).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#elevationInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogFootprintLayerElevationInfo"},{type:"null"}],title:"elevationInfo"},featureEffect:{description:"The featureEffect can be used to draw attention features of interest.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#featureEffect Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureEffect"},{type:"null"}],title:"featureEffect"},labelingInfo:{description:"The label definition for this layer, specified as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},popupTemplate:{description:"The popup template for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},renderer:{description:"The renderer assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},persistenceEnabled:{description:"When `true`, the layer can be persisted.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#title Read more...}",type:["null","string"],title:"title"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["blendMode","customParameters","datesInUnknownTimezone","declaredClass","destroyed","displayFilterEnabled","fieldsIndex","geometryType","hasM","hasZ","id","initialized","labelsVisible","legendEnabled","listMode","loadError","loadStatus","loadWarnings","loaded","maxScale","minScale","objectIdField","opacity","parent","persistenceEnabled","popupEnabled","spatialReference","title","type","useViewTime","visible"]},"__esri.CatalogFootprintLayerElevationInfo":{title:"__esri.CatalogFootprintLayerElevationInfo",type:"object",properties:{featureExpressionInfo:{anyOf:[{$ref:"#/definitions/__esri.CatalogFootprintLayerElevationInfoFeatureExpressionInfo"},{type:"null"}],title:"featureExpressionInfo"},mode:{enum:["absolute-height","on-the-ground","relative-to-ground","relative-to-scene"],type:"string",title:"mode"},offset:{type:["null","number"],title:"offset"},unit:{anyOf:[{enum:["centimeters","decimal-degrees","decimeters","feet","inches","kilometers","meters","miles","millimeters","nautical-miles","unknown","us-feet","yards"],type:"string"},{type:"null"}],title:"unit"}},required:["mode"]},"__esri.CatalogFootprintLayerElevationInfoFeatureExpressionInfo":{title:"__esri.CatalogFootprintLayerElevationInfoFeatureExpressionInfo",type:"object",properties:{expression:{type:"string",title:"expression"}},required:["expression"]},"__esri.Collection<__esri.CatalogFootprintLayer|__esri.CatalogDynamicGroupLayer>":{title:"__esri.Collection<__esri.CatalogFootprintLayer|__esri.CatalogDynamicGroupLayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},"__esri.SubtypeSublayer":{title:"__esri.SubtypeSublayer",type:"object",properties:{capabilities:{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#capabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"capabilities"},editingEnabled:{description:"Determines if the layer is editable.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#editingEnabled Read more...}",type:"boolean",title:"editingEnabled"},effectiveCapabilities:{description:"Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#effectiveCapabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"effectiveCapabilities"},effectiveEditingEnabled:{description:"Indicates whether the layer is editable taking in to consideration privileges of the\ncurrently signed-in user and whether the parent subtype group layer is editable or not.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#effectiveEditingEnabled Read more...}",type:"boolean",title:"effectiveEditingEnabled"},fields:{description:"An array of fields in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.Field"},title:"fields"},fieldsIndex:{description:"A convenient property that can be used to make case-insensitive lookups for a field by name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#fieldsIndex Read more...}",anyOf:[{$ref:"#/definitions/__esri.FieldsIndex"},{type:"null"}],title:"fieldsIndex"},geometryType:{description:"The geometry type of features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#geometryType Read more...}",anyOf:[{enum:["mesh","multipatch","multipoint","point","polygon","polyline"],type:"string"},{type:"null"}],title:"geometryType"},globalIdField:{description:"The name of an `guid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#fields field} containing\na unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#globalIdField Read more...}",type:["null","string"],title:"globalIdField"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#id Read more...}",type:"string",title:"id"},labelsVisible:{description:"Indicates whether to display labels for this layer.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#labelsVisible Read more...}",type:"boolean",title:"labelsVisible"},legendEnabled:{description:"Indicates whether the layer will be included in the legend.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#legendEnabled Read more...}",type:"boolean",title:"legendEnabled"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#listMode Read more...}',enum:["hide","show"],type:"string",title:"listMode"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#minScale Read more...}",type:"number",title:"minScale"},objectIdField:{description:"The name of an `oid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#fields field} containing\na unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#objectIdField Read more...}",type:"string",title:"objectIdField"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html SubtypeGroupLayer} to which the sublayer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.SubtypeGroupLayer"},{type:"null"}],title:"parent"},popupEnabled:{description:"Indicates whether to display popups when features in the layer are clicked.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#popupEnabled Read more...}",type:"boolean",title:"popupEnabled"},relationships:{description:"Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html relationships} set up for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#relationships Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Relationship"}},{type:"null"}],title:"relationships"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#spatialReference Read more...}",title:"spatialReference"},subtypeCode:{description:"The unique identifier representing the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html SubtypeSublayer}\ncreated from the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html SubtypeGroupLayer}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#subtypeCode Read more...}",type:"number",title:"subtypeCode"},subtypeField:{description:"The name of the field which holds the id of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#subtypes subtypes}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#subtypeField Read more...}",type:"string",title:"subtypeField"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend} widget.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#title Read more...}",type:["null","string"],title:"title"},type:{type:"string",const:"subtype-sublayer",title:"type"},url:{description:"The absolute URL of the REST endpoint of the feature service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#url Read more...}",type:["null","string"],title:"url"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#visible Read more...}",type:"boolean",title:"visible"},attributeTableTemplate:{description:"This property is used to configure the associated layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html FeatureTable}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#attributeTableTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.AttributeTableTemplate"},{type:"null"}],title:"attributeTableTemplate"},formTemplate:{description:"The {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html template} used in an associated layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html FeatureForm}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#formTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.FormTemplate"},{type:"null"}],title:"formTemplate"},labelingInfo:{description:"The label definition for this layer, specified as an array of\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LabelClass.html LabelClass}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#labelingInfo Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.LabelClass"}},{type:"null"}],title:"labelingInfo"},popupTemplate:{description:"The popup template for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#popupTemplate Read more...}",anyOf:[{$ref:"#/definitions/__esri.PopupTemplate"},{type:"null"}],title:"popupTemplate"},renderer:{description:"The renderer assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#renderer Read more...}",anyOf:[{$ref:"#/definitions/__esri.ClassBreaksRenderer"},{$ref:"#/definitions/__esri.UniqueValueRenderer"},{$ref:"#/definitions/__esri.DictionaryRenderer"},{$ref:"#/definitions/__esri.SimpleRenderer"},{$ref:"#/definitions/__esri.DotDensityRenderer"},{$ref:"#/definitions/__esri.PieChartRenderer"},{$ref:"#/definitions/__esri.HeatmapRenderer"},{type:"null"}],title:"renderer"},templates:{description:"An array of feature templates defined in the feature layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html#templates Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.FeatureTemplate"}},{type:"null"}],title:"templates"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","editingEnabled","effectiveEditingEnabled","fields","id","initialized","labelsVisible","legendEnabled","listMode","loadStatus","loadWarnings","maxScale","minScale","objectIdField","opacity","popupEnabled","spatialReference","subtypeCode","subtypeField","type","visible"]},"__esri.SubtypeGroupLayer":{title:"__esri.SubtypeGroupLayer",type:"object",properties:{blendMode:{description:"Blend modes are used to blend layers together to create an interesting effect in a layer, or even to produce what seems like a new layer.",default:'"normal"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#blendMode Read more...}',enum:["average","color","color-burn","color-dodge","darken","destination-atop","destination-in","destination-out","destination-over","difference","exclusion","hard-light","hue","invert","lighten","lighter","luminosity","minus","multiply","normal","overlay","plus","reflect","saturation","screen","soft-light","source-atop","source-in","source-out","vivid-light","xor"],type:"string",title:"blendMode"},capabilities:{description:"Describes the layer's supported capabilities.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#capabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"capabilities"},copyright:{description:"Copyright information for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#copyright Read more...}",type:["null","string"],title:"copyright"},customParameters:{description:"A list of custom parameters appended to the URL of all resources fetched by the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#customParameters Read more...}",title:"customParameters"},dateFieldsTimeZone:{description:"The time zone that dates are stored in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#dateFieldsTimeZone Read more...}",type:["null","string"],title:"dateFieldsTimeZone"},datesInUnknownTimezone:{description:"This property is set by the service publisher and indicates that dates should be considered without the local timezone.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#datesInUnknownTimezone Read more...}",type:"boolean",title:"datesInUnknownTimezone"},definitionExpression:{description:"The SQL where clause used to filter features on the client.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#definitionExpression Read more...}",type:["null","string"],title:"definitionExpression"},displayField:{description:"The name of the layer's primary display field.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#displayField Read more...}",type:["null","string"],title:"displayField"},displayFilterEnabled:{description:"Indicates whether the layer's {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#displayFilterInfo displayFilterInfo} is applied when rendering the layer in the view.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#displayFilterEnabled Read more...}",type:"boolean",title:"displayFilterEnabled"},displayFilterInfo:{description:"Information related to a display filter associated with a layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#displayFilterInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.DisplayFilterInfo"},{type:"null"}],title:"displayFilterInfo"},editFieldsInfo:{description:"The editor tracking fields, which record who adds or edits the data through the feature service\nand when edits are made.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#editFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditFieldsInfo"},{type:"null"}],title:"editFieldsInfo"},editingEnabled:{description:"Determines if the layer is editable.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#editingEnabled Read more...}",type:"boolean",title:"editingEnabled"},editingInfo:{description:"Specifies information about editing.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#editingInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.EditingInfo"},{type:"null"}],title:"editingInfo"},effect:{description:"Effect provides various filter functions that can be performed on the layer to achieve different visual effects similar to\nhow image filters work.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#effect Read more...}",anyOf:[{type:"array",items:{}},{type:["null","string"]}],title:"effect"},effectiveCapabilities:{description:"Describes effective capabilities of the layer taking in to consideration privileges of the currently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#effectiveCapabilities Read more...}",anyOf:[{$ref:"#/definitions/__esri.Capabilities"},{type:"null"}],title:"effectiveCapabilities"},effectiveEditingEnabled:{description:"Indicates whether the layer is editable taking in to consideration privileges of the\ncurrently signed-in user.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#effectiveEditingEnabled Read more...}",type:"boolean",title:"effectiveEditingEnabled"},fields:{description:"An array of fields in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#fields Read more...}",type:"array",items:{$ref:"#/definitions/__esri.Field"},title:"fields"},fieldsIndex:{$ref:"#/definitions/__esri.FieldsIndex",description:"A convenient property that can be used to make case-insensitive lookups for a field by name.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#fieldsIndex Read more...}",title:"fieldsIndex"},gdbVersion:{description:"The version of the geodatabase of the feature service data.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#gdbVersion Read more...}",type:["null","string"],title:"gdbVersion"},geometryFieldsInfo:{description:"Provides information on the system maintained area and length fields along with their respective units.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#geometryFieldsInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.GeometryFieldsInfo"},{type:"null"}],title:"geometryFieldsInfo"},geometryType:{description:"The geometry type of features in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#geometryType Read more...}",anyOf:[{enum:["mesh","multipatch","multipoint","point","polygon","polyline"],type:"string"},{type:"null"}],title:"geometryType"},hasM:{description:"Indicates whether the client-side features in the layer have `M` (measurement) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#hasM Read more...}",type:"boolean",title:"hasM"},hasZ:{description:"Indicates whether the client-side features in the layer have `Z` (elevation) values.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#hasZ Read more...}",type:"boolean",title:"hasZ"},isTable:{description:"Returns `true` if the layer is loaded from a non-spatial table in a service.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#isTable Read more...}",type:"boolean",title:"isTable"},layerId:{description:"The layer ID, or layer index, of a Feature Service layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#layerId Read more...}",type:["null","number"],title:"layerId"},maxScale:{description:"The maximum scale (most zoomed in) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#maxScale Read more...}",type:"number",title:"maxScale"},minScale:{description:"The minimum scale (most zoomed out) at which the layer is visible in the view.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#minScale Read more...}",type:"number",title:"minScale"},objectIdField:{description:"The name of an `oid` {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#fields field} containing\na unique value or identifier for each feature in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#objectIdField Read more...}",type:"string",title:"objectIdField"},outFields:{description:"An array of field names from the service to include with each feature.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#outFields Read more...}",anyOf:[{type:"array",items:{type:"string"}},{type:"null"}],title:"outFields"},persistenceEnabled:{description:"Enable persistence of the layer in a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html WebMap} or {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html WebScene}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#persistenceEnabled Read more...}",type:"boolean",title:"persistenceEnabled"},preferredTimeZone:{description:"The IANA time zone the author of the service intended data from date fields to be viewed in.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#preferredTimeZone Read more...}",type:["null","string"],title:"preferredTimeZone"},refreshInterval:{description:"Refresh interval of the layer in minutes.",default:"0\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#refreshInterval Read more...}",type:"number",title:"refreshInterval"},relationships:{description:"Array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Relationship.html relationships} set up for the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#relationships Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Relationship"}},{type:"null"}],title:"relationships"},returnM:{description:"When `true`, indicates that M values will be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#returnM Read more...}",type:["null","boolean"],title:"returnM"},returnZ:{description:"When `true`, indicates that z-values will always be returned.",default:"undefined\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#returnZ Read more...}",type:["null","boolean"],title:"returnZ"},serviceDefinitionExpression:{description:"The service definition expression limits the features available for display and query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#serviceDefinitionExpression Read more...}",type:["null","string"],title:"serviceDefinitionExpression"},serviceItemId:{description:"Indicates the portal item of the hosted feature service that contains this layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#serviceItemId Read more...}",type:["null","string"],title:"serviceItemId"},sourceJSON:{description:"The [feature service's metadata JSON](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm)\nexposed by the ArcGIS REST API.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#sourceJSON Read more...}",title:"sourceJSON"},subtypeField:{description:"The name of the field which holds the id of the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#subtypes subtypes}.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#subtypeField Read more...}",type:["null","string"],title:"subtypeField"},subtypes:{description:"An array of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html subtypes} defined in the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#subtypes Read more...}",anyOf:[{type:"array",items:{$ref:"#/definitions/__esri.Subtype"}},{type:"null"}],title:"subtypes"},title:{description:"The title of the layer used to identify it in places such as the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Legend}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widgets.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#title Read more...}",type:["null","string"],title:"title"},type:{type:"string",const:"subtype-group",title:"type"},url:{description:"The absolute URL of the REST endpoint of the layer, non-spatial table or service.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#url Read more...}",type:["null","string"],title:"url"},useViewTime:{description:"Determines if the time enabled layer will update its temporal data based on the view's\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent timeExtent}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#useViewTime Read more...}",type:"boolean",title:"useViewTime"},version:{description:"The version of ArcGIS Server in which the layer is published.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#version Read more...}",type:["null","number"],title:"version"},elevationInfo:{description:"Specifies how features are placed on the vertical axis (z).\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#elevationInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.FeatureLayerBaseElevationInfo"},{type:"null"}],title:"elevationInfo"},floorInfo:{description:"When a feature layer is configured as floor-aware, it has a floorInfo property defined.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#floorInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.LayerFloorInfo"},{type:"null"}],title:"floorInfo"},fullExtent:{description:"The full extent of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#fullExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.Extent"},{type:"null"}],title:"fullExtent"},historicMoment:{description:"The historic moment to query.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#historicMoment Read more...}",anyOf:[{type:"string",format:"date-time"},{type:"null"}],title:"historicMoment"},portalItem:{description:"The portal item from which the layer is loaded.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#portalItem Read more...}",anyOf:[{$ref:"#/definitions/__esri.PortalItem"},{type:"null"}],title:"portalItem"},spatialReference:{$ref:"#/definitions/__esri.SpatialReference",description:"The spatial reference of the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#spatialReference Read more...}",title:"spatialReference"},sublayers:{$ref:"#/definitions/__esri.Collection<__esri.SubtypeSublayer>",description:"A {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html Collection} of {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-SubtypeSublayer.html SubtypeSublayer} objects that allow\nyou to alter the properties of one or more sublayers of the SubtypeGroupLayer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#sublayers Read more...}",title:"sublayers"},timeExtent:{description:"The layer's time extent.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#timeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"timeExtent"},timeInfo:{description:"TimeInfo provides information such as date fields that store\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField start}\nand {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField end} time\nfor each feature and the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent fullTimeExtent}\nfor the layer.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#timeInfo Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInfo"},{type:"null"}],title:"timeInfo"},timeOffset:{description:"A temporary offset of the time data based on a certain {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeInterval.html TimeInterval}.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SubtypeGroupLayer.html#timeOffset Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeInterval"},{type:"null"}],title:"timeOffset"},id:{description:"The unique ID assigned to the layer.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#id Read more...}",type:"string",title:"id"},listMode:{description:"Indicates how the layer should display in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html LayerList} widget.",default:'"show"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode Read more...}',enum:["hide","hide-children","show"],type:"string",title:"listMode"},loaded:{description:"Indicates whether the layer's resources have loaded.",default:"false\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loaded Read more...}",type:"boolean",title:"loaded"},loadError:{description:"The Error object returned if an error occurred while loading.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadError Read more...}",anyOf:[{$ref:"#/definitions/__esri.Error"},{type:"null"}],title:"loadError"},loadStatus:{description:"Represents the status of a {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#load load} operation.",default:'"not-loaded"\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadStatus Read more...}',enum:["failed","loaded","loading","not-loaded"],type:"string",title:"loadStatus"},loadWarnings:{description:"A list of warnings which occurred while loading.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#loadWarnings Read more...}",type:"array",items:{},title:"loadWarnings"},opacity:{description:"The opacity of the layer.",default:"1\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#opacity Read more...}",type:"number",title:"opacity"},parent:{description:"The parent to which the layer belongs.\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#parent Read more...}",anyOf:[{$ref:"#/definitions/__esri.CatalogLayer"},{$ref:"#/definitions/__esri.Map"},{$ref:"#/definitions/__esri.Basemap"},{$ref:"#/definitions/__esri.Ground"},{$ref:"#/definitions/__esri.CatalogDynamicGroupLayer"},{$ref:"#/definitions/__esri.GroupLayer"},{type:"null"}],title:"parent"},visible:{description:"Indicates if the layer is visible in the {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html View}.",default:"true\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visible Read more...}",type:"boolean",title:"visible"},visibilityTimeExtent:{description:"Specifies a fixed {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-time-TimeExtent.html time extent} during which a layer should be visible.",default:"null\n\n{@link https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#visibilityTimeExtent Read more...}",anyOf:[{$ref:"#/definitions/__esri.TimeExtent"},{type:"null"}],title:"visibilityTimeExtent"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["blendMode","customParameters","datesInUnknownTimezone","declaredClass","destroyed","displayFilterEnabled","editingEnabled","effectiveEditingEnabled","fields","fieldsIndex","hasM","hasZ","id","initialized","isTable","listMode","loadError","loadStatus","loadWarnings","loaded","maxScale","minScale","objectIdField","opacity","parent","persistenceEnabled","refreshInterval","sourceJSON","spatialReference","sublayers","type","useViewTime","visible"]},"__esri.Collection<__esri.SubtypeSublayer>":{title:"__esri.Collection<__esri.SubtypeSublayer>",type:"object",properties:{length:{type:"number",title:"length"},destroyed:{type:"boolean",title:"destroyed"},initialized:{type:"boolean",title:"initialized"},declaredClass:{type:"string",title:"declaredClass"}},required:["declaredClass","destroyed","initialized","length"]},'Omit<ITextSymbol,"xoffset"|"yoffset">':{title:'Omit<ITextSymbol,"xoffset"|"yoffset">',type:"object",properties:{type:{type:"string",const:"esriTS",title:"type"},style:{type:"string",title:"style"},text:{type:"string",title:"text"},color:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"color"},backgroundColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"backgroundColor"},borderLineSize:{type:"number",title:"borderLineSize"},borderLineColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"borderLineColor"},haloSize:{type:"number",title:"haloSize"},haloColor:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"haloColor"},verticalAlignment:{enum:["baseline","bottom","middle","top"],type:"string",title:"verticalAlignment"},horizontalAlignment:{enum:["center","justify","left","right"],type:"string",title:"horizontalAlignment"},rightToLeft:{type:"boolean",title:"rightToLeft"},kerning:{type:"boolean",title:"kerning"},font:{$ref:"#/definitions/IFont",title:"font"},angle:{type:"number",title:"angle"}},required:["type"]},"Intl.NumberFormatOptions":{title:"Intl.NumberFormatOptions",type:"object",properties:{localeMatcher:{enum:["best fit","lookup"],type:"string",title:"localeMatcher"},style:{enum:["currency","decimal","percent","unit"],type:"string",title:"style"},currency:{type:"string",title:"currency"},currencyDisplay:{enum:["code","name","narrowSymbol","symbol"],type:"string",title:"currencyDisplay"},useGrouping:{type:"boolean",title:"useGrouping"},minimumIntegerDigits:{type:"number",title:"minimumIntegerDigits"},minimumFractionDigits:{type:"number",title:"minimumFractionDigits"},maximumFractionDigits:{type:"number",title:"maximumFractionDigits"},minimumSignificantDigits:{type:"number",title:"minimumSignificantDigits"},maximumSignificantDigits:{type:"number",title:"maximumSignificantDigits"},numberingSystem:{type:"string",title:"numberingSystem"},compactDisplay:{enum:["long","short"],type:"string",title:"compactDisplay"},notation:{enum:["compact","engineering","scientific","standard"],type:"string",title:"notation"},signDisplay:{enum:["always","auto","exceptZero","never"],type:"string",title:"signDisplay"},unit:{type:"string",title:"unit"},unitDisplay:{enum:["long","narrow","short"],type:"string",title:"unitDisplay"},currencySign:{enum:["accounting","standard"],type:"string",title:"currencySign"}}},"Intl.DateTimeFormatOptions":{title:"Intl.DateTimeFormatOptions",type:"object",properties:{localeMatcher:{enum:["best fit","lookup"],type:"string",title:"localeMatcher"},weekday:{enum:["long","narrow","short"],type:"string",title:"weekday"},era:{enum:["long","narrow","short"],type:"string",title:"era"},year:{enum:["2-digit","numeric"],type:"string",title:"year"},month:{enum:["2-digit","long","narrow","numeric","short"],type:"string",title:"month"},day:{enum:["2-digit","numeric"],type:"string",title:"day"},hour:{enum:["2-digit","numeric"],type:"string",title:"hour"},minute:{enum:["2-digit","numeric"],type:"string",title:"minute"},second:{enum:["2-digit","numeric"],type:"string",title:"second"},timeZoneName:{enum:["long","longGeneric","longOffset","short","shortGeneric","shortOffset"],type:"string",title:"timeZoneName"},formatMatcher:{enum:["basic","best fit"],type:"string",title:"formatMatcher"},hour12:{type:"boolean",title:"hour12"},timeZone:{type:"string",title:"timeZone"},calendar:{type:"string",title:"calendar"},dayPeriod:{enum:["long","narrow","short"],type:"string",title:"dayPeriod"},numberingSystem:{type:"string",title:"numberingSystem"},dateStyle:{enum:["full","long","medium","short"],type:"string",title:"dateStyle"},timeStyle:{enum:["full","long","medium","short"],type:"string",title:"timeStyle"},hourCycle:{enum:["h11","h12","h23","h24"],type:"string",title:"hourCycle"},fractionalSecondDigits:{enum:[1,2,3],type:"number",title:"fractionalSecondDigits"}}},DateTimeFormatOptions:{description:"Defines how the DateTime axis data should be formatted.",title:"DateTimeFormatOptions",type:"object",properties:{type:{description:'Represents a unique string identifier for the NumberFormatOptions object. For NumberFormatOptions object, it is "date". It can help us to differentiate date-time axis from other types of axes viz., numeric (value) axis and category axis.',type:"string",const:"date",title:"type"},intlOptions:{$ref:"#/definitions/Intl.DateTimeFormatOptions",description:"Represent the JS native [Intl.DateTimeFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormatt), which is based on [CLDR](http://cldr.unicode.org/translation/date-time-1/date-time-patterns) specifications.",title:"intlOptions"},formatPerDateTimeUnit:{description:"Represents how to format specific date and time units when displayed on the axis, independently from the `intlOptions`.",$ref:"#/definitions/WebChartDateTimeUnitFormatOptions",title:"formatPerDateTimeUnit"}},required:["intlOptions","type"]},'Omit<WebChartLineChartSeries,"type">':{title:'Omit<WebChartLineChartSeries,"type">',type:"object",properties:{x:{description:"Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.",minLength:1,type:"string",title:"x"},y:{description:"Specifies the numeric field(s) used by the series. The array type is useful when used for a box plot.",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}],title:"y"},id:{description:"A unique string used to differentiate the series on a chart.",type:"string",title:"id"},name:{description:"Specifies the name of the series. It would be reflected in the chart [legends](#legend)",type:"string",title:"name"},visible:{description:"Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.",default:!0,type:"boolean",title:"visible"},dataTooltipVisible:{description:"Hides or shows data tooltips.\nApplies to all charts but Gauge.",default:!0,type:"boolean",title:"dataTooltipVisible"},dataTooltipReverseColor:{description:"Indicates whether to apply the hovered element's color to the background (false) or the outline (true).\nApplies to all charts but Gauge.",default:!1,type:"boolean",title:"dataTooltipReverseColor"},dataTooltipValueFormat:{description:"Defines how to render numeric values in tooltips.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipValueFormat"},dataTooltipPercentFormat:{description:"Defines how to render percent values in tooltips.\nCurrently used for stacked 100% bar and line charts, as well as pie charts.",$ref:"#/definitions/NumberFormatOptions",title:"dataTooltipPercentFormat"},dataTooltipDateFormat:{description:"Defines how to render dates in tooltips.\nCurrently used for bar and line charts using a date x-axis with no time binning.",$ref:"#/definitions/DateTimeFormatOptions",title:"dataTooltipDateFormat"},query:{description:"Specifies a query object associated with a particular series containing info on what data to fetch for that series.",$ref:"#/definitions/WebChartSeriesQuery",title:"query"},dataLabels:{description:"Specifies how the data labels should be rendered.",$ref:"#/definitions/WebChartText",title:"dataLabels"},assignToSecondValueAxis:{description:"Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.\nSupported by bar and line series.",default:!1,type:"boolean",title:"assignToSecondValueAxis"},lineSymbol:{description:"Contains styling info on how the line/line segments should be rendered",$ref:"#/definitions/ISimpleLineSymbol",title:"lineSymbol"},lineSmoothed:{description:"Specifies whether line segments should be smoothed.",default:!1,type:"boolean",title:"lineSmoothed"},showArea:{description:"Indicates whether line series show area.",default:!1,type:"boolean",title:"showArea"},markerVisible:{description:"Indicates whether to show or hide the markers/bullets of the line series.",default:!0,type:"boolean",title:"markerVisible"},markerSymbol:{description:"Contains styling info on how the marker should be rendered",$ref:"#/definitions/ISimpleMarkerSymbol",title:"markerSymbol"},areaColor:{description:"Specifies the color of the filled area for line chart.\nareaColor will be applied only if showArea is true, and is defaulted to the line color if not provided.",type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4,title:"areaColor"},stackNegativeValuesToBaseline:{description:"Specifies how negative values are treated in stacked series.\nIf true, negative values will be stacked on the base line.\nIf false, negative values will be stacked in relation to their previous values in the stack.",default:!0,type:"boolean",title:"stackNegativeValuesToBaseline"},binTemporalData:{description:"Whether to use the time properties to bin the temporal data.\nIf set to `false` the `timeIntervalSize` and `timeIntervalUnits` properties can be used to set the date axis base interval.",default:!0,type:"boolean",title:"binTemporalData"},timeIntervalUnits:{description:"The time unit that corresponds to the `timeIntervalSize`. Valid options include seconds, minutes, hours, days, weeks, months, and years.",enum:["esriTimeUnitsDays","esriTimeUnitsHours","esriTimeUnitsMinutes","esriTimeUnitsMonths","esriTimeUnitsSeconds","esriTimeUnitsWeeks","esriTimeUnitsYears"],type:"string",title:"timeIntervalUnits"},timeIntervalSize:{description:"The span of time that will be binned or aggregated together. This property must be used in conjunction with `timeIntervalUnits`.",type:"number",title:"timeIntervalSize"},timeAggregationType:{description:"The time interval alignment type. Valid options include `equalIntervalsFromStartTime` and `equalIntervalsFromEndTime`.",default:"equalIntervalsFromStartTime",enum:["equalIntervalsFromEndTime","equalIntervalsFromStartTime"],type:"string",title:"timeAggregationType"},trimIncompleteTimeInterval:{description:"Determines whether incomplete time intervals at the start or end of the data span (depending on the `timeAggregationType`) will be removed from the chart.\nIncomplete intervals on a chart can cause misleading results in which the period in question is under- or overreported due to a different amount of time in the interval.\nSetting `true` indicates to trim these incomplete intervals. Setting `false` does not trim incomplete intervals.",default:!0,type:"boolean",title:"trimIncompleteTimeInterval"},nullPolicy:{description:"How summarized bins returning a null value are displayed. Supported options are:\n- `null`, `zero`, and `interpolate` for line series\n- `null` and `zero` for bar series",default:"null",enum:["interpolate","null","zero"],type:"string",title:"nullPolicy"}},required:["id","name","x","y"]}},$ref:"#/definitions/WebChart"};function yp(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var up,mp,gp,hp,fp,bp,vp,Sp,kp,wp={exports:{}};function Ip(){return up||(up=1,function(e){function t(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];if(t.length>1){t[0]=t[0].slice(0,-1);for(var r=t.length-1,n=1;n<r;++n)t[n]=t[n].slice(1,-1);return t[r]=t[r].slice(1),t.join("")}return t[0]}function i(e){return "(?:"+e+")"}function r(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function n(e){return e.toUpperCase()}function o(e){return null!=e?e instanceof Array?e:"number"!=typeof e.length||e.split||e.setInterval||e.call?[e]:Array.prototype.slice.call(e):[]}function a(e,t){var i=e;if(t)for(var r in t)i[r]=t[r];return i}function l(e){var r="[A-Za-z]",n="[0-9]",o=t(n,"[A-Fa-f]"),a=i(i("%[EFef]"+o+"%"+o+o+"%"+o+o)+"|"+i("%[89A-Fa-f]"+o+"%"+o+o)+"|"+i("%"+o+o)),l="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",s=t("[\\:\\/\\?\\#\\[\\]\\@]",l),p=e?"[\\uE000-\\uF8FF]":"[]",d=t(r,n,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");i(r+t(r,n,"[\\+\\-\\.]")+"*"),i(i(a+"|"+t(d,l,"[\\:]"))+"*");var c=i(i("25[0-5]")+"|"+i("2[0-4]"+n)+"|"+i("1"+n+n)+"|"+i("0?[1-9]"+n)+"|0?0?"+n),y=i(c+"\\."+c+"\\."+c+"\\."+c),u=i(o+"{1,4}"),m=i(i(u+"\\:"+u)+"|"+y),g=i(i(u+"\\:")+"{6}"+m),h=i("\\:\\:"+i(u+"\\:")+"{5}"+m),f=i(i(u)+"?\\:\\:"+i(u+"\\:")+"{4}"+m),b=i(i(i(u+"\\:")+"{0,1}"+u)+"?\\:\\:"+i(u+"\\:")+"{3}"+m),v=i(i(i(u+"\\:")+"{0,2}"+u)+"?\\:\\:"+i(u+"\\:")+"{2}"+m),S=i(i(i(u+"\\:")+"{0,3}"+u)+"?\\:\\:"+u+"\\:"+m),k=i(i(i(u+"\\:")+"{0,4}"+u)+"?\\:\\:"+m),w=i(i(i(u+"\\:")+"{0,5}"+u)+"?\\:\\:"+u),I=i(i(i(u+"\\:")+"{0,6}"+u)+"?\\:\\:"),T=i([g,h,f,b,v,S,k,w,I].join("|")),C=i(i(d+"|"+a)+"+");i("[vV]"+o+"+\\."+t(d,l,"[\\:]")+"+"),i(i(a+"|"+t(d,l))+"*");var E=i(a+"|"+t(d,l,"[\\:\\@]"));return i(i(a+"|"+t(d,l,"[\\@]"))+"+"),i(i(E+"|"+t("[\\/\\?]",p))+"*"),{NOT_SCHEME:new RegExp(t("[^]",r,n,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",d,l),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",d,l),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",d,l),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",d,l),"g"),NOT_QUERY:new RegExp(t("[^\\%]",d,l,"[\\:\\@\\/\\?]",p),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",d,l,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",d,l),"g"),UNRESERVED:new RegExp(d,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",d,s),"g"),PCT_ENCODED:new RegExp(a,"g"),IPV4ADDRESS:new RegExp("^("+y+")$"),IPV6ADDRESS:new RegExp("^\\[?("+T+")"+i(i("\\%25|\\%(?!"+o+"{2})")+"("+C+")")+"?\\]?$")}}var s=l(!1),p=l(!0),d=function(){function e(e,t){var i=[],r=!0,n=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(i.push(a.value),!t||i.length!==t);r=!0);}catch(e){n=!0,o=e;}finally{try{!r&&l.return&&l.return();}finally{if(n)throw o}}return i}return function(t,i){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),c=function(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)},y=2147483647,u=36,m=1,g=26,h=38,f=700,b=72,v=128,S="-",k=/^xn--/,w=/[^\0-\x7E]/,I=/[\x2E\u3002\uFF0E\uFF61]/g,T={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},C=u-m,E=Math.floor,x=String.fromCharCode;function O(e){throw new RangeError(T[e])}function R(e,t){for(var i=[],r=e.length;r--;)i[r]=t(e[r]);return i}function _(e,t){var i=e.split("@"),r="";return i.length>1&&(r=i[0]+"@",e=i[1]),r+R((e=e.replace(I,".")).split("."),t).join(".")}function j(e){for(var t=[],i=0,r=e.length;i<r;){var n=e.charCodeAt(i++);if(n>=55296&&n<=56319&&i<r){var o=e.charCodeAt(i++);56320==(64512&o)?t.push(((1023&n)<<10)+(1023&o)+65536):(t.push(n),i--);}else t.push(n);}return t}var B=function(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:u},P=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},N=function(e,t,i){var r=0;for(e=i?E(e/f):e>>1,e+=E(e/t);e>C*g>>1;r+=u)e=E(e/C);return E(r+(C+1)*e/(e+h))},M=function(e){var t=[],i=e.length,r=0,n=v,o=b,a=e.lastIndexOf(S);a<0&&(a=0);for(var l=0;l<a;++l)e.charCodeAt(l)>=128&&O("not-basic"),t.push(e.charCodeAt(l));for(var s=a>0?a+1:0;s<i;){for(var p=r,d=1,c=u;;c+=u){s>=i&&O("invalid-input");var h=B(e.charCodeAt(s++));(h>=u||h>E((y-r)/d))&&O("overflow"),r+=h*d;var f=c<=o?m:c>=o+g?g:c-o;if(h<f)break;var k=u-f;d>E(y/k)&&O("overflow"),d*=k;}var w=t.length+1;o=N(r-p,w,0==p),E(r/w)>y-n&&O("overflow"),n+=E(r/w),r%=w,t.splice(r++,0,n);}return String.fromCodePoint.apply(String,t)},D=function(e){var t=[],i=(e=j(e)).length,r=v,n=0,o=b,a=!0,l=!1,s=void 0;try{for(var p,d=e[Symbol.iterator]();!(a=(p=d.next()).done);a=!0){var c=p.value;c<128&&t.push(x(c));}}catch(e){l=!0,s=e;}finally{try{!a&&d.return&&d.return();}finally{if(l)throw s}}var h=t.length,f=h;for(h&&t.push(S);f<i;){var k=y,w=!0,I=!1,T=void 0;try{for(var C,R=e[Symbol.iterator]();!(w=(C=R.next()).done);w=!0){var _=C.value;_>=r&&_<k&&(k=_);}}catch(e){I=!0,T=e;}finally{try{!w&&R.return&&R.return();}finally{if(I)throw T}}var B=f+1;k-r>E((y-n)/B)&&O("overflow"),n+=(k-r)*B,r=k;var M=!0,D=!1,A=void 0;try{for(var L,F=e[Symbol.iterator]();!(M=(L=F.next()).done);M=!0){var z=L.value;if(z<r&&++n>y&&O("overflow"),z==r){for(var $=n,W=u;;W+=u){var V=W<=o?m:W>=o+g?g:W-o;if($<V)break;var U=$-V,G=u-V;t.push(x(P(V+U%G,0))),$=E(U/G);}t.push(x(P($,0))),o=N(n,B,f==h),n=0,++f;}}}catch(e){D=!0,A=e;}finally{try{!M&&F.return&&F.return();}finally{if(D)throw A}}++n,++r;}return t.join("")},A=function(e){return _(e,(function(e){return k.test(e)?M(e.slice(4).toLowerCase()):e}))},L=function(e){return _(e,(function(e){return w.test(e)?"xn--"+D(e):e}))},F={version:"2.1.0",ucs2:{decode:j,encode:function(e){return String.fromCodePoint.apply(String,c(e))}},decode:M,encode:D,toASCII:L,toUnicode:A},z={};function $(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function W(e){for(var t="",i=0,r=e.length;i<r;){var n=parseInt(e.substr(i+1,2),16);if(n<128)t+=String.fromCharCode(n),i+=3;else if(n>=194&&n<224){if(r-i>=6){var o=parseInt(e.substr(i+4,2),16);t+=String.fromCharCode((31&n)<<6|63&o);}else t+=e.substr(i,6);i+=6;}else if(n>=224){if(r-i>=9){var a=parseInt(e.substr(i+4,2),16),l=parseInt(e.substr(i+7,2),16);t+=String.fromCharCode((15&n)<<12|(63&a)<<6|63&l);}else t+=e.substr(i,9);i+=9;}else t+=e.substr(i,3),i+=3;}return t}function V(e,t){function i(e){var i=W(e);return i.match(t.UNRESERVED)?i:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,i).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,i).replace(t.NOT_USERINFO,$).replace(t.PCT_ENCODED,n)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,i).toLowerCase().replace(t.NOT_HOST,$).replace(t.PCT_ENCODED,n)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,i).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,$).replace(t.PCT_ENCODED,n)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,i).replace(t.NOT_QUERY,$).replace(t.PCT_ENCODED,n)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,i).replace(t.NOT_FRAGMENT,$).replace(t.PCT_ENCODED,n)),e}function U(e){return e.replace(/^0*(.*)/,"$1")||"0"}function G(e,t){var i=e.match(t.IPV4ADDRESS)||[],r=d(i,2)[1];return r?r.split(".").map(U).join("."):e}function q(e,t){var i=e.match(t.IPV6ADDRESS)||[],r=d(i,3),n=r[1],o=r[2];if(n){for(var a=n.toLowerCase().split("::").reverse(),l=d(a,2),s=l[0],p=l[1],c=p?p.split(":").map(U):[],y=s.split(":").map(U),u=t.IPV4ADDRESS.test(y[y.length-1]),m=u?7:8,g=y.length-m,h=Array(m),f=0;f<m;++f)h[f]=c[f]||y[g+f]||"";u&&(h[m-1]=G(h[m-1],t));var b=h.reduce((function(e,t,i){if(!t||"0"===t){var r=e[e.length-1];r&&r.index+r.length===i?r.length++:e.push({index:i,length:1});}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],v=void 0;if(b&&b.length>1){var S=h.slice(0,b.index),k=h.slice(b.index+b.length);v=S.join(":")+"::"+k.join(":");}else v=h.join(":");return o&&(v+="%"+o),v}return e}var H=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,Y=void 0==="".match(/(){0}/)[1];function K(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i={},r=!1!==t.iri?p:s;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var n=e.match(H);if(n){Y?(i.scheme=n[1],i.userinfo=n[3],i.host=n[4],i.port=parseInt(n[5],10),i.path=n[6]||"",i.query=n[7],i.fragment=n[8],isNaN(i.port)&&(i.port=n[5])):(i.scheme=n[1]||void 0,i.userinfo=-1!==e.indexOf("@")?n[3]:void 0,i.host=-1!==e.indexOf("//")?n[4]:void 0,i.port=parseInt(n[5],10),i.path=n[6]||"",i.query=-1!==e.indexOf("?")?n[7]:void 0,i.fragment=-1!==e.indexOf("#")?n[8]:void 0,isNaN(i.port)&&(i.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?n[4]:void 0)),i.host&&(i.host=q(G(i.host,r),r)),void 0!==i.scheme||void 0!==i.userinfo||void 0!==i.host||void 0!==i.port||i.path||void 0!==i.query?void 0===i.scheme?i.reference="relative":void 0===i.fragment?i.reference="absolute":i.reference="uri":i.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==i.reference&&(i.error=i.error||"URI is not a "+t.reference+" reference.");var o=z[(t.scheme||i.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)V(i,r);else {if(i.host&&(t.domainHost||o&&o.domainHost))try{i.host=F.toASCII(i.host.replace(r.PCT_ENCODED,W).toLowerCase());}catch(e){i.error=i.error||"Host's domain name can not be converted to ASCII via punycode: "+e;}V(i,s);}o&&o.parse&&o.parse(i,t);}else i.error=i.error||"URI can not be parsed.";return i}function X(e,t){var i=!1!==t.iri?p:s,r=[];return void 0!==e.userinfo&&(r.push(e.userinfo),r.push("@")),void 0!==e.host&&r.push(q(G(String(e.host),i),i).replace(i.IPV6ADDRESS,(function(e,t,i){return "["+t+(i?"%25"+i:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(r.push(":"),r.push(String(e.port))),r.length?r.join(""):void 0}var Q=/^\.\.?\//,J=/^\/\.(\/|$)/,Z=/^\/\.\.(\/|$)/,ee=/^\/?(?:.|\n)*?(?=\/|$)/;function te(e){for(var t=[];e.length;)if(e.match(Q))e=e.replace(Q,"");else if(e.match(J))e=e.replace(J,"/");else if(e.match(Z))e=e.replace(Z,"/"),t.pop();else if("."===e||".."===e)e="";else {var i=e.match(ee);if(!i)throw new Error("Unexpected dot segment condition");var r=i[0];e=e.slice(r.length),t.push(r);}return t.join("")}function ie(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.iri?p:s,r=[],n=z[(t.scheme||e.scheme||"").toLowerCase()];if(n&&n.serialize&&n.serialize(e,t),e.host)if(i.IPV6ADDRESS.test(e.host));else if(t.domainHost||n&&n.domainHost)try{e.host=t.iri?F.toUnicode(e.host):F.toASCII(e.host.replace(i.PCT_ENCODED,W).toLowerCase());}catch(i){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+i;}V(e,i),"suffix"!==t.reference&&e.scheme&&(r.push(e.scheme),r.push(":"));var o=X(e,t);if(void 0!==o&&("suffix"!==t.reference&&r.push("//"),r.push(o),e.path&&"/"!==e.path.charAt(0)&&r.push("/")),void 0!==e.path){var a=e.path;t.absolutePath||n&&n.absolutePath||(a=te(a)),void 0===o&&(a=a.replace(/^\/\//,"/%2F")),r.push(a);}return void 0!==e.query&&(r.push("?"),r.push(e.query)),void 0!==e.fragment&&(r.push("#"),r.push(e.fragment)),r.join("")}function re(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r={};return arguments[3]||(e=K(ie(e,i),i),t=K(ie(t,i),i)),!(i=i||{}).tolerant&&t.scheme?(r.scheme=t.scheme,r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=te(t.path||""),r.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(r.userinfo=t.userinfo,r.host=t.host,r.port=t.port,r.path=te(t.path||""),r.query=t.query):(t.path?("/"===t.path.charAt(0)?r.path=te(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?r.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:r.path=t.path:r.path="/"+t.path,r.path=te(r.path)),r.query=t.query):(r.path=e.path,void 0!==t.query?r.query=t.query:r.query=e.query),r.userinfo=e.userinfo,r.host=e.host,r.port=e.port),r.scheme=e.scheme),r.fragment=t.fragment,r}function ne(e,t,i){var r=a({scheme:"null"},i);return ie(re(K(e,r),K(t,r),r,!0),r)}function oe(e,t){return "string"==typeof e?e=ie(K(e,t),t):"object"===r(e)&&(e=K(ie(e,t),t)),e}function ae(e,t,i){return "string"==typeof e?e=ie(K(e,i),i):"object"===r(e)&&(e=ie(e,i)),"string"==typeof t?t=ie(K(t,i),i):"object"===r(t)&&(t=ie(t,i)),e===t}function le(e,t){return e&&e.toString().replace(t&&t.iri?p.ESCAPE:s.ESCAPE,$)}function se(e,t){return e&&e.toString().replace(t&&t.iri?p.PCT_ENCODED:s.PCT_ENCODED,W)}var pe={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var i="https"===String(e.scheme).toLowerCase();return e.port!==(i?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},de={scheme:"https",domainHost:pe.domainHost,parse:pe.parse,serialize:pe.serialize};function ce(e){return "boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var ye={scheme:"ws",domainHost:!0,parse:function(e,t){var i=e;return i.secure=ce(i),i.resourceName=(i.path||"/")+(i.query?"?"+i.query:""),i.path=void 0,i.query=void 0,i},serialize:function(e,t){if(e.port!==(ce(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var i=e.resourceName.split("?"),r=d(i,2),n=r[0],o=r[1];e.path=n&&"/"!==n?n:void 0,e.query=o,e.resourceName=void 0;}return e.fragment=void 0,e}},ue={scheme:"wss",domainHost:ye.domainHost,parse:ye.parse,serialize:ye.serialize},me={},ge="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",he="[0-9A-Fa-f]",fe=i(i("%[EFef]"+he+"%"+he+he+"%"+he+he)+"|"+i("%[89A-Fa-f]"+he+"%"+he+he)+"|"+i("%"+he+he)),be="[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]",ve=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),Se="[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]",ke=new RegExp(ge,"g"),we=new RegExp(fe,"g"),Ie=new RegExp(t("[^]",be,"[\\.]",'[\\"]',ve),"g"),Te=new RegExp(t("[^]",ge,Se),"g"),Ce=Te;function Ee(e){var t=W(e);return t.match(ke)?t:e}var xe={scheme:"mailto",parse:function(e,t){var i=e,r=i.to=i.path?i.path.split(","):[];if(i.path=void 0,i.query){for(var n=!1,o={},a=i.query.split("&"),l=0,s=a.length;l<s;++l){var p=a[l].split("=");switch(p[0]){case"to":for(var d=p[1].split(","),c=0,y=d.length;c<y;++c)r.push(d[c]);break;case"subject":i.subject=se(p[1],t);break;case"body":i.body=se(p[1],t);break;default:n=!0,o[se(p[0],t)]=se(p[1],t);}}n&&(i.headers=o);}i.query=void 0;for(var u=0,m=r.length;u<m;++u){var g=r[u].split("@");if(g[0]=se(g[0]),t.unicodeSupport)g[1]=se(g[1],t).toLowerCase();else try{g[1]=F.toASCII(se(g[1],t).toLowerCase());}catch(e){i.error=i.error||"Email address's domain name can not be converted to ASCII via punycode: "+e;}r[u]=g.join("@");}return i},serialize:function(e,t){var i=e,r=o(e.to);if(r){for(var a=0,l=r.length;a<l;++a){var s=String(r[a]),p=s.lastIndexOf("@"),d=s.slice(0,p).replace(we,Ee).replace(we,n).replace(Ie,$),c=s.slice(p+1);try{c=t.iri?F.toUnicode(c):F.toASCII(se(c,t).toLowerCase());}catch(e){i.error=i.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e;}r[a]=d+"@"+c;}i.path=r.join(",");}var y=e.headers=e.headers||{};e.subject&&(y.subject=e.subject),e.body&&(y.body=e.body);var u=[];for(var m in y)y[m]!==me[m]&&u.push(m.replace(we,Ee).replace(we,n).replace(Te,$)+"="+y[m].replace(we,Ee).replace(we,n).replace(Ce,$));return u.length&&(i.query=u.join("&")),i}},Oe=/^([^\:]+)\:(.*)/,Re={scheme:"urn",parse:function(e,t){var i=e.path&&e.path.match(Oe),r=e;if(i){var n=t.scheme||r.scheme||"urn",o=i[1].toLowerCase(),a=i[2],l=n+":"+(t.nid||o),s=z[l];r.nid=o,r.nss=a,r.path=void 0,s&&(r=s.parse(r,t));}else r.error=r.error||"URN can not be parsed.";return r},serialize:function(e,t){var i=t.scheme||e.scheme||"urn",r=e.nid,n=i+":"+(t.nid||r),o=z[n];o&&(e=o.serialize(e,t));var a=e,l=e.nss;return a.path=(r||t.nid)+":"+l,a}},_e=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,je={scheme:"urn:uuid",parse:function(e,t){var i=e;return i.uuid=i.nss,i.nss=void 0,t.tolerant||i.uuid&&i.uuid.match(_e)||(i.error=i.error||"UUID is not valid."),i},serialize:function(e,t){var i=e;return i.nss=(e.uuid||"").toLowerCase(),i}};z[pe.scheme]=pe,z[de.scheme]=de,z[ye.scheme]=ye,z[ue.scheme]=ue,z[xe.scheme]=xe,z[Re.scheme]=Re,z[je.scheme]=je,e.SCHEMES=z,e.pctEncChar=$,e.pctDecChars=W,e.parse=K,e.removeDotSegments=te,e.serialize=ie,e.resolveComponents=re,e.resolve=ne,e.normalize=oe,e.equal=ae,e.escapeComponent=le,e.unescapeComponent=se,Object.defineProperty(e,"__esModule",{value:!0});}(wp.exports)),wp.exports}function Tp(){return gp||(gp=1,mp=function e(t,i){if(t===i)return !0;if(t&&i&&"object"==typeof t&&"object"==typeof i){if(t.constructor!==i.constructor)return !1;var r,n,o;if(Array.isArray(t)){if((r=t.length)!=i.length)return !1;for(n=r;0!=n--;)if(!e(t[n],i[n]))return !1;return !0}if(t.constructor===RegExp)return t.source===i.source&&t.flags===i.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===i.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===i.toString();if((r=(o=Object.keys(t)).length)!==Object.keys(i).length)return !1;for(n=r;0!=n--;)if(!Object.prototype.hasOwnProperty.call(i,o[n]))return !1;for(n=r;0!=n--;){var a=o[n];if(!e(t[a],i[a]))return !1}return !0}return t!=t&&i!=i}),mp}function Cp(){if(vp)return bp;function e(e,t,i,r){var n=r?" !== ":" === ",o=r?" || ":" && ",a=r?"!":"",l=r?"":"!";switch(e){case"null":return t+n+"null";case"array":return a+"Array.isArray("+t+")";case"object":return "("+a+t+o+"typeof "+t+n+'"object"'+o+l+"Array.isArray("+t+"))";case"integer":return "(typeof "+t+n+'"number"'+o+l+"("+t+" % 1)"+o+t+n+t+(i?o+a+"isFinite("+t+")":"")+")";case"number":return "(typeof "+t+n+'"'+e+'"'+(i?o+a+"isFinite("+t+")":"")+")";default:return "typeof "+t+n+'"'+e+'"'}}vp=1,bp={copy:function(e,t){for(var i in t=t||{},e)t[i]=e[i];return t},checkDataType:e,checkDataTypes:function(t,r,n){if(1===t.length)return e(t[0],r,n,!0);var o="",a=i(t);for(var l in a.array&&a.object&&(o=a.null?"(":"(!"+r+" || ",o+="typeof "+r+' !== "object")',delete a.null,delete a.array,delete a.object),a.number&&delete a.integer,a)o+=(o?" && ":"")+e(l,r,n,!0);return o},coerceToTypes:function(e,i){if(Array.isArray(i)){for(var r=[],n=0;n<i.length;n++){var o=i[n];(t[o]||"array"===e&&"array"===o)&&(r[r.length]=o);}if(r.length)return r}else {if(t[i])return [i];if("array"===e&&"array"===i)return ["array"]}},toHash:i,getProperty:o,escapeQuotes:a,equal:Tp(),ucs2length:fp?hp:(fp=1,hp=function(e){for(var t,i=0,r=e.length,n=0;n<r;)i++,(t=e.charCodeAt(n++))>=55296&&t<=56319&&n<r&&56320==(64512&(t=e.charCodeAt(n)))&&n++;return i}),varOccurences:function(e,t){t+="[^0-9]";var i=e.match(new RegExp(t,"g"));return i?i.length:0},varReplace:function(e,t,i){return t+="([^0-9])",i=i.replace(/\$/g,"$$$$"),e.replace(new RegExp(t,"g"),i+"$1")},schemaHasRules:function(e,t){if("boolean"==typeof e)return !e;for(var i in e)if(t[i])return !0},schemaHasRulesExcept:function(e,t,i){if("boolean"==typeof e)return !e&&"not"!=i;for(var r in e)if(r!=i&&t[r])return !0},schemaUnknownRules:function(e,t){if("boolean"==typeof e)return;for(var i in e)if(!t[i])return i},toQuotedString:l,getPathExpr:function(e,t,i,r){return d(e,i?"'/' + "+t+(r?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):r?"'[' + "+t+" + ']'":"'[\\'' + "+t+" + '\\']'")},getPath:function(e,t,i){var r=l(i?"/"+c(t):o(t));return d(e,r)},getData:function(e,t,i){var r,n,a,l;if(""===e)return "rootData";if("/"==e[0]){if(!s.test(e))throw new Error("Invalid JSON-pointer: "+e);n=e,a="rootData";}else {if(!(l=e.match(p)))throw new Error("Invalid JSON-pointer: "+e);if(r=+l[1],"#"==(n=l[2])){if(r>=t)throw new Error("Cannot access property/index "+r+" levels up, current level is "+t);return i[t-r]}if(r>t)throw new Error("Cannot access data "+r+" levels up, current level is "+t);if(a="data"+(t-r||""),!n)return a}for(var d=a,c=n.split("/"),u=0;u<c.length;u++){var m=c[u];m&&(d+=" && "+(a+=o(y(m))));}return d},unescapeFragment:function(e){return y(decodeURIComponent(e))},unescapeJsonPointer:y,escapeFragment:function(e){return encodeURIComponent(c(e))},escapeJsonPointer:c};var t=i(["string","number","integer","boolean","null"]);function i(e){for(var t={},i=0;i<e.length;i++)t[e[i]]=!0;return t}var r=/^[a-z$_][a-z$_0-9]*$/i,n=/'|\\/g;function o(e){return "number"==typeof e?"["+e+"]":r.test(e)?"."+e:"['"+a(e)+"']"}function a(e){return e.replace(n,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}function l(e){return "'"+a(e)+"'"}var s=/^\/(?:[^~]|~0|~1)*$/,p=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function d(e,t){return '""'==e?t:(e+" + "+t).replace(/([^\\])' \+ '/g,"$1")}function c(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}function y(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}return bp}function Ep(){if(kp)return Sp;kp=1;var e=Cp();return Sp=function(t){e.copy(t,this);}}var xp,Op,Rp,_p,jp,Bp,Pp,Np,Mp,Dp,Ap,Lp={exports:{}};function Fp(){if(xp)return Lp.exports;xp=1;var e=Lp.exports=function(e,i,r){"function"==typeof i&&(r=i,i={}),t(i,"function"==typeof(r=i.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e);};function t(i,r,n,o,a,l,s,p,d,c){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var y in r(o,a,l,s,p,d,c),o){var u=o[y];if(Array.isArray(u)){if(y in e.arrayKeywords)for(var m=0;m<u.length;m++)t(i,r,n,u[m],a+"/"+y+"/"+m,l,a,y,o,m);}else if(y in e.propsKeywords){if(u&&"object"==typeof u)for(var g in u)t(i,r,n,u[g],a+"/"+y+"/"+g.replace(/~/g,"~0").replace(/\//g,"~1"),l,a,y,o,g);}else (y in e.keywords||i.allKeys&&!(y in e.skipKeywords))&&t(i,r,n,u,a+"/"+y,l,a,y,o);}n(o,a,l,s,p,d,c);}}return e.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},e.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},e.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},e.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0},Lp.exports}function zp(){if(Rp)return Op;Rp=1;var e=Ip(),t=Tp(),i=Cp(),r=Ep(),n=Fp();function o(e,t,i){var n=this._refs[i];if("string"==typeof n){if(!this._refs[n])return o.call(this,e,t,n);n=this._refs[n];}if((n=n||this._schemas[i])instanceof r)return c(n.schema,this._opts.inlineRefs)?n.schema:n.validate||this._compile(n);var l,s,p,d=a.call(this,t,i);return d&&(l=d.schema,t=d.root,p=d.baseId),l instanceof r?s=l.validate||e.call(this,l.schema,t,void 0,p):void 0!==l&&(s=c(l,this._opts.inlineRefs)?l:e.call(this,l,t,void 0,p)),s}function a(t,i){var n=e.parse(i),o=g(n),a=m(this._getId(t.schema));if(0===Object.keys(t.schema).length||o!==a){var s=f(o),d=this._refs[s];if("string"==typeof d)return l.call(this,t,d,n);if(d instanceof r)d.validate||this._compile(d),t=d;else {if(!((d=this._schemas[s])instanceof r))return;if(d.validate||this._compile(d),s==f(i))return {schema:d,root:t,baseId:a};t=d;}if(!t.schema)return;a=m(this._getId(t.schema));}return p.call(this,n,a,t.schema,t)}function l(e,t,i){var r=a.call(this,e,t);if(r){var n=r.schema,o=r.baseId;e=r.root;var l=this._getId(n);return l&&(o=b(o,l)),p.call(this,i,o,n,e)}}Op=o,o.normalizeId=f,o.fullPath=m,o.url=b,o.ids=function(r){var o=f(this._getId(r)),a={"":o},l={"":m(o,!1)},s={},p=this;return n(r,{allKeys:!0},(function(r,n,o,d,c,y,u){if(""!==n){var m=p._getId(r),g=a[d],h=l[d]+"/"+c;if(void 0!==u&&(h+="/"+("number"==typeof u?u:i.escapeFragment(u))),"string"==typeof m){m=g=f(g?e.resolve(g,m):m);var b=p._refs[m];if("string"==typeof b&&(b=p._refs[b]),b&&b.schema){if(!t(r,b.schema))throw new Error('id "'+m+'" resolves to more than one schema')}else if(m!=f(h))if("#"==m[0]){if(s[m]&&!t(r,s[m]))throw new Error('id "'+m+'" resolves to more than one schema');s[m]=r;}else p._refs[m]=h;}a[n]=g,l[n]=h;}})),s},o.inlineRef=c,o.schema=a;var s=i.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function p(e,t,r,n){if(e.fragment=e.fragment||"","/"==e.fragment.slice(0,1)){for(var o=e.fragment.split("/"),l=1;l<o.length;l++){var p=o[l];if(p){if(void 0===(r=r[p=i.unescapeFragment(p)]))break;var d;if(!s[p]&&((d=this._getId(r))&&(t=b(t,d)),r.$ref)){var c=b(t,r.$ref),y=a.call(this,n,c);y&&(r=y.schema,n=y.root,t=y.baseId);}}}return void 0!==r&&r!==n.schema?{schema:r,root:n,baseId:t}:void 0}}var d=i.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function c(e,t){return !1!==t&&(void 0===t||!0===t?y(e):t?u(e)<=t:void 0)}function y(e){var t;if(Array.isArray(e)){for(var i=0;i<e.length;i++)if("object"==typeof(t=e[i])&&!y(t))return !1}else for(var r in e){if("$ref"==r)return !1;if("object"==typeof(t=e[r])&&!y(t))return !1}return !0}function u(e){var t,i=0;if(Array.isArray(e)){for(var r=0;r<e.length;r++)if("object"==typeof(t=e[r])&&(i+=u(t)),i==1/0)return 1/0}else for(var n in e){if("$ref"==n)return 1/0;if(d[n])i++;else if("object"==typeof(t=e[n])&&(i+=u(t)+1),i==1/0)return 1/0}return i}function m(t,i){return !1!==i&&(t=f(t)),g(e.parse(t))}function g(t){return e.serialize(t).split("#")[0]+"#"}var h=/#\/?$/;function f(e){return e?e.replace(h,""):""}function b(t,i){return i=f(i),e.resolve(t,i)}return Op}function $p(){if(jp)return _p;jp=1;var e=zp();function t(i,r,n){this.message=n||t.message(i,r),this.missingRef=e.url(i,r),this.missingSchema=e.normalizeId(e.fullPath(this.missingRef));}function i(e){return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}return _p={Validation:i((function(e){this.message="validation failed",this.errors=e,this.ajv=this.validation=!0;})),MissingRef:i(t)},t.message=function(e,t){return "can't resolve reference "+t+" from id "+e},_p}function Wp(){return Pp||(Pp=1,Bp=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var i,r="boolean"==typeof t.cycles&&t.cycles,n=t.cmp&&(i=t.cmp,function(e){return function(t,r){var n={key:t,value:e[t]},o={key:r,value:e[r]};return i(n,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var i,a;if(Array.isArray(t)){for(a="[",i=0;i<t.length;i++)i&&(a+=","),a+=e(t[i])||"null";return a+"]"}if(null===t)return "null";if(-1!==o.indexOf(t)){if(r)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var l=o.push(t)-1,s=Object.keys(t).sort(n&&n(t));for(a="",i=0;i<s.length;i++){var p=s[i],d=e(t[p]);d&&(a&&(a+=","),a+=JSON.stringify(p)+":"+d);}return o.splice(l,1),"{"+a+"}"}}(e)}),Bp}function Vp(){return Mp||(Mp=1,Np=function(e,t,i){var r="",n=!0===e.schema.$async,o=e.util.schemaHasRulesExcept(e.schema,e.RULES.all,"$ref"),a=e.self._getId(e.schema);if(e.opts.strictKeywords){var l=e.util.schemaUnknownRules(e.schema,e.RULES.keywords);if(l){var s="unknown keyword: "+l;if("log"!==e.opts.strictKeywords)throw new Error(s);e.logger.warn(s);}}if(e.isTop&&(r+=" var validate = ",n&&(e.async=!0,r+="async "),r+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",a&&(e.opts.sourceCode||e.opts.processCode)&&(r+=" /*# sourceURL="+a+" */ ")),"boolean"==typeof e.schema||!o&&!e.schema.$ref){t="false schema";var p=e.level,d=e.dataLevel,c=e.schema[t],y=e.schemaPath+e.util.getProperty(t),u=e.errSchemaPath+"/"+t,m=!e.opts.allErrors,g="data"+(d||""),h="valid"+p;if(!1===e.schema){e.isTop?m=!0:r+=" var "+h+" = false; ",(X=X||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: 'boolean schema is false' "),e.opts.verbose&&(r+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+g+" "),r+=" } "):r+=" {} ";var f=r;r=X.pop(),!e.compositeRule&&m?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";}else e.isTop?r+=n?" return data; ":" validate.errors = null; return true; ":r+=" var "+h+" = true; ";return e.isTop&&(r+=" }; return validate; "),r}if(e.isTop){var b=e.isTop;p=e.level=0,d=e.dataLevel=0,g="data";if(e.rootId=e.resolve.fullPath(e.self._getId(e.root.schema)),e.baseId=e.baseId||e.rootId,delete e.isTop,e.dataPathArr=[""],void 0!==e.schema.default&&e.opts.useDefaults&&e.opts.strictDefaults){var v="default is ignored in the schema root";if("log"!==e.opts.strictDefaults)throw new Error(v);e.logger.warn(v);}r+=" var vErrors = null; ",r+=" var errors = 0;     ",r+=" if (rootData === undefined) rootData = data; ";}else {p=e.level,g="data"+((d=e.dataLevel)||"");if(a&&(e.baseId=e.resolve.url(e.baseId,a)),n&&!e.async)throw new Error("async schema in sync schema");r+=" var errs_"+p+" = errors;";}h="valid"+p,m=!e.opts.allErrors;var S="",k="",w=e.schema.type,I=Array.isArray(w);if(w&&e.opts.nullable&&!0===e.schema.nullable&&(I?-1==w.indexOf("null")&&(w=w.concat("null")):"null"!=w&&(w=[w,"null"],I=!0)),I&&1==w.length&&(w=w[0],I=!1),e.schema.$ref&&o){if("fail"==e.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+e.errSchemaPath+'" (see option extendRefs)');!0!==e.opts.extendRefs&&(o=!1,e.logger.warn('$ref: keywords ignored in schema at path "'+e.errSchemaPath+'"'));}if(e.schema.$comment&&e.opts.$comment&&(r+=" "+e.RULES.all.$comment.code(e,"$comment")),w){if(e.opts.coerceTypes)var T=e.util.coerceToTypes(e.opts.coerceTypes,w);var C=e.RULES.types[w];if(T||I||!0===C||C&&!Q(C)){y=e.schemaPath+".type",u=e.errSchemaPath+"/type",y=e.schemaPath+".type",u=e.errSchemaPath+"/type";var E=I?"checkDataTypes":"checkDataType";if(r+=" if ("+e.util[E](w,g,e.opts.strictNumbers,!0)+") { ",T){var x="dataType"+p,O="coerced"+p;r+=" var "+x+" = typeof "+g+"; var "+O+" = undefined; ","array"==e.opts.coerceTypes&&(r+=" if ("+x+" == 'object' && Array.isArray("+g+") && "+g+".length == 1) { "+g+" = "+g+"[0]; "+x+" = typeof "+g+"; if ("+e.util.checkDataType(e.schema.type,g,e.opts.strictNumbers)+") "+O+" = "+g+"; } "),r+=" if ("+O+" !== undefined) ; ";var R=T;if(R)for(var _,j=-1,B=R.length-1;j<B;)"string"==(_=R[j+=1])?r+=" else if ("+x+" == 'number' || "+x+" == 'boolean') "+O+" = '' + "+g+"; else if ("+g+" === null) "+O+" = ''; ":"number"==_||"integer"==_?(r+=" else if ("+x+" == 'boolean' || "+g+" === null || ("+x+" == 'string' && "+g+" && "+g+" == +"+g+" ","integer"==_&&(r+=" && !("+g+" % 1)"),r+=")) "+O+" = +"+g+"; "):"boolean"==_?r+=" else if ("+g+" === 'false' || "+g+" === 0 || "+g+" === null) "+O+" = false; else if ("+g+" === 'true' || "+g+" === 1) "+O+" = true; ":"null"==_?r+=" else if ("+g+" === '' || "+g+" === 0 || "+g+" === false) "+O+" = null; ":"array"==e.opts.coerceTypes&&"array"==_&&(r+=" else if ("+x+" == 'string' || "+x+" == 'number' || "+x+" == 'boolean' || "+g+" == null) "+O+" = ["+g+"]; ");r+=" else {   ",(X=X||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { type: '",r+=I?""+w.join(","):""+w,r+="' } ",!1!==e.opts.messages&&(r+=" , message: 'should be ",r+=I?""+w.join(","):""+w,r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+y+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+g+" "),r+=" } "):r+=" {} ";f=r;r=X.pop(),!e.compositeRule&&m?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } if ("+O+" !== undefined) {  ";var P=d?"data"+(d-1||""):"parentData";r+=" "+g+" = "+O+"; ",d||(r+="if ("+P+" !== undefined)"),r+=" "+P+"["+(d?e.dataPathArr[d]:"parentDataProperty")+"] = "+O+"; } ";}else {(X=X||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { type: '",r+=I?""+w.join(","):""+w,r+="' } ",!1!==e.opts.messages&&(r+=" , message: 'should be ",r+=I?""+w.join(","):""+w,r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+y+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+g+" "),r+=" } "):r+=" {} ";f=r;r=X.pop(),!e.compositeRule&&m?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";}r+=" } ";}}if(e.schema.$ref&&!o)r+=" "+e.RULES.all.$ref.code(e,"$ref")+" ",m&&(r+=" } if (errors === ",r+=b?"0":"errs_"+p,r+=") { ",k+="}");else {var N=e.RULES;if(N)for(var M=-1,D=N.length-1;M<D;)if(Q(C=N[M+=1])){if(C.type&&(r+=" if ("+e.util.checkDataType(C.type,g,e.opts.strictNumbers)+") { "),e.opts.useDefaults)if("object"==C.type&&e.schema.properties){c=e.schema.properties;var A=Object.keys(c);if(A)for(var L,F=-1,z=A.length-1;F<z;){if(void 0!==(V=c[L=A[F+=1]]).default){var $=g+e.util.getProperty(L);if(e.compositeRule){if(e.opts.strictDefaults){v="default is ignored for: "+$;if("log"!==e.opts.strictDefaults)throw new Error(v);e.logger.warn(v);}}else r+=" if ("+$+" === undefined ","empty"==e.opts.useDefaults&&(r+=" || "+$+" === null || "+$+" === '' "),r+=" ) "+$+" = ","shared"==e.opts.useDefaults?r+=" "+e.useDefault(V.default)+" ":r+=" "+JSON.stringify(V.default)+" ",r+="; ";}}}else if("array"==C.type&&Array.isArray(e.schema.items)){var W=e.schema.items;if(W){j=-1;for(var V,U=W.length-1;j<U;)if(void 0!==(V=W[j+=1]).default){$=g+"["+j+"]";if(e.compositeRule){if(e.opts.strictDefaults){v="default is ignored for: "+$;if("log"!==e.opts.strictDefaults)throw new Error(v);e.logger.warn(v);}}else r+=" if ("+$+" === undefined ","empty"==e.opts.useDefaults&&(r+=" || "+$+" === null || "+$+" === '' "),r+=" ) "+$+" = ","shared"==e.opts.useDefaults?r+=" "+e.useDefault(V.default)+" ":r+=" "+JSON.stringify(V.default)+" ",r+="; ";}}}var G=C.rules;if(G)for(var q,H=-1,Y=G.length-1;H<Y;)if(J(q=G[H+=1])){var K=q.code(e,q.keyword,C.type);K&&(r+=" "+K+" ",m&&(S+="}"));}if(m&&(r+=" "+S+" ",S=""),C.type&&(r+=" } ",w&&w===C.type&&!T)){r+=" else { ";var X;y=e.schemaPath+".type",u=e.errSchemaPath+"/type";(X=X||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'type' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(u)+" , params: { type: '",r+=I?""+w.join(","):""+w,r+="' } ",!1!==e.opts.messages&&(r+=" , message: 'should be ",r+=I?""+w.join(","):""+w,r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+y+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+g+" "),r+=" } "):r+=" {} ";f=r;r=X.pop(),!e.compositeRule&&m?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ";}m&&(r+=" if (errors === ",r+=b?"0":"errs_"+p,r+=") { ",k+="}");}}function Q(e){for(var t=e.rules,i=0;i<t.length;i++)if(J(t[i]))return !0}function J(t){return void 0!==e.schema[t.keyword]||t.implements&&function(t){for(var i=t.implements,r=0;r<i.length;r++)if(void 0!==e.schema[i[r]])return !0}(t)}return m&&(r+=" "+k+" "),b?(n?(r+=" if (errors === 0) return data;           ",r+=" else throw new ValidationError(vErrors); "):(r+=" validate.errors = vErrors; ",r+=" return errors === 0;       "),r+=" }; return validate;"):r+=" var "+h+" = errors === errs_"+p+";",r}),Np}function Up(){if(Ap)return Dp;Ap=1;var e=zp(),t=Cp(),i=$p(),r=Wp(),n=Vp(),o=t.ucs2length,a=Tp(),l=i.Validation;function s(e,t,i){var r=d.call(this,e,t,i);return r>=0?{index:r,compiling:!0}:(r=this._compilations.length,this._compilations[r]={schema:e,root:t,baseId:i},{index:r,compiling:!1})}function p(e,t,i){var r=d.call(this,e,t,i);r>=0&&this._compilations.splice(r,1);}function d(e,t,i){for(var r=0;r<this._compilations.length;r++){var n=this._compilations[r];if(n.schema==e&&n.root==t&&n.baseId==i)return r}return -1}function c(e,i){return "var pattern"+e+" = new RegExp("+t.toQuotedString(i[e])+");"}function y(e){return "var default"+e+" = defaults["+e+"];"}function u(e,t){return void 0===t[e]?"":"var refVal"+e+" = refVal["+e+"];"}function m(e){return "var customRule"+e+" = customRules["+e+"];"}function g(e,t){if(!e.length)return "";for(var i="",r=0;r<e.length;r++)i+=t(r,e);return i}return Dp=function d(h,f,b,v){var S=this,k=this._opts,w=[void 0],I={},T=[],C={},E=[],x={},O=[];f=f||{schema:h,refVal:w,refs:I};var R=s.call(this,h,f,v),_=this._compilations[R.index];if(R.compiling)return _.callValidate=function e(){var t=_.validate,i=t.apply(this,arguments);return e.errors=t.errors,i};var j=this._formats,B=this.RULES;try{var P=M(h,f,b,v);_.validate=P;var N=_.callValidate;return N&&(N.schema=P.schema,N.errors=null,N.refs=P.refs,N.refVal=P.refVal,N.root=P.root,N.$async=P.$async,k.sourceCode&&(N.source=P.source)),P}finally{p.call(this,h,f,v);}function M(r,s,p,h){var b=!s||s&&s.schema==r;if(s.schema!=f.schema)return d.call(S,r,s,p,h);var v,C=!0===r.$async,x=n({isTop:!0,schema:r,isRoot:b,baseId:h,root:s,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:i.MissingRef,RULES:B,validate:n,util:t,resolve:e,resolveRef:D,usePattern:F,useDefault:z,useCustomRule:$,opts:k,formats:j,logger:S.logger,self:S});x=g(w,u)+g(T,c)+g(E,y)+g(O,m)+x,k.processCode&&(x=k.processCode(x,r));try{v=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",x)(S,B,j,f,w,E,O,a,o,l),w[0]=v;}catch(e){throw S.logger.error("Error compiling schema, function code:",x),e}return v.schema=r,v.errors=null,v.refs=I,v.refVal=w,v.root=b?v:s,C&&(v.$async=!0),!0===k.sourceCode&&(v.source={code:x,patterns:T,defaults:E}),v}function D(t,i,r){i=e.url(t,i);var n,o,a=I[i];if(void 0!==a)return L(n=w[a],o="refVal["+a+"]");if(!r&&f.refs){var l=f.refs[i];if(void 0!==l)return L(n=f.refVal[l],o=A(i,n))}o=A(i);var s=e.call(S,M,f,i);if(void 0===s){var p=b&&b[i];p&&(s=e.inlineRef(p,k.inlineRefs)?p:d.call(S,p,f,b,t));}if(void 0!==s)return function(e,t){var i=I[e];w[i]=t;}(i,s),L(s,o);!function(e){delete I[e];}(i);}function A(e,t){var i=w.length;return w[i]=t,I[e]=i,"refVal"+i}function L(e,t){return "object"==typeof e||"boolean"==typeof e?{code:t,schema:e,inline:!0}:{code:t,$async:e&&!!e.$async}}function F(e){var t=C[e];return void 0===t&&(t=C[e]=T.length,T[t]=e),"pattern"+t}function z(e){switch(typeof e){case"boolean":case"number":return ""+e;case"string":return t.toQuotedString(e);case"object":if(null===e)return "null";var i=r(e),n=x[i];return void 0===n&&(n=x[i]=E.length,E[n]=e),"default"+n}}function $(e,t,i,r){if(!1!==S._opts.validateSchema){var n=e.definition.dependencies;if(n&&!n.every((function(e){return Object.prototype.hasOwnProperty.call(i,e)})))throw new Error("parent schema must have all required keywords: "+n.join(","));var o=e.definition.validateSchema;if(o)if(!o(t)){var a="keyword schema is invalid: "+S.errorsText(o.errors);if("log"!=S._opts.validateSchema)throw new Error(a);S.logger.error(a);}}var l,s=e.definition.compile,p=e.definition.inline,d=e.definition.macro;if(s)l=s.call(S,t,i,r);else if(d)l=d.call(S,t,i,r),!1!==k.validateSchema&&S.validateSchema(l,!0);else if(p)l=p.call(S,r,e.keyword,t,i);else if(!(l=e.definition.validate))return;if(void 0===l)throw new Error('custom keyword "'+e.keyword+'"failed to compile');var c=O.length;return O[c]=l,{code:"customRule"+c,validate:l}}},Dp}var Gp,qp,Hp,Yp,Kp,Xp,Qp,Jp,Zp,ed,td,id,rd,nd,od,ad,ld,sd,pd,dd,cd,yd,ud,md,gd,hd,fd,bd,vd,Sd,kd,wd,Id,Td,Cd,Ed,xd,Od,Rd,_d,jd,Bd,Pd,Nd,Md,Dd,Ad,Ld,Fd,zd,$d,Wd,Vd,Ud,Gd,qd,Hd,Yd,Kd,Xd={exports:{}};function Qd(){return fd||(fd=1,hd=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l;var u="maximum"==t,m=u?"exclusiveMaximum":"exclusiveMinimum",g=e.schema[m],h=e.opts.$data&&g&&g.$data,f=u?"<":">",b=u?">":"<",v=void 0;if(!y&&"number"!=typeof l&&void 0!==l)throw new Error(t+" must be number");if(!h&&void 0!==g&&"number"!=typeof g&&"boolean"!=typeof g)throw new Error(m+" must be number or boolean");if(h){var S=e.util.getData(g.$data,a,e.dataPathArr),k="exclusive"+o,w="exclType"+o,I="exclIsNumber"+o,T="' + "+(x="op"+o)+" + '";n+=" var schemaExcl"+o+" = "+S+"; ",n+=" var "+k+"; var "+w+" = typeof "+(S="schemaExcl"+o)+"; if ("+w+" != 'boolean' && "+w+" != 'undefined' && "+w+" != 'number') { ";var C;v=m;(C=C||[]).push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(v||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: {} ",!1!==e.opts.messages&&(n+=" , message: '"+m+" should be boolean' "),e.opts.verbose&&(n+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var E=n;n=C.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+E+"]); ":n+=" validate.errors = ["+E+"]; return false; ":n+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+=" } else if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),n+=" "+w+" == 'number' ? ( ("+k+" = "+r+" === undefined || "+S+" "+f+"= "+r+") ? "+c+" "+b+"= "+S+" : "+c+" "+b+" "+r+" ) : ( ("+k+" = "+S+" === true) ? "+c+" "+b+"= "+r+" : "+c+" "+b+" "+r+" ) || "+c+" !== "+c+") { var op"+o+" = "+k+" ? '"+f+"' : '"+f+"='; ",void 0===l&&(v=m,p=e.errSchemaPath+"/"+m,r=S,y=h);}else {T=f;if((I="number"==typeof g)&&y){var x="'"+T+"'";n+=" if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),n+=" ( "+r+" === undefined || "+g+" "+f+"= "+r+" ? "+c+" "+b+"= "+g+" : "+c+" "+b+" "+r+" ) || "+c+" !== "+c+") { ";}else {I&&void 0===l?(k=!0,v=m,p=e.errSchemaPath+"/"+m,r=g,b+="="):(I&&(r=Math[u?"min":"max"](g,l)),g===(!I||r)?(k=!0,v=m,p=e.errSchemaPath+"/"+m,b+="="):(k=!1,T+="="));x="'"+T+"'";n+=" if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),n+=" "+c+" "+b+" "+r+" || "+c+" !== "+c+") { ";}}v=v||t,(C=C||[]).push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(v||"_limit")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { comparison: "+x+", limit: "+r+", exclusive: "+k+" } ",!1!==e.opts.messages&&(n+=" , message: 'should be "+T+" ",n+=y?"' + "+r:r+"'"),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";E=n;return n=C.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+E+"]); ":n+=" validate.errors = ["+E+"]; return false; ":n+=" var err = "+E+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+=" } ",d&&(n+=" else { "),n}),hd}function Jd(){return vd||(vd=1,bd=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;if(y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,!y&&"number"!=typeof l)throw new Error(t+" must be number");n+="if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),n+=" "+c+".length "+("maxItems"==t?">":"<")+" "+r+") { ";var u=t,m=m||[];m.push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(u||"_limitItems")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+r+" } ",!1!==e.opts.messages&&(n+=" , message: 'should NOT have ",n+="maxItems"==t?"more":"fewer",n+=" than ",n+=y?"' + "+r+" + '":""+l,n+=" items' "),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var g=n;return n=m.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+g+"]); ":n+=" validate.errors = ["+g+"]; return false; ":n+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+="} ",d&&(n+=" else { "),n}),bd}function Zd(){return kd||(kd=1,Sd=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;if(y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,!y&&"number"!=typeof l)throw new Error(t+" must be number");var u="maxLength"==t?">":"<";n+="if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),!1===e.opts.unicode?n+=" "+c+".length ":n+=" ucs2length("+c+") ",n+=" "+u+" "+r+") { ";var m=t,g=g||[];g.push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(m||"_limitLength")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+r+" } ",!1!==e.opts.messages&&(n+=" , message: 'should NOT be ",n+="maxLength"==t?"longer":"shorter",n+=" than ",n+=y?"' + "+r+" + '":""+l,n+=" characters' "),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var h=n;return n=g.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+h+"]); ":n+=" validate.errors = ["+h+"]; return false; ":n+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+="} ",d&&(n+=" else { "),n}),Sd}function ec(){return Id||(Id=1,wd=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;if(y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,!y&&"number"!=typeof l)throw new Error(t+" must be number");n+="if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'number') || "),n+=" Object.keys("+c+").length "+("maxProperties"==t?">":"<")+" "+r+") { ";var u=t,m=m||[];m.push(n),n="",!1!==e.createErrors?(n+=" { keyword: '"+(u||"_limitProperties")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { limit: "+r+" } ",!1!==e.opts.messages&&(n+=" , message: 'should NOT have ",n+="maxProperties"==t?"more":"fewer",n+=" than ",n+=y?"' + "+r+" + '":""+l,n+=" properties' "),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var g=n;return n=m.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+g+"]); ":n+=" validate.errors = ["+g+"]; return false; ":n+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+="} ",d&&(n+=" else { "),n}),wd}function tc(){if(Vd)return Wd;Vd=1;var e=($d||($d=1,zd={$ref:(Kp||(Kp=1,Yp=function(e,t,i){var r,n,o=" ",a=e.level,l=e.dataLevel,s=e.schema[t],p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(l||""),y="valid"+a;if("#"==s||"#/"==s)e.isRoot?(r=e.async,n="validate"):(r=!0===e.root.schema.$async,n="root.refVal[0]");else {var u=e.resolveRef(e.baseId,s,e.isRoot);if(void 0===u){var m=e.MissingRefError.message(e.baseId,s);if("fail"==e.opts.missingRefs){e.logger.error(m),(b=b||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { ref: '"+e.util.escapeQuotes(s)+"' } ",!1!==e.opts.messages&&(o+=" , message: 'can\\'t resolve reference "+e.util.escapeQuotes(s)+"' "),e.opts.verbose&&(o+=" , schema: "+e.util.toQuotedString(s)+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),o+=" } "):o+=" {} ";var g=o;o=b.pop(),!e.compositeRule&&d?e.async?o+=" throw new ValidationError(["+g+"]); ":o+=" validate.errors = ["+g+"]; return false; ":o+=" var err = "+g+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",d&&(o+=" if (false) { ");}else {if("ignore"!=e.opts.missingRefs)throw new e.MissingRefError(e.baseId,s,m);e.logger.warn(m),d&&(o+=" if (true) { ");}}else if(u.inline){var h=e.util.copy(e);h.level++;var f="valid"+h.level;h.schema=u.schema,h.schemaPath="",h.errSchemaPath=s,o+=" "+e.validate(h).replace(/validate\.schema/g,u.code)+" ",d&&(o+=" if ("+f+") { ");}else r=!0===u.$async||e.async&&!1!==u.$async,n=u.code;}if(n){var b;(b=b||[]).push(o),o="",e.opts.passContext?o+=" "+n+".call(this, ":o+=" "+n+"( ",o+=" "+c+", (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var v=o+=" , "+(l?"data"+(l-1||""):"parentData")+" , "+(l?e.dataPathArr[l]:"parentDataProperty")+", rootData)  ";if(o=b.pop(),r){if(!e.async)throw new Error("async schema referenced by sync schema");d&&(o+=" var "+y+"; "),o+=" try { await "+v+"; ",d&&(o+=" "+y+" = true; "),o+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",d&&(o+=" "+y+" = false; "),o+=" } ",d&&(o+=" if ("+y+") { ");}else o+=" if (!"+v+") { if (vErrors === null) vErrors = "+n+".errors; else vErrors = vErrors.concat("+n+".errors); errors = vErrors.length; } ",d&&(o+=" else { ");}return o}),Yp),allOf:(Qp||(Qp=1,Xp=function(e,t,i){var r=" ",n=e.schema[t],o=e.schemaPath+e.util.getProperty(t),a=e.errSchemaPath+"/"+t,l=!e.opts.allErrors,s=e.util.copy(e),p="";s.level++;var d="valid"+s.level,c=s.baseId,y=!0,u=n;if(u)for(var m,g=-1,h=u.length-1;g<h;)m=u[g+=1],(e.opts.strictKeywords?"object"==typeof m&&Object.keys(m).length>0||!1===m:e.util.schemaHasRules(m,e.RULES.all))&&(y=!1,s.schema=m,s.schemaPath=o+"["+g+"]",s.errSchemaPath=a+"/"+g,r+="  "+e.validate(s)+" ",s.baseId=c,l&&(r+=" if ("+d+") { ",p+="}"));return l&&(r+=y?" if (true) { ":" "+p.slice(0,-1)+" "),r}),Xp),anyOf:(Zp||(Zp=1,Jp=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y="errs__"+n,u=e.util.copy(e),m="";u.level++;var g="valid"+u.level,h=a.every((function(t){return e.opts.strictKeywords?"object"==typeof t&&Object.keys(t).length>0||!1===t:e.util.schemaHasRules(t,e.RULES.all)}));if(h){var f=u.baseId;r+=" var "+y+" = errors; var "+c+" = false;  ";var b=e.compositeRule;e.compositeRule=u.compositeRule=!0;var v=a;if(v)for(var S,k=-1,w=v.length-1;k<w;)S=v[k+=1],u.schema=S,u.schemaPath=l+"["+k+"]",u.errSchemaPath=s+"/"+k,r+="  "+e.validate(u)+" ",u.baseId=f,r+=" "+c+" = "+c+" || "+g+"; if (!"+c+") { ",m+="}";e.compositeRule=u.compositeRule=b,r+=" "+m+" if (!"+c+") {   var err =   ",!1!==e.createErrors?(r+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: 'should match some schema in anyOf' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?r+=" throw new ValidationError(vErrors); ":r+=" validate.errors = vErrors; return false; "),r+=" } else {  errors = "+y+"; if (vErrors !== null) { if ("+y+") vErrors.length = "+y+"; else vErrors = null; } ",e.opts.allErrors&&(r+=" } ");}else p&&(r+=" if (true) { ");return r}),Jp),$comment:(td||(td=1,ed=function(e,t,i){var r=" ",n=e.schema[t],o=e.errSchemaPath+"/"+t;e.opts.allErrors;var a=e.util.toQuotedString(n);return !0===e.opts.$comment?r+=" console.log("+a+");":"function"==typeof e.opts.$comment&&(r+=" self._opts.$comment("+a+", "+e.util.toQuotedString(o)+", validate.root.schema);"),r}),ed),const:(rd||(rd=1,id=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y=e.opts.$data&&a&&a.$data;y&&(r+=" var schema"+n+" = "+e.util.getData(a.$data,o,e.dataPathArr)+"; "),y||(r+=" var schema"+n+" = validate.schema"+l+";"),r+="var "+c+" = equal("+d+", schema"+n+"); if (!"+c+") {   ";var u=u||[];u.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'const' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { allowedValue: schema"+n+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be equal to constant' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var m=r;return r=u.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+m+"]); ":r+=" validate.errors = ["+m+"]; return false; ":r+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" }",p&&(r+=" else { "),r}),id),contains:(od||(od=1,nd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y="errs__"+n,u=e.util.copy(e);u.level++;var m="valid"+u.level,g="i"+n,h=u.dataLevel=e.dataLevel+1,f="data"+h,b=e.baseId,v=e.opts.strictKeywords?"object"==typeof a&&Object.keys(a).length>0||!1===a:e.util.schemaHasRules(a,e.RULES.all);if(r+="var "+y+" = errors;var "+c+";",v){var S=e.compositeRule;e.compositeRule=u.compositeRule=!0,u.schema=a,u.schemaPath=l,u.errSchemaPath=s,r+=" var "+m+" = false; for (var "+g+" = 0; "+g+" < "+d+".length; "+g+"++) { ",u.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers,!0);var k=d+"["+g+"]";u.dataPathArr[h]=g;var w=e.validate(u);u.baseId=b,e.util.varOccurences(w,f)<2?r+=" "+e.util.varReplace(w,f,k)+" ":r+=" var "+f+" = "+k+"; "+w+" ",r+=" if ("+m+") break; }  ",e.compositeRule=u.compositeRule=S,r+="  if (!"+m+") {";}else r+=" if ("+d+".length == 0) {";var I=I||[];I.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: 'should contain a valid item' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var T=r;return r=I.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+T+"]); ":r+=" validate.errors = ["+T+"]; return false; ":r+=" var err = "+T+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else { ",v&&(r+="  errors = "+y+"; if (vErrors !== null) { if ("+y+") vErrors.length = "+y+"; else vErrors = null; } "),e.opts.allErrors&&(r+=" } "),r}),nd),dependencies:(ld||(ld=1,ad=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="errs__"+n,y=e.util.copy(e),u="";y.level++;var m="valid"+y.level,g={},h={},f=e.opts.ownProperties;for(k in a)if("__proto__"!=k){var b=a[k],v=Array.isArray(b)?h:g;v[k]=b;}r+="var "+c+" = errors;";var S=e.errorPath;for(var k in r+="var missing"+n+";",h)if((v=h[k]).length){if(r+=" if ( "+d+e.util.getProperty(k)+" !== undefined ",f&&(r+=" && Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(k)+"') "),p){r+=" && ( ";var w=v;if(w)for(var I=-1,T=w.length-1;I<T;)_=w[I+=1],I&&(r+=" || "),r+=" ( ( "+(N=d+(P=e.util.getProperty(_)))+" === undefined ",f&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(_)+"') "),r+=") && (missing"+n+" = "+e.util.toQuotedString(e.opts.jsonPointers?_:P)+") ) ";r+=")) {  ";var C="missing"+n,E="' + "+C+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(S,C,!0):S+" + "+C);var x=x||[];x.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { property: '"+e.util.escapeQuotes(k)+"', missingProperty: '"+E+"', depsCount: "+v.length+", deps: '"+e.util.escapeQuotes(1==v.length?v[0]:v.join(", "))+"' } ",!1!==e.opts.messages&&(r+=" , message: 'should have ",1==v.length?r+="property "+e.util.escapeQuotes(v[0]):r+="properties "+e.util.escapeQuotes(v.join(", ")),r+=" when property "+e.util.escapeQuotes(k)+" is present' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var O=r;r=x.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+O+"]); ":r+=" validate.errors = ["+O+"]; return false; ":r+=" var err = "+O+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";}else {r+=" ) { ";var R=v;if(R)for(var _,j=-1,B=R.length-1;j<B;){_=R[j+=1];var P=e.util.getProperty(_),N=(E=e.util.escapeQuotes(_),d+P);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(S,_,e.opts.jsonPointers)),r+=" if ( "+N+" === undefined ",f&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(_)+"') "),r+=") {  var err =   ",!1!==e.createErrors?(r+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { property: '"+e.util.escapeQuotes(k)+"', missingProperty: '"+E+"', depsCount: "+v.length+", deps: '"+e.util.escapeQuotes(1==v.length?v[0]:v.join(", "))+"' } ",!1!==e.opts.messages&&(r+=" , message: 'should have ",1==v.length?r+="property "+e.util.escapeQuotes(v[0]):r+="properties "+e.util.escapeQuotes(v.join(", ")),r+=" when property "+e.util.escapeQuotes(k)+" is present' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";}}r+=" }   ",p&&(u+="}",r+=" else { ");}e.errorPath=S;var M=y.baseId;for(var k in g)b=g[k],(e.opts.strictKeywords?"object"==typeof b&&Object.keys(b).length>0||!1===b:e.util.schemaHasRules(b,e.RULES.all))&&(r+=" "+m+" = true; if ( "+d+e.util.getProperty(k)+" !== undefined ",f&&(r+=" && Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(k)+"') "),r+=") { ",y.schema=b,y.schemaPath=l+e.util.getProperty(k),y.errSchemaPath=s+"/"+e.util.escapeFragment(k),r+="  "+e.validate(y)+" ",y.baseId=M,r+=" }  ",p&&(r+=" if ("+m+") { ",u+="}"));return p&&(r+="   "+u+" if ("+c+" == errors) {"),r}),ad),enum:(pd||(pd=1,sd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y=e.opts.$data&&a&&a.$data;y&&(r+=" var schema"+n+" = "+e.util.getData(a.$data,o,e.dataPathArr)+"; ");var u="i"+n,m="schema"+n;y||(r+=" var "+m+" = validate.schema"+l+";"),r+="var "+c+";",y&&(r+=" if (schema"+n+" === undefined) "+c+" = true; else if (!Array.isArray(schema"+n+")) "+c+" = false; else {"),r+=c+" = false;for (var "+u+"=0; "+u+"<"+m+".length; "+u+"++) if (equal("+d+", "+m+"["+u+"])) { "+c+" = true; break; }",y&&(r+="  }  "),r+=" if (!"+c+") {   ";var g=g||[];g.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { allowedValues: schema"+n+" } ",!1!==e.opts.messages&&(r+=" , message: 'should be equal to one of the allowed values' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var h=r;return r=g.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+h+"]); ":r+=" validate.errors = ["+h+"]; return false; ":r+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" }",p&&(r+=" else { "),r}),sd),format:(cd||(cd=1,dd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||"");if(!1===e.opts.format)return p&&(r+=" if (true) { "),r;var c,y=e.opts.$data&&a&&a.$data;y?(r+=" var schema"+n+" = "+e.util.getData(a.$data,o,e.dataPathArr)+"; ",c="schema"+n):c=a;var u=e.opts.unknownFormats,m=Array.isArray(u);if(y)r+=" var "+(g="format"+n)+" = formats["+c+"]; var "+(h="isObject"+n)+" = typeof "+g+" == 'object' && !("+g+" instanceof RegExp) && "+g+".validate; var "+(f="formatType"+n)+" = "+h+" && "+g+".type || 'string'; if ("+h+") { ",e.async&&(r+=" var async"+n+" = "+g+".async; "),r+=" "+g+" = "+g+".validate; } if (  ",y&&(r+=" ("+c+" !== undefined && typeof "+c+" != 'string') || "),r+=" (","ignore"!=u&&(r+=" ("+c+" && !"+g+" ",m&&(r+=" && self._opts.unknownFormats.indexOf("+c+") == -1 "),r+=") || "),r+=" ("+g+" && "+f+" == '"+i+"' && !(typeof "+g+" == 'function' ? ",e.async?r+=" (async"+n+" ? await "+g+"("+d+") : "+g+"("+d+")) ":r+=" "+g+"("+d+") ",r+=" : "+g+".test("+d+"))))) {";else {var g;if(!(g=e.formats[a])){if("ignore"==u)return e.logger.warn('unknown format "'+a+'" ignored in schema at path "'+e.errSchemaPath+'"'),p&&(r+=" if (true) { "),r;if(m&&u.indexOf(a)>=0)return p&&(r+=" if (true) { "),r;throw new Error('unknown format "'+a+'" is used in schema at path "'+e.errSchemaPath+'"')}var h,f=(h="object"==typeof g&&!(g instanceof RegExp)&&g.validate)&&g.type||"string";if(h){var b=!0===g.async;g=g.validate;}if(f!=i)return p&&(r+=" if (true) { "),r;if(b){if(!e.async)throw new Error("async format in sync schema");r+=" if (!(await "+(v="formats"+e.util.getProperty(a)+".validate")+"("+d+"))) { ";}else {r+=" if (! ";var v="formats"+e.util.getProperty(a);h&&(v+=".validate"),r+="function"==typeof g?" "+v+"("+d+") ":" "+v+".test("+d+") ",r+=") { ";}}var S=S||[];S.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'format' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { format:  ",r+=y?""+c:""+e.util.toQuotedString(a),r+="  } ",!1!==e.opts.messages&&(r+=" , message: 'should match format \"",r+=y?"' + "+c+" + '":""+e.util.escapeQuotes(a),r+="\"' "),e.opts.verbose&&(r+=" , schema:  ",r+=y?"validate.schema"+l:""+e.util.toQuotedString(a),r+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var k=r;return r=S.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+k+"]); ":r+=" validate.errors = ["+k+"]; return false; ":r+=" var err = "+k+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",p&&(r+=" else { "),r}),dd),if:(ud||(ud=1,yd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y="errs__"+n,u=e.util.copy(e);u.level++;var m="valid"+u.level,g=e.schema.then,h=e.schema.else,f=void 0!==g&&(e.opts.strictKeywords?"object"==typeof g&&Object.keys(g).length>0||!1===g:e.util.schemaHasRules(g,e.RULES.all)),b=void 0!==h&&(e.opts.strictKeywords?"object"==typeof h&&Object.keys(h).length>0||!1===h:e.util.schemaHasRules(h,e.RULES.all)),v=u.baseId;if(f||b){var S;u.createErrors=!1,u.schema=a,u.schemaPath=l,u.errSchemaPath=s,r+=" var "+y+" = errors; var "+c+" = true;  ";var k=e.compositeRule;e.compositeRule=u.compositeRule=!0,r+="  "+e.validate(u)+" ",u.baseId=v,u.createErrors=!0,r+="  errors = "+y+"; if (vErrors !== null) { if ("+y+") vErrors.length = "+y+"; else vErrors = null; }  ",e.compositeRule=u.compositeRule=k,f?(r+=" if ("+m+") {  ",u.schema=e.schema.then,u.schemaPath=e.schemaPath+".then",u.errSchemaPath=e.errSchemaPath+"/then",r+="  "+e.validate(u)+" ",u.baseId=v,r+=" "+c+" = "+m+"; ",f&&b?r+=" var "+(S="ifClause"+n)+" = 'then'; ":S="'then'",r+=" } ",b&&(r+=" else { ")):r+=" if (!"+m+") { ",b&&(u.schema=e.schema.else,u.schemaPath=e.schemaPath+".else",u.errSchemaPath=e.errSchemaPath+"/else",r+="  "+e.validate(u)+" ",u.baseId=v,r+=" "+c+" = "+m+"; ",f&&b?r+=" var "+(S="ifClause"+n)+" = 'else'; ":S="'else'",r+=" } "),r+=" if (!"+c+") {   var err =   ",!1!==e.createErrors?(r+=" { keyword: 'if' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { failingKeyword: "+S+" } ",!1!==e.opts.messages&&(r+=" , message: 'should match \"' + "+S+" + '\" schema' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?r+=" throw new ValidationError(vErrors); ":r+=" validate.errors = vErrors; return false; "),r+=" }   ",p&&(r+=" else { ");}else p&&(r+=" if (true) { ");return r}),yd),items:(gd||(gd=1,md=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y="errs__"+n,u=e.util.copy(e),m="";u.level++;var g="valid"+u.level,h="i"+n,f=u.dataLevel=e.dataLevel+1,b="data"+f,v=e.baseId;if(r+="var "+y+" = errors;var "+c+";",Array.isArray(a)){var S=e.schema.additionalItems;if(!1===S){r+=" "+c+" = "+d+".length <= "+a.length+"; ";var k=s;s=e.errSchemaPath+"/additionalItems",r+="  if (!"+c+") {   ";var w=w||[];w.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { limit: "+a.length+" } ",!1!==e.opts.messages&&(r+=" , message: 'should NOT have more than "+a.length+" items' "),e.opts.verbose&&(r+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var I=r;r=w.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+I+"]); ":r+=" validate.errors = ["+I+"]; return false; ":r+=" var err = "+I+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } ",s=k,p&&(m+="}",r+=" else { ");}var T=a;if(T)for(var C,E=-1,x=T.length-1;E<x;)if(C=T[E+=1],e.opts.strictKeywords?"object"==typeof C&&Object.keys(C).length>0||!1===C:e.util.schemaHasRules(C,e.RULES.all)){r+=" "+g+" = true; if ("+d+".length > "+E+") { ";var O=d+"["+E+"]";u.schema=C,u.schemaPath=l+"["+E+"]",u.errSchemaPath=s+"/"+E,u.errorPath=e.util.getPathExpr(e.errorPath,E,e.opts.jsonPointers,!0),u.dataPathArr[f]=E;var R=e.validate(u);u.baseId=v,e.util.varOccurences(R,b)<2?r+=" "+e.util.varReplace(R,b,O)+" ":r+=" var "+b+" = "+O+"; "+R+" ",r+=" }  ",p&&(r+=" if ("+g+") { ",m+="}");}"object"==typeof S&&(e.opts.strictKeywords?"object"==typeof S&&Object.keys(S).length>0||!1===S:e.util.schemaHasRules(S,e.RULES.all))&&(u.schema=S,u.schemaPath=e.schemaPath+".additionalItems",u.errSchemaPath=e.errSchemaPath+"/additionalItems",r+=" "+g+" = true; if ("+d+".length > "+a.length+") {  for (var "+h+" = "+a.length+"; "+h+" < "+d+".length; "+h+"++) { ",u.errorPath=e.util.getPathExpr(e.errorPath,h,e.opts.jsonPointers,!0),O=d+"["+h+"]",u.dataPathArr[f]=h,R=e.validate(u),u.baseId=v,e.util.varOccurences(R,b)<2?r+=" "+e.util.varReplace(R,b,O)+" ":r+=" var "+b+" = "+O+"; "+R+" ",p&&(r+=" if (!"+g+") break; "),r+=" } }  ",p&&(r+=" if ("+g+") { ",m+="}"));}else (e.opts.strictKeywords?"object"==typeof a&&Object.keys(a).length>0||!1===a:e.util.schemaHasRules(a,e.RULES.all))&&(u.schema=a,u.schemaPath=l,u.errSchemaPath=s,r+="  for (var "+h+" = 0; "+h+" < "+d+".length; "+h+"++) { ",u.errorPath=e.util.getPathExpr(e.errorPath,h,e.opts.jsonPointers,!0),O=d+"["+h+"]",u.dataPathArr[f]=h,R=e.validate(u),u.baseId=v,e.util.varOccurences(R,b)<2?r+=" "+e.util.varReplace(R,b,O)+" ":r+=" var "+b+" = "+O+"; "+R+" ",p&&(r+=" if (!"+g+") break; "),r+=" }");return p&&(r+=" "+m+" if ("+y+" == errors) {"),r}),md),maximum:Qd(),minimum:Qd(),maxItems:Jd(),minItems:Jd(),maxLength:Zd(),minLength:Zd(),maxProperties:ec(),minProperties:ec(),multipleOf:(Cd||(Cd=1,Td=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;if(y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,!y&&"number"!=typeof l)throw new Error(t+" must be number");n+="var division"+o+";if (",y&&(n+=" "+r+" !== undefined && ( typeof "+r+" != 'number' || "),n+=" (division"+o+" = "+c+" / "+r+", ",e.opts.multipleOfPrecision?n+=" Math.abs(Math.round(division"+o+") - division"+o+") > 1e-"+e.opts.multipleOfPrecision+" ":n+=" division"+o+" !== parseInt(division"+o+") ",n+=" ) ",y&&(n+="  )  "),n+=" ) {   ";var u=u||[];u.push(n),n="",!1!==e.createErrors?(n+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { multipleOf: "+r+" } ",!1!==e.opts.messages&&(n+=" , message: 'should be multiple of ",n+=y?"' + "+r:r+"'"),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var m=n;return n=u.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+m+"]); ":n+=" validate.errors = ["+m+"]; return false; ":n+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+="} ",d&&(n+=" else { "),n}),Td),not:(xd||(xd=1,Ed=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="errs__"+n,y=e.util.copy(e);y.level++;var u="valid"+y.level;if(e.opts.strictKeywords?"object"==typeof a&&Object.keys(a).length>0||!1===a:e.util.schemaHasRules(a,e.RULES.all)){y.schema=a,y.schemaPath=l,y.errSchemaPath=s,r+=" var "+c+" = errors;  ";var m,g=e.compositeRule;e.compositeRule=y.compositeRule=!0,y.createErrors=!1,y.opts.allErrors&&(m=y.opts.allErrors,y.opts.allErrors=!1),r+=" "+e.validate(y)+" ",y.createErrors=!0,m&&(y.opts.allErrors=m),e.compositeRule=y.compositeRule=g,r+=" if ("+u+") {   ";var h=h||[];h.push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: 'should NOT be valid' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var f=r;r=h.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+f+"]); ":r+=" validate.errors = ["+f+"]; return false; ":r+=" var err = "+f+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else {  errors = "+c+"; if (vErrors !== null) { if ("+c+") vErrors.length = "+c+"; else vErrors = null; } ",e.opts.allErrors&&(r+=" } ");}else r+="  var err =   ",!1!==e.createErrors?(r+=" { keyword: 'not' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: {} ",!1!==e.opts.messages&&(r+=" , message: 'should NOT be valid' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",p&&(r+=" if (false) { ");return r}),Ed),oneOf:(Rd||(Rd=1,Od=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y="errs__"+n,u=e.util.copy(e),m="";u.level++;var g="valid"+u.level,h=u.baseId,f="prevValid"+n,b="passingSchemas"+n;r+="var "+y+" = errors , "+f+" = false , "+c+" = false , "+b+" = null; ";var v=e.compositeRule;e.compositeRule=u.compositeRule=!0;var S=a;if(S)for(var k,w=-1,I=S.length-1;w<I;)k=S[w+=1],(e.opts.strictKeywords?"object"==typeof k&&Object.keys(k).length>0||!1===k:e.util.schemaHasRules(k,e.RULES.all))?(u.schema=k,u.schemaPath=l+"["+w+"]",u.errSchemaPath=s+"/"+w,r+="  "+e.validate(u)+" ",u.baseId=h):r+=" var "+g+" = true; ",w&&(r+=" if ("+g+" && "+f+") { "+c+" = false; "+b+" = ["+b+", "+w+"]; } else { ",m+="}"),r+=" if ("+g+") { "+c+" = "+f+" = true; "+b+" = "+w+"; }";return e.compositeRule=u.compositeRule=v,r+=m+"if (!"+c+") {   var err =   ",!1!==e.createErrors?(r+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { passingSchemas: "+b+" } ",!1!==e.opts.messages&&(r+=" , message: 'should match exactly one schema in oneOf' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?r+=" throw new ValidationError(vErrors); ":r+=" validate.errors = vErrors; return false; "),r+="} else {  errors = "+y+"; if (vErrors !== null) { if ("+y+") vErrors.length = "+y+"; else vErrors = null; }",e.opts.allErrors&&(r+=" } "),r}),Od),pattern:(jd||(jd=1,_d=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y=e.opts.$data&&l&&l.$data;y?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,n+="if ( ",y&&(n+=" ("+r+" !== undefined && typeof "+r+" != 'string') || "),n+=" !"+(y?"(new RegExp("+r+"))":e.usePattern(l))+".test("+c+") ) {   ";var u=u||[];u.push(n),n="",!1!==e.createErrors?(n+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { pattern:  ",n+=y?""+r:""+e.util.toQuotedString(l),n+="  } ",!1!==e.opts.messages&&(n+=" , message: 'should match pattern \"",n+=y?"' + "+r+" + '":""+e.util.escapeQuotes(l),n+="\"' "),e.opts.verbose&&(n+=" , schema:  ",n+=y?"validate.schema"+s:""+e.util.toQuotedString(l),n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var m=n;return n=u.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+m+"]); ":n+=" validate.errors = ["+m+"]; return false; ":n+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+="} ",d&&(n+=" else { "),n}),_d),properties:(Pd||(Pd=1,Bd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="errs__"+n,y=e.util.copy(e),u="";y.level++;var m="valid"+y.level,g="key"+n,h="idx"+n,f=y.dataLevel=e.dataLevel+1,b="data"+f,v="dataProperties"+n,S=Object.keys(a||{}).filter(P),k=e.schema.patternProperties||{},w=Object.keys(k).filter(P),I=e.schema.additionalProperties,T=S.length||w.length,C=!1===I,E="object"==typeof I&&Object.keys(I).length,x=e.opts.removeAdditional,O=C||E||x,R=e.opts.ownProperties,_=e.baseId,j=e.schema.required;if(j&&(!e.opts.$data||!j.$data)&&j.length<e.opts.loopRequired)var B=e.util.toHash(j);function P(e){return "__proto__"!==e}if(r+="var "+c+" = errors;var "+m+" = true;",R&&(r+=" var "+v+" = undefined;"),O){if(r+=R?" "+v+" = "+v+" || Object.keys("+d+"); for (var "+h+"=0; "+h+"<"+v+".length; "+h+"++) { var "+g+" = "+v+"["+h+"]; ":" for (var "+g+" in "+d+") { ",T){if(r+=" var isAdditional"+n+" = !(false ",S.length)if(S.length>8)r+=" || validate.schema"+l+".hasOwnProperty("+g+") ";else {var N=S;if(N)for(var M=-1,D=N.length-1;M<D;)K=N[M+=1],r+=" || "+g+" == "+e.util.toQuotedString(K)+" ";}if(w.length){var A=w;if(A)for(var L=-1,F=A.length-1;L<F;)oe=A[L+=1],r+=" || "+e.usePattern(oe)+".test("+g+") ";}r+=" ); if (isAdditional"+n+") { ";}if("all"==x)r+=" delete "+d+"["+g+"]; ";else {var z=e.errorPath,$="' + "+g+" + '";if(e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers)),C)if(x)r+=" delete "+d+"["+g+"]; ";else {r+=" "+m+" = false; ";var W=s;s=e.errSchemaPath+"/additionalProperties",(ie=ie||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { additionalProperty: '"+$+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is an invalid additional property":r+="should NOT have additional properties",r+="' "),e.opts.verbose&&(r+=" , schema: false , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var V=r;r=ie.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+V+"]); ":r+=" validate.errors = ["+V+"]; return false; ":r+=" var err = "+V+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s=W,p&&(r+=" break; ");}else if(E)if("failing"==x){r+=" var "+c+" = errors;  ";var U=e.compositeRule;e.compositeRule=y.compositeRule=!0,y.schema=I,y.schemaPath=e.schemaPath+".additionalProperties",y.errSchemaPath=e.errSchemaPath+"/additionalProperties",y.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers);var G=d+"["+g+"]";y.dataPathArr[f]=g;var q=e.validate(y);y.baseId=_,e.util.varOccurences(q,b)<2?r+=" "+e.util.varReplace(q,b,G)+" ":r+=" var "+b+" = "+G+"; "+q+" ",r+=" if (!"+m+") { errors = "+c+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+d+"["+g+"]; }  ",e.compositeRule=y.compositeRule=U;}else y.schema=I,y.schemaPath=e.schemaPath+".additionalProperties",y.errSchemaPath=e.errSchemaPath+"/additionalProperties",y.errorPath=e.opts._errorDataPathProperty?e.errorPath:e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers),G=d+"["+g+"]",y.dataPathArr[f]=g,q=e.validate(y),y.baseId=_,e.util.varOccurences(q,b)<2?r+=" "+e.util.varReplace(q,b,G)+" ":r+=" var "+b+" = "+G+"; "+q+" ",p&&(r+=" if (!"+m+") break; ");e.errorPath=z;}T&&(r+=" } "),r+=" }  ",p&&(r+=" if ("+m+") { ",u+="}");}var H=e.opts.useDefaults&&!e.compositeRule;if(S.length){var Y=S;if(Y)for(var K,X=-1,Q=Y.length-1;X<Q;){var J=a[K=Y[X+=1]];if(e.opts.strictKeywords?"object"==typeof J&&Object.keys(J).length>0||!1===J:e.util.schemaHasRules(J,e.RULES.all)){var Z=e.util.getProperty(K),ee=(G=d+Z,H&&void 0!==J.default);if(y.schema=J,y.schemaPath=l+Z,y.errSchemaPath=s+"/"+e.util.escapeFragment(K),y.errorPath=e.util.getPath(e.errorPath,K,e.opts.jsonPointers),y.dataPathArr[f]=e.util.toQuotedString(K),q=e.validate(y),y.baseId=_,e.util.varOccurences(q,b)<2){q=e.util.varReplace(q,b,G);var te=G;}else te=b,r+=" var "+b+" = "+G+"; ";if(ee)r+=" "+q+" ";else {if(B&&B[K]){r+=" if ( "+te+" === undefined ",R&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(K)+"') "),r+=") { "+m+" = false; ",z=e.errorPath,W=s;var ie,re=e.util.escapeQuotes(K);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(z,K,e.opts.jsonPointers)),s=e.errSchemaPath+"/required",(ie=ie||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+re+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+re+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",V=r,r=ie.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+V+"]); ":r+=" validate.errors = ["+V+"]; return false; ":r+=" var err = "+V+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s=W,e.errorPath=z,r+=" } else { ";}else p?(r+=" if ( "+te+" === undefined ",R&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(K)+"') "),r+=") { "+m+" = true; } else { "):(r+=" if ("+te+" !== undefined ",R&&(r+=" &&   Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(K)+"') "),r+=" ) { ");r+=" "+q+" } ";}}p&&(r+=" if ("+m+") { ",u+="}");}}if(w.length){var ne=w;if(ne)for(var oe,ae=-1,le=ne.length-1;ae<le;)J=k[oe=ne[ae+=1]],(e.opts.strictKeywords?"object"==typeof J&&Object.keys(J).length>0||!1===J:e.util.schemaHasRules(J,e.RULES.all))&&(y.schema=J,y.schemaPath=e.schemaPath+".patternProperties"+e.util.getProperty(oe),y.errSchemaPath=e.errSchemaPath+"/patternProperties/"+e.util.escapeFragment(oe),r+=R?" "+v+" = "+v+" || Object.keys("+d+"); for (var "+h+"=0; "+h+"<"+v+".length; "+h+"++) { var "+g+" = "+v+"["+h+"]; ":" for (var "+g+" in "+d+") { ",r+=" if ("+e.usePattern(oe)+".test("+g+")) { ",y.errorPath=e.util.getPathExpr(e.errorPath,g,e.opts.jsonPointers),G=d+"["+g+"]",y.dataPathArr[f]=g,q=e.validate(y),y.baseId=_,e.util.varOccurences(q,b)<2?r+=" "+e.util.varReplace(q,b,G)+" ":r+=" var "+b+" = "+G+"; "+q+" ",p&&(r+=" if (!"+m+") break; "),r+=" } ",p&&(r+=" else "+m+" = true; "),r+=" }  ",p&&(r+=" if ("+m+") { ",u+="}"));}return p&&(r+=" "+u+" if ("+c+" == errors) {"),r}),Bd),propertyNames:(Md||(Md=1,Nd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="errs__"+n,y=e.util.copy(e);y.level++;var u="valid"+y.level;if(r+="var "+c+" = errors;",e.opts.strictKeywords?"object"==typeof a&&Object.keys(a).length>0||!1===a:e.util.schemaHasRules(a,e.RULES.all)){y.schema=a,y.schemaPath=l,y.errSchemaPath=s;var m="key"+n,g="idx"+n,h="i"+n,f="' + "+m+" + '",b="data"+(y.dataLevel=e.dataLevel+1),v="dataProperties"+n,S=e.opts.ownProperties,k=e.baseId;S&&(r+=" var "+v+" = undefined; "),r+=S?" "+v+" = "+v+" || Object.keys("+d+"); for (var "+g+"=0; "+g+"<"+v+".length; "+g+"++) { var "+m+" = "+v+"["+g+"]; ":" for (var "+m+" in "+d+") { ",r+=" var startErrs"+n+" = errors; ";var w=m,I=e.compositeRule;e.compositeRule=y.compositeRule=!0;var T=e.validate(y);y.baseId=k,e.util.varOccurences(T,b)<2?r+=" "+e.util.varReplace(T,b,w)+" ":r+=" var "+b+" = "+w+"; "+T+" ",e.compositeRule=y.compositeRule=I,r+=" if (!"+u+") { for (var "+h+"=startErrs"+n+"; "+h+"<errors; "+h+"++) { vErrors["+h+"].propertyName = "+m+"; }   var err =   ",!1!==e.createErrors?(r+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { propertyName: '"+f+"' } ",!1!==e.opts.messages&&(r+=" , message: 'property name \\'"+f+"\\' is invalid' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&p&&(e.async?r+=" throw new ValidationError(vErrors); ":r+=" validate.errors = vErrors; return false; "),p&&(r+=" break; "),r+=" } }";}return p&&(r+="  if ("+c+" == errors) {"),r}),Nd),required:(Ad||(Ad=1,Dd=function(e,t,i){var r=" ",n=e.level,o=e.dataLevel,a=e.schema[t],l=e.schemaPath+e.util.getProperty(t),s=e.errSchemaPath+"/"+t,p=!e.opts.allErrors,d="data"+(o||""),c="valid"+n,y=e.opts.$data&&a&&a.$data;y&&(r+=" var schema"+n+" = "+e.util.getData(a.$data,o,e.dataPathArr)+"; ");var u="schema"+n;if(!y)if(a.length<e.opts.loopRequired&&e.schema.properties&&Object.keys(e.schema.properties).length){var m=[],g=a;if(g)for(var h,f=-1,b=g.length-1;f<b;){h=g[f+=1];var v=e.schema.properties[h];v&&(e.opts.strictKeywords?"object"==typeof v&&Object.keys(v).length>0||!1===v:e.util.schemaHasRules(v,e.RULES.all))||(m[m.length]=h);}}else m=a;if(y||m.length){var S=e.errorPath,k=y||m.length>=e.opts.loopRequired,w=e.opts.ownProperties;if(p)if(r+=" var missing"+n+"; ",k){y||(r+=" var "+u+" = validate.schema"+l+"; ");var I="' + "+(R="schema"+n+"["+(x="i"+n)+"]")+" + '";e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(S,R,e.opts.jsonPointers)),r+=" var "+c+" = true; ",y&&(r+=" if (schema"+n+" === undefined) "+c+" = true; else if (!Array.isArray(schema"+n+")) "+c+" = false; else {"),r+=" for (var "+x+" = 0; "+x+" < "+u+".length; "+x+"++) { "+c+" = "+d+"["+u+"["+x+"]] !== undefined ",w&&(r+=" &&   Object.prototype.hasOwnProperty.call("+d+", "+u+"["+x+"]) "),r+="; if (!"+c+") break; } ",y&&(r+="  }  "),r+="  if (!"+c+") {   ",(C=C||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+I+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+I+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ";var T=r;r=C.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+T+"]); ":r+=" validate.errors = ["+T+"]; return false; ":r+=" var err = "+T+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else { ";}else {r+=" if ( ";var C,E=m;if(E)for(var x=-1,O=E.length-1;x<O;)j=E[x+=1],x&&(r+=" || "),r+=" ( ( "+(M=d+(N=e.util.getProperty(j)))+" === undefined ",w&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(j)+"') "),r+=") && (missing"+n+" = "+e.util.toQuotedString(e.opts.jsonPointers?j:N)+") ) ";r+=") {  ",I="' + "+(R="missing"+n)+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.opts.jsonPointers?e.util.getPathExpr(S,R,!0):S+" + "+R),(C=C||[]).push(r),r="",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+I+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+I+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",T=r,r=C.pop(),!e.compositeRule&&p?e.async?r+=" throw new ValidationError(["+T+"]); ":r+=" validate.errors = ["+T+"]; return false; ":r+=" var err = "+T+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",r+=" } else { ";}else if(k){var R;y||(r+=" var "+u+" = validate.schema"+l+"; "),I="' + "+(R="schema"+n+"["+(x="i"+n)+"]")+" + '",e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPathExpr(S,R,e.opts.jsonPointers)),y&&(r+=" if ("+u+" && !Array.isArray("+u+")) {  var err =   ",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+I+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+I+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+u+" !== undefined) { "),r+=" for (var "+x+" = 0; "+x+" < "+u+".length; "+x+"++) { if ("+d+"["+u+"["+x+"]] === undefined ",w&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", "+u+"["+x+"]) "),r+=") {  var err =   ",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+I+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+I+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",y&&(r+="  }  ");}else {var _=m;if(_)for(var j,B=-1,P=_.length-1;B<P;){j=_[B+=1];var N=e.util.getProperty(j),M=(I=e.util.escapeQuotes(j),d+N);e.opts._errorDataPathProperty&&(e.errorPath=e.util.getPath(S,j,e.opts.jsonPointers)),r+=" if ( "+M+" === undefined ",w&&(r+=" || ! Object.prototype.hasOwnProperty.call("+d+", '"+e.util.escapeQuotes(j)+"') "),r+=") {  var err =   ",!1!==e.createErrors?(r+=" { keyword: 'required' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(s)+" , params: { missingProperty: '"+I+"' } ",!1!==e.opts.messages&&(r+=" , message: '",e.opts._errorDataPathProperty?r+="is a required property":r+="should have required property \\'"+I+"\\'",r+="' "),e.opts.verbose&&(r+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+d+" "),r+=" } "):r+=" {} ",r+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";}}e.errorPath=S;}else p&&(r+=" if (true) {");return r}),Dd),uniqueItems:(Fd||(Fd=1,Ld=function(e,t,i){var r,n=" ",o=e.level,a=e.dataLevel,l=e.schema[t],s=e.schemaPath+e.util.getProperty(t),p=e.errSchemaPath+"/"+t,d=!e.opts.allErrors,c="data"+(a||""),y="valid"+o,u=e.opts.$data&&l&&l.$data;if(u?(n+=" var schema"+o+" = "+e.util.getData(l.$data,a,e.dataPathArr)+"; ",r="schema"+o):r=l,(l||u)&&!1!==e.opts.uniqueItems){u&&(n+=" var "+y+"; if ("+r+" === false || "+r+" === undefined) "+y+" = true; else if (typeof "+r+" != 'boolean') "+y+" = false; else { "),n+=" var i = "+c+".length , "+y+" = true , j; if (i > 1) { ";var m=e.schema.items&&e.schema.items.type,g=Array.isArray(m);if(!m||"object"==m||"array"==m||g&&(m.indexOf("object")>=0||m.indexOf("array")>=0))n+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+c+"[i], "+c+"[j])) { "+y+" = false; break outer; } } } ";else {n+=" var itemIndices = {}, item; for (;i--;) { var item = "+c+"[i]; ";var h="checkDataType"+(g?"s":"");n+=" if ("+e.util[h](m,"item",e.opts.strictNumbers,!0)+") continue; ",g&&(n+=" if (typeof item == 'string') item = '\"' + item; "),n+=" if (typeof itemIndices[item] == 'number') { "+y+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";}n+=" } ",u&&(n+="  }  "),n+=" if (!"+y+") {   ";var f=f||[];f.push(n),n="",!1!==e.createErrors?(n+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(p)+" , params: { i: i, j: j } ",!1!==e.opts.messages&&(n+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),e.opts.verbose&&(n+=" , schema:  ",n+=u?"validate.schema"+s:""+l,n+="         , parentSchema: validate.schema"+e.schemaPath+" , data: "+c+" "),n+=" } "):n+=" {} ";var b=n;n=f.pop(),!e.compositeRule&&d?e.async?n+=" throw new ValidationError(["+b+"]); ":n+=" validate.errors = ["+b+"]; return false; ":n+=" var err = "+b+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n+=" } ",d&&(n+=" else { ");}else d&&(n+=" if (true) { ");return n}),Ld),validate:Vp()}),zd),t=Cp().toHash;return Wd=function(){var i=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],r=["type","$comment"];return i.all=t(r),i.types=t(["number","integer","string","array","object","boolean","null"]),i.forEach((function(t){t.rules=t.rules.map((function(t){var n;if("object"==typeof t){var o=Object.keys(t)[0];n=t[o],t=o,n.forEach((function(e){r.push(e),i.all[e]=!0;}));}return r.push(t),i.all[t]={keyword:t,code:e[t],implements:n}})),i.all.$comment={keyword:"$comment",code:e.$comment},t.type&&(i.types[t.type]=t);})),i.keywords=t(r.concat(["$schema","$id","id","$data","$async","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),i.custom={},i},Wd}function ic(){if(Hd)return qd;Hd=1;var e=$p().MissingRef;return qd=function t(i,r,n){var o=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof r&&(n=r,r=void 0);var a=l(i).then((function(){var e=o._addSchema(i,void 0,r);return e.validate||s(e)}));n&&a.then((function(e){n(null,e);}),n);return a;function l(e){var i=e.$schema;return i&&!o.getSchema(i)?t.call(o,{$ref:i},!0):Promise.resolve()}function s(t){try{return o._compile(t)}catch(i){if(i instanceof e)return function(e){var i=e.missingSchema;if(p(i))throw new Error("Schema "+i+" is loaded but "+e.missingRef+" cannot be resolved");var n=o._loadingSchemas[i];n||(n=o._loadingSchemas[i]=o._opts.loadSchema(i)).then(a,a);return n.then((function(e){if(!p(i))return l(e).then((function(){p(i)||o.addSchema(e,i,void 0,r);}))})).then((function(){return s(t)}));function a(){delete o._loadingSchemas[i];}function p(e){return o._refs[e]||o._schemas[e]}}(i);throw i}}},qd}var rc,nc,oc,ac,lc={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};function sc(){if(ac)return oc;ac=1;var e=/^[a-z_$][a-z0-9_$-]*$/i,t=(Kd||(Kd=1,Yd=function(e,t,i){var r,n,o=" ",a=e.level,l=e.dataLevel,s=e.schema[t],p=e.schemaPath+e.util.getProperty(t),d=e.errSchemaPath+"/"+t,c=!e.opts.allErrors,y="data"+(l||""),u="valid"+a,m="errs__"+a,g=e.opts.$data&&s&&s.$data;g?(o+=" var schema"+a+" = "+e.util.getData(s.$data,l,e.dataPathArr)+"; ",n="schema"+a):n=s;var h,f,b,v,S,k=this,w="definition"+a,I=k.definition,T="";if(g&&I.$data){S="keywordValidate"+a;var C=I.validateSchema;o+=" var "+w+" = RULES.custom['"+t+"'].definition; var "+S+" = "+w+".validate;";}else {if(!(v=e.useCustomRule(k,s,e.schema,e)))return;n="validate.schema"+p,S=v.code,h=I.compile,f=I.inline,b=I.macro;}var E=S+".errors",x="i"+a,O="ruleErr"+a,R=I.async;if(R&&!e.async)throw new Error("async keyword in sync schema");if(f||b||(o+=E+" = null;"),o+="var "+m+" = errors;var "+u+";",g&&I.$data&&(T+="}",o+=" if ("+n+" === undefined) { "+u+" = true; } else { ",C&&(T+="}",o+=" "+u+" = "+w+".validateSchema("+n+"); if ("+u+") { ")),f)I.statements?o+=" "+v.validate+" ":o+=" "+u+" = "+v.validate+"; ";else if(b){var _=e.util.copy(e);T="",_.level++;var j="valid"+_.level;_.schema=v.validate,_.schemaPath="";var B=e.compositeRule;e.compositeRule=_.compositeRule=!0;var P=e.validate(_).replace(/validate\.schema/g,S);e.compositeRule=_.compositeRule=B,o+=" "+P;}else {(A=A||[]).push(o),o="",o+="  "+S+".call( ",e.opts.passContext?o+="this":o+="self",h||!1===I.schema?o+=" , "+y+" ":o+=" , "+n+" , "+y+" , validate.schema"+e.schemaPath+" ",o+=" , (dataPath || '')",'""'!=e.errorPath&&(o+=" + "+e.errorPath);var N=l?"data"+(l-1||""):"parentData",M=l?e.dataPathArr[l]:"parentDataProperty",D=o+=" , "+N+" , "+M+" , rootData )  ";o=A.pop(),!1===I.errors?(o+=" "+u+" = ",R&&(o+="await "),o+=D+"; "):o+=R?" var "+(E="customErrors"+a)+" = null; try { "+u+" = await "+D+"; } catch (e) { "+u+" = false; if (e instanceof ValidationError) "+E+" = e.errors; else throw e; } ":" "+E+" = null; "+u+" = "+D+"; ";}if(I.modifying&&(o+=" if ("+N+") "+y+" = "+N+"["+M+"];"),o+=""+T,I.valid)c&&(o+=" if (true) { ");else {var A;o+=" if ( ",void 0===I.valid?(o+=" !",o+=b?""+j:""+u):o+=" "+!I.valid+" ",o+=") { ",r=k.keyword,(A=A||[]).push(o),o="",(A=A||[]).push(o),o="",!1!==e.createErrors?(o+=" { keyword: '"+(r||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: { keyword: '"+k.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+k.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+y+" "),o+=" } "):o+=" {} ";var L=o;o=A.pop(),!e.compositeRule&&c?e.async?o+=" throw new ValidationError(["+L+"]); ":o+=" validate.errors = ["+L+"]; return false; ":o+=" var err = "+L+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var F=o;o=A.pop(),f?I.errors?"full"!=I.errors&&(o+="  for (var "+x+"="+m+"; "+x+"<errors; "+x+"++) { var "+O+" = vErrors["+x+"]; if ("+O+".dataPath === undefined) "+O+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+O+".schemaPath === undefined) { "+O+'.schemaPath = "'+d+'"; } ',e.opts.verbose&&(o+=" "+O+".schema = "+n+"; "+O+".data = "+y+"; "),o+=" } "):!1===I.errors?o+=" "+F+" ":(o+=" if ("+m+" == errors) { "+F+" } else {  for (var "+x+"="+m+"; "+x+"<errors; "+x+"++) { var "+O+" = vErrors["+x+"]; if ("+O+".dataPath === undefined) "+O+".dataPath = (dataPath || '') + "+e.errorPath+"; if ("+O+".schemaPath === undefined) { "+O+'.schemaPath = "'+d+'"; } ',e.opts.verbose&&(o+=" "+O+".schema = "+n+"; "+O+".data = "+y+"; "),o+=" } } "):b?(o+="   var err =   ",!1!==e.createErrors?(o+=" { keyword: '"+(r||"custom")+"' , dataPath: (dataPath || '') + "+e.errorPath+" , schemaPath: "+e.util.toQuotedString(d)+" , params: { keyword: '"+k.keyword+"' } ",!1!==e.opts.messages&&(o+=" , message: 'should pass \""+k.keyword+"\" keyword validation' "),e.opts.verbose&&(o+=" , schema: validate.schema"+p+" , parentSchema: validate.schema"+e.schemaPath+" , data: "+y+" "),o+=" } "):o+=" {} ",o+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!e.compositeRule&&c&&(e.async?o+=" throw new ValidationError(vErrors); ":o+=" validate.errors = vErrors; return false; ")):!1===I.errors?o+=" "+F+" ":(o+=" if (Array.isArray("+E+")) { if (vErrors === null) vErrors = "+E+"; else vErrors = vErrors.concat("+E+"); errors = vErrors.length;  for (var "+x+"="+m+"; "+x+"<errors; "+x+"++) { var "+O+" = vErrors["+x+"]; if ("+O+".dataPath === undefined) "+O+".dataPath = (dataPath || '') + "+e.errorPath+";  "+O+'.schemaPath = "'+d+'";  ',e.opts.verbose&&(o+=" "+O+".schema = "+n+"; "+O+".data = "+y+"; "),o+=" } } else { "+F+" } "),o+=" } ",c&&(o+=" else { ");}return o}),Yd),i=function(){if(nc)return rc;nc=1;var e=lc;return rc={$id:"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",definitions:{simpleTypes:e.definitions.simpleTypes},type:"object",dependencies:{schema:["validate"],$data:["validate"],statements:["inline"],valid:{not:{required:["macro"]}}},properties:{type:e.properties.type,schema:{type:"boolean"},statements:{type:"boolean"},dependencies:{type:"array",items:{type:"string"}},metaSchema:{type:"object"},modifying:{type:"boolean"},valid:{type:"boolean"},$data:{type:"boolean"},async:{type:"boolean"},errors:{anyOf:[{type:"boolean"},{const:"full"}]}}}}();return oc={add:function(i,r){var n=this.RULES;if(n.keywords[i])throw new Error("Keyword "+i+" is already defined");if(!e.test(i))throw new Error("Keyword "+i+" is not a valid identifier");if(r){this.validateKeyword(r,!0);var o=r.type;if(Array.isArray(o))for(var a=0;a<o.length;a++)s(i,o[a],r);else s(i,o,r);var l=r.metaSchema;l&&(r.$data&&this._opts.$data&&(l={anyOf:[l,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]}),r.validateSchema=this.compile(l,!0));}function s(e,i,r){for(var o,a=0;a<n.length;a++){var l=n[a];if(l.type==i){o=l;break}}o||(o={type:i,rules:[]},n.push(o));var s={keyword:e,definition:r,custom:!0,code:t,implements:r.implements};o.rules.push(s),n.custom[e]=s;}return n.keywords[i]=n.all[i]=!0,this},get:function(e){var t=this.RULES.custom[e];return t?t.definition:this.RULES.keywords[e]||!1},remove:function(e){var t=this.RULES;delete t.keywords[e],delete t.all[e],delete t.custom[e];for(var i=0;i<t.length;i++)for(var r=t[i].rules,n=0;n<r.length;n++)if(r[n].keyword==e){r.splice(n,1);break}return this},validate:function e(t,r){e.errors=null;var n=this._validateKeyword=this._validateKeyword||this.compile(i,!0);if(n(t))return !0;if(e.errors=n.errors,r)throw new Error("custom keyword definition is invalid: "+this.errorsText(n.errors));return !1}},oc}var pc,dc,cc={$schema:"http://json-schema.org/draft-07/schema#",$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON Schema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1};var yc,uc=function(){if(dc)return pc;dc=1;var e=Up(),t=zp(),i=function(){if(Gp)return Xd.exports;Gp=1;var e=Xd.exports=function(){this._cache={};};return e.prototype.put=function(e,t){this._cache[e]=t;},e.prototype.get=function(e){return this._cache[e]},e.prototype.del=function(e){delete this._cache[e];},e.prototype.clear=function(){this._cache={};},Xd.exports}(),r=Ep(),n=Wp(),o=function(){if(Hp)return qp;Hp=1;var e=Cp(),t=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,i=[0,31,28,31,30,31,30,31,31,30,31,30,31],r=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i,n=/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,o=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,a=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,l=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,s=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,p=/^(?:\/(?:[^~/]|~0|~1)*)*$/,d=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,c=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;function y(t){return t="full"==t?"full":"fast",e.copy(y[t])}function u(e){var r=e.match(t);if(!r)return !1;var n=+r[1],o=+r[2],a=+r[3];return o>=1&&o<=12&&a>=1&&a<=(2==o&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(n)?29:i[o])}function m(e,t){var i=e.match(r);if(!i)return !1;var n=i[1],o=i[2],a=i[3],l=i[5];return (n<=23&&o<=59&&a<=59||23==n&&59==o&&60==a)&&(!t||l)}qp=y,y.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":a,url:l,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:n,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:b,uuid:s,"json-pointer":p,"json-pointer-uri-fragment":d,"relative-json-pointer":c},y.full={date:u,time:m,"date-time":function(e){var t=e.split(g);return 2==t.length&&u(t[0])&&m(t[1],!0)},uri:function(e){return h.test(e)&&o.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":a,url:l,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:n,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:b,uuid:s,"json-pointer":p,"json-pointer-uri-fragment":d,"relative-json-pointer":c};var g=/t|\s/i,h=/\/|:/,f=/[^\\]\\Z/;function b(e){if(f.test(e))return !1;try{return new RegExp(e),!0}catch(e){return !1}}return qp}(),a=tc(),l=function(){if(Gd)return Ud;Gd=1;var e=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"];return Ud=function(t,i){for(var r=0;r<i.length;r++){t=JSON.parse(JSON.stringify(t));var n,o=i[r].split("/"),a=t;for(n=1;n<o.length;n++)a=a[o[n]];for(n=0;n<e.length;n++){var l=e[n],s=a[l];s&&(a[l]={anyOf:[s,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]});}}return t}}(),s=Cp();pc=m,m.prototype.validate=function(e,t){var i;if("string"==typeof e){if(!(i=this.getSchema(e)))throw new Error('no schema with key or ref "'+e+'"')}else {var r=this._addSchema(e);i=r.validate||this._compile(r);}var n=i(t);!0!==i.$async&&(this.errors=i.errors);return n},m.prototype.compile=function(e,t){var i=this._addSchema(e,void 0,t);return i.validate||this._compile(i)},m.prototype.addSchema=function(e,i,r,n){if(Array.isArray(e)){for(var o=0;o<e.length;o++)this.addSchema(e[o],void 0,r,n);return this}var a=this._getId(e);if(void 0!==a&&"string"!=typeof a)throw new Error("schema id must be string");return S(this,i=t.normalizeId(i||a)),this._schemas[i]=this._addSchema(e,r,n,!0),this},m.prototype.addMetaSchema=function(e,t,i){return this.addSchema(e,t,i,!0),this},m.prototype.validateSchema=function(e,t){var i=e.$schema;if(void 0!==i&&"string"!=typeof i)throw new Error("$schema must be a string");if(i=i||this._opts.defaultMeta||function(e){var t=e._opts.meta;return e._opts.defaultMeta="object"==typeof t?e._getId(t)||t:e.getSchema(c)?c:void 0,e._opts.defaultMeta}(this),!i)return this.logger.warn("meta-schema not available"),this.errors=null,!0;var r=this.validate(i,e);if(!r&&t){var n="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(n);this.logger.error(n);}return r},m.prototype.getSchema=function(i){var n=g(this,i);switch(typeof n){case"object":return n.validate||this._compile(n);case"string":return this.getSchema(n);case"undefined":return function(i,n){var o=t.schema.call(i,{schema:{}},n);if(o){var a=o.schema,l=o.root,s=o.baseId,p=e.call(i,a,l,void 0,s);return i._fragments[n]=new r({ref:n,fragment:!0,schema:a,root:l,baseId:s,validate:p}),p}}(this,i)}},m.prototype.removeSchema=function(e){if(e instanceof RegExp)return h(this,this._schemas,e),h(this,this._refs,e),this;switch(typeof e){case"undefined":return h(this,this._schemas),h(this,this._refs),this._cache.clear(),this;case"string":var i=g(this,e);return i&&this._cache.del(i.cacheKey),delete this._schemas[e],delete this._refs[e],this;case"object":var r=this._opts.serialize,n=r?r(e):e;this._cache.del(n);var o=this._getId(e);o&&(o=t.normalizeId(o),delete this._schemas[o],delete this._refs[o]);}return this},m.prototype.addFormat=function(e,t){"string"==typeof t&&(t=new RegExp(t));return this._formats[e]=t,this},m.prototype.errorsText=function(e,t){if(!(e=e||this.errors))return "No errors";for(var i=void 0===(t=t||{}).separator?", ":t.separator,r=void 0===t.dataVar?"data":t.dataVar,n="",o=0;o<e.length;o++){var a=e[o];a&&(n+=r+a.dataPath+" "+a.message+i);}return n.slice(0,-i.length)},m.prototype._addSchema=function(e,i,n,o){if("object"!=typeof e&&"boolean"!=typeof e)throw new Error("schema should be object or boolean");var a=this._opts.serialize,l=a?a(e):e,s=this._cache.get(l);if(s)return s;o=o||!1!==this._opts.addUsedSchema;var p=t.normalizeId(this._getId(e));p&&o&&S(this,p);var d,c=!1!==this._opts.validateSchema&&!i;c&&!(d=p&&p==t.normalizeId(e.$schema))&&this.validateSchema(e,!0);var y=t.ids.call(this,e),u=new r({id:p,schema:e,localRefs:y,cacheKey:l,meta:n});"#"!=p[0]&&o&&(this._refs[p]=u);this._cache.put(l,u),c&&d&&this.validateSchema(e,!0);return u},m.prototype._compile=function(t,i){if(t.compiling)return t.validate=o,o.schema=t.schema,o.errors=null,o.root=i||o,!0===t.schema.$async&&(o.$async=!0),o;var r,n;t.compiling=!0,t.meta&&(r=this._opts,this._opts=this._metaOpts);try{n=e.call(this,t.schema,i,t.localRefs);}catch(e){throw delete t.validate,e}finally{t.compiling=!1,t.meta&&(this._opts=r);}return t.validate=n,t.refs=n.refs,t.refVal=n.refVal,t.root=n.root,n;function o(){var e=t.validate,i=e.apply(this,arguments);return o.errors=e.errors,i}},m.prototype.compileAsync=ic();var p=sc();m.prototype.addKeyword=p.add,m.prototype.getKeyword=p.get,m.prototype.removeKeyword=p.remove,m.prototype.validateKeyword=p.validate;var d=$p();m.ValidationError=d.Validation,m.MissingRefError=d.MissingRef,m.$dataMetaSchema=l;var c="http://json-schema.org/draft-07/schema",y=["removeAdditional","useDefaults","coerceTypes","strictDefaults"],u=["/properties"];function m(e){if(!(this instanceof m))return new m(e);e=this._opts=s.copy(e)||{},function(e){var t=e._opts.logger;if(!1===t)e.logger={log:k,warn:k,error:k};else {if(void 0===t&&(t=console),!("object"==typeof t&&t.log&&t.warn&&t.error))throw new Error("logger must implement log, warn and error methods");e.logger=t;}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=o(e.format),this._cache=e.cache||new i,this._loadingSchemas={},this._compilations=[],this.RULES=a(),this._getId=function(e){switch(e.schemaId){case"auto":return v;case"id":return f;default:return b}}(e),e.loopRequired=e.loopRequired||1/0,"property"==e.errorDataPath&&(e._errorDataPathProperty=!0),void 0===e.serialize&&(e.serialize=n),this._metaOpts=function(e){for(var t=s.copy(e._opts),i=0;i<y.length;i++)delete t[y[i]];return t}(this),e.formats&&function(e){for(var t in e._opts.formats){var i=e._opts.formats[t];e.addFormat(t,i);}}(this),e.keywords&&function(e){for(var t in e._opts.keywords){var i=e._opts.keywords[t];e.addKeyword(t,i);}}(this),function(e){var t;e._opts.$data&&(t=cc,e.addMetaSchema(t,t.$id,!0));if(!1===e._opts.meta)return;var i=lc;e._opts.$data&&(i=l(i,u));e.addMetaSchema(i,c,!0),e._refs["http://json-schema.org/schema"]=c;}(this),"object"==typeof e.meta&&this.addMetaSchema(e.meta),e.nullable&&this.addKeyword("nullable",{metaSchema:{type:"boolean"}}),function(e){var t=e._opts.schemas;if(!t)return;if(Array.isArray(t))e.addSchema(t);else for(var i in t)e.addSchema(t[i],i);}(this);}function g(e,i){return i=t.normalizeId(i),e._schemas[i]||e._refs[i]||e._fragments[i]}function h(e,t,i){for(var r in t){var n=t[r];n.meta||i&&!i.test(r)||(e._cache.del(n.cacheKey),delete t[r]);}}function f(e){return e.$id&&this.logger.warn("schema $id ignored",e.$id),e.id}function b(e){return e.id&&this.logger.warn("schema id ignored",e.id),e.$id}function v(e){if(e.$id&&e.id&&e.$id!=e.id)throw new Error("schema $id is different from id");return e.$id||e.id}function S(e,t){if(e._schemas[t]||e._refs[t])throw new Error('schema with key or id "'+t+'" already exists')}function k(){}return pc}(),mc=yp(uc),gc={exports:{}};var hc=function(){if(yc)return gc.exports;function e(e,t,i,r){var n,o=null==(n=r)||"number"==typeof n||"boolean"==typeof n?r:i(r),a=t.get(o);return void 0===a&&(a=e.call(this,r),t.set(o,a)),a}function t(e,t,i){var r=Array.prototype.slice.call(arguments,3),n=i(r),o=t.get(n);return void 0===o&&(o=e.apply(this,r),t.set(n,o)),o}function i(e,t,i,r,n){return i.bind(t,e,r,n)}function r(r,n){return i(r,this,1===r.length?e:t,n.cache.create(),n.serializer)}function n(){return JSON.stringify(arguments)}function o(){this.cache=Object.create(null);}yc=1,o.prototype.has=function(e){return e in this.cache},o.prototype.get=function(e){return this.cache[e]},o.prototype.set=function(e,t){this.cache[e]=t;};var a={create:function(){return new o}};return gc.exports=function(e,t){var i=t&&t.cache?t.cache:a,o=t&&t.serializer?t.serializer:n;return (t&&t.strategy?t.strategy:r)(e,{cache:i,serializer:o})},gc.exports.strategies={variadic:function(e,r){return i(e,this,t,r.cache.create(),r.serializer)},monadic:function(t,r){return i(t,this,e,r.cache.create(),r.serializer)}},gc.exports}();function fc(e){let t,i,r;return void 0!==e&&(t=e.type,t!==R&&t!==_||(i=e.field??void 0,t===_&&(r=e.normalizationField??void 0))),{rendererType:t,rendererField:i,rendererNormalizationField:r}}yp(hc)((async e=>{const t=e.featureCollection;let i,r;if(void 0!==t?.layers?.[0]){const e=t.layers[0];i=e.featureSet,r=e.layerDefinition;}else r=e.layerDefinition;const n={};if(void 0!==i){const e=await async function(){if(bs)return await window.$arcgis.import("esri/rest/support/FeatureSet");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/rest/support/FeatureSet.js')); });return vs(e)?e.default:e}();if(n.source=e.fromJSON(i).features,void 0!==r?.fields){const e=await async function(){if(bs)return await window.$arcgis.import("esri/layers/support/Field");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/support/Field.js')); });return vs(e)?e.default:e}();n.fields=r.fields.map((t=>e.fromJSON(t)));}void 0!==r?.objectIdField&&(n.objectIdField=r.objectIdField);const t=await Cs();if(void 0!==r?.geometryType){const e=t.fromJSON({geometryType:r.geometryType});void 0!==e?.type&&"extent"!==e?.type&&(n.geometryType=e.type);}void 0!==r?.spatialReference&&(n.spatialReference=r.spatialReference);}else n.id=e.id,void 0!==r?.id&&(n.layerId=r.id),void 0!==e.url&&(n.url=e.url),void 0!==e.itemId&&void 0!==r?.id&&(n.portalItem={id:e.itemId});if(void 0!==r){const e=r.drawingInfo;if(void 0!==e?.renderer){const t=await async function(){if(bs)return await window.$arcgis.import("esri/renderers/support/jsonUtils");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/renderers/support/jsonUtils.js')); });return vs(e)?e.default:e}();n.renderer=t.fromJSON(e.renderer);}}return await Ss(n)}));async function Sc(e,t){const i=Ds(e);let r=[];if(void 0!==i){await i.load();const e=!0===t&&void 0!==i?.popupTemplate?.fieldInfos;r=i.fields.map((t=>{const r=t.toJSON();if(e){const e=i.popupTemplate?.fieldInfos?.find((e=>e.fieldName?.toLowerCase()===t.name.toLowerCase()))?.label;void 0!==e&&e!==t.name&&(r.alias=e);}return r}));}return r}function kc(e,t=[]){return t.find((t=>t.name===e))}function Ic(e){return [o,i,a,r].includes(e.type)}function Ec(e){return e.filter((e=>e.type===t)).map((e=>e.name))}function Oc(e,t){const i=[],r=Rs(e)?e.subtypes:e[t];return void 0!==r?.[0]&&r.forEach((e=>{const{name:t,domains:r}=e;let n="id"in e?e.id:void 0;!n&&"code"in e&&(n=e.code);const o=Object.entries(r??{}),a=[],l=o?.filter((([e,t])=>"coded-value"===t?.type)),s=l?.map((([e,i])=>{let r={fieldName:e,name:t,codedValues:a};if(i&&"codedValues"in i){const t=i.codedValues.map((({code:e,name:t})=>({name:t,code:e})));r={fieldName:e,name:i.name,codedValues:t};}return r}));i.push({id:n??"",name:t,domains:s});})),0===i.length?void 0:i}function Rc(e){let t;if(void 0!==e){const i=Ds(e);if(!_s(i)&&!Ol(i?.typeIdField)){const e=Oc(i,"types");void 0!==e&&(t={typeIdField:i.typeIdField??void 0,types:e});}if(!Ol(i?.subtypeField)){const e=js(i),r=Oc(e,"subtypes");void 0!==r&&(t={...t,subtypeField:e.subtypeField??void 0,subtypes:r});}}return t}function _c(e){const{fieldName:t,fieldValueToMatch:i,subtypeInfo:r,fieldList:n}=e;let o;if(!("string"==typeof i&&Ol(i)||Ol(t))&&(o=function(e){const{subtypeInfo:t,fieldName:i,fieldValueToMatch:r}=e;let n;const o=e=>`${e.id}`==`${r}`;return t?.subtypeField===i&&t.subtypes?n=t.subtypes.find(o)?.name:t?.typeIdField===i&&t.types&&(n=t.types.find(o)?.name),n}({subtypeInfo:r,fieldName:t,fieldValueToMatch:i}),void 0===o)){const e=kc(t,n);if(void 0!==r?.types){const t=r?.types;for(const r of t){const t=r.domains?.filter((t=>t.fieldName===e?.name))??[];for(const e of t)if(o=e?.codedValues?.find((e=>`${e.code}`===i))?.name,void 0!==o)break;if(void 0!==o)break}}void 0===o&&void 0!==e?.domain&&"codedValue"===e.domain.type&&(o=e.domain.codedValues?.find((e=>`${e.code}`==`${i}`))?.name);}return o}async function jc(e){let t=[];if(!js(e).isTable&&e.fieldsIndex){const i=await async function(){if(bs)return await window.$arcgis.import("esri/layers/support/fieldUtils");const e=await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/support/fieldUtils.js')); });return vs(e)?e.default:e}();t=await i.getRendererFields(e.renderer,e.fieldsIndex);}return t}async function Bc(e){let t=!0;const i=e.url,r=i?.includes(".arcgis.com/");if(i&&r&&void 0!==js(e).sourceJSON.serviceItemId){const e=function(e){let t=e.toLowerCase();const i=t.indexOf("/rest/services");return t=i>-1?e.substring(0,i):e,`${t}/rest/info`}(i);try{const i=await Es(),r=(await i(e,{query:{f:"json"}})).data;if(void 0!==r.owningTenant&&void 0!==r.owningSystemUrl){const e=`${r.owningSystemUrl}/sharing/rest/portals/${r.owningTenant}`,n=(await i(e,{authMode:"auto",query:{f:"json"}})).data,o=await ks({sourceJSON:n});await o.load(),t=void 0===o?.sourceJSON?.subscriptionInfo?.dataStoreLevel;}}catch(e){}}return t}function Mc(e){const{queryObject:t,chartConfig:i,runtimeDataFilters:r,ignoreViewExtent:n}=e,{series:o,dataFilters:a}=i,{where:s,gdbVersion:p,timeExtent:d,geometry:c,distance:y,units:u}=a??{},{where:m,gdbVersion:g,timeExtent:h,geometry:f,distance:b,units:v}=r??{},S=o[0],{query:k}=S,{where:w}=k??{},I=ts(o),T={...k};return T.where=$s([s,m]),I!==ml.BarAndLineSplitBy&&I!==ml.BoxPlotMonoFieldAndSplitBy&&I!==ml.BoxPlotMonoFieldAndCategoryAndSplitBy&&I!==ml.BoxPlotMultiFieldsAndSplitBy&&I!==ml.BarAndLineSplitByNoAggregation&&(T.where=$s([T.where,w])),void 0!==i.orderOptions?.orderByFields&&(T.orderByFields=i.orderOptions.orderByFields),T.gdbVersion=g??p,T.timeExtent=Ws(t,h??d),T.geometry=Vs({queryObject:t,defaultGeometry:f??c,ignoreViewExtent:n}),T.distance=b??y,T.units=v??u,k?.outStatistics?.[0]?.statisticType===l$1.Count&&(T.returnDistinctValues=k?.returnDistinctValues??!1),T}const zc={Required:"required",MinLength:"minLength",MinItems:"minItems",MaxItems:"maxItems",Pattern:"pattern",AdditionalProperties:"additionalProperties",Enum:"enum",AnyOf:"anyOf"},$c={BadData:"badData",EmptyDataSet:"emptyDataSet",HistogramEmptyField:"histogramEmptyField",BarElementExceedsLimit:"barElementExceedsLimit",LineChartExceedsLimit:"lineChartExceedsLimit",BoxPlotExceedsLimit:"boxPlotExceedsLimit",BoxPlotOutliersExceedsLimit:"boxPlotOutliersExceedsLimit",PieChartExceedsLimit:"pieChartExceedsLimit",GaugeExceedsLimit:"gaugeExceedsLimit",PieChartMixOfNegativePositiveSlices:"PieChartMixOfNegativePositiveSlices",NegativeValueInSqrtCalculation:"negativeValueInSqrtCalculation",NegativeValueInLogCalculation:"negativeValueInLogCalculation",NegativeValueInXAxisLogScale:"negativeValueInXAxisLogScale",NegativeValueInYAxisLogScale:"negativeValueInYAxisLogScale"};function Wc(e,t){return {...e,$ref:`#/definitions/${t}`}}(function(){const e=new mc({allErrors:!0});return async(t,i)=>{let r=cp;i===X&&(r=Wc(cp,"WebGaugeChart")),t&&!("iLayer"in t)&&(r=Wc(cp,"WebMapWebChart"));const n=e.compile(r);n(t);let o=[];return null!==n.errors&&void 0!==n.errors&&(o=await async function(e){const t=await Qs();return e.map((e=>{let i=e;const r=e.dataPath.startsWith(".")?e.dataPath.substring(1):e.dataPath;switch(e.keyword){case zc.Required:i={...e,message:On(t.requiredProperty,{dataPath:r,missingProperty:e.params.missingProperty})};break;case zc.MinLength:i={...e,message:On(t.minLength,{dataPath:r,limit:e.params.limit.toString()})};break;case zc.MinItems:i={...e,message:On(t.minItems,{dataPath:r,limit:e.params.limit.toString()})};break;case zc.MaxItems:i={...e,message:On(t.maxItems,{dataPath:r,limit:e.params.limit.toString()})};break;case zc.Pattern:"\\w+"===e.params.pattern&&(i={...e,message:On(t.whiteSpacePattern,{dataPath:r}),params:{}});break;case zc.AdditionalProperties:i={...e,message:On(t.additionalProperty,{dataPath:r,additionalProperty:e.params.additionalProperty})};break;case zc.Enum:i={...e,message:On(t.enumValues,{dataPath:r,allowedValues:e.params.allowedValues.join(", ")})};break;case zc.AnyOf:{let n=[];"#/properties/legend/anyOf"===e.schemaPath&&(n=cp.definitions.WebChart.properties.legend.anyOf.map((e=>function(e){const t=e.lastIndexOf("/");return -1!==t?e.slice(t+1):e}(e.$ref)))),i={...e,params:n,message:On(t.anyOfValues,{dataPath:r,schemaOptions:n.join(", ")})};break}}return i}))}(n.errors)),o}})();var dy;!function(e){e.NONE="none",e.ROTATE="rotate",e.STAGGER="stagger",e.WRAP="wrap";}(dy||(dy={}));const zy={MonoSelection:"monoSelection",MultiSelection:"multiSelection",MultiSelectionWithCtrlKey:"multiSelectionWithCtrlKey",Zoom:"zoom",None:"none"},$y={MultiAxes:"multi-axes",XAxis:"x-axis",YAxis:"y-axis"};

const RESTFieldType = {
    Blob: "esriFieldTypeBlob",
    Date: "esriFieldTypeDate",
    Double: "esriFieldTypeDouble",
    Geometry: "esriFieldTypeGeometry",
    GlobalID: "esriFieldTypeGlobalID",
    GUID: "esriFieldTypeGUID",
    Integer: "esriFieldTypeInteger",
    OID: "esriFieldTypeOID",
    Raster: "esriFieldTypeRaster",
    Single: "esriFieldTypeSingle",
    SmallInteger: "esriFieldTypeSmallInteger",
    String: "esriFieldTypeString",
    XML: "esriFieldTypeXML",
};
const RESTStatisticType = {
    Count: "count",
    Sum: "sum",
    Minimum: "min",
    Maximum: "max",
    Average: "avg",
    StandardDeviation: "stddev",
    Variance: "var",
    ContinuousPercentile: "percentile_cont",
    DiscretePercentile: "percentile_disc",
    EnvelopeAggregate: "envelope-aggregate",
    CentroidAggregate: "centroid-aggregate",
    ConvexHullAggregate: "convex-hull-aggregate",
    NoAggregation: "no_aggregation", // TODO: that property needs to be exported to another interface, as it is not REST compatible (see issue #2352)
};
const RESTSimpleLineSymbolStyle = {
    Dash: "esriSLSDash",
    DashDot: "esriSLSDashDot",
    DashDotDot: "esriSLSDashDotDot",
    Dot: "esriSLSDot",
    Null: "esriSLSNull",
    Solid: "esriSLSSolid",
};
const RESTSimpleMarkerSymbolStyle = {
    Circle: "esriSMSCircle",
    Cross: "esriSMSCross",
    Diamond: "esriSMSDiamond",
    Square: "esriSMSSquare",
    X: "esriSMSX",
    Triangle: "esriSMSTriangle",
};
const RESTHorizontalAlignment = {
    Left: "left",
    Right: "right",
    Center: "center",
    Justify: "justify",
};
const RESTVerticalAlignment = {
    Baseline: "baseline",
    Top: "top",
    Middle: "middle",
    Bottom: "bottom",
};
const RESTSymbolType = {
    SLS: "esriSLS",
    SMS: "esriSMS",
    SFS: "esriSFS",
    PMS: "esriPMS",
    PFS: "esriPFS",
    TS: "esriTS",
};
const RESTRendererType = {
    UniqueValue: "unique-value",
    Simple: "simple",
    ClassBreaks: "class-breaks",
    Heatmap: "heatmap",
    DotDensity: "dot-density",
    Dictionary: "dictionary",
    PieChart: "pie-chart",
};

const WebChartTypes = {
    Chart: "chart",
    Text: "chartText",
    Overlay: "chartOverlay",
    Overlays: "chartOverlays",
    Legend: "chartLegend",
    CursorCrosshair: "cursorCrosshair",
    Axis: "chartAxis",
    GaugeAxisTick: "gaugeAxisTick",
    GaugeNeedle: "gaugeNeedle",
    CategoryAxisFormat: "category",
    NumberAxisFormat: "number",
    DateAxisFormat: "date",
    Guide: "chartGuide",
    ScatterSeries: "scatterSeries",
    PieSeries: "pieSeries",
    PieTick: "pieTick",
    GaugeSeries: "gaugeSeries",
    LineSeries: "lineSeries",
    BarSeries: "barSeries",
    HistogramSeries: "histogramSeries",
    BoxPlotSeries: "boxPlotSeries",
    RadarSeries: "radarSeries",
    ComboLineAndBarSeries: "comboLineAndBarSeries",
    Buffer: "buffer",
    SizePolicy: "sizeScale",
};
const WebChartDataTransformations = {
    None: "none",
    Log: "logarithmic",
    Sqrt: "squareRoot",
};
const WebChartLegendPositions = {
    Left: "left",
    Right: "right",
    Top: "top",
    Bottom: "bottom",
};
const WebChartStackedKinds = {
    Side: "sideBySide",
    Stacked: "stacked",
    Stacked100: "stacked100",
};
const WebChartSortOrderKinds = {
    Ascending: "ASC",
    Descending: "DESC",
};
const StatisticsDefaults = {
    statisticType: RESTStatisticType.Count,
    sortingOrder: WebChartSortOrderKinds.Ascending,
};
/**
 * Represents the different types of smoothing that can be applied to a line chart when the `lineSmoothed` property is set to `true`.
 */
const WebChartLineSmoothedKinds = {
    Bezier: "bezier",
    MonotoneX: "monotoneX",
    MonotoneY: "monotoneY",
};
/**
 * Represents the different types of time intervals that can be applied to a chart using the time binning feature.
 */
const WebChartTimeIntervalUnits = {
    Seconds: "esriTimeUnitsSeconds",
    Minutes: "esriTimeUnitsMinutes",
    Hours: "esriTimeUnitsHours",
    Days: "esriTimeUnitsDays",
    Weeks: "esriTimeUnitsWeeks",
    Months: "esriTimeUnitsMonths",
    Years: "esriTimeUnitsYears",
};
/**
 * Represents the different types of null policy that can be applied to a chart using the time binning feature.
 */
const WebChartNullPolicyTypes = {
    Null: "null",
    Zero: "zero",
    Interpolate: "interpolate",
};
/**
 * Represents the different types of time aggregation that can be applied to a chart using the time binning feature.
 */
const WebChartTimeAggregationTypes = {
    Start: "equalIntervalsFromStartTime",
    End: "equalIntervalsFromEndTime",
};
/**
 * Represents the different types of behaviors that can applied to a chart axis.
 */
const WebChartLabelBehavior = {
    Hide: "hide",
    Rotate: "rotate",
    Stagger: "stagger",
    Wrap: "wrap",
};
/**
 * The types of order assocated with chart data.
 */
const WebChartOrderDataByTypes = {
    YValue: "arcgis-charts-y-value",
    Mean: "arcgis-charts-mean",
    Median: "arcgis-charts-median",
    Category: "arcgis-charts-category",
};

const defaultPieFromFieldsName = "arcgis_charts_pie_from_fields_name";
const defaultPieFromFieldsValue = "arcgis_charts_pie_from_fields_value";

// src/index.ts
var isAMD = typeof window !== "undefined" && "$arcgis" in window && typeof window.$arcgis === "object" && "import" in window.$arcgis && !("forceESM" in window.$arcgis);
function isDefaultModule(module) {
  return module.default !== void 0;
}
async function importGraphic() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Graphic");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/Graphic.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newGraphic(properties) {
  const ModConstructor = await importGraphic();
  return new ModConstructor(properties);
}
async function importLayersSupportFeatureFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/support/FeatureFilter");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/support/FeatureFilter.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newLayersSupportFeatureFilter(properties) {
  const ModConstructor = await importLayersSupportFeatureFilter();
  return new ModConstructor(properties);
}
async function importMap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/Map");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/Map.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newMap(properties) {
  const ModConstructor = await importMap();
  return new ModConstructor(properties);
}
async function importViewsMapView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/MapView");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/views/MapView.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newViewsMapView(properties) {
  const ModConstructor = await importViewsMapView();
  return new ModConstructor(properties);
}
async function importRenderersSupportJsonUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/renderers/support/jsonUtils");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/renderers/support/jsonUtils.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importRequest() {
  if (isAMD) {
    return await window.$arcgis.import("esri/request");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/request.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importSmartMappingStatisticsHistogram() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/histogram");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/smartMapping/statistics/histogram.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importSmartMappingStatisticsSummaryStatistics() {
  if (isAMD) {
    return await window.$arcgis.import("esri/smartMapping/statistics/summaryStatistics");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/smartMapping/statistics/summaryStatistics.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importSymbolsSupportSymbolUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/symbols/support/symbolUtils");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/symbols/support/symbolUtils.js')); });
  return isDefaultModule(module) ? module.default : module;
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

var freeGlobal$1 = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal$1 || freeSelf || Function('return this')();

var root$1 = root;

/** Built-in value references. */
var Symbol$1 = root$1.Symbol;

var Symbol$2 = Symbol$1;

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$d = objectProto$f.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$f.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$e = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$e.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var symbolTag$3 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag$3);
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray$1 = isArray;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity$1(value) {
  return value;
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root$1['__core-js_shared__'];

var coreJsData$1 = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$d = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$d.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root$1, 'WeakMap');

var WeakMap$1 = WeakMap;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var baseCreate$1 = baseCreate;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var defineProperty$1 = defineProperty;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty$1 ? identity$1 : function(func, string) {
  return defineProperty$1(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

var baseSetToString$1 = baseSetToString;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString$1);

var setToString$1 = setToString;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$c.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$b.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString$1(overRest(func, start, identity$1), func + '');
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

  return value === proto;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$3;
}

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$a.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$a.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments$1 = isArguments;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$2 = moduleExports$2 ? root$1.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

var isBuffer$1 = isBuffer;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$3 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal$1.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

var nodeUtil$1 = nodeUtil;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray$1 = isTypedArray;

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray$1(value),
      isArg = !isArr && isArguments$1(value),
      isBuff = !isArr && !isArg && isBuffer$1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$9.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

var nativeKeys$1 = nativeKeys;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys$1(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$8.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$7.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray$1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

var nativeCreate$1 = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$5.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root$1, 'Map');

var Map$2 = Map$1;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$2 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var stringToPath$1 = stringToPath;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray$1(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath$1(toString(value));
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Built-in value references. */
var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray$1(value) || isArguments$1(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

var getPrototype$1 = getPrototype;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer$1 = moduleExports ? root$1.Buffer : undefined,
    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var getSymbols$1 = getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols$1(source), object);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols$1(object));
    object = getPrototype$1(object);
  }
  return result;
};

var getSymbolsIn$1 = getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols$1);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
}

/* Built-in method references that are verified to be native. */
var DataView = getNative(root$1, 'DataView');

var DataView$1 = DataView;

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root$1, 'Promise');

var Promise$2 = Promise$1;

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root$1, 'Set');

var Set$2 = Set$1;

/** `Object#toString` result references. */
var mapTag$5 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$5 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$3 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView$1),
    mapCtorString = toSource(Map$2),
    promiseCtorString = toSource(Promise$2),
    setCtorString = toSource(Set$2),
    weakMapCtorString = toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3) ||
    (Map$2 && getTag(new Map$2) != mapTag$5) ||
    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
    (Set$2 && getTag(new Set$2) != setTag$5) ||
    (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$1)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$3;
        case mapCtorString: return mapTag$5;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$5;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$4.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/** Built-in value references. */
var Uint8Array$1 = root$1.Uint8Array;

var Uint8Array$2 = Uint8Array$1;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$2 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object);

    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object);

    case dataViewTag$2:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$4:
      return new Ctor;

    case numberTag$2:
    case stringTag$2:
      return new Ctor(object);

    case regexpTag$2:
      return cloneRegExp(object);

    case setTag$4:
      return new Ctor;

    case symbolTag$2:
      return cloneSymbol(object);
  }
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate$1(getPrototype$1(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$3;
}

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

var isMap$1 = isMap;

/** `Object#toString` result references. */
var setTag$3 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$3;
}

/* Node.js helper references. */
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

var isSet$1 = isSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag$2] =
cloneableTags[numberTag$1] = cloneableTags[objectTag$1] =
cloneableTags[regexpTag$1] = cloneableTags[setTag$2] =
cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$1,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray$1(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$1(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet$1(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap$1(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag$1 = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$1:
      var convert = mapToArray;

    case setTag$1:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$1(object),
      othIsArr = isArray$1(other),
      objTag = objIsArr ? arrayTag : getTag$1(object),
      othTag = othIsArr ? arrayTag : getTag$1(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer$1(object)) {
    if (!isBuffer$1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray$1(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray$1(object) || isArguments$1(object));
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity$1;
  }
  if (typeof value == 'object') {
    return isArray$1(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

var baseFor$1 = baseFor;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor$1(object, iteratee, keys);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

var baseEach$1 = baseEach;

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach$1(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {
    return !value.length;
  }
  var tag = getTag$1(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$1.call(value, key)) {
      return false;
    }
  }
  return true;
}

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray$1(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity$1];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

var sortBy$1 = sortBy;

/**
 * A nested dictionary which contains default values for cases when a property is undefined.
 * `as const` is not used because we loose intellisense while assigning properties and values.
 * Instead, `ReadOnly<>` is used to prevent property reassignment.
 */
const ChartDefaults = {
    aria: {
        defaultChartItemRole: "figure",
    },
    title: {
        marginBottom: 8,
        wrap: true,
    },
    subtitle: {
        marginBottom: 10,
        wrap: true,
    },
    rotated: false,
    legendProperties: {
        legendLabels: {
            marginLeft: 5,
            marginRight: 5,
            truncate: false,
            applyOnClones: true,
            wrap: true,
            maxWidth: 200,
        },
        valueLabels: {
            wrap: true,
            maxWidth: 200,
        },
        legendTitle: {
            wrap: true,
            maxWidth: 220,
            marginLeft: 10,
            marginRight: 10,
            marginTop: 10,
        },
        legendMarkersSize: 14,
        legendLabelReducedOpacity: 0.5, // 50% of original opacity
        rectangleMarkerRadius: 3, // for rounded rectangles
        roundedMarkerRadius: 12, // for circles
        legendPaddingRightWithScrollbarVisible: 10,
        maxHeight: 100,
        marginTop: 2,
        marginBottom: 2,
        marginLeft: 0,
        marginRight: 0,
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0,
        position: WebChartLegendPositions.Right,
    },
    footer: {
        wrap: true,
        horizontalCenter: RESTHorizontalAlignment.Center,
        verticalCenter: RESTVerticalAlignment.Middle,
        align: RESTHorizontalAlignment.Center,
    },
    axisLabel: {
        rotation: 0,
        align: RESTHorizontalAlignment.Center,
        horizontalCenter: RESTHorizontalAlignment.Center,
        verticalCenter: RESTVerticalAlignment.Top,
        dy: 5,
        paddingTop: 5,
        paddingRight: 5,
        paddingLeft: 5,
        maxWidth: Number.NaN,
    },
    axisTickLength: 5,
    rotatedAxisLabel: {
        rotation: -45,
        horizontalCenter: RESTHorizontalAlignment.Left,
        verticalCenter: RESTVerticalAlignment.Bottom,
        dy: 6,
        paddingTop: 5,
        paddingLeft: 0,
        paddingRight: 5,
    },
    histogramAxisLabel: {
        rotation: 0,
        horizontalCenter: RESTHorizontalAlignment.Center,
        verticalCenter: RESTVerticalAlignment.Middle,
        dy: 0,
        dx: 0,
        paddingLeft: 3,
        paddingRight: 3,
    },
    xAxisTitleLabel: {
        align: RESTHorizontalAlignment.Center,
        valign: RESTVerticalAlignment.Middle,
        rotation: 0,
        fontSize: 10,
        wrap: true,
    },
    yAxisTitleLabel: {
        align: RESTHorizontalAlignment.Center,
        valign: RESTVerticalAlignment.Middle,
        rotation: 270,
        wrap: true,
    },
    titleLabel: {
        align: RESTHorizontalAlignment.Center,
        wrap: true,
    },
    subTitleLabel: {
        align: RESTHorizontalAlignment.Center,
        wrap: true,
    },
    horizontalSurfaceGuideLabels: {
        horizontalCenter: RESTHorizontalAlignment.Right,
        align: RESTHorizontalAlignment.Right,
        verticalCenter: RESTVerticalAlignment.Middle,
        wrap: true,
    },
    horizontalLineGuideLabels: {
        horizontalCenter: RESTHorizontalAlignment.Right,
        align: RESTHorizontalAlignment.Right,
        verticalCenter: RESTVerticalAlignment.Top,
        wrap: true,
    },
    verticalSurfaceGuideLabels: {
        horizontalCenter: RESTHorizontalAlignment.Center,
        verticalCenter: RESTVerticalAlignment.Top,
        valign: RESTVerticalAlignment.Top,
    },
    verticalLineGuideLabels: {
        horizontalCenter: RESTHorizontalAlignment.Right,
        verticalCenter: RESTVerticalAlignment.Bottom,
        valign: RESTVerticalAlignment.Top,
        wrap: true,
        rotation: 90,
    },
    guideAbove: false,
    cursorCrosshair: {
        style: {
            type: RESTSymbolType.SLS,
            style: RESTSimpleLineSymbolStyle.Dash,
            color: [0, 0, 0, 102],
            width: 1,
        },
        horizontalLineVisible: false,
        verticalLineVisible: false,
    },
    gauge: {
        innerRadius: 80,
        radius: 80,
        startAngle: -180,
        endAngle: 180,
        innerLabelToInnerChartRatio: 0.5, // 50% of the chart's size, considering the inner radius
        axisLabelToInnerChartRatio: 0.13, // ~= 40 / 300: font size 40 for a 300px gauge
        innerLabelAutoMinFontSize: 14,
        innerLabelAutoMaxFontSize: 100,
        axisLabelAutoMinFontSize: 14,
        axisLabelAutoMaxFontSize: 40,
        gaugeMinGridDistance: 1,
        axisMinimum: 0,
        axisMaximum: 100,
        numberOfLabelIntervals: 5,
        numberOfTicksBetweenTwoLabels: 4,
        maximumNumberOfLabelIntervals: 24, // result in 25 maximum number of axis labels
        paddingTop: 10,
        paddingBottom: 10,
        paddingRight: 5,
        paddingLeft: 5,
    },
    gaugeTicksLength: 7,
    gaugeInnerLabel: {
        horizontalCenter: RESTHorizontalAlignment.Center,
        verticalCenter: RESTVerticalAlignment.Middle,
    },
    gaugeNeedle: {
        startWidth: 10,
        endWidth: 1,
        innerRadius: 25,
        displayPin: false,
    },
    gaugeFirstLabelId: "arcgis_charts_gauge_first_label",
    gaugeLastLabelId: "arcgis_charts_gauge_last_label",
    // containers
    headerContainer: {
        layout: "vertical",
        width: "100%",
        paddingBottom: 5,
    },
    footerContainer: {
        layout: "vertical",
        width: "100%",
        paddingTop: 5,
        paddingBottom: 15,
    },
    paddingMinSize: 0,
    marginMinSize: 0,
    chartPaddingMinSize: 7,
    chartPaddingRightWhenLegendNotOnRight: 15,
    chartAndLegendContainer: {
        paddingTop: 0,
    },
    chartContainer: {
        paddingBottom: 0,
        paddingTop: 15,
    },
    chartContainerPaddingTopWhenRotated: 5,
    dataLabelInitialize: {
        strokeWidth: 0,
        applyOnClones: true,
    },
    dataLabel: {
        align: RESTHorizontalAlignment.Center,
        horizontalCenter: RESTHorizontalAlignment.Center,
        valign: RESTVerticalAlignment.Bottom,
        verticalCenter: RESTVerticalAlignment.Top,
        dy: -3,
    },
    dataLabelRotated: {
        align: RESTHorizontalAlignment.Right,
        horizontalCenter: RESTHorizontalAlignment.Right,
        valign: RESTVerticalAlignment.Middle,
        verticalCenter: RESTVerticalAlignment.Middle,
        dx: 2,
    },
    dataLabelStackedRotated: {
        align: RESTHorizontalAlignment.Center,
        horizontalCenter: RESTHorizontalAlignment.Center,
        valign: RESTVerticalAlignment.Middle,
        verticalCenter: RESTVerticalAlignment.Middle,
    },
    dataLabelStackedNonRotated: {
        align: RESTHorizontalAlignment.Center,
        horizontalCenter: RESTHorizontalAlignment.Center,
        valign: RESTVerticalAlignment.Middle,
        verticalCenter: RESTVerticalAlignment.Middle,
    },
    dataLabelNegative: {
        paddingTop: 5,
        paddingRight: 5,
    },
    scatterPlotSeries: {
        strokeOpacity: 0,
        regressionPrecision: 7,
        r2: Number.NaN,
        trendLinePoints: [{}, {}],
    },
    histogramSeries: {
        normalDistribNumberOfPoints: 100,
    },
    lineMarker: {
        markerSize: 7,
        markerStyle: RESTSimpleMarkerSymbolStyle.Circle,
    },
    lineSeries: {
        strokeWidth: 2,
        lineSmoothed: false,
        lineSmoothedKind: WebChartLineSmoothedKinds.Bezier,
        showArea: false,
        areaOpacity: 0.25,
        markerVisible: true,
        rotated: false,
        stackedType: WebChartStackedKinds.Side,
        stackNegativeValuesToBaseline: true,
        marker: {
            markerSize: 4,
            markerStrokeWidth: 2,
        },
    },
    buffer: false,
    elementLimitForSmoothRendering: 1000, // for line and scatter-plot
    defaultStatParameterValue: 0.5, // outStatistics
    pieChart: {
        dataLabels: { maxWidth: 100, wrap: false },
        dataLabelsOffset: 10,
        chartRadius: 80,
        chartOptimizedRadius: 70,
        innerRadius: oa,
        min: -90,
        max: 270,
        displayNumericValueOnLegend: false,
        displayNumericValueOnDataLabel: true,
        displayNumericValueOnTooltip: true,
        displayPercentageOnLegend: false,
        displayPercentageOnDataLabel: false,
        displayPercentageOnTooltip: true,
        sliceGrouping: {
            sliceId: Zn.defaultGroupOfSlicesId,
            percentageThreshold: 0, // 0 means no grouping
            fillSymbol: {
                type: RESTSymbolType.SFS,
                color: [210, 210, 210, 255 * Hn], // light grey, 70% opacity
            },
        },
        defaultPadding: 0,
        alignDataLabels: false,
        ticksOpacity: 1,
        minimumSize: 20,
        technicalFieldSliceId: "arcgis_charts_slice_id",
        technicalFieldSlicePercent: "arcgis_charts_slice_percent",
        technicalFieldGroupedSlices: "arcgis_charts_grouped_slices",
    },
    pieSliceCustomLabelName: "customLabel",
    yAxisLabelMaxWidth: 100,
    xAxisLabelMaxWidth: 75,
    axisLabelPadding: 1.5,
    categoryAxisLabelPadding: 3,
    seriesSort: WebChartSortOrderKinds.Ascending,
    technicalSortingFieldBySum: "arcgis_charts_category_sum",
    technicalSortingFieldByPercent: "arcgis_charts_category_first_series_percent",
    color: [0, 0, 0, 255],
    chartEllipsis: "...",
    backgroundColor: [255, 255, 255, 255],
    xAxisMinGridDistance: 120,
    xCategoryAxisMinGridDistance: 40,
    yAxisMinGridDistance: 40,
    yCategoryAxisMinGridDistance: 20,
    secondRotatedValueAxisMinGridDistance: 80,
    staggerMinGridDistance: 40,
    shortestMinGridDistance: 20,
    maxNumberOfXAxisLabelsInWrapModeForDateAxis: 15,
    maxNumberOfXAxisLabelsInWrapMode: 20,
    lineWidth: 1,
    loaderRotationSpeed: 400,
    loaderIntervalTimeout: 400,
    loaderBackground: [255, 255, 255, 230],
    loaderLabelFontSize: 20,
    selectionTheme: {
        selectedElementsTheme: {
            elementOutlineColor: [0, 255, 255, 255],
            elementOutlineWidth: 5,
        },
    },
    columnTooltipPosition: "pointer",
    markerTooltipPosition: "fixed",
    patternLineProperties: {
        width: 5,
        height: 5,
        strokeWidth: 1,
    },
    patternRectProperties: {
        rectWidth: 9,
        rectHeight: 9,
        width: 10,
        height: 10,
        strokeWidth: 0.3,
        fillOpacity: 0,
    },
    originalCategoryValue: "arcgis_charts_original_category_value",
    originalDateValue: "arcgis_charts_original_date_value",
    typeOrDomainFieldName: "arcgis_charts_type_domain_field_name",
    typeOrDomainIdValue: "arcgis_charts_type_domain_id_value",
    dateBinningRange: "arcgis_charts_bin_range",
    dateBinModel: "arcgis_charts_bin_model",
    xAxisField: "arcgis_charts_axis_field",
    nullValue: "arcgis_charts_null",
    queryMaxFloatPrecision: 10,
    dateFormatUTC: {
        timeZone: "UTC",
        year: "numeric",
        month: "numeric",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        hour12: true,
    },
    dayDefaultFormat: {
        day: "numeric",
        month: "short",
    },
    weekDefaultFormat: {
        day: "numeric",
        month: "short",
    },
    rendererOtherValue: "arcgisChartsrendererOtherValue",
    rendererSymbolField: "arcgis_charts_renderer_symbol",
    scatterPlotAggregationFields: {
        dataContextXMinField: "arcgis_charts_xmin",
        dataContextXMaxField: "arcgis_charts_xmax",
        dataContextYMinField: "arcgis_charts_ymin",
        dataContextYMaxField: "arcgis_charts_ymax",
        dataContextCountDistinctX: "distinctX",
        dataContextCountDistinctY: "distinctY",
        queryNumberOfFeatures: "numberOfFeatures",
        queryNumberOfAggregatedFeatures: "numberOfAggregatedFeatures",
        xStep: "xStep",
        yStep: "yStep",
        rowCount: "rowCount",
        columnCount: "columnCount",
        realGridSize: "realGridSize",
    },
    dataTooltipVisible: true,
    dataTooltipStyle: {
        outline: {
            type: RESTSymbolType.SLS,
            color: [255, 255, 255, 255],
            width: 1,
        },
    },
    dataTooltipStyleReversed: {
        color: [255, 255, 255, 255],
        outline: {
            type: RESTSymbolType.SLS,
            width: 3,
        },
    },
    tooltipWidth: 300,
    axisLabelOveredOpacity: 0.5, // 50% of original opacity
    generalFontSize: 10,
    actionMode: zy.MultiSelectionWithCtrlKey,
    debounceTime: 100, // 100 ms
    chartDefaultPaddingRight: 0, // 0 px default chart's plotting area right padding
    htmlEmptyContent: "<p></p>",
    boxPlot: {
        boxPlotCategory: "arcgis_charts_box_plot_category",
        boxPlotOutliersSuffix: "_arcgis_charts_outliers",
        boxPlotOutliersVisibility: false,
        boxPlotStandardizeValuesVisibility: false,
        boxPlotOutliersSize: 4,
        boxPlotLineWidth: 2,
        boxPlotOutlierId: "is_arcgis_charts_outlier",
        boxPlotMeanLineMarkerId: "is_arcgis_charts_mean_marker",
        boxPlotWhiskersColor: [153, 153, 153, 178.5],
        boxPlotTooltipLabelWidth: 250,
    },
    binTemporalData: true,
    overlayId: { scatterPlotTrendLine: "arcgis_charts_scatter_plot_trendline" },
    options: {
        hideEmptySeries: true,
        replaceNoValueCategoryWithZero: true,
    },
};

/**
 * Fetches the error strings to get the error message associated to the provided key, and throws an error.
 * If the message is not found a generic one is used.
 * @param errorKey The key pointing to the message to be used by the error
 * @param errorStrings The list of error strings in which to pick the error message
 * @throws {Error}
 */
async function throwError(errorKey, errorStrings) {
    const errorMessage = errorStrings.errors[errorKey];
    throw new Xs(errorStrings.modalHeaders.error, errorMessage ?? errorStrings.errors.simpleError);
}

/**
 * Return the x-axis value format
 * @param chartConfig The chart's config
 */
function getXAxisValueFormat(chartConfig) {
    return chartConfig.axes?.[0]?.valueFormat?.type;
}
/**
 * Return dateFormat or numberFormat for the `WebChartAxis`
 * @param valueFormat NumberFormatOptions | DateTimeFormatOptions
 */
function mapValueFormat(valueFormat) {
    return valueFormat.intlOptions;
}
/**
 * Return true if the input `WebChartAxis` is a **Value axis** (represents only **numerical** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
function isNumberValueFormat(valueFormat) {
    return valueFormat?.type === WebChartTypes.NumberAxisFormat;
}
/**
 * Return true if the input `WebChartAxis` is a **Value axis** (represents only **numerical** data)
 * and the format uses a `percent` style.
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
function isPercentNumberValueFormat(valueFormat) {
    return isNumberValueFormat(valueFormat) && valueFormat.intlOptions?.style === "percent";
}
/**
 * Return true if the input `WebChartAxis` is a **Category axis** (represents only string or **categorical** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
function isCategoryValueFormat(valueFormat) {
    return valueFormat?.type === WebChartTypes.CategoryAxisFormat;
}
/**
 * Return true if the input `WebChartAxis` is a **Date axis** (represents only temporal or **date-time** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
function isDateValueFormat(valueFormat) {
    return valueFormat?.type === WebChartTypes.DateAxisFormat;
}
/**
 * Returns for each axis a boolean indicating if the labels behavior property changed since the previous update.
 * The first index contains the result for the horizontal axis (whether it's the x or y axis) and the second index
 * the result for the vertical axis.
 * @param props.oldConfig The config from the previous update
 * @param props.newConfig The config from the current update
 * @param props.rotationChanged Indicates whether a change of rotation has taken place
 */
function hasAxisLabelsBehaviorChanged(props) {
    const { oldConfig, newConfig, rotationChanged } = props;
    // if the chart changed its rotation, we automatically set the boolean values to true. Otherwise we compare old config versus new config
    const change = rotationChanged
        ? [true, true]
        : [
            oldConfig.horizontalAxisLabelsBehavior !== newConfig.horizontalAxisLabelsBehavior,
            oldConfig.verticalAxisLabelsBehavior !== newConfig.verticalAxisLabelsBehavior,
        ];
    return change;
}
/**
 * Checks if the line chart axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidLineChartAxesValueFormat(axesConfig) {
    // Whether or not the chart is rotated, we expect:
    // - any x-axis value format
    // - a value y-axis
    // - a secondary value y-axis, or non at all
    return (isNumberValueFormat(axesConfig?.[1]?.valueFormat) &&
        (axesConfig?.[2]?.valueFormat === undefined || isNumberValueFormat(axesConfig[2].valueFormat)));
}
/**
 * Checks if the bar chart axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidBarChartAxesValueFormat(axesConfig) {
    // Whether or not the chart is rotated, we expect:
    // - any x-axis value format
    // - a value y-axis
    // - a secondary value y-axis, or non at all
    return (isNumberValueFormat(axesConfig?.[1]?.valueFormat) &&
        (axesConfig?.[2]?.valueFormat === undefined || isNumberValueFormat(axesConfig[2].valueFormat)));
}
/**
 * Checks if the box plot axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidBoxPlotAxesValueFormat(axesConfig) {
    // On both plot we expect a category or date x-axis and a value y-axis
    const isValid = (isCategoryValueFormat(axesConfig?.[0]?.valueFormat) || isDateValueFormat(axesConfig?.[0]?.valueFormat)) &&
        isNumberValueFormat(axesConfig?.[1]?.valueFormat) &&
        (axesConfig?.[2]?.valueFormat === undefined || isNumberValueFormat(axesConfig[2].valueFormat));
    return isValid;
}
/**
 * Checks if the combo bar-line chart axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidComboLineAndBarChartAxesValueFormat(axesConfig) {
    // Whether the chart is rotated, we expect:
    // - a date or category x-axis
    // - a value y-axis
    // - a secondary value y-axis, or non at all
    return ((isCategoryValueFormat(axesConfig?.[0]?.valueFormat) || isDateValueFormat(axesConfig?.[0]?.valueFormat)) &&
        isNumberValueFormat(axesConfig?.[1]?.valueFormat));
}
/**
 * Checks if the scatter plot axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidScatterPlotAxesValueFormat(axesConfig) {
    // Scatter plot needs a numeric value format on both axes
    return isNumberValueFormat(axesConfig?.[0]?.valueFormat) && isNumberValueFormat(axesConfig?.[1]?.valueFormat);
}
/**
 * Checks if the histogram axes value format are valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axes value format is valid.
 */
function hasValidHistogramAxesValueFormat(axesConfig) {
    // Histogram needs a numeric value format on both axes
    return isNumberValueFormat(axesConfig?.[0]?.valueFormat) && isNumberValueFormat(axesConfig?.[1]?.valueFormat);
}
/**
 * Checks if the gauge axis value format is valid.
 *
 * @param axesConfig The array of axes config
 * @returns A boolean indicating whether the axis value format is valid.
 */
function hasValidGaugeAxisValueFormat(axesConfig) {
    // Gauge needs a numeric value format on its axis
    return isNumberValueFormat(axesConfig?.[0]?.valueFormat);
}
/**
 * Validates the provided value format properties are compatible with the type of chart
 * @param props.axesConfig The array of axes config
 * @param props.chartType The chart type
 * @param props.errorStrings The t9n error strings
 */
async function validateAxesValueFormat(props) {
    const { chartType, axesConfig, errorStrings } = props;
    let validateFunction;
    let errorType;
    switch (chartType) {
        case WebChartTypes.GaugeSeries:
            validateFunction = hasValidGaugeAxisValueFormat;
            errorType = "invalidValueFormatForGauge";
            break;
        case WebChartTypes.ScatterSeries:
            validateFunction = hasValidScatterPlotAxesValueFormat;
            errorType = "invalidValueFormatForScatterPlot";
            break;
        case WebChartTypes.HistogramSeries:
            validateFunction = hasValidHistogramAxesValueFormat;
            errorType = "invalidValueFormatForHistogram";
            break;
        case WebChartTypes.LineSeries:
            validateFunction = hasValidLineChartAxesValueFormat;
            errorType = "invalidValueFormatForLineChart";
            break;
        case WebChartTypes.BarSeries:
            validateFunction = hasValidBarChartAxesValueFormat;
            errorType = "invalidValueFormatForBarChart";
            break;
        case WebChartTypes.ComboLineAndBarSeries:
            validateFunction = hasValidComboLineAndBarChartAxesValueFormat;
            errorType = "invalidValueFormatForComboBarLineChart";
            break;
        case WebChartTypes.BoxPlotSeries:
            validateFunction = hasValidBoxPlotAxesValueFormat;
            errorType = "invalidValueFormatForBoxPlot";
            break;
    }
    if (validateFunction !== undefined && errorType !== undefined) {
        const valid = validateFunction(axesConfig);
        if (!valid) {
            await throwError(errorType, errorStrings);
        }
    }
}
/**
 * Function deciding whether we should create a category axis
 * @param props.isXAxis Whether the axis is the x-axis
 * @param props.chartType The chart type
 * @param props.valueFormat The axis value format
 * @param props.isAxisForHistogramOverlaySeries Whether the axis is for a histogram column series
 */
function useCategoryAxis(props) {
    const { isXAxis, chartType, valueFormat, isAxisForHistogramOverlaySeries } = props;
    // We want to use a category axis when it is the x-axis and:
    // 1. The value format is a category value format
    // 2. or it's for a histogram column series (non overlay series)
    // 3. Or the value format is a number value format and the chart type is a bar series (refer to // Refer to https://devtopia.esri.com/webgis/arcgis-charts/issues/5948)
    return (isXAxis &&
        (isCategoryValueFormat(valueFormat) ||
            (chartType === WebChartTypes.HistogramSeries && !isAxisForHistogramOverlaySeries) ||
            (chartType === WebChartTypes.BarSeries && isNumberValueFormat(valueFormat))));
}
/**
 * Get the series id related to the given axis (useful in dual axis mode).
 * @param props.chartConfig The chart configuration
 * @param props.isSecondValueAxis Whether the axis is the second value axis (in dual axis mode)
 * @param props.seriesId The series id
 */
function getAxisSeriesIds(props) {
    const { chartConfig, isSecondValueAxis, seriesIds } = props;
    let filteredSeriesIds = seriesIds;
    // If we are in dual axis mode, we need to split the series to only retain the ones associated to the current axis
    if (chartConfig.axes?.length === 3) {
        filteredSeriesIds = chartConfig.series
            .map((seriesConfig) => {
            let id = "";
            if (seriesIds === undefined || seriesIds.includes(seriesConfig.id)) {
                if ((isSecondValueAxis === true &&
                    "assignToSecondValueAxis" in seriesConfig &&
                    seriesConfig.assignToSecondValueAxis === true) ||
                    (isSecondValueAxis !== true &&
                        (!("assignToSecondValueAxis" in seriesConfig) || seriesConfig.assignToSecondValueAxis !== true))) {
                    ({ id } = seriesConfig);
                }
            }
            return id;
        })
            .filter((id) => id !== "");
    }
    return filteredSeriesIds;
}

/**
 * Merges an array of IExtent into one IExtent
 * @param extentList
 * @returns
 */
function mergeExtents(extentList) {
    let mergedExtent;
    if (extentList?.[0] !== undefined) {
        // performing a union of the extents
        mergedExtent = extentList.reduce((extent, currentExtent) => ({
            ...extent,
            xmin: Math.min(extent.xmin, currentExtent.xmin),
            xmax: Math.max(extent.xmax, currentExtent.xmax),
            ymin: Math.min(extent.ymin, currentExtent.ymin),
            ymax: Math.max(extent.ymax, currentExtent.ymax),
        }), extentList[0]);
    }
    return mergedExtent;
}
/**
 * Checks in the data context if some extra values has been stored.
 * - `typeOrDomainIdValue` is used for when preferLabel is false
 * - `originalCategoryValue` is used for the non-aggregated bar charts in order to handle the duplicated
 *   category names. In that case the categories are replaced by a unique key, different from the original category name.
 * - `originalDateValue` is used for storing the original non formatted category when it's a date
 * - `defaultPieFromFieldsName` is used by pie chart from field.
 * @param props.value The default value
 * @param props.dataContext The data context
 * @param props.useRendererLabel Whether to use the renderer label
 * @param props.specificField A specific field to look for
 * @param props.preferLabel Whether to use field label instead of value
 * @param props.keepNullValues Whether to keep the null values
 */
function getXAxisValueFromContext(props) {
    const { value, dataContext, specificField, preferLabel, keepNullValues = false, useRendererLabel = false } = props;
    // by default we return the provided value
    let newValue = value;
    const { originalCategoryValue, originalDateValue, typeOrDomainIdValue } = ChartDefaults;
    // looking first for a specific field if provided
    // then the field related to the renderer symbol
    // then `typeOrDomainIdValue` if preferLabel is false
    // then `originalDateValue`
    // then `originalCategoryValue`
    // and finally `defaultPieFromFieldsName`
    if (dataContext !== undefined) {
        const rendererLabel = useRendererLabel ? getDataItemRendererLabel(dataContext) : undefined;
        if (specificField !== undefined && dataContext[specificField] !== undefined) {
            newValue = dataContext[specificField];
        }
        else if (rendererLabel !== undefined) {
            newValue = rendererLabel;
        }
        else if (preferLabel === false && dataContext[typeOrDomainIdValue] !== undefined) {
            newValue = dataContext[typeOrDomainIdValue];
        }
        else if (dataContext[originalDateValue] !== undefined) {
            newValue = dataContext[originalDateValue];
        }
        else if (dataContext[originalCategoryValue] !== undefined) {
            newValue = dataContext[originalCategoryValue];
        }
        else if (dataContext[defaultPieFromFieldsName] !== undefined) {
            newValue = dataContext[defaultPieFromFieldsName];
        }
        // keeping `null` values when requested
        if (!keepNullValues && newValue === null) {
            newValue = "null";
        }
    }
    return newValue;
}
/**
 * Looks for the original x value in the data context. Chooses by order of priority:
 * - the type or domain id value
 * - the original category value
 * @param dataContext The data context
 */
function getOriginalXValueFromContext(dataContext) {
    // we don't use a ternary condition to keep the `null` values
    return dataContext?.[ChartDefaults.typeOrDomainIdValue] !== undefined
        ? dataContext?.[ChartDefaults.typeOrDomainIdValue]
        : dataContext?.[ChartDefaults.originalCategoryValue];
}
/**
 * Sorting an array WebChartDataItem by either ascending or descending order.
 *
 * @param props.arrayToSort The array to sort
 * @param props.sortingField The field to sort by
 * @param props.orderBy The order by
 * @param props.forceAscendingOrder Whether to force the ascending order
 * @param props.isNonAggregated Whether the chart is non-aggregated
 * @param props.sortByCategory Whether to sort by the x-axis field
 * @param props.preferLabel Whether to use data labels
 * @param props.isPieOrByFieldsChart Whether it is a pie or by fields chart
 */
function sortWebChartDataItemsUsingDirectionalSort(props) {
    const { arrayToSort, orderBy, sortingField, forceAscendingOrder, isNonAggregated, sortByCategory, preferLabel, isPieOrByFieldsChart, } = props;
    if (arrayToSort !== undefined && arrayToSort.length > 1) {
        const descOrder = orderBy === WebChartSortOrderKinds.Descending && forceAscendingOrder !== true;
        arrayToSort.sort((dataItemA, dataItemB) => {
            // Default sort decision = 0 (equal values)
            let sortDecision = 0;
            let firstEntry = dataItemA[sortingField];
            // the sortingField determines which property value from the dataItem to sort by;
            // however, we need to adjust to retrieve the correct value from the data context
            // for a chart that is not a pie nor from fields chart, when it's a category sort
            if (sortByCategory === true && !isPieOrByFieldsChart) {
                firstEntry = getXAxisValueFromContext({
                    value: `${dataItemA[sortingField]?.toString()}`,
                    dataContext: dataItemA,
                    preferLabel,
                });
            }
            let secondEntry = dataItemB[sortingField];
            // same reason as for the firstEntry
            if (sortByCategory === true && !isPieOrByFieldsChart) {
                secondEntry = getXAxisValueFromContext({
                    value: `${dataItemB[sortingField]?.toString()}`,
                    dataContext: dataItemB,
                    preferLabel,
                });
            }
            /*
              With non-aggregated charts, the x-axis descending sort can have issues due to
              the values being interpreted as strings when they should be interpreted as numbers,
              as well as the sort order being incorrect. We check if the value could be a valid
              number, and if so, convert it.
              TODO: Why does this only happen on x-axis descending sort?
              */
            if (isNonAggregated === true && descOrder && sortByCategory === true) {
                firstEntry = !Number.isNaN(Number.parseFloat(`${firstEntry?.toString()}`))
                    ? Number.parseFloat(firstEntry)
                    : firstEntry; // defaultValueA;
                secondEntry = !Number.isNaN(Number.parseFloat(`${secondEntry?.toString()}`))
                    ? Number.parseFloat(secondEntry)
                    : secondEntry; // defaultValueB;
            }
            // Special cases:
            // - the group of slices on pie chart is always in last position
            // - the `null` categories are always in last position when the sort is done by the x field
            if ((sortByCategory === true && (dataItemA[ChartDefaults.originalCategoryValue] === null || firstEntry === null)) ||
                dataItemA[Zn.defaultGroupOfSlicesId] === true) {
                sortDecision = 1;
            }
            else if ((sortByCategory === true &&
                (dataItemB[ChartDefaults.originalCategoryValue] === null || secondEntry === null)) ||
                dataItemB[Zn.defaultGroupOfSlicesId] === true) {
                sortDecision = -1;
            }
            else if (typeof firstEntry === "string" && typeof secondEntry === "string") {
                // In case of string values, we perform a natural sort using the native `localeCompare`
                sortDecision = firstEntry.localeCompare(secondEntry, undefined, {
                    numeric: true,
                });
                if (descOrder) {
                    sortDecision *= -1;
                }
            }
            else if (firstEntry === undefined) {
                sortDecision = !descOrder ? 1 : -1;
            }
            else if (secondEntry === undefined) {
                sortDecision = !descOrder ? -1 : 1;
            }
            else if (firstEntry !== null && secondEntry !== null) {
                if (firstEntry > secondEntry) {
                    sortDecision = !descOrder ? 1 : -1;
                }
                else if (firstEntry < secondEntry) {
                    sortDecision = !descOrder ? -1 : 1;
                }
            }
            return sortDecision;
        });
    }
}
/**
 * Sorting an array WebChartDataItem according to the predefined labels.
 *
 * @param props.arrayToSort The array to sort
 * @param props.orderBy The order by object
 * @param props.sortingField The field to sort by
 * @param props.fieldList The layer field list
 * @param props.isByFieldsChart Whether the chart is a by fields chart (bar, line, pie from fields)
 * @param props.preferLabel Whether or not to use labels like field alias
 */
function sortWebChartDataItemsUsingPredefinedLabels(props) {
    const { arrayToSort, orderBy, sortingField, fieldList, isByFieldsChart, preferLabel } = props;
    if (arrayToSort !== undefined &&
        arrayToSort.length > 1 &&
        !Ol(sortingField) &&
        orderBy !== undefined &&
        orderBy.length > 0) {
        // perform the sort
        arrayToSort.sort((dataItemA, dataItemB) => {
            let firstEntry = dataItemA[sortingField];
            if (preferLabel && isByFieldsChart && typeof firstEntry === "string") {
                firstEntry = Tl(fieldList, firstEntry);
            }
            let indexA = orderBy.indexOf(firstEntry?.toString() ?? "");
            if (indexA === -1) {
                indexA = orderBy.length;
            }
            let secondEntry = dataItemB[sortingField];
            if (preferLabel && isByFieldsChart && typeof secondEntry === "string") {
                secondEntry = Tl(fieldList, secondEntry);
            }
            let indexB = orderBy.indexOf(secondEntry?.toString() ?? "");
            if (indexB === -1) {
                indexB = orderBy.length;
            }
            return indexA - indexB;
        });
    }
}
/**
 * This function reassigns the category/field name and stat value to the series x and y, while deleting the
 * technical field used during the rendering for technical reasons.
 * @param modifiedData The data to revert
 * @param seriesConfig The series config
 */
function revertPieFromFieldsProperties(modifiedData, seriesConfig) {
    const revertedData = modifiedData;
    if (seriesConfig?.[0] !== undefined && ts(seriesConfig) === ml.PieFromFields) {
        const { x, y } = seriesConfig[0];
        // the caller to this function can send a WebChartGenericDataItem or a WebChartDataItem[] for bar/line charts
        const isWebChartDataItemArray = isArray$1(modifiedData);
        const dataItems = isWebChartDataItemArray
            ? revertedData
            : revertedData.dataItems;
        dataItems.forEach((dataItem) => {
            if (defaultPieFromFieldsName in dataItem && x !== defaultPieFromFieldsName) {
                dataItem[x] = dataItem[x] !== undefined ? dataItem[x] : dataItem[defaultPieFromFieldsName];
                delete dataItem[defaultPieFromFieldsName];
            }
            if (defaultPieFromFieldsValue in dataItem && y !== defaultPieFromFieldsValue) {
                dataItem[y] = dataItem[y] !== undefined ? dataItem[y] : dataItem[defaultPieFromFieldsValue];
                delete dataItem[defaultPieFromFieldsValue];
            }
            return dataItem;
        });
    }
    return revertedData;
}
/**
 * This function reverts some changes done to process the chart's data set:
 * - removes the formatted dates used specifically for the queries
 * - switches back the values of the modified dates/categories to accommodate the rendering (axis labels, sort...)
 * @param data The data containing modified x values
 * @param seriesConfig The series config
 */
function revertOriginalXValues(data, seriesConfig) {
    const chartType = fl(seriesConfig);
    let revertedData = data;
    const firstSeriesConfig = seriesConfig?.[0];
    if ((chartType === WebChartTypes.PieSeries ||
        chartType === WebChartTypes.BoxPlotSeries ||
        chartType === WebChartTypes.LineSeries ||
        chartType === WebChartTypes.RadarSeries ||
        chartType === WebChartTypes.BarSeries ||
        chartType === WebChartTypes.ComboLineAndBarSeries) &&
        firstSeriesConfig !== undefined) {
        // the caller to this function can send a WebChartGenericDataItem or a WebChartDataItem[] for bar/line charts
        const isWebChartDataItemArray = isArray$1(data);
        let dataItems = isWebChartDataItemArray ? data : data.dataItems;
        if (data !== undefined) {
            const { originalCategoryValue, originalDateValue, xAxisField, typeOrDomainIdValue } = ChartDefaults;
            const { x } = firstSeriesConfig;
            dataItems = dataItems.map((dataItem) => {
                // Note: not using the nullish coalescing to keep the `null` values
                let revertedX = dataItem[x];
                if (dataItem[typeOrDomainIdValue] !== undefined) {
                    revertedX = dataItem[typeOrDomainIdValue];
                }
                else if (dataItem[originalDateValue] !== undefined) {
                    revertedX = dataItem[originalDateValue];
                }
                else if (dataItem[originalCategoryValue] !== undefined) {
                    revertedX = dataItem[originalCategoryValue];
                }
                const originalDataItem = {
                    ...dataItem,
                    [x]: revertedX,
                };
                delete originalDataItem[originalDateValue];
                delete originalDataItem[typeOrDomainIdValue];
                delete originalDataItem[originalCategoryValue];
                delete originalDataItem[xAxisField];
                return originalDataItem;
            });
            if (isWebChartDataItemArray) {
                revertedData = dataItems;
            }
            else if ("dataItems" in revertedData) {
                revertedData.dataItems = dataItems;
            }
        }
    }
    return revertedData;
}
/**
 * Removes some technical properties including color ones from a data item
 * @param dataItem The data item to sanitize
 * @returns The sanitized data item
 */
function removeAdditionalStatisticsPerItem(dataItem) {
    const originalDataItem = {
        ...dataItem,
    };
    delete originalDataItem[ChartDefaults.technicalSortingFieldBySum];
    delete originalDataItem[ChartDefaults.technicalSortingFieldByPercent];
    delete originalDataItem[ChartDefaults.pieChart.technicalFieldSlicePercent];
    delete originalDataItem[ChartDefaults.pieChart.technicalFieldGroupedSlices];
    delete originalDataItem[ChartDefaults.typeOrDomainFieldName];
    delete originalDataItem[Un.uniqueIdsName];
    // removing the properties containing color information
    const colorFields = Object.keys(originalDataItem).filter((key) => key.includes(ChartDefaults.rendererSymbolField));
    colorFields.forEach((field) => delete originalDataItem[field]);
    // remove technical fields from the query, as "EXPR_1"
    const exprInItem = _l(originalDataItem);
    if (exprInItem.isInItem) {
        delete originalDataItem[exprInItem.expr ?? ""];
    }
    return originalDataItem;
}
/**
 * Before sending the event payload containing the data, we need to revert some changes done to sort the charts.
 * @param data The data set to modify
 * @param seriesConfig The series config
 * @returns The sanitized data
 */
function removeAdditionalStatistics(data, seriesConfig) {
    let revertedData = data;
    const chartType = fl(seriesConfig);
    let dataItems = os(revertedData);
    if (dataItems !== undefined) {
        switch (chartType) {
            case WebChartTypes.ComboLineAndBarSeries:
            case WebChartTypes.BarSeries:
            case WebChartTypes.LineSeries:
            case WebChartTypes.RadarSeries:
            case WebChartTypes.PieSeries:
                {
                    dataItems = dataItems.map(removeAdditionalStatisticsPerItem);
                    revertedData = {
                        dataItems,
                    };
                    // adding the `timeIntervalInfo` if available
                    const { timeIntervalInfo } = data ?? {};
                    if (!isEmpty(timeIntervalInfo)) {
                        revertedData.timeIntervalInfo = timeIntervalInfo;
                    }
                }
                break;
            case WebChartTypes.ScatterSeries:
                revertedData = {
                    ...revertedData,
                    dataItems: dataItems.map(removeAdditionalStatisticsPerItem),
                };
                break;
        }
    }
    return revertedData;
}
/**
 * Sanitizes data by reverting technical changes made to the data set.
 * The point is to send meaningful data to the user through events or the `chartWillRender()` function.
 * @param props.data The data to sanitize
 * @param props.seriesConfig The series config
 */
function sanitizeData(props) {
    const { data, seriesConfig } = props;
    let sanitizedData = cloneDeep(data);
    if (sanitizedData !== undefined) {
        // Before sending the event, we revert some technical changes made to the dataset
        sanitizedData = revertOriginalXValues(sanitizedData, seriesConfig);
        sanitizedData = removeAdditionalStatistics(sanitizedData, seriesConfig);
        sanitizedData = revertPieFromFieldsProperties(sanitizedData, seriesConfig);
    }
    return sanitizedData;
}
/**
 * A function to determine whether the scatter plot is aggregated.
 * It can use a map of statistics containing the number of points (computed from the data side) or
 * a data context object usually stored within each marker.
 * @param props
 */
function isScatterPlotAggregated(props) {
    const { statsMap, dataContext, chartLimits } = props;
    let aggregated = false;
    if (statsMap !== undefined) {
        const { maxScatterPointsBeforeAggregation } = Zo(chartLimits);
        const { queryNumberOfFeatures } = ChartDefaults.scatterPlotAggregationFields;
        aggregated = (statsMap.get(queryNumberOfFeatures) ?? Number.NaN) >= maxScatterPointsBeforeAggregation;
    }
    else if (dataContext !== undefined) {
        // dataContextXMinField is a flag helping identifying the data context belongs to an aggregated marker
        aggregated = ChartDefaults.scatterPlotAggregationFields.dataContextXMinField in dataContext;
    }
    return aggregated;
}
/**
 * A function to determine whether a bar or line chart is aggregated.
 * @param chartConfig The chart's config
 */
function isBarOrLineChartAggregated(chartConfig) {
    // defaulting to true and we'll try to find a non aggregated chart to turn it false
    let aggregated = true;
    const chartType = fl(chartConfig.series);
    if (chartType === WebChartTypes.BarSeries ||
        chartType === WebChartTypes.LineSeries ||
        chartType === WebChartTypes.ComboLineAndBarSeries) {
        const chartSubType = ts(chartConfig.series);
        aggregated =
            chartSubType !== ml.BarAndLineNoAggregation &&
                chartSubType !== ml.BarAndLineSplitByNoAggregation;
    }
    return aggregated;
}
function isPieChartAggregated(chartConfig) {
    return ts(chartConfig.series) !== ml.PieNoAggregation;
}
/**
 * A function to determine whether a chart is aggregated.
 * Supports scatter plot, bar chart and pie chart. Defaults to true for the other types of chart.
 * @param props
 */
function isChartAggregated(props) {
    const { dataContext, chartConfig, chartLimits } = props;
    // defaulting to true and we'll try to find a non aggregated chart to turn it false
    let aggregated = true;
    if (chartConfig !== undefined) {
        const chartType = fl(chartConfig.series);
        switch (chartType) {
            case WebChartTypes.BarSeries:
            case WebChartTypes.LineSeries:
            case WebChartTypes.ComboLineAndBarSeries:
                aggregated = isBarOrLineChartAggregated(chartConfig);
                break;
            case WebChartTypes.ScatterSeries:
                aggregated = isScatterPlotAggregated({
                    dataContext: dataContext,
                    chartLimits,
                });
                break;
            case WebChartTypes.PieSeries:
                aggregated = isPieChartAggregated(chartConfig);
                break;
        }
    }
    return aggregated;
}
/**
 * Converts the field to have the transform functions applied in where clause.
 * Use by histogram.
 * @param xAxisField
 * @param type
 */
function getTransformedQuery(xAxisField, type) {
    let transformedField = xAxisField;
    switch (type) {
        case WebChartDataTransformations.Log:
            transformedField = `log(${xAxisField})`;
            break;
        case WebChartDataTransformations.Sqrt:
            transformedField = `power(CAST(${xAxisField} AS FLOAT),0.5)`;
            break;
    }
    return transformedField;
}
/**
 * Transform a date into a format that can be used for querying.
 * Ex:
 *   - 1629862814560 => "8/25/2021 3:40:14 AM"
 *   - new Date(2005, 5, 5, 5, 5, 5) => "6/5/2005 12:05:05 PM"
 * @param date
 * @returns
 */
function transformDateToQueryFormat(date) {
    let dateForQuery = new Date(date).valueOf();
    if (!Number.isNaN(dateForQuery)) {
        // Setting en-US helps formatting the date as expected. If we let as default (undefined) it can format the date differently (ex for en-ca: 2021-09-09, 5:07:43 p.m. rather than 09/09/2021, 5:07:43 PM)
        dateForQuery = new Intl.DateTimeFormat("en-US", ChartDefaults.dateFormatUTC).format(date).replace(",", "");
    }
    return dateForQuery;
}
/**
 * Construct an array of WebChartDataItem using every key/value pairs from the input data (of type WebChartDataItem).
 *
 * Currently only Pie chart uses this function.
 * @param data The data to convert
 * @param x The x field name
 * @param y The y field name
 * @param fieldList The field list
 */
function convertMultipleNumericFieldsData(props) {
    const { dataToConvert, x, y, fieldList } = props;
    const convertedItems = [];
    // storing the selection extent to copy it into each data item
    const featuresExtent = dataToConvert[Vn];
    Object.entries(dataToConvert).forEach(([key]) => {
        if (key !== "" && key !== Vn && key in dataToConvert) {
            const dataItem = {
                [x]: Tl(fieldList, key),
                [y]: dataToConvert[key],
                [ChartDefaults.xAxisField]: key,
                [ChartDefaults.originalCategoryValue]: key,
            };
            // on a pie from field each slice has the same selection extent
            if (featuresExtent !== undefined) {
                dataItem[Vn] = featuresExtent;
            }
            // if the data contains information regarding the renderer color, we store it
            // these colors are computed and stored by `computeRendererSymbol()`
            if (dataToConvert[`${ChartDefaults.rendererSymbolField}_${key}`] !== undefined) {
                dataItem[ChartDefaults.rendererSymbolField] = dataToConvert[`${ChartDefaults.rendererSymbolField}_${key}`];
            }
            // each `dataItem` will be a slice on the chart
            convertedItems.push(dataItem);
        }
    });
    return convertedItems;
}
/**
 * Compares two gauge configs and indicates whether the series value conversion changed
 * @param oldConfig The previous config
 * @param newConfig The updated config
 */
function hasGaugeValueConversionChanged(oldConfig, newConfig) {
    return (JSON.stringify(oldConfig.series[0]?.valueConversion) !==
        JSON.stringify(newConfig.series[0]?.valueConversion));
}
/**
 * Compares two gauge configs and indicates whether the color type change
 * @param oldConfig The previous config
 * @param newConfig The updated config
 */
function hasColorMatchChanged(oldConfig, newConfig) {
    return (oldConfig.colorMatch ?? false) !== (newConfig.colorMatch ?? false);
}
/**
 * Compares the 'slices' array from the pie series, and indicates whether they are different.
 * Compare only the slices id and label to avoid false positives.
 * @param props.oldConfig The previous chart config
 * @param props.newConfig The newest chart config
 */
function hasSlicesConfigChanged(props) {
    const { oldConfig, newConfig } = props;
    let changed = false;
    const oldSeries = oldConfig.series[0];
    const newSeries = newConfig.series[0];
    const oldChartType = fl(oldConfig.series);
    const newChartType = fl(newConfig.series);
    if (oldChartType === WebChartTypes.PieSeries && newChartType === WebChartTypes.PieSeries) {
        const { slices: oldSlices, sliceGrouping: oldGroupOfSlices } = oldSeries;
        const { slices: newSlices, sliceGrouping: newGroupOfSlices } = newSeries;
        // getting the slices info. Keeping only the id and label to avoid false positives on the style
        const oldSlicesFiltered = oldSlices?.map((slice) => ({
            sliceId: slice.sliceId,
            label: slice.label,
        }));
        const newSlicesFiltered = newSlices?.map((slice) => ({
            sliceId: slice.sliceId,
            label: slice.label,
        }));
        // getting the group slice label
        const oldGroupOfSlicesFiltered = oldGroupOfSlices?.label;
        const newGroupOfSlicesFiltered = newGroupOfSlices?.label;
        changed =
            JSON.stringify(oldSlicesFiltered) !== JSON.stringify(newSlicesFiltered) ||
                JSON.stringify(oldGroupOfSlicesFiltered) !== JSON.stringify(newGroupOfSlicesFiltered);
    }
    return changed;
}
/**
 * Compares two arrays of series and indicates whether the number of series is different.
 * @param oldSeries
 * @param newSeries
 */
function hasNumberOfSeriesChanged(oldSeries, newSeries) {
    return newSeries.length !== oldSeries.length;
}
/**
 * Indicates whether the time binning properties changed on a line chart.
 * @param props
 */
function hasTimeBinningChanged(props) {
    const { oldSeries, newConfig, oldTimeIntervalInfo, setTimeBinningInfoWhenNotProvided } = props;
    const newFirstSeries = newConfig.series?.[0];
    let timeBinningChanged = false;
    let timeIntervalUnitChanged = false;
    let newTimeBinningWillBeCalculated = false;
    if ((newFirstSeries.type === WebChartTypes.BarSeries || newFirstSeries.type === WebChartTypes.LineSeries) &&
        is({
            seriesConfig: newFirstSeries,
            xAxisValueFormatType: getXAxisValueFormat(newConfig),
            setTimeBinningInfoWhenNotProvided,
        })) {
        const oldFirstSeries = oldSeries[0];
        timeBinningChanged =
            oldTimeIntervalInfo?.timeIntervalSize !== newFirstSeries.timeIntervalSize ||
                oldFirstSeries?.timeAggregationType !== newFirstSeries.timeAggregationType ||
                oldFirstSeries?.trimIncompleteTimeInterval !== newFirstSeries.trimIncompleteTimeInterval ||
                oldFirstSeries?.nullPolicy !== newFirstSeries.nullPolicy;
        timeIntervalUnitChanged = oldTimeIntervalInfo?.timeIntervalUnits !== newFirstSeries.timeIntervalUnits;
        newTimeBinningWillBeCalculated =
            setTimeBinningInfoWhenNotProvided === true && (newFirstSeries.timeIntervalSize ?? 0) <= 0;
    }
    return {
        timeBinningChanged,
        timeIntervalUnitChanged,
        newTimeBinningWillBeCalculated,
    };
}
/**
 * Compares the queries from two configs and indicates whether a query changed.  Noted that the query comparison
 * includes the orderByFields from the orderOptions.
 *
 * A sort on the series is made before comparing to prevent a false positive on query reorder.
 *
 * @param props.oldConfig The former chart config
 * @param props.newConfig The new chart config
 * @param props.behaviorAfterLimit The chart's behavior once the data limit is reached
 */
function hasQueryChanged(props) {
    const { oldConfig, newConfig, behaviorAfterLimit } = props;
    const oldSeries = oldConfig.series;
    const newSeries = newConfig.series;
    let dataUpdateNeeded = false;
    let queryOrderByFieldsChanged = false;
    // when the chart is set to render up to the limit, or when no additional data sort after retrieving is needed (indicated via the `orderOptions.data`),
    // we need to check if the orderByFields changed in order to pull new data.
    if (behaviorAfterLimit === We.RenderUpToTheLimit ||
        oldConfig.orderOptions?.data === undefined ||
        newConfig.orderOptions?.data === undefined) {
        queryOrderByFieldsChanged = !isEqual(oldConfig.orderOptions?.orderByFields, newConfig.orderOptions?.orderByFields);
    }
    // Extracting the queries and sorting them to compare them properly
    // Multiple fields are used in case of equal values.
    //
    // When the limit behavior is set to `RenderUpToTheLimit` or the config's `sortLabelsBy` is set to `originalValue`,
    // the `orderByFields` need to be included in the comparison. Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8120 and
    // https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8270 for detials.
    const oldQueries = sortBy$1(oldSeries.map((series) => series.query), ["where", "outStatistics[0].outStatisticFieldName", "outStatistics[0].onStatisticField"]);
    const newQueries = sortBy$1(newSeries.map((series) => series.query), ["where", "outStatistics[0].outStatisticFieldName", "outStatistics[0].onStatisticField"]);
    // Comparing each query. If the queries don't match or their order changed, an update is needed.
    dataUpdateNeeded = !isEqual(oldQueries, newQueries);
    return dataUpdateNeeded || queryOrderByFieldsChanged;
}
/**
 * Compares two arrays of series and indicates if the properties `x` or `y` changed.
 *
 * When comparing the y values, we ignore the order of the series in the config.
 * Regarding the `x`, only the first series is checked given they are similar among all the series.
 * @param oldSeries
 * @param newSeries
 */
function hasXOrYChanged(oldSeries, newSeries) {
    let xOrYChanged = false;
    if (newSeries[0].x !== oldSeries[0].x) {
        xOrYChanged = true;
    }
    else {
        const chartType = fl(oldSeries);
        if (chartType !== WebChartTypes.HistogramSeries && chartType !== WebChartTypes.GaugeSeries) {
            // we choose to ignore the order of the series in the config by sorting the arrays
            const oldYList = ds(oldSeries).sort();
            const newYList = ds(newSeries).sort();
            xOrYChanged = JSON.stringify(oldYList) !== JSON.stringify(newYList);
        }
    }
    return xOrYChanged;
}
function hasFilterBySelectionChanged(filterBySelection, options) {
    const filterBySelectionChanged = (filterBySelection ?? false) !== (options?.filterBySelection ?? false);
    return filterBySelectionChanged;
}
function hasDataForFilterBySelectionChanged(props) {
    const { currentSelectionOIDs, options } = props;
    let dataForFilterBySelectionChanged = false;
    if (options?.filterBySelection === true) {
        // In Layer mode we test only the OIDs
        // TODO: this is a workaround due to a bug with the selected items on a temporal chart that are not consistent
        // after a toggling the filter by selection feature
        dataForFilterBySelectionChanged = !isEqual(currentSelectionOIDs, options?.selectionData?.selectionOIDs);
    }
    return dataForFilterBySelectionChanged;
}
/**
 * Compares two config data filters and returns true if they are identical, false otherwise
 * @param oldConfig
 * @param newConfig
 */
function hasConfigFilterChanged(oldConfig, newConfig) {
    return JSON.stringify(oldConfig.dataFilters) !== JSON.stringify(newConfig.dataFilters);
}
/**
 * Compares the `binTemporalData` property from two configs and returns true if they are identical, false otherwise
 * @param oldConfig
 * @param newConfig
 */
function hasBinTemporalDataChanged(oldConfig, newConfig) {
    const chartType = fl(newConfig.series);
    return ((chartType === WebChartTypes.LineSeries ||
        chartType === WebChartTypes.BarSeries ||
        chartType === WebChartTypes.ComboLineAndBarSeries) &&
        (oldConfig.series[0].binTemporalData ?? ChartDefaults.binTemporalData) !==
            (newConfig.series[0].binTemporalData ?? ChartDefaults.binTemporalData));
}
/**
 * Compares the split by value for each series element in the box plot config and returns true if the series has different split by value between new and old box plot config, false otherwise.
 * @param oldSeries The former series config
 * @param newSeries The new series config
 */
function hasSplitByValueChanged(oldSeries, newSeries) {
    return (oldSeries?.length !== newSeries?.length ||
        oldSeries?.some((seriesConfig, index) => {
            const oldSplitByValue = Ql({
                where: seriesConfig?.query?.where,
            });
            const newSplitByValue = Ql({
                where: newSeries?.[index]?.query?.where,
            });
            return oldSplitByValue !== newSplitByValue;
        }));
}
/**
 * Verify if the order of the numeric fields has changed
 * @param oldSeries - The previous series config
 * @param newSeries - The new series config
 */
function hasNumericFieldsChanged(oldSeries, newSeries) {
    const oldYList = ds(oldSeries);
    const newYList = ds(newSeries);
    return JSON.stringify(oldYList) !== JSON.stringify(newYList);
}
/**
 * Compares the `showMean` from two configs and indicates whether they are different
 * @param oldConfig The former chart config
 * @param newConfig The new chart config
 */
function hasShowMeanChanged(oldConfig, newConfig) {
    return getShowMean(oldConfig) !== getShowMean(newConfig);
}
/**
 * Indicates whether a change of value format type requires new data. Two cases require it:
 * - change from date format to numeric format
 * - specific to non aggregated charts: change from category format to value format
 * @param oldConfig The former chart config
 * @param newConfig The new chart config
 */
function isNewDataRequiredForValueFormatChange(oldConfig, newConfig) {
    const oldValueFormatType = oldConfig.axes?.[0].valueFormat.type;
    const newValueFormatType = newConfig.axes?.[0].valueFormat.type;
    const chartSubType = ts(newConfig.series);
    const isNonAggregatedBarLineChart = chartSubType === ml.BarAndLineNoAggregation ||
        chartSubType === ml.BarAndLineSplitByNoAggregation;
    const formatChangedFromDateToNumber = oldValueFormatType === WebChartTypes.DateAxisFormat && newValueFormatType === WebChartTypes.NumberAxisFormat;
    const formatChangedFromNumberToDate = oldValueFormatType === WebChartTypes.NumberAxisFormat && newValueFormatType === WebChartTypes.DateAxisFormat;
    return (oldValueFormatType !== newValueFormatType &&
        (isNonAggregatedBarLineChart || formatChangedFromDateToNumber || formatChangedFromNumberToDate));
}
/**
 * Function saying if a data update is needed. We compare different properties from the former config and the new one
 * in order to decide if the update is needed.
 * @param props
 */
function isDataUpdateNeeded(props) {
    const { forceDataUpdate, oldConfig, newConfig, options, formerFilterBySelection, timeIntervalInfo, currentSelectionOIDs, } = props;
    const { series: newSeries } = newConfig;
    const { series: oldSeries } = oldConfig;
    const chartType = fl(newSeries);
    let dataUpdateNeeded = false;
    let commonPropertyChanged = false;
    let specificPropertyChanged = false;
    // Default values for all the details
    const updateNeededDetails = {
        common: {
            queryChanged: false,
            xOrYChanged: false,
            numberOfSeriesChanged: false,
            configFiltersChanged: false,
            filterBySelectionChanged: false,
            dataForFilterBySelectionChanged: false,
            binTemporalDataChanged: false,
            timeBinningChanged: false,
            timeIntervalUnitChanged: false,
            newTimeBinningWillBeCalculated: false,
            valueFormatChangeRequiresNewData: false,
        },
        histogram: {
            dataPropsChanged: false,
        },
        gauge: { valueConversionChanged: false },
        boxPlot: { showMeanChanged: false },
    };
    // Setting the properties common to all the charts
    updateNeededDetails.common.queryChanged = hasQueryChanged({
        oldConfig,
        newConfig,
        behaviorAfterLimit: options?.chartLimits?.behaviorAfterLimit,
    });
    updateNeededDetails.common.configFiltersChanged = hasConfigFilterChanged(oldConfig, newConfig);
    updateNeededDetails.common.xOrYChanged = hasXOrYChanged(oldSeries, newSeries);
    updateNeededDetails.common.filterBySelectionChanged = hasFilterBySelectionChanged(formerFilterBySelection, options);
    updateNeededDetails.common.dataForFilterBySelectionChanged = hasDataForFilterBySelectionChanged({
        currentSelectionOIDs,
        options,
    });
    updateNeededDetails.common.binTemporalDataChanged = hasBinTemporalDataChanged(oldConfig, newConfig);
    updateNeededDetails.common.valueFormatChangeRequiresNewData = isNewDataRequiredForValueFormatChange(oldConfig, newConfig);
    updateNeededDetails.common = {
        ...updateNeededDetails.common,
        ...hasTimeBinningChanged({
            oldSeries,
            newConfig,
            oldTimeIntervalInfo: timeIntervalInfo,
            setTimeBinningInfoWhenNotProvided: options?.setTimeBinningInfoWhenNotProvided,
        }),
    };
    // if at least 1 value is true
    commonPropertyChanged = Object.values(updateNeededDetails.common).some((value) => value);
    // Adding specific values for some type of series
    switch (chartType) {
        case WebChartTypes.HistogramSeries:
            updateNeededDetails.histogram.dataPropsChanged =
                hasBinCountChanged(oldSeries, newSeries) ||
                    hasTransformationTypeChanged(oldSeries, newSeries);
            break;
        case WebChartTypes.LineSeries:
        case WebChartTypes.BarSeries:
        case WebChartTypes.ComboLineAndBarSeries:
            updateNeededDetails.common.numberOfSeriesChanged = hasNumberOfSeriesChanged(oldSeries, newSeries);
            break;
        case WebChartTypes.BoxPlotSeries:
            updateNeededDetails.common.numberOfSeriesChanged = hasNumberOfSeriesChanged(oldSeries, newSeries);
            updateNeededDetails.boxPlot.showMeanChanged = hasShowMeanChanged(oldConfig, newConfig);
            break;
        case WebChartTypes.GaugeSeries:
            updateNeededDetails.gauge.valueConversionChanged = hasGaugeValueConversionChanged(oldConfig, newConfig);
            break;
    }
    // Updating dataUpdateNeeded
    if (updateNeededDetails.gauge.valueConversionChanged ||
        updateNeededDetails.histogram.dataPropsChanged ||
        updateNeededDetails.common.numberOfSeriesChanged ||
        updateNeededDetails.common.binTemporalDataChanged ||
        updateNeededDetails.boxPlot.showMeanChanged) {
        specificPropertyChanged = true;
    }
    // TODO: what we want is dataUpdateNeeded to be true on a pie using a group slice while the sort changed
    dataUpdateNeeded = forceDataUpdate === true || commonPropertyChanged || specificPropertyChanged;
    return { dataUpdateNeeded, updateNeededDetails };
}
/**
 * Function used on line charts using time binning.
 * Indicates whether resetting the previously fetched binned data is necessary.
 * It is necessary when the time interval unit or any common data property changes.
 * @param dataUpdateNeededDetails
 */
function isBinnedServerDataResetNeeded(dataUpdateNeededDetails) {
    const resetNeeded = dataUpdateNeededDetails.common.timeIntervalUnitChanged ||
        dataUpdateNeededDetails.common.newTimeBinningWillBeCalculated ||
        dataUpdateNeededDetails.common.dataForFilterBySelectionChanged ||
        dataUpdateNeededDetails.common.filterBySelectionChanged ||
        dataUpdateNeededDetails.common.configFiltersChanged ||
        dataUpdateNeededDetails.common.numberOfSeriesChanged ||
        dataUpdateNeededDetails.common.queryChanged ||
        dataUpdateNeededDetails.common.xOrYChanged;
    return resetNeeded;
}
/**
 * Check if the Pie chart data has slices with all positive or all negative values.
 *
 * Note: Pie with the following character is supported:
 * - no slice with positive and no slice with negative values
 * - the slices can have 0, null, or undefined values
 *
 * @param data the data to check for positive and negative values
 * @param fieldToCheckForValue to field containing the values
 */
function checkForSupportedPieChart(data, fieldToCheckForValue) {
    let isSupportedPie = true;
    if (data !== undefined && data.length > 1 && !Ol(fieldToCheckForValue)) {
        let positiveDataValueCount = 0;
        let negativeDataValueCount = 0;
        let otherDataValue = 0;
        data.forEach((item) => {
            const itemValue = item[fieldToCheckForValue];
            if (!Ml(itemValue) || itemValue === 0) {
                otherDataValue += 1;
            }
            else if (itemValue > 0) {
                positiveDataValueCount += 1;
            }
            else {
                negativeDataValueCount += 1;
            }
        });
        isSupportedPie =
            otherDataValue === data.length ||
                (positiveDataValueCount >= 0 && negativeDataValueCount === 0) ||
                (positiveDataValueCount === 0 && negativeDataValueCount >= 0);
    }
    return isSupportedPie;
}
/**
 * Calculates the limit for a given chart, considering a limit on the number of series and a limit
 * on the total number of elements on the chart.
 * For instance:
 * - if count total is 1,000, count per series is 100 and there are 5 series, the limit is 500
 * - if count total is 1,000, count per series is 100 and there are 20 series, the limit is 1,000
 * @param props.countTotal The number max of elements for the whole chart
 * @param props.countPerSeries The number max of elements per series
 * @param props.numberOfSeries The number of series
 * @returns
 */
function getMultiSeriesLimit(props) {
    const { countTotal, countPerSeries, numberOfSeries } = props;
    let limit;
    const values = [];
    if (typeof countTotal === "number" && Number.isFinite(countTotal)) {
        values.push(countTotal);
    }
    if (typeof countPerSeries === "number" && Number.isFinite(countPerSeries)) {
        values.push(countPerSeries * numberOfSeries);
    }
    // picking the more restrictive limit
    if (values.length > 0) {
        limit = Math.min(...values);
    }
    return limit;
}
/**
 * Calculates the maximum number of features to fetch according to the runtime chart options 'chartLimits'.
 * For instance:
 * - on a pie chart, the limit is the maximum number of slices (`maxPieChartSliceCountTotal`)
 * - on a bar or line chart, the limits vary depending on number of series. Maximum number of series count is (`maxBarChartSeriesCount`) and (`maxLineChartSeriesCount`)
 * @param chartConfig The chart's config
 * @param chartLimits The runtime chart limits
 */
function getMaximumNumberOfFeaturesToFetch(chartConfig, chartLimits) {
    let numberOfFeatures;
    const { maxBarChartSeriesCount, maxBarUniqueSeriesCountTotal, maxBarTwoSeriesCountPerSeries, maxBarTwoSeriesCountTotal, maxBarThreePlusSeriesCountPerSeries, maxBarThreePlusSeriesCountTotal, maxLineChartSeriesCount, maxLineUniqueSeriesCountTotal, maxLineTwoSeriesCountPerSeries, maxLineTwoSeriesCountTotal, maxLineThreePlusSeriesCountPerSeries, maxLineThreePlusSeriesCountTotal, maxPieChartSliceCountTotal, maxGaugeByFeaturesLimit, } = Zo(chartLimits);
    const chartType = fl(chartConfig.series);
    const numberOfSeries = chartConfig.series.length === 0 ? 1 : chartConfig.series.length;
    const chartSubType = ts(chartConfig.series);
    // We calculate a first limit per type of chart
    switch (chartType) {
        case WebChartTypes.ComboLineAndBarSeries:
        case WebChartTypes.BarSeries:
            if (numberOfSeries <= maxBarChartSeriesCount) {
                if (numberOfSeries === 1) {
                    numberOfFeatures = maxBarUniqueSeriesCountTotal;
                }
                else if (numberOfSeries === 2) {
                    numberOfFeatures = getMultiSeriesLimit({
                        countTotal: maxBarTwoSeriesCountTotal,
                        countPerSeries: maxBarTwoSeriesCountPerSeries,
                        numberOfSeries,
                    });
                }
                else if (numberOfSeries > 2) {
                    numberOfFeatures = getMultiSeriesLimit({
                        countTotal: maxBarThreePlusSeriesCountTotal,
                        countPerSeries: maxBarThreePlusSeriesCountPerSeries,
                        numberOfSeries,
                    });
                }
            }
            break;
        case WebChartTypes.LineSeries:
            if (numberOfSeries <= maxLineChartSeriesCount) {
                if (numberOfSeries === 1) {
                    numberOfFeatures = maxLineUniqueSeriesCountTotal;
                }
                else if (numberOfSeries === 2) {
                    numberOfFeatures = getMultiSeriesLimit({
                        countTotal: maxLineTwoSeriesCountTotal,
                        countPerSeries: maxLineTwoSeriesCountPerSeries,
                        numberOfSeries,
                    });
                }
                else if (numberOfSeries > 2) {
                    numberOfFeatures = getMultiSeriesLimit({
                        countTotal: maxLineThreePlusSeriesCountTotal,
                        countPerSeries: maxLineThreePlusSeriesCountPerSeries,
                        numberOfSeries,
                    });
                }
            }
            break;
        case WebChartTypes.PieSeries:
            numberOfFeatures = maxPieChartSliceCountTotal;
            break;
        case WebChartTypes.GaugeSeries:
            // statisticGauge will always be under the limit.
            numberOfFeatures = maxGaugeByFeaturesLimit;
            break;
    }
    // On a bar/line chart with no aggregation or using multiple numeric fields, each feature from the query contains the data for all the series
    // For instance if the chart has 5 series and 100 categories, there will be a maximum of 100 features for 500 bars/markers on the chart.
    // So if the user wants to limit the number of bars to 200, we need to set the limit to 200/50 = 40 (which will result in 200 bars/markers)
    if ((chartSubType === ml.BarAndLineNoAggregation || chartSubType === ml.BarAndLineMultiFields) &&
        numberOfFeatures !== undefined) {
        numberOfFeatures = Math.ceil(numberOfFeatures / numberOfSeries);
    }
    return numberOfFeatures;
}
/**
 * Apply a conversion (from a factor and an offset) to a numeric value.
 * The factor is applied first and then the offset (when both are provided).
 * @param value The value to convert
 * @param valueConversion The information regarding the conversion to apply
 * @returns The converted value, or the original value if the `valueConversion` is undefined or invalid
 */
function applyValueConversion(value, valueConversion) {
    let convertedValue = value;
    if (Number.isFinite(value)) {
        const { factor, offset } = valueConversion ?? {};
        // applying first the factor
        if (Number.isFinite(factor)) {
            convertedValue *= factor;
        }
        // then applying the offset
        if (Number.isFinite(offset)) {
            convertedValue += offset;
        }
    }
    return convertedValue;
}
/**
 * Check if an input string represents a percentage value; meaning a string that:
 * - only contains digits (dot for decimal included), and
 * - has % symbol at the end (for LTR) or at the beginning (for RTL)
 * - the value falls between 0 - 100
 * @param inputValue input string
 */
function isValidPercentValue(inputValue) {
    let isValid = false;
    if (inputValue !== undefined) {
        const sanitizedValue = inputValue.replace(" ", "");
        const rtlRegex = /^%(0*100{1,1}\.?((?:\.)0*)?$)|(^%0*\d{0,2}\.?((?:\.)\d*)?)$/u;
        const ltrRegex = /^(0*100{1,1}\.?((?:\.)0*)?%$)|(^0*\d{0,2}\.?((?:\.)\d*)?%)$/u;
        isValid = rtlRegex.test(sanitizedValue) || ltrRegex.test(sanitizedValue);
    }
    return isValid;
}
/**
 * Extract the value from the input string, without the %; valid percent value is between 0 - 100
 * it's safe that we extract upto 3 digits and not worry about having an invalid number like 100.5
 * @param inputValue input string
 * @returns
 */
function extractPercentValue(inputValue) {
    let value;
    if (isValidPercentValue(inputValue)) {
        const rtlRegex = /%(\d{1,3}(.\d+)?)$/u;
        const ltrRegex = /(\d{1,3}(.\d+)?)%$/u;
        const sanitizedValue = inputValue.replace(" ", "");
        const percent = rtlRegex.exec(sanitizedValue)?.[1] ?? ltrRegex.exec(sanitizedValue)?.[1];
        if (percent !== undefined) {
            value = Number(percent);
        }
    }
    return value;
}

class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}

function intern_get({_intern, _key}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}

function intern_delete({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

function identity(x) {
  return x;
}

function rollup(values, reduce, ...keys) {
  return nest(values, identity, reduce, keys);
}

function nest(values, map, reduce, keys) {
  return (function regroup(values, i) {
    if (i >= keys.length) return reduce(values);
    const groups = new InternMap();
    const keyof = keys[i++];
    let index = -1;
    for (const value of values) {
      const key = keyof(value, ++index, values);
      const group = groups.get(key);
      if (group) group.push(value);
      else groups.set(key, [value]);
    }
    for (const [key, values] of groups) {
      groups.set(key, regroup(values, i));
    }
    return map(groups);
  })(values, 0);
}

function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}

function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}

function mean(values, valueof) {
  let count = 0;
  let sum = 0;
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  }
  if (count) return sum / count;
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

function sum(values, valueof) {
  let sum = 0;
  if (valueof === undefined) {
    for (let value of values) {
      if (value = +value) {
        sum += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        sum += value;
      }
    }
  }
  return sum;
}

// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
class LuxonError extends Error {}

/**
 * @private
 */
class InvalidDateTimeError extends LuxonError {
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class InvalidIntervalError extends LuxonError {
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class InvalidDurationError extends LuxonError {
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
}

/**
 * @private
 */
class ConflictingSpecificationError extends LuxonError {}

/**
 * @private
 */
class InvalidUnitError extends LuxonError {
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
}

/**
 * @private
 */
class InvalidArgumentError extends LuxonError {}

/**
 * @private
 */
class ZoneIsAbstractError extends LuxonError {
  constructor() {
    super("Zone is an abstract class");
  }
}

/**
 * @private
 */

const n = "numeric",
  s = "short",
  l = "long";

const DATE_SHORT = {
  year: n,
  month: n,
  day: n,
};

const DATE_MED = {
  year: n,
  month: s,
  day: n,
};

const DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
};

const DATE_FULL = {
  year: n,
  month: l,
  day: n,
};

const DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
};

const TIME_SIMPLE = {
  hour: n,
  minute: n,
};

const TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
};

const TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s,
};

const TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l,
};

const TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23",
};

const TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
};

const TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s,
};

const TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l,
};

const DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
};

const DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n,
};

const DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
};

const DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n,
};

const DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n,
};

const DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s,
};

const DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s,
};

const DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l,
};

const DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l,
};

/**
 * @interface
 */
class Zone {
  /**
   * The type of zone
   * @abstract
   * @type {string}
   */
  get type() {
    throw new ZoneIsAbstractError();
  }

  /**
   * The name of this zone.
   * @abstract
   * @type {string}
   */
  get name() {
    throw new ZoneIsAbstractError();
  }

  /**
   * The IANA name of this zone.
   * Defaults to `name` if not overwritten by a subclass.
   * @abstract
   * @type {string}
   */
  get ianaName() {
    return this.name;
  }

  /**
   * Returns whether the offset is known to be fixed for the whole year.
   * @abstract
   * @type {boolean}
   */
  get isUniversal() {
    throw new ZoneIsAbstractError();
  }

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  offset(ts) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    throw new ZoneIsAbstractError();
  }

  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  get isValid() {
    throw new ZoneIsAbstractError();
  }
}

let singleton$1 = null;

/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */
class SystemZone extends Zone {
  /**
   * Get a singleton instance of the local zone
   * @return {SystemZone}
   */
  static get instance() {
    if (singleton$1 === null) {
      singleton$1 = new SystemZone();
    }
    return singleton$1;
  }

  /** @override **/
  get type() {
    return "system";
  }

  /** @override **/
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }

  /** @override **/
  get isUniversal() {
    return false;
  }

  /** @override **/
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale);
  }

  /** @override **/
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /** @override **/
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }

  /** @override **/
  equals(otherZone) {
    return otherZone.type === "system";
  }

  /** @override **/
  get isValid() {
    return true;
  }
}

let dtfCache = {};
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short",
    });
  }
  return dtfCache[zone];
}

const typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6,
};

function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""),
    parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type, value } = formatted[i];
    const pos = typeToPos[type];

    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}

let ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */
class IANAZone extends Zone {
  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  static create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }
    return ianaZoneCache[name];
  }

  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }

  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
   * @return {boolean}
   */
  static isValidSpecifier(s) {
    return this.isValidZone(s);
  }

  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  static isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
      return true;
    } catch (e) {
      return false;
    }
  }

  constructor(name) {
    super();
    /** @private **/
    this.zoneName = name;
    /** @private **/
    this.valid = IANAZone.isValidZone(name);
  }

  /**
   * The type of zone. `iana` for all instances of `IANAZone`.
   * @override
   * @type {string}
   */
  get type() {
    return "iana";
  }

  /**
   * The name of this zone (i.e. the IANA zone name).
   * @override
   * @type {string}
   */
  get name() {
    return this.zoneName;
  }

  /**
   * Returns whether the offset is known to be fixed for the whole year:
   * Always returns false for all IANA zones.
   * @override
   * @type {boolean}
   */
  get isUniversal() {
    return false;
  }

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale, this.name);
  }

  /**
   * Returns the offset's value as a string
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }

  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @override
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  offset(ts) {
    const date = new Date(ts);

    if (isNaN(date)) return NaN;

    const dtf = makeDTF(this.name);
    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
      ? partsOffset(dtf, date)
      : hackyOffset(dtf, date);

    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }

    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
    const adjustedHour = hour === 24 ? 0 : hour;

    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0,
    });

    let asTS = +date;
    const over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }

  /**
   * Return whether this Zone is equal to another zone
   * @override
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }

  /**
   * Return whether this Zone is valid.
   * @override
   * @type {boolean}
   */
  get isValid() {
    return this.valid;
  }
}

// todo - remap caching

let intlLFCache = {};
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}

let intlDTCache = {};
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}

let intlNumCache = {};
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([locString, opts]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}

let intlRelCache = {};
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
  const key = JSON.stringify([locString, cacheKeyOpts]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}

let sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}

let weekInfoCache = {};
function getCachedWeekInfo(locString) {
  let data = weekInfoCache[locString];
  if (!data) {
    const locale = new Intl.Locale(locString);
    // browsers currently implement this as a property, but spec says it should be a getter function
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data;
  }
  return data;
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:

  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u

  // private subtags and unicode subtags have ordering requirements,
  // and we're not properly parsing this, so just strip out the
  // private ones if they exist.
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }

  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [localeStr];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }

    const { numberingSystem, calendar } = options;
    return [selectedStr, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }

    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }

    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}

function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}

function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}

function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return (
      loc.numberingSystem === "latn" ||
      !loc.locale ||
      loc.locale.startsWith("en") ||
      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
    );
  }
}

/**
 * @private
 */

class PolyNumberFormatter {
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    const { padTo, floor, ...otherOpts } = opts;

    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = { useGrouping: false, ...opts };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
}

/**
 * @private
 */

class PolyDateFormatter {
  constructor(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = undefined;

    let z = undefined;
    if (this.opts.timeZone) {
      // Don't apply any workarounds if a timeZone is explicitly provided in opts
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
      // That is why fixed-offset TZ is set to that unless it is:
      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
      // 2. Unsupported by the browser:
      //    - some do not support Etc/
      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
        // we manually apply the offset and substitute the zone as needed.
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      // Custom zones can have any offset / offsetName so we just manually
      // apply the offset and substitute the zone as needed.
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
      this.originalZone = dt.zone;
    }

    const intlOpts = { ...this.opts };
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }

  format() {
    if (this.originalZone) {
      // If we have to substitute in the actual zone name, we have to use
      // formatToParts so that the timezone can be replaced.
      return this.formatToParts()
        .map(({ value }) => value)
        .join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  }

  formatToParts() {
    const parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map((part) => {
        if (part.type === "timeZoneName") {
          const offsetName = this.originalZone.offsetName(this.dt.ts, {
            locale: this.dt.locale,
            format: this.opts.timeZoneName,
          });
          return {
            ...part,
            value: offsetName,
          };
        } else {
          return part;
        }
      });
    }
    return parts;
  }

  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
}

/**
 * @private
 */
class PolyRelFormatter {
  constructor(intl, isEnglish, opts) {
    this.opts = { style: "long", ...opts };
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }

  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
}

const fallbackWeekSettings = {
  firstDay: 1,
  minimalDays: 4,
  weekend: [6, 7],
};

/**
 * @private
 */

class Locale {
  static fromOpts(opts) {
    return Locale.create(
      opts.locale,
      opts.numberingSystem,
      opts.outputCalendar,
      opts.weekSettings,
      opts.defaultToEN
    );
  }

  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
  }

  static resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  }

  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
  }

  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.weekSettings = weekSettings;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

    this.weekdaysCache = { format: {}, standalone: {} };
    this.monthsCache = { format: {}, standalone: {} };
    this.meridiemCache = null;
    this.eraCache = {};

    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }

    return this.fastNumbersCached;
  }

  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness =
      (this.numberingSystem === null || this.numberingSystem === "latn") &&
      (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }

  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(
        alts.locale || this.specifiedLocale,
        alts.numberingSystem || this.numberingSystem,
        alts.outputCalendar || this.outputCalendar,
        validateWeekSettings(alts.weekSettings) || this.weekSettings,
        alts.defaultToEN || false
      );
    }
  }

  redefaultToEN(alts = {}) {
    return this.clone({ ...alts, defaultToEN: true });
  }

  redefaultToSystem(alts = {}) {
    return this.clone({ ...alts, defaultToEN: false });
  }

  months(length, format = false) {
    return listStuff(this, length, months, () => {
      const intl = format ? { month: length, day: "numeric" } : { month: length },
        formatStr = format ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length]) {
        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length];
    });
  }

  weekdays(length, format = false) {
    return listStuff(this, length, weekdays, () => {
      const intl = format
          ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
          : { weekday: length },
        formatStr = format ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length]) {
        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
          this.extract(dt, intl, "weekday")
        );
      }
      return this.weekdaysCache[formatStr][length];
    });
  }

  meridiems() {
    return listStuff(
      this,
      undefined,
      () => meridiems,
      () => {
        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
        // for AM and PM. This is probably wrong, but it's makes parsing way easier.
        if (!this.meridiemCache) {
          const intl = { hour: "numeric", hourCycle: "h12" };
          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
            (dt) => this.extract(dt, intl, "dayperiod")
          );
        }

        return this.meridiemCache;
      }
    );
  }

  eras(length) {
    return listStuff(this, length, eras, () => {
      const intl = { era: length };

      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.
      if (!this.eraCache[length]) {
        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
          this.extract(dt, intl, "era")
        );
      }

      return this.eraCache[length];
    });
  }

  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts),
      results = df.formatToParts(),
      matching = results.find((m) => m.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }

  numberFormatter(opts = {}) {
    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }

  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }

  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }

  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }

  isEnglish() {
    return (
      this.locale === "en" ||
      this.locale.toLowerCase() === "en-us" ||
      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
    );
  }

  getWeekSettings() {
    if (this.weekSettings) {
      return this.weekSettings;
    } else if (!hasLocaleWeekInfo()) {
      return fallbackWeekSettings;
    } else {
      return getCachedWeekInfo(this.locale);
    }
  }

  getStartOfWeek() {
    return this.getWeekSettings().firstDay;
  }

  getMinDaysInFirstWeek() {
    return this.getWeekSettings().minimalDays;
  }

  getWeekendDays() {
    return this.getWeekSettings().weekend;
  }

  equals(other) {
    return (
      this.locale === other.locale &&
      this.numberingSystem === other.numberingSystem &&
      this.outputCalendar === other.outputCalendar
    );
  }

  toString() {
    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
  }
}

let singleton = null;

/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */
class FixedOffsetZone extends Zone {
  /**
   * Get a singleton instance of UTC
   * @return {FixedOffsetZone}
   */
  static get utcInstance() {
    if (singleton === null) {
      singleton = new FixedOffsetZone(0);
    }
    return singleton;
  }

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  static instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }

  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  static parseSpecifier(s) {
    if (s) {
      const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  }

  constructor(offset) {
    super();
    /** @private **/
    this.fixed = offset;
  }

  /**
   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
   * @override
   * @type {string}
   */
  get type() {
    return "fixed";
  }

  /**
   * The name of this zone.
   * All fixed zones' names always start with "UTC" (plus optional offset)
   * @override
   * @type {string}
   */
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }

  /**
   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
   *
   * @override
   * @type {string}
   */
  get ianaName() {
    if (this.fixed === 0) {
      return "Etc/UTC";
    } else {
      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
    }
  }

  /**
   * Returns the offset's common name at the specified timestamp.
   *
   * For fixed offset zones this equals to the zone name.
   * @override
   */
  offsetName() {
    return this.name;
  }

  /**
   * Returns the offset's value as a string
   * @override
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  formatOffset(ts, format) {
    return formatOffset(this.fixed, format);
  }

  /**
   * Returns whether the offset is known to be fixed for the whole year:
   * Always returns true for all fixed offset zones.
   * @override
   * @type {boolean}
   */
  get isUniversal() {
    return true;
  }

  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   *
   * For fixed offset zones, this is constant and does not depend on a timestamp.
   * @override
   * @return {number}
   */
  offset() {
    return this.fixed;
  }

  /**
   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
   * @override
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }

  /**
   * Return whether this Zone is valid:
   * All fixed offset zones are valid.
   * @override
   * @type {boolean}
   */
  get isValid() {
    return true;
  }
}

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */
class InvalidZone extends Zone {
  constructor(zoneName) {
    super();
    /**  @private */
    this.zoneName = zoneName;
  }

  /** @override **/
  get type() {
    return "invalid";
  }

  /** @override **/
  get name() {
    return this.zoneName;
  }

  /** @override **/
  get isUniversal() {
    return false;
  }

  /** @override **/
  offsetName() {
    return null;
  }

  /** @override **/
  formatOffset() {
    return "";
  }

  /** @override **/
  offset() {
    return NaN;
  }

  /** @override **/
  equals() {
    return false;
  }

  /** @override **/
  get isValid() {
    return false;
  }
}

/**
 * @private
 */

function normalizeZone(input, defaultZone) {
  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default") return defaultZone;
    else if (lowered === "local" || lowered === "system") return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

const numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d",
};

const numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881],
};

const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}

// cache of {numberingSystem: {append: regex}}
let digitRegexCache = {};
function resetDigitRegexCache() {
  digitRegexCache = {};
}

function digitRegex({ numberingSystem }, append = "") {
  const ns = numberingSystem || "latn";

  if (!digitRegexCache[ns]) {
    digitRegexCache[ns] = {};
  }
  if (!digitRegexCache[ns][append]) {
    digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);
  }

  return digitRegexCache[ns][append];
}

let now = () => Date.now(),
  defaultZone = "system",
  defaultLocale = null,
  defaultNumberingSystem = null,
  defaultOutputCalendar = null,
  twoDigitCutoffYear = 60,
  throwOnInvalid,
  defaultWeekSettings = null;

/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */
class Settings {
  /**
   * Get the callback for returning the current timestamp.
   * @type {function}
   */
  static get now() {
    return now;
  }

  /**
   * Set the callback for returning the current timestamp.
   * The function should return a number, which will be interpreted as an Epoch millisecond count
   * @type {function}
   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
   */
  static set now(n) {
    now = n;
  }

  /**
   * Set the default time zone to create DateTimes in. Does not affect existing instances.
   * Use the value "system" to reset this value to the system's time zone.
   * @type {string}
   */
  static set defaultZone(zone) {
    defaultZone = zone;
  }

  /**
   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
   * The default value is the system's time zone (the one set on the machine that runs this code).
   * @type {Zone}
   */
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }

  /**
   * Get the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultLocale() {
    return defaultLocale;
  }

  /**
   * Set the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultLocale(locale) {
    defaultLocale = locale;
  }

  /**
   * Get the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }

  /**
   * Set the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }

  /**
   * Get the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }

  /**
   * Set the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }

  /**
   * @typedef {Object} WeekSettings
   * @property {number} firstDay
   * @property {number} minimalDays
   * @property {number[]} weekend
   */

  /**
   * @return {WeekSettings|null}
   */
  static get defaultWeekSettings() {
    return defaultWeekSettings;
  }

  /**
   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
   * how many days are required in the first week of a year.
   * Does not affect existing instances.
   *
   * @param {WeekSettings|null} weekSettings
   */
  static set defaultWeekSettings(weekSettings) {
    defaultWeekSettings = validateWeekSettings(weekSettings);
  }

  /**
   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
   * @type {number}
   */
  static get twoDigitCutoffYear() {
    return twoDigitCutoffYear;
  }

  /**
   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
   * @type {number}
   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
   */
  static set twoDigitCutoffYear(cutoffYear) {
    twoDigitCutoffYear = cutoffYear % 100;
  }

  /**
   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static get throwOnInvalid() {
    return throwOnInvalid;
  }

  /**
   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */
  static set throwOnInvalid(t) {
    throwOnInvalid = t;
  }

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
    DateTime.resetCache();
    resetDigitRegexCache();
  }
}

class Invalid {
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
}

const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid(
    "unit out of range",
    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
  );
}

function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));

  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  const js = d.getUTCDay();

  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
    month0 = table.findIndex((i) => i < ordinal),
    day = ordinal - table[month0];
  return { month: month0 + 1, day };
}

function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return ((isoWeekday - startOfWeek + 7) % 7) + 1;
}

/**
 * @private
 */

function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj,
    ordinal = computeOrdinal(year, month, day),
    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);

  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),
    weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
}

function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData,
    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),
    yearInDays = daysInYear(weekYear);

  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,
    year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(weekData) };
}

function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return { year, ordinal, ...timeObject(gregData) };
}

function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return { year, month, day, ...timeObject(ordinalData) };
}

/**
 * Check if local week units like localWeekday are used in obj.
 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
 * Modifies obj in-place!
 * @param obj the object values
 */
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData =
    !isUndefined(obj.localWeekday) ||
    !isUndefined(obj.localWeekNumber) ||
    !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData =
      !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);

    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError(
        "Cannot mix locale-based week fields with ISO-based week fields"
      );
    }
    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek(),
    };
  } else {
    return { minDaysInFirstWeek: 4, startOfWeek: 1 };
  }
}

function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear),
    validWeek = integerBetween(
      obj.weekNumber,
      1,
      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
    ),
    validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}

function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year),
    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}

function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year),
    validMonth = integerBetween(obj.month, 1, 12),
    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}

function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour =
      integerBetween(hour, 0, 23) ||
      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
    validMinute = integerBetween(minute, 0, 59),
    validSecond = integerBetween(second, 0, 59),
    validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/

/**
 * @private
 */

// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}

function isNumber(o) {
  return typeof o === "number";
}

function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}

function isString(o) {
  return typeof o === "string";
}

function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}

// CAPABILITIES

function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}

function hasLocaleWeekInfo() {
  try {
    return (
      typeof Intl !== "undefined" &&
      !!Intl.Locale &&
      ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype)
    );
  } catch (e) {
    return false;
  }
}

// OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}

function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }
  return arr.reduce((best, next) => {
    const pair = [by(next), next];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}

function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (
      !integerBetween(settings.firstDay, 1, 7) ||
      !integerBetween(settings.minimalDays, 1, 7) ||
      !Array.isArray(settings.weekend) ||
      settings.weekend.some((v) => !integerBetween(v, 1, 7))
    ) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend),
    };
  }
}

// NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}

// x % n but takes the sign of n instead of x
function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}

function padStart(input, n = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n, "0");
  } else {
    padded = ("" + input).padStart(n, "0");
  }
  return padded;
}

function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}

function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseFloat(string);
  }
}

function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    const f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}

function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits,
    rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}

// DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}

function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1,
    modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
}

// convert a calendar object to a local timestamp (epoch, but with the offset baked in)
function objToLocalTS(obj) {
  let d = Date.UTC(
    obj.year,
    obj.month - 1,
    obj.day,
    obj.hour,
    obj.minute,
    obj.second,
    obj.millisecond
  );

  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
    // so if obj.year is in 99, but obj.day makes it roll over into year 100,
    // the calculations done by Date.UTC are using year 2000 - which is incorrect
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}

// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}

function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}

function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
}

// PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts),
    intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  const modified = { timeZoneName: offsetFormat, ...intlOpts };

  const parsed = new Intl.DateTimeFormat(locale, modified)
    .formatToParts(date)
    .find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}

// signedOffset('-5', '30') -> -330
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);

  // don't || this because we want to preserve -0
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  const offMin = parseInt(offMinuteStr, 10) || 0,
    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}

// COERCION

function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
    throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}

function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}

/**
 * Returns the offset's value as a string
 * @param {number} ts - Epoch milliseconds for which to get the offset
 * @param {string} format - What style of offset to return.
 *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
 * @return {string}
 */
function formatOffset(offset, format) {
  const hours = Math.trunc(Math.abs(offset / 60)),
    minutes = Math.trunc(Math.abs(offset % 60)),
    sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format} is out of range for property format`);
  }
}

function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}

/**
 * @private
 */

const monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

function months(length) {
  switch (length) {
    case "narrow":
      return [...monthsNarrow];
    case "short":
      return [...monthsShort];
    case "long":
      return [...monthsLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    default:
      return null;
  }
}

const weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];

const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

function weekdays(length) {
  switch (length) {
    case "narrow":
      return [...weekdaysNarrow];
    case "short":
      return [...weekdaysShort];
    case "long":
      return [...weekdaysLong];
    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];
    default:
      return null;
  }
}

const meridiems = ["AM", "PM"];

const erasLong = ["Before Christ", "Anno Domini"];

const erasShort = ["BC", "AD"];

const erasNarrow = ["B", "A"];

function eras(length) {
  switch (length) {
    case "narrow":
      return [...erasNarrow];
    case "short":
      return [...erasShort];
    case "long":
      return [...erasLong];
    default:
      return null;
  }
}

function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}

function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}

function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}

function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}

function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."],
  };

  const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
    }
  }

  const isInPast = Object.is(count, -0) || count < 0,
    fmtValue = Math.abs(count),
    singular = fmtValue === 1,
    lilUnits = units[unit],
    fmtUnit = narrow
      ? singular
        ? lilUnits[1]
        : lilUnits[2] || lilUnits[1]
      : singular
      ? units[unit][0]
      : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}

function stringifyTokens(splits, tokenToString) {
  let s = "";
  for (const token of splits) {
    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }
  return s;
}

const macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS,
};

/**
 * @private
 */

class Formatter {
  static create(locale, opts = {}) {
    return new Formatter(locale, opts);
  }

  static parseFormat(fmt) {
    // white-space is always considered a literal in user-provided formats
    // the " " token has a special meaning (see unitForToken)

    let current = null,
      currentFull = "",
      bracketed = false;
    const splits = [];
    for (let i = 0; i < fmt.length; i++) {
      const c = fmt.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
        }
        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
    }

    return splits;
  }

  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }

  constructor(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
    return df.format();
  }

  dtFormatter(dt, opts = {}) {
    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });
  }

  formatDateTime(dt, opts) {
    return this.dtFormatter(dt, opts).format();
  }

  formatDateTimeParts(dt, opts) {
    return this.dtFormatter(dt, opts).formatToParts();
  }

  formatInterval(interval, opts) {
    const df = this.dtFormatter(interval.start, opts);
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  }

  resolvedOptions(dt, opts) {
    return this.dtFormatter(dt, opts).resolvedOptions();
  }

  num(n, p = 0) {
    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    const opts = { ...this.opts };

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  }

  formatDateTimeFromString(dt, fmt) {
    const knownEnglish = this.loc.listingMode() === "en",
      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
      string = (opts, extract) => this.loc.extract(dt, opts, extract),
      formatOffset = (opts) => {
        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
          return "Z";
        }

        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
      },
      meridiem = () =>
        knownEnglish
          ? meridiemForDateTime(dt)
          : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
      month = (length, standalone) =>
        knownEnglish
          ? monthForDateTime(dt, length)
          : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
      weekday = (length, standalone) =>
        knownEnglish
          ? weekdayForDateTime(dt, length)
          : string(
              standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
              "weekday"
            ),
      maybeMacro = (token) => {
        const formatOpts = Formatter.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return this.formatWithSystemDefault(dt, formatOpts);
        } else {
          return token;
        }
      },
      era = (length) =>
        knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
      tokenToString = (token) => {
        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
        switch (token) {
          // ms
          case "S":
            return this.num(dt.millisecond);
          case "u":
          // falls through
          case "SSS":
            return this.num(dt.millisecond, 3);
          // seconds
          case "s":
            return this.num(dt.second);
          case "ss":
            return this.num(dt.second, 2);
          // fractional seconds
          case "uu":
            return this.num(Math.floor(dt.millisecond / 10), 2);
          case "uuu":
            return this.num(Math.floor(dt.millisecond / 100));
          // minutes
          case "m":
            return this.num(dt.minute);
          case "mm":
            return this.num(dt.minute, 2);
          // hours
          case "h":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
          case "hh":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
          case "H":
            return this.num(dt.hour);
          case "HH":
            return this.num(dt.hour, 2);
          // offset
          case "Z":
            // like +6
            return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
          case "ZZ":
            // like +06:00
            return formatOffset({ format: "short", allowZ: this.opts.allowZ });
          case "ZZZ":
            // like +0600
            return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
          case "ZZZZ":
            // like EST
            return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
          case "ZZZZZ":
            // like Eastern Standard Time
            return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
          // zone
          case "z":
            // like America/New_York
            return dt.zoneName;
          // meridiems
          case "a":
            return meridiem();
          // dates
          case "d":
            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
          case "dd":
            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
          // weekdays - standalone
          case "c":
            // like 1
            return this.num(dt.weekday);
          case "ccc":
            // like 'Tues'
            return weekday("short", true);
          case "cccc":
            // like 'Tuesday'
            return weekday("long", true);
          case "ccccc":
            // like 'T'
            return weekday("narrow", true);
          // weekdays - format
          case "E":
            // like 1
            return this.num(dt.weekday);
          case "EEE":
            // like 'Tues'
            return weekday("short", false);
          case "EEEE":
            // like 'Tuesday'
            return weekday("long", false);
          case "EEEEE":
            // like 'T'
            return weekday("narrow", false);
          // months - standalone
          case "L":
            // like 1
            return useDateTimeFormatter
              ? string({ month: "numeric", day: "numeric" }, "month")
              : this.num(dt.month);
          case "LL":
            // like 01, doesn't seem to work
            return useDateTimeFormatter
              ? string({ month: "2-digit", day: "numeric" }, "month")
              : this.num(dt.month, 2);
          case "LLL":
            // like Jan
            return month("short", true);
          case "LLLL":
            // like January
            return month("long", true);
          case "LLLLL":
            // like J
            return month("narrow", true);
          // months - format
          case "M":
            // like 1
            return useDateTimeFormatter
              ? string({ month: "numeric" }, "month")
              : this.num(dt.month);
          case "MM":
            // like 01
            return useDateTimeFormatter
              ? string({ month: "2-digit" }, "month")
              : this.num(dt.month, 2);
          case "MMM":
            // like Jan
            return month("short", false);
          case "MMMM":
            // like January
            return month("long", false);
          case "MMMMM":
            // like J
            return month("narrow", false);
          // years
          case "y":
            // like 2014
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
          case "yy":
            // like 14
            return useDateTimeFormatter
              ? string({ year: "2-digit" }, "year")
              : this.num(dt.year.toString().slice(-2), 2);
          case "yyyy":
            // like 0012
            return useDateTimeFormatter
              ? string({ year: "numeric" }, "year")
              : this.num(dt.year, 4);
          case "yyyyyy":
            // like 000012
            return useDateTimeFormatter
              ? string({ year: "numeric" }, "year")
              : this.num(dt.year, 6);
          // eras
          case "G":
            // like AD
            return era("short");
          case "GG":
            // like Anno Domini
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return this.num(dt.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return this.num(dt.weekYear, 4);
          case "W":
            return this.num(dt.weekNumber);
          case "WW":
            return this.num(dt.weekNumber, 2);
          case "n":
            return this.num(dt.localWeekNumber);
          case "nn":
            return this.num(dt.localWeekNumber, 2);
          case "ii":
            return this.num(dt.localWeekYear.toString().slice(-2), 2);
          case "iiii":
            return this.num(dt.localWeekYear, 4);
          case "o":
            return this.num(dt.ordinal);
          case "ooo":
            return this.num(dt.ordinal, 3);
          case "q":
            // like 1
            return this.num(dt.quarter);
          case "qq":
            // like 01
            return this.num(dt.quarter, 2);
          case "X":
            return this.num(Math.floor(dt.ts / 1000));
          case "x":
            return this.num(dt.ts);
          default:
            return maybeMacro(token);
        }
      };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  }

  formatDurationFromString(dur, fmt) {
    const tokenToField = (token) => {
        switch (token[0]) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
            return "hour";
          case "d":
            return "day";
          case "w":
            return "week";
          case "M":
            return "month";
          case "y":
            return "year";
          default:
            return null;
        }
      },
      tokenToString = (lildur) => (token) => {
        const mapped = tokenToField(token);
        if (mapped) {
          return this.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      },
      tokens = Formatter.parseFormat(fmt),
      realTokens = tokens.reduce(
        (found, { literal, val }) => (literal ? found : found.concat(val)),
        []
      ),
      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
    return stringifyTokens(tokens, tokenToString(collapsed));
  }
}

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}

function combineExtractors(...extractors) {
  return (m) =>
    extractors
      .reduce(
        ([mergedVals, mergedZone, cursor], ex) => {
          const [val, zone, next] = ex(m, cursor);
          return [{ ...mergedVals, ...val }, zone || mergedZone, next];
        },
        [{}, null, 1]
      )
      .slice(0, 2);
}

function parse(s, ...patterns) {
  if (s == null) {
    return [null, null];
  }

  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s);
    if (m) {
      return extractor(m);
    }
  }
  return [null, null];
}

function simpleParse(...keys) {
  return (match, cursor) => {
    const ret = {};
    let i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }
    return [ret, null, cursor + i];
  };
}

// ISO and SQL parsing
const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
const extractISOOrdinalData = simpleParse("year", "ordinal");
const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
const sqlTimeRegex = RegExp(
  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
);
const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

function int(match, pos, fallback) {
  const m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  const item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1),
  };

  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  const item = {
    hours: int(match, cursor, 0),
    minutes: int(match, cursor + 1, 0),
    seconds: int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3]),
  };

  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  const local = !match[cursor] && !match[cursor + 1],
    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
    zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
}

// ISO time parsing

const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

// ISO duration parsing

const isoDuration =
  /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

function extractISODuration(match) {
  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
    match;

  const hasNegativePrefix = s[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";

  const maybeNegate = (num, force = false) =>
    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
    },
  ];
}

// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
const obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60,
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr),
  };

  if (secondStr) result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday =
      weekdayStr.length > 3
        ? weekdaysLong.indexOf(weekdayStr) + 1
        : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
}

// RFC 2822/5322
const rfc2822 =
  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  const [
      ,
      weekdayStr,
      dayStr,
      monthStr,
      yearStr,
      hourStr,
      minuteStr,
      secondStr,
      obsOffset,
      milOffset,
      offHourStr,
      offMinuteStr,
    ] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

  let offset;
  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s
    .replace(/\([^()]*\)|[\n\t]/g, " ")
    .replace(/(\s\s+)/g, " ")
    .trim();
}

// http date

const rfc1123 =
    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
  rfc850 =
    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
  ascii =
    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

const extractISOYmdTimeAndOffset = combineExtractors(
  extractISOYmd,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOWeekTimeAndOffset = combineExtractors(
  extractISOWeekData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOOrdinalDateAndTime = combineExtractors(
  extractISOOrdinalData,
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);
const extractISOTimeAndOffset = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);

/*
 * @private
 */

function parseISODate(s) {
  return parse(
    s,
    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
    [isoTimeCombinedRegex, extractISOTimeAndOffset]
  );
}

function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}

function parseHTTPDate(s) {
  return parse(
    s,
    [rfc1123, extractRFC1123Or850],
    [rfc850, extractRFC1123Or850],
    [ascii, extractASCII]
  );
}

function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}

const extractISOTimeOnly = combineExtractors(extractISOTime);

function parseISOTimeOnly(s) {
  return parse(s, [isoTimeOnly, extractISOTimeOnly]);
}

const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

const extractISOTimeOffsetAndIANAZone = combineExtractors(
  extractISOTime,
  extractISOOffset,
  extractIANAZone
);

function parseSQL(s) {
  return parse(
    s,
    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
  );
}

const INVALID$2 = "Invalid Duration";

// unit conversion constants
const lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1000,
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1000,
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
    minutes: { seconds: 60, milliseconds: 60 * 1000 },
    seconds: { milliseconds: 1000 },
  },
  casualMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1000,
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1000,
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1000,
    },

    ...lowOrderMatrix,
  },
  daysInYearAccurate = 146097.0 / 400,
  daysInMonthAccurate = 146097.0 / 4800,
  accurateMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: (daysInYearAccurate * 24) / 4,
      minutes: (daysInYearAccurate * 24 * 60) / 4,
      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
    },
    ...lowOrderMatrix,
  };

// units ordered by size
const orderedUnits$1 = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds",
];

const reverseUnits = orderedUnits$1.slice(0).reverse();

// clone really means "create another instance just like this one, but with these changes"
function clone$1(dur, alts, clear = false) {
  // deep merge for vals
  const conf = {
    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix,
  };
  return new Duration(conf);
}

function durationToMillis(matrix, vals) {
  let sum = vals.milliseconds ?? 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum;
}

// NB: mutates parameters
function normalizeValues(matrix, vals) {
  // the logic below assumes the overall value of the duration is positive
  // if this is not the case, factor is used to make it so
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;

  orderedUnits$1.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];

        // if (previousVal < 0):
        // lower order unit is negative (e.g. { years: 2, days: -2 })
        // normalize this by reducing the higher order unit by the appropriate amount
        // and increasing the lower order unit
        // this can never make the higher order unit negative, because this function only operates
        // on positive durations, so the amount of time represented by the lower order unit cannot
        // be larger than the higher order unit
        // else:
        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
        // in this case we attempt to convert as much as possible from the lower order unit into
        // the higher order one
        //
        // Math.floor takes care of both of these cases, rounding away from 0
        // if previousVal < 0 it makes the absolute value larger
        // if previousVal >= it makes the absolute value smaller
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);

  // try to convert any decimals into smaller units if possible
  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
  orderedUnits$1.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}

// Remove all properties with a value of 0 from an object
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}

/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */
class Duration {
  /**
   * @private
   */
  constructor(config) {
    const accurate = config.conversionAccuracy === "longterm" || false;
    let matrix = accurate ? accurateMatrix : casualMatrix;

    if (config.matrix) {
      matrix = config.matrix;
    }

    /**
     * @access private
     */
    this.values = config.values;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.matrix = matrix;
    /**
     * @access private
     */
    this.isLuxonDuration = true;
  }

  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  static fromMillis(count, opts) {
    return Duration.fromObject({ milliseconds: count }, opts);
  }

  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(
        `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
      );
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix,
    });
  }

  /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */
  static fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return Duration.fromMillis(durationLike);
    } else if (Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(
        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
      );
    }
  }

  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  static fromISO(text, opts) {
    const [parsed] = parseISODuration(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }

  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */
  static fromISOTime(text, opts) {
    const [parsed] = parseISOTimeOnly(text);
    if (parsed) {
      return Duration.fromObject(parsed, opts);
    } else {
      return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }

  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({ invalid });
    }
  }

  /**
   * @private
   */
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds",
    }[unit ? unit.toLowerCase() : unit];

    if (!normalized) throw new InvalidUnitError(unit);

    return normalized;
  }

  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDuration(o) {
    return (o && o.isLuxonDuration) || false;
  }

  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }

  /**
   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    const fmtOpts = {
      ...opts,
      floor: opts.round !== false && opts.floor !== false,
    };
    return this.isValid
      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
      : INVALID$2;
  }

  /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */
  toHuman(opts = {}) {
    if (!this.isValid) return INVALID$2;

    const l = orderedUnits$1
      .map((unit) => {
        const val = this.values[unit];
        if (isUndefined(val)) {
          return null;
        }
        return this.loc
          .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
          .format(val);
      })
      .filter((n) => n);

    return this.loc
      .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
      .format(l);
  }

  /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  toObject() {
    if (!this.isValid) return {};
    return { ...this.values };
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;

    let s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
      s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */
  toISOTime(opts = {}) {
    if (!this.isValid) return null;

    const millis = this.toMillis();
    if (millis < 0 || millis >= 86400000) return null;

    opts = {
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended",
      ...opts,
      includeOffset: false,
    };

    const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
    return dateTime.toISOTime(opts);
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }

  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  toString() {
    return this.toISO();
  }

  /**
   * Returns a string representation of this Duration appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Duration { values: ${JSON.stringify(this.values)} }`;
    } else {
      return `Duration { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  toMillis() {
    if (!this.isValid) return NaN;

    return durationToMillis(this.matrix, this.values);
  }

  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }

  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  plus(duration) {
    if (!this.isValid) return this;

    const dur = Duration.fromDurationLike(duration),
      result = {};

    for (const k of orderedUnits$1) {
      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone$1(this, { values: result }, true);
  }

  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  minus(duration) {
    if (!this.isValid) return this;

    const dur = Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }

  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  mapUnits(fn) {
    if (!this.isValid) return this;
    const result = {};
    for (const k of Object.keys(this.values)) {
      result[k] = asNumber(fn(this.values[k], k));
    }
    return clone$1(this, { values: result }, true);
  }

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */
  get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }

  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  set(values) {
    if (!this.isValid) return this;

    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
    return clone$1(this, { values: mixed });
  }

  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem });
    const opts = { loc, matrix, conversionAccuracy };
    return clone$1(this, opts);
  }

  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }

  /**
   * Reduce this Duration to its canonical representation in its current units.
   * Assuming the overall value of the Duration is positive, this means:
   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
   *   the overall value would be negative, see third example)
   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
   *
   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
   * @return {Duration}
   */
  normalize() {
    if (!this.isValid) return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone$1(this, { values: vals }, true);
  }

  /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */
  rescale() {
    if (!this.isValid) return this;
    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone$1(this, { values: vals }, true);
  }

  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  shiftTo(...units) {
    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map((u) => Duration.normalizeUnit(u));

    const built = {},
      accumulated = {},
      vals = this.toObject();
    let lastUnit;

    for (const k of orderedUnits$1) {
      if (units.indexOf(k) >= 0) {
        lastUnit = k;

        let own = 0;

        // anything we haven't boiled down yet should get boiled to this unit
        for (const ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }

        // plus anything that's already in this unit
        if (isNumber(vals[k])) {
          own += vals[k];
        }

        // only keep the integer part for now in the hopes of putting any decimal part
        // into a smaller unit later
        const i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1000 - i * 1000) / 1000;

        // otherwise, keep it in the wings to boil it later
      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    }

    // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] +=
          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    normalizeValues(this.matrix, built);
    return clone$1(this, { values: built }, true);
  }

  /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */
  shiftToAll() {
    if (!this.isValid) return this;
    return this.shiftTo(
      "years",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    );
  }

  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  negate() {
    if (!this.isValid) return this;
    const negated = {};
    for (const k of Object.keys(this.values)) {
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone$1(this, { values: negated }, true);
  }

  /**
   * Get the years.
   * @type {number}
   */
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }

  /**
   * Get the quarters.
   * @type {number}
   */
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }

  /**
   * Get the months.
   * @type {number}
   */
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }

  /**
   * Get the weeks
   * @type {number}
   */
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }

  /**
   * Get the days.
   * @type {number}
   */
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }

  /**
   * Get the hours.
   * @type {number}
   */
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }

  /**
   * Get the minutes.
   * @type {number}
   */
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }

  /**
   * Get the seconds.
   * @return {number}
   */
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }

  /**
   * Get the milliseconds.
   * @return {number}
   */
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }

  /**
   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
   * on invalid DateTimes or Intervals.
   * @return {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }

  /**
   * Returns an error code if this Duration became invalid, or null if the Duration is valid
   * @return {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    function eq(v1, v2) {
      // Consider 0 and undefined as equal
      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
      return v1 === v2;
    }

    for (const u of orderedUnits$1) {
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  }
}

const INVALID$1 = "Invalid Interval";

// checks if the start is equal to or before the end
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid(
      "end before start",
      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
    );
  } else {
    return null;
  }
}

/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */
class Interval {
  /**
   * @private
   */
  constructor(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */
    this.e = config.end;
    /**
     * @access private
     */
    this.invalid = config.invalid || null;
    /**
     * @access private
     */
    this.isLuxonInterval = true;
  }

  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({ invalid });
    }
  }

  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  static fromDateTimes(start, end) {
    const builtStart = friendlyDateTime(start),
      builtEnd = friendlyDateTime(end);

    const validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd,
      });
    } else {
      return validateError;
    }
  }

  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static after(start, duration) {
    const dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }

  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  static before(end, duration) {
    const dur = Duration.fromDurationLike(duration),
      dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }

  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  static fromISO(text, opts) {
    const [s, e] = (text || "").split("/", 2);
    if (s && e) {
      let start, startIsValid;
      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      let end, endIsValid;
      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        const dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s, opts);
        if (dur.isValid) {
          return Interval.before(end, dur);
        }
      }
    }
    return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
  }

  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isInterval(o) {
    return (o && o.isLuxonInterval) || false;
  }

  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  get start() {
    return this.isValid ? this.s : null;
  }

  /**
   * Returns the end of the Interval
   * @type {DateTime}
   */
  get end() {
    return this.isValid ? this.e : null;
  }

  /**
   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
   * @type {boolean}
   */
  get isValid() {
    return this.invalidReason === null;
  }

  /**
   * Returns an error code if this Interval is invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
  }

  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
   * @return {number}
   */
  count(unit = "milliseconds", opts) {
    if (!this.isValid) return NaN;
    const start = this.start.startOf(unit, opts);
    let end;
    if (opts?.useLocaleWeeks) {
      end = this.end.reconfigure({ locale: start.locale });
    } else {
      end = this.end;
    }
    end = end.startOf(unit, opts);
    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
  }

  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }

  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }

  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }

  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }

  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }

  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  set({ start, end } = {}) {
    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }

  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */
  splitAt(...dateTimes) {
    if (!this.isValid) return [];
    const sorted = dateTimes
        .map(friendlyDateTime)
        .filter((d) => this.contains(d))
        .sort((a, b) => a.toMillis() - b.toMillis()),
      results = [];
    let { s } = this,
      i = 0;

    while (s < this.e) {
      const added = sorted[i] || this.e,
        next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }

  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */
  splitBy(duration) {
    const dur = Duration.fromDurationLike(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    let { s } = this,
      idx = 1,
      next;

    const results = [];
    while (s < this.e) {
      const added = this.start.plus(dur.mapUnits((x) => x * idx));
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      idx += 1;
    }

    return results;
  }

  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */
  divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }

  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }

  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }

  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }

  /**
   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
   * @param {Interval} other
   * @return {boolean}
   */
  engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }

  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }

  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  intersection(other) {
    if (!this.isValid) return this;
    const s = this.s > other.s ? this.s : other.s,
      e = this.e < other.e ? this.e : other.e;

    if (s >= e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }

  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  union(other) {
    if (!this.isValid) return this;
    const s = this.s < other.s ? this.s : other.s,
      e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }

  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  static merge(intervals) {
    const [found, final] = intervals
      .sort((a, b) => a.s - b.s)
      .reduce(
        ([sofar, current], item) => {
          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        },
        [[], null]
      );
    if (final) {
      found.push(final);
    }
    return found;
  }

  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */
  static xor(intervals) {
    let start = null,
      currentCount = 0;
    const results = [],
      ends = intervals.map((i) => [
        { time: i.s, type: "s" },
        { time: i.e, type: "e" },
      ]),
      flattened = Array.prototype.concat(...ends),
      arr = flattened.sort((a, b) => a.time - b.time);

    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }

  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */
  difference(...intervals) {
    return Interval.xor([this].concat(intervals))
      .map((i) => this.intersection(i))
      .filter((i) => i && !i.isEmpty());
  }

  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  toString() {
    if (!this.isValid) return INVALID$1;
    return `[${this.s.toISO()} – ${this.e.toISO()})`;
  }

  /**
   * Returns a string representation of this Interval appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
    } else {
      return `Interval { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid
      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
      : INVALID$1;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }

  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  toISODate() {
    if (!this.isValid) return INVALID$1;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }

  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */
  toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }

  /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */
  toFormat(dateFormat, { separator = " – " } = {}) {
    if (!this.isValid) return INVALID$1;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }

  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }

  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
}

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */
class Info {
  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  static hasDST(zone = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone).set({ month: 12 });

    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
  }

  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  static isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }

  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }

  /**
   * Get the weekday on which the week starts according to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
   */
  static getStartOfWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getStartOfWeek();
  }

  /**
   * Get the minimum number of days necessary in a week before it is considered part of the next year according
   * to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number}
   */
  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
  }

  /**
   * Get the weekdays, which are considered the weekend according to the given locale
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
   */
  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
    // copy the array, because we cache it internally
    return (locObj || Locale.create(locale)).getWeekendDays().slice();
  }

  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */
  static months(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }

  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */
  static monthsFormat(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }

  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */
  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }

  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */
  static weekdaysFormat(
    length = "long",
    { locale = null, numberingSystem = null, locObj = null } = {}
  ) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }

  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */
  static meridiems({ locale = null } = {}) {
    return Locale.create(locale).meridiems();
  }

  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */
  static eras(length = "short", { locale = null } = {}) {
    return Locale.create(locale, null, "gregory").eras(length);
  }

  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
   * @example Info.features() //=> { relative: false, localeWeek: true }
   * @return {Object}
   */
  static features() {
    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
  }
}

function dayDiff(earlier, later) {
  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
    ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  const differs = [
    ["years", (a, b) => b.year - a.year],
    ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
    ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - (days % 7)) / 7;
      },
    ],
    ["days", dayDiff],
  ];

  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;

  /* This loop tries to diff using larger units first.
     If we overshoot, we backtrack and try the next smaller unit.
     "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
     as we use smaller and smaller units.
     highWater keeps track of where we would be if we added one more of the smallest unit,
     this is used later to potentially convert any difference smaller than the smallest higher order unit
     into a fraction of that smallest higher order unit
  */
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;

      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);

      if (highWater > later) {
        // we overshot the end point, backtrack cursor by 1
        results[unit]--;
        cursor = earlier.plus(results);

        // if we are still overshooting now, we need to backtrack again
        // this happens in certain situations when diffing times in different zones,
        // because this calculation ignores time zones
        if (cursor > later) {
          // keep the "overshot by 1" around as highWater
          highWater = cursor;
          // backtrack cursor by 1
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

function diff (earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

  const remainingMillis = later - cursor;

  const lowerOrderUnits = units.filter(
    (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
  );

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({ [lowestOrder]: 1 });
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  const duration = Duration.fromObject(results, opts);

  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts)
      .shiftTo(...lowerOrderUnits)
      .plus(duration);
  } else {
    return duration;
  }
}

const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post = (i) => i) {
  return { regex, deser: ([s]) => post(parseDigits(s)) };
}

const NBSP = String.fromCharCode(160);
const spaceOrNBSP = `[ ${NBSP}]`;
const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s
    .replace(/\./g, "") // ignore dots that were made optional
    .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
    .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: ([s]) =>
        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
    };
  }
}

function offset(regex, groups) {
  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
}

function simple(regex) {
  return { regex, deser: ([s]) => s };
}

function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

/**
 * @param token
 * @param {Locale} loc
 */
function unitForToken(token, loc) {
  const one = digitRegex(loc),
    two = digitRegex(loc, "{2}"),
    three = digitRegex(loc, "{3}"),
    four = digitRegex(loc, "{4}"),
    six = digitRegex(loc, "{6}"),
    oneOrTwo = digitRegex(loc, "{1,2}"),
    oneToThree = digitRegex(loc, "{1,3}"),
    oneToSix = digitRegex(loc, "{1,6}"),
    oneToNine = digitRegex(loc, "{1,9}"),
    twoToFour = digitRegex(loc, "{2,4}"),
    fourToSix = digitRegex(loc, "{4,6}"),
    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
    unitate = (t) => {
      if (token.literal) {
        return literal(t);
      }
      switch (t.val) {
        // era
        case "G":
          return oneOf(loc.eras("short"), 0);
        case "GG":
          return oneOf(loc.eras("long"), 0);
        // years
        case "y":
          return intUnit(oneToSix);
        case "yy":
          return intUnit(twoToFour, untruncateYear);
        case "yyyy":
          return intUnit(four);
        case "yyyyy":
          return intUnit(fourToSix);
        case "yyyyyy":
          return intUnit(six);
        // months
        case "M":
          return intUnit(oneOrTwo);
        case "MM":
          return intUnit(two);
        case "MMM":
          return oneOf(loc.months("short", true), 1);
        case "MMMM":
          return oneOf(loc.months("long", true), 1);
        case "L":
          return intUnit(oneOrTwo);
        case "LL":
          return intUnit(two);
        case "LLL":
          return oneOf(loc.months("short", false), 1);
        case "LLLL":
          return oneOf(loc.months("long", false), 1);
        // dates
        case "d":
          return intUnit(oneOrTwo);
        case "dd":
          return intUnit(two);
        // ordinals
        case "o":
          return intUnit(oneToThree);
        case "ooo":
          return intUnit(three);
        // time
        case "HH":
          return intUnit(two);
        case "H":
          return intUnit(oneOrTwo);
        case "hh":
          return intUnit(two);
        case "h":
          return intUnit(oneOrTwo);
        case "mm":
          return intUnit(two);
        case "m":
          return intUnit(oneOrTwo);
        case "q":
          return intUnit(oneOrTwo);
        case "qq":
          return intUnit(two);
        case "s":
          return intUnit(oneOrTwo);
        case "ss":
          return intUnit(two);
        case "S":
          return intUnit(oneToThree);
        case "SSS":
          return intUnit(three);
        case "u":
          return simple(oneToNine);
        case "uu":
          return simple(oneOrTwo);
        case "uuu":
          return intUnit(one);
        // meridiem
        case "a":
          return oneOf(loc.meridiems(), 0);
        // weekYear (k)
        case "kkkk":
          return intUnit(four);
        case "kk":
          return intUnit(twoToFour, untruncateYear);
        // weekNumber (W)
        case "W":
          return intUnit(oneOrTwo);
        case "WW":
          return intUnit(two);
        // weekdays
        case "E":
        case "c":
          return intUnit(one);
        case "EEE":
          return oneOf(loc.weekdays("short", false), 1);
        case "EEEE":
          return oneOf(loc.weekdays("long", false), 1);
        case "ccc":
          return oneOf(loc.weekdays("short", true), 1);
        case "cccc":
          return oneOf(loc.weekdays("long", true), 1);
        // offset/zone
        case "Z":
        case "ZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
        case "ZZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are
        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);
        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
        // in this case we accept any non-newline white-space
        case " ":
          return simple(/[^\S\n\r]/);
        default:
          return literal(t);
      }
    };

  const unit = unitate(token) || {
    invalidReason: MISSING_FTP,
  };

  unit.token = token;

  return unit;
}

const partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy",
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM",
  },
  day: {
    numeric: "d",
    "2-digit": "dd",
  },
  weekday: {
    short: "EEE",
    long: "EEEE",
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour12: {
    numeric: "h",
    "2-digit": "hh",
  },
  hour24: {
    numeric: "H",
    "2-digit": "HH",
  },
  minute: {
    numeric: "m",
    "2-digit": "mm",
  },
  second: {
    numeric: "s",
    "2-digit": "ss",
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ",
  },
};

function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type, value } = part;

  if (type === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value,
    };
  }

  const style = formatOpts[type];

  // The user might have explicitly specified hour12 or hourCycle
  // if so, respect their decision
  // if not, refer back to the resolvedOpts, which are based on the locale
  let actualType = type;
  if (type === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      // tokens only differentiate between 24 hours or not,
      // so we do not need to check hourCycle here, which is less supported anyways
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val,
    };
  }

  return undefined;
}

function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [`^${re}$`, units];
}

function match(input, regex, handlers) {
  const matches = input.match(regex);

  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i],
          groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  const toField = (token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  };

  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }

  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});

  return [vals, zone, specificOffset];
}

let dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);

  if (tokens == null || tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}

/**
 * @private
 */

class TokenParser {
  constructor(locale, format) {
    this.locale = locale;
    this.format = format;
    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);
    this.units = this.tokens.map((t) => unitForToken(t, locale));
    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);

    if (!this.disqualifyingUnit) {
      const [regexString, handlers] = buildRegex(this.units);
      this.regex = RegExp(regexString, "i");
      this.handlers = handlers;
    }
  }

  explainFromTokens(input) {
    if (!this.isValid) {
      return { input, tokens: this.tokens, invalidReason: this.invalidReason };
    } else {
      const [rawMatches, matches] = match(input, this.regex, this.handlers),
        [result, zone, specificOffset] = matches
          ? dateTimeFromMatches(matches)
          : [null, null, undefined];
      if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
        throw new ConflictingSpecificationError(
          "Can't include meridiem when specifying 24-hour format"
        );
      }
      return {
        input,
        tokens: this.tokens,
        regex: this.regex,
        rawMatches,
        matches,
        result,
        zone,
        specificOffset,
      };
    }
  }

  get isValid() {
    return !this.disqualifyingUnit;
  }

  get invalidReason() {
    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
  }
}

function explainFromTokens(locale, input, format) {
  const parser = new TokenParser(locale, format);
  return parser.explainFromTokens(input);
}

function parseFromTokens(locale, input, format) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
  return [result, zone, specificOffset, invalidReason];
}

function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }

  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}

const INVALID = "Invalid DateTime";
const MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}

// we cache week data on the DT object and this intermediates the cache
/**
 * @param {DateTime} dt
 */
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}

/**
 * @param {DateTime} dt
 */
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(
      dt.c,
      dt.loc.getMinDaysInFirstWeek(),
      dt.loc.getStartOfWeek()
    );
  }
  return dt.localWeekData;
}

// clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties
function clone(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid,
  };
  return new DateTime({ ...current, ...alts, old: current });
}

// find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  let utcGuess = localTS - o * 60 * 1000;

  // Test whether the zone matches the offset for this ts
  const o2 = tz.offset(utcGuess);

  // If so, offset didn't change and we're done
  if (o === o2) {
    return [utcGuess, o];
  }

  // If not, change the ts by the difference in the offset
  utcGuess -= (o2 - o) * 60 * 1000;

  // If that gives us the local time we want, we're done
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [utcGuess, o2];
  }

  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
}

// convert an epoch timestamp into a calendar object with the given offset
function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;

  const d = new Date(ts);

  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds(),
  };
}

// convert a calendar object to a epoch timestamp
function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
}

// create a new DT instance by adding a duration, adjusting for DSTs
function adjustTime(inst, dur) {
  const oPre = inst.o,
    year = inst.c.year + Math.trunc(dur.years),
    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
    c = {
      ...inst.c,
      year,
      month,
      day:
        Math.min(inst.c.day, daysInMonth(year, month)) +
        Math.trunc(dur.days) +
        Math.trunc(dur.weeks) * 7,
    },
    millisToAdd = Duration.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds,
    }).as("milliseconds"),
    localTS = objToLocalTS(c);

  let [ts, o] = fixOffset(localTS, oPre, inst.zone);

  if (millisToAdd !== 0) {
    ts += millisToAdd;
    // that could have changed the offset by going over a DST, but we want to keep the ts the same
    o = inst.zone.offset(ts);
  }

  return { ts, o };
}

// helper useful in turning the results of parsing into real dates
// by handling the zone options
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  const { setZone, zone } = opts;
  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
    const interpretationZone = parsedZone || zone,
      inst = DateTime.fromObject(parsed, {
        ...opts,
        zone: interpretationZone,
        specificOffset,
      });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(
      new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
    );
  }
}

// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function toTechFormat(dt, format, allowZ = true) {
  return dt.isValid
    ? Formatter.create(Locale.create("en-US"), {
        allowZ,
        forceSimple: true,
      }).formatDateTimeFromString(dt, format)
    : null;
}

function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);

  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}

function toISOTime(
  o,
  extended,
  suppressSeconds,
  suppressMilliseconds,
  includeOffset,
  extendedZone
) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }

  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);

    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }

  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }

  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}

// defaults for unspecified units in the supported calendars
const defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  },
  defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  },
  defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
  };

// Units in the supported calendars, sorted by bigness
const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
  orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond",
  ],
  orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

// standardize case and plurality in units
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal",
  }[unit.toLowerCase()];

  if (!normalized) throw new InvalidUnitError(unit);

  return normalized;
}

function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}

// cache offsets for zones based on the current timestamp when this function is
// first called. When we are handling a datetime from components like (year,
// month, day, hour) in a time zone, we need a guess about what the timezone
// offset is so that we can convert into a UTC timestamp. One way is to find the
// offset of now in the zone. The actual date may have a different offset (for
// example, if we handle a date in June while we're in December in a zone that
// observes DST), but we can check and adjust that.
//
// When handling many dates, calculating the offset for now every time is
// expensive. It's just a guess, so we can cache the offset to use even if we
// are right on a time change boundary (we'll just correct in the other
// direction). Using a timestamp from first read is a slight optimization for
// handling dates close to the current date, since those dates will usually be
// in the same offset (we could set the timestamp statically, instead). We use a
// single timestamp for all zones to make things a bit more predictable.
//
// This is safe for quickDT (used by local() and utc()) because we don't fill in
// higher-order units from tsNow (as we do in fromObject, this requires that
// offset is calculated from tsNow).
function guessOffsetForZone(zone) {
  if (!zoneOffsetGuessCache[zone]) {
    if (zoneOffsetTs === undefined) {
      zoneOffsetTs = Settings.now();
    }

    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);
  }
  return zoneOffsetGuessCache[zone];
}

// this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone);
  if (!zone.isValid) {
    return DateTime.invalid(unsupportedZone(zone));
  }

  const loc = Locale.fromObject(opts);

  let ts, o;

  // assume we have the higher-order units
  if (!isUndefined(obj.year)) {
    for (const u of orderedUnits) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }

    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }

    const offsetProvis = guessOffsetForZone(zone);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = Settings.now();
  }

  return new DateTime({ ts, zone, loc, o });
}

function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round,
    format = (c, unit) => {
      c = roundTo(c, round || opts.calendary ? 0 : 2, true);
      const formatter = end.loc.clone(opts).relFormatter(opts);
      return formatter.format(c, unit);
    },
    differ = (unit) => {
      if (opts.calendary) {
        if (!end.hasSame(start, unit)) {
          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end.diff(start, unit).get(unit);
      }
    };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}

function lastOpts(argList) {
  let opts = {},
    args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [opts, args];
}

/**
 * Timestamp to use for cached zone offset guesses (exposed for test)
 */
let zoneOffsetTs;
/**
 * Cache for zone offset guesses (exposed for test).
 *
 * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of
 * zone.offset().
 */
let zoneOffsetGuessCache = {};

/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */
class DateTime {
  /**
   * @access private
   */
  constructor(config) {
    const zone = config.zone || Settings.defaultZone;

    let invalid =
      config.invalid ||
      (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
      (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */
    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;

    let c = null,
      o = null;
    if (!invalid) {
      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        [c, o] = [config.old.c, config.old.o];
      } else {
        // If an offset has been passed and we have not been called from
        // clone(), we can trust it and avoid the offset calculation.
        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }

    /**
     * @access private
     */
    this._zone = zone;
    /**
     * @access private
     */
    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */
    this.invalid = invalid;
    /**
     * @access private
     */
    this.weekData = null;
    /**
     * @access private
     */
    this.localWeekData = null;
    /**
     * @access private
     */
    this.c = c;
    /**
     * @access private
     */
    this.o = o;
    /**
     * @access private
     */
    this.isLuxonDateTime = true;
  }

  // CONSTRUCT

  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */
  static now() {
    return new DateTime({});
  }

  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */
  static local() {
    const [opts, args] = lastOpts(arguments),
      [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }

  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */
  static utc() {
    const [opts, args] = lastOpts(arguments),
      [year, month, day, hour, minute, second, millisecond] = args;

    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
  }

  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  static fromJSDate(date, options = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options),
    });
  }

  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromMillis(milliseconds, options = {}) {
    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError(
        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
      );
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options),
      });
    }
  }

  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromSeconds(seconds, options = {}) {
    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options),
      });
    }
  }

  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.localWeekYear - a week year, according to the locale
   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
   * @return {DateTime}
   */
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    const loc = Locale.fromObject(opts);
    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);

    const tsNow = Settings.now(),
      offsetProvis = !isUndefined(opts.specificOffset)
        ? opts.specificOffset
        : zoneToUse.offset(tsNow),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

    // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

    // configure ourselves to deal with gregorian dates or week stuff
    let units,
      defaultValues,
      objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits;
      defaultValues = defaultUnitValues;
    }

    // set default values for missing stuff
    let foundFirst = false;
    for (const u of units) {
      const v = normalized[u];
      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }

    // make sure the values we have are in range
    const higherOrderInvalid = useWeekData
        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)
        : containsOrdinal
        ? hasInvalidOrdinalData(normalized)
        : hasInvalidGregorianData(normalized),
      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    }

    // compute the actual time
    const gregorian = useWeekData
        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)
        : containsOrdinal
        ? ordinalToGregorian(normalized)
        : normalized,
      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
      inst = new DateTime({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc,
      });

    // gregorian data + weekday serves only to validate
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid(
        "mismatched weekday",
        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
      );
    }

    if (!inst.isValid) {
      return DateTime.invalid(inst.invalid);
    }

    return inst;
  }

  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  static fromISO(text, opts = {}) {
    const [vals, parsedZone] = parseISODate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }

  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  static fromRFC2822(text, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }

  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  static fromHTTP(text, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }

  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  static fromFormat(text, fmt, opts = {}) {
    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    const { locale = null, numberingSystem = null } = opts,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      }),
      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
    }
  }

  /**
   * @deprecated use fromFormat instead
   */
  static fromString(text, fmt, opts = {}) {
    return DateTime.fromFormat(text, fmt, opts);
  }

  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  static fromSQL(text, opts = {}) {
    const [vals, parsedZone] = parseSQL(text);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }

  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({ invalid });
    }
  }

  /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  static isDateTime(o) {
    return (o && o.isLuxonDateTime) || false;
  }

  /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */
  static parseFormatForOpts(formatOpts, localeOpts = {}) {
    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
  }

  /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */
  static expandFormat(fmt, localeOpts = {}) {
    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
    return expanded.map((t) => t.val).join("");
  }

  static resetCache() {
    zoneOffsetTs = undefined;
    zoneOffsetGuessCache = {};
  }

  // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  get(unit) {
    return this[unit];
  }

  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  get isValid() {
    return this.invalid === null;
  }

  /**
   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }

  /**
   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
   * @type {string}
   */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }

  /**
   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
   *
   * @type {string}
   */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }

  /**
   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
   *
   * @type {string}
   */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }

  /**
   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
   *
   * @type {string}
   */
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }

  /**
   * Get the time zone associated with this DateTime.
   * @type {Zone}
   */
  get zone() {
    return this._zone;
  }

  /**
   * Get the name of the time zone.
   * @type {string}
   */
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }

  /**
   * Get the year
   * @example DateTime.local(2017, 5, 25).year //=> 2017
   * @type {number}
   */
  get year() {
    return this.isValid ? this.c.year : NaN;
  }

  /**
   * Get the quarter
   * @example DateTime.local(2017, 5, 25).quarter //=> 2
   * @type {number}
   */
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }

  /**
   * Get the month (1-12).
   * @example DateTime.local(2017, 5, 25).month //=> 5
   * @type {number}
   */
  get month() {
    return this.isValid ? this.c.month : NaN;
  }

  /**
   * Get the day of the month (1-30ish).
   * @example DateTime.local(2017, 5, 25).day //=> 25
   * @type {number}
   */
  get day() {
    return this.isValid ? this.c.day : NaN;
  }

  /**
   * Get the hour of the day (0-23).
   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
   * @type {number}
   */
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }

  /**
   * Get the minute of the hour (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
   * @type {number}
   */
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }

  /**
   * Get the second of the minute (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
   * @type {number}
   */
  get second() {
    return this.isValid ? this.c.second : NaN;
  }

  /**
   * Get the millisecond of the second (0-999).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
   * @type {number}
   */
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }

  /**
   * Get the week year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
   * @type {number}
   */
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }

  /**
   * Get the week number of the week year (1-52ish).
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
   * @type {number}
   */
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }

  /**
   * Get the day of the week.
   * 1 is Monday and 7 is Sunday
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 11, 31).weekday //=> 4
   * @type {number}
   */
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }

  /**
   * Returns true if this date is on a weekend according to the locale, false otherwise
   * @returns {boolean}
   */
  get isWeekend() {
    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
  }

  /**
   * Get the day of the week according to the locale.
   * 1 is the first day of the week and 7 is the last day of the week.
   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
   * @returns {number}
   */
  get localWeekday() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
  }

  /**
   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
   * because the week can start on different days of the week (see localWeekday) and because a different number of days
   * is required for a week to count as the first week of a year.
   * @returns {number}
   */
  get localWeekNumber() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
  }

  /**
   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
   * differently, see localWeekNumber.
   * @returns {number}
   */
  get localWeekYear() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
  }

  /**
   * Get the ordinal (meaning the day of the year)
   * @example DateTime.local(2017, 5, 25).ordinal //=> 145
   * @type {number|DateTime}
   */
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }

  /**
   * Get the human readable short month name, such as 'Oct'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
   * @type {string}
   */
  get monthShort() {
    return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
  }

  /**
   * Get the human readable long month name, such as 'October'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthLong //=> October
   * @type {string}
   */
  get monthLong() {
    return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
  }

  /**
   * Get the human readable short weekday, such as 'Mon'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
   * @type {string}
   */
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
  }

  /**
   * Get the human readable long weekday, such as 'Monday'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
   * @type {string}
   */
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
  }

  /**
   * Get the UTC offset of this DateTime in minutes
   * @example DateTime.now().offset //=> -240
   * @example DateTime.utc().offset //=> 0
   * @type {number}
   */
  get offset() {
    return this.isValid ? +this.o : NaN;
  }

  /**
   * Get the short human name for the zone's current offset, for example "EST" or "EDT".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale,
      });
    } else {
      return null;
    }
  }

  /**
   * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale,
      });
    } else {
      return null;
    }
  }

  /**
   * Get whether this zone's offset ever changes, as in a DST.
   * @type {boolean}
   */
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }

  /**
   * Get whether the DateTime is in a DST.
   * @type {boolean}
   */
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return (
        this.offset > this.set({ month: 1, day: 1 }).offset ||
        this.offset > this.set({ month: 5 }).offset
      );
    }
  }

  /**
   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
   * in this DateTime's zone. During DST changes local time can be ambiguous, for example
   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
   * @returns {DateTime[]}
   */
  getPossibleOffsets() {
    if (!this.isValid || this.isOffsetFixed) {
      return [this];
    }
    const dayMs = 86400000;
    const minuteMs = 60000;
    const localTS = objToLocalTS(this.c);
    const oEarlier = this.zone.offset(localTS - dayMs);
    const oLater = this.zone.offset(localTS + dayMs);

    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
    const o2 = this.zone.offset(localTS - oLater * minuteMs);
    if (o1 === o2) {
      return [this];
    }
    const ts1 = localTS - o1 * minuteMs;
    const ts2 = localTS - o2 * minuteMs;
    const c1 = tsToObj(ts1, o1);
    const c2 = tsToObj(ts2, o2);
    if (
      c1.hour === c2.hour &&
      c1.minute === c2.minute &&
      c1.second === c2.second &&
      c1.millisecond === c2.millisecond
    ) {
      return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];
    }
    return [this];
  }

  /**
   * Returns true if this DateTime is in a leap year, false otherwise
   * @example DateTime.local(2016).isInLeapYear //=> true
   * @example DateTime.local(2013).isInLeapYear //=> false
   * @type {boolean}
   */
  get isInLeapYear() {
    return isLeapYear(this.year);
  }

  /**
   * Returns the number of days in this DateTime's month
   * @example DateTime.local(2016, 2).daysInMonth //=> 29
   * @example DateTime.local(2016, 3).daysInMonth //=> 31
   * @type {number}
   */
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }

  /**
   * Returns the number of days in this DateTime's year
   * @example DateTime.local(2016).daysInYear //=> 366
   * @example DateTime.local(2013).daysInYear //=> 365
   * @type {number}
   */
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }

  /**
   * Returns the number of weeks in this DateTime's year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2004).weeksInWeekYear //=> 53
   * @example DateTime.local(2013).weeksInWeekYear //=> 52
   * @type {number}
   */
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }

  /**
   * Returns the number of weeks in this DateTime's local week year
   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
   * @type {number}
   */
  get weeksInLocalWeekYear() {
    return this.isValid
      ? weeksInWeekYear(
          this.localWeekYear,
          this.loc.getMinDaysInFirstWeek(),
          this.loc.getStartOfWeek()
        )
      : NaN;
  }

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  resolvedLocaleOptions(opts = {}) {
    const { locale, numberingSystem, calendar } = Formatter.create(
      this.loc.clone(opts),
      opts
    ).resolvedOptions(this);
    return { locale, numberingSystem, outputCalendar: calendar };
  }

  // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  toUTC(offset = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }

  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }

  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone);
      }
      return clone(this, { ts: newTS, zone });
    }
  }

  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
    return clone(this, { loc });
  }

  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  setLocale(locale) {
    return this.reconfigure({ locale });
  }

  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   *
   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
   * They cannot be mixed with ISO-week units like `weekday`.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  set(values) {
    if (!this.isValid) return this;

    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);

    const settingWeekStuff =
        !isUndefined(normalized.weekYear) ||
        !isUndefined(normalized.weekNumber) ||
        !isUndefined(normalized.weekday),
      containsOrdinal = !isUndefined(normalized.ordinal),
      containsGregorYear = !isUndefined(normalized.year),
      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
      containsGregor = containsGregorYear || containsGregorMD,
      definiteWeekDef = normalized.weekYear || normalized.weekNumber;

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError(
        "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
      );
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian(
        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
        minDaysInFirstWeek,
        startOfWeek
      );
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
    } else {
      mixed = { ...this.toObject(), ...normalized };

      // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month
      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    const [ts, o] = objToTS(mixed, this.o, this.zone);
    return clone(this, { ts, o });
  }

  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration);
    return clone(this, adjustTime(this, dur));
  }

  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration).negate();
    return clone(this, adjustTime(this, dur));
  }

  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  startOf(unit, { useLocaleWeeks = false } = {}) {
    if (!this.isValid) return this;

    const o = {},
      normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through
      case "quarters":
      case "months":
        o.day = 1;
      // falls through
      case "weeks":
      case "days":
        o.hour = 0;
      // falls through
      case "hours":
        o.minute = 0;
      // falls through
      case "minutes":
        o.second = 0;
      // falls through
      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      if (useLocaleWeeks) {
        const startOfWeek = this.loc.getStartOfWeek();
        const { weekday } = this;
        if (weekday < startOfWeek) {
          o.weekNumber = this.weekNumber - 1;
        }
        o.weekday = startOfWeek;
      } else {
        o.weekday = 1;
      }
    }

    if (normalizedUnit === "quarters") {
      const q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }

  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  endOf(unit, opts) {
    return this.isValid
      ? this.plus({ [unit]: 1 })
          .startOf(unit, opts)
          .minus(1)
      : this;
  }

  // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  toFormat(fmt, opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
      : INVALID;
  }

  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
      : INVALID;
  }

  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  toLocaleParts(opts = {}) {
    return this.isValid
      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
      : [];
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  toISO({
    format = "extended",
    suppressSeconds = false,
    suppressMilliseconds = false,
    includeOffset = true,
    extendedZone = false,
  } = {}) {
    if (!this.isValid) {
      return null;
    }

    const ext = format === "extended";

    let c = toISODate(this, ext);
    c += "T";
    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  toISODate({ format = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }

    return toISODate(this, format === "extended");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }

  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */
  toISOTime({
    suppressMilliseconds = false,
    suppressSeconds = false,
    includeOffset = true,
    includePrefix = false,
    extendedZone = false,
    format = "extended",
  } = {}) {
    if (!this.isValid) {
      return null;
    }

    let c = includePrefix ? "T" : "";
    return (
      c +
      toISOTime(
        this,
        format === "extended",
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone
      )
    );
  }

  /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt = "HH:mm:ss.SSS";

    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }

    return toTechFormat(this, fmt, true);
  }

  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }

    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }

  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  toString() {
    return this.isValid ? this.toISO() : INVALID;
  }

  /**
   * Returns a string representation of this DateTime appropriate for the REPL.
   * @return {string}
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
    } else {
      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
    }
  }

  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */
  valueOf() {
    return this.toMillis();
  }

  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }

  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }

  /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1000) : NaN;
  }

  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  toJSON() {
    return this.toISO();
  }

  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  toBSON() {
    return this.toJSDate();
  }

  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  toObject(opts = {}) {
    if (!this.isValid) return {};

    const base = { ...this.c };

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }

  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }

  // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }

    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

    const units = maybeArray(unit).map(Duration.normalizeUnit),
      otherIsLater = otherDateTime.valueOf() > this.valueOf(),
      earlier = otherIsLater ? this : otherDateTime,
      later = otherIsLater ? otherDateTime : this,
      diffed = diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }

  /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(DateTime.now(), unit, opts);
  }

  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }

  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */
  hasSame(otherDateTime, unit, opts) {
    if (!this.isValid) return false;

    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
    return (
      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)
    );
  }

  /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  equals(other) {
    return (
      this.isValid &&
      other.isValid &&
      this.valueOf() === other.valueOf() &&
      this.zone.equals(other.zone) &&
      this.loc.equals(other.loc)
    );
  }

  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  toRelative(options = {}) {
    if (!this.isValid) return null;
    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
    let units = ["years", "months", "days", "hours", "minutes", "seconds"];
    let unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = undefined;
    }
    return diffRelative(base, this.plus(padding), {
      ...options,
      numeric: "always",
      units,
      unit,
    });
  }

  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  toRelativeCalendar(options = {}) {
    if (!this.isValid) return null;

    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
      ...options,
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true,
    });
  }

  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  static min(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }

  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  static max(...dateTimes) {
    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }

  // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  static fromFormatExplain(text, fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      });
    return explainFromTokens(localeToUse, text, fmt);
  }

  /**
   * @deprecated use fromFormatExplain instead
   */
  static fromStringExplain(text, fmt, options = {}) {
    return DateTime.fromFormatExplain(text, fmt, options);
  }

  /**
   * Build a parser for `fmt` using the given locale. This parser can be passed
   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
   * can be used to optimize cases where many dates need to be parsed in a
   * specific format.
   *
   * @param {String} fmt - the format the string is expected to be in (see
   * description)
   * @param {Object} options - options used to set locale and numberingSystem
   * for parser
   * @returns {TokenParser} - opaque object to be used
   */
  static buildFormatParser(fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      });
    return new TokenParser(localeToUse, fmt);
  }

  /**
   * Create a DateTime from an input string and format parser.
   *
   * The format parser must have been created with the same locale as this call.
   *
   * @param {String} text - the string to parse
   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
   * @param {Object} opts - options taken by fromFormat()
   * @returns {DateTime}
   */
  static fromFormatParser(text, formatParser, opts = {}) {
    if (isUndefined(text) || isUndefined(formatParser)) {
      throw new InvalidArgumentError(
        "fromFormatParser requires an input string and a format parser"
      );
    }
    const { locale = null, numberingSystem = null } = opts,
      localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true,
      });

    if (!localeToUse.equals(formatParser.locale)) {
      throw new InvalidArgumentError(
        `fromFormatParser called with a locale of ${localeToUse}, ` +
          `but the format parser was created for ${formatParser.locale}`
      );
    }

    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);

    if (invalidReason) {
      return DateTime.invalid(invalidReason);
    } else {
      return parseDataToDateTime(
        result,
        zone,
        opts,
        `format ${formatParser.format}`,
        text,
        specificOffset
      );
    }
  }

  // FORMAT PRESETS

  /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  static get DATE_SHORT() {
    return DATE_SHORT;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED() {
    return DATE_MED;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
   * @type {Object}
   */
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983'
   * @type {Object}
   */
  static get DATE_FULL() {
    return DATE_FULL;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
   * @type {Object}
   */
  static get DATE_HUGE() {
    return DATE_HUGE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
   * @type {Object}
   */
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }

  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }

  /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED() {
    return DATETIME_MED;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }

  /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
}

/**
 * @private
 */
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(
      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
    );
  }
}

function getIntervalStatement() {
    // getting the local timezone offset
    const tzOffset = DateTime.now().offset / 60;
    // We lose 1 second when use Interval in the FS service as a workaround we need to offset for that second
    // as of 05/22/2020 There's a pending issue with FS team when it's fixed this workaround should be removed
    // e.g., tzOffset = 7 will translated be 6:59:59
    const interval = tzOffset !== 0 ? `${tzOffset > 0 ? "+" : "-"}INTERVAL '${Math.abs(tzOffset) - 1}:59:59' HOUR TO SECOND` : "";
    return interval;
}
function getTimeBinGroupByFieldsForStatistics(dateFieldName, timeIntervalUnits) {
    // Generating interval to get the server to bin according to the user locale
    const interval = getIntervalStatement();
    const yearPart = `EXTRACT(YEAR FROM ${dateFieldName} ${interval})`;
    const monthPart = `EXTRACT(MONTH FROM ${dateFieldName} ${interval})`;
    const dayPart = `EXTRACT(DAY FROM ${dateFieldName} ${interval})`;
    const hourPart = `EXTRACT(HOUR FROM ${dateFieldName} ${interval})`;
    const minutePart = `EXTRACT(MINUTE FROM ${dateFieldName} ${interval})`;
    const secondPart = `EXTRACT(SECOND FROM ${dateFieldName} ${interval})`;
    let dateExpression = [];
    switch (timeIntervalUnits) {
        case WebChartTimeIntervalUnits.Seconds:
            dateExpression = [yearPart, monthPart, dayPart, hourPart, minutePart, secondPart];
            break;
        case WebChartTimeIntervalUnits.Minutes:
            dateExpression = [yearPart, monthPart, dayPart, hourPart, minutePart];
            break;
        case WebChartTimeIntervalUnits.Hours:
            dateExpression = [yearPart, monthPart, dayPart, hourPart];
            break;
        case WebChartTimeIntervalUnits.Days:
        case WebChartTimeIntervalUnits.Weeks:
        case WebChartTimeIntervalUnits.Months:
        case WebChartTimeIntervalUnits.Years:
            // Weeks: The server doesn't handle weeks, so we request it as days and we will re-bin later on the client by groups of 7 days
            // Months and Years: we want to bin from specific dates (not 1st day of the month or 1st day of the year), so we pre-bin by days
            dateExpression = [yearPart, monthPart, dayPart];
            break;
    }
    return dateExpression;
}

/**
 * Returns the `stat` field name to be used by the query. Output is derived from either of:
 * a. what's in the config,
 * b. composition of stat type + stat field + where value, or
 * c. a default name
 * d. the series y
 * @param props.whereValue The value from the where clause
 * @param props.outStatistics The array of outStatistics
 * @param props.y The y field
 */
function getStatFieldName(props) {
    const { whereValue, outStatistics, y } = props;
    let statFieldName = Un.outStatistics.outStatisticFieldName ;
    if (outStatistics?.outStatisticFieldName !== undefined) {
        statFieldName = outStatistics.outStatisticFieldName;
    }
    else if (outStatistics?.onStatisticField !== undefined && outStatistics.statisticType !== undefined) {
        statFieldName = `${outStatistics.statisticType}_${outStatistics.onStatisticField}_${whereValue}`;
    }
    else if (y !== undefined) {
        /* if outStatistics is undefined, we set the stat field name on the series.y because we need a unique value
          to link the query results with the series
        */
        statFieldName = [y].flat()[0];
    }
    return statFieldName;
}
/**
 * Builds a map making the link between the unique values and the `y` values of each series.
 * For now only Bar Chart supports multi-series.
 * @param seriesConfig The series config
 */
function mapUniqueValueToStatField(seriesConfig) {
    const mapToStatField = new Map();
    // extracting the values used for the split-by
    for (let iSeries = 0; iSeries < seriesConfig.length; iSeries += 1) {
        const currentSeries = seriesConfig[iSeries];
        const currentWhere = currentSeries.query?.where;
        if (currentWhere !== undefined && "y" in currentSeries) {
            // /!\ The whereValue needs to be in sync with the one computed by mapQueryResults() when matching `mapToStatField` with the query results
            // The normalization pattern needs to be the same in order to avoid mismatches.
            const whereValue = Ql({ where: currentWhere, normalize: true, escape: false });
            if (whereValue !== "") {
                const statFieldName = getStatFieldName({
                    whereValue,
                    outStatistics: currentSeries.query?.outStatistics?.[0],
                    y: currentSeries.y,
                });
                // modifying the original series for it to consider the change
                currentSeries.y = statFieldName;
                // Storing the association between the unique value and the corresponding stat field name.
                mapToStatField.set(whereValue, statFieldName);
            }
        }
    }
    return mapToStatField;
}
/**
 * Modifies the input `WebChartQuery` by adding the split-by field to its `groupByFieldsForStatistics` property.
 * Assures that a field is added only once to the `groupByFieldsForStatistics` array, duplicate fields leading to query errors.
 * @param props.uniqueQuery The WebChartQuery to modify
 * @param props.x The x axis field
 * @param props.splitByField The split-by field
 */
function modifyGroupByField(props) {
    const { uniqueQuery, splitByField, x } = props;
    // building the group-by field list from the existing one + x + splitByField
    const fields = [...(uniqueQuery.groupByFieldsForStatistics ?? []), x, splitByField].filter((field) => field !== undefined && field.trim() !== "" && field !== eo);
    uniqueQuery.groupByFieldsForStatistics = Array.from(new Set(fields));
}
/**
 * Indicates whether the provided statistics is of type `RESTStatisticType.ContinuousPercentile`
 * or `RESTStatisticType.DiscretePercentile`.
 */
function isPercentileStatistics(outStatistics) {
    return (outStatistics.statisticType === RESTStatisticType.ContinuousPercentile ||
        outStatistics.statisticType === RESTStatisticType.DiscretePercentile);
}
/**
 * Modifies the input `WebChartQuery` by assigning a default value for its `outStatisticFieldName`.
 *
 * When the statisticType is `RESTStatisticType.DiscretePercentile` or `RESTStatisticType.ContinuousPercentile,
 * if the query is for a time binning series, this function will delete the `statisticParameters` object and
 * resets the `statisticType` to Count regardless; otherwise it adds the statisticParameters and/or assigns
 * a default value to the `outStatistics` properties of the query if `statisticParameters` is not present.
 *
 * Notes: outStatistics should only be modified through this function
 * @param props.uniqueQuery The WebChartQuery to modify
 * @param props.y The y field
 * @param props.useGenericOutStatFieldName Whether to use a generic stat field over the y field
 * @param props.queryObject  The query object (layer or feature layer view)
 * @param props.chartSubType The chart sub type
 * @param props.isTimeBinningSeries Whether the chart is using time binning
 * @param props.returnFeaturesExtent Whether the features extent need to be fetched by the query
 */
function modifyOutStatistics(props) {
    const { uniqueQuery, y, useGenericOutStatFieldName, queryObject, chartSubType, isTimeBinningSeries, returnFeaturesExtent, } = props;
    const defaultOutStatistics = Un.outStatistics;
    if (uniqueQuery.outStatistics?.[0] !== undefined) {
        // assign the proper value for the outStatisticFieldName when needed
        if (chartSubType !== ml.PieFromFields && chartSubType !== ml.BarAndLineFromFields) {
            uniqueQuery.outStatistics[0].outStatisticFieldName = useGenericOutStatFieldName
                ? defaultOutStatistics.outStatisticFieldName
                : [y].flat()[0];
        }
        // go through all the outStatistics objects and fill in the required `statisticParameters` if it's missing if
        // statisticType is 'percentile_cont` or `percentile_disc`.
        // TODO: these two cannot be used with the having parameter and is only support if capabilities.query.supportsPercentileStatistics
        // https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-StatisticDefinition.html#statisticParameters
        const { outStatistics } = uniqueQuery;
        for (let i = 0; i < outStatistics.length; i += 1) {
            const outStatistic = uniqueQuery.outStatistics[i];
            if (outStatistic !== undefined && isPercentileStatistics(outStatistic)) {
                /* For a time binning series the median stat would be useless given we need to re-bin on the client side,
                so we simplify it by using a count. Besides, the queries seem to fail when ContinuousPercentile is used */
                if (isTimeBinningSeries) {
                    outStatistics[i].statisticType = RESTStatisticType.Count;
                    delete outStatistics[i].statisticParameters;
                }
                else {
                    // otherwise, replace missing statisticParameters with default value when needed
                    outStatistics[i] = {
                        ...outStatistics[i],
                        statisticParameters: outStatistics[i].statisticParameters ?? {
                            value: ChartDefaults.defaultStatParameterValue,
                        },
                    };
                }
            }
        }
    }
    else if (queryObject !== undefined) {
        // Finding the OID field among the feature layer field list
        const { objectIdField } = Ds(queryObject);
        // if the outStatistics is undefined, we define a default one
        uniqueQuery.outStatistics = [
            {
                statisticType: defaultOutStatistics.statisticType,
                onStatisticField: objectIdField,
                outStatisticFieldName: useGenericOutStatFieldName ? defaultOutStatistics.outStatisticFieldName : [y].flat()[0],
            },
        ];
    }
    // if the selection extent is requested, we add an outStatistic that will fetch each feature's extent
    if (returnFeaturesExtent === true) {
        uniqueQuery.outStatistics?.push({
            statisticType: RESTStatisticType.EnvelopeAggregate,
            onStatisticField: "1",
        });
    }
}
/**
 * Builds an array of unique outStatistic object
 * @param props.chartConfig The chart's config
 * @param props.fetchFullBoxPlotData Whether to fetch the full box plot data
 */
function buildUniqueBoxPlotOutStatistics(props) {
    const { chartConfig, fetchFullBoxPlotData } = props;
    const { series: seriesList } = chartConfig;
    const showMean = getShowMean(chartConfig);
    // outStatisticTemplate represents base template required to build OutStatistic object for the box plot queries
    // whether we are in mean lines mode or not, we need the average
    let outStatisticTemplate = [
        { statisticType: RESTStatisticType.Average, suffix: Wl.Average },
    ];
    // if all the stats are requested we add them to the list
    if (fetchFullBoxPlotData === true) {
        outStatisticTemplate = [
            ...outStatisticTemplate,
            { statisticType: RESTStatisticType.Minimum, suffix: Wl.Min },
            {
                statisticType: RESTStatisticType.ContinuousPercentile,
                statisticParameters: { value: 0.25 },
                suffix: Wl.FirstQuartile,
            },
            {
                statisticType: RESTStatisticType.ContinuousPercentile,
                statisticParameters: { value: 0.5 },
                suffix: Wl.Median,
            },
            {
                statisticType: RESTStatisticType.ContinuousPercentile,
                statisticParameters: { value: 0.75 },
                suffix: Wl.ThirdQuartile,
            },
            { statisticType: RESTStatisticType.Maximum, suffix: Wl.Max },
            { statisticType: RESTStatisticType.StandardDeviation, suffix: Wl.StandardDeviation },
        ];
    }
    // outStatisticFields elements must be unique
    const outStatisticFields = new Set();
    // if showMean is true we fetch the numeric fields from the first series y
    if (showMean && "y" in seriesList[0]) {
        [seriesList[0].y].flat().forEach((y) => outStatisticFields.add(y));
    }
    else {
        seriesList.forEach((series) => {
            if ("y" in series) {
                const yList = [series.y].flat();
                yList.forEach((y) => outStatisticFields.add(y));
            }
        });
    }
    const outStatistics = [...outStatisticFields].flatMap((field) => outStatisticTemplate.map((outStatistic) => {
        const result = {
            onStatisticField: field,
            statisticType: outStatistic.statisticType,
            outStatisticFieldName: `${field}_${outStatistic.suffix}`,
        };
        // only include statisticParameters when outStatistic has RESTStatisticType.ContinuousPercentile as its statisticType
        if (outStatistic.statisticType === RESTStatisticType.ContinuousPercentile) {
            result.statisticParameters = outStatistic.statisticParameters;
        }
        return result;
    }));
    return outStatistics;
}
/**
 * Function merging multiple `outStatistics` properties.
 * For now only Bar, Line and Combo Bar& Line Charts supports multi-series.
 * @param uniqueQuery The chart query
 * @param seriesConfig The series config
 */
function mergeOutStatistics(uniqueQuery, seriesConfig) {
    // Building outStatistics. Starting at 1 because series[0] is already in uniqueQuery
    // looping on the series to merge the outStatistics objects
    for (let iSeries = 1; iSeries < seriesConfig.length; iSeries += 1) {
        // copying the first item to and replacing only the stat field name
        const seriesOutStatistics = { ...seriesConfig[iSeries].query?.outStatistics?.[0] };
        if (seriesOutStatistics !== undefined && uniqueQuery.outStatistics !== undefined) {
            uniqueQuery.outStatistics.push(seriesOutStatistics);
        }
    }
}
/**
 *
 * @param props
 */
function modifyQueryForTimeBinning(props) {
    const { uniqueQuery, x, splitByField, timeIntervalUnits, chartSubType, objectIdField } = props;
    if (timeIntervalUnits !== undefined) {
        const timeBinningGroupByField = getTimeBinGroupByFieldsForStatistics(x, timeIntervalUnits);
        // Adjusting the sort order
        // TODO: re-apply the ASC / DESC orders as requested in the config (not wanted for Map Viewer)
        uniqueQuery.orderByFields = timeBinningGroupByField;
        // Adjusting the group by fields for statistics
        uniqueQuery.groupByFieldsForStatistics = timeBinningGroupByField;
        if (chartSubType === ml.BarAndLineSplitBy && !Ol(splitByField)) {
            // If the chart uses a split-by, we use the split-by field to the group-by
            uniqueQuery.groupByFieldsForStatistics.push(splitByField);
        }
        else if (chartSubType === ml.BarAndLineNoAggregation) {
            // If the chart is non aggregated, we need to add the OID field in the group by, and also a count by OID in the outStatistics
            uniqueQuery.groupByFieldsForStatistics.push(objectIdField);
            uniqueQuery.outStatistics = [
                {
                    onStatisticField: objectIdField,
                    outStatisticFieldName: `COUNT_${objectIdField}`,
                    statisticType: RESTStatisticType.Count,
                },
            ];
        }
    }
}
/**
 * Handles the limitation of features on the chart (when the chart limits are reached but the requested behavior is to render up to the limit).
 * See https://devtopia.esri.com/WebGIS/arcgis-charts/issues/5126
 * Temporal charts are handled differently in `fetchFinishedLineChartTimeBinningData()` as we can't predict beforehand how many time bins there will be on the chart.
 * @param props.chartConfig The chart's config
 * @param props.uniqueQuery The web chart query
 * @param props.options The runtime chart's options
 */
function addFeatureLimitation(props) {
    const { chartConfig, options, uniqueQuery } = props;
    if (options?.chartLimits?.behaviorAfterLimit === We.RenderUpToTheLimit) {
        const numberMaxOfFeaturesToFetch = getMaximumNumberOfFeaturesToFetch(chartConfig, options?.chartLimits);
        if (numberMaxOfFeaturesToFetch !== undefined) {
            const chartSubType = ts(chartConfig.series);
            if (chartSubType === ml.PieFromFields || chartSubType === ml.BarAndLineFromFields) {
                if (uniqueQuery.outStatistics?.[0] !== undefined) {
                    // Handling the feature limitation for pie/bar/line chart from fields by removing fields to fetch stats, except for the extra outStatistics
                    // in charge of fetching the features geometry
                    const geometryStatsFilter = (stat, inOrOut) => (stat.statisticType === RESTStatisticType.EnvelopeAggregate) === inOrOut;
                    const geometryStats = uniqueQuery.outStatistics.filter((stat) => geometryStatsFilter(stat, true));
                    const allStatsButGeometryStats = uniqueQuery.outStatistics.filter((stat) => geometryStatsFilter(stat, false));
                    allStatsButGeometryStats.splice(numberMaxOfFeaturesToFetch);
                    uniqueQuery.outStatistics = [...allStatsButGeometryStats, ...geometryStats];
                }
            }
            else {
                // For gauge and bar/line charts we set a limit on the query so it brings back the appropriate amount of features (rather than fetching everything and filter afterwards)
                uniqueQuery.num = numberMaxOfFeaturesToFetch;
            }
        }
    }
}
/**
 *  Function building a unique query based on the chart series config.
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object
 * @param props.queryConfig The config query
 * @param props.options Runtime options
 * @param props.timeIntervalInfo Time interval info.
 * @param props.setTimeBinningInfoWhenNotProvided indicator whether to set time binning info when not provided
 * @param props.fetchFullBoxPlotData Whether to fetch the full box plot data
 */
function buildUniqueQuery(props) {
    const { chartConfig, queryConfig, options, queryObject, timeIntervalInfo, fetchFullBoxPlotData } = props;
    const { setTimeBinningInfoWhenNotProvided, returnFeaturesExtent } = options ?? {};
    const seriesConfig = chartConfig.series;
    const chartSubType = ts(seriesConfig);
    const seriesReference = Yl(chartConfig);
    const { query: queryReference, x } = seriesReference;
    const y = "y" in seriesReference ? seriesReference.y : undefined;
    const isTimeBinningSeries = is({
        xAxisValueFormatType: getXAxisValueFormat(chartConfig),
        setTimeBinningInfoWhenNotProvided,
        seriesConfig: seriesReference,
    });
    let mapToStatField = new Map();
    let useGenericOutStatFieldName = false;
    let modifyOutStatisticsNeeded = false;
    let removeOrderByFieldNeeded = false;
    let modifyGroupByFieldNeeded = false;
    let buildUniqueBoxPlotOutStatisticsNeeded = false;
    let uniqueQuery = {};
    if (queryReference !== undefined) {
        // uniqueQuery is copied from the 1st series query. Cloned before being modified
        uniqueQuery = cloneDeep(queryReference);
        const splitByField = Xl(queryReference.where);
        let where = "";
        // Excluding the null categories if the `fetchNullValues` is false or undefined
        if (queryConfig.fetchNullValues !== true) {
            if (x !== ChartDefaults.boxPlot.boxPlotCategory) {
                where = `${x} IS NOT NULL`;
            }
            if (splitByField.trim() !== "" && splitByField !== x && !Jl(queryReference.where)) {
                where = $s([where, `${splitByField} IS NOT NULL`]);
            }
        }
        switch (chartSubType) {
            case ml.BarAndLineSplitBy: {
                mapToStatField = mapUniqueValueToStatField(seriesConfig);
                modifyGroupByFieldNeeded = true;
                useGenericOutStatFieldName = true;
                modifyOutStatisticsNeeded = true;
                break;
            }
            case ml.BarAndLineMultiFields:
                mergeOutStatistics(uniqueQuery, seriesConfig);
                modifyOutStatisticsNeeded = true;
                break;
            case ml.PieFromFields:
            case ml.BarAndLineFromFields:
                // Reset the where clause because we want to retrieve all the records
                where = "";
                // for charts of this type, the orderByField contains instructions on how to display the elements;
                // it is not used in querying the data from the server, thus it must be removed; otherwise we will get an invalid query.
                removeOrderByFieldNeeded = true;
                modifyOutStatisticsNeeded = true;
                break;
            case ml.BarAndLineMonoField:
            case ml.PieFromCategory:
                modifyOutStatisticsNeeded = true;
                break;
            case ml.BoxPlotMonoField:
            case ml.BoxPlotMultiFields:
                removeOrderByFieldNeeded = true;
                buildUniqueBoxPlotOutStatisticsNeeded = true;
                break;
            case ml.BoxPlotMonoFieldAndCategory:
            case ml.BoxPlotMultiFieldsAndCategory:
            case ml.BoxPlotMonoFieldAndSplitBy:
            case ml.BoxPlotMonoFieldAndCategoryAndSplitBy:
            case ml.BoxPlotMultiFieldsAndSplitBy: {
                buildUniqueBoxPlotOutStatisticsNeeded = true;
                modifyGroupByFieldNeeded = true;
                removeOrderByFieldNeeded = true;
                break;
            }
        }
        // modifying the out stats if needed
        if (modifyOutStatisticsNeeded) {
            modifyOutStatistics({
                uniqueQuery,
                y,
                useGenericOutStatFieldName,
                queryObject,
                chartSubType,
                isTimeBinningSeries,
                returnFeaturesExtent,
            });
        }
        // modifying the group by if needed
        if (modifyGroupByFieldNeeded) {
            modifyGroupByField({ uniqueQuery, splitByField, x });
        }
        // building box plot out stats
        if (buildUniqueBoxPlotOutStatisticsNeeded) {
            uniqueQuery.outStatistics = buildUniqueBoxPlotOutStatistics({ chartConfig, fetchFullBoxPlotData });
        }
        // removing the order by fields if needed
        if (removeOrderByFieldNeeded) {
            delete uniqueQuery.orderByFields;
        }
        else if (queryConfig.orderByFields !== undefined) {
            // filter out invalid orderByFields
            uniqueQuery.orderByFields = queryConfig.orderByFields.filter((orderByField) => {
                const result = orderByField.split(" ");
                return !Ol(result[0]);
            });
        }
        // For line series using time binning we need to modify the query again
        if (isTimeBinningSeries) {
            const layer = Ds(queryObject);
            const { objectIdField } = layer;
            modifyQueryForTimeBinning({
                uniqueQuery,
                x,
                splitByField: Xl(queryReference.where),
                timeIntervalUnits: timeIntervalInfo?.timeIntervalUnits ?? seriesConfig[0].timeIntervalUnits,
                chartSubType,
                objectIdField,
            });
        }
        uniqueQuery.where = where;
    }
    // handle the feature limitation
    addFeatureLimitation({ chartConfig, options, uniqueQuery });
    // merging the unique query with the query config (but the `where` clause that's specific)
    const { gdbVersion, geometry, distance, units, timeExtent, where } = queryConfig;
    if (gdbVersion !== undefined) {
        uniqueQuery.gdbVersion = gdbVersion;
    }
    if (geometry !== undefined) {
        uniqueQuery.geometry = geometry;
    }
    if (distance !== undefined) {
        uniqueQuery.distance = distance;
    }
    if (units !== undefined) {
        uniqueQuery.units = units;
    }
    if (timeExtent !== undefined) {
        uniqueQuery.timeExtent = timeExtent;
    }
    if (where !== undefined) {
        uniqueQuery.where = $s([uniqueQuery.where, where]);
    }
    return { uniqueQuery, mapToStatField };
}

/**
 * Function completing the series data
 * Ex: property = "name"
 * const array1 = ["a", "b", "c", "d"];
 * const array2 = [
 *  { "name" : "a", "arr": "x" },
 *  { "name" : "b", "arr": "y" },
 *  { "name" : "c", "arr": "z" }
 * ];
 * output = [
 *  { "name": "a", "arr": "x" },
 *  { "name": "b", "arr": "y" },
 *  { "name": "c", "arr": "z" },
 *  { "name": "d" }
 * ]
 * @param array1
 * @param array2
 * @param property
 */
function completeSeriesData(array1, array2, property) {
    const target = new Map();
    for (let i = 0; i < array1.length; i += 1) {
        target.set(array1[i], { [property]: array1[i] });
    }
    // Overwrite existing categories
    for (let i = 0; i < array2.length; i += 1) {
        const key = array2[i][property];
        if (typeof key === "string" || typeof key === "number") {
            target.set(key, array2[i]);
        }
    }
    const completedData = [...target.values()];
    return completedData;
}
/**
 * Completes a chart data by adding all the unique values not already in the array
 * @param props
 */
async function completeDataWithMissingCategories(props) {
    const { seriesData, chartConfig, queryConfig, queryObject, categoryOrDateCount, behaviorAfterLimit, abortKey } = props;
    const { series: seriesConfig } = chartConfig;
    let completeData = seriesData;
    const chartSubType = ts(seriesConfig);
    const xAxisValueFormatType = getXAxisValueFormat(chartConfig);
    // if feature count is greater than seriesData's length it means we're missing categories
    // we are only considering aggregated charts in FL mode and having a category axis
    // we do not complete the categories when the limit behavior is set to 'RenderUpToTheLimit'
    if (behaviorAfterLimit !== We.RenderUpToTheLimit &&
        queryObject !== undefined &&
        categoryOrDateCount !== undefined &&
        categoryOrDateCount > seriesData.length &&
        chartSubType !== ml.BarAndLineFromFields &&
        chartSubType !== ml.BarAndLineNoAggregation &&
        chartSubType !== ml.PieNoAggregation &&
        xAxisValueFormatType === WebChartTypes.CategoryAxisFormat) {
        const { x } = seriesConfig[0];
        // if feature count is greater than seriesData's length it means we're missing categories
        const modifiedQueryConfig = {
            ...queryConfig,
            returnDistinctValues: true,
            outFields: [x],
        };
        // deleting the unnecessary properties
        delete modifiedQueryConfig.outStatistics;
        delete modifiedQueryConfig.orderByFields;
        delete modifiedQueryConfig.groupByFieldsForStatistics;
        // Executing the series of queries to get unique values from the field
        const allFeatures = (await op({
            queryObject,
            queryConfig: modifiedQueryConfig,
            featureCount: categoryOrDateCount,
            abortKey,
        }));
        // excluding null and undefined categories. To be revised once https://devtopia.esri.com/WebGIS/arcgis-charts/pull/5433 is implemented
        const uniqueCategoriesArray = allFeatures
            .map((feature) => feature.attributes[x])
            .filter((value) => value !== null && value !== undefined);
        if (uniqueCategoriesArray.length > seriesData.length) {
            completeData = completeSeriesData(uniqueCategoriesArray, seriesData, x);
        }
    }
    return completeData;
}
/**
 * Completes a chart data by adding 0s for any category with no value.
 * Example:
 * 3 series are defined (webChartSeries):
 *  - series 1: outStatisticFieldName = "series1y"
 *  - series 2: outStatisticFieldName = "series2y"
 *  - series 3: outStatisticFieldName = "series3y"
 * The data set (seriesData) does not contain data for the series 2:
 *  [{category1: "c1", series1y: 25, series3y: 11},
 *   {category1: "c2", series1y: 18, series3y: 36}]
 *
 * The function completes the data set as follow:
 *  [{category1: "c1", series1y: 25, series2y: 0, series3y: 11},
 *   {category1: "c2", series1y: 18, series2y: 0, series3y: 36}]
 * @param seriesData The data to complete
 * @param chartConfig The chart's config
 */
function completeDataForEmptyCategoriesWithZeros(seriesData, chartConfig) {
    const completeData = seriesData;
    const { series: seriesConfig } = chartConfig;
    // Completes data with empty series only when aggregation type is Count and for a category axis
    if (getXAxisValueFormat(chartConfig) === WebChartTypes.CategoryAxisFormat &&
        seriesConfig[0].query?.outStatistics?.[0].statisticType === RESTStatisticType.Count) {
        // Creating an item model, referencing all the y/stat field values with a 0
        const itemModel = seriesConfig.reduce((accItemModel, series) => {
            const statField = series.query?.outStatistics?.[0].outStatisticFieldName ?? [series.y].flat()[0];
            accItemModel[statField] = 0;
            return accItemModel;
        }, {});
        // Merging each data item with the item model. It will add the 0 values for the missing series
        for (let iData = 0; iData < seriesData.length; iData += 1) {
            seriesData[iData] = { ...itemModel, ...seriesData[iData] };
        }
    }
    return completeData;
}

/**
 * List of chart subtypes that support direct category trimming.
 */
const supportedSubTypesForCategoryTrimming = [
    ml.BarAndLineMonoField,
    ml.BarAndLineMultiFields,
    ml.PieNoAggregation,
    ml.PieFromCategory,
    ml.BoxPlotMonoFieldAndCategory,
    ml.BoxPlotMultiFieldsAndCategory,
    ml.BoxPlotMonoFieldAndCategoryAndSplitBy,
];
const totalFeatureCount = "arcgis_charts_total_feature_count";

const GroupByKeywords = {
    groupByCaseBegin: "CASE",
    groupByOutKeyword: "OUT",
    groupByCaseEnd: "ELSE 'OUT' END",
};

/**
 * Given `getNumberOfBinsWithinDataRange()` returns a diff in days for weeks, months and years, we need
 * to divide the result to get a better approximation of the element count.
 * TODO: we need to find a better way to do that by using the `luxon` diff function
 * @param initialDayCount The initial number of elements in days
 * @param timeIntervalUnits The unit used to bin the temporal data
 * @returns
 */
function adjustElementCount(initialDayCount, timeIntervalUnits) {
    let adjustedCount = initialDayCount;
    if (timeIntervalUnits === WebChartTimeIntervalUnits.Weeks) {
        adjustedCount /= 7;
    }
    else if (timeIntervalUnits === WebChartTimeIntervalUnits.Months) {
        adjustedCount /= 30;
    }
    else if (timeIntervalUnits === WebChartTimeIntervalUnits.Years) {
        adjustedCount /= 365;
    }
    adjustedCount = Math.ceil(adjustedCount);
    return adjustedCount;
}
function getNextOrPreviousDate(props) {
    const { date, timeIntervalUnits, nextOrPrevious, timeIntervalSize } = props;
    if (timeIntervalSize !== undefined && Number.isFinite(timeIntervalSize)) {
        const factor = nextOrPrevious === "next" ? timeIntervalSize : -timeIntervalSize;
        switch (timeIntervalUnits) {
            case WebChartTimeIntervalUnits.Seconds:
                return DateTime.fromMillis(date).plus({ seconds: factor }).valueOf();
            case WebChartTimeIntervalUnits.Minutes:
                return DateTime.fromMillis(date).plus({ minutes: factor }).valueOf();
            case WebChartTimeIntervalUnits.Hours:
                return DateTime.fromMillis(date).plus({ hours: factor }).valueOf();
            case WebChartTimeIntervalUnits.Weeks:
            case WebChartTimeIntervalUnits.Days:
                return DateTime.fromMillis(date).plus({ days: factor }).valueOf();
            case WebChartTimeIntervalUnits.Months:
                return DateTime.fromMillis(date).plus({ months: factor }).valueOf();
            case WebChartTimeIntervalUnits.Years:
                return DateTime.fromMillis(date).plus({ years: factor }).valueOf();
        }
    }
    return date;
}
function groupFromStart(props) {
    const { binFirstOrLastIndex: binFirstIndex, data, x, timeIntervalInfo } = props;
    const { timeIntervalUnits, timeIntervalSize } = timeIntervalInfo;
    /* The Weeks case is special as the server can't bin per week.
        Instead we ask to bin per day, and we catch it up here by multiplying the interval size by 7 */
    const size = timeIntervalUnits === WebChartTimeIntervalUnits.Weeks ? (timeIntervalSize ?? 1) * 7 : timeIntervalSize;
    const binStartDate = data[binFirstIndex][x];
    let binLastIndex = binFirstIndex;
    // We get the first date of the following bin
    const nextBinFirstDate = getNextOrPreviousDate({
        date: binStartDate,
        timeIntervalUnits,
        timeIntervalSize: size,
        nextOrPrevious: "next",
    });
    // We start from the first date and go forward through the dates to find when we jump to the next bin, which helps knowing the end of the current bin
    let currentDate = data[binLastIndex][x];
    while (binLastIndex + 1 < data.length && currentDate < nextBinFirstDate) {
        binLastIndex += 1;
        currentDate = data[binLastIndex]?.[x];
    }
    // we are on the last bin if we reach the end of the data set
    const last = binLastIndex + 1 >= data.length;
    let sliceEndIndex = binLastIndex;
    // Adding one for the last round when the number of bins is odd
    if (last && data[sliceEndIndex] !== undefined) {
        sliceEndIndex += 1;
    }
    // bin end date is either the next bin's start date, or the next calculated date
    const binEndDate = last
        ? getNextOrPreviousDate({
            date: binStartDate,
            timeIntervalUnits,
            timeIntervalSize: size,
            nextOrPrevious: "next",
        })
        : data[binLastIndex][x] - 1; // removing 1 to avoid overlapping with next bin
    return {
        binStartDate,
        binEndDate,
        last,
        nextBinFirstOrLastIndex: binLastIndex,
        sliceStartIndex: binFirstIndex,
        sliceEndIndex,
    };
}
function groupFromEnd(props) {
    const { binFirstOrLastIndex: binLastIndex, data, x, timeIntervalInfo } = props;
    const { timeIntervalUnits, timeIntervalSize } = timeIntervalInfo;
    /* The Weeks case is special as the server can't bin per week.
        Instead we ask to bin per day, and we catch it up here by multiplying the interval size by 7 */
    const size = timeIntervalUnits === WebChartTimeIntervalUnits.Weeks ? (timeIntervalSize ?? 1) * 7 : timeIntervalSize;
    const binEndDate = data[binLastIndex][x];
    let binFirstIndex = binLastIndex;
    // We get the previous date of the previous bin
    const nextBinLastDate = getNextOrPreviousDate({
        date: binEndDate,
        timeIntervalUnits,
        timeIntervalSize: size,
        nextOrPrevious: "previous",
    });
    // We start from the last date and go backward through the dates to find when we jump to the next bin, which helps knowing the start of the current bin
    let currentDate = data[binFirstIndex][x];
    while (binFirstIndex - 1 >= 0 && currentDate > nextBinLastDate) {
        binFirstIndex -= 1;
        currentDate = data[binFirstIndex]?.[x];
    }
    // we are on the last bin if we reach the beginning of the data set
    const last = binFirstIndex - 1 <= 0;
    let sliceEndIndex = binLastIndex;
    // Adding one for the last round when the number of bins is odd
    if (last && data[sliceEndIndex] !== undefined) {
        sliceEndIndex -= 1;
    }
    if (last) {
        binFirstIndex = 0;
    }
    // storing the date range for later use in data labels. the range's end date is the first date of the next group - 1ms, or the last date
    // bin start date is either the previous bin's start date, or the previous calculated date
    let binStartDate = last
        ? getNextOrPreviousDate({
            date: binEndDate,
            timeIntervalUnits,
            timeIntervalSize: size,
            nextOrPrevious: "previous",
        })
        : data[binFirstIndex][x];
    // adding 1 to avoid overlapping with previous bin
    binStartDate += 1000;
    return {
        binStartDate,
        binEndDate,
        nextBinFirstOrLastIndex: binFirstIndex,
        sliceStartIndex: binFirstIndex,
        sliceEndIndex,
        last,
    };
}
function getNewBinStat(props) {
    const { binsToRegroup, statisticType, y, nullPolicy } = props;
    let stat;
    // initializing the stat according to the null policy. Interpolate will let an `undefined` default value
    if (nullPolicy !== WebChartNullPolicyTypes.Interpolate) {
        stat = nullPolicy === WebChartNullPolicyTypes.Zero ? 0 : null;
    }
    // we sanitize the length array beforehand because d3-array can return a false result from an empty array or one containing only invalid values (e.g. sum => 0)
    const sanitizedBins = binsToRegroup.filter((item) => Number.isFinite(item[y]));
    if (sanitizedBins.length > 0) {
        // ContinuousPercentile (median) is handled outside by `calculateBinsMedianValues()`
        switch (statisticType) {
            case RESTStatisticType.Count:
            case RESTStatisticType.Sum:
                stat = sum(sanitizedBins, (item) => item[y]);
                break;
            case RESTStatisticType.Minimum:
                stat = min(sanitizedBins, (item) => item[y]);
                break;
            case RESTStatisticType.Maximum:
                stat = max(sanitizedBins, (item) => item[y]);
                break;
            case RESTStatisticType.Average:
                stat = mean(sanitizedBins, (item) => item[y]);
                break;
        }
    }
    return stat;
}
function groupBinsByIntervalSize(props) {
    const { data, seriesConfig, timeIntervalInfo, newDateMin, newDateMax, dateMinTimestamp, dateMaxTimestamp } = props;
    let groupedData = [];
    const { timeIntervalUnits } = timeIntervalInfo;
    const timeIntervalSize = timeIntervalInfo.timeIntervalSize ?? 1;
    const { x, timeAggregationType, nullPolicy } = seriesConfig[0];
    // We need to group only when the interval size is > 1 (the server has pre-binned the data by 1 unit)
    // Weeks, Months and Years are pre-binned by days, and therefore also need to be grouped even is interval size is 1
    if (timeIntervalSize > 1 ||
        timeIntervalUnits === WebChartTimeIntervalUnits.Weeks ||
        timeIntervalUnits === WebChartTimeIntervalUnits.Months ||
        timeIntervalUnits === WebChartTimeIntervalUnits.Years) {
        const { query } = seriesConfig[0];
        const yList = ds(seriesConfig);
        // The stat type is used to apply rules when merging the statistics
        const { statisticType } = query?.outStatistics?.[0] ?? StatisticsDefaults;
        let lastBin = false;
        let binFirstOrLastIndex = timeAggregationType === WebChartTimeAggregationTypes.End ? data.length - 1 : 0;
        const groupProps = {
            binFirstOrLastIndex,
            data,
            x,
            timeIntervalInfo,
            newDateMin,
            newDateMax,
        };
        while (!lastBin) {
            let newBin = {};
            const { binStartDate, binEndDate, last, nextBinFirstOrLastIndex, sliceStartIndex, sliceEndIndex } = timeAggregationType === WebChartTimeAggregationTypes.End
                ? // When grouping from the end we'll start from the last date and move backward to create the bins
                    groupFromEnd(groupProps)
                : // When grouping from the start we'll start from the first date and move forward to create the bins
                    groupFromStart(groupProps);
            lastBin = last;
            // The new bin is created based on the first or last element from the sliced grouped
            newBin =
                timeAggregationType === WebChartTimeAggregationTypes.End
                    ? (newBin = data[sliceEndIndex - 1])
                    : (newBin = data[binFirstOrLastIndex]);
            /* we secure the grouping by double checking if the range is contained withing the data set boundaries
          - If the bin end date is greater than the max timestamp, the bin start date needs to be lesser than it
          - If the bin start date is lesser than the min timestamp, the bin en date needs to be greater than it
          - If the bin start date is greater than the min timestamp and the bin end date is lesser than the max timestamp
          */
            if ((binEndDate > dateMaxTimestamp && binStartDate < dateMaxTimestamp) ||
                (binStartDate < dateMinTimestamp && binEndDate > dateMinTimestamp) ||
                (binStartDate >= dateMinTimestamp && binEndDate <= dateMaxTimestamp)) {
                const binsToRegroup = data
                    .slice(sliceStartIndex, sliceEndIndex)
                    .filter((bin) => !(ChartDefaults.dateBinModel in bin));
                // Calculating the stats for the new group bin. Note: Median will be calculated later in the process
                yList.forEach((y) => {
                    newBin[y] = getNewBinStat({ binsToRegroup, statisticType, y, nullPolicy });
                });
                // merging the extents
                const binsExtent = binsToRegroup
                    .map((bin) => bin[Vn])
                    .filter((iExtent) => iExtent !== undefined);
                const mergedExtent = mergeExtents(binsExtent);
                if (mergedExtent !== undefined) {
                    newBin[Vn] = mergedExtent;
                }
                // Setting the bin value to the first date of the range
                newBin[x] = binStartDate;
                // Setting the field used by the date axis
                newBin[ChartDefaults.xAxisField] = binStartDate;
                // Recording the grouped bin date range
                newBin[ChartDefaults.dateBinningRange] = [binStartDate, binEndDate];
                delete newBin[ChartDefaults.dateBinModel];
                // finally, adding the grouped bin to the data array
                groupedData.push(newBin);
            }
            else if (last && timeAggregationType !== WebChartTimeAggregationTypes.End) {
                // If the very last bin is rejected, we recalculate the end date of the last bin
                groupedData[groupedData.length - 1][ChartDefaults.dateBinningRange][1] =
                    groupedData[groupedData.length - 1][ChartDefaults.dateBinningRange][1] + 1;
            }
            // Updating the bin index for the next round
            binFirstOrLastIndex = nextBinFirstOrLastIndex;
            groupProps.binFirstOrLastIndex = nextBinFirstOrLastIndex;
        }
        // once all bins are grouped, we reverse them when the aggregation type is "End" given they were added backwards
        if (timeAggregationType === WebChartTimeAggregationTypes.End) {
            groupedData = groupedData.reverse();
        }
    }
    else if (timeIntervalSize === 1) {
        // If the interval is 1 we don't need to regroup the bins, but we still need to set the date range to feed the tooltips and selection features
        groupedData = data.map((dataItem, itemIndex) => {
            const binStartDate = dataItem[x];
            let binEndDate = data[itemIndex + 1]?.[x];
            binEndDate =
                typeof binEndDate === "number"
                    ? binEndDate - 1
                    : getNextOrPreviousDate({
                        date: binStartDate,
                        timeIntervalUnits,
                        timeIntervalSize,
                        nextOrPrevious: "next",
                    });
            return {
                ...dataItem,
                [ChartDefaults.dateBinningRange]: [binStartDate, binEndDate],
            };
        });
    }
    else {
        groupedData = data;
    }
    return groupedData;
}
// Calculating the total number of bins, considering only date max - date min (how many bins there should have in between those 2 dates)
function getNumberOfBinsWithinDataRange(props) {
    const { dateMinTimestamp, dateMaxTimestamp, timeIntervalInfo } = props;
    const { timeIntervalSize, timeIntervalUnits } = timeIntervalInfo;
    let numberOfFinalBinsWithinDataRange = 0;
    let numberOfSingleBinsWithinDataRange = 0;
    if (timeIntervalSize !== undefined &&
        Number.isFinite(timeIntervalSize) &&
        Number.isFinite(dateMinTimestamp) &&
        Number.isFinite(dateMaxTimestamp)) {
        let result = -1;
        const minDate = DateTime.fromMillis(dateMinTimestamp);
        const maxDate = DateTime.fromMillis(dateMaxTimestamp);
        switch (timeIntervalUnits) {
            case WebChartTimeIntervalUnits.Seconds:
                result = maxDate.diff(minDate, "seconds").get("seconds");
                break;
            case WebChartTimeIntervalUnits.Minutes:
                result = maxDate.diff(minDate, "minutes").get("minutes");
                break;
            case WebChartTimeIntervalUnits.Hours:
                result = maxDate.diff(minDate, "hours").get("hours");
                break;
            case WebChartTimeIntervalUnits.Days:
            case WebChartTimeIntervalUnits.Months:
            case WebChartTimeIntervalUnits.Years:
                // For months and years, we also diff per day given we want the bins to go from a date to another
                result = maxDate.diff(minDate, "days").get("days");
                break;
            case WebChartTimeIntervalUnits.Weeks:
                result = maxDate.diff(minDate, "weeks").get("weeks");
                break;
        }
        // momentResult is potentially NaN (e.g. when the data field has no valid values)
        if (Number.isFinite(result)) {
            numberOfSingleBinsWithinDataRange = Math.ceil(result) + 1;
            numberOfFinalBinsWithinDataRange =
                timeIntervalSize === 1
                    ? numberOfSingleBinsWithinDataRange
                    : Math.ceil(numberOfSingleBinsWithinDataRange / timeIntervalSize);
        }
    }
    return { numberOfFinalBinsWithinDataRange, numberOfSingleBinsWithinDataRange };
}
function getBinModel(seriesConfig) {
    const { nullPolicy } = seriesConfig[0];
    // Creating an item model, referencing all the y/stat field values with a 0 or null value
    const itemModel = seriesConfig.reduce((accItemModel, series) => {
        // flagging the bin as a model
        accItemModel[ChartDefaults.dateBinModel] = undefined;
        const statField = series.query?.outStatistics?.[0].outStatisticFieldName ?? [series.y].flat()[0];
        // No need to add the stat if we don't display the point on the chart
        if (nullPolicy !== WebChartNullPolicyTypes.Interpolate) {
            accItemModel[statField] = nullPolicy === WebChartNullPolicyTypes.Zero ? 0 : null;
        }
        return accItemModel;
    }, {});
    return itemModel;
}
function addMissingEdgeBins(props) {
    const { dateMaxTimestamp, numberOfFinalBinsWithinDataRange, numberOfSingleBinsWithinDataRange, data, seriesConfig, timeIntervalInfo, } = props;
    const { timeIntervalSize, timeIntervalUnits } = timeIntervalInfo;
    const { timeAggregationType, x } = seriesConfig[0];
    let newDateMin = data[0][x];
    let newDateMax = dateMaxTimestamp;
    if (timeIntervalSize !== undefined && Number.isFinite(timeIntervalSize)) {
        const missingEdgeBins = numberOfSingleBinsWithinDataRange / numberOfFinalBinsWithinDataRange !== timeIntervalSize;
        if (missingEdgeBins) {
            let numberOfMissingEdgeBins = Math.ceil(numberOfSingleBinsWithinDataRange / numberOfFinalBinsWithinDataRange) *
                numberOfFinalBinsWithinDataRange -
                numberOfSingleBinsWithinDataRange;
            if (timeIntervalUnits === WebChartTimeIntervalUnits.Weeks) {
                numberOfMissingEdgeBins *= 7;
            }
            // Getting a bin model, referencing all the y/stat field values with a 0 or null value
            const binModel = getBinModel(seriesConfig);
            // If we need to snap the last bin, we'll need to add dates at the beginning
            if (timeAggregationType === WebChartTimeAggregationTypes.End) {
                let binDate = data[0][x];
                for (let i = 0; i < numberOfMissingEdgeBins; i += 1) {
                    binDate = getNextOrPreviousDate({
                        date: binDate,
                        timeIntervalUnits,
                        timeIntervalSize: 1,
                        nextOrPrevious: "previous",
                    });
                    data.push({
                        ...binModel,
                        [x]: binDate,
                        [ChartDefaults.xAxisField]: binDate,
                    });
                }
                // new min date is the last date we added to the data array (which is not sorted yet)
                if (numberOfMissingEdgeBins > 0) {
                    newDateMin = data[data.length - 1][x];
                }
            }
            else {
                // If we need to snap the first bin, we'll need to add dates at the end
                let binDate = data[data.length - 1][x];
                for (let i = 0; i < numberOfMissingEdgeBins; i += 1) {
                    binDate = getNextOrPreviousDate({
                        date: binDate,
                        timeIntervalUnits,
                        timeIntervalSize: 1,
                        nextOrPrevious: "next",
                    });
                    data.push({
                        ...binModel,
                        [x]: binDate,
                        [ChartDefaults.xAxisField]: binDate,
                    });
                }
                // new max date is the last date we added to the data array
                newDateMax = data[data.length - 1][x];
            }
        }
    }
    return { newDateMin, newDateMax };
}
function isBinSetComplete(props) {
    const { numberOfSingleBinsWithinDataRange, dataLength, timeIntervalUnits } = props;
    // Given `getNumberOfBinsWithinDataRange()` returns a diff in days for weeks, months and years,
    // we need to divide the result to get a better approximation
    const adjustedDataLength = adjustElementCount(dataLength, timeIntervalUnits);
    return adjustedDataLength >= numberOfSingleBinsWithinDataRange;
}
async function getTimeBinningStatistics(props) {
    const { queryObject, queryConfig, x } = props;
    const outStatisticFieldNameDateMin = `MIN_${x}`;
    const outStatisticFieldNameDateMax = `MAX_${x}`;
    const outStatisticFieldNameDateCount = `COUNT_${x}`;
    const modifiedQueryConfig = {
        ...queryConfig,
        outStatistics: [
            {
                statisticType: RESTStatisticType.Minimum,
                onStatisticField: x,
                outStatisticFieldName: outStatisticFieldNameDateMin,
            },
            {
                statisticType: RESTStatisticType.Maximum,
                onStatisticField: x,
                outStatisticFieldName: outStatisticFieldNameDateMax,
            },
            {
                statisticType: RESTStatisticType.Count,
                onStatisticField: x,
                outStatisticFieldName: outStatisticFieldNameDateCount,
            },
        ],
    };
    // deleting the group by and order by fields (computed for the unique query)
    delete modifiedQueryConfig.groupByFieldsForStatistics;
    delete modifiedQueryConfig.orderByFields;
    const minMaxDates = await ip({
        queryObject,
        queryConfig: modifiedQueryConfig,
    });
    const dateMinTimestamp = minMaxDates.get(outStatisticFieldNameDateMin);
    const dateMaxTimestamp = minMaxDates.get(outStatisticFieldNameDateMax);
    const numberOfFeatures = minMaxDates.get(outStatisticFieldNameDateCount);
    return { dateRange: { dateMinTimestamp, dateMaxTimestamp }, numberOfFeatures };
}
function addMissingIntermediateBins(props) {
    const { newDateMin, newDateMax, seriesConfig, data, numberOfSingleBinsWithinDataRange, initialNumberOfBins, timeIntervalInfo, } = props;
    const { timeIntervalUnits } = timeIntervalInfo;
    const completeData = data;
    // Calculating if bins are missing (empty)
    const binsAreMissing = !isBinSetComplete({
        numberOfSingleBinsWithinDataRange,
        dataLength: initialNumberOfBins,
        timeIntervalUnits,
    });
    if (binsAreMissing) {
        const { x, timeAggregationType } = seriesConfig[0];
        // Getting a bin model, referencing all the y/stat field values with a 0 or null value
        const binModel = getBinModel(seriesConfig);
        // TODO: if the null policy is null or interpolate, we could complete only the first and last bins and make it way more efficient?
        // We either start from the end or the beginning and go forward or backward according to the `timeAggregationType`
        const startingDate = timeAggregationType === WebChartTimeAggregationTypes.End ? newDateMax : newDateMin;
        let nextDate = startingDate;
        let index = timeAggregationType === WebChartTimeAggregationTypes.End ? data.length - 1 : 0;
        while (index < data.length &&
            ((timeAggregationType === WebChartTimeAggregationTypes.End && nextDate > newDateMin) ||
                (timeAggregationType !== WebChartTimeAggregationTypes.End && nextDate < newDateMax))) {
            if (nextDate !== data[index][x]) {
                completeData.push({
                    ...binModel,
                    [x]: nextDate,
                    [ChartDefaults.xAxisField]: nextDate,
                });
            }
            else {
                index = timeAggregationType === WebChartTimeAggregationTypes.End ? index - 1 : index + 1;
            }
            nextDate = getNextOrPreviousDate({
                date: nextDate,
                timeIntervalUnits: timeIntervalUnits === WebChartTimeIntervalUnits.Months ||
                    timeIntervalUnits === WebChartTimeIntervalUnits.Years
                    ? WebChartTimeIntervalUnits.Days
                    : timeIntervalUnits,
                timeIntervalSize: 1,
                nextOrPrevious: timeAggregationType === WebChartTimeAggregationTypes.End ? "previous" : "next",
            });
        }
    }
    return completeData;
}
function trimBins(props) {
    const { data, seriesConfig, dateMinTimestamp, dateMaxTimestamp } = props;
    const { timeAggregationType } = seriesConfig[0];
    const completeData = data;
    if (seriesConfig[0].trimIncompleteTimeInterval !== false) {
        // Getting the new date min/max as per adding edge bins or grouping
        const newDateMin = data[0][ChartDefaults.dateBinningRange][0];
        const newDateMax = data[data.length - 1][ChartDefaults.dateBinningRange][1];
        // if the new start/end date don't match the original start/end date, it means the edge bin is incomplete
        const edgeBinsIncomplete = timeAggregationType === WebChartTimeAggregationTypes.End
            ? newDateMin < dateMinTimestamp
            : newDateMax > dateMaxTimestamp;
        if (edgeBinsIncomplete) {
            if (timeAggregationType === WebChartTimeAggregationTypes.End) {
                // removing the first bins until the range start date is greater than the min date (removing one should be enough but it helps securing the feature)
                let currentBinRangeDateMin = newDateMin;
                while (currentBinRangeDateMin < dateMinTimestamp && data.length > 0) {
                    data.shift(); // remove first bin
                    if (data.length > 0) {
                        currentBinRangeDateMin = data[0][ChartDefaults.dateBinningRange]?.[0];
                    } // new first date
                }
            }
            else {
                // removing the last bins until the range end date is smaller than the max date (removing one should be enough but it helps securing the feature)
                let currentBinRangeDateMax = newDateMax;
                while (currentBinRangeDateMax > dateMaxTimestamp && data.length > 0) {
                    data.pop();
                    if (data.length > 0) {
                        currentBinRangeDateMax = data[data.length - 1][ChartDefaults.dateBinningRange]?.[1];
                    } // new last date
                }
            }
        }
    }
    return completeData;
}
function addWhenCase$1(props) {
    const { groupByFieldsForStatistics, dateField, queryStartDate, queryEndDate, y, binIndex, lastBin } = props;
    let newGroupByField = groupByFieldsForStatistics === "" ? GroupByKeywords.groupByCaseBegin : groupByFieldsForStatistics;
    newGroupByField = On(dp, {
        groupByFieldsForStatistics: newGroupByField,
        dateField,
        startDate: `${queryStartDate}`,
        endDate: `${queryEndDate}`,
        y: [y].flat()[0],
        binIndex: `${binIndex}`,
        endDateOperand: lastBin ? "<=" : "<", // we use <= to catch the last bin's value, < otherwise
    });
    return newGroupByField;
}
function* queryMedianGenerator(props) {
    const { queryObject, seriesConfig, queryConfig, completeData } = props;
    // we'll yield one query per series
    for (let iSeries = 0; iSeries < seriesConfig.length; iSeries += 1) {
        const currentSeriesConfig = seriesConfig[iSeries];
        const { query, x, y } = currentSeriesConfig;
        const statField = query?.outStatistics?.[0]?.onStatisticField ?? "";
        // the stat is a median (percentile continuous) on the y field
        const dataOutStatistics = [
            {
                onStatisticField: statField,
                outStatisticFieldName: RESTStatisticType.ContinuousPercentile,
                statisticType: RESTStatisticType.ContinuousPercentile,
                statisticParameters: { value: 0.5 },
            },
        ];
        // starting the group by for stats
        let groupByFieldsForStatistics = typeof GroupByKeywords.groupByCaseBegin === "string" ? GroupByKeywords.groupByCaseBegin : "";
        // for each item in the data array we'll add a `when` case
        for (let iData = 0; iData < completeData.length; iData += 1) {
            const dataItem = completeData[iData];
            const [startDate, endDate] = dataItem[ChartDefaults.dateBinningRange];
            const queryStartDate = transformDateToQueryFormat(startDate);
            const queryEndDate = transformDateToQueryFormat(endDate);
            // completing the existing string with a new case
            groupByFieldsForStatistics = addWhenCase$1({
                groupByFieldsForStatistics,
                queryStartDate,
                queryEndDate,
                dateField: x,
                y: [y].flat()[0],
                binIndex: iData,
                lastBin: iData === completeData.length - 1,
            });
        }
        // ending the group by for stats
        groupByFieldsForStatistics = `${groupByFieldsForStatistics} ${GroupByKeywords.groupByCaseEnd}`;
        // no need to order the fields in this query / the `orderByFields` can make the query fail
        // see issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/5642
        const medianQuery = {
            ...queryConfig,
            groupByFieldsForStatistics: [groupByFieldsForStatistics],
            outStatistics: dataOutStatistics,
            orderByFields: undefined,
        };
        yield op({
            queryObject,
            queryConfig: medianQuery,
            noBatch: true,
        });
    }
}
async function calculateBinsMedianValues(props) {
    const { queryObject, data, seriesConfig, queryConfig } = props;
    const completeData = data;
    const { statisticType } = seriesConfig[0].query?.outStatistics?.[0] ?? StatisticsDefaults;
    if (statisticType === RESTStatisticType.ContinuousPercentile && completeData.length > 0) {
        const medianValuesGenerator = queryMedianGenerator({
            queryObject,
            completeData,
            seriesConfig,
            queryConfig,
        });
        // executing the queries and flattening them to get a single array
        const allMedianValues = (await Promise.all(medianValuesGenerator)).flat();
        // we proceed only if there's at least one result
        if (allMedianValues.length > 0) {
            // using the first result to identify the property storing the calculated stat
            const { isInItem, expr } = _l(allMedianValues[0].attributes);
            if (isInItem) {
                allMedianValues.forEach((value) => {
                    const binKey = value.attributes[`${expr}`];
                    if (binKey !== undefined) {
                        // we retrieve the `y` value and bin index
                        const [y, binIndex] = binKey.split("|");
                        if (binIndex !== undefined) {
                            const medianValue = value.attributes[RESTStatisticType.ContinuousPercentile];
                            // we update the data array for the right series (y value) at the right index
                            completeData[binIndex][`${y}`] = medianValue;
                        }
                    }
                });
            }
        }
    }
    return completeData;
}
async function processTimeBinningData(props) {
    const { queryObject, data, x, queryConfig, seriesConfig, dateRange, timeIntervalInfo } = props;
    const { dateMinTimestamp, dateMaxTimestamp } = dateRange;
    let completeData = data;
    const initialNumberOfBins = data.length;
    // Sorting before starting the client side binning, as the server returns a sort by string ("2020-10" < "2010-1")
    sortWebChartDataItemsUsingDirectionalSort({
        arrayToSort: completeData,
        sortingField: x,
    });
    // we need at lest 2 bins to do anything
    if (initialNumberOfBins > 1) {
        const { numberOfFinalBinsWithinDataRange, numberOfSingleBinsWithinDataRange } = getNumberOfBinsWithinDataRange({
            dateMinTimestamp,
            dateMaxTimestamp,
            timeIntervalInfo,
        });
        const { newDateMin, newDateMax } = addMissingEdgeBins({
            dateMaxTimestamp,
            data: completeData,
            numberOfFinalBinsWithinDataRange,
            numberOfSingleBinsWithinDataRange,
            seriesConfig,
            timeIntervalInfo,
        });
        completeData = addMissingIntermediateBins({
            newDateMin,
            newDateMax,
            seriesConfig,
            data: completeData,
            initialNumberOfBins,
            numberOfSingleBinsWithinDataRange,
            timeIntervalInfo,
        });
        // Sorting before re-binning
        sortWebChartDataItemsUsingDirectionalSort({
            arrayToSort: completeData,
            sortingField: x,
        });
        completeData = groupBinsByIntervalSize({
            data: completeData,
            seriesConfig,
            dateMinTimestamp,
            dateMaxTimestamp,
            newDateMin,
            newDateMax,
            timeIntervalInfo,
        });
        completeData = trimBins({
            data: completeData,
            seriesConfig,
            dateMinTimestamp,
            dateMaxTimestamp,
        });
        completeData = await calculateBinsMedianValues({ queryObject, data: completeData, seriesConfig, queryConfig });
    }
    return completeData;
}
function getTargetedNumberOfBins(numberOfFeatures) {
    // A value between 8 and 128, according to the number of values in the data set. The following calculation has been copied from AGS Pro
    const targetedNumberOfBins = Math.floor(Math.min(Math.max(8, Math.sqrt(numberOfFeatures ?? 8)), 128) + 0.5);
    return targetedNumberOfBins;
}
/**
 * Calculates the best interval (unit and size) based on the provided data range.
 * This algorithm comes from ArcGIS Pro and was adapter from C++ to ts. See function `GetDefaultTimeInterval`
 * in Pro (actually here: https://devtopia.esri.com/ArcGISPro/ArcGISPro/blob/ddf7cbe19ec80228179e905c9f85e84710f54ab7/MapX/CartoX/MappingCore/ChartUtils.cpp#L1621)
 * @param props
 */
function getBestInterval(timeBinningStats) {
    const { dateRange, numberOfFeatures } = timeBinningStats;
    const { dateMinTimestamp, dateMaxTimestamp } = dateRange;
    // Getting an ideal number of bins
    const targetedNumberOfBins = getTargetedNumberOfBins(numberOfFeatures);
    const timeDiff = (dateMaxTimestamp - dateMinTimestamp) / targetedNumberOfBins;
    // 1. we look for the unit that fits the best
    const chosenIndex = pp.findIndex((item) => item.threshold > timeDiff);
    const chosenInterval = pp[chosenIndex];
    const { unitMs, preferredIntervalSize, unit: timeIntervalUnits } = chosenInterval;
    // 2. now we look for the size that fits the best
    // How many hours, days, years... within the date range
    const howManyUnitsInDateRange = timeDiff / unitMs;
    // Looking for the first index that is greater or equal that the number of units within the date range
    const greaterValueIndex = preferredIntervalSize.findIndex((currentIndex) => currentIndex >= howManyUnitsInDateRange);
    // Getting the 2 sizes closest to the target
    const topUnit = preferredIntervalSize[greaterValueIndex];
    const previousUnit = greaterValueIndex === 0 ? preferredIntervalSize[0] : preferredIntervalSize[greaterValueIndex - 1];
    // We look which unit is closer among the 2
    const timeIntervalSize = topUnit - howManyUnitsInDateRange < howManyUnitsInDateRange - previousUnit ? topUnit : previousUnit;
    return { timeIntervalSize, timeIntervalUnits };
}
/**
 * Indicates if calculating the time interval unit and size is necessary for the series.
 * It is necessary if the series is a line series, doesn't provide the interval unit and size
 * while the boolean `setTimeBinningInfoWhenNotProvided` is true.
 * @param props.series The series config
 * @param props.isTimeBinningSeries Indicates whether the series is using the time binning feature
 * @param props.setTimeBinningInfoWhenNotProvided Indicates whether the time interval needs to be recalculated if the one provided is incomplete
 */
function needsToCalculateTimeIntervalInfo(props) {
    const { series, isTimeBinningSeries, setTimeBinningInfoWhenNotProvided } = props;
    let timeIntervalCalculationNeeded = false;
    const seriesType = fl([series]);
    if (seriesType === WebChartTypes.LineSeries && isTimeBinningSeries) {
        const { timeIntervalUnits, timeIntervalSize } = series;
        const timeIntervalInfoIsComplete = isTimeIntervalInfoComplete(timeIntervalUnits, timeIntervalSize);
        // we recalculate the interval whenever the provided interval is
        // incomplete and the boolean `setTimeBinningInfoWhenNotProvided` is set to `true`
        timeIntervalCalculationNeeded = !timeIntervalInfoIsComplete && setTimeBinningInfoWhenNotProvided === true;
    }
    return timeIntervalCalculationNeeded;
}
/**
 * Converts a date from the SQL SQL-92 format 'YYYY-MM-DD HH:mm:ss' to a
 * JS Date
 * @param sqlDate
 * @returns
 */
function createDatefromAttributes(attributes) {
    const dateParts = [];
    for (let i = 1; i <= 6; i += 1) {
        // features supposed to return expr's as year,mont,day,hour,second etc., in that order
        // and the suffix 1,2 will represent that order
        // expr_1 => Year
        // expr_2 => Month
        // expr_3 => Day
        // expr_4 => Hour
        // expr_5 => Second
        // this code will not work if the order is changed or if it has missing units
        // for ex if we receive  expr_1, expr_2 and expr_4 etc., the missing expr_3 will cause issue.
        // it's valid to receive expr_1,expr_2
        const value = attributes[`EXPR_${i}`] ?? attributes[`Expr${i}`] ?? attributes[`expr${i}`] ?? attributes[`EXPR${i}`];
        // when using API's query engine, the results start from EXPR_2 instead of 1
        // ex., groupby statement [ "div_name", "SUBSTRING(string_format6, 1, 4)", "SUBSTRING(string_format6, 6, 2)", … ]
        // since the first groupby field is not an expression it's shifting to 2 but that's not the case with REST API
        // JS API Issue #6283
        if (value !== null) {
            dateParts.push(value);
        }
    }
    return DateTime.local(Number(dateParts[0] ?? 1969), Number(dateParts[1] ?? 1), Number(dateParts[2] ?? 1), Number(dateParts[3] ?? 0), Number(dateParts[4] ?? 0), Number(dateParts[5] ?? 0)).valueOf();
}

/**
 * Fill in the DataInfo object with invalid type information according to the series type.
 * @param props.dataInfo the data info object to be filled in.
 * @param props.chartType the chart type
 * @param props.subError a little more detail if needed about what is wrong with the specific series
 */
function completeDataExceedLimitInfo(props) {
    const { dataInfo, chartType, subError } = props;
    dataInfo.valid = false;
    switch (chartType) {
        case WebChartTypes.BarSeries:
        case WebChartTypes.ComboLineAndBarSeries:
            dataInfo.invalidType = $c.BarElementExceedsLimit;
            break;
        case WebChartTypes.LineSeries:
            dataInfo.invalidType = $c.LineChartExceedsLimit;
            break;
        case WebChartTypes.PieSeries:
            dataInfo.invalidType = $c.PieChartExceedsLimit;
            break;
        case WebChartTypes.GaugeSeries:
            dataInfo.invalidType = $c.GaugeExceedsLimit;
            break;
        case WebChartTypes.BoxPlotSeries:
            if (subError?.outlierLimit === true) {
                dataInfo.invalidType = $c.BoxPlotOutliersExceedsLimit;
            }
            else {
                dataInfo.invalidType = $c.BoxPlotExceedsLimit;
            }
            break;
    }
}
/**
 * Fill in the DataInfo object with the invalid type information for Pie chart.
 * @param dataInfo the data info object to be filled in.
 * @param invalidType the invalid type
 */
function completeDataUnsupportedPieInfo(dataInfo, invalidType) {
    dataInfo.valid = false;
    dataInfo.invalidType = invalidType;
}
/**
 * Creates a warning object
 * @param props
 */
async function getDataWarningObject(props) {
    const { invalidType, chartLimits, elementCount, seriesCount, queryObject, filterBySelection, formatLocale = jn().formatLocale, isTemporalLineChart, errorStrings, } = props;
    let message = errorStrings.errors.defaultInvalidChart;
    let params;
    const basicNumberFormatter = new Intl.NumberFormat(formatLocale);
    const limits = Zo(chartLimits);
    const { maxCategoryCount } = limits;
    // default header
    let header = errorStrings.modalHeaders.invalidChart;
    switch (invalidType) {
        case $c.BarElementExceedsLimit: {
            header = errorStrings.modalHeaders.tooManyFeatures;
            let totalLimit = Number.NaN;
            let seriesLimit = Number.NaN;
            let errorMessage = "";
            // adjusting the message and its parameters according to the number of series
            if (seriesCount !== undefined) {
                if (seriesCount <= limits.maxBarChartSeriesCount) {
                    if (seriesCount === 1) {
                        errorMessage = errorStrings.errors.uniqueSeriesBarCountCannotExceedLimit;
                        totalLimit = limits.maxBarUniqueSeriesCountTotal;
                    }
                    else if (seriesCount === 2) {
                        errorMessage = errorStrings.errors.twoSeriesBarCountCannotExceedLimit;
                        totalLimit = limits.maxBarTwoSeriesCountTotal;
                        seriesLimit = limits.maxBarTwoSeriesCountPerSeries;
                    }
                    else if (seriesCount > 2) {
                        errorMessage = errorStrings.errors.threePlusSeriesBarCountCannotExceedLimit;
                        totalLimit = limits.maxBarThreePlusSeriesCountTotal;
                        seriesLimit = limits.maxBarThreePlusSeriesCountPerSeries;
                    }
                }
                else {
                    errorMessage = errorStrings.errors.barSeriesCountCannotExceedLimit;
                    seriesLimit = limits.maxBarChartSeriesCount;
                }
            }
            const formattedTotalLimit = basicNumberFormatter.format(totalLimit);
            const formattedSeriesLimit = basicNumberFormatter.format(seriesLimit);
            const formattedElementCount = elementCount !== undefined ? basicNumberFormatter.format(elementCount) : "";
            message = On(errorMessage, {
                totalLimit: formattedTotalLimit,
                seriesLimit: formattedSeriesLimit,
                elementCount: formattedElementCount,
            });
            params = {
                actualCount: elementCount ?? Number.NaN,
                totalLimit,
                seriesLimit,
            };
            break;
        }
        case $c.LineChartExceedsLimit:
            {
                header = errorStrings.modalHeaders.tooManyFeatures;
                let totalLimit = Number.NaN;
                let seriesLimit = Number.NaN;
                let errorMessage = "";
                // adjusting the message and its parameters according to the number of series
                if (seriesCount !== undefined) {
                    if (seriesCount <= limits.maxLineChartSeriesCount) {
                        if (seriesCount === 1) {
                            errorMessage = isTemporalLineChart
                                ? errorStrings.errors.uniqueTemporalSeriesLineCountCannotExceedLimit
                                : errorStrings.errors.uniqueSeriesLineCountCannotExceedLimit;
                            totalLimit = limits.maxLineUniqueSeriesCountTotal;
                        }
                        else if (seriesCount === 2) {
                            errorMessage = isTemporalLineChart
                                ? errorStrings.errors.twoTemporalSeriesLineCountCannotExceedLimit
                                : errorStrings.errors.twoSeriesLineCountCannotExceedLimit;
                            totalLimit = limits.maxLineTwoSeriesCountTotal;
                            seriesLimit = limits.maxLineTwoSeriesCountPerSeries;
                        }
                        else if (seriesCount > 2) {
                            errorMessage = isTemporalLineChart
                                ? errorStrings.errors.threePlusTemporalSeriesLineCountCannotExceedLimit
                                : errorStrings.errors.threePlusSeriesLineCountCannotExceedLimit;
                            totalLimit = limits.maxLineThreePlusSeriesCountTotal;
                            seriesLimit = limits.maxLineThreePlusSeriesCountPerSeries;
                        }
                    }
                    else {
                        errorMessage = errorStrings.errors.lineSeriesCountCannotExceedLimit;
                        seriesLimit = limits.maxLineChartSeriesCount;
                    }
                }
                const formattedTotalLimit = basicNumberFormatter.format(totalLimit);
                const formattedSeriesLimit = basicNumberFormatter.format(seriesLimit);
                const formattedElementCount = elementCount !== undefined ? basicNumberFormatter.format(elementCount) : "";
                message = On(errorMessage, {
                    elementCount: formattedElementCount,
                    seriesLimit: formattedSeriesLimit,
                    totalLimit: formattedTotalLimit,
                });
                params = {
                    actualCount: elementCount ?? Number.NaN,
                    totalLimit,
                    seriesLimit,
                };
            }
            break;
        case $c.BoxPlotExceedsLimit:
            {
                header = errorStrings.modalHeaders.tooManyFeatures;
                let totalLimit = Number.NaN;
                let seriesLimit = Number.NaN;
                let errorMessage = "";
                if (seriesCount !== undefined) {
                    if (seriesCount <= limits.maxBoxPlotSeriesCount) {
                        if (seriesCount === 1) {
                            errorMessage = errorStrings.errors.uniqueSeriesBoxCountCannotExceedLimit;
                            totalLimit = limits.maxBoxUniqueSeriesCountTotal;
                        }
                        else if (seriesCount === 2) {
                            errorMessage = errorStrings.errors.twoSeriesBoxCountCannotExceedLimit;
                            totalLimit = limits.maxBoxTwoSeriesCountTotal;
                            seriesLimit = limits.maxBoxTwoSeriesCountPerSeries;
                        }
                        else if (seriesCount > 2) {
                            errorMessage = errorStrings.errors.threePlusBoxLineCountCannotExceedLimit;
                            totalLimit = limits.maxBoxThreePlusSeriesCountTotal;
                            seriesLimit = limits.maxBoxThreePlusSeriesCountPerSeries;
                        }
                    }
                    else {
                        errorMessage = errorStrings.errors.boxSeriesCountCannotExceedLimit;
                        seriesLimit = limits.maxBoxPlotSeriesCount;
                    }
                }
                const formattedTotalLimit = basicNumberFormatter.format(totalLimit);
                const formattedSeriesLimit = basicNumberFormatter.format(seriesLimit);
                const formattedElementCount = elementCount !== undefined ? basicNumberFormatter.format(elementCount) : "";
                message = On(errorMessage, {
                    elementCount: formattedElementCount,
                    seriesLimit: formattedSeriesLimit,
                    totalLimit: formattedTotalLimit,
                });
                params = {
                    actualCount: elementCount ?? Number.NaN,
                    totalLimit,
                    seriesLimit,
                };
            }
            break;
        case $c.BoxPlotOutliersExceedsLimit:
            {
                header = errorStrings.modalHeaders.tooManyFeatures;
                const errorMessage = errorStrings.errors.boxSeriesOutlierCannotExceedLimit;
                const totalLimit = limits.maxBoxPlotOutlierLimit;
                const formattedTotalLimit = basicNumberFormatter.format(totalLimit);
                message = On(errorMessage, {
                    totalLimit: formattedTotalLimit,
                });
                params = { actualCount: elementCount ?? Number.NaN, totalLimit };
            }
            break;
        case $c.PieChartExceedsLimit:
            {
                header = errorStrings.modalHeaders.tooManyFeatures;
                const errorMessage = errorStrings.errors.pieChartSlicesCannotExceedLimit;
                const sliceLimit = limits.maxPieChartSliceCountTotal;
                const formattedSliceLimit = basicNumberFormatter.format(sliceLimit);
                const sliceCount = elementCount !== undefined ? basicNumberFormatter.format(elementCount) : "";
                message = On(errorMessage, {
                    sliceCount,
                    totalLimit: formattedSliceLimit,
                });
                params = {
                    actualCount: elementCount ?? Number.NaN,
                    totalLimit: sliceLimit,
                };
            }
            break;
        case $c.GaugeExceedsLimit:
            {
                header = errorStrings.modalHeaders.tooManyFeatures;
                const errorMessage = errorStrings.errors.gaugeCannotExceedLimit;
                const featureLimit = limits.maxGaugeByFeaturesLimit;
                const formattedFeatureLimit = basicNumberFormatter.format(featureLimit);
                const featureCount = elementCount !== undefined ? basicNumberFormatter.format(elementCount) : "";
                message = On(errorMessage, {
                    featureCount,
                    totalLimit: formattedFeatureLimit,
                });
                params = {
                    actualCount: elementCount ?? Number.NaN,
                    totalLimit: featureLimit,
                };
            }
            break;
        case $c.PieChartMixOfNegativePositiveSlices:
            header = errorStrings.modalHeaders.cannotCombineNegativeAndPositiveSlices;
            message = errorStrings.errors.pieChartCannotHaveMixtureOfPositiveAndNegativeSlices;
            break;
        case $c.NegativeValueInSqrtCalculation:
            header = errorStrings.modalHeaders.invalidData;
            message = errorStrings.errors.negativeValueInDataForSqrtTransformation;
            break;
        case $c.NegativeValueInLogCalculation:
            header = errorStrings.modalHeaders.invalidData;
            message = errorStrings.errors.negativeValueInDataForLogTransformation;
            break;
        case $c.HistogramEmptyField:
            message = errorStrings.errors.histogramEmptyField;
            break;
        case $c.EmptyDataSet:
            header = errorStrings.modalHeaders.noDataAvailable;
            // case when FBS is enabled
            if (filterBySelection === true) {
                message = errorStrings.errors.noDataFBSMessage;
            }
            else if (xs(queryObject)) {
                // case when FBE is enabled
                message = errorStrings.errors.noDataFBEMessage;
            }
            else {
                // case when FBE and FBS are disabled
                message = errorStrings.errors.noDataMessage;
            }
            break;
        case $c.NegativeValueInXAxisLogScale:
            message = errorStrings.errors.logarithmicXAxisNotPossible;
            break;
        case $c.NegativeValueInYAxisLogScale:
            message = errorStrings.errors.logarithmicYAxisNotPossible;
            break;
    }
    // If the switch...case above didn't set a message, we double check the max category count.
    // We could merge this logic within the switch..case but it would repeat multiple times the same conditions.
    if (message === errorStrings.errors.defaultInvalidChart &&
        (invalidType === $c.BarElementExceedsLimit ||
            invalidType === $c.LineChartExceedsLimit ||
            invalidType === $c.PieChartExceedsLimit ||
            invalidType === $c.GaugeExceedsLimit ||
            invalidType === $c.BoxPlotExceedsLimit) &&
        typeof elementCount === "number" &&
        typeof seriesCount === "number" &&
        elementCount / seriesCount > maxCategoryCount) {
        const categoryCount = elementCount / seriesCount;
        message = On(errorStrings.errors.categoryCountCannotExceedLimit, {
            categoryCount: basicNumberFormatter.format(categoryCount),
            maxCategoryCount: basicNumberFormatter.format(maxCategoryCount),
        });
    }
    const warningObject = {
        keyword: invalidType ?? $c.BadData,
        header,
        message,
        params,
    };
    return warningObject;
}

/**
 * Builds a key (string) used to identify the properties carrying the global average and standard deviation stats
 * @param y The numeric field
 * @param statType The type of stat (Average or StandardDeviation)
 */
function getMeanAndStandardDeviationPerFieldKey(y, statType) {
    return `${statType}_${y}`;
}
/**
 * calculate z-score for the given value
 * @param props.value The current value
 * @param props.mean The mean of the whole series
 * @param props.stdDev The standard deviation of the whole series
 */
function calculateZScore(props) {
    const { value, mean, stdDev } = props;
    return (value - mean) / stdDev;
}
/**
 * Adds z-score statistic property and value pair to the box plot data item
 * @param props.dataItem The data item for the given box plot
 * @param props.chartSubType The box plot sub type
 * @param props.y The y value of the box plot series
 * @param props.splitByValue The split-by value for the given box plot series
 * @param props.meanPerField The mean from a whole numeric field
 * @param props.stdDevPerField The standard deviation from a whole numeric field
 */
function addZScoreItemToDataItem(props) {
    const { dataItem, chartSubType, y, splitByValue, meanPerField, stdDevPerField } = props;
    const standardizedItem = dataItem;
    let getBoxPlotYValueProps = {
        chartSubType,
        y,
        splitByValue,
    };
    // fetch the data item's mean and standard deviation
    const meanKey = ls({
        ...getBoxPlotYValueProps,
        key: Wl.Average,
    });
    const stdKey = ls({
        ...getBoxPlotYValueProps,
        key: Wl.StandardDeviation,
    });
    const mean = meanPerField ?? Number(dataItem[meanKey]);
    const stdDev = stdDevPerField ?? Number(dataItem[stdKey]);
    if (Number.isFinite(mean) && Number.isFinite(stdDev)) {
        // looping through each stat to calculate the z-score on each one of them (min z-score, max z-score...)
        Object.values(Wl).forEach((currentKey) => {
            const prop = ls({
                key: currentKey,
                y,
                chartSubType,
                splitByValue,
            });
            const dataItemValue = dataItem[prop];
            if (dataItemValue !== undefined && dataItemValue !== null) {
                let value = Number(dataItemValue);
                if (Number.isFinite(value)) {
                    // we set standardizeValues to true since we are calculating the z-score value for each of the statistic in the data item object
                    getBoxPlotYValueProps = {
                        ...getBoxPlotYValueProps,
                        key: currentKey,
                        showOutliers: false,
                        standardizeValues: true,
                    };
                    let statsKey = ls(getBoxPlotYValueProps);
                    // apply z-score transformation
                    standardizedItem[statsKey] = calculateZScore({ mean, stdDev, value });
                    // NOTE: we have to calculate stats key twice for the min and max keys since we annotate these keys with outliers information.
                    // We have already calculate z-score for the min and max keys with no outliers option earlier
                    // Now, we calculate the z-score for the min and max keys if showOutliers is set to true
                    if (currentKey === Wl.Min || currentKey === Wl.Max) {
                        // we set standardizeValues to true since we are calculating the z-score value for each of the statistic in the data item object
                        getBoxPlotYValueProps = {
                            ...getBoxPlotYValueProps,
                            key: currentKey,
                            showOutliers: true,
                            standardizeValues: true,
                        };
                        statsKey = ls(getBoxPlotYValueProps);
                        getBoxPlotYValueProps = {
                            ...getBoxPlotYValueProps,
                            standardizeValues: false,
                            splitByValue,
                        };
                        const propOutlier = ls(getBoxPlotYValueProps);
                        value = Number(dataItem[propOutlier]);
                        if (Number.isFinite(value)) {
                            standardizedItem[statsKey] = calculateZScore({
                                mean,
                                stdDev,
                                value,
                            });
                        }
                    }
                }
            }
        });
    }
    return standardizedItem;
}
/**
 * Processes the data results for the box plot `BoxPlotMultiFields`.
 * The original data from the query contains a unique item that needs to be split into N items, each one corresponding
 * to a numeric field.
 * Input example:
 {
    "BlackorA_min": 0,
    "BlackorA_first_quartile": 0.7,
    "Asianalon_min": 0,
    "Asianalon_first_quartile": 0.4,
    "NativeHaw_min": 0,
    "NativeHaw_first_quartile": 0,
 }
 * Output example:
 [
    {
      "arcgis_charts_box_plot_category": "BlackorA",
        "min": 0,
        "first_quartile": 0.7,
        "min_arcgis_charts_z_score": -0.6491922838582544,
        "first_quartile_arcgis_charts_z_score": -0.5976622236541257,
    },
    {
        "arcgis_charts_box_plot_category": "Asianalon",
        "min": 0,
        "first_quartile": 0.4,
        "min_arcgis_charts_z_score": -0.5440305773301018,
        "first_quartile_arcgis_charts_z_score": -0.39302520780869665,
    },
    {
        "arcgis_charts_box_plot_category": "NativeHaw",
        "min": 0,
        "first_quartile": 0,
        "min_arcgis_charts_z_score": -0.5621414474983282,
        "first_quartile_arcgis_charts_z_score": -0.5621414474983282,
    }
  ]
 * @param props.data The data to process
 * @param props.yList The list of numeric fields used by the chart
 * @param props.calculateZScore determines whether to calculate z-score or not for the box plots.
 */
function processDataForBoxPlotMultiFields(props) {
    const { data, yList, calculateZScore = false } = props;
    // the query returns only one item for that combination
    const uniqueDataItem = data[0];
    // map containing for each numeric field (key: string) a list or properties (value: WebChartDataItem)
    const propertiesPerYValue = new Map();
    // looping through the numeric fields to split the input array
    yList.forEach((y) => {
        // blank object on which we'll add the properties matching the current `y` field
        let yDataItem = {};
        // looping through the unique data item properties
        Object.keys(uniqueDataItem).forEach((propName) => {
            // deleting the prefix as the property will be stored in its own data item
            if (propName.startsWith(y)) {
                yDataItem[propName.replace(`${y}_`, "")] = uniqueDataItem[propName];
            }
            else if (propName.includes(ChartDefaults.rendererSymbolField)) {
                yDataItem[propName] = uniqueDataItem[propName];
            }
            // adding the category
            yDataItem[ChartDefaults.boxPlot.boxPlotCategory] = y;
            if (calculateZScore) {
                // adding z-score
                yDataItem = addZScoreItemToDataItem({
                    dataItem: yDataItem,
                    chartSubType: ml.BoxPlotMultiFields,
                });
            }
        });
        propertiesPerYValue.set(y, yDataItem);
    });
    const processedData = Array.from(propertiesPerYValue.values());
    return processedData;
}
/**
 * Processes the data results for the box plot `MonoFieldAndSplitBy`.
 * The original data from the query contains N items (one for each split-by value) that needs to be regrouped into a unique item.
 * Input example:
  [
    {
        "statename": "Alabama",
        "min": 0.107808,
        "first_quartile": 0.316485,
    },
    {
        "statename": "Arizona",
        "min": 0.293747,
        "first_quartile": 0.4656,
    }
  ]
 * Output example:
  {
      "arcgis_charts_box_plot_category": "Diversity",
      "Alabama_statename": "Alabama",
      "Alabama_min": 0.107808,
      "Alabama_first_quartile": 0.316485,
      "Arizona_statename": "Arizona",
      "Arizona_min": 0.293747,
      "Arizona_first_quartile": 0.4656,
  }
 * @param props.data The data to process
 * @param props.splitByField The split-by field
 * @param props.y The numeric field used by the chart
 */
function processDataForMonoFieldAndSplitBy(props) {
    const { data, splitByField, y } = props;
    // adding the category to the unique item
    const uniqueDataItem = {
        [ChartDefaults.boxPlot.boxPlotCategory]: y,
    };
    // looping through each data items to regroup them
    data.forEach((dataItem) => {
        const splitByValue = dataItem[splitByField];
        if (splitByValue !== undefined) {
            Object.keys(dataItem).forEach((propName) => {
                if (propName === ChartDefaults.rendererSymbolField) {
                    // Append the split-by to the fill color property. This property is not prepended as the others because it follows a
                    // different pattern (see getRendererSymbolField() and computeRendererSymbol())
                    uniqueDataItem[`${propName}_${splitByValue?.toString()}`] = dataItem[propName];
                }
                else if (propName === ChartDefaults.boxPlot.boxPlotMeanLineMarkerId) {
                    uniqueDataItem[propName] = dataItem[propName];
                }
                else {
                    // Prepend the split-by to the property name as all the properties are regrouped under one unique item and need
                    // to be differentiated from each other
                    uniqueDataItem[`${splitByValue?.toString()}_${propName}`] = dataItem[propName];
                }
            });
        }
    });
    const processedData = [uniqueDataItem];
    return processedData;
}
/**
 * Processes the data results for the box plot `BoxPlotMultiFieldsAndSplitBy`.
 * The original data from the query contains N items (one for each split-by value) that needs to be regrouped into N items,
 * N being the number of numeric fields used by the chart.
 * Example:
 * Let's take an example of box plot multi split by field case with y being an array of values (e.g. ["Red", "White"].
 * We assume for this example that we have x set in the series config as an empty string " "
 * And say the box plot has four series which represents car brands. When we send query object to jsapi,
 * we will get result and data argument to this function will look something like following:
 * [{Red_BOX_PLOT_STATS, WHITE_BOX_PLOT_STATS, car: "bmw"},
 * {Red_BOX_PLOT_STATS, WHITE_BOX_PLOT_STATS, car: "toyota"},
 * {Red_BOX_PLOT_STATS, WHITE_BOX_PLOT_STATS, car: "dodge"},
 * {Red_BOX_PLOT_STATS, WHITE_BOX_PLOT_STATS, car: "ford"}]
 * This object is not a valid data that we can feed to our initialize and render box plot logics.
 * The data has to be instead grouped together using colors.
 * So, this function transforms the data argument and return the  to the following valid format:
 * [{Red_BOX_PLOT_STATS_bmw, Red_BOX_PLOT_STATS_toyota, Red_BOX_PLOT_STATS_dodge, Red_BOX_PLOT_STATS_ford, arcgis_charts_box_plot_category: "Red"},
 * {White_BOX_PLOT_STATS_bmw, White_BOX_PLOT_STATS_toyota, White_BOX_PLOT_STATS_dodge, White_BOX_PLOT_STATS_ford, arcgis_charts_box_plot_category: "White"}]
 * @param {WebChartBoxPlotSeries} props.splitByField - The split-by field.
 * @param {WebChartDataItem[]} props.data - The array of data items.
 * @param {string[]} props.yList - The array of y values.
 * @param {boolean} props.calculateZScore determines whether to calculate z-score or not for the box plots.
 * @param {WebChartDataItem} props.meanAndStdDevPerField Object containing the mean and stddev for all the numeric fields used by the chart
 * @returns {WebChartDataItem[]} The grouped data.
 */
function processDataForBoxPlotMultiFieldsAndSplitBy(props) {
    const { splitByField, data, yList, calculateZScore = false, meanAndStdDevPerField } = props;
    const propertiesPerYValue = new Map();
    // looping through the data items
    data.forEach((dataItem) => {
        const splitByValue = dataItem[splitByField];
        yList.forEach((y) => {
            let item = {
                [ChartDefaults.boxPlot.boxPlotCategory]: y,
            };
            Object.entries(dataItem).forEach(([key, value]) => {
                if (key.startsWith(`${y}_`)) {
                    // Prepend the split-by value and delete the `y` field from the property name
                    item[`${splitByValue}_${key.replace(`${y}_`, "")}`] = value;
                }
                else if (key.includes(ChartDefaults.rendererSymbolField)) {
                    // Append the split-by to the fill color property. This property is not prepended as the others because it follows a
                    // different pattern (see getRendererSymbolField() and computeRendererSymbol())
                    item[`${key}_${splitByValue}`] = value;
                }
                else if (key === ChartDefaults.boxPlot.boxPlotMeanLineMarkerId) {
                    item[key] = dataItem[key];
                }
            });
            if (calculateZScore) {
                // adding the z-score to the item
                // we use the mean and stddev per field for that box plot combination (Refer to issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6472)
                item = addZScoreItemToDataItem({
                    dataItem: item,
                    chartSubType: ml.BoxPlotMultiFieldsAndSplitBy,
                    splitByValue,
                    meanPerField: meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.Average)],
                    stdDevPerField: meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.StandardDeviation)],
                });
            }
            // merging the data item properties with the existing ones from the same y value
            propertiesPerYValue.set(y, {
                ...(propertiesPerYValue.get(y) ?? {}),
                ...item,
            });
        });
    });
    const processedData = Array.from(propertiesPerYValue.values());
    return processedData;
}
/**
 * Processes the data results for the box plot `BoxPlotMultiFieldsAndCategory`.
 * The original data from the query contains N items (one for each category). That structure is good enough for the
 * chart, we just need to add the z-score value to each data item.
 * Input example:
 [
  {
    "statename": "Alabama",
    "BlackorA_min": 0.9,
    "BlackorA_first_quartile": 11.4,
    "Asianalon_min": 0.1,
    "Asianalon_first_quartile": 0.3,
  },
  {
    "statename": "Arizona",
    "BlackorA_min": 0.7,
    "BlackorA_first_quartile": 0.9,
    "Asianalon_min": 0.4,
    "Asianalon_first_quartile": 0.7,
  }
 ]
 * Output example:
 [
  {
    "statename": "Alabama",
    "BlackorA_min": 0.9,
    "BlackorA_first_quartile": 11.4,
    "Asianalon_min": 0.1,
    "Asianalon_first_quartile": 0.3,
    "BlackorA_min_arcgis_charts_z_score": -1.2800077821231848,
    "BlackorA_first_quartile_arcgis_charts_z_score": -0.7913959893834819,
    "Asianalon_min_arcgis_charts_z_score": -1.0168696170680882,
    "Asianalon_first_quartile_arcgis_charts_z_score": -0.7279862031282903,
  },
  {
    "statename": "Arizona",
    "BlackorA_min": 0.7,
    "BlackorA_first_quartile": 0.9,
    "Asianalon_min": 0.4,
    "Asianalon_first_quartile": 0.7,
    "BlackorA_min_arcgis_charts_z_score": -0.8999409137053357,
    "BlackorA_first_quartile_arcgis_charts_z_score": -0.7830654703669805,
    "Asianalon_min_arcgis_charts_z_score": -1.0105167683375755,
    "Asianalon_first_quartile_arcgis_charts_z_score": -0.7133059541206415,
  }
 ]
 * @param props.data The data to process
 * @param props.yList The list of numeric fields used by the chart
 * @param props.calculateZScore determines whether to calculate z-score or not for the box plots.
 * @param props.meanAndStdDevPerField Object containing the mean and stddev for all the numeric fields used by the chart
 */
function processDataForBoxPlotMultiFieldsAndCategory(props) {
    const { data, yList, calculateZScore = false, meanAndStdDevPerField } = props;
    const processedData = data;
    if (calculateZScore) {
        // adding the z-score to each data item
        // we use the mean and stddev per field for that box plot combination (Refer to issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6472)
        processedData.forEach((dataItem) => {
            yList.forEach((y) => {
                addZScoreItemToDataItem({
                    dataItem,
                    chartSubType: ml.BoxPlotMultiFieldsAndCategory,
                    y,
                    meanPerField: meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.Average)],
                    stdDevPerField: meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.StandardDeviation)],
                });
            });
        });
    }
    return processedData;
}
/**
 * Process the box plot results for the box plot `BoxPlotMonoFieldAndCategoryAndSplitBy`.
 * The original data from the query has N*M items (N for the number of categories, M for the number of split-by values) that needs
 * to be grouped into M items.
 * Input example:
 [
    {
        "neighbourhood_group": "Bronx",
        "room_type": "Entire home/apt",
        "min": 0,
        "first_quartile": 1,
    },
    {
        "neighbourhood_group": "Bronx",
        "room_type": "Private room",
        "min": 0,
        "first_quartile": 1,
    },
    {
        "neighbourhood_group": "Brooklyn",
        "room_type": "Entire home/apt",
        "min": 0,
        "first_quartile": 2,
    },
    {
        "neighbourhood_group": "Brooklyn",
        "room_type": "Private room",
        "min": 0,
        "first_quartile": 1,
    }
  ]
 * Output example:
  [
    {
        "neighbourhood_group": "Bronx",
        "Entire home/apt_min": 0,
        "Entire home/apt_first_quartile": 1,
        "Private room_min": 0,
        "Private room_first_quartile": 1,
    },
    {
        "neighbourhood_group": "Brooklyn",
        "Entire home/apt_min": 0,
        "Entire home/apt_first_quartile": 2,
        "Private room_min": 0,
        "Private room_first_quartile": 1,
    }
  ]
 * @param {string} props.splitByField The split-by field
 * @param {string} props.x The category field
 * @param {WebChartDataItem[]} props.data The fetched data to be processed.
 */
function processDataForBoxPlotMonoFieldAndCategoryAndSplitBy(props) {
    const { splitByField, x, data } = props;
    const propertiesPerCategory = new Map();
    data.forEach((dataItem) => {
        const currentCategory = dataItem[x];
        const item = { [x]: currentCategory };
        const splitByValue = dataItem[splitByField];
        Object.entries(dataItem).forEach(([key, value]) => {
            if (key.includes(ChartDefaults.rendererSymbolField)) {
                // appending the split-by value to the fill color value (renderer color)
                item[`${ChartDefaults.rendererSymbolField}_${splitByValue?.toString()}`] = value;
            }
            else if (key === ChartDefaults.boxPlot.boxPlotMeanLineMarkerId) {
                item[key] = dataItem[key];
            }
            else if (key !== splitByField && key !== x) {
                // prepend the split-by value when needed
                const newKey = key !== ChartDefaults.xAxisField && key !== ChartDefaults.originalCategoryValue
                    ? `${splitByValue?.toString()}_${key}`
                    : key;
                item[newKey] = value;
            }
        });
        // merging the properties of the current data item with the existing one from the same category
        propertiesPerCategory.set(currentCategory, {
            ...(propertiesPerCategory.get(currentCategory) ?? {}),
            ...item,
        });
    });
    const processedData = Array.from(propertiesPerCategory.values());
    return processedData;
}
/**
 * Adds missing alternative data to the given chart configuration and data.
 * This happens when fetchBoxPlotAlternativeData() doesn't bring back results for a specific field.
 * In that case we set the alternative data to the original data.
 * @param chartConfig The chart config
 * @param data The data to add missing alternative data to
 */
function addMissingAlternativeData(chartConfig, data) {
    const { series: seriesConfig } = chartConfig;
    const firstSeries = seriesConfig[0];
    const { y } = firstSeries;
    const chartSubType = ts(chartConfig.series);
    const getBoxPlotYValueProps = {
        y: chartSubType === ml.BoxPlotMultiFieldsAndCategory ? y : undefined,
        chartSubType,
    };
    // Get all the split-by values
    const splitByValues = chartConfig.series.map((s) => {
        let splitByValue = Ql({
            where: s.query?.where,
            normalize: false,
            escape: true,
        });
        if (splitByValue !== null && `${splitByValue}`.startsWith("'") && `${splitByValue}`.endsWith("'")) {
            splitByValue = splitByValue.substring(1, splitByValue.length - 1);
        }
        return splitByValue;
    });
    // If the array is empty (not using split-by) then add a blank value to make sure the split-by for loop below still runs once for each numeric field.
    if (splitByValues.length === 0) {
        splitByValues.push(" ");
    }
    data.forEach((dataItem) => {
        // Looping through each split-by value. As mentioned above, if there is no split-by, the loop will run once on an empty value
        splitByValues.forEach((splitByValue) => {
            // for C5, C6, C7 we need to use the proper split-by value as it is used as a prefix for the properties
            getBoxPlotYValueProps.splitByValue = splitByValue;
            const minFieldWOutliers = ls({
                ...getBoxPlotYValueProps,
                key: Wl.Min,
                showOutliers: true,
            });
            const minField = ls({
                ...getBoxPlotYValueProps,
                key: Wl.Min,
                showOutliers: false,
            });
            const maxFieldWOutliers = ls({
                ...getBoxPlotYValueProps,
                key: Wl.Max,
                showOutliers: true,
            });
            const maxField = ls({
                ...getBoxPlotYValueProps,
                key: Wl.Max,
                showOutliers: false,
            });
            // copying the min/max values
            if (dataItem[maxFieldWOutliers] === undefined && dataItem[maxField] !== undefined) {
                dataItem[maxFieldWOutliers] = dataItem[maxField];
            }
            if (dataItem[minFieldWOutliers] === undefined && dataItem[minField] !== undefined) {
                dataItem[minFieldWOutliers] = dataItem[minField];
            }
        });
    });
}
/**
 * Calculating the outliers threshold for a given data item (representing one candle and whiskers)
 * @param dataItem The data item containing the stats
 * @param yFieldNames The box plot y field names
 */
function getOutliersThresholds(dataItem, yFieldNames) {
    let outlierMinThreshold;
    let outlierMaxThreshold;
    const iqr = dataItem[yFieldNames[Wl.IQR]];
    const firstQuartile = dataItem[yFieldNames[Wl.FirstQuartile]];
    const thirdQuartile = dataItem[yFieldNames[Wl.ThirdQuartile]];
    if (Number.isFinite(iqr) && Number.isFinite(firstQuartile) && Number.isFinite(thirdQuartile)) {
        // Outliers are the features greater than Q3 + 1.5(IQR) or lesser than: Q1 - 1.5(IQR)
        outlierMinThreshold = firstQuartile - iqr * 1.5;
        outlierMaxThreshold = thirdQuartile + iqr * 1.5;
    }
    return { outlierMinThreshold, outlierMaxThreshold };
}
/**
 * Builds the query filter necessary to fetch either the outliers or the alternative data by using the x, y and split-by fields and values.
 * @param props.yField The y-axis field
 * @param props.xField The x-axis field
 * @param props.xValue The category value
 * @param props.splitByField The split-by field for a given series
 * @param props.splitByValue The split-by value for a given series
 * @param props.outlierMinThreshold The outlier min threshold for a given data item
 * @param props.outlierMaxThreshold The outlier max threshold for a given data item
 * @param props.target Whether the function is called to build the outliers or the alternative data filter
 */
function buildBoxPlotFilter(props) {
    const { yField, xField, xValue, splitByField, splitByValue, outlierMaxThreshold, outlierMinThreshold, target } = props;
    let xFilter;
    if (xField !== undefined && xValue !== undefined) {
        // adding quotes and normalizing the value when it's not a number
        const value = typeof xValue !== "string" ? xValue : `'${kl(xValue)}'`;
        xFilter = `${xField}=${value.toString()}`;
    }
    let splitByFilter;
    if (splitByField !== undefined && splitByValue !== undefined) {
        // adding quotes and normalizing the value when it's not a number
        const value = typeof splitByValue !== "string" ? splitByValue : `'${kl(splitByValue)}'`;
        splitByFilter = `${splitByField}=${value.toString()}`;
    }
    let thresholdFilter;
    // if the filter is for the outliers and the two thresholds are the same, we don't need the filter
    // e.g. it would create a filter as `field < 0 OR field > 0` which is the same as accepting all the values
    if (target === "outliers" && outlierMinThreshold !== outlierMaxThreshold) {
        thresholdFilter = `(${yField}<${outlierMinThreshold} OR ${yField}>${outlierMaxThreshold})`;
    }
    else if (target === "alternativeData") {
        // if the filter is for the alternative data and two thresholds are the same, we can directly use a `field=value`
        if (outlierMinThreshold === outlierMaxThreshold) {
            thresholdFilter = `(${yField}=${outlierMinThreshold})`;
        }
        else {
            thresholdFilter = `(${yField}>=${outlierMinThreshold} AND ${yField}<=${outlierMaxThreshold})`;
        }
    }
    // combining the filters
    const outlierFilter = [xFilter, splitByFilter, thresholdFilter].filter((f) => f !== undefined).join(" AND ");
    return outlierFilter;
}
/**
 * Generates the query filters necessary to fetch the box plot outliers and alternative data.
 * The filters are returned as an array because if they contain too many operands they are split
 * into multiple filters.
 * @param props.data The main data set
 * @param props.yField The numeric field
 * @param props.x The x-axis field
 * @param props.chartSubType The chart sub type
 * @param props.splitByField The split-by field
 */
function generateBoxPlotQueriesFilter(props) {
    const { data, yField, x, chartSubType, splitByField } = props;
    // using the yField only if the chart uses multiple numeric fields
    const y = chartSubType === ml.BoxPlotMonoField ||
        chartSubType === ml.BoxPlotMonoFieldAndCategory ||
        chartSubType === ml.BoxPlotMonoFieldAndSplitBy ||
        chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy
        ? undefined
        : yField;
    const yFieldNames = rs(y);
    const outliersFilterBatches = [];
    const dataWithoutOutliersFilterBatches = [];
    const { maxOperandsPerWhereClause: batchSize } = ea();
    let outliersFilters = [];
    let dataWithoutOutliersFilters = [];
    let batchIndex = 1;
    data.forEach((dataItem, dataIndex) => {
        // calculating the outlier threshold for the current data item
        const { outlierMinThreshold, outlierMaxThreshold } = getOutliersThresholds(dataItem, yFieldNames);
        if (typeof outlierMinThreshold === "number" && typeof outlierMaxThreshold === "number") {
            const filtersProps = {
                yField,
                outlierMinThreshold,
                outlierMaxThreshold,
            };
            // First we define the xField and xValue for the charts with a category
            if ((chartSubType === ml.BoxPlotMonoFieldAndCategory ||
                chartSubType === ml.BoxPlotMultiFieldsAndCategory ||
                chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy) &&
                x !== undefined &&
                x in dataItem) {
                filtersProps.xField = x;
                filtersProps.xValue = getXAxisValueFromContext({
                    value: dataItem[x],
                    dataContext: dataItem,
                    keepNullValues: true,
                    specificField: ChartDefaults.typeOrDomainIdValue,
                });
            }
            // Then we define the splitByField and splitByValue for the charts with a split-by field
            if ((chartSubType === ml.BoxPlotMonoFieldAndSplitBy ||
                chartSubType === ml.BoxPlotMultiFieldsAndSplitBy ||
                chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy) &&
                splitByField !== undefined &&
                splitByField in dataItem) {
                filtersProps.splitByField = splitByField;
                filtersProps.splitByValue = dataItem[splitByField];
            }
            outliersFilters.push(buildBoxPlotFilter({ ...filtersProps, target: "outliers" }));
            dataWithoutOutliersFilters.push(buildBoxPlotFilter({ ...filtersProps, target: "alternativeData" }));
            // every `batchSize` batches and at the last item we concatenate the previous filters and start a new one
            if (batchIndex % batchSize === 0 || dataIndex === data.length - 1) {
                // saving the batch
                outliersFilterBatches.push($s(outliersFilters, "OR"));
                dataWithoutOutliersFilterBatches.push($s(dataWithoutOutliersFilters, "OR"));
                // resetting the arrays for the next batch
                outliersFilters = [];
                dataWithoutOutliersFilters = [];
            }
        }
        batchIndex += 1;
    });
    return { outliersFilterBatches, dataWithoutOutliersFilterBatches };
}
/**
 * Fetches mean and standard deviation information from respective data item object based on the input parameters
 * NOTE: for now, we only use this function to compute mean and standard deviation for the box plots with multiple fields.
 */
function getOutlierMeanAndStandardDeviation(props) {
    const { data, outlierDataItem, chartSubType, x, y, meanAndStdDevPerField, splitByField } = props;
    let mean = meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.Average)];
    let stdDev = meanAndStdDevPerField?.[getMeanAndStandardDeviationPerFieldKey(y, RESTStatisticType.StandardDeviation)];
    // if the global mean and standard deviation per field is not provided, we look for it inside of the box's
    // data item related to the outlier
    if (mean === undefined && stdDev === undefined) {
        switch (chartSubType) {
            case ml.BoxPlotMultiFields: {
                const boxPlotFields = rs(y);
                const dataItem = data[0]; // BoxPlotMonoField type only has one data item in the data item array
                mean = Number(dataItem[boxPlotFields[Wl.Average]]);
                stdDev = Number(dataItem[boxPlotFields[Wl.StandardDeviation]]);
                break;
            }
            case ml.BoxPlotMultiFieldsAndCategory: {
                // TODO: do something about this in the future. When we scale the outlier numbers, find function will increase the time complexity by O(n)* Number of Outliers.
                // We could look for the dataItem outside of this function and pass it as an input parameter
                const dataItem = data.find((item) => item[x] === outlierDataItem[x]);
                if (dataItem !== undefined) {
                    const boxPlotFields = rs(y);
                    mean = Number(dataItem[boxPlotFields[Wl.Average]]);
                    stdDev = Number(dataItem[boxPlotFields[Wl.StandardDeviation]]);
                }
                break;
            }
            case ml.BoxPlotMultiFieldsAndSplitBy: {
                // TODO: do something about this in the future. When we scale the outlier numbers, find function will increase the time complexity by O(n)* Number of Outliers.
                // We could look for the dataItem outside of this function and pass it as an input parameter
                const dataItem = data.find((item) => item[splitByField] === outlierDataItem[splitByField]);
                if (dataItem !== undefined) {
                    const boxPlotFields = rs(y);
                    mean = Number(dataItem[boxPlotFields[Wl.Average]]);
                    stdDev = Number(dataItem[boxPlotFields[Wl.StandardDeviation]]);
                }
                break;
            }
        }
    }
    return { mean, stdDev };
}
/**
 * Fetches the box plot outliers
 * @param props.data The main data set
 * @param props.uniqueQuery The query config to use as a base
 * @param props.seriesConfig The series config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.meanAndStdDevPerField Object containing the mean and stddev for all the numeric fields used by the chart
 * @param props.abortKey The key to abort queries
 */
async function fetchBoxPlotOutliers(props) {
    const { seriesConfig, data, uniqueQuery, queryObject, meanAndStdDevPerField, abortKey } = props;
    const chartSubType = ts(seriesConfig);
    const firstSeries = seriesConfig[0];
    const { x } = firstSeries;
    const splitByField = Xl(firstSeries.query?.where);
    const layer = Ds(queryObject);
    const yList = ds(seriesConfig);
    const outliersQueryPromises = [];
    // Going through the list of numeric fields.
    // We build one query per field, translating later into one series per field on the chart.
    for (let i = 0; i < yList.length; i += 1) {
        const y = yList[i];
        const { outliersFilterBatches } = generateBoxPlotQueriesFilter({
            data,
            yField: y,
            x,
            chartSubType,
            splitByField,
        });
        for (let iBatch = 0; iBatch < outliersFilterBatches.length; iBatch += 1) {
            const outliersFilter = outliersFilterBatches[iBatch];
            if (outliersFilter !== "") {
                // Building a list of all the fields necessary for the out fields
                const outliersOutFields = [];
                if (x !== ChartDefaults.boxPlot.boxPlotCategory) {
                    outliersOutFields.push(x);
                }
                outliersOutFields.push(y);
                if (splitByField !== "") {
                    outliersOutFields.push(splitByField);
                }
                // Adding Object Id for selection
                outliersOutFields.push(layer.objectIdField);
                // building a query config for the outliers
                const outliersQuery = {
                    ...uniqueQuery,
                    where: $s([uniqueQuery.where, outliersFilter]),
                    groupByFieldsForStatistics: undefined,
                    outStatistics: undefined,
                    orderByFields: undefined,
                    num: undefined,
                    outFields: outliersOutFields,
                };
                outliersQueryPromises.push(op({
                    queryObject,
                    queryConfig: outliersQuery,
                    featureCount: 1, // TODO: pre-count to trigger batching
                    abortKey,
                }));
            }
        }
    }
    const outliersQueryResults = await Promise.all(outliersQueryPromises);
    // Map containing unique outliers
    // The key will be a combination of the stat value, x value and split-by value
    // The value is the outlier data context
    const outliers = new Map();
    for (let i = 0; i < outliersQueryResults.length; i += 1) {
        const nextResults = outliersQueryResults[i];
        const y = yList[i];
        // Going through the results to manipulate the data
        nextResults.forEach((feature) => {
            const outlierDataItem = { ...feature.attributes };
            if (outlierDataItem[y] !== undefined) {
                if (x === ChartDefaults.boxPlot.boxPlotCategory) {
                    outlierDataItem[ChartDefaults.boxPlot.boxPlotCategory] = y;
                }
                let getBoxPlotPropNameProps = {
                    key: Wl.Outlier,
                    chartSubType,
                };
                switch (chartSubType) {
                    case ml.BoxPlotMonoFieldAndSplitBy:
                    case ml.BoxPlotMultiFieldsAndSplitBy:
                    case ml.BoxPlotMonoFieldAndCategoryAndSplitBy:
                        // adding the split-by field
                        getBoxPlotPropNameProps = {
                            ...getBoxPlotPropNameProps,
                            splitByValue: outlierDataItem[splitByField],
                        };
                        break;
                    case ml.BoxPlotMultiFieldsAndCategory:
                        // adding the y field
                        getBoxPlotPropNameProps = {
                            ...getBoxPlotPropNameProps,
                            y,
                        };
                        break;
                }
                // swapping the keys
                const outlierKey = ls(getBoxPlotPropNameProps);
                const outlierValue = outlierDataItem[y];
                outlierDataItem[outlierKey] = outlierValue;
                // Adding to the data context the OIDs associated to the features in order to avoid an extra query when the marker is selected
                const uniqueKey = `${outlierDataItem[x]}-${outlierDataItem[splitByField]}-${outlierValue}`;
                // Adding the current object id to the list of existing object ids already tracked for the given unique key
                const existingOutlierWithSameValue = outliers.get(uniqueKey);
                outlierDataItem[Un.uniqueIdsName] = [
                    ...(existingOutlierWithSameValue?.[Un.uniqueIdsName] ?? []),
                    outlierDataItem[layer.objectIdField],
                ];
                // deleting the current object id
                delete outlierDataItem[layer.objectIdField];
                // only apply z-score for multifields box plot
                if (as(chartSubType)) {
                    const outlierWithZScoreKey = ls({
                        ...getBoxPlotPropNameProps,
                        standardizeValues: true,
                    });
                    const { mean, stdDev } = getOutlierMeanAndStandardDeviation({
                        data,
                        outlierDataItem,
                        chartSubType,
                        x,
                        y,
                        splitByField,
                        meanAndStdDevPerField,
                    });
                    if (mean !== undefined && stdDev !== undefined) {
                        outlierDataItem[outlierWithZScoreKey] = calculateZScore({
                            value: outlierValue,
                            mean,
                            stdDev,
                        });
                    }
                }
                delete outlierDataItem[y];
                // flagging the outlier context to make it easier to differentiate from a box context during selection
                outlierDataItem[ChartDefaults.boxPlot.boxPlotOutlierId] = true;
                outliers.set(uniqueKey, outlierDataItem);
            }
        });
    }
    // returning the values from the Set
    return Array.from(outliers.values());
}
/**
 * Fetches the alternative data set for Box plot. That data set contains different values for the min and max stats,
 * that are swapped at rendering whether the outliers are shown.
 * @param props.data The main data set
 * @param props.uniqueQuery The query config to use as a base
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartConfig The chart config
 * @param props.elementCount The number of elements to be fetched by the query
 * @param props.chartLimits The chart limits
 * @param props.abortKey The key to abort queries
 */
async function fetchBoxPlotAlternativeData(props) {
    const { data, queryObject, uniqueQuery, elementCount, chartConfig, chartLimits, abortKey } = props;
    let boxPlotAlternativeData = [];
    const { series: seriesConfig, showMean } = chartConfig;
    const yList = cs({ showMean, seriesConfig });
    const chartSubType = ts(seriesConfig);
    const seriesReference = Yl(chartConfig);
    const { x } = seriesReference;
    const splitByField = Xl(seriesReference.query?.where);
    const alternativeDataPromises = [];
    // Going through the list of numeric fields.
    // We build one query per field. Their result will be merged into the main data set.
    for (let i = 0; i < yList.length; i += 1) {
        const y = yList[i];
        const { dataWithoutOutliersFilterBatches } = generateBoxPlotQueriesFilter({
            data,
            yField: y,
            x,
            chartSubType,
            splitByField,
        });
        for (let iBatch = 0; iBatch < dataWithoutOutliersFilterBatches.length; iBatch += 1) {
            const dataWithoutOutliersFilter = dataWithoutOutliersFilterBatches[iBatch];
            // We fetch more data for the values used by the top and bottom whisker that change whether the outliers are shown
            const alternativeQuery = {
                ...uniqueQuery,
                where: $s([uniqueQuery.where, dataWithoutOutliersFilter]),
            };
            // We keep only the min/max out statistics and rename the output field name so when the two data sets get merged
            // they won't override each other (a data item will contain a `xxx_max` and a `xxx_max_arcgis_charts_outliers`)
            if (alternativeQuery.outStatistics !== undefined) {
                alternativeQuery.outStatistics = alternativeQuery.outStatistics
                    ?.filter((outStatistic) => (outStatistic.statisticType === RESTStatisticType.Minimum ||
                    outStatistic.statisticType === RESTStatisticType.Maximum) &&
                    outStatistic.onStatisticField === y)
                    .map((outStatistic) => ({
                    ...outStatistic,
                    outStatisticFieldName: `${outStatistic.outStatisticFieldName}${ChartDefaults.boxPlot.boxPlotOutliersSuffix}`,
                }));
            }
            alternativeDataPromises.push(processUniqueQueryResults({
                queryObject,
                uniqueQuery: alternativeQuery,
                chartConfig,
                elementCount,
                isTimeBinningSeries: false,
                showMean,
                chartLimits,
                abortKey,
            }));
        }
    }
    const alternativeDataResults = await Promise.all(alternativeDataPromises);
    for (let i = 0; i < alternativeDataResults.length; i += 1) {
        boxPlotAlternativeData.push(...alternativeDataResults[i]);
    }
    // Grouping the results by x-value if not already done by the server
    // the grouping is already done on the chart with a category and a split-by field
    if (chartSubType !== ml.BoxPlotMonoFieldAndCategoryAndSplitBy) {
        const groupingField = splitByField !== undefined && splitByField !== "" ? splitByField : x;
        boxPlotAlternativeData = groupDataByCategory({
            data: boxPlotAlternativeData,
            x: groupingField,
        });
    }
    return boxPlotAlternativeData;
}
/**
 * Fetches the mean and standard deviation for a specific numeric field.
 * Refer to issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6472)
 * @param props.uniqueQuery The query config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartConfig The chart config
 * @param props.abortKey The key to abort the queries
 */
async function fetchBoxMeanAndStdDevPerField(props) {
    const { queryObject, uniqueQuery, chartConfig, abortKey } = props;
    let meanAndStdDevPerField;
    const { series: seriesConfig, showMean } = chartConfig;
    const chartSubType = ts(seriesConfig);
    // We only need to fetch those values for:
    // - C4 (Multiple Numeric field + Category field)
    // - C6 (Multiple Numeric Field + Split by).
    if (chartSubType === ml.BoxPlotMultiFieldsAndCategory ||
        chartSubType === ml.BoxPlotMultiFieldsAndSplitBy) {
        const yList = cs({ showMean, seriesConfig });
        // we re-use the main query mainly to keep the filters and delete all the other properties
        const queryConfig = {
            ...uniqueQuery,
        };
        delete queryConfig.outStatistics;
        delete queryConfig.groupByFieldsForStatistics;
        delete queryConfig.orderByFields;
        // we add the average and standard deviation stats for each numeric field
        const outStatistics = [];
        for (let i = 0; i < yList.length; i += 1) {
            const numericField = yList[i];
            outStatistics.push(...[
                {
                    statisticType: RESTStatisticType.Average,
                    onStatisticField: numericField,
                    outStatisticFieldName: `${RESTStatisticType.Average}_${numericField}`,
                },
                {
                    statisticType: RESTStatisticType.StandardDeviation,
                    onStatisticField: numericField,
                    outStatisticFieldName: `${RESTStatisticType.StandardDeviation}_${numericField}`,
                },
            ]);
        }
        queryConfig.outStatistics = outStatistics;
        // executing the query
        const queryResult = (await op({
            queryObject,
            queryConfig,
            featureCount: 1,
            abortKey,
        }));
        // we expect only one feature
        if (queryResult.length > 0) {
            meanAndStdDevPerField = queryResult[0].attributes;
        }
    }
    return meanAndStdDevPerField;
}
/**
 * Merges two data sets from the category and split-by field
 * @param props.data The main data set
 * @param props.additionalData The additional data
 * @param props.chartConfig The chart's config
 */
function mergeBoxPlotAlternativeData(props) {
    const { data, additionalData, chartConfig } = props;
    const firstSeries = chartConfig.series[0];
    const { x } = firstSeries;
    const splitByField = Xl(firstSeries.query?.where);
    // merging the main data set with the alternative data
    return data.map((dataItem) => {
        let mergedDataItem = dataItem;
        // merging the items matching the category and the split-by field
        const alternativeDataItem = additionalData.find((additionalDataItem) => additionalDataItem[x] === dataItem[x] &&
            (splitByField === "" ? true : additionalDataItem[splitByField] === dataItem[splitByField]));
        if (alternativeDataItem !== undefined) {
            mergedDataItem = { ...dataItem, ...alternativeDataItem };
        }
        // else: if the query didn't bring back some data for that item, it will added later on by addMissingAlternativeData()
        return mergedDataItem;
    });
}
/**
 * Processes the fetched data for a box plot chart and transforms it into the appropriate format for the amCharts library.
 * Depending on the query type, the data may need to be grouped and/or flattened before being returned.
 * If the query type is BoxPlotMonoFieldAndCategory, the data is already in the correct format and no further transformation is needed.
 * @param {WebBoxPlot} props.chartConfig The configuration object for the chart.
 * @param {WebChartDataItem[]} props.data The fetched data to be processed.
 * @param {boolean} props.calculateZScore determines whether to calculate z-score or not for the box plots.
 * @param {WebChartDataItem} props.meanAndStdDevPerField Object containing the mean and stddev for all the numeric fields used by the chart
 * @returns The processed data in the appropriate format for the amCharts library.
 */
function processDataForBoxPlot(props) {
    const { chartConfig, data, calculateZScore = false, meanAndStdDevPerField } = props;
    const { series: seriesConfig, showMean } = chartConfig;
    const seriesReference = Yl(chartConfig);
    const chartSubType = ts(chartConfig.series);
    const { x } = seriesReference;
    const yList = cs({ showMean, seriesConfig });
    let processedData = data;
    if ((seriesReference.type === WebChartTypes.LineSeries || seriesReference.type === WebChartTypes.BoxPlotSeries) &&
        data?.[0] !== undefined) {
        const splitByField = Xl(seriesReference.query?.where);
        switch (chartSubType) {
            case ml.BoxPlotMonoField:
                // adding the default category to the unique data item
                processedData[0][ChartDefaults.boxPlot.boxPlotCategory] = yList[0];
                break;
            case ml.BoxPlotMultiFields:
                processedData = processDataForBoxPlotMultiFields({
                    data,
                    yList,
                    calculateZScore,
                });
                break;
            case ml.BoxPlotMonoFieldAndSplitBy:
                processedData = processDataForMonoFieldAndSplitBy({
                    data,
                    splitByField,
                    y: yList[0], // there's only one `y` value for that query type
                });
                break;
            case ml.BoxPlotMultiFieldsAndSplitBy:
                processedData = processDataForBoxPlotMultiFieldsAndSplitBy({
                    splitByField,
                    data,
                    yList,
                    meanAndStdDevPerField,
                    calculateZScore,
                });
                break;
            case ml.BoxPlotMultiFieldsAndCategory:
                processedData = processDataForBoxPlotMultiFieldsAndCategory({
                    data,
                    yList,
                    meanAndStdDevPerField,
                    calculateZScore,
                });
                break;
            case ml.BoxPlotMonoFieldAndCategoryAndSplitBy:
                processedData = processDataForBoxPlotMonoFieldAndCategoryAndSplitBy({
                    splitByField,
                    x,
                    data,
                });
                break;
        }
    }
    // once the data has been processed, we double check whether the alternative min/max values are in the data set,
    // and add some if not
    addMissingAlternativeData(chartConfig, processedData);
    return processedData;
}
/**
 * Main function completing and processing the box plot data:
 * - outliers
 * - alternative data (shown when outliers are enabled)
 * - mean and standard deviation per numeric field
 * @param props.data The main data set
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.uniqueQuery The query config
 * @param props.fetchFullBoxPlotData Whether to fetch all the box plot data
 * @param props.chartConfig The chart config
 * @param props.elementCount The number of features to fetch
 * @param props.chartLimits The chart limits
 * @param props.abortKey The key to abort the queries
 */
async function completeBoxPlotResults(props) {
    const { data, queryObject, uniqueQuery, fetchFullBoxPlotData, chartConfig, elementCount, chartLimits, abortKey } = props;
    let dataItems = data;
    let outliers = [];
    if (dataItems !== undefined) {
        const { series: seriesConfig } = chartConfig;
        // Fetching the mean and standard deviation per numeric field
        const meanAndStdDevPerField = await fetchBoxMeanAndStdDevPerField({
            queryObject,
            uniqueQuery,
            chartConfig,
            abortKey,
        });
        if (fetchFullBoxPlotData !== false) {
            // Fetching the outliers data
            outliers = await fetchBoxPlotOutliers({
                queryObject,
                uniqueQuery,
                seriesConfig,
                data: dataItems,
                meanAndStdDevPerField,
                abortKey,
            });
            // Fetching the alternative data for box plot.
            // The alternative one contains different values for the min and max stat, displayed when the outliers are shown.
            // We swap from a version to another according the outliers visibility.
            const boxPlotAlternativeData = await fetchBoxPlotAlternativeData({
                queryObject,
                uniqueQuery,
                elementCount,
                data,
                chartConfig,
                chartLimits,
                abortKey,
            });
            // Merging the alternative data with the main dataset
            dataItems = mergeBoxPlotAlternativeData({
                data: dataItems,
                additionalData: boxPlotAlternativeData,
                chartConfig,
            });
        }
        // Post-processing the data
        dataItems = processDataForBoxPlot({
            chartConfig,
            data: dataItems,
            meanAndStdDevPerField,
            calculateZScore: true,
        });
    }
    return { dataItems, outliers };
}

async function fetchGaugeData(props) {
    const { queryObject, queryConfig, chartConfig, abortKey } = props;
    const seriesConfig = chartConfig.series[0];
    const { x, valueConversion } = seriesConfig;
    const gaugeByFeature = ns(chartConfig);
    // Querying
    const allFeatures = (await op({
        queryObject,
        queryConfig,
        abortKey,
        featureCount: queryConfig.num ?? 1, // if a chart limitation has been provided we use it, otherwise we force 1 to avoid the batching
    }));
    // initializing the array to an empty item
    let rawData = [{ [x]: null }];
    if (gaugeByFeature) {
        rawData = allFeatures.map((graphic) => {
            // sanitize the data in case server returns data with uppercase properties
            // see PR https://devtopia.esri.com/WebGIS/arcgis-charts/pull/6070
            restoreAttributesCase(graphic.attributes, x);
            // apply the conversion to the x value
            const value = applyValueConversion(graphic.attributes[x], valueConversion);
            return { ...graphic.attributes, [x]: value };
        });
    }
    else if (allFeatures.length > 0) {
        // We expect one value for the gauge
        // some servers return data with field name being automatically uppercased, i.e the outStatisticsFieldName;
        // this is to make sure we store the retrieved value for such a field to its corresponding field name
        // as specified in the config. (see issue https://devtopia.esri.com/webgis/arcgis-charts/issues/5974)
        let value = allFeatures[0].attributes[x] ??
            allFeatures[0].attributes[x.toUpperCase()] ??
            allFeatures[0].attributes[x.toLowerCase()];
        // apply the conversion to the x value
        value = applyValueConversion(value, valueConversion);
        rawData = [{ [x]: value }];
    }
    return rawData;
}
/**
 * Fetches the gauge data and returns it.
 * @param props
 */
async function fetchFinishedGaugeData(props) {
    const { queryObject, chartConfig, queryConfig, options, abortKey } = props;
    const { chartLimits } = options ?? {};
    const fetchResult = { valid: true };
    if (queryObject !== undefined) {
        const { behaviorAfterLimit, maxGaugeByFeaturesLimit } = chartLimits ?? {};
        const gaugeByFeature = ns(chartConfig);
        let numberOfElementsUnderLimit = true;
        let elementCount;
        // We count the number of features for feature-based gauges and when the behavior limit is set to RenderUpToTheLimit
        if (gaugeByFeature) {
            // get feature count
            elementCount = (await getTotalElementCount({
                chartConfig,
                queryObject,
                queryConfig,
                behaviorAfterLimit,
                numberMaxOfFeaturesToFetch: maxGaugeByFeaturesLimit,
                isGaugeByFeature: gaugeByFeature,
            })).elementCount;
            // check if it's under the limit
            if (options?.chartLimits?.behaviorAfterLimit !== We.RenderUpToTheLimit) {
                numberOfElementsUnderLimit = Il({
                    count: elementCount ?? 0,
                    seriesCount: chartConfig.series.length,
                    chartType: WebChartTypes.GaugeSeries,
                    chartLimits,
                });
            }
            if (options && (Number.isFinite(maxGaugeByFeaturesLimit) || Number.isFinite(elementCount))) {
                // If the number of features is lesser than the existing limit, we update the limit to avoid triggering the query
                // batching feature that would lead to empty queries.
                // Refer to: https://devtopia.esri.com/WebGIS/arcgis-web-components/issues/2208
                const newLimit = Math.min(maxGaugeByFeaturesLimit ?? Number.NaN, elementCount ?? Number.NaN);
                if (Number.isFinite(newLimit)) {
                    options.chartLimits = {
                        ...chartLimits,
                        maxGaugeByFeaturesLimit: newLimit,
                    };
                }
                // add a limitation to the query to only fetch the necessary amount of features
                addFeatureLimitation({ chartConfig, options, uniqueQuery: queryConfig });
            }
        }
        if (Number.isNaN(numberOfElementsUnderLimit) || numberOfElementsUnderLimit) {
            const dataItems = await fetchGaugeData({
                queryObject,
                chartConfig,
                queryConfig,
                abortKey,
            });
            fetchResult.data = { dataItems };
            fetchResult.count = dataItems.length;
        }
        else {
            fetchResult.count = elementCount;
            completeDataExceedLimitInfo({
                dataInfo: fetchResult,
                chartType: WebChartTypes.GaugeSeries,
            });
        }
    }
    return fetchResult;
}
/**
 * Performs a query to fetch the gauge min/max bounds, when `minimumFromField` or `maximumFromField` is provided
 * @param props.chartConfig The gauge chart configuration
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.queryConfig The query configuration
 */
async function fetchStatisticGaugeBounds(props) {
    const { queryObject, chartConfig, queryConfig } = props;
    const { minimumFromField, maximumFromField } = chartConfig.axes[0];
    const minMaxOutStats = [];
    let outStatisticFieldNameForMin = "";
    let outStatisticFieldNameForMax = "";
    if (minimumFromField !== undefined) {
        if (typeof minimumFromField === "string") {
            outStatisticFieldNameForMin = `${RESTStatisticType.Minimum}_${minimumFromField}`;
            // When the minimumFromField is a string, we create a new IStatisticDefinition using the MIN stat
            minMaxOutStats.push({
                statisticType: RESTStatisticType.Minimum,
                onStatisticField: minimumFromField,
                outStatisticFieldName: outStatisticFieldNameForMin,
            });
        }
        else {
            outStatisticFieldNameForMin = `${minimumFromField.statisticType}_${minimumFromField.onStatisticField}`;
            // when the minimumFromFields is already an IStatisticDefinition, we directly use it
            minMaxOutStats.push({
                ...minimumFromField,
                outStatisticFieldName: outStatisticFieldNameForMin,
            });
        }
    }
    if (maximumFromField !== undefined) {
        if (typeof maximumFromField === "string") {
            outStatisticFieldNameForMax = `${RESTStatisticType.Maximum}_${maximumFromField}`;
            // When the maximumFromField is a string, we create a new IStatisticDefinition using the MAX stat
            minMaxOutStats.push({
                statisticType: RESTStatisticType.Maximum,
                onStatisticField: maximumFromField,
                outStatisticFieldName: outStatisticFieldNameForMax,
            });
        }
        else {
            outStatisticFieldNameForMax = `${maximumFromField.statisticType}_${maximumFromField.onStatisticField}`;
            // when the maximumFromField is already an IStatisticDefinition, we directly use it
            minMaxOutStats.push({
                ...maximumFromField,
                outStatisticFieldName: outStatisticFieldNameForMax,
            });
        }
    }
    // Reusing the chart's query config and:
    // - keeping the filters
    // - replacing the out statistics by the one needed to fetch the bounds
    // - removing the properties not necessary to fetch the statistics
    const modifiedQueryConfig = {
        ...queryConfig,
        outStatistics: minMaxOutStats,
        orderByFields: undefined,
        groupByFieldsForStatistics: undefined,
        returnDistinctValues: undefined,
        fetchNullValues: undefined,
        num: undefined,
    };
    const minMaxStatistics = await ip({
        queryObject,
        queryConfig: modifiedQueryConfig,
    });
    const minimumFromData = minMaxStatistics.get(outStatisticFieldNameForMin);
    const maximumFromData = minMaxStatistics.get(outStatisticFieldNameForMax);
    return { minimumFromData, maximumFromData };
}

/**
 * Checks if the current transformation type (log | sqrt) is compatible with the dataset.
 * @param dataTransformationType The transformation requested for the histogram
 * @param min The min value from the data set
 */
function isDataCompatibleWithTransformation(dataTransformationType = WebChartDataTransformations.None, min) {
    return (dataTransformationType === WebChartDataTransformations.None ||
        (dataTransformationType === WebChartDataTransformations.Log && min > 0) ||
        (dataTransformationType === WebChartDataTransformations.Sqrt && min >= 0));
}
/**
 * Create the bins for the original min and max value (Before applying the transformation).
 * @param dataTransformationType The transformation requested for the histogram.
 * @param min The min value from the data set.
 */
function createInvalidDataInfoForHistogram(dataTransformationType, dataCountIncompatible) {
    const invalidDataInfo = { valid: false };
    if (dataCountIncompatible === true) {
        invalidDataInfo.invalidType = $c.HistogramEmptyField;
    }
    else if (dataTransformationType === WebChartDataTransformations.Log) {
        invalidDataInfo.invalidType = $c.NegativeValueInLogCalculation;
    }
    else if (dataTransformationType === WebChartDataTransformations.Sqrt) {
        invalidDataInfo.invalidType = $c.NegativeValueInSqrtCalculation;
    }
    return invalidDataInfo;
}
/**
 * Applies a log or sqrt to a value according to the requested transformation type
 * @param value The value to transform
 * @param transformation The transformation type
 */
function transformValue(value, transformation) {
    let result = value;
    switch (transformation) {
        case WebChartDataTransformations.Log:
            result = Math.log(value); // use natural log
            break;
        case WebChartDataTransformations.Sqrt:
            result = Math.sqrt(value);
            break;
    }
    return result;
}
/**
 *
 * @param min Work around to reduce the decimal part by 1.
 * @returns number
 */
function processMin(min) {
    let processedMin = min;
    const mins = min.toString().split(".");
    if (mins[1] !== undefined) {
        const numberOfDecimals = mins[1].length;
        const toSubtract = 10 ** -numberOfDecimals;
        processedMin = min - toSubtract;
    }
    return processedMin;
}
/**
 * Map the REST transformation type with the @arcgis/core normalization type
 * TODO: use NormalizationType export from the @arcgis/core once available, rather than __esri.summaryStatisticsSummaryStatisticsParams["normalizationType"]
 * @param transformation The transformation requested for the histogram
 */
function getNormalizationType(transformation) {
    let normalizationType = "field";
    switch (transformation) {
        case WebChartDataTransformations.Log:
            normalizationType = "natural-log";
            break;
        case WebChartDataTransformations.Sqrt:
            normalizationType = "square-root";
            break;
    }
    return normalizationType;
}
/**
 * Creates a mocked MapView with the provided extent.
 * @param extent The extent to be used by the MapView
 */
async function createMapView(extent) {
    const map = await newMap({
        layers: [],
    });
    const view = await newViewsMapView({
        map,
        extent,
    });
    return view;
}
/**
 * Computes a few basic statistics on the data.
 * @param props.queryObject The object used to query (layer or FeatureLayerView)
 * @param props.queryConfig The query config
 * @param props.fieldName The field name to be used for the statistics
 * @param props.abortKey The key to abort the queries
 */
async function fetchDataStatistics$1(props) {
    const { queryObject, fieldName, queryConfig, abortKey } = props;
    const layer = Ds(queryObject);
    const { objectIdField } = layer;
    const totalCountStatFieldName = `${RESTStatisticType.Count}_${objectIdField}`;
    const featureCountStatFieldName = `${RESTStatisticType.Count}_${fieldName}`;
    const minValueStatFieldName = `${RESTStatisticType.Minimum}_${fieldName}`;
    const maxValueStatFieldName = `${RESTStatisticType.Maximum}_${fieldName}`;
    // TODO: we need to add the maximum here, in order to replace the rawMin and rawMax we were computing before from all the features
    const modifiedQueryConfig = {
        ...queryConfig,
        outStatistics: [
            {
                statisticType: RESTStatisticType.Count,
                onStatisticField: objectIdField,
                outStatisticFieldName: totalCountStatFieldName,
            },
            {
                statisticType: RESTStatisticType.Count,
                onStatisticField: fieldName,
                outStatisticFieldName: featureCountStatFieldName,
            },
            {
                statisticType: RESTStatisticType.Minimum,
                onStatisticField: fieldName,
                outStatisticFieldName: minValueStatFieldName,
            },
            {
                statisticType: RESTStatisticType.Maximum,
                onStatisticField: fieldName,
                outStatisticFieldName: maxValueStatFieldName,
            },
        ],
    };
    const stats = await ip({
        queryObject,
        queryConfig: modifiedQueryConfig,
        abortKey,
    });
    const countIncludingNulls = stats.get(totalCountStatFieldName) ?? Number.NaN;
    const countExcludingNulls = stats.get(featureCountStatFieldName) ?? Number.NaN;
    const min = stats.get(minValueStatFieldName) ?? Number.NaN;
    const max = stats.get(maxValueStatFieldName) ?? Number.NaN;
    return { countExcludingNulls, countIncludingNulls, min, max };
}
async function fetchRawHistogramData(props) {
    const { queryConfig, chartConfig, queryObject, abortKey } = props;
    const seriesConfig = chartConfig.series[0];
    const { x, dataTransformationType } = seriesConfig;
    let rawData = [];
    // Checking beforehand is the transformation is compatible with the dataset to avoid fetching all the features if it's not
    const { countIncludingNulls, countExcludingNulls, min, max } = await fetchDataStatistics$1({
        queryObject,
        queryConfig,
        fieldName: x,
        abortKey,
    });
    const dataCompatibleWithTransformation = isDataCompatibleWithTransformation(dataTransformationType, min);
    // We need 2+ features to make a histogram and min different from max
    const dataCountIncompatible = countExcludingNulls < 2 || min === max;
    const modifiedQueryConfig = { ...queryConfig, outFields: [x] };
    modifiedQueryConfig.where = $s([modifiedQueryConfig.where, `${x} is not null`]);
    return {
        rawData,
        dataCompatibleWithTransformation,
        dataCountIncompatible,
        countExcludingNulls,
        countIncludingNulls,
    };
}
/**
 * Sanitizes the `__esri.SummaryStatisticsResult` object to avoid null values.
 * Was observed when all attribute values were negative and transformation was sqrt/log
 * So, sanitizing them to turn to `NaN` where needed.
 * @param input
 */
function sanitizeSummaryStatistics(input) {
    const output = { ...input };
    output.avg = output.avg ?? Number.NaN;
    output.count = output.count ?? Number.NaN;
    output.max = output.max ?? Number.NaN;
    output.min = output.min ?? Number.NaN;
    output.stddev = output.stddev ?? Number.NaN;
    output.sum = output.sum ?? Number.NaN;
    output.variance = output.variance ?? Number.NaN;
    output.median = output.median ?? Number.NaN;
    return output;
}
/**
 * Gets the params necessary for executing the JSAPI summary statistics function.
 * If there's no transformation we let the server query the features, otherwise we
 * provide the feature set.
 * @param props
 */
function getSummaryStatisticsParams(props) {
    const { seriesConfig, rawData, layer, useFeaturesInView, view, queryConfig } = props;
    const { x, dataTransformationType } = seriesConfig;
    let summaryStatisticsParams = {
        layer,
        view,
        field: x,
        // excluding the filters like 1=1 from the sqlWhere. It's causing query failures (see https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6677)
        sqlWhere: Jl(queryConfig.where) ? undefined : queryConfig.where,
        useFeaturesInView,
    };
    // Adding the features and valueExpression to the parameters only if there's a transformation requested
    if (dataTransformationType !== WebChartDataTransformations.None) {
        summaryStatisticsParams = {
            ...summaryStatisticsParams,
            normalizationType: getNormalizationType(dataTransformationType),
        };
    }
    return summaryStatisticsParams;
}
/**
 * Gets the params necessary for executing the JSAPI histogram function.
 * If there's no transformation we let the server query the features, otherwise we
 * provide the feature set.
 * @param props
 */
function getHistogramParams(props) {
    const { seriesConfig, rawData, layer, useFeaturesInView, view, minValue, maxValue, valueExpression, queryConfig } = props;
    const { x, binCount, dataTransformationType } = seriesConfig;
    let histogramParams = {
        layer,
        view,
        field: x,
        minValue,
        maxValue,
        numBins: binCount ?? Wn,
        classificationMethod: "equal-interval",
        // excluding the filters like 1=tionMethod: "equal-interval",1 from the sqlWhere. It's causing query failures (see https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6677)
        sqlWhere: Jl(queryConfig.where) ? undefined : queryConfig.where,
        useFeaturesInView,
    };
    // If fetching the data was necessary, we need to provide the data array and the value expression to the `histogram` function
    if (dataTransformationType !== WebChartDataTransformations.None) {
        // If a transformation is requested, we use the `normalizationType` to do so
        histogramParams = {
            ...histogramParams,
            normalizationType: getNormalizationType(dataTransformationType),
        };
    }
    return histogramParams;
}
/**
 * Gets the number of null values. Returns a number only if the data length has been provided.
 * @param dataLength
 * @param count
 */
function getNullsCount(dataLength, count) {
    let nulls = Number.NaN;
    if (dataLength !== undefined && count !== undefined) {
        nulls = dataLength - count;
    }
    return nulls;
}
async function transformHistogramData(props) {
    const { chartConfig, queryConfig, rawData, queryObject, countExcludingNulls, countIncludingNulls, options, errorStrings, } = props;
    const seriesConfig = chartConfig.series[0];
    const { dataTransformationType } = seriesConfig;
    let transformResult = { valid: true };
    // If Layer mode
    if (queryObject !== undefined) {
        const layer = Ds(queryObject);
        // getting the geometry extent to be assigned to the view
        const geometryExtent = (await Gs(queryConfig?.geometry))?.extent?.toJSON();
        const hasExtent = geometryExtent !== undefined;
        // using the provided runtime view or creating one and passing it the geometry extent for filtering purpose
        const histogramView = options?.view ?? (await createMapView(geometryExtent));
        const summaryStatisticsParams = getSummaryStatisticsParams({
            seriesConfig,
            rawData: rawData,
            layer,
            view: histogramView,
            useFeaturesInView: hasExtent,
            queryConfig,
        });
        // adding a feature filter based on the view's extent
        const featureFilter = await newLayersSupportFeatureFilter({
            geometry: histogramView.extent,
        });
        // adding the buffer (distance + units) when the geometry is defined and the layer compatible
        if (histogramView.extent !== undefined && Bs(layer)) {
            const { distance, units } = queryConfig;
            if (distance !== undefined) {
                featureFilter.distance = distance;
            }
            if (units !== undefined) {
                featureFilter.units = units;
            }
        }
        summaryStatisticsParams.filter = featureFilter;
        let summaryStatisticsData;
        try {
            const summaryStatistics = await importSmartMappingStatisticsSummaryStatistics();
            // calling the JSAPI `summaryStatistics()` function to get the stats
            summaryStatisticsData = await summaryStatistics(summaryStatisticsParams);
        }
        catch (e) {
            throw new Xs(Ks.QueryFeaturesError, errorStrings.errors.queryError, e);
        }
        summaryStatisticsData = sanitizeSummaryStatistics(summaryStatisticsData);
        const { avg, count, stddev, min, max, sum, median } = summaryStatisticsData;
        /* The count return from the call to summaryStatisticsData represents the number of features evaluated.
        When the function can't transform the data, its count is 0 and other values are null. */
        if (count === 0) {
            transformResult = {
                ...createInvalidDataInfoForHistogram(dataTransformationType),
            };
        }
        else {
            // Retrieve `histogram` result
            const histogramParams = getHistogramParams({
                seriesConfig,
                layer,
                view: histogramView,
                useFeaturesInView: hasExtent,
                rawData: rawData,
                minValue: processMin(min),
                maxValue: max,
                valueExpression: summaryStatisticsParams.valueExpression,
                queryConfig,
            });
            // adding a feature filter based on the view's extent
            histogramParams.filter = featureFilter;
            let histogramData;
            try {
                const histogram = await importSmartMappingStatisticsHistogram();
                // TODO: temporary solution for issue https://devtopia.esri.com/WebGIS/arcgis-web-components/issues/3785
                histogramParams.useQueryAttributeBins = false;
                // calling the JSAPI `histogram()` function to get the bins
                histogramData = await histogram(histogramParams);
            }
            catch (e) {
                throw new Xs(Ks.QueryFeaturesError, errorStrings.errors.queryError, e);
            }
            const nulls = getNullsCount(countIncludingNulls, countExcludingNulls);
            transformResult.data = {
                mean: avg,
                stddev: stddev,
                min: min,
                max: max,
                median: Number(median),
                bins: histogramData?.bins,
                count: countExcludingNulls,
                nulls,
                sum: sum ?? undefined,
            };
        }
    }
    return transformResult;
}
/**
 * Fetches the histogram data and proceed to the statistic calculations.
 * Returns information indicating whether the operation was a success and the data if so.
 * @param props
 */
async function fetchFinishedHistogramData(props) {
    const { chartConfig, queryConfig, queryObject, options, abortKey, errorStrings } = props;
    const { series } = chartConfig;
    const seriesConfig = series[0];
    const { rawData, dataCompatibleWithTransformation, dataCountIncompatible, countIncludingNulls, countExcludingNulls } = await fetchRawHistogramData({
        queryObject,
        chartConfig,
        queryConfig,
        abortKey,
    });
    let transformedData = { valid: true };
    if (!dataCompatibleWithTransformation || dataCountIncompatible) {
        transformedData = createInvalidDataInfoForHistogram(seriesConfig.dataTransformationType, dataCountIncompatible);
    }
    else {
        transformedData = await transformHistogramData({
            chartConfig,
            rawData,
            queryObject,
            queryConfig,
            countIncludingNulls,
            countExcludingNulls,
            options,
            abortKey,
            errorStrings,
        });
    }
    return transformedData;
}
/**
 * Fetches selection data for histogram.
 * It fetches a list of values from the x field, with a selection filter (`OID IN (...)`)
 * @param props
 */
async function fetchHistogramSelectionData(props) {
    const { queryObject, queryConfig, chartConfig, x } = props;
    const { series: seriesConfig } = chartConfig;
    const { dataTransformationType } = seriesConfig[0];
    const modifiedQueryConfig = {
        ...queryConfig,
        orderByFields: [x],
        outFields: [x],
    };
    const queryResults = (await op({
        queryObject,
        queryConfig: modifiedQueryConfig,
    }));
    // mapping the results to a WebChartDataItem[] and applying the requesting transformation (log, sqrt or none)
    const selectionData = queryResults.map((graphic) => ({
        [x]: transformValue(graphic.attributes[x], dataTransformationType),
    }));
    return {
        valid: true,
        data: { dataItems: selectionData },
    };
}

var chance$1 = {exports: {}};

chance$1.exports;

var hasRequiredChance;

function requireChance () {
	if (hasRequiredChance) return chance$1.exports;
	hasRequiredChance = 1;
	(function (module, exports) {
		//  Chance.js 1.1.12
		//  https://chancejs.com
		//  (c) 2013 Victor Quinn
		//  Chance may be freely distributed or modified under the MIT license.

		(function () {

		    // Constants
		    var MAX_INT = 9007199254740992;
		    var MIN_INT = -MAX_INT;
		    var NUMBERS = '0123456789';
		    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';
		    var CHARS_UPPER = CHARS_LOWER.toUpperCase();
		    var HEX_POOL = NUMBERS + "abcdef";

		    // Errors
		    function UnsupportedError(message) {
		        this.name = 'UnsupportedError';
		        this.message = message || 'This feature is not supported on this platform';
		    }

		    UnsupportedError.prototype = new Error();
		    UnsupportedError.prototype.constructor = UnsupportedError;

		    // Cached array helpers
		    var slice = Array.prototype.slice;

		    // Constructor
		    function Chance (seed) {
		        if (!(this instanceof Chance)) {
		            if (!seed) { seed = null; } // handle other non-truthy seeds, as described in issue #322
		            return seed === null ? new Chance() : new Chance(seed);
		        }

		        // if user has provided a function, use that as the generator
		        if (typeof seed === 'function') {
		            this.random = seed;
		            return this;
		        }

		        if (arguments.length) {
		            // set a starting value of zero so we can add to it
		            this.seed = 0;
		        }

		        // otherwise, leave this.seed blank so that MT will receive a blank

		        for (var i = 0; i < arguments.length; i++) {
		            var seedling = 0;
		            if (Object.prototype.toString.call(arguments[i]) === '[object String]') {
		                for (var j = 0; j < arguments[i].length; j++) {
		                    // create a numeric hash for each argument, add to seedling
		                    var hash = 0;
		                    for (var k = 0; k < arguments[i].length; k++) {
		                        hash = arguments[i].charCodeAt(k) + (hash << 6) + (hash << 16) - hash;
		                    }
		                    seedling += hash;
		                }
		            } else {
		                seedling = arguments[i];
		            }
		            this.seed += (arguments.length - i) * seedling;
		        }

		        // If no generator function was provided, use our MT
		        this.mt = this.mersenne_twister(this.seed);
		        this.bimd5 = this.blueimp_md5();
		        this.random = function () {
		            return this.mt.random(this.seed);
		        };

		        return this;
		    }

		    Chance.prototype.VERSION = "1.1.12";

		    // Random helper functions
		    function initOptions(options, defaults) {
		        options = options || {};

		        if (defaults) {
		            for (var i in defaults) {
		                if (typeof options[i] === 'undefined') {
		                    options[i] = defaults[i];
		                }
		            }
		        }

		        return options;
		    }

		    function range(size) {
		        return Array.apply(null, Array(size)).map(function (_, i) {return i;});
		    }

		    function testRange(test, errorMessage) {
		        if (test) {
		            throw new RangeError(errorMessage);
		        }
		    }

		    /**
		     * Encode the input string with Base64.
		     */
		    var base64 = function() {
		        throw new Error('No Base64 encoder available.');
		    };

		    // Select proper Base64 encoder.
		    (function determineBase64Encoder() {
		        if (typeof btoa === 'function') {
		            base64 = btoa;
		        } else if (typeof Buffer === 'function') {
		            base64 = function(input) {
		                return new Buffer(input).toString('base64');
		            };
		        }
		    })();

		    // -- Basics --

		    /**
		     *  Return a random bool, either true or false
		     *
		     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of
		     *    receiving a true or false value back.
		     *  @throws {RangeError} if the likelihood is out of bounds
		     *  @returns {Bool} either true or false
		     */
		    Chance.prototype.bool = function (options) {
		        // likelihood of success (true)
		        options = initOptions(options, {likelihood : 50});

		        // Note, we could get some minor perf optimizations by checking range
		        // prior to initializing defaults, but that makes code a bit messier
		        // and the check more complicated as we have to check existence of
		        // the object then existence of the key before checking constraints.
		        // Since the options initialization should be minor computationally,
		        // decision made for code cleanliness intentionally. This is mentioned
		        // here as it's the first occurrence, will not be mentioned again.
		        testRange(
		            options.likelihood < 0 || options.likelihood > 100,
		            "Chance: Likelihood accepts values from 0 to 100."
		        );

		        return this.random() * 100 < options.likelihood;
		    };

		    Chance.prototype.falsy = function (options) {
		        // return a random falsy value
		        options = initOptions(options, {pool: [false, null, 0, NaN, '', undefined]});
		        var pool = options.pool,
		            index = this.integer({min: 0, max: pool.length - 1}),
		            value = pool[index];

		        return value;
		    };

		    Chance.prototype.animal = function (options){
		      //returns a random animal
		      options = initOptions(options);

		      if(typeof options.type !== 'undefined'){
		        //if user does not put in a valid animal type, user will get an error
		        testRange(
		           !this.get("animals")[options.type.toLowerCase()],
		           "Please pick from desert, ocean, grassland, forest, zoo, pets, farm."
		         );
		         //if user does put in valid animal type, will return a random animal of that type
		          return this.pick(this.get("animals")[options.type.toLowerCase()]);
		      }
		       //if user does not put in any animal type, will return a random animal regardless
		      var animalTypeArray = ["desert","forest","ocean","zoo","farm","pet","grassland"];
		      return this.pick(this.get("animals")[this.pick(animalTypeArray)]);
		    };

		    /**
		     *  Return a random character.
		     *
		     *  @param {Object} [options={}] can specify a character pool or alpha,
		     *    numeric, symbols and casing (lower or upper)
		     *  @returns {String} a single random character
		     */
		    Chance.prototype.character = function (options) {
		        options = initOptions(options);

		        var symbols = "!@#$%^&*()[]",
		            letters, pool;

		        if (options.casing === 'lower') {
		            letters = CHARS_LOWER;
		        } else if (options.casing === 'upper') {
		            letters = CHARS_UPPER;
		        } else {
		            letters = CHARS_LOWER + CHARS_UPPER;
		        }

		        if (options.pool) {
		            pool = options.pool;
		        } else {
		            pool = '';
		            if (options.alpha) {
		                pool += letters;
		            }
		            if (options.numeric) {
		                pool += NUMBERS;
		            }
		            if (options.symbols) {
		                pool += symbols;
		            }
		            if (!pool) {
		                pool = letters + NUMBERS + symbols;
		            }
		        }

		        return pool.charAt(this.natural({max: (pool.length - 1)}));
		    };

		    // Note, wanted to use "float" or "double" but those are both JS reserved words.

		    // Note, fixed means N OR LESS digits after the decimal. This because
		    // It could be 14.9000 but in JavaScript, when this is cast as a number,
		    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are
		    // needed
		    /**
		     *  Return a random floating point number
		     *
		     *  @param {Object} [options={}] can specify a fixed precision, min, max
		     *  @returns {Number} a single floating point number
		     *  @throws {RangeError} Can only specify fixed or precision, not both. Also
		     *    min cannot be greater than max
		     */
		    Chance.prototype.floating = function (options) {
		        options = initOptions(options, {fixed : 4});
		        testRange(
		            options.fixed && options.precision,
		            "Chance: Cannot specify both fixed and precision."
		        );

		        var num;
		        var fixed = Math.pow(10, options.fixed);

		        var max = MAX_INT / fixed;
		        var min = -max;

		        testRange(
		            options.min && options.fixed && options.min < min,
		            "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
		        );
		        testRange(
		            options.max && options.fixed && options.max > max,
		            "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
		        );

		        options = initOptions(options, { min : min, max : max });

		        // Todo - Make this work!
		        // options.precision = (typeof options.precision !== "undefined") ? options.precision : false;

		        num = this.integer({min: options.min * fixed, max: options.max * fixed});
		        var num_fixed = (num / fixed).toFixed(options.fixed);

		        return parseFloat(num_fixed);
		    };

		    /**
		     *  Return a random integer
		     *
		     *  NOTE the max and min are INCLUDED in the range. So:
		     *  chance.integer({min: 1, max: 3});
		     *  would return either 1, 2, or 3.
		     *
		     *  @param {Object} [options={}] can specify a min and/or max
		     *  @returns {Number} a single random integer number
		     *  @throws {RangeError} min cannot be greater than max
		     */
		    Chance.prototype.integer = function (options) {
		        // 9007199254740992 (2^53) is the max integer number in JavaScript
		        // See: http://vq.io/132sa2j
		        options = initOptions(options, {min: MIN_INT, max: MAX_INT});
		        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

		        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
		    };

		    /**
		     *  Return a random natural
		     *
		     *  NOTE the max and min are INCLUDED in the range. So:
		     *  chance.natural({min: 1, max: 3});
		     *  would return either 1, 2, or 3.
		     *
		     *  @param {Object} [options={}] can specify a min and/or max or a numerals count.
		     *  @returns {Number} a single random integer number
		     *  @throws {RangeError} min cannot be greater than max
		     */
		    Chance.prototype.natural = function (options) {
		        options = initOptions(options, {min: 0, max: MAX_INT});
		        if (typeof options.numerals === 'number'){
		          testRange(options.numerals < 1, "Chance: Numerals cannot be less than one.");
		          options.min = Math.pow(10, options.numerals - 1);
		          options.max = Math.pow(10, options.numerals) - 1;
		        }
		        testRange(options.min < 0, "Chance: Min cannot be less than zero.");

		        if (options.exclude) {
		            testRange(!Array.isArray(options.exclude), "Chance: exclude must be an array.");

		            for (var exclusionIndex in options.exclude) {
		                testRange(!Number.isInteger(options.exclude[exclusionIndex]), "Chance: exclude must be numbers.");
		            }

		            var random = options.min + this.natural({max: options.max - options.min - options.exclude.length});
		            var sortedExclusions = options.exclude.sort();
		            for (var sortedExclusionIndex in sortedExclusions) {
		                if (random < sortedExclusions[sortedExclusionIndex]) {
		                    break
		                }
		                random++;
		            }
		            return random
		        }
		        return this.integer(options);
		    };

		    /**
		     *  Return a random prime number
		     *
		     *  NOTE the max and min are INCLUDED in the range.
		     *
		     *  @param {Object} [options={}] can specify a min and/or max
		     *  @returns {Number} a single random prime number
		     *  @throws {RangeError} min cannot be greater than max nor negative
		     */
		    Chance.prototype.prime = function (options) {
		        options = initOptions(options, {min: 0, max: 10000});
		        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
		        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

		        var lastPrime = data.primes[data.primes.length - 1];
		        if (options.max > lastPrime) {
		            for (var i = lastPrime + 2; i <= options.max; ++i) {
		                if (this.is_prime(i)) {
		                    data.primes.push(i);
		                }
		            }
		        }
		        var targetPrimes = data.primes.filter(function (prime) {
		            return prime >= options.min && prime <= options.max;
		        });
		        return this.pick(targetPrimes);
		    };

		    /**
		     * Determine whether a given number is prime or not.
		     */
		    Chance.prototype.is_prime = function (n) {
		        if (n % 1 || n < 2) {
		            return false;
		        }
		        if (n % 2 === 0) {
		            return n === 2;
		        }
		        if (n % 3 === 0) {
		            return n === 3;
		        }
		        var m = Math.sqrt(n);
		        for (var i = 5; i <= m; i += 6) {
		            if (n % i === 0 || n % (i + 2) === 0) {
		                return false;
		            }
		        }
		        return true;
		    };

		    /**
		     *  Return a random hex number as string
		     *
		     *  NOTE the max and min are INCLUDED in the range. So:
		     *  chance.hex({min: '9', max: 'B'});
		     *  would return either '9', 'A' or 'B'.
		     *
		     *  @param {Object} [options={}] can specify a min and/or max and/or casing
		     *  @returns {String} a single random string hex number
		     *  @throws {RangeError} min cannot be greater than max
		     */
		    Chance.prototype.hex = function (options) {
		        options = initOptions(options, {min: 0, max: MAX_INT, casing: 'lower'});
		        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
				var integer = this.natural({min: options.min, max: options.max});
				if (options.casing === 'upper') {
					return integer.toString(16).toUpperCase();
				}
				return integer.toString(16);
		    };

		    Chance.prototype.letter = function(options) {
		        options = initOptions(options, {casing: 'lower'});
		        var pool = "abcdefghijklmnopqrstuvwxyz";
		        var letter = this.character({pool: pool});
		        if (options.casing === 'upper') {
		            letter = letter.toUpperCase();
		        }
		        return letter;
		    };

		    /**
		     *  Return a random string
		     *
		     *  @param {Object} [options={}] can specify a length or min and max
		     *  @returns {String} a string of random length
		     *  @throws {RangeError} length cannot be less than zero
		     */
		    Chance.prototype.string = function (options) {
		        options = initOptions(options, { min: 5, max: 20 });

		        if (options.length !== 0 && !options.length) {
		            options.length = this.natural({ min: options.min, max: options.max });
		        }

		        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
		        var length = options.length,
		            text = this.n(this.character, length, options);

		        return text.join("");
		    };

		    function CopyToken(c) {
		        this.c = c;
		    }

		    CopyToken.prototype = {
		        substitute: function () {
		            return this.c
		        }
		    };

		    function EscapeToken(c) {
		        this.c = c;
		    }

		    EscapeToken.prototype = {
		        substitute: function () {
		            if (!/[{}\\]/.test(this.c)) {
		                throw new Error('Invalid escape sequence: "\\' + this.c + '".')
		            }
		            return this.c
		        }
		    };

		    function ReplaceToken(c) {
		        this.c = c;
		    }

		    ReplaceToken.prototype = {
		        replacers: {
		            '#': function (chance) { return chance.character({ pool: NUMBERS }) },
		            'A': function (chance) { return chance.character({ pool: CHARS_UPPER }) },
		            'a': function (chance) { return chance.character({ pool: CHARS_LOWER }) },
		        },

		        substitute: function (chance) {
		            var replacer = this.replacers[this.c];
		            if (!replacer) {
		                throw new Error('Invalid replacement character: "' + this.c + '".')
		            }
		            return replacer(chance)
		        }
		    };

		    function parseTemplate(template) {
		        var tokens = [];
		        var mode = 'identity';
		        for (var i = 0; i<template.length; i++) {
		            var c = template[i];
		            switch (mode) {
		                case 'escape':
		                    tokens.push(new EscapeToken(c));
		                    mode = 'identity';
		                    break
		                case 'identity':
		                    if (c === '{') {
		                        mode = 'replace';
		                    } else if (c === '\\') {
		                        mode = 'escape';
		                    } else {
		                        tokens.push(new CopyToken(c));
		                    }
		                    break
		                case 'replace':
		                    if (c === '}') {
		                        mode = 'identity';
		                    } else {
		                        tokens.push(new ReplaceToken(c));
		                    }
		                    break
		            }
		        }
		        return tokens
		    }

		    /**
		     *  Return a random string matching the given template.
		     *
		     *  The template consists of any number of "character replacement" and
		     *  "character literal" sequences. A "character replacement" sequence
		     *  starts with a left brace, has any number of special replacement
		     *  characters, and ends with a right brace. A character literal can be any
		     *  character except a brace or a backslash. A literal brace or backslash
		     *  character can be included in the output by escaping with a backslash.
		     *
		     *  The following replacement characters can be used in a replacement
		     *  sequence:
		     *
		     *      "#": a random digit
		     *      "a": a random lower case letter
		     *      "A": a random upper case letter
		     *
		     *  Example: chance.template('{AA###}-{##}')
		     *
		     *  @param {String} template string.
		     *  @returns {String} a random string matching the template.
		     */
		    Chance.prototype.template = function (template) {
		        if (!template) {
		            throw new Error('Template string is required')
		        }
		        var self = this;
		        return parseTemplate(template)
		            .map(function (token) { return token.substitute(self) })
		            .join('');
		    };


		    /**
		     *  Return a random buffer
		     *
		     *  @param {Object} [options={}] can specify a length
		     *  @returns {Buffer} a buffer of random length
		     *  @throws {RangeError} length cannot be less than zero
		     */
		    Chance.prototype.buffer = function (options) {
		        if (typeof Buffer === 'undefined') {
		            throw new UnsupportedError('Sorry, the buffer() function is not supported on your platform');
		        }
		        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });
		        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
		        var length = options.length;
		        var content = this.n(this.character, length, options);

		        return Buffer.from(content);
		    };

		    // -- End Basics --

		    // -- Helpers --

		    Chance.prototype.capitalize = function (word) {
		        return word.charAt(0).toUpperCase() + word.substr(1);
		    };

		    Chance.prototype.mixin = function (obj) {
		        for (var func_name in obj) {
		            this[func_name] = obj[func_name];
		        }
		        return this;
		    };

		    /**
		     *  Given a function that generates something random and a number of items to generate,
		     *    return an array of items where none repeat.
		     *
		     *  @param {Function} fn the function that generates something random
		     *  @param {Number} num number of terms to generate
		     *  @param {Object} options any options to pass on to the generator function
		     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique
		     *
		     *  There can be more parameters after these. All additional parameters are provided to the given function
		     */
		    Chance.prototype.unique = function(fn, num, options) {
		        testRange(
		            typeof fn !== "function",
		            "Chance: The first argument must be a function."
		        );

		        var comparator = function(arr, val) { return arr.indexOf(val) !== -1; };

		        if (options) {
		            comparator = options.comparator || comparator;
		        }

		        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);

		        while (arr.length < num) {
		            var clonedParams = JSON.parse(JSON.stringify(params));
		            result = fn.apply(this, clonedParams);
		            if (!comparator(arr, result)) {
		                arr.push(result);
		                // reset count when unique found
		                count = 0;
		            }

		            if (++count > MAX_DUPLICATES) {
		                throw new RangeError("Chance: num is likely too large for sample set");
		            }
		        }
		        return arr;
		    };

		    /**
		     *  Gives an array of n random terms
		     *
		     *  @param {Function} fn the function that generates something random
		     *  @param {Number} n number of terms to generate
		     *  @returns {Array} an array of length `n` with items generated by `fn`
		     *
		     *  There can be more parameters after these. All additional parameters are provided to the given function
		     */
		    Chance.prototype.n = function(fn, n) {
		        testRange(
		            typeof fn !== "function",
		            "Chance: The first argument must be a function."
		        );

		        if (typeof n === 'undefined') {
		            n = 1;
		        }
		        var i = n, arr = [], params = slice.call(arguments, 2);

		        // Providing a negative count should result in a noop.
		        i = Math.max( 0, i );

		        for (null; i--; null) {
		            arr.push(fn.apply(this, params));
		        }

		        return arr;
		    };

		    // H/T to SO for this one: http://vq.io/OtUrZ5
		    Chance.prototype.pad = function (number, width, pad) {
		        // Default pad to 0 if none provided
		        pad = pad || '0';
		        // Convert number to a string
		        number = number + '';
		        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
		    };

		    // DEPRECATED on 2015-10-01
		    Chance.prototype.pick = function (arr, count) {
		        if (arr.length === 0) {
		            throw new RangeError("Chance: Cannot pick() from an empty array");
		        }
		        if (!count || count === 1) {
		            return arr[this.natural({max: arr.length - 1})];
		        } else {
		            return this.shuffle(arr).slice(0, count);
		        }
		    };

		    // Given an array, returns a single random element
		    Chance.prototype.pickone = function (arr) {
		        if (arr.length === 0) {
		          throw new RangeError("Chance: Cannot pickone() from an empty array");
		        }
		        return arr[this.natural({max: arr.length - 1})];
		    };

		    // Given an array, returns a random set with 'count' elements
		    Chance.prototype.pickset = function (arr, count) {
		        if (count === 0) {
		            return [];
		        }
		        if (arr.length === 0) {
		            throw new RangeError("Chance: Cannot pickset() from an empty array");
		        }
		        if (count < 0) {
		            throw new RangeError("Chance: Count must be a positive number");
		        }
		        if (!count || count === 1) {
		            return [ this.pickone(arr) ];
		        } else {
		            var array = arr.slice(0);
		            var end = array.length;

		            return this.n(function () {
		                var index = this.natural({max: --end});
		                var value = array[index];
		                array[index] = array[end];
		                return value;
		            }, Math.min(end, count));
		        }
		    };

		    Chance.prototype.shuffle = function (arr) {
		        var new_array = [],
		            j = 0,
		            length = Number(arr.length),
		            source_indexes = range(length),
		            last_source_index = length - 1,
		            selected_source_index;

		        for (var i = 0; i < length; i++) {
		            // Pick a random index from the array
		            selected_source_index = this.natural({max: last_source_index});
		            j = source_indexes[selected_source_index];

		            // Add it to the new array
		            new_array[i] = arr[j];

		            // Mark the source index as used
		            source_indexes[selected_source_index] = source_indexes[last_source_index];
		            last_source_index -= 1;
		        }

		        return new_array;
		    };

		    // Returns a single item from an array with relative weighting of odds
		    Chance.prototype.weighted = function (arr, weights, trim) {
		        if (arr.length !== weights.length) {
		            throw new RangeError("Chance: Length of array and weights must match");
		        }

		        // scan weights array and sum valid entries
		        var sum = 0;
		        var val;
		        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
		            val = weights[weightIndex];
		            if (isNaN(val)) {
		                throw new RangeError("Chance: All weights must be numbers");
		            }

		            if (val > 0) {
		                sum += val;
		            }
		        }

		        if (sum === 0) {
		            throw new RangeError("Chance: No valid entries in array weights");
		        }

		        // select a value within range
		        var selected = this.random() * sum;

		        // find array entry corresponding to selected value
		        var total = 0;
		        var lastGoodIdx = -1;
		        var chosenIdx;
		        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
		            val = weights[weightIndex];
		            total += val;
		            if (val > 0) {
		                if (selected <= total) {
		                    chosenIdx = weightIndex;
		                    break;
		                }
		                lastGoodIdx = weightIndex;
		            }

		            // handle any possible rounding error comparison to ensure something is picked
		            if (weightIndex === (weights.length - 1)) {
		                chosenIdx = lastGoodIdx;
		            }
		        }

		        var chosen = arr[chosenIdx];
		        trim = (typeof trim === 'undefined') ? false : trim;
		        if (trim) {
		            arr.splice(chosenIdx, 1);
		            weights.splice(chosenIdx, 1);
		        }

		        return chosen;
		    };

		    // -- End Helpers --

		    // -- Text --

		    Chance.prototype.paragraph = function (options) {
		        options = initOptions(options);

		        var sentences = options.sentences || this.natural({min: 3, max: 7}),
		            sentence_array = this.n(this.sentence, sentences),
		            separator = options.linebreak === true ? '\n' : ' ';

		        return sentence_array.join(separator);
		    };

		    // Could get smarter about this than generating random words and
		    // chaining them together. Such as: http://vq.io/1a5ceOh
		    Chance.prototype.sentence = function (options) {
		        options = initOptions(options);

		        var words = options.words || this.natural({min: 12, max: 18}),
		            punctuation = options.punctuation,
		            text, word_array = this.n(this.word, words);

		        text = word_array.join(' ');

		        // Capitalize first letter of sentence
		        text = this.capitalize(text);

		        // Make sure punctuation has a usable value
		        if (punctuation !== false && !/^[.?;!:]$/.test(punctuation)) {
		            punctuation = '.';
		        }

		        // Add punctuation mark
		        if (punctuation) {
		            text += punctuation;
		        }

		        return text;
		    };

		    Chance.prototype.syllable = function (options) {
		        options = initOptions(options);

		        var length = options.length || this.natural({min: 2, max: 3}),
		            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones
		            vowels = 'aeiou', // vowels
		            all = consonants + vowels, // all
		            text = '',
		            chr;

		        // I'm sure there's a more elegant way to do this, but this works
		        // decently well.
		        for (var i = 0; i < length; i++) {
		            if (i === 0) {
		                // First character can be anything
		                chr = this.character({pool: all});
		            } else if (consonants.indexOf(chr) === -1) {
		                // Last character was a vowel, now we want a consonant
		                chr = this.character({pool: consonants});
		            } else {
		                // Last character was a consonant, now we want a vowel
		                chr = this.character({pool: vowels});
		            }

		            text += chr;
		        }

		        if (options.capitalize) {
		            text = this.capitalize(text);
		        }

		        return text;
		    };

		    Chance.prototype.word = function (options) {
		        options = initOptions(options);

		        testRange(
		            options.syllables && options.length,
		            "Chance: Cannot specify both syllables AND length."
		        );

		        var syllables = options.syllables || this.natural({min: 1, max: 3}),
		            text = '';

		        if (options.length) {
		            // Either bound word by length
		            do {
		                text += this.syllable();
		            } while (text.length < options.length);
		            text = text.substring(0, options.length);
		        } else {
		            // Or by number of syllables
		            for (var i = 0; i < syllables; i++) {
		                text += this.syllable();
		            }
		        }

		        if (options.capitalize) {
		            text = this.capitalize(text);
		        }

		        return text;
		    };

		    Chance.prototype.emoji = function (options) {
		        options = initOptions(options, { category: "all", length: 1 });

		        testRange(
		            options.length < 1 || BigInt(options.length) > BigInt(MAX_INT),
		            "Chance: length must be between 1 and " + String(MAX_INT)
		        );

		        var emojis = this.get("emojis");

		        if (options.category === "all") {
		            options.category = this.pickone(Object.keys(emojis));
		        }

		        var emojisForCategory = emojis[options.category];

		        testRange(
		            emojisForCategory === undefined,
		            "Chance: Unrecognised emoji category: [" + options.category + "]."
		        );

		        return this.pickset(emojisForCategory, options.length)
		            .map(function (codePoint) {
		                return String.fromCodePoint(codePoint);
		            }).join("");
		    };

		    // -- End Text --

		    // -- Person --

		    Chance.prototype.age = function (options) {
		        options = initOptions(options);
		        var ageRange;

		        switch (options.type) {
		            case 'child':
		                ageRange = {min: 0, max: 12};
		                break;
		            case 'teen':
		                ageRange = {min: 13, max: 19};
		                break;
		            case 'adult':
		                ageRange = {min: 18, max: 65};
		                break;
		            case 'senior':
		                ageRange = {min: 65, max: 100};
		                break;
		            case 'all':
		                ageRange = {min: 0, max: 100};
		                break;
		            default:
		                ageRange = {min: 18, max: 65};
		                break;
		        }

		        return this.natural(ageRange);
		    };

		    Chance.prototype.birthday = function (options) {
		        var age = this.age(options);
		        var now = new Date();
		        var currentYear = now.getFullYear();

		        if (options && options.type) {
		            var min = new Date();
		            var max = new Date();
		            min.setFullYear(currentYear - age - 1);
		            max.setFullYear(currentYear - age);

		            options = initOptions(options, {
		                min: min,
		                max: max
		            });
		        } else if (options && ((options.minAge !== undefined) || (options.maxAge !== undefined))) {
		            testRange(options.minAge < 0, "Chance: MinAge cannot be less than zero.");
		            testRange(options.minAge > options.maxAge, "Chance: MinAge cannot be greater than MaxAge.");

		            var minAge = options.minAge !== undefined ? options.minAge : 0;
		            var maxAge = options.maxAge !== undefined ? options.maxAge : 100;

		            var minDate = new Date(currentYear - maxAge - 1, now.getMonth(), now.getDate());
		            var maxDate = new Date(currentYear - minAge, now.getMonth(), now.getDate());

		            minDate.setDate(minDate.getDate() +1);

		            maxDate.setDate(maxDate.getDate() +1);
		            maxDate.setMilliseconds(maxDate.getMilliseconds() -1);

		            options = initOptions(options, {
		                min: minDate,
		                max: maxDate
		          });
		        } else {
		            options = initOptions(options, {
		                year: currentYear - age
		            });
		        }

		        return this.date(options);
		    };

		    // CPF; ID to identify taxpayers in Brazil
		    Chance.prototype.cpf = function (options) {
		        options = initOptions(options, {
		            formatted: true
		        });

		        var n = this.n(this.natural, 9, { max: 9 });
		        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;
		        d1 = 11 - (d1 % 11);
		        if (d1>=10) {
		            d1 = 0;
		        }
		        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;
		        d2 = 11 - (d2 % 11);
		        if (d2>=10) {
		            d2 = 0;
		        }
		        var cpf = ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;
		        return options.formatted ? cpf : cpf.replace(/\D/g,'');
		    };

		    // CNPJ: ID to identify companies in Brazil
		    Chance.prototype.cnpj = function (options) {
		        options = initOptions(options, {
		            formatted: true
		        });

		        var n = this.n(this.natural, 12, { max: 12 });
		        var d1 = n[11]*2+n[10]*3+n[9]*4+n[8]*5+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;
		        d1 = 11 - (d1 % 11);
		        if (d1<2) {
		            d1 = 0;
		        }
		        var d2 = d1*2+n[11]*3+n[10]*4+n[9]*5+n[8]*6+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;
		        d2 = 11 - (d2 % 11);
		        if (d2<2) {
		            d2 = 0;
		        }
		        var cnpj = ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/'+n[8]+n[9]+n[10]+n[11]+'-'+d1+d2;
		        return options.formatted ? cnpj : cnpj.replace(/\D/g,'');
		    };

		    Chance.prototype.first = function (options) {
		        options = initOptions(options, {gender: this.gender(), nationality: 'en'});
		        return this.pick(this.get("firstNames")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);
		    };

		    Chance.prototype.profession = function (options) {
		        options = initOptions(options);
		        if(options.rank){
		            return this.pick(['Apprentice ', 'Junior ', 'Senior ', 'Lead ']) + this.pick(this.get("profession"));
		        } else {
		            return this.pick(this.get("profession"));
		        }
		    };

		    Chance.prototype.company = function (){
		        return this.pick(this.get("company"));
		    };

		    Chance.prototype.gender = function (options) {
		        options = initOptions(options, {extraGenders: []});
		        return this.pick(['Male', 'Female'].concat(options.extraGenders));
		    };

		    Chance.prototype.last = function (options) {
		      options = initOptions(options, {nationality: '*'});
		      if (options.nationality === "*") {
		        var allLastNames = [];
		        var lastNames = this.get("lastNames");
		        Object.keys(lastNames).forEach(function(key){
		          allLastNames = allLastNames.concat(lastNames[key]);
		        });
		        return this.pick(allLastNames)
		      }
		      else {
		        return this.pick(this.get("lastNames")[options.nationality.toLowerCase()]);
		      }

		    };

		    Chance.prototype.israelId=function(){
		        var x=this.string({pool: '0123456789',length:8});
		        var y=0;
		        for (var i=0;i<x.length;i++){
		            var thisDigit=  x[i] *  (i/2===parseInt(i/2) ? 1 : 2);
		            thisDigit=this.pad(thisDigit,2).toString();
		            thisDigit=parseInt(thisDigit[0]) + parseInt(thisDigit[1]);
		            y=y+thisDigit;
		        }
		        x=x+(10-parseInt(y.toString().slice(-1))).toString().slice(-1);
		        return x;
		    };

		    Chance.prototype.mrz = function (options) {
		        var checkDigit = function (input) {
		            var alpha = "<ABCDEFGHIJKLMNOPQRSTUVWXYXZ".split(''),
		                multipliers = [ 7, 3, 1 ],
		                runningTotal = 0;

		            if (typeof input !== 'string') {
		                input = input.toString();
		            }

		            input.split('').forEach(function(character, idx) {
		                var pos = alpha.indexOf(character);

		                if(pos !== -1) {
		                    character = pos === 0 ? 0 : pos + 9;
		                } else {
		                    character = parseInt(character, 10);
		                }
		                character *= multipliers[idx % multipliers.length];
		                runningTotal += character;
		            });
		            return runningTotal % 10;
		        };
		        var generate = function (opts) {
		            var pad = function (length) {
		                return new Array(length + 1).join('<');
		            };
		            var number = [ 'P<',
		                           opts.issuer,
		                           opts.last.toUpperCase(),
		                           '<<',
		                           opts.first.toUpperCase(),
		                           pad(39 - (opts.last.length + opts.first.length + 2)),
		                           opts.passportNumber,
		                           checkDigit(opts.passportNumber),
		                           opts.nationality,
		                           opts.dob,
		                           checkDigit(opts.dob),
		                           opts.gender,
		                           opts.expiry,
		                           checkDigit(opts.expiry),
		                           pad(14),
		                           checkDigit(pad(14)) ].join('');

		            return number +
		                (checkDigit(number.substr(44, 10) +
		                            number.substr(57, 7) +
		                            number.substr(65, 7)));
		        };

		        var that = this;

		        options = initOptions(options, {
		            first: this.first(),
		            last: this.last(),
		            passportNumber: this.integer({min: 100000000, max: 999999999}),
		            dob: (function () {
		                var date = that.birthday({type: 'adult'});
		                return [date.getFullYear().toString().substr(2),
		                        that.pad(date.getMonth() + 1, 2),
		                        that.pad(date.getDate(), 2)].join('');
		            }()),
		            expiry: (function () {
		                var date = new Date();
		                return [(date.getFullYear() + 5).toString().substr(2),
		                        that.pad(date.getMonth() + 1, 2),
		                        that.pad(date.getDate(), 2)].join('');
		            }()),
		            gender: this.gender() === 'Female' ? 'F': 'M',
		            issuer: 'GBR',
		            nationality: 'GBR'
		        });
		        return generate (options);
		    };

		    Chance.prototype.name = function (options) {
		        options = initOptions(options);

		        var first = this.first(options),
		            last = this.last(options),
		            name;

		        if (options.middle) {
		            name = first + ' ' + this.first(options) + ' ' + last;
		        } else if (options.middle_initial) {
		            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;
		        } else {
		            name = first + ' ' + last;
		        }

		        if (options.prefix) {
		            name = this.prefix(options) + ' ' + name;
		        }

		        if (options.suffix) {
		            name = name + ' ' + this.suffix(options);
		        }

		        return name;
		    };

		    // Return the list of available name prefixes based on supplied gender.
		    // @todo introduce internationalization
		    Chance.prototype.name_prefixes = function (gender) {
		        gender = gender || "all";
		        gender = gender.toLowerCase();

		        var prefixes = [
		            { name: 'Doctor', abbreviation: 'Dr.' }
		        ];

		        if (gender === "male" || gender === "all") {
		            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });
		        }

		        if (gender === "female" || gender === "all") {
		            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });
		            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });
		        }

		        return prefixes;
		    };

		    // Alias for name_prefix
		    Chance.prototype.prefix = function (options) {
		        return this.name_prefix(options);
		    };

		    Chance.prototype.name_prefix = function (options) {
		        options = initOptions(options, { gender: "all" });
		        return options.full ?
		            this.pick(this.name_prefixes(options.gender)).name :
		            this.pick(this.name_prefixes(options.gender)).abbreviation;
		    };
		    //Hungarian ID number
		    Chance.prototype.HIDN= function(){
		     //Hungarian ID nuber structure: XXXXXXYY (X=number,Y=Capital Latin letter)
		      var idn_pool="0123456789";
		      var idn_chrs="ABCDEFGHIJKLMNOPQRSTUVWXYXZ";
		      var idn="";
		        idn+=this.string({pool:idn_pool,length:6});
		        idn+=this.string({pool:idn_chrs,length:2});
		        return idn;
		    };


		    Chance.prototype.ssn = function (options) {
		        options = initOptions(options, {ssnFour: false, dashes: true});
		        var ssn_pool = "1234567890",
		            ssn,
		            dash = options.dashes ? '-' : '';

		        if(!options.ssnFour) {
		            ssn = this.string({pool: ssn_pool, length: 3}) + dash +
		            this.string({pool: ssn_pool, length: 2}) + dash +
		            this.string({pool: ssn_pool, length: 4});
		        } else {
		            ssn = this.string({pool: ssn_pool, length: 4});
		        }
		        return ssn;
		    };

		    // Aadhar is similar to ssn, used in India to uniquely identify a person
		    Chance.prototype.aadhar = function (options) {
		        options = initOptions(options, {onlyLastFour: false, separatedByWhiteSpace: true});
		        var aadhar_pool = "1234567890",
		            aadhar,
		            whiteSpace = options.separatedByWhiteSpace ? ' ' : '';

		        if(!options.onlyLastFour) {
		            aadhar = this.string({pool: aadhar_pool, length: 4}) + whiteSpace +
		            this.string({pool: aadhar_pool, length: 4}) + whiteSpace +
		            this.string({pool: aadhar_pool, length: 4});
		        } else {
		            aadhar = this.string({pool: aadhar_pool, length: 4});
		        }
		        return aadhar;
		    };

		    // Return the list of available name suffixes
		    // @todo introduce internationalization
		    Chance.prototype.name_suffixes = function () {
		        var suffixes = [
		            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },
		            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },
		            { name: 'Esquire', abbreviation: 'Esq.' },
		            { name: 'Junior', abbreviation: 'Jr.' },
		            { name: 'Juris Doctor', abbreviation: 'J.D.' },
		            { name: 'Master of Arts', abbreviation: 'M.A.' },
		            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },
		            { name: 'Master of Science', abbreviation: 'M.S.' },
		            { name: 'Medical Doctor', abbreviation: 'M.D.' },
		            { name: 'Senior', abbreviation: 'Sr.' },
		            { name: 'The Third', abbreviation: 'III' },
		            { name: 'The Fourth', abbreviation: 'IV' },
		            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },
		            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }
		        ];
		        return suffixes;
		    };

		    // Alias for name_suffix
		    Chance.prototype.suffix = function (options) {
		        return this.name_suffix(options);
		    };

		    Chance.prototype.name_suffix = function (options) {
		        options = initOptions(options);
		        return options.full ?
		            this.pick(this.name_suffixes()).name :
		            this.pick(this.name_suffixes()).abbreviation;
		    };

		    Chance.prototype.nationalities = function () {
		        return this.get("nationalities");
		    };

		    // Generate random nationality based on json list
		    Chance.prototype.nationality = function () {
		        var nationality = this.pick(this.nationalities());
		        return nationality.name;
		    };

		     // Generate random zodiac sign
		     Chance.prototype.zodiac = function () {
		        const zodiacSymbols = ["Aries","Taurus","Gemini","Cancer","Leo","Virgo","Libra","Scorpio","Sagittarius","Capricorn","Aquarius","Pisces"];
		        return this.pickone(zodiacSymbols);
		    };


		    // -- End Person --

		    // -- Mobile --
		    // Android GCM Registration ID
		    Chance.prototype.android_id = function () {
		        return "APA91" + this.string({ pool: "0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_", length: 178 });
		    };

		    // Apple Push Token
		    Chance.prototype.apple_token = function () {
		        return this.string({ pool: "abcdef1234567890", length: 64 });
		    };

		    // Windows Phone 8 ANID2
		    Chance.prototype.wp8_anid2 = function () {
		        return base64( this.hash( { length : 32 } ) );
		    };

		    // Windows Phone 7 ANID
		    Chance.prototype.wp7_anid = function () {
		        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });
		    };

		    // BlackBerry Device PIN
		    Chance.prototype.bb_pin = function () {
		        return this.hash({ length: 8 });
		    };

		    // -- End Mobile --

		    // -- Web --
		    Chance.prototype.avatar = function (options) {
		        var url = null;
		        var URL_BASE = '//www.gravatar.com/avatar/';
		        var PROTOCOLS = {
		            http: 'http',
		            https: 'https'
		        };
		        var FILE_TYPES = {
		            bmp: 'bmp',
		            gif: 'gif',
		            jpg: 'jpg',
		            png: 'png'
		        };
		        var FALLBACKS = {
		            '404': '404', // Return 404 if not found
		            mm: 'mm', // Mystery man
		            identicon: 'identicon', // Geometric pattern based on hash
		            monsterid: 'monsterid', // A generated monster icon
		            wavatar: 'wavatar', // A generated face
		            retro: 'retro', // 8-bit icon
		            blank: 'blank' // A transparent png
		        };
		        var RATINGS = {
		            g: 'g',
		            pg: 'pg',
		            r: 'r',
		            x: 'x'
		        };
		        var opts = {
		            protocol: null,
		            email: null,
		            fileExtension: null,
		            size: null,
		            fallback: null,
		            rating: null
		        };

		        if (!options) {
		            // Set to a random email
		            opts.email = this.email();
		            options = {};
		        }
		        else if (typeof options === 'string') {
		            opts.email = options;
		            options = {};
		        }
		        else if (typeof options !== 'object') {
		            return null;
		        }
		        else if (options.constructor === 'Array') {
		            return null;
		        }

		        opts = initOptions(options, opts);

		        if (!opts.email) {
		            // Set to a random email
		            opts.email = this.email();
		        }

		        // Safe checking for params
		        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';
		        opts.size = parseInt(opts.size, 0) ? opts.size : '';
		        opts.rating = RATINGS[opts.rating] ? opts.rating : '';
		        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';
		        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';

		        url =
		            opts.protocol +
		            URL_BASE +
		            this.bimd5.md5(opts.email) +
		            (opts.fileExtension ? '.' + opts.fileExtension : '') +
		            (opts.size || opts.rating || opts.fallback ? '?' : '') +
		            (opts.size ? '&s=' + opts.size.toString() : '') +
		            (opts.rating ? '&r=' + opts.rating : '') +
		            (opts.fallback ? '&d=' + opts.fallback : '')
		            ;

		        return url;
		    };

		    /**
		     * #Description:
		     * ===============================================
		     * Generate random color value base on color type:
		     * -> hex
		     * -> rgb
		     * -> rgba
		     * -> 0x
		     * -> named color
		     *
		     * #Examples:
		     * ===============================================
		     * * Geerate random hex color
		     * chance.color() => '#79c157' / 'rgb(110,52,164)' / '0x67ae0b' / '#e2e2e2' / '#29CFA7'
		     *
		     * * Generate Hex based color value
		     * chance.color({format: 'hex'})    => '#d67118'
		     *
		     * * Generate simple rgb value
		     * chance.color({format: 'rgb'})    => 'rgb(110,52,164)'
		     *
		     * * Generate Ox based color value
		     * chance.color({format: '0x'})     => '0x67ae0b'
		     *
		     * * Generate graiscale based value
		     * chance.color({grayscale: true})  => '#e2e2e2'
		     *
		     * * Return valide color name
		     * chance.color({format: 'name'})   => 'red'
		     *
		     * * Make color uppercase
		     * chance.color({casing: 'upper'})  => '#29CFA7'
		     *
		     * * Min Max values for RGBA
		     * var light_red = chance.color({format: 'hex', min_red: 200, max_red: 255, max_green: 0, max_blue: 0, min_alpha: .2, max_alpha: .3});
		     *
		     * @param  [object] options
		     * @return [string] color value
		     */
		    Chance.prototype.color = function (options) {
		        function gray(value, delimiter) {
		            return [value, value, value].join(delimiter || '');
		        }

		        function rgb(hasAlpha) {
		            var rgbValue     = (hasAlpha)    ? 'rgba' : 'rgb';
		            var alphaChannel = (hasAlpha)    ? (',' + this.floating({min:min_alpha, max:max_alpha})) : "";
		            var colorValue   = (isGrayscale) ? (gray(this.natural({min: min_rgb, max: max_rgb}), ',')) : (this.natural({min: min_green, max: max_green}) + ',' + this.natural({min: min_blue, max: max_blue}) + ',' + this.natural({max: 255}));
		            return rgbValue + '(' + colorValue + alphaChannel + ')';
		        }

		        function hex(start, end, withHash) {
		            var symbol = (withHash) ? "#" : "";
		            var hexstring = "";

		            if (isGrayscale) {
		                hexstring = gray(this.pad(this.hex({min: min_rgb, max: max_rgb}), 2));
		                if (options.format === "shorthex") {
		                    hexstring = gray(this.hex({min: 0, max: 15}));
		                }
		            }
		            else {
		                if (options.format === "shorthex") {
		                    hexstring = this.pad(this.hex({min: Math.floor(min_red / 16), max: Math.floor(max_red / 16)}), 1) + this.pad(this.hex({min: Math.floor(min_green / 16), max: Math.floor(max_green / 16)}), 1) + this.pad(this.hex({min: Math.floor(min_blue / 16), max: Math.floor(max_blue / 16)}), 1);
		                }
		                else if (min_red !== undefined || max_red !== undefined || min_green !== undefined || max_green !== undefined || min_blue !== undefined || max_blue !== undefined) {
		                    hexstring = this.pad(this.hex({min: min_red, max: max_red}), 2) + this.pad(this.hex({min: min_green, max: max_green}), 2) + this.pad(this.hex({min: min_blue, max: max_blue}), 2);
		                }
		                else {
		                    hexstring = this.pad(this.hex({min: min_rgb, max: max_rgb}), 2) + this.pad(this.hex({min: min_rgb, max: max_rgb}), 2) + this.pad(this.hex({min: min_rgb, max: max_rgb}), 2);
		                }
		            }

		            return symbol + hexstring;
		        }

		        options = initOptions(options, {
		            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x', 'name']),
		            grayscale: false,
		            casing: 'lower',
		            min: 0,
		            max: 255,
		            min_red: undefined,
		            max_red: undefined,
		            min_green: undefined,
		            max_green: undefined,
		            min_blue: undefined,
		            max_blue: undefined,
		            min_alpha: 0,
		            max_alpha: 1
		        });

		        var isGrayscale = options.grayscale;
		        var min_rgb = options.min;
		        var max_rgb = options.max;
		        var min_red = options.min_red;
		        var max_red = options.max_red;
		        var min_green = options.min_green;
		        var max_green = options.max_green;
		        var min_blue = options.min_blue;
		        var max_blue = options.max_blue;
		        var min_alpha = options.min_alpha;
		        var max_alpha = options.max_alpha;
		        if (options.min_red === undefined) { min_red = min_rgb; }
		        if (options.max_red === undefined) { max_red = max_rgb; }
		        if (options.min_green === undefined) { min_green = min_rgb; }
		        if (options.max_green === undefined) { max_green = max_rgb; }
		        if (options.min_blue === undefined) { min_blue = min_rgb; }
		        if (options.max_blue === undefined) { max_blue = max_rgb; }
		        if (options.min_alpha === undefined) { min_alpha = 0; }
		        if (options.max_alpha === undefined) { max_alpha = 1; }
		        if (isGrayscale && min_rgb === 0 && max_rgb === 255 && min_red !== undefined && max_red !== undefined) {
		            min_rgb = ((min_red + min_green + min_blue) / 3);
		            max_rgb = ((max_red + max_green + max_blue) / 3);
		        }
		        var colorValue;

		        if (options.format === 'hex') {
		            colorValue = hex.call(this, 2, 6, true);
		        }
		        else if (options.format === 'shorthex') {
		            colorValue = hex.call(this, 1, 3, true);
		        }
		        else if (options.format === 'rgb') {
		            colorValue = rgb.call(this, false);
		        }
		        else if (options.format === 'rgba') {
		            colorValue = rgb.call(this, true);
		        }
		        else if (options.format === '0x') {
		            colorValue = '0x' + hex.call(this, 2, 6);
		        }
		        else if(options.format === 'name') {
		            return this.pick(this.get("colorNames"));
		        }
		        else {
		            throw new RangeError('Invalid format provided. Please provide one of "hex", "shorthex", "rgb", "rgba", "0x" or "name".');
		        }

		        if (options.casing === 'upper' ) {
		            colorValue = colorValue.toUpperCase();
		        }

		        return colorValue;
		    };

		    Chance.prototype.domain = function (options) {
		        options = initOptions(options);
		        return this.word() + '.' + (options.tld || this.tld());
		    };

		    Chance.prototype.email = function (options) {
		        options = initOptions(options);
		        return this.word({length: options.length}) + '@' + (options.domain || this.domain());
		    };

		    /**
		     * #Description:
		     * ===============================================
		     * Generate a random Facebook id, aka fbid.
		     *
		     * NOTE: At the moment (Sep 2017), Facebook ids are
		     * "numeric strings" of length 16.
		     * However, Facebook Graph API documentation states that
		     * "it is extremely likely to change over time".
		     * @see https://developers.facebook.com/docs/graph-api/overview/
		     *
		     * #Examples:
		     * ===============================================
		     * chance.fbid() => '1000035231661304'
		     *
		     * @return [string] facebook id
		     */
		    Chance.prototype.fbid = function () {
		        return '10000' + this.string({pool: "1234567890", length: 11});
		    };

		    Chance.prototype.google_analytics = function () {
		        var account = this.pad(this.natural({max: 999999}), 6);
		        var property = this.pad(this.natural({max: 99}), 2);

		        return 'UA-' + account + '-' + property;
		    };

		    Chance.prototype.hashtag = function () {
		        return '#' + this.word();
		    };

		    Chance.prototype.ip = function () {
		        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy
		        // this should probably be updated to account for that rare as it may be
		        return this.natural({min: 1, max: 254}) + '.' +
		               this.natural({max: 255}) + '.' +
		               this.natural({max: 255}) + '.' +
		               this.natural({min: 1, max: 254});
		    };

		    Chance.prototype.ipv6 = function () {
		        var ip_addr = this.n(this.hash, 8, {length: 4});

		        return ip_addr.join(":");
		    };

		    Chance.prototype.klout = function () {
		        return this.natural({min: 1, max: 99});
		    };

		    Chance.prototype.mac = function (options) {
		        // Todo: This could also be extended to EUI-64 based MACs
		        // (https://www.iana.org/assignments/ethernet-numbers/ethernet-numbers.xhtml#ethernet-numbers-4)
		        // Todo: This can return some reserved MACs (similar to IP function)
		        // this should probably be updated to account for that rare as it may be
		        options = initOptions(options, { delimiter: ':' });
		        return this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +
		               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +
		               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +
		               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +
		               this.pad(this.natural({max: 255}).toString(16),2) + options.delimiter +
		               this.pad(this.natural({max: 255}).toString(16),2);
		    };

		    Chance.prototype.semver = function (options) {
		        options = initOptions(options, { include_prerelease: true });

		        var range = this.pickone(["^", "~", "<", ">", "<=", ">=", "="]);
		        if (options.range) {
		            range = options.range;
		        }

		        var prerelease = "";
		        if (options.include_prerelease) {
		            prerelease = this.weighted(["", "-dev", "-beta", "-alpha"], [50, 10, 5, 1]);
		        }
		        return range + this.rpg('3d10').join('.') + prerelease;
		    };

		    Chance.prototype.tlds = function () {
		        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sx', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'];
		    };

		    Chance.prototype.tld = function () {
		        return this.pick(this.tlds());
		    };

		    Chance.prototype.twitter = function () {
		        return '@' + this.word();
		    };

		    Chance.prototype.url = function (options) {
		        options = initOptions(options, { protocol: "http", domain: this.domain(options), domain_prefix: "", path: this.word(), extensions: []});

		        var extension = options.extensions.length > 0 ? "." + this.pick(options.extensions) : "";
		        var domain = options.domain_prefix ? options.domain_prefix + "." + options.domain : options.domain;

		        return options.protocol + "://" + domain + "/" + options.path + extension;
		    };

		    Chance.prototype.port = function() {
		        return this.integer({min: 0, max: 65535});
		    };

		    Chance.prototype.locale = function (options) {
		        options = initOptions(options);
		        if (options.region){
		          return this.pick(this.get("locale_regions"));
		        } else {
		          return this.pick(this.get("locale_languages"));
		        }
		    };

		    Chance.prototype.locales = function (options) {
		      options = initOptions(options);
		      if (options.region){
		        return this.get("locale_regions");
		      } else {
		        return this.get("locale_languages");
		      }
		    };

		    Chance.prototype.loremPicsum = function (options) {
		        options = initOptions(options, { width: 500, height: 500, greyscale: false, blurred: false });

		        var greyscale = options.greyscale ? 'g/' : '';
		        var query = options.blurred ? '/?blur' : '/?random';

		        return 'https://picsum.photos/' + greyscale + options.width + '/' + options.height + query;
		    };

		    // -- End Web --

		    // -- Location --

		    Chance.prototype.address = function (options) {
		        options = initOptions(options);
		        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);
		    };

		    Chance.prototype.altitude = function (options) {
		        options = initOptions(options, {fixed: 5, min: 0, max: 8848});
		        return this.floating({
		            min: options.min,
		            max: options.max,
		            fixed: options.fixed
		        });
		    };

		    Chance.prototype.areacode = function (options) {
		        options = initOptions(options, {parens : true});
		        // Don't want area codes to start with 1, or have a 9 as the second digit
		        var areacode = options.exampleNumber ?
		        "555" :
		        this.natural({min: 2, max: 9}).toString() +
		                this.natural({min: 0, max: 8}).toString() +
		                this.natural({min: 0, max: 9}).toString();

		        return options.parens ? '(' + areacode + ')' : areacode;
		    };

		    Chance.prototype.city = function () {
		        return this.capitalize(this.word({syllables: 3}));
		    };

		    Chance.prototype.coordinates = function (options) {
		        return this.latitude(options) + ', ' + this.longitude(options);
		    };

		    Chance.prototype.countries = function () {
		        return this.get("countries");
		    };

		    Chance.prototype.country = function (options) {
		        options = initOptions(options);
		        var country = this.pick(this.countries());
		        return options.raw ? country : options.full ? country.name : country.abbreviation;
		    };

		    Chance.prototype.depth = function (options) {
		        options = initOptions(options, {fixed: 5, min: -10994, max: 0});
		        return this.floating({
		            min: options.min,
		            max: options.max,
		            fixed: options.fixed
		        });
		    };

		    Chance.prototype.geohash = function (options) {
		        options = initOptions(options, { length: 7 });
		        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });
		    };

		    Chance.prototype.geojson = function (options) {
		        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);
		    };

		    Chance.prototype.latitude = function (options) {
		        // Constants - Formats
		        var [DDM, DMS, DD] = ['ddm', 'dms', 'dd'];

		        options = initOptions(
		options,
		            options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ?
		            {min: 0, max: 89, fixed: 4} :
		            {fixed: 5, min: -90, max: 90, format: DD}
		);

		        var format = options.format.toLowerCase();

		        if (format === DDM || format === DMS) {
		            testRange(options.min < 0 || options.min > 89, "Chance: Min specified is out of range. Should be between 0 - 89");
		            testRange(options.max < 0 || options.max > 89, "Chance: Max specified is out of range. Should be between 0 - 89");
		            testRange(options.fixed > 4, 'Chance: Fixed specified should be below or equal to 4');
		        }

		        switch (format) {
		            case DDM: {
		                return  this.integer({min: options.min, max: options.max}) + '°' +
		                        this.floating({min: 0, max: 59, fixed: options.fixed});
		            }
		            case DMS: {
		                return  this.integer({min: options.min, max: options.max}) + '°' +
		                        this.integer({min: 0, max: 59}) + '’' +
		                        this.floating({min: 0, max: 59, fixed: options.fixed}) + '”';
		            }
		            case DD:
		            default: {
		                return this.floating({min: options.min, max: options.max, fixed: options.fixed});
		            }
		        }
		    };

		    Chance.prototype.longitude = function (options) {
		        // Constants - Formats
		        var [DDM, DMS, DD] = ['ddm', 'dms', 'dd'];

		        options = initOptions(
		options,
		            options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ?
		            {min: 0, max: 179, fixed: 4} :
		            {fixed: 5, min: -180, max: 180, format: DD}
		);

		        var format = options.format.toLowerCase();

		        if (format === DDM || format === DMS) {
		            testRange(options.min < 0 || options.min > 179, "Chance: Min specified is out of range. Should be between 0 - 179");
		            testRange(options.max < 0 || options.max > 179, "Chance: Max specified is out of range. Should be between 0 - 179");
		            testRange(options.fixed > 4, 'Chance: Fixed specified should be below or equal to 4');
		        }

		        switch (format) {
		            case DDM: {
		                return  this.integer({min: options.min, max: options.max}) + '°' +
		                        this.floating({min: 0, max: 59.9999, fixed: options.fixed})
		            }
		            case DMS: {
		                return  this.integer({min: options.min, max: options.max}) + '°' +
		                        this.integer({min: 0, max: 59}) + '’' +
		                        this.floating({min: 0, max: 59.9999, fixed: options.fixed}) + '”';
		            }
		            case DD:
		            default: {
		                return this.floating({min: options.min, max: options.max, fixed: options.fixed});
		            }
		        }
		    };

		    Chance.prototype.phone = function (options) {
		        var self = this,
		            numPick,
		            ukNum = function (parts) {
		                var section = [];
		                //fills the section part of the phone number with random numbers.
		                parts.sections.forEach(function(n) {
		                    section.push(self.string({ pool: '0123456789', length: n}));
		                });
		                return parts.area + section.join(' ');
		            };
		        options = initOptions(options, {
		            formatted: true,
		            country: 'us',
		            mobile: false,
		            exampleNumber: false,
		        });
		        if (!options.formatted) {
		            options.parens = false;
		        }
		        var phone;
		        switch (options.country) {
		            case 'fr':
		                if (!options.mobile) {
		                    numPick = this.pick([
		                        // Valid zone and département codes.
		                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),
		                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),
		                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),
		                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),
		                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),
		                        '09' + self.string({ pool: '0123456789', length: 8}),
		                    ]);
		                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
		                } else {
		                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});
		                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
		                }
		                break;
		            case 'uk':
		                if (!options.mobile) {
		                    numPick = this.pick([
		                        //valid area codes of major cities/counties followed by random numbers in required format.

		                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },
		                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },
		                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },
		                        { area: '024 7', sections: [3,4] },
		                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },
		                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [6] },
		                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [6] },
		                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [6] },
		                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [6] },
		                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [6] },
		                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [6] },
		                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [6] },
		                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [6] }
		                    ]);
		                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');
		                } else {
		                    numPick = this.pick([
		                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },
		                        { area: '07624 ', sections: [6] }
		                    ]);
		                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');
		                }
		                break;
		            case 'za':
		                if (!options.mobile) {
		                    numPick = this.pick([
		                       '01' + this.pick(['0', '1', '2', '3', '4', '5', '6', '7', '8']) + self.string({ pool: '0123456789', length: 7}),
		                       '02' + this.pick(['1', '2', '3', '4', '7', '8']) + self.string({ pool: '0123456789', length: 7}),
		                       '03' + this.pick(['1', '2', '3', '5', '6', '9']) + self.string({ pool: '0123456789', length: 7}),
		                       '04' + this.pick(['1', '2', '3', '4', '5','6','7', '8','9']) + self.string({ pool: '0123456789', length: 7}),
		                       '05' + this.pick(['1', '3', '4', '6', '7', '8']) + self.string({ pool: '0123456789', length: 7}),
		                    ]);
		                    phone = options.formatted || numPick;
		                } else {
		                    numPick = this.pick([
		                        '060' + this.pick(['3','4','5','6','7','8','9']) + self.string({ pool: '0123456789', length: 6}),
		                        '061' + this.pick(['0','1','2','3','4','5','8']) + self.string({ pool: '0123456789', length: 6}),
		                        '06'  + self.string({ pool: '0123456789', length: 7}),
		                        '071' + this.pick(['0','1','2','3','4','5','6','7','8','9']) + self.string({ pool: '0123456789', length: 6}),
		                        '07'  + this.pick(['2','3','4','6','7','8','9']) + self.string({ pool: '0123456789', length: 7}),
		                        '08'  + this.pick(['0','1','2','3','4','5']) + self.string({ pool: '0123456789', length: 7}),
		                    ]);
		                    phone = options.formatted || numPick;
		                }
		                break;
		            case 'us':
		                var areacode = this.areacode(options).toString();
		                var exchange = this.natural({ min: 2, max: 9 }).toString() +
		                    this.natural({ min: 0, max: 9 }).toString() +
		                    this.natural({ min: 0, max: 9 }).toString();
		                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}
		                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;
		                break;
		            case 'br':
		                var areaCode = this.pick(["11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "24", "27", "28", "31", "32", "33", "34", "35", "37", "38", "41", "42", "43", "44", "45", "46", "47", "48", "49", "51", "53", "54", "55", "61", "62", "63", "64", "65", "66", "67", "68", "69", "71", "73", "74", "75", "77", "79", "81", "82", "83", "84", "85", "86", "87", "88", "89", "91", "92", "93", "94", "95", "96", "97", "98", "99"]);
		                var prefix;
		                if (options.mobile) {
		                    // Brasilian official reference (mobile): http://www.anatel.gov.br/setorregulado/plano-de-numeracao-brasileiro?id=330
		                    prefix = '9' + self.string({ pool: '0123456789', length: 4});
		                } else {
		                    // Brasilian official reference: http://www.anatel.gov.br/setorregulado/plano-de-numeracao-brasileiro?id=331
		                    prefix = this.natural({ min: 2000, max: 5999 }).toString();
		                }
		                var mcdu = self.string({ pool: '0123456789', length: 4});
		                phone = options.formatted ? '(' + areaCode + ') ' + prefix + '-' + mcdu : areaCode + prefix + mcdu;
		                break;
		        }
		        return phone;
		    };

		    Chance.prototype.postal = function () {
		        // Postal District
		        var pd = this.character({pool: "XVTSRPNKLMHJGECBA"});
		        // Forward Sortation Area (FSA)
		        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: "upper"});
		        // Local Delivery Unut (LDU)
		        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: "upper"}) + this.natural({max: 9});

		        return fsa + " " + ldu;
		    };

		    Chance.prototype.postcode = function () {
		        // Area
		        var area = this.pick(this.get("postcodeAreas")).code;
		        // District
		        var district = this.natural({max: 9});
		        // Sub-District
		        var subDistrict = this.bool() ? this.character({alpha: true, casing: "upper"}) : "";
		        // Outward Code
		        var outward = area + district + subDistrict;
		        // Sector
		        var sector = this.natural({max: 9});
		        // Unit
		        var unit = this.character({alpha: true, casing: "upper"}) + this.character({alpha: true, casing: "upper"});
		        // Inward Code
		        var inward = sector + unit;

		        return outward + " " + inward;
		    };

		    Chance.prototype.counties = function (options) {
		        options = initOptions(options, { country: 'uk' });
		        return this.get("counties")[options.country.toLowerCase()];
		    };

		    Chance.prototype.county = function (options) {
		        return this.pick(this.counties(options)).name;
		    };

		    Chance.prototype.provinces = function (options) {
		        options = initOptions(options, { country: 'ca' });
		        return this.get("provinces")[options.country.toLowerCase()];
		    };

		    Chance.prototype.province = function (options) {
		        return (options && options.full) ?
		            this.pick(this.provinces(options)).name :
		            this.pick(this.provinces(options)).abbreviation;
		    };

		    Chance.prototype.state = function (options) {
		        return (options && options.full) ?
		            this.pick(this.states(options)).name :
		            this.pick(this.states(options)).abbreviation;
		    };

		    Chance.prototype.states = function (options) {
		        options = initOptions(options, { country: 'us', us_states_and_dc: true } );

		        var states;

		        switch (options.country.toLowerCase()) {
		            case 'us':
		                var us_states_and_dc = this.get("us_states_and_dc"),
		                    territories = this.get("territories"),
		                    armed_forces = this.get("armed_forces");

		                states = [];

		                if (options.us_states_and_dc) {
		                    states = states.concat(us_states_and_dc);
		                }
		                if (options.territories) {
		                    states = states.concat(territories);
		                }
		                if (options.armed_forces) {
		                    states = states.concat(armed_forces);
		                }
		                break;
		            case 'it':
		            case 'mx':
		                states = this.get("country_regions")[options.country.toLowerCase()];
		                break;
		            case 'uk':
		                states = this.get("counties")[options.country.toLowerCase()];
		                break;
		        }

		        return states;
		    };

		    Chance.prototype.street = function (options) {
		        options = initOptions(options, { country: 'us', syllables: 2 });
		        var     street;

		        switch (options.country.toLowerCase()) {
		            case 'us':
		                street = this.word({ syllables: options.syllables });
		                street = this.capitalize(street);
		                street += ' ';
		                street += options.short_suffix ?
		                    this.street_suffix(options).abbreviation :
		                    this.street_suffix(options).name;
		                break;
		            case 'it':
		                street = this.word({ syllables: options.syllables });
		                street = this.capitalize(street);
		                street = (options.short_suffix ?
		                    this.street_suffix(options).abbreviation :
		                    this.street_suffix(options).name) + " " + street;
		                break;
		        }
		        return street;
		    };

		    Chance.prototype.street_suffix = function (options) {
		        options = initOptions(options, { country: 'us' });
		        return this.pick(this.street_suffixes(options));
		    };

		    Chance.prototype.street_suffixes = function (options) {
		        options = initOptions(options, { country: 'us' });
		        // These are the most common suffixes.
		        return this.get("street_suffixes")[options.country.toLowerCase()];
		    };

		    // Note: only returning US zip codes, internationalization will be a whole
		    // other beast to tackle at some point.
		    Chance.prototype.zip = function (options) {
		        var zip = this.n(this.natural, 5, {max: 9});

		        if (options && options.plusfour === true) {
		            zip.push('-');
		            zip = zip.concat(this.n(this.natural, 4, {max: 9}));
		        }

		        return zip.join("");
		    };

		    // -- End Location --

		    // -- Time

		    Chance.prototype.ampm = function () {
		        return this.bool() ? 'am' : 'pm';
		    };

		    Chance.prototype.date = function (options) {
		        var date_string, date;

		        // If interval is specified we ignore preset
		        if(options && (options.min || options.max)) {
		            options = initOptions(options, {
		                american: true,
		                string: false
		            });
		            var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
		            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1
		            var max = typeof options.max !== "undefined" ? options.max.getTime() : 8640000000000000;

		            date = new Date(this.integer({min: min, max: max}));
		        } else {
		            var m = this.month({raw: true});
		            var daysInMonth = m.days;

		            if(options && options.month) {
		                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).
		                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;
		            }

		            options = initOptions(options, {
		                year: parseInt(this.year(), 10),
		                // Necessary to subtract 1 because Date() 0-indexes month but not day or year
		                // for some reason.
		                month: m.numeric - 1,
		                day: this.natural({min: 1, max: daysInMonth}),
		                hour: this.hour({twentyfour: true}),
		                minute: this.minute(),
		                second: this.second(),
		                millisecond: this.millisecond(),
		                american: true,
		                string: false
		            });

		            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
		        }

		        if (options.american) {
		            // Adding 1 to the month is necessary because Date() 0-indexes
		            // months but not day for some odd reason.
		            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
		        } else {
		            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
		        }

		        return options.string ? date_string : date;
		    };

		    Chance.prototype.hammertime = function (options) {
		        return this.date(options).getTime();
		    };

		    Chance.prototype.hour = function (options) {
		        options = initOptions(options, {
		            min: options && options.twentyfour ? 0 : 1,
		            max: options && options.twentyfour ? 23 : 12
		        });

		        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
		        testRange(options.twentyfour && options.max > 23, "Chance: Max cannot be greater than 23 for twentyfour option.");
		        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
		        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

		        return this.natural({min: options.min, max: options.max});
		    };

		    Chance.prototype.millisecond = function () {
		        return this.natural({max: 999});
		    };

		    Chance.prototype.minute = Chance.prototype.second = function (options) {
		        options = initOptions(options, {min: 0, max: 59});

		        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
		        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
		        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

		        return this.natural({min: options.min, max: options.max});
		    };

		    Chance.prototype.month = function (options) {
		        options = initOptions(options, {min: 1, max: 12});

		        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
		        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
		        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

		        var month = this.pick(this.months().slice(options.min - 1, options.max));
		        return options.raw ? month : month.name;
		    };

		    Chance.prototype.months = function () {
		        return this.get("months");
		    };

		    Chance.prototype.second = function () {
		        return this.natural({max: 59});
		    };

		    Chance.prototype.timestamp = function () {
		        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});
		    };

		    Chance.prototype.weekday = function (options) {
		        options = initOptions(options, {weekday_only: false});
		        var weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
		        if (!options.weekday_only) {
		            weekdays.push("Saturday");
		            weekdays.push("Sunday");
		        }
		        return this.pickone(weekdays);
		    };

		    Chance.prototype.year = function (options) {
		        // Default to current year as min if none specified
		        options = initOptions(options, {min: new Date().getFullYear()});

		        // Default to one century after current year as max if none specified
		        options.max = (typeof options.max !== "undefined") ? options.max : options.min + 100;

		        return this.natural(options).toString();
		    };

		    // -- End Time

		    // -- Finance --

		    Chance.prototype.cc = function (options) {
		        options = initOptions(options);

		        var type, number, to_generate;

		        type = (options.type) ?
		                    this.cc_type({ name: options.type, raw: true }) :
		                    this.cc_type({ raw: true });

		        number = type.prefix.split("");
		        to_generate = type.length - type.prefix.length - 1;

		        // Generates n - 1 digits
		        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));

		        // Generates the last digit according to Luhn algorithm
		        number.push(this.luhn_calculate(number.join("")));

		        return number.join("");
		    };

		    Chance.prototype.cc_types = function () {
		        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
		        return this.get("cc_types");
		    };

		    Chance.prototype.cc_type = function (options) {
		        options = initOptions(options);
		        var types = this.cc_types(),
		            type = null;

		        if (options.name) {
		            for (var i = 0; i < types.length; i++) {
		                // Accept either name or short_name to specify card type
		                if (types[i].name === options.name || types[i].short_name === options.name) {
		                    type = types[i];
		                    break;
		                }
		            }
		            if (type === null) {
		                throw new RangeError("Chance: Credit card type '" + options.name + "' is not supported");
		            }
		        } else {
		            type = this.pick(types);
		        }

		        return options.raw ? type : type.name;
		    };

		    // return all world currency by ISO 4217
		    Chance.prototype.currency_types = function () {
		        return this.get("currency_types");
		    };

		    // return random world currency by ISO 4217
		    Chance.prototype.currency = function () {
		        return this.pick(this.currency_types());
		    };

		    // return all timezones available
		    Chance.prototype.timezones = function () {
		        return this.get("timezones");
		    };

		    // return random timezone
		    Chance.prototype.timezone = function () {
		        return this.pick(this.timezones());
		    };

		    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code
		    Chance.prototype.currency_pair = function (returnAsString) {
		        var currencies = this.unique(this.currency, 2, {
		            comparator: function(arr, val) {

		                return arr.reduce(function(acc, item) {
		                    // If a match has been found, short circuit check and just return
		                    return acc || (item.code === val.code);
		                }, false);
		            }
		        });

		        if (returnAsString) {
		            return currencies[0].code + '/' + currencies[1].code;
		        } else {
		            return currencies;
		        }
		    };

		    Chance.prototype.dollar = function (options) {
		        // By default, a somewhat more sane max for dollar than all available numbers
		        options = initOptions(options, {max : 10000, min : 0});

		        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),
		            cents = dollar.split('.')[1];

		        if (cents === undefined) {
		            dollar += '.00';
		        } else if (cents.length < 2) {
		            dollar = dollar + '0';
		        }

		        if (dollar < 0) {
		            return '-$' + dollar.replace('-', '');
		        } else {
		            return '$' + dollar;
		        }
		    };

		    Chance.prototype.euro = function (options) {
		        return Number(this.dollar(options).replace("$", "")).toLocaleString() + "€";
		    };

		    Chance.prototype.exp = function (options) {
		        options = initOptions(options);
		        var exp = {};

		        exp.year = this.exp_year();

		        // If the year is this year, need to ensure month is greater than the
		        // current month or this expiration will not be valid
		        if (exp.year === (new Date().getFullYear()).toString()) {
		            exp.month = this.exp_month({future: true});
		        } else {
		            exp.month = this.exp_month();
		        }

		        return options.raw ? exp : exp.month + '/' + exp.year;
		    };

		    Chance.prototype.exp_month = function (options) {
		        options = initOptions(options);
		        var month, month_int,
		            // Date object months are 0 indexed
		            curMonth = new Date().getMonth() + 1;

		        if (options.future && (curMonth !== 12)) {
		            do {
		                month = this.month({raw: true}).numeric;
		                month_int = parseInt(month, 10);
		            } while (month_int <= curMonth);
		        } else {
		            month = this.month({raw: true}).numeric;
		        }

		        return month;
		    };

		    Chance.prototype.exp_year = function () {
		        var curMonth = new Date().getMonth() + 1,
		            curYear = new Date().getFullYear();

		        return this.year({min: ((curMonth === 12) ? (curYear + 1) : curYear), max: (curYear + 10)});
		    };

		    Chance.prototype.vat = function (options) {
		        options = initOptions(options, { country: 'it' });
		        switch (options.country.toLowerCase()) {
		            case 'it':
		                return this.it_vat();
		        }
		    };

		    /**
		     * Generate a string matching IBAN pattern (https://en.wikipedia.org/wiki/International_Bank_Account_Number).
		     * No country-specific formats support (yet)
		     */
		    Chance.prototype.iban = function () {
		        var alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
		        var alphanum = alpha + '0123456789';
		        var iban =
		            this.string({ length: 2, pool: alpha }) +
		            this.pad(this.integer({ min: 0, max: 99 }), 2) +
		            this.string({ length: 4, pool: alphanum }) +
		            this.pad(this.natural(), this.natural({ min: 6, max: 26 }));
		        return iban;
		    };

		    // -- End Finance

		    // -- Regional

		    Chance.prototype.it_vat = function () {
		        var it_vat = this.natural({min: 1, max: 1800000});

		        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: 'it' })).code, 3);
		        return it_vat + this.luhn_calculate(it_vat);
		    };

		    /*
		     * this generator is written following the official algorithm
		     * all data can be passed explicitely or randomized by calling chance.cf() without options
		     * the code does not check that the input data is valid (it goes beyond the scope of the generator)
		     *
		     * @param  [Object] options = { first: first name,
		     *                              last: last name,
		     *                              gender: female|male,
		                                    birthday: JavaScript date object,
		                                    city: string(4), 1 letter + 3 numbers
		                                   }
		     * @return [string] codice fiscale
		     *
		    */
		    Chance.prototype.cf = function (options) {
		        options = options || {};
		        var gender = !!options.gender ? options.gender : this.gender(),
		            first = !!options.first ? options.first : this.first( { gender: gender, nationality: 'it'} ),
		            last = !!options.last ? options.last : this.last( { nationality: 'it'} ),
		            birthday = !!options.birthday ? options.birthday : this.birthday(),
		            city = !!options.city ? options.city : this.pickone(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'Z']) + this.pad(this.natural({max:999}), 3),
		            cf = [],
		            name_generator = function(name, isLast) {
		                var temp,
		                    return_value = [];

		                if (name.length < 3) {
		                    return_value = name.split("").concat("XXX".split("")).splice(0,3);
		                }
		                else {
		                    temp = name.toUpperCase().split('').map(function(c){
		                        return ("BCDFGHJKLMNPRSTVWZ".indexOf(c) !== -1) ? c : undefined;
		                    }).join('');
		                    if (temp.length > 3) {
		                        if (isLast) {
		                            temp = temp.substr(0,3);
		                        } else {
		                            temp = temp[0] + temp.substr(2,2);
		                        }
		                    }
		                    if (temp.length < 3) {
		                        return_value = temp;
		                        temp = name.toUpperCase().split('').map(function(c){
		                            return ("AEIOU".indexOf(c) !== -1) ? c : undefined;
		                        }).join('').substr(0, 3 - return_value.length);
		                    }
		                    return_value = return_value + temp;
		                }

		                return return_value;
		            },
		            date_generator = function(birthday, gender, that) {
		                var lettermonths = ['A', 'B', 'C', 'D', 'E', 'H', 'L', 'M', 'P', 'R', 'S', 'T'];

		                return  birthday.getFullYear().toString().substr(2) +
		                        lettermonths[birthday.getMonth()] +
		                        that.pad(birthday.getDate() + ((gender.toLowerCase() === "female") ? 40 : 0), 2);
		            },
		            checkdigit_generator = function(cf) {
		                var range1 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
		                    range2 = "ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ",
		                    evens  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
		                    odds   = "BAKPLCQDREVOSFTGUHMINJWZYX",
		                    digit  = 0;


		                for(var i = 0; i < 15; i++) {
		                    if (i % 2 !== 0) {
		                        digit += evens.indexOf(range2[range1.indexOf(cf[i])]);
		                    }
		                    else {
		                        digit +=  odds.indexOf(range2[range1.indexOf(cf[i])]);
		                    }
		                }
		                return evens[digit % 26];
		            };

		        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split("")).join("");
		        cf += checkdigit_generator(cf.toUpperCase());

		        return cf.toUpperCase();
		    };

		    Chance.prototype.pl_pesel = function () {
		        var number = this.natural({min: 1, max: 9999999999});
		        var arr = this.pad(number, 10).split('');
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = parseInt(arr[i]);
		        }

		        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;
		        if(controlNumber !== 0) {
		            controlNumber = 10 - controlNumber;
		        }

		        return arr.join('') + controlNumber;
		    };

		    Chance.prototype.pl_nip = function () {
		        var number = this.natural({min: 1, max: 999999999});
		        var arr = this.pad(number, 9).split('');
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = parseInt(arr[i]);
		        }

		        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;
		        if(controlNumber === 10) {
		            return this.pl_nip();
		        }

		        return arr.join('') + controlNumber;
		    };

		    Chance.prototype.pl_regon = function () {
		        var number = this.natural({min: 1, max: 99999999});
		        var arr = this.pad(number, 8).split('');
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = parseInt(arr[i]);
		        }

		        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;
		        if(controlNumber === 10) {
		            controlNumber = 0;
		        }

		        return arr.join('') + controlNumber;
		    };

		    // -- End Regional

		    // -- Music --

		    // Genre choices:
		    // Rock,Pop,Hip-Hop,Jazz,Classical,Electronic,Country,R&B,Reggae,
		    // Blues,Metal,Folk,Alternative,Punk,Disco,Funk,Techno,
		    // Indie,Gospel,Dance,Children's,World

		    Chance.prototype.music_genre = function (genre = 'general') {
		        if (!(genre.toLowerCase() in data.music_genres)) {
		            throw new Error(`Unsupported genre: ${genre}`);
		        }

		        const genres = data.music_genres[genre.toLowerCase()];
		        const randomIndex = this.integer({ min: 0, max: genres.length - 1 });

		        return genres[randomIndex];
		    };

		    Chance.prototype.note = function(options) {
		      // choices for 'notes' option:
		      // flatKey - chromatic scale with flat notes (default)
		      // sharpKey - chromatic scale with sharp notes
		      // flats - just flat notes
		      // sharps - just sharp notes
		      // naturals - just natural notes
		      // all - naturals, sharps and flats
		      options = initOptions(options, { notes : 'flatKey'});
		      var scales = {
		        naturals: ['C', 'D', 'E', 'F', 'G', 'A', 'B'],
		        flats: ['D♭', 'E♭', 'G♭', 'A♭', 'B♭'],
		        sharps: ['C♯', 'D♯', 'F♯', 'G♯', 'A♯']
		      };
		      scales.all = scales.naturals.concat(scales.flats.concat(scales.sharps));
		      scales.flatKey = scales.naturals.concat(scales.flats);
		      scales.sharpKey = scales.naturals.concat(scales.sharps);
		      return this.pickone(scales[options.notes]);
		    };

		    Chance.prototype.midi_note = function(options) {
		      var min = 0;
		      var max = 127;
		      options = initOptions(options, { min : min, max : max });
		      return this.integer({min: options.min, max: options.max});
		    };

		    Chance.prototype.chord_quality = function(options) {
		      options = initOptions(options, { jazz: true });
		      var chord_qualities = ['maj', 'min', 'aug', 'dim'];
		      if (options.jazz){
		        chord_qualities = [
		          'maj7',
		          'min7',
		          '7',
		          'sus',
		          'dim',
		          'ø'
		        ];
		      }
		      return this.pickone(chord_qualities);
		    };

		    Chance.prototype.chord = function (options) {
		      options = initOptions(options);
		      return this.note(options) + this.chord_quality(options);
		    };

		    Chance.prototype.tempo = function (options) {
		      var min = 40;
		      var max = 320;
		      options = initOptions(options, {min: min, max: max});
		      return this.integer({min: options.min, max: options.max});
		    };

		    // -- End Music

		    // -- Miscellaneous --

		    // Coin - Flip, flip, flipadelphia
		    Chance.prototype.coin = function() {
		      return this.bool() ? "heads" : "tails";
		    };

		    // Dice - For all the board game geeks out there, myself included ;)
		    function diceFn (range) {
		        return function () {
		            return this.natural(range);
		        };
		    }
		    Chance.prototype.d4 = diceFn({min: 1, max: 4});
		    Chance.prototype.d6 = diceFn({min: 1, max: 6});
		    Chance.prototype.d8 = diceFn({min: 1, max: 8});
		    Chance.prototype.d10 = diceFn({min: 1, max: 10});
		    Chance.prototype.d12 = diceFn({min: 1, max: 12});
		    Chance.prototype.d20 = diceFn({min: 1, max: 20});
		    Chance.prototype.d30 = diceFn({min: 1, max: 30});
		    Chance.prototype.d100 = diceFn({min: 1, max: 100});

		    Chance.prototype.rpg = function (thrown, options) {
		        options = initOptions(options);
		        if (!thrown) {
		            throw new RangeError("Chance: A type of die roll must be included");
		        } else {
		            var bits = thrown.toLowerCase().split("d"),
		                rolls = [];

		            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
		                throw new Error("Chance: Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
		            }
		            for (var i = bits[0]; i > 0; i--) {
		                rolls[i - 1] = this.natural({min: 1, max: bits[1]});
		            }
		            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;
		        }
		    };

		    // Guid
		    Chance.prototype.guid = function (options) {
		        options = initOptions(options, { version: 5 });

		        var guid_pool = "abcdef1234567890",
		            variant_pool = "ab89",
		            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +
		                   this.string({ pool: guid_pool, length: 4 }) + '-' +
		                   // The Version
		                   options.version +
		                   this.string({ pool: guid_pool, length: 3 }) + '-' +
		                   // The Variant
		                   this.string({ pool: variant_pool, length: 1 }) +
		                   this.string({ pool: guid_pool, length: 3 }) + '-' +
		                   this.string({ pool: guid_pool, length: 12 });
		        return guid;
		    };

		    // Hash
		    Chance.prototype.hash = function (options) {
		        options = initOptions(options, {length : 40, casing: 'lower'});
		        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;
		        return this.string({pool: pool, length: options.length});
		    };

		    Chance.prototype.luhn_check = function (num) {
		        var str = num.toString();
		        var checkDigit = +str.substring(str.length - 1);
		        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
		    };

		    Chance.prototype.luhn_calculate = function (num) {
		        var digits = num.toString().split("").reverse();
		        var sum = 0;
		        var digit;

		        for (var i = 0, l = digits.length; l > i; ++i) {
		            digit = +digits[i];
		            if (i % 2 === 0) {
		                digit *= 2;
		                if (digit > 9) {
		                    digit -= 9;
		                }
		            }
		            sum += digit;
		        }
		        return (sum * 9) % 10;
		    };

		    // MD5 Hash
		    Chance.prototype.md5 = function(options) {
		        var opts = { str: '', key: null, raw: false };

		        if (!options) {
		            opts.str = this.string();
		            options = {};
		        }
		        else if (typeof options === 'string') {
		            opts.str = options;
		            options = {};
		        }
		        else if (typeof options !== 'object') {
		            return null;
		        }
		        else if(options.constructor === 'Array') {
		            return null;
		        }

		        opts = initOptions(options, opts);

		        if(!opts.str){
		            throw new Error('A parameter is required to return an md5 hash.');
		        }

		        return this.bimd5.md5(opts.str, opts.key, opts.raw);
		    };

		    /**
		     * #Description:
		     * =====================================================
		     * Generate random file name with extension
		     *
		     * The argument provide extension type
		     * -> raster
		     * -> vector
		     * -> 3d
		     * -> document
		     *
		     * If nothing is provided the function return random file name with random
		     * extension type of any kind
		     *
		     * The user can validate the file name length range
		     * If nothing provided the generated file name is random
		     *
		     * #Extension Pool :
		     * * Currently the supported extensions are
		     *  -> some of the most popular raster image extensions
		     *  -> some of the most popular vector image extensions
		     *  -> some of the most popular 3d image extensions
		     *  -> some of the most popular document extensions
		     *
		     * #Examples :
		     * =====================================================
		     *
		     * Return random file name with random extension. The file extension
		     * is provided by a predefined collection of extensions. More about the extension
		     * pool can be found in #Extension Pool section
		     *
		     * chance.file()
		     * => dsfsdhjf.xml
		     *
		     * In order to generate a file name with specific length, specify the
		     * length property and integer value. The extension is going to be random
		     *
		     * chance.file({length : 10})
		     * => asrtineqos.pdf
		     *
		     * In order to generate file with extension from some of the predefined groups
		     * of the extension pool just specify the extension pool category in fileType property
		     *
		     * chance.file({fileType : 'raster'})
		     * => dshgssds.psd
		     *
		     * You can provide specific extension for your files
		     * chance.file({extension : 'html'})
		     * => djfsd.html
		     *
		     * Or you could pass custom collection of extensions by array or by object
		     * chance.file({extensions : [...]})
		     * => dhgsdsd.psd
		     *
		     * chance.file({extensions : { key : [...], key : [...]}})
		     * => djsfksdjsd.xml
		     *
		     * @param  [collection] options
		     * @return [string]
		     *
		     */
		    Chance.prototype.file = function(options) {

		        var fileOptions = options || {};
		        var poolCollectionKey = "fileExtension";
		        var typeRange   = Object.keys(this.get("fileExtension"));//['raster', 'vector', '3d', 'document'];
		        var fileName;
		        var fileExtension;

		        // Generate random file name
		        fileName = this.word({length : fileOptions.length});

		        // Generate file by specific extension provided by the user
		        if(fileOptions.extension) {

		            fileExtension = fileOptions.extension;
		            return (fileName + '.' + fileExtension);
		        }

		        // Generate file by specific extension collection
		        if(fileOptions.extensions) {

		            if(Array.isArray(fileOptions.extensions)) {

		                fileExtension = this.pickone(fileOptions.extensions);
		                return (fileName + '.' + fileExtension);
		            }
		            else if(fileOptions.extensions.constructor === Object) {

		                var extensionObjectCollection = fileOptions.extensions;
		                var keys = Object.keys(extensionObjectCollection);

		                fileExtension = this.pickone(extensionObjectCollection[this.pickone(keys)]);
		                return (fileName + '.' + fileExtension);
		            }

		            throw new Error("Chance: Extensions must be an Array or Object");
		        }

		        // Generate file extension based on specific file type
		        if(fileOptions.fileType) {

		            var fileType = fileOptions.fileType;
		            if(typeRange.indexOf(fileType) !== -1) {

		                fileExtension = this.pickone(this.get(poolCollectionKey)[fileType]);
		                return (fileName + '.' + fileExtension);
		            }

		            throw new RangeError("Chance: Expect file type value to be 'raster', 'vector', '3d' or 'document'");
		        }

		        // Generate random file name if no extension options are passed
		        fileExtension = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);
		        return (fileName + '.' + fileExtension);
		    };

		    /**
		     * Generates file data of random bytes using the chance.file method for the file name
		     *
		     * @param {object}
		     * fileName: String
		     * fileExtention: String
		     * fileSize: Number      <- in bytes
		     * @returns {object} fileName: String, fileData: Buffer
		     */
		    Chance.prototype.fileWithContent = function (options){
		            var fileOptions = options || {};
		            var fileName = 'fileName' in fileOptions ? fileOptions.fileName : this.file().split(".")[0];
		            fileName += "." + ('fileExtension' in fileOptions ? fileOptions.fileExtension : this.file().split(".")[1]);


		            if (typeof fileOptions.fileSize !== "number") {
		                throw new Error('File size must be an integer')
		            }
		            var file = {
		              fileData: this.buffer({length: fileOptions.fileSize}),
		              fileName: fileName,
		            };
		        return file;
		   };

		    var data = {

		        firstNames: {
		            "male": {
		                "en": ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven", "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary", "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin", "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry", "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl", "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry", "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian", "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy", "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig", "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah", "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis", "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad", "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus", "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard", "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford", "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson", "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell", "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal", "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom", "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max", "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton", "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane", "Landon"],
		                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163
		                "it": ["Adolfo", "Alberto", "Aldo", "Alessandro", "Alessio", "Alfredo", "Alvaro", "Andrea", "Angelo", "Angiolo", "Antonino", "Antonio", "Attilio", "Benito", "Bernardo", "Bruno", "Carlo", "Cesare", "Christian", "Claudio", "Corrado", "Cosimo", "Cristian", "Cristiano", "Daniele", "Dario", "David", "Davide", "Diego", "Dino", "Domenico", "Duccio", "Edoardo", "Elia", "Elio", "Emanuele", "Emiliano", "Emilio", "Enrico", "Enzo", "Ettore", "Fabio", "Fabrizio", "Federico", "Ferdinando", "Fernando", "Filippo", "Francesco", "Franco", "Gabriele", "Giacomo", "Giampaolo", "Giampiero", "Giancarlo", "Gianfranco", "Gianluca", "Gianmarco", "Gianni", "Gino", "Giorgio", "Giovanni", "Giuliano", "Giulio", "Giuseppe", "Graziano", "Gregorio", "Guido", "Iacopo", "Jacopo", "Lapo", "Leonardo", "Lorenzo", "Luca", "Luciano", "Luigi", "Manuel", "Marcello", "Marco", "Marino", "Mario", "Massimiliano", "Massimo", "Matteo", "Mattia", "Maurizio", "Mauro", "Michele", "Mirko", "Mohamed", "Nello", "Neri", "Niccolò", "Nicola", "Osvaldo", "Otello", "Paolo", "Pier Luigi", "Piero", "Pietro", "Raffaele", "Remo", "Renato", "Renzo", "Riccardo", "Roberto", "Rolando", "Romano", "Salvatore", "Samuele", "Sandro", "Sergio", "Silvano", "Simone", "Stefano", "Thomas", "Tommaso", "Ubaldo", "Ugo", "Umberto", "Valerio", "Valter", "Vasco", "Vincenzo", "Vittorio"],
		                // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
		                "nl": ["Aaron","Abel","Adam","Adriaan","Albert","Alexander","Ali","Arjen","Arno","Bart","Bas","Bastiaan","Benjamin","Bob", "Boris","Bram","Brent","Cas","Casper","Chris","Christiaan","Cornelis","Daan","Daley","Damian","Dani","Daniel","Daniël","David","Dean","Dirk","Dylan","Egbert","Elijah","Erik","Erwin","Evert","Ezra","Fabian","Fedde","Finn","Florian","Floris","Frank","Frans","Frederik","Freek","Geert","Gerard","Gerben","Gerrit","Gijs","Guus","Hans","Hendrik","Henk","Herman","Hidde","Hugo","Jaap","Jan Jaap","Jan-Willem","Jack","Jacob","Jan","Jason","Jasper","Jayden","Jelle","Jelte","Jens","Jeroen","Jesse","Jim","Job","Joep","Johannes","John","Jonathan","Joris","Joshua","Joël","Julian","Kees","Kevin","Koen","Lars","Laurens","Leendert","Lennard","Lodewijk","Luc","Luca","Lucas","Lukas","Luuk","Maarten","Marcus","Martijn","Martin","Matthijs","Maurits","Max","Mees","Melle","Mick","Mika","Milan","Mohamed","Mohammed","Morris","Muhammed","Nathan","Nick","Nico","Niek","Niels","Noah","Noud","Olivier","Oscar","Owen","Paul","Pepijn","Peter","Pieter","Pim","Quinten","Reinier","Rens","Robin","Ruben","Sam","Samuel","Sander","Sebastiaan","Sem","Sep","Sepp","Siem","Simon","Stan","Stef","Steven","Stijn","Sven","Teun","Thijmen","Thijs","Thomas","Tijn","Tim","Timo","Tobias","Tom","Victor","Vince","Willem","Wim","Wouter","Yusuf"],
		                // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
		                "fr": ["Aaron","Abdon","Abel","Abélard","Abelin","Abondance","Abraham","Absalon","Acace","Achaire","Achille","Adalard","Adalbald","Adalbéron","Adalbert","Adalric","Adam","Adegrin","Adel","Adelin","Andelin","Adelphe","Adam","Adéodat","Adhémar","Adjutor","Adolphe","Adonis","Adon","Adrien","Agapet","Agathange","Agathon","Agilbert","Agénor","Agnan","Aignan","Agrippin","Aimable","Aimé","Alain","Alban","Albin","Aubin","Albéric","Albert","Albertet","Alcibiade","Alcide","Alcée","Alcime","Aldonce","Aldric","Aldéric","Aleaume","Alexandre","Alexis","Alix","Alliaume","Aleaume","Almine","Almire","Aloïs","Alphée","Alphonse","Alpinien","Alverède","Amalric","Amaury","Amandin","Amant","Ambroise","Amédée","Amélien","Amiel","Amour","Anaël","Anastase","Anatole","Ancelin","Andéol","Andoche","André","Andoche","Ange","Angelin","Angilbe","Anglebert","Angoustan","Anicet","Anne","Annibal","Ansbert","Anselme","Anthelme","Antheaume","Anthime","Antide","Antoine","Antonius","Antonin","Apollinaire","Apollon","Aquilin","Arcade","Archambaud","Archambeau","Archange","Archibald","Arian","Ariel","Ariste","Aristide","Armand","Armel","Armin","Arnould","Arnaud","Arolde","Arsène","Arsinoé","Arthaud","Arthème","Arthur","Ascelin","Athanase","Aubry","Audebert","Audouin","Audran","Audric","Auguste","Augustin","Aurèle","Aurélien","Aurian","Auxence","Axel","Aymard","Aymeric","Aymon","Aymond","Balthazar","Baptiste","Barnabé","Barthélemy","Bartimée","Basile","Bastien","Baudouin","Bénigne","Benjamin","Benoît","Bérenger","Bérard","Bernard","Bertrand","Blaise","Bon","Boniface","Bouchard","Brice","Brieuc","Bruno","Brunon","Calixte","Calliste","Camélien","Camille","Camillien","Candide","Caribert","Carloman","Cassandre","Cassien","Cédric","Céleste","Célestin","Célien","Césaire","César","Charles","Charlemagne","Childebert","Chilpéric","Chrétien","Christian","Christodule","Christophe","Chrysostome","Clarence","Claude","Claudien","Cléandre","Clément","Clotaire","Côme","Constance","Constant","Constantin","Corentin","Cyprien","Cyriaque","Cyrille","Cyril","Damien","Daniel","David","Delphin","Denis","Désiré","Didier","Dieudonné","Dimitri","Dominique","Dorian","Dorothée","Edgard","Edmond","Édouard","Éleuthère","Élie","Élisée","Émeric","Émile","Émilien","Emmanuel","Enguerrand","Épiphane","Éric","Esprit","Ernest","Étienne","Eubert","Eudes","Eudoxe","Eugène","Eusèbe","Eustache","Évariste","Évrard","Fabien","Fabrice","Falba","Félicité","Félix","Ferdinand","Fiacre","Fidèle","Firmin","Flavien","Flodoard","Florent","Florentin","Florestan","Florian","Fortuné","Foulques","Francisque","François","Français","Franciscus","Francs","Frédéric","Fulbert","Fulcran","Fulgence","Gabin","Gabriel","Gaël","Garnier","Gaston","Gaspard","Gatien","Gaud","Gautier","Gédéon","Geoffroy","Georges","Géraud","Gérard","Gerbert","Germain","Gervais","Ghislain","Gilbert","Gilles","Girart","Gislebert","Gondebaud","Gonthier","Gontran","Gonzague","Grégoire","Guérin","Gui","Guillaume","Gustave","Guy","Guyot","Hardouin","Hector","Hédelin","Hélier","Henri","Herbert","Herluin","Hervé","Hilaire","Hildebert","Hincmar","Hippolyte","Honoré","Hubert","Hugues","Innocent","Isabeau","Isidore","Jacques","Japhet","Jason","Jean","Jeannel","Jeannot","Jérémie","Jérôme","Joachim","Joanny","Job","Jocelyn","Joël","Johan","Jonas","Jonathan","Joseph","Josse","Josselin","Jourdain","Jude","Judicaël","Jules","Julien","Juste","Justin","Lambert","Landry","Laurent","Lazare","Léandre","Léon","Léonard","Léopold","Leu","Loup","Leufroy","Libère","Liétald","Lionel","Loïc","Longin","Lorrain","Lorraine","Lothaire","Louis","Loup","Luc","Lucas","Lucien","Ludolphe","Ludovic","Macaire","Malo","Mamert","Manassé","Marc","Marceau","Marcel","Marcelin","Marius","Marseille","Martial","Martin","Mathurin","Matthias","Mathias","Matthieu","Maugis","Maurice","Mauricet","Maxence","Maxime","Maximilien","Mayeul","Médéric","Melchior","Mence","Merlin","Mérovée","Michaël","Michel","Moïse","Morgan","Nathan","Nathanaël","Narcisse","Néhémie","Nestor","Nestor","Nicéphore","Nicolas","Noé","Noël","Norbert","Normand","Normands","Octave","Odilon","Odon","Oger","Olivier","Oury","Pacôme","Palémon","Parfait","Pascal","Paterne","Patrice","Paul","Pépin","Perceval","Philémon","Philibert","Philippe","Philothée","Pie","Pierre","Pierrick","Prosper","Quentin","Raoul","Raphaël","Raymond","Régis","Réjean","Rémi","Renaud","René","Reybaud","Richard","Robert","Roch","Rodolphe","Rodrigue","Roger","Roland","Romain","Romuald","Roméo","Rome","Ronan","Roselin","Salomon","Samuel","Savin","Savinien","Scholastique","Sébastien","Séraphin","Serge","Séverin","Sidoine","Sigebert","Sigismond","Silvère","Simon","Siméon","Sixte","Stanislas","Stéphane","Stephan","Sylvain","Sylvestre","Tancrède","Tanguy","Taurin","Théodore","Théodose","Théophile","Théophraste","Thibault","Thibert","Thierry","Thomas","Timoléon","Timothée","Titien","Tonnin","Toussaint","Trajan","Tristan","Turold","Tim","Ulysse","Urbain","Valentin","Valère","Valéry","Venance","Venant","Venceslas","Vianney","Victor","Victorien","Victorin","Vigile","Vincent","Vital","Vitalien","Vivien","Waleran","Wandrille","Xavier","Xénophon","Yves","Zacharie","Zaché","Zéphirin"]
		            },

		            "female": {
		                "en": ["Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie", "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel", "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada", "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna", "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora", "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie", "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate", "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle", "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily", "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella", "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann", "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn", "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie", "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice", "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle", "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda", "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide", "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie", "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis", "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe", "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet", "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle", "Rosalie"],
		                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162
		                "it": ["Ada", "Adriana", "Alessandra", "Alessia", "Alice", "Angela", "Anna", "Anna Maria", "Annalisa", "Annita", "Annunziata", "Antonella", "Arianna", "Asia", "Assunta", "Aurora", "Barbara", "Beatrice", "Benedetta", "Bianca", "Bruna", "Camilla", "Carla", "Carlotta", "Carmela", "Carolina", "Caterina", "Catia", "Cecilia", "Chiara", "Cinzia", "Clara", "Claudia", "Costanza", "Cristina", "Daniela", "Debora", "Diletta", "Dina", "Donatella", "Elena", "Eleonora", "Elisa", "Elisabetta", "Emanuela", "Emma", "Eva", "Federica", "Fernanda", "Fiorella", "Fiorenza", "Flora", "Franca", "Francesca", "Gabriella", "Gaia", "Gemma", "Giada", "Gianna", "Gina", "Ginevra", "Giorgia", "Giovanna", "Giulia", "Giuliana", "Giuseppa", "Giuseppina", "Grazia", "Graziella", "Greta", "Ida", "Ilaria", "Ines", "Iolanda", "Irene", "Irma", "Isabella", "Jessica", "Laura", "Lea", "Letizia", "Licia", "Lidia", "Liliana", "Lina", "Linda", "Lisa", "Livia", "Loretta", "Luana", "Lucia", "Luciana", "Lucrezia", "Luisa", "Manuela", "Mara", "Marcella", "Margherita", "Maria", "Maria Cristina", "Maria Grazia", "Maria Luisa", "Maria Pia", "Maria Teresa", "Marina", "Marisa", "Marta", "Martina", "Marzia", "Matilde", "Melissa", "Michela", "Milena", "Mirella", "Monica", "Natalina", "Nella", "Nicoletta", "Noemi", "Olga", "Paola", "Patrizia", "Piera", "Pierina", "Raffaella", "Rebecca", "Renata", "Rina", "Rita", "Roberta", "Rosa", "Rosanna", "Rossana", "Rossella", "Sabrina", "Sandra", "Sara", "Serena", "Silvana", "Silvia", "Simona", "Simonetta", "Sofia", "Sonia", "Stefania", "Susanna", "Teresa", "Tina", "Tiziana", "Tosca", "Valentina", "Valeria", "Vanda", "Vanessa", "Vanna", "Vera", "Veronica", "Vilma", "Viola", "Virginia", "Vittoria"],
		                // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
		                "nl": ["Ada", "Arianne", "Afke", "Amanda", "Amber", "Amy", "Aniek", "Anita", "Anja", "Anna", "Anne", "Annelies", "Annemarie", "Annette", "Anouk", "Astrid", "Aukje", "Barbara", "Bianca", "Carla", "Carlijn", "Carolien", "Chantal", "Charlotte", "Claudia", "Daniëlle", "Debora", "Diane", "Dora", "Eline", "Elise", "Ella", "Ellen", "Emma", "Esmee", "Evelien", "Esther", "Erica", "Eva", "Femke", "Fleur", "Floor", "Froukje", "Gea", "Gerda", "Hanna", "Hanneke", "Heleen", "Hilde", "Ilona", "Ina", "Inge", "Ingrid", "Iris", "Isabel", "Isabelle", "Janneke", "Jasmijn", "Jeanine", "Jennifer", "Jessica", "Johanna", "Joke", "Julia", "Julie", "Karen", "Karin", "Katja", "Kim", "Lara", "Laura", "Lena", "Lianne", "Lieke", "Lilian", "Linda", "Lisa", "Lisanne", "Lotte", "Louise", "Maaike", "Manon", "Marga", "Maria", "Marissa", "Marit", "Marjolein", "Martine", "Marleen", "Melissa", "Merel", "Miranda", "Michelle", "Mirjam", "Mirthe", "Naomi", "Natalie", 'Nienke', "Nina", "Noortje", "Olivia", "Patricia", "Paula", "Paulien", "Ramona", "Ria", "Rianne", "Roos", "Rosanne", "Ruth", "Sabrina", "Sandra", "Sanne", "Sara", "Saskia", "Silvia", "Sofia", "Sophie", "Sonja", "Suzanne", "Tamara", "Tess", "Tessa", "Tineke", "Valerie", "Vanessa", "Veerle", "Vera", "Victoria", "Wendy", "Willeke", "Yvonne", "Zoë"],
		                // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
		                "fr": ["Abdon","Abel","Abigaëlle","Abigaïl","Acacius","Acanthe","Adalbert","Adalsinde","Adegrine","Adélaïde","Adèle","Adélie","Adeline","Adeltrude","Adolphe","Adonis","Adrastée","Adrehilde","Adrienne","Agathe","Agilbert","Aglaé","Aignan","Agneflète","Agnès","Agrippine","Aimé","Alaine","Alaïs","Albane","Albérade","Alberte","Alcide","Alcine","Alcyone","Aldegonde","Aleth","Alexandrine","Alexine","Alice","Aliénor","Aliette","Aline","Alix","Alizé","Aloïse","Aloyse","Alphonsine","Althée","Amaliane","Amalthée","Amande","Amandine","Amant","Amarande","Amaranthe","Amaryllis","Ambre","Ambroisie","Amélie","Améthyste","Aminte","Anaël","Anaïs","Anastasie","Anatole","Ancelin","Andrée","Anémone","Angadrême","Angèle","Angeline","Angélique","Angilbert","Anicet","Annabelle","Anne","Annette","Annick","Annie","Annonciade","Ansbert","Anstrudie","Anthelme","Antigone","Antoinette","Antonine","Aphélie","Apolline","Apollonie","Aquiline","Arabelle","Arcadie","Archange","Argine","Ariane","Aricie","Ariel","Arielle","Arlette","Armance","Armande","Armandine","Armelle","Armide","Armelle","Armin","Arnaud","Arsène","Arsinoé","Artémis","Arthur","Ascelin","Ascension","Assomption","Astarté","Astérie","Astrée","Astrid","Athalie","Athanasie","Athina","Aube","Albert","Aude","Audrey","Augustine","Aure","Aurélie","Aurélien","Aurèle","Aurore","Auxence","Aveline","Abigaëlle","Avoye","Axelle","Aymard","Azalée","Adèle","Adeline","Barbe","Basilisse","Bathilde","Béatrice","Béatrix","Bénédicte","Bérengère","Bernadette","Berthe","Bertille","Beuve","Blanche","Blanc","Blandine","Brigitte","Brune","Brunehilde","Callista","Camille","Capucine","Carine","Caroline","Cassandre","Catherine","Cécile","Céleste","Célestine","Céline","Chantal","Charlène","Charline","Charlotte","Chloé","Christelle","Christiane","Christine","Claire","Clara","Claude","Claudine","Clarisse","Clémence","Clémentine","Cléo","Clio","Clotilde","Coline","Conception","Constance","Coralie","Coraline","Corentine","Corinne","Cyrielle","Daniel","Daniel","Daphné","Débora","Delphine","Denise","Diane","Dieudonné","Dominique","Doriane","Dorothée","Douce","Édith","Edmée","Éléonore","Éliane","Élia","Éliette","Élisabeth","Élise","Ella","Élodie","Éloïse","Elsa","Émeline","Émérance","Émérentienne","Émérencie","Émilie","Emma","Emmanuelle","Emmelie","Ernestine","Esther","Estelle","Eudoxie","Eugénie","Eulalie","Euphrasie","Eusébie","Évangéline","Eva","Ève","Évelyne","Fanny","Fantine","Faustine","Félicie","Fernande","Flavie","Fleur","Flore","Florence","Florie","Fortuné","France","Francia","Françoise","Francine","Gabrielle","Gaëlle","Garance","Geneviève","Georgette","Gerberge","Germaine","Gertrude","Gisèle","Guenièvre","Guilhemine","Guillemette","Gustave","Gwenael","Hélène","Héloïse","Henriette","Hermine","Hermione","Hippolyte","Honorine","Hortense","Huguette","Ines","Irène","Irina","Iris","Isabeau","Isabelle","Iseult","Isolde","Ismérie","Jacinthe","Jacqueline","Jade","Janine","Jeanne","Jocelyne","Joëlle","Joséphine","Judith","Julia","Julie","Jules","Juliette","Justine","Katy","Kathy","Katie","Laura","Laure","Laureline","Laurence","Laurene","Lauriane","Laurianne","Laurine","Léa","Léna","Léonie","Léon","Léontine","Lorraine","Lucie","Lucienne","Lucille","Ludivine","Lydie","Lydie","Megane","Madeleine","Magali","Maguelone","Mallaury","Manon","Marceline","Margot","Marguerite","Marianne","Marie","Myriam","Marie","Marine","Marion","Marlène","Marthe","Martine","Mathilde","Maud","Maureen","Mauricette","Maxime","Mélanie","Melissa","Mélissandre","Mélisande","Mélodie","Michel","Micheline","Mireille","Miriam","Moïse","Monique","Morgane","Muriel","Mylène","Nadège","Nadine","Nathalie","Nicole","Nicolette","Nine","Noël","Noémie","Océane","Odette","Odile","Olive","Olivia","Olympe","Ombline","Ombeline","Ophélie","Oriande","Oriane","Ozanne","Pascale","Pascaline","Paule","Paulette","Pauline","Priscille","Prisca","Prisque","Pécine","Pélagie","Pénélope","Perrine","Pétronille","Philippine","Philomène","Philothée","Primerose","Prudence","Pulchérie","Quentine","Quiéta","Quintia","Quintilla","Rachel","Raphaëlle","Raymonde","Rebecca","Régine","Réjeanne","René","Rita","Rita","Rolande","Romane","Rosalie","Rose","Roseline","Sabine","Salomé","Sandra","Sandrine","Sarah","Ségolène","Séverine","Sibylle","Simone","Sixt","Solange","Soline","Solène","Sophie","Stéphanie","Suzanne","Sylvain","Sylvie","Tatiana","Thaïs","Théodora","Thérèse","Tiphaine","Ursule","Valentine","Valérie","Véronique","Victoire","Victorine","Vinciane","Violette","Virginie","Viviane","Xavière","Yolande","Ysaline","Yvette","Yvonne","Zélie","Zita","Zoé"]
		            }
		        },

		        lastNames: {
		            "en": ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],
		                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)
		            "it": ["Acciai", "Aglietti", "Agostini", "Agresti", "Ahmed", "Aiazzi", "Albanese", "Alberti", "Alessi", "Alfani", "Alinari", "Alterini", "Amato", "Ammannati", "Ancillotti", "Andrei", "Andreini", "Andreoni", "Angeli", "Anichini", "Antonelli", "Antonini", "Arena", "Ariani", "Arnetoli", "Arrighi", "Baccani", "Baccetti", "Bacci", "Bacherini", "Badii", "Baggiani", "Baglioni", "Bagni", "Bagnoli", "Baldassini", "Baldi", "Baldini", "Ballerini", "Balli", "Ballini", "Balloni", "Bambi", "Banchi", "Bandinelli", "Bandini", "Bani", "Barbetti", "Barbieri", "Barchielli", "Bardazzi", "Bardelli", "Bardi", "Barducci", "Bargellini", "Bargiacchi", "Barni", "Baroncelli", "Baroncini", "Barone", "Baroni", "Baronti", "Bartalesi", "Bartoletti", "Bartoli", "Bartolini", "Bartoloni", "Bartolozzi", "Basagni", "Basile", "Bassi", "Batacchi", "Battaglia", "Battaglini", "Bausi", "Becagli", "Becattini", "Becchi", "Becucci", "Bellandi", "Bellesi", "Belli", "Bellini", "Bellucci", "Bencini", "Benedetti", "Benelli", "Beni", "Benini", "Bensi", "Benucci", "Benvenuti", "Berlincioni", "Bernacchioni", "Bernardi", "Bernardini", "Berni", "Bernini", "Bertelli", "Berti", "Bertini", "Bessi", "Betti", "Bettini", "Biagi", "Biagini", "Biagioni", "Biagiotti", "Biancalani", "Bianchi", "Bianchini", "Bianco", "Biffoli", "Bigazzi", "Bigi", "Biliotti", "Billi", "Binazzi", "Bindi", "Bini", "Biondi", "Bizzarri", "Bocci", "Bogani", "Bolognesi", "Bonaiuti", "Bonanni", "Bonciani", "Boncinelli", "Bondi", "Bonechi", "Bongini", "Boni", "Bonini", "Borchi", "Boretti", "Borghi", "Borghini", "Borgioli", "Borri", "Borselli", "Boschi", "Bottai", "Bracci", "Braccini", "Brandi", "Braschi", "Bravi", "Brazzini", "Breschi", "Brilli", "Brizzi", "Brogelli", "Brogi", "Brogioni", "Brunelli", "Brunetti", "Bruni", "Bruno", "Brunori", "Bruschi", "Bucci", "Bucciarelli", "Buccioni", "Bucelli", "Bulli", "Burberi", "Burchi", "Burgassi", "Burroni", "Bussotti", "Buti", "Caciolli", "Caiani", "Calabrese", "Calamai", "Calamandrei", "Caldini", "Calo'", "Calonaci", "Calosi", "Calvelli", "Cambi", "Camiciottoli", "Cammelli", "Cammilli", "Campolmi", "Cantini", "Capanni", "Capecchi", "Caponi", "Cappelletti", "Cappelli", "Cappellini", "Cappugi", "Capretti", "Caputo", "Carbone", "Carboni", "Cardini", "Carlesi", "Carletti", "Carli", "Caroti", "Carotti", "Carrai", "Carraresi", "Carta", "Caruso", "Casalini", "Casati", "Caselli", "Casini", "Castagnoli", "Castellani", "Castelli", "Castellucci", "Catalano", "Catarzi", "Catelani", "Cavaciocchi", "Cavallaro", "Cavallini", "Cavicchi", "Cavini", "Ceccarelli", "Ceccatelli", "Ceccherelli", "Ceccherini", "Cecchi", "Cecchini", "Cecconi", "Cei", "Cellai", "Celli", "Cellini", "Cencetti", "Ceni", "Cenni", "Cerbai", "Cesari", "Ceseri", "Checcacci", "Checchi", "Checcucci", "Cheli", "Chellini", "Chen", "Cheng", "Cherici", "Cherubini", "Chiaramonti", "Chiarantini", "Chiarelli", "Chiari", "Chiarini", "Chiarugi", "Chiavacci", "Chiesi", "Chimenti", "Chini", "Chirici", "Chiti", "Ciabatti", "Ciampi", "Cianchi", "Cianfanelli", "Cianferoni", "Ciani", "Ciapetti", "Ciappi", "Ciardi", "Ciatti", "Cicali", "Ciccone", "Cinelli", "Cini", "Ciobanu", "Ciolli", "Cioni", "Cipriani", "Cirillo", "Cirri", "Ciucchi", "Ciuffi", "Ciulli", "Ciullini", "Clemente", "Cocchi", "Cognome", "Coli", "Collini", "Colombo", "Colzi", "Comparini", "Conforti", "Consigli", "Conte", "Conti", "Contini", "Coppini", "Coppola", "Corsi", "Corsini", "Corti", "Cortini", "Cosi", "Costa", "Costantini", "Costantino", "Cozzi", "Cresci", "Crescioli", "Cresti", "Crini", "Curradi", "D'Agostino", "D'Alessandro", "D'Amico", "D'Angelo", "Daddi", "Dainelli", "Dallai", "Danti", "Davitti", "De Angelis", "De Luca", "De Marco", "De Rosa", "De Santis", "De Simone", "De Vita", "Degl'Innocenti", "Degli Innocenti", "Dei", "Del Lungo", "Del Re", "Di Marco", "Di Stefano", "Dini", "Diop", "Dobre", "Dolfi", "Donati", "Dondoli", "Dong", "Donnini", "Ducci", "Dumitru", "Ermini", "Esposito", "Evangelisti", "Fabbri", "Fabbrini", "Fabbrizzi", "Fabbroni", "Fabbrucci", "Fabiani", "Facchini", "Faggi", "Fagioli", "Failli", "Faini", "Falciani", "Falcini", "Falcone", "Fallani", "Falorni", "Falsini", "Falugiani", "Fancelli", "Fanelli", "Fanetti", "Fanfani", "Fani", "Fantappie'", "Fantechi", "Fanti", "Fantini", "Fantoni", "Farina", "Fattori", "Favilli", "Fedi", "Fei", "Ferrante", "Ferrara", "Ferrari", "Ferraro", "Ferretti", "Ferri", "Ferrini", "Ferroni", "Fiaschi", "Fibbi", "Fiesoli", "Filippi", "Filippini", "Fini", "Fioravanti", "Fiore", "Fiorentini", "Fiorini", "Fissi", "Focardi", "Foggi", "Fontana", "Fontanelli", "Fontani", "Forconi", "Formigli", "Forte", "Forti", "Fortini", "Fossati", "Fossi", "Francalanci", "Franceschi", "Franceschini", "Franchi", "Franchini", "Franci", "Francini", "Francioni", "Franco", "Frassineti", "Frati", "Fratini", "Frilli", "Frizzi", "Frosali", "Frosini", "Frullini", "Fusco", "Fusi", "Gabbrielli", "Gabellini", "Gagliardi", "Galanti", "Galardi", "Galeotti", "Galletti", "Galli", "Gallo", "Gallori", "Gambacciani", "Gargani", "Garofalo", "Garuglieri", "Gashi", "Gasperini", "Gatti", "Gelli", "Gensini", "Gentile", "Gentili", "Geri", "Gerini", "Gheri", "Ghini", "Giachetti", "Giachi", "Giacomelli", "Gianassi", "Giani", "Giannelli", "Giannetti", "Gianni", "Giannini", "Giannoni", "Giannotti", "Giannozzi", "Gigli", "Giordano", "Giorgetti", "Giorgi", "Giovacchini", "Giovannelli", "Giovannetti", "Giovannini", "Giovannoni", "Giuliani", "Giunti", "Giuntini", "Giusti", "Gonnelli", "Goretti", "Gori", "Gradi", "Gramigni", "Grassi", "Grasso", "Graziani", "Grazzini", "Greco", "Grifoni", "Grillo", "Grimaldi", "Grossi", "Gualtieri", "Guarducci", "Guarino", "Guarnieri", "Guasti", "Guerra", "Guerri", "Guerrini", "Guidi", "Guidotti", "He", "Hoxha", "Hu", "Huang", "Iandelli", "Ignesti", "Innocenti", "Jin", "La Rosa", "Lai", "Landi", "Landini", "Lanini", "Lapi", "Lapini", "Lari", "Lascialfari", "Lastrucci", "Latini", "Lazzeri", "Lazzerini", "Lelli", "Lenzi", "Leonardi", "Leoncini", "Leone", "Leoni", "Lepri", "Li", "Liao", "Lin", "Linari", "Lippi", "Lisi", "Livi", "Lombardi", "Lombardini", "Lombardo", "Longo", "Lopez", "Lorenzi", "Lorenzini", "Lorini", "Lotti", "Lu", "Lucchesi", "Lucherini", "Lunghi", "Lupi", "Madiai", "Maestrini", "Maffei", "Maggi", "Maggini", "Magherini", "Magini", "Magnani", "Magnelli", "Magni", "Magnolfi", "Magrini", "Malavolti", "Malevolti", "Manca", "Mancini", "Manetti", "Manfredi", "Mangani", "Mannelli", "Manni", "Mannini", "Mannucci", "Manuelli", "Manzini", "Marcelli", "Marchese", "Marchetti", "Marchi", "Marchiani", "Marchionni", "Marconi", "Marcucci", "Margheri", "Mari", "Mariani", "Marilli", "Marinai", "Marinari", "Marinelli", "Marini", "Marino", "Mariotti", "Marsili", "Martelli", "Martinelli", "Martini", "Martino", "Marzi", "Masi", "Masini", "Masoni", "Massai", "Materassi", "Mattei", "Matteini", "Matteucci", "Matteuzzi", "Mattioli", "Mattolini", "Matucci", "Mauro", "Mazzanti", "Mazzei", "Mazzetti", "Mazzi", "Mazzini", "Mazzocchi", "Mazzoli", "Mazzoni", "Mazzuoli", "Meacci", "Mecocci", "Meini", "Melani", "Mele", "Meli", "Mengoni", "Menichetti", "Meoni", "Merlini", "Messeri", "Messina", "Meucci", "Miccinesi", "Miceli", "Micheli", "Michelini", "Michelozzi", "Migliori", "Migliorini", "Milani", "Miniati", "Misuri", "Monaco", "Montagnani", "Montagni", "Montanari", "Montelatici", "Monti", "Montigiani", "Montini", "Morandi", "Morandini", "Morelli", "Moretti", "Morganti", "Mori", "Morini", "Moroni", "Morozzi", "Mugnai", "Mugnaini", "Mustafa", "Naldi", "Naldini", "Nannelli", "Nanni", "Nannini", "Nannucci", "Nardi", "Nardini", "Nardoni", "Natali", "Ndiaye", "Nencetti", "Nencini", "Nencioni", "Neri", "Nesi", "Nesti", "Niccolai", "Niccoli", "Niccolini", "Nigi", "Nistri", "Nocentini", "Noferini", "Novelli", "Nucci", "Nuti", "Nutini", "Oliva", "Olivieri", "Olmi", "Orlandi", "Orlandini", "Orlando", "Orsini", "Ortolani", "Ottanelli", "Pacciani", "Pace", "Paci", "Pacini", "Pagani", "Pagano", "Paggetti", "Pagliai", "Pagni", "Pagnini", "Paladini", "Palagi", "Palchetti", "Palloni", "Palmieri", "Palumbo", "Pampaloni", "Pancani", "Pandolfi", "Pandolfini", "Panerai", "Panichi", "Paoletti", "Paoli", "Paolini", "Papi", "Papini", "Papucci", "Parenti", "Parigi", "Parisi", "Parri", "Parrini", "Pasquini", "Passeri", "Pecchioli", "Pecorini", "Pellegrini", "Pepi", "Perini", "Perrone", "Peruzzi", "Pesci", "Pestelli", "Petri", "Petrini", "Petrucci", "Pettini", "Pezzati", "Pezzatini", "Piani", "Piazza", "Piazzesi", "Piazzini", "Piccardi", "Picchi", "Piccini", "Piccioli", "Pieraccini", "Pieraccioni", "Pieralli", "Pierattini", "Pieri", "Pierini", "Pieroni", "Pietrini", "Pini", "Pinna", "Pinto", "Pinzani", "Pinzauti", "Piras", "Pisani", "Pistolesi", "Poggesi", "Poggi", "Poggiali", "Poggiolini", "Poli", "Pollastri", "Porciani", "Pozzi", "Pratellesi", "Pratesi", "Prosperi", "Pruneti", "Pucci", "Puccini", "Puccioni", "Pugi", "Pugliese", "Puliti", "Querci", "Quercioli", "Raddi", "Radu", "Raffaelli", "Ragazzini", "Ranfagni", "Ranieri", "Rastrelli", "Raugei", "Raveggi", "Renai", "Renzi", "Rettori", "Ricci", "Ricciardi", "Ridi", "Ridolfi", "Rigacci", "Righi", "Righini", "Rinaldi", "Risaliti", "Ristori", "Rizzo", "Rocchi", "Rocchini", "Rogai", "Romagnoli", "Romanelli", "Romani", "Romano", "Romei", "Romeo", "Romiti", "Romoli", "Romolini", "Rontini", "Rosati", "Roselli", "Rosi", "Rossetti", "Rossi", "Rossini", "Rovai", "Ruggeri", "Ruggiero", "Russo", "Sabatini", "Saccardi", "Sacchetti", "Sacchi", "Sacco", "Salerno", "Salimbeni", "Salucci", "Salvadori", "Salvestrini", "Salvi", "Salvini", "Sanesi", "Sani", "Sanna", "Santi", "Santini", "Santoni", "Santoro", "Santucci", "Sardi", "Sarri", "Sarti", "Sassi", "Sbolci", "Scali", "Scarpelli", "Scarselli", "Scopetani", "Secci", "Selvi", "Senatori", "Senesi", "Serafini", "Sereni", "Serra", "Sestini", "Sguanci", "Sieni", "Signorini", "Silvestri", "Simoncini", "Simonetti", "Simoni", "Singh", "Sodi", "Soldi", "Somigli", "Sorbi", "Sorelli", "Sorrentino", "Sottili", "Spina", "Spinelli", "Staccioli", "Staderini", "Stefanelli", "Stefani", "Stefanini", "Stella", "Susini", "Tacchi", "Tacconi", "Taddei", "Tagliaferri", "Tamburini", "Tanganelli", "Tani", "Tanini", "Tapinassi", "Tarchi", "Tarchiani", "Targioni", "Tassi", "Tassini", "Tempesti", "Terzani", "Tesi", "Testa", "Testi", "Tilli", "Tinti", "Tirinnanzi", "Toccafondi", "Tofanari", "Tofani", "Tognaccini", "Tonelli", "Tonini", "Torelli", "Torrini", "Tosi", "Toti", "Tozzi", "Trambusti", "Trapani", "Tucci", "Turchi", "Ugolini", "Ulivi", "Valente", "Valenti", "Valentini", "Vangelisti", "Vanni", "Vannini", "Vannoni", "Vannozzi", "Vannucchi", "Vannucci", "Ventura", "Venturi", "Venturini", "Vestri", "Vettori", "Vichi", "Viciani", "Vieri", "Vigiani", "Vignoli", "Vignolini", "Vignozzi", "Villani", "Vinci", "Visani", "Vitale", "Vitali", "Viti", "Viviani", "Vivoli", "Volpe", "Volpi", "Wang", "Wu", "Xu", "Yang", "Ye", "Zagli", "Zani", "Zanieri", "Zanobini", "Zecchi", "Zetti", "Zhang", "Zheng", "Zhou", "Zhu", "Zingoni", "Zini", "Zoppi"],
		            // http://www.voornamelijk.nl/meest-voorkomende-achternamen-in-nederland-en-amsterdam/
		            "nl":["Albers", "Alblas", "Appelman", "Baars", "Baas", "Bakker", "Blank", "Bleeker", "Blok", "Blom", "Boer", "Boers", "Boldewijn", "Boon", "Boot", "Bos", "Bosch", "Bosma", "Bosman", "Bouma", "Bouman", "Bouwman", "Brands", "Brouwer", "Burger", "Buijs", "Buitenhuis", "Ceder", "Cohen", "Dekker", "Dekkers", "Dijkman", "Dijkstra", "Driessen", "Drost", "Engel", "Evers", "Faber", "Franke", "Gerritsen", "Goedhart", "Goossens", "Groen", "Groenenberg", "Groot", "Haan", "Hart", "Heemskerk", "Hendriks", "Hermans", "Hoekstra", "Hofman", "Hopman", "Huisman", "Jacobs", "Jansen", "Janssen", "Jonker", "Jaspers", "Keijzer", "Klaassen", "Klein", "Koek", "Koenders", "Kok", "Kool", "Koopman", "Koopmans", "Koning", "Koster", "Kramer", "Kroon", "Kuijpers", "Kuiper", "Kuipers", "Kurt", "Koster", "Kwakman", "Los", "Lubbers", "Maas", "Markus", "Martens", "Meijer", "Mol", "Molenaar", "Mulder", "Nieuwenhuis", "Peeters", "Peters", "Pengel", "Pieters", "Pool", "Post", "Postma", "Prins", "Pronk", "Reijnders", "Rietveld", "Roest", "Roos", "Sanders", "Schaap", "Scheffer", "Schenk", "Schilder", "Schipper", "Schmidt", "Scholten", "Schouten", "Schut", "Schutte", "Schuurman", "Simons", "Smeets", "Smit", "Smits", "Snel", "Swinkels", "Tas", "Terpstra", "Timmermans", "Tol", "Tromp", "Troost", "Valk", "Veenstra", "Veldkamp", "Verbeek", "Verheul", "Verhoeven", "Vermeer", "Vermeulen", "Verweij", "Vink", "Visser", "Voorn", "Vos", "Wagenaar", "Wiersema", "Willems", "Willemsen", "Witteveen", "Wolff", "Wolters", "Zijlstra", "Zwart", "de Beer", "de Boer", "de Bruijn", "de Bruin", "de Graaf", "de Groot", "de Haan", "de Haas", "de Jager", "de Jong", "de Jonge", "de Koning", "de Lange", "de Leeuw", "de Ridder", "de Rooij", "de Ruiter", "de Vos", "de Vries", "de Waal", "de Wit", "de Zwart", "van Beek", "van Boven", "van Dam", "van Dijk", "van Dongen", "van Doorn", "van Egmond", "van Eijk", "van Es", "van Gelder", "van Gelderen", "van Houten", "van Hulst", "van Kempen", "van Kesteren", "van Leeuwen", "van Loon", "van Mill", "van Noord", "van Ommen", "van Ommeren", "van Oosten", "van Oostveen", "van Rijn", "van Schaik", "van Veen", "van Vliet", "van Wijk", "van Wijngaarden", "van den Poel", "van de Pol", "van den Ploeg", "van de Ven", "van den Berg", "van den Bosch", "van den Brink", "van den Broek", "van den Heuvel", "van der Heijden", "van der Horst", "van der Hulst", "van der Kroon", "van der Laan", "van der Linden", "van der Meer", "van der Meij", "van der Meulen", "van der Molen", "van der Sluis", "van der Spek", "van der Veen", "van der Velde", "van der Velden", "van der Vliet", "van der Wal"],
		            // https://surnames.behindthename.com/top/lists/england-wales/1991
		            "uk":["Smith","Jones","Williams","Taylor","Brown","Davies","Evans","Wilson","Thomas","Johnson","Roberts","Robinson","Thompson","Wright","Walker","White","Edwards","Hughes","Green","Hall","Lewis","Harris","Clarke","Patel","Jackson","Wood","Turner","Martin","Cooper","Hill","Ward","Morris","Moore","Clark","Lee","King","Baker","Harrison","Morgan","Allen","James","Scott","Phillips","Watson","Davis","Parker","Price","Bennett","Young","Griffiths","Mitchell","Kelly","Cook","Carter","Richardson","Bailey","Collins","Bell","Shaw","Murphy","Miller","Cox","Richards","Khan","Marshall","Anderson","Simpson","Ellis","Adams","Singh","Begum","Wilkinson","Foster","Chapman","Powell","Webb","Rogers","Gray","Mason","Ali","Hunt","Hussain","Campbell","Matthews","Owen","Palmer","Holmes","Mills","Barnes","Knight","Lloyd","Butler","Russell","Barker","Fisher","Stevens","Jenkins","Murray","Dixon","Harvey","Graham","Pearson","Ahmed","Fletcher","Walsh","Kaur","Gibson","Howard","Andrews","Stewart","Elliott","Reynolds","Saunders","Payne","Fox","Ford","Pearce","Day","Brooks","West","Lawrence","Cole","Atkinson","Bradley","Spencer","Gill","Dawson","Ball","Burton","O'brien","Watts","Rose","Booth","Perry","Ryan","Grant","Wells","Armstrong","Francis","Rees","Hayes","Hart","Hudson","Newman","Barrett","Webster","Hunter","Gregory","Carr","Lowe","Page","Marsh","Riley","Dunn","Woods","Parsons","Berry","Stone","Reid","Holland","Hawkins","Harding","Porter","Robertson","Newton","Oliver","Reed","Kennedy","Williamson","Bird","Gardner","Shah","Dean","Lane","Cooke","Bates","Henderson","Parry","Burgess","Bishop","Walton","Burns","Nicholson","Shepherd","Ross","Cross","Long","Freeman","Warren","Nicholls","Hamilton","Byrne","Sutton","Mcdonald","Yates","Hodgson","Robson","Curtis","Hopkins","O'connor","Harper","Coleman","Watkins","Moss","Mccarthy","Chambers","O'neill","Griffin","Sharp","Hardy","Wheeler","Potter","Osborne","Johnston","Gordon","Doyle","Wallace","George","Jordan","Hutchinson","Rowe","Burke","May","Pritchard","Gilbert","Willis","Higgins","Read","Miles","Stevenson","Stephenson","Hammond","Arnold","Buckley","Walters","Hewitt","Barber","Nelson","Slater","Austin","Sullivan","Whitehead","Mann","Frost","Lambert","Stephens","Blake","Akhtar","Lynch","Goodwin","Barton","Woodward","Thomson","Cunningham","Quinn","Barnett","Baxter","Bibi","Clayton","Nash","Greenwood","Jennings","Holt","Kemp","Poole","Gallagher","Bond","Stokes","Tucker","Davidson","Fowler","Heath","Norman","Middleton","Lawson","Banks","French","Stanley","Jarvis","Gibbs","Ferguson","Hayward","Carroll","Douglas","Dickinson","Todd","Barlow","Peters","Lucas","Knowles","Hartley","Miah","Simmons","Morton","Alexander","Field","Morrison","Norris","Townsend","Preston","Hancock","Thornton","Baldwin","Burrows","Briggs","Parkinson","Reeves","Macdonald","Lamb","Black","Abbott","Sanders","Thorpe","Holden","Tomlinson","Perkins","Ashton","Rhodes","Fuller","Howe","Bryant","Vaughan","Dale","Davey","Weston","Bartlett","Whittaker","Davison","Kent","Skinner","Birch","Morley","Daniels","Glover","Howell","Cartwright","Pugh","Humphreys","Goddard","Brennan","Wall","Kirby","Bowen","Savage","Bull","Wong","Dobson","Smart","Wilkins","Kirk","Fraser","Duffy","Hicks","Patterson","Bradshaw","Little","Archer","Warner","Waters","O'sullivan","Farrell","Brookes","Atkins","Kay","Dodd","Bentley","Flynn","John","Schofield","Short","Haynes","Wade","Butcher","Henry","Sanderson","Crawford","Sheppard","Bolton","Coates","Giles","Gould","Houghton","Gibbons","Pratt","Manning","Law","Hooper","Noble","Dyer","Rahman","Clements","Moran","Sykes","Chan","Doherty","Connolly","Joyce","Franklin","Hobbs","Coles","Herbert","Steele","Kerr","Leach","Winter","Owens","Duncan","Naylor","Fleming","Horton","Finch","Fitzgerald","Randall","Carpenter","Marsden","Browne","Garner","Pickering","Hale","Dennis","Vincent","Chadwick","Chandler","Sharpe","Nolan","Lyons","Hurst","Collier","Peacock","Howarth","Faulkner","Rice","Pollard","Welch","Norton","Gough","Sinclair","Blackburn","Bryan","Conway","Power","Cameron","Daly","Allan","Hanson","Gardiner","Boyle","Myers","Turnbull","Wallis","Mahmood","Sims","Swift","Iqbal","Pope","Brady","Chamberlain","Rowley","Tyler","Farmer","Metcalfe","Hilton","Godfrey","Holloway","Parkin","Bray","Talbot","Donnelly","Nixon","Charlton","Benson","Whitehouse","Barry","Hope","Lord","North","Storey","Connor","Potts","Bevan","Hargreaves","Mclean","Mistry","Bruce","Howells","Hyde","Parkes","Wyatt","Fry","Lees","O'donnell","Craig","Forster","Mckenzie","Humphries","Mellor","Carey","Ingram","Summers","Leonard"],
		            // https://surnames.behindthename.com/top/lists/germany/2017
		            "de": ["Müller","Schmidt","Schneider","Fischer","Weber","Meyer","Wagner","Becker","Schulz","Hoffmann","Schäfer","Koch","Bauer","Richter","Klein","Wolf","Schröder","Neumann","Schwarz","Zimmermann","Braun","Krüger","Hofmann","Hartmann","Lange","Schmitt","Werner","Schmitz","Krause","Meier","Lehmann","Schmid","Schulze","Maier","Köhler","Herrmann","König","Walter","Mayer","Huber","Kaiser","Fuchs","Peters","Lang","Scholz","Möller","Weiß","Jung","Hahn","Schubert","Vogel","Friedrich","Keller","Günther","Frank","Berger","Winkler","Roth","Beck","Lorenz","Baumann","Franke","Albrecht","Schuster","Simon","Ludwig","Böhm","Winter","Kraus","Martin","Schumacher","Krämer","Vogt","Stein","Jäger","Otto","Sommer","Groß","Seidel","Heinrich","Brandt","Haas","Schreiber","Graf","Schulte","Dietrich","Ziegler","Kuhn","Kühn","Pohl","Engel","Horn","Busch","Bergmann","Thomas","Voigt","Sauer","Arnold","Wolff","Pfeiffer"],
		            // http://www.japantimes.co.jp/life/2009/10/11/lifestyle/japans-top-100-most-common-family-names/
		            "jp": ["Sato","Suzuki","Takahashi","Tanaka","Watanabe","Ito","Yamamoto","Nakamura","Kobayashi","Kato","Yoshida","Yamada","Sasaki","Yamaguchi","Saito","Matsumoto","Inoue","Kimura","Hayashi","Shimizu","Yamazaki","Mori","Abe","Ikeda","Hashimoto","Yamashita","Ishikawa","Nakajima","Maeda","Fujita","Ogawa","Goto","Okada","Hasegawa","Murakami","Kondo","Ishii","Saito","Sakamoto","Endo","Aoki","Fujii","Nishimura","Fukuda","Ota","Miura","Fujiwara","Okamoto","Matsuda","Nakagawa","Nakano","Harada","Ono","Tamura","Takeuchi","Kaneko","Wada","Nakayama","Ishida","Ueda","Morita","Hara","Shibata","Sakai","Kudo","Yokoyama","Miyazaki","Miyamoto","Uchida","Takagi","Ando","Taniguchi","Ohno","Maruyama","Imai","Takada","Fujimoto","Takeda","Murata","Ueno","Sugiyama","Masuda","Sugawara","Hirano","Kojima","Otsuka","Chiba","Kubo","Matsui","Iwasaki","Sakurai","Kinoshita","Noguchi","Matsuo","Nomura","Kikuchi","Sano","Onishi","Sugimoto","Arai"],
		            // http://www.lowchensaustralia.com/names/popular-spanish-names.htm
		            "es": ["Garcia","Fernandez","Lopez","Martinez","Gonzalez","Rodriguez","Sanchez","Perez","Martin","Gomez","Ruiz","Diaz","Hernandez","Alvarez","Jimenez","Moreno","Munoz","Alonso","Romero","Navarro","Gutierrez","Torres","Dominguez","Gil","Vazquez","Blanco","Serrano","Ramos","Castro","Suarez","Sanz","Rubio","Ortega","Molina","Delgado","Ortiz","Morales","Ramirez","Marin","Iglesias","Santos","Castillo","Garrido","Calvo","Pena","Cruz","Cano","Nunez","Prieto","Diez","Lozano","Vidal","Pascual","Ferrer","Medina","Vega","Leon","Herrero","Vicente","Mendez","Guerrero","Fuentes","Campos","Nieto","Cortes","Caballero","Ibanez","Lorenzo","Pastor","Gimenez","Saez","Soler","Marquez","Carrasco","Herrera","Montero","Arias","Crespo","Flores","Andres","Aguilar","Hidalgo","Cabrera","Mora","Duran","Velasco","Rey","Pardo","Roman","Vila","Bravo","Merino","Moya","Soto","Izquierdo","Reyes","Redondo","Marcos","Carmona","Menendez"],
		            // Data taken from https://fr.wikipedia.org/wiki/Liste_des_noms_de_famille_les_plus_courants_en_France
		            "fr": ["Martin","Bernard","Thomas","Petit","Robert","Richard","Durand","Dubois","Moreau","Laurent","Simon","Michel","Lefèvre","Leroy","Roux","David","Bertrand","Morel","Fournier","Girard","Bonnet","Dupont","Lambert","Fontaine","Rousseau","Vincent","Müller","Lefèvre","Faure","André","Mercier","Blanc","Guérin","Boyer","Garnier","Chevalier","François","Legrand","Gauthier","Garcia","Perrin","Robin","Clément","Morin","Nicolas","Henry","Roussel","Matthieu","Gautier","Masson","Marchand","Duval","Denis","Dumont","Marie","Lemaire","Noël","Meyer","Dufour","Meunier","Brun","Blanchard","Giraud","Joly","Rivière","Lucas","Brunet","Gaillard","Barbier","Arnaud","Martínez","Gérard","Roche","Renard","Schmitt","Roy","Leroux","Colin","Vidal","Caron","Picard","Roger","Fabre","Aubert","Lemoine","Renaud","Dumas","Lacroix","Olivier","Philippe","Bourgeois","Pierre","Benoît","Rey","Leclerc","Payet","Rolland","Leclercq","Guillaume","Lecomte","López","Jean","Dupuy","Guillot","Hubert","Berger","Carpentier","Sánchez","Dupuis","Moulin","Louis","Deschamps","Huet","Vasseur","Perez","Boucher","Fleury","Royer","Klein","Jacquet","Adam","Paris","Poirier","Marty","Aubry","Guyot","Carré","Charles","Renault","Charpentier","Ménard","Maillard","Baron","Bertin","Bailly","Hervé","Schneider","Fernández","Le GallGall","Collet","Léger","Bouvier","Julien","Prévost","Millet","Perrot","Daniel","Le RouxRoux","Cousin","Germain","Breton","Besson","Langlois","Rémi","Le GoffGoff","Pelletier","Lévêque","Perrier","Leblanc","Barré","Lebrun","Marchal","Weber","Mallet","Hamon","Boulanger","Jacob","Monnier","Michaud","Rodríguez","Guichard","Gillet","Étienne","Grondin","Poulain","Tessier","Chevallier","Collin","Chauvin","Da SilvaSilva","Bouchet","Gay","Lemaître","Bénard","Maréchal","Humbert","Reynaud","Antoine","Hoarau","Perret","Barthélemy","Cordier","Pichon","Lejeune","Gilbert","Lamy","Delaunay","Pasquier","Carlier","LaporteLaporte"]
		        },

		        // Data taken from http://geoportal.statistics.gov.uk/datasets/ons-postcode-directory-latest-centroids
		        postcodeAreas: [{code: 'AB'}, {code: 'AL'}, {code: 'B'}, {code: 'BA'}, {code: 'BB'}, {code: 'BD'}, {code: 'BH'}, {code: 'BL'}, {code: 'BN'}, {code: 'BR'}, {code: 'BS'}, {code: 'BT'}, {code: 'CA'}, {code: 'CB'}, {code: 'CF'}, {code: 'CH'}, {code: 'CM'}, {code: 'CO'}, {code: 'CR'}, {code: 'CT'}, {code: 'CV'}, {code: 'CW'}, {code: 'DA'}, {code: 'DD'}, {code: 'DE'}, {code: 'DG'}, {code: 'DH'}, {code: 'DL'}, {code: 'DN'}, {code: 'DT'}, {code: 'DY'}, {code: 'E'}, {code: 'EC'}, {code: 'EH'}, {code: 'EN'}, {code: 'EX'}, {code: 'FK'}, {code: 'FY'}, {code: 'G'}, {code: 'GL'}, {code: 'GU'}, {code: 'GY'}, {code: 'HA'}, {code: 'HD'}, {code: 'HG'}, {code: 'HP'}, {code: 'HR'}, {code: 'HS'}, {code: 'HU'}, {code: 'HX'}, {code: 'IG'}, {code: 'IM'}, {code: 'IP'}, {code: 'IV'}, {code: 'JE'}, {code: 'KA'}, {code: 'KT'}, {code: 'KW'}, {code: 'KY'}, {code: 'L'}, {code: 'LA'}, {code: 'LD'}, {code: 'LE'}, {code: 'LL'}, {code: 'LN'}, {code: 'LS'}, {code: 'LU'}, {code: 'M'}, {code: 'ME'}, {code: 'MK'}, {code: 'ML'}, {code: 'N'}, {code: 'NE'}, {code: 'NG'}, {code: 'NN'}, {code: 'NP'}, {code: 'NR'}, {code: 'NW'}, {code: 'OL'}, {code: 'OX'}, {code: 'PA'}, {code: 'PE'}, {code: 'PH'}, {code: 'PL'}, {code: 'PO'}, {code: 'PR'}, {code: 'RG'}, {code: 'RH'}, {code: 'RM'}, {code: 'S'}, {code: 'SA'}, {code: 'SE'}, {code: 'SG'}, {code: 'SK'}, {code: 'SL'}, {code: 'SM'}, {code: 'SN'}, {code: 'SO'}, {code: 'SP'}, {code: 'SR'}, {code: 'SS'}, {code: 'ST'}, {code: 'SW'}, {code: 'SY'}, {code: 'TA'}, {code: 'TD'}, {code: 'TF'}, {code: 'TN'}, {code: 'TQ'}, {code: 'TR'}, {code: 'TS'}, {code: 'TW'}, {code: 'UB'}, {code: 'W'}, {code: 'WA'}, {code: 'WC'}, {code: 'WD'}, {code: 'WF'}, {code: 'WN'}, {code: 'WR'}, {code: 'WS'}, {code: 'WV'}, {code: 'YO'}, {code: 'ZE'}],

		        // Data taken from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
		        countries: [{"name":"Afghanistan","abbreviation":"AF"},{"name":"Åland Islands","abbreviation":"AX"},{"name":"Albania","abbreviation":"AL"},{"name":"Algeria","abbreviation":"DZ"},{"name":"American Samoa","abbreviation":"AS"},{"name":"Andorra","abbreviation":"AD"},{"name":"Angola","abbreviation":"AO"},{"name":"Anguilla","abbreviation":"AI"},{"name":"Antarctica","abbreviation":"AQ"},{"name":"Antigua and Barbuda","abbreviation":"AG"},{"name":"Argentina","abbreviation":"AR"},{"name":"Armenia","abbreviation":"AM"},{"name":"Aruba","abbreviation":"AW"},{"name":"Australia","abbreviation":"AU"},{"name":"Austria","abbreviation":"AT"},{"name":"Azerbaijan","abbreviation":"AZ"},{"name":"Bahamas","abbreviation":"BS"},{"name":"Bahrain","abbreviation":"BH"},{"name":"Bangladesh","abbreviation":"BD"},{"name":"Barbados","abbreviation":"BB"},{"name":"Belarus","abbreviation":"BY"},{"name":"Belgium","abbreviation":"BE"},{"name":"Belize","abbreviation":"BZ"},{"name":"Benin","abbreviation":"BJ"},{"name":"Bermuda","abbreviation":"BM"},{"name":"Bhutan","abbreviation":"BT"},{"name":"Plurinational State of Bolivia","abbreviation":"BO"},{"name":"Bonaire, Sint Eustatius and Saba","abbreviation":"BQ"},{"name":"Bosnia and Herzegovina","abbreviation":"BA"},{"name":"Botswana","abbreviation":"BW"},{"name":"Bouvet Island","abbreviation":"BV"},{"name":"Brazil","abbreviation":"BR"},{"name":"British Indian Ocean Territory","abbreviation":"IO"},{"name":"Brunei Darussalam","abbreviation":"BN"},{"name":"Bulgaria","abbreviation":"BG"},{"name":"Burkina Faso","abbreviation":"BF"},{"name":"Burundi","abbreviation":"BI"},{"name":"Cabo Verde","abbreviation":"CV"},{"name":"Cambodia","abbreviation":"KH"},{"name":"Cameroon","abbreviation":"CM"},{"name":"Canada","abbreviation":"CA"},{"name":"Cayman Islands","abbreviation":"KY"},{"name":"Central African Republic","abbreviation":"CF"},{"name":"Chad","abbreviation":"TD"},{"name":"Chile","abbreviation":"CL"},{"name":"China","abbreviation":"CN"},{"name":"Christmas Island","abbreviation":"CX"},{"name":"Cocos (Keeling) Islands","abbreviation":"CC"},{"name":"Colombia","abbreviation":"CO"},{"name":"Comoros","abbreviation":"KM"},{"name":"Congo","abbreviation":"CG"},{"name":"Democratic Republic of the Congo","abbreviation":"CD"},{"name":"Cook Islands","abbreviation":"CK"},{"name":"Costa Rica","abbreviation":"CR"},{"name":"Côte d'Ivoire","abbreviation":"CI"},{"name":"Croatia","abbreviation":"HR"},{"name":"Cuba","abbreviation":"CU"},{"name":"Curaçao","abbreviation":"CW"},{"name":"Cyprus","abbreviation":"CY"},{"name":"Czechia","abbreviation":"CZ"},{"name":"Denmark","abbreviation":"DK"},{"name":"Djibouti","abbreviation":"DJ"},{"name":"Dominica","abbreviation":"DM"},{"name":"Dominican Republic","abbreviation":"DO"},{"name":"Ecuador","abbreviation":"EC"},{"name":"Egypt","abbreviation":"EG"},{"name":"El Salvador","abbreviation":"SV"},{"name":"Equatorial Guinea","abbreviation":"GQ"},{"name":"Eritrea","abbreviation":"ER"},{"name":"Estonia","abbreviation":"EE"},{"name":"Eswatini","abbreviation":"SZ"},{"name":"Ethiopia","abbreviation":"ET"},{"name":"Falkland Islands (Malvinas)","abbreviation":"FK"},{"name":"Faroe Islands","abbreviation":"FO"},{"name":"Fiji","abbreviation":"FJ"},{"name":"Finland","abbreviation":"FI"},{"name":"France","abbreviation":"FR"},{"name":"French Guiana","abbreviation":"GF"},{"name":"French Polynesia","abbreviation":"PF"},{"name":"French Southern Territories","abbreviation":"TF"},{"name":"Gabon","abbreviation":"GA"},{"name":"Gambia","abbreviation":"GM"},{"name":"Georgia","abbreviation":"GE"},{"name":"Germany","abbreviation":"DE"},{"name":"Ghana","abbreviation":"GH"},{"name":"Gibraltar","abbreviation":"GI"},{"name":"Greece","abbreviation":"GR"},{"name":"Greenland","abbreviation":"GL"},{"name":"Grenada","abbreviation":"GD"},{"name":"Guadeloupe","abbreviation":"GP"},{"name":"Guam","abbreviation":"GU"},{"name":"Guatemala","abbreviation":"GT"},{"name":"Guernsey","abbreviation":"GG"},{"name":"Guinea","abbreviation":"GN"},{"name":"Guinea-Bissau","abbreviation":"GW"},{"name":"Guyana","abbreviation":"GY"},{"name":"Haiti","abbreviation":"HT"},{"name":"Heard Island and McDonald Islands","abbreviation":"HM"},{"name":"Holy See","abbreviation":"VA"},{"name":"Honduras","abbreviation":"HN"},{"name":"Hong Kong","abbreviation":"HK"},{"name":"Hungary","abbreviation":"HU"},{"name":"Iceland","abbreviation":"IS"},{"name":"India","abbreviation":"IN"},{"name":"Indonesia","abbreviation":"ID"},{"name":"Islamic Republic of Iran","abbreviation":"IR"},{"name":"Iraq","abbreviation":"IQ"},{"name":"Ireland","abbreviation":"IE"},{"name":"Isle of Man","abbreviation":"IM"},{"name":"Israel","abbreviation":"IL"},{"name":"Italy","abbreviation":"IT"},{"name":"Jamaica","abbreviation":"JM"},{"name":"Japan","abbreviation":"JP"},{"name":"Jersey","abbreviation":"JE"},{"name":"Jordan","abbreviation":"JO"},{"name":"Kazakhstan","abbreviation":"KZ"},{"name":"Kenya","abbreviation":"KE"},{"name":"Kiribati","abbreviation":"KI"},{"name":"Democratic People's Republic of Korea","abbreviation":"KP"},{"name":"Republic of Korea","abbreviation":"KR"},{"name":"Kuwait","abbreviation":"KW"},{"name":"Kyrgyzstan","abbreviation":"KG"},{"name":"Lao People's Democratic Republic","abbreviation":"LA"},{"name":"Latvia","abbreviation":"LV"},{"name":"Lebanon","abbreviation":"LB"},{"name":"Lesotho","abbreviation":"LS"},{"name":"Liberia","abbreviation":"LR"},{"name":"Libya","abbreviation":"LY"},{"name":"Liechtenstein","abbreviation":"LI"},{"name":"Lithuania","abbreviation":"LT"},{"name":"Luxembourg","abbreviation":"LU"},{"name":"Macao","abbreviation":"MO"},{"name":"Madagascar","abbreviation":"MG"},{"name":"Malawi","abbreviation":"MW"},{"name":"Malaysia","abbreviation":"MY"},{"name":"Maldives","abbreviation":"MV"},{"name":"Mali","abbreviation":"ML"},{"name":"Malta","abbreviation":"MT"},{"name":"Marshall Islands","abbreviation":"MH"},{"name":"Martinique","abbreviation":"MQ"},{"name":"Mauritania","abbreviation":"MR"},{"name":"Mauritius","abbreviation":"MU"},{"name":"Mayotte","abbreviation":"YT"},{"name":"Mexico","abbreviation":"MX"},{"name":"Federated States of Micronesia","abbreviation":"FM"},{"name":"Republic of Moldova","abbreviation":"MD"},{"name":"Monaco","abbreviation":"MC"},{"name":"Mongolia","abbreviation":"MN"},{"name":"Montenegro","abbreviation":"ME"},{"name":"Montserrat","abbreviation":"MS"},{"name":"Morocco","abbreviation":"MA"},{"name":"Mozambique","abbreviation":"MZ"},{"name":"Myanmar","abbreviation":"MM"},{"name":"Namibia","abbreviation":"NA"},{"name":"Nauru","abbreviation":"NR"},{"name":"Nepal","abbreviation":"NP"},{"name":"Kingdom of the Netherlands","abbreviation":"NL"},{"name":"New Caledonia","abbreviation":"NC"},{"name":"New Zealand","abbreviation":"NZ"},{"name":"Nicaragua","abbreviation":"NI"},{"name":"Niger","abbreviation":"NE"},{"name":"Nigeria","abbreviation":"NG"},{"name":"Niue","abbreviation":"NU"},{"name":"Norfolk Island","abbreviation":"NF"},{"name":"North Macedonia","abbreviation":"MK"},{"name":"Northern Mariana Islands","abbreviation":"MP"},{"name":"Norway","abbreviation":"NO"},{"name":"Oman","abbreviation":"OM"},{"name":"Pakistan","abbreviation":"PK"},{"name":"Palau","abbreviation":"PW"},{"name":"State of Palestine","abbreviation":"PS"},{"name":"Panama","abbreviation":"PA"},{"name":"Papua New Guinea","abbreviation":"PG"},{"name":"Paraguay","abbreviation":"PY"},{"name":"Peru","abbreviation":"PE"},{"name":"Philippines","abbreviation":"PH"},{"name":"Pitcairn","abbreviation":"PN"},{"name":"Poland","abbreviation":"PL"},{"name":"Portugal","abbreviation":"PT"},{"name":"Puerto Rico","abbreviation":"PR"},{"name":"Qatar","abbreviation":"QA"},{"name":"Réunion","abbreviation":"RE"},{"name":"Romania","abbreviation":"RO"},{"name":"Russian Federation","abbreviation":"RU"},{"name":"Rwanda","abbreviation":"RW"},{"name":"Saint Barthélemy","abbreviation":"BL"},{"name":"Saint Helena, Ascension and Tristan da Cunha","abbreviation":"SH"},{"name":"Saint Kitts and Nevis","abbreviation":"KN"},{"name":"Saint Lucia","abbreviation":"LC"},{"name":"Saint Martin (French part)","abbreviation":"MF"},{"name":"Saint Pierre and Miquelon","abbreviation":"PM"},{"name":"Saint Vincent and the Grenadines","abbreviation":"VC"},{"name":"Samoa","abbreviation":"WS"},{"name":"San Marino","abbreviation":"SM"},{"name":"Sao Tome and Principe","abbreviation":"ST"},{"name":"Saudi Arabia","abbreviation":"SA"},{"name":"Senegal","abbreviation":"SN"},{"name":"Serbia","abbreviation":"RS"},{"name":"Seychelles","abbreviation":"SC"},{"name":"Sierra Leone","abbreviation":"SL"},{"name":"Singapore","abbreviation":"SG"},{"name":"Sint Maarten (Dutch part)","abbreviation":"SX"},{"name":"Slovakia","abbreviation":"SK"},{"name":"Slovenia","abbreviation":"SI"},{"name":"Solomon Islands","abbreviation":"SB"},{"name":"Somalia","abbreviation":"SO"},{"name":"South Africa","abbreviation":"ZA"},{"name":"South Georgia and the South Sandwich Islands","abbreviation":"GS"},{"name":"South Sudan","abbreviation":"SS"},{"name":"Spain","abbreviation":"ES"},{"name":"Sri Lanka","abbreviation":"LK"},{"name":"Sudan","abbreviation":"SD"},{"name":"Suriname","abbreviation":"SR"},{"name":"Svalbard and Jan Mayen","abbreviation":"SJ"},{"name":"Sweden","abbreviation":"SE"},{"name":"Switzerland","abbreviation":"CH"},{"name":"Syrian Arab Republic","abbreviation":"SY"},{"name":"Taiwan, Province of China","abbreviation":"TW"},{"name":"Tajikistan","abbreviation":"TJ"},{"name":"United Republic of Tanzania","abbreviation":"TZ"},{"name":"Thailand","abbreviation":"TH"},{"name":"Timor-Leste","abbreviation":"TL"},{"name":"Togo","abbreviation":"TG"},{"name":"Tokelau","abbreviation":"TK"},{"name":"Tonga","abbreviation":"TO"},{"name":"Trinidad and Tobago","abbreviation":"TT"},{"name":"Tunisia","abbreviation":"TN"},{"name":"Türkiye","abbreviation":"TR"},{"name":"Turkmenistan","abbreviation":"TM"},{"name":"Turks and Caicos Islands","abbreviation":"TC"},{"name":"Tuvalu","abbreviation":"TV"},{"name":"Uganda","abbreviation":"UG"},{"name":"Ukraine","abbreviation":"UA"},{"name":"United Arab Emirates","abbreviation":"AE"},{"name":"United Kingdom of Great Britain and Northern Ireland","abbreviation":"GB"},{"name":"United States Minor Outlying Islands","abbreviation":"UM"},{"name":"United States of America","abbreviation":"US"},{"name":"Uruguay","abbreviation":"UY"},{"name":"Uzbekistan","abbreviation":"UZ"},{"name":"Vanuatu","abbreviation":"VU"},{"name":"Bolivarian Republic of Venezuela","abbreviation":"VE"},{"name":"Viet Nam","abbreviation":"VN"},{"name":"Virgin Islands (British)","abbreviation":"VG"},{"name":"Virgin Islands (U.S.)","abbreviation":"VI"},{"name":"Wallis and Futuna","abbreviation":"WF"},{"name":"Western Sahara","abbreviation":"EH"},{"name":"Yemen","abbreviation":"YE"},{"name":"Zambia","abbreviation":"ZM"},{"name":"Zimbabwe","abbreviation":"ZW"}],

		                counties: {
		            // Data taken from http://www.downloadexcelfiles.com/gb_en/download-excel-file-list-counties-uk
		            "uk": [
		                {name: 'Bath and North East Somerset'},
		                {name: 'Aberdeenshire'},
		                {name: 'Anglesey'},
		                {name: 'Angus'},
		                {name: 'Bedford'},
		                {name: 'Blackburn with Darwen'},
		                {name: 'Blackpool'},
		                {name: 'Bournemouth'},
		                {name: 'Bracknell Forest'},
		                {name: 'Brighton & Hove'},
		                {name: 'Bristol'},
		                {name: 'Buckinghamshire'},
		                {name: 'Cambridgeshire'},
		                {name: 'Carmarthenshire'},
		                {name: 'Central Bedfordshire'},
		                {name: 'Ceredigion'},
		                {name: 'Cheshire East'},
		                {name: 'Cheshire West and Chester'},
		                {name: 'Clackmannanshire'},
		                {name: 'Conwy'},
		                {name: 'Cornwall'},
		                {name: 'County Antrim'},
		                {name: 'County Armagh'},
		                {name: 'County Down'},
		                {name: 'County Durham'},
		                {name: 'County Fermanagh'},
		                {name: 'County Londonderry'},
		                {name: 'County Tyrone'},
		                {name: 'Cumbria'},
		                {name: 'Darlington'},
		                {name: 'Denbighshire'},
		                {name: 'Derby'},
		                {name: 'Derbyshire'},
		                {name: 'Devon'},
		                {name: 'Dorset'},
		                {name: 'Dumfries and Galloway'},
		                {name: 'Dundee'},
		                {name: 'East Lothian'},
		                {name: 'East Riding of Yorkshire'},
		                {name: 'East Sussex'},
		                {name: 'Edinburgh?'},
		                {name: 'Essex'},
		                {name: 'Falkirk'},
		                {name: 'Fife'},
		                {name: 'Flintshire'},
		                {name: 'Gloucestershire'},
		                {name: 'Greater London'},
		                {name: 'Greater Manchester'},
		                {name: 'Gwent'},
		                {name: 'Gwynedd'},
		                {name: 'Halton'},
		                {name: 'Hampshire'},
		                {name: 'Hartlepool'},
		                {name: 'Herefordshire'},
		                {name: 'Hertfordshire'},
		                {name: 'Highlands'},
		                {name: 'Hull'},
		                {name: 'Isle of Wight'},
		                {name: 'Isles of Scilly'},
		                {name: 'Kent'},
		                {name: 'Lancashire'},
		                {name: 'Leicester'},
		                {name: 'Leicestershire'},
		                {name: 'Lincolnshire'},
		                {name: 'Lothian'},
		                {name: 'Luton'},
		                {name: 'Medway'},
		                {name: 'Merseyside'},
		                {name: 'Mid Glamorgan'},
		                {name: 'Middlesbrough'},
		                {name: 'Milton Keynes'},
		                {name: 'Monmouthshire'},
		                {name: 'Moray'},
		                {name: 'Norfolk'},
		                {name: 'North East Lincolnshire'},
		                {name: 'North Lincolnshire'},
		                {name: 'North Somerset'},
		                {name: 'North Yorkshire'},
		                {name: 'Northamptonshire'},
		                {name: 'Northumberland'},
		                {name: 'Nottingham'},
		                {name: 'Nottinghamshire'},
		                {name: 'Oxfordshire'},
		                {name: 'Pembrokeshire'},
		                {name: 'Perth and Kinross'},
		                {name: 'Peterborough'},
		                {name: 'Plymouth'},
		                {name: 'Poole'},
		                {name: 'Portsmouth'},
		                {name: 'Powys'},
		                {name: 'Reading'},
		                {name: 'Redcar and Cleveland'},
		                {name: 'Rutland'},
		                {name: 'Scottish Borders'},
		                {name: 'Shropshire'},
		                {name: 'Slough'},
		                {name: 'Somerset'},
		                {name: 'South Glamorgan'},
		                {name: 'South Gloucestershire'},
		                {name: 'South Yorkshire'},
		                {name: 'Southampton'},
		                {name: 'Southend-on-Sea'},
		                {name: 'Staffordshire'},
		                {name: 'Stirlingshire'},
		                {name: 'Stockton-on-Tees'},
		                {name: 'Stoke-on-Trent'},
		                {name: 'Strathclyde'},
		                {name: 'Suffolk'},
		                {name: 'Surrey'},
		                {name: 'Swindon'},
		                {name: 'Telford and Wrekin'},
		                {name: 'Thurrock'},
		                {name: 'Torbay'},
		                {name: 'Tyne and Wear'},
		                {name: 'Warrington'},
		                {name: 'Warwickshire'},
		                {name: 'West Berkshire'},
		                {name: 'West Glamorgan'},
		                {name: 'West Lothian'},
		                {name: 'West Midlands'},
		                {name: 'West Sussex'},
		                {name: 'West Yorkshire'},
		                {name: 'Western Isles'},
		                {name: 'Wiltshire'},
		                {name: 'Windsor and Maidenhead'},
		                {name: 'Wokingham'},
		                {name: 'Worcestershire'},
		                {name: 'Wrexham'},
		                {name: 'York'}]
		                                },
		        provinces: {
		            "ca": [
		                {name: 'Alberta', abbreviation: 'AB'},
		                {name: 'British Columbia', abbreviation: 'BC'},
		                {name: 'Manitoba', abbreviation: 'MB'},
		                {name: 'New Brunswick', abbreviation: 'NB'},
		                {name: 'Newfoundland and Labrador', abbreviation: 'NL'},
		                {name: 'Nova Scotia', abbreviation: 'NS'},
		                {name: 'Ontario', abbreviation: 'ON'},
		                {name: 'Prince Edward Island', abbreviation: 'PE'},
		                {name: 'Quebec', abbreviation: 'QC'},
		                {name: 'Saskatchewan', abbreviation: 'SK'},

		                // The case could be made that the following are not actually provinces
		                // since they are technically considered "territories" however they all
		                // look the same on an envelope!
		                {name: 'Northwest Territories', abbreviation: 'NT'},
		                {name: 'Nunavut', abbreviation: 'NU'},
		                {name: 'Yukon', abbreviation: 'YT'}
		            ],
		            "it": [
		                { name: "Agrigento", abbreviation: "AG", code: 84 },
		                { name: "Alessandria", abbreviation: "AL", code: 6 },
		                { name: "Ancona", abbreviation: "AN", code: 42 },
		                { name: "Aosta", abbreviation: "AO", code: 7 },
		                { name: "L'Aquila", abbreviation: "AQ", code: 66 },
		                { name: "Arezzo", abbreviation: "AR", code: 51 },
		                { name: "Ascoli-Piceno", abbreviation: "AP", code: 44 },
		                { name: "Asti", abbreviation: "AT", code: 5 },
		                { name: "Avellino", abbreviation: "AV", code: 64 },
		                { name: "Bari", abbreviation: "BA", code: 72 },
		                { name: "Barletta-Andria-Trani", abbreviation: "BT", code: 72 },
		                { name: "Belluno", abbreviation: "BL", code: 25 },
		                { name: "Benevento", abbreviation: "BN", code: 62 },
		                { name: "Bergamo", abbreviation: "BG", code: 16 },
		                { name: "Biella", abbreviation: "BI", code: 96 },
		                { name: "Bologna", abbreviation: "BO", code: 37 },
		                { name: "Bolzano", abbreviation: "BZ", code: 21 },
		                { name: "Brescia", abbreviation: "BS", code: 17 },
		                { name: "Brindisi", abbreviation: "BR", code: 74 },
		                { name: "Cagliari", abbreviation: "CA", code: 92 },
		                { name: "Caltanissetta", abbreviation: "CL", code: 85 },
		                { name: "Campobasso", abbreviation: "CB", code: 70 },
		                { name: "Carbonia Iglesias", abbreviation: "CI", code: 70 },
		                { name: "Caserta", abbreviation: "CE", code: 61 },
		                { name: "Catania", abbreviation: "CT", code: 87 },
		                { name: "Catanzaro", abbreviation: "CZ", code: 79 },
		                { name: "Chieti", abbreviation: "CH", code: 69 },
		                { name: "Como", abbreviation: "CO", code: 13 },
		                { name: "Cosenza", abbreviation: "CS", code: 78 },
		                { name: "Cremona", abbreviation: "CR", code: 19 },
		                { name: "Crotone", abbreviation: "KR", code: 101 },
		                { name: "Cuneo", abbreviation: "CN", code: 4 },
		                { name: "Enna", abbreviation: "EN", code: 86 },
		                { name: "Fermo", abbreviation: "FM", code: 86 },
		                { name: "Ferrara", abbreviation: "FE", code: 38 },
		                { name: "Firenze", abbreviation: "FI", code: 48 },
		                { name: "Foggia", abbreviation: "FG", code: 71 },
		                { name: "Forli-Cesena", abbreviation: "FC", code: 71 },
		                { name: "Frosinone", abbreviation: "FR", code: 60 },
		                { name: "Genova", abbreviation: "GE", code: 10 },
		                { name: "Gorizia", abbreviation: "GO", code: 31 },
		                { name: "Grosseto", abbreviation: "GR", code: 53 },
		                { name: "Imperia", abbreviation: "IM", code: 8 },
		                { name: "Isernia", abbreviation: "IS", code: 94 },
		                { name: "La-Spezia", abbreviation: "SP", code: 66 },
		                { name: "Latina", abbreviation: "LT", code: 59 },
		                { name: "Lecce", abbreviation: "LE", code: 75 },
		                { name: "Lecco", abbreviation: "LC", code: 97 },
		                { name: "Livorno", abbreviation: "LI", code: 49 },
		                { name: "Lodi", abbreviation: "LO", code: 98 },
		                { name: "Lucca", abbreviation: "LU", code: 46 },
		                { name: "Macerata", abbreviation: "MC", code: 43 },
		                { name: "Mantova", abbreviation: "MN", code: 20 },
		                { name: "Massa-Carrara", abbreviation: "MS", code: 45 },
		                { name: "Matera", abbreviation: "MT", code: 77 },
		                { name: "Medio Campidano", abbreviation: "VS", code: 77 },
		                { name: "Messina", abbreviation: "ME", code: 83 },
		                { name: "Milano", abbreviation: "MI", code: 15 },
		                { name: "Modena", abbreviation: "MO", code: 36 },
		                { name: "Monza-Brianza", abbreviation: "MB", code: 36 },
		                { name: "Napoli", abbreviation: "NA", code: 63 },
		                { name: "Novara", abbreviation: "NO", code: 3 },
		                { name: "Nuoro", abbreviation: "NU", code: 91 },
		                { name: "Ogliastra", abbreviation: "OG", code: 91 },
		                { name: "Olbia Tempio", abbreviation: "OT", code: 91 },
		                { name: "Oristano", abbreviation: "OR", code: 95 },
		                { name: "Padova", abbreviation: "PD", code: 28 },
		                { name: "Palermo", abbreviation: "PA", code: 82 },
		                { name: "Parma", abbreviation: "PR", code: 34 },
		                { name: "Pavia", abbreviation: "PV", code: 18 },
		                { name: "Perugia", abbreviation: "PG", code: 54 },
		                { name: "Pesaro-Urbino", abbreviation: "PU", code: 41 },
		                { name: "Pescara", abbreviation: "PE", code: 68 },
		                { name: "Piacenza", abbreviation: "PC", code: 33 },
		                { name: "Pisa", abbreviation: "PI", code: 50 },
		                { name: "Pistoia", abbreviation: "PT", code: 47 },
		                { name: "Pordenone", abbreviation: "PN", code: 93 },
		                { name: "Potenza", abbreviation: "PZ", code: 76 },
		                { name: "Prato", abbreviation: "PO", code: 100 },
		                { name: "Ragusa", abbreviation: "RG", code: 88 },
		                { name: "Ravenna", abbreviation: "RA", code: 39 },
		                { name: "Reggio-Calabria", abbreviation: "RC", code: 35 },
		                { name: "Reggio-Emilia", abbreviation: "RE", code: 35 },
		                { name: "Rieti", abbreviation: "RI", code: 57 },
		                { name: "Rimini", abbreviation: "RN", code: 99 },
		                { name: "Roma", abbreviation: "Roma", code: 58 },
		                { name: "Rovigo", abbreviation: "RO", code: 29 },
		                { name: "Salerno", abbreviation: "SA", code: 65 },
		                { name: "Sassari", abbreviation: "SS", code: 90 },
		                { name: "Savona", abbreviation: "SV", code: 9 },
		                { name: "Siena", abbreviation: "SI", code: 52 },
		                { name: "Siracusa", abbreviation: "SR", code: 89 },
		                { name: "Sondrio", abbreviation: "SO", code: 14 },
		                { name: "Taranto", abbreviation: "TA", code: 73 },
		                { name: "Teramo", abbreviation: "TE", code: 67 },
		                { name: "Terni", abbreviation: "TR", code: 55 },
		                { name: "Torino", abbreviation: "TO", code: 1 },
		                { name: "Trapani", abbreviation: "TP", code: 81 },
		                { name: "Trento", abbreviation: "TN", code: 22 },
		                { name: "Treviso", abbreviation: "TV", code: 26 },
		                { name: "Trieste", abbreviation: "TS", code: 32 },
		                { name: "Udine", abbreviation: "UD", code: 30 },
		                { name: "Varese", abbreviation: "VA", code: 12 },
		                { name: "Venezia", abbreviation: "VE", code: 27 },
		                { name: "Verbania", abbreviation: "VB", code: 27 },
		                { name: "Vercelli", abbreviation: "VC", code: 2 },
		                { name: "Verona", abbreviation: "VR", code: 23 },
		                { name: "Vibo-Valentia", abbreviation: "VV", code: 102 },
		                { name: "Vicenza", abbreviation: "VI", code: 24 },
		                { name: "Viterbo", abbreviation: "VT", code: 56 }
		            ]
		        },

		            // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json
		        nationalities: [
		           {name: 'Afghan'},
		           {name: 'Albanian'},
		           {name: 'Algerian'},
		           {name: 'American'},
		           {name: 'Andorran'},
		           {name: 'Angolan'},
		           {name: 'Antiguans'},
		           {name: 'Argentinean'},
		           {name: 'Armenian'},
		           {name: 'Australian'},
		           {name: 'Austrian'},
		           {name: 'Azerbaijani'},
		           {name: 'Bahami'},
		           {name: 'Bahraini'},
		           {name: 'Bangladeshi'},
		           {name: 'Barbadian'},
		           {name: 'Barbudans'},
		           {name: 'Batswana'},
		           {name: 'Belarusian'},
		           {name: 'Belgian'},
		           {name: 'Belizean'},
		           {name: 'Beninese'},
		           {name: 'Bhutanese'},
		           {name: 'Bolivian'},
		           {name: 'Bosnian'},
		           {name: 'Brazilian'},
		           {name: 'British'},
		           {name: 'Bruneian'},
		           {name: 'Bulgarian'},
		           {name: 'Burkinabe'},
		           {name: 'Burmese'},
		           {name: 'Burundian'},
		           {name: 'Cambodian'},
		           {name: 'Cameroonian'},
		           {name: 'Canadian'},
		           {name: 'Cape Verdean'},
		           {name: 'Central African'},
		           {name: 'Chadian'},
		           {name: 'Chilean'},
		           {name: 'Chinese'},
		           {name: 'Colombian'},
		           {name: 'Comoran'},
		           {name: 'Congolese'},
		           {name: 'Costa Rican'},
		           {name: 'Croatian'},
		           {name: 'Cuban'},
		           {name: 'Cypriot'},
		           {name: 'Czech'},
		           {name: 'Danish'},
		           {name: 'Djibouti'},
		           {name: 'Dominican'},
		           {name: 'Dutch'},
		           {name: 'East Timorese'},
		           {name: 'Ecuadorean'},
		           {name: 'Egyptian'},
		           {name: 'Emirian'},
		           {name: 'Equatorial Guinean'},
		           {name: 'Eritrean'},
		           {name: 'Estonian'},
		           {name: 'Ethiopian'},
		           {name: 'Fijian'},
		           {name: 'Filipino'},
		           {name: 'Finnish'},
		           {name: 'French'},
		           {name: 'Gabonese'},
		           {name: 'Gambian'},
		           {name: 'Georgian'},
		           {name: 'German'},
		           {name: 'Ghanaian'},
		           {name: 'Greek'},
		           {name: 'Grenadian'},
		           {name: 'Guatemalan'},
		           {name: 'Guinea-Bissauan'},
		           {name: 'Guinean'},
		           {name: 'Guyanese'},
		           {name: 'Haitian'},
		           {name: 'Herzegovinian'},
		           {name: 'Honduran'},
		           {name: 'Hungarian'},
		           {name: 'I-Kiribati'},
		           {name: 'Icelander'},
		           {name: 'Indian'},
		           {name: 'Indonesian'},
		           {name: 'Iranian'},
		           {name: 'Iraqi'},
		           {name: 'Irish'},
		           {name: 'Israeli'},
		           {name: 'Italian'},
		           {name: 'Ivorian'},
		           {name: 'Jamaican'},
		           {name: 'Japanese'},
		           {name: 'Jordanian'},
		           {name: 'Kazakhstani'},
		           {name: 'Kenyan'},
		           {name: 'Kittian and Nevisian'},
		           {name: 'Kuwaiti'},
		           {name: 'Kyrgyz'},
		           {name: 'Laotian'},
		           {name: 'Latvian'},
		           {name: 'Lebanese'},
		           {name: 'Liberian'},
		           {name: 'Libyan'},
		           {name: 'Liechtensteiner'},
		           {name: 'Lithuanian'},
		           {name: 'Luxembourger'},
		           {name: 'Macedonian'},
		           {name: 'Malagasy'},
		           {name: 'Malawian'},
		           {name: 'Malaysian'},
		           {name: 'Maldivan'},
		           {name: 'Malian'},
		           {name: 'Maltese'},
		           {name: 'Marshallese'},
		           {name: 'Mauritanian'},
		           {name: 'Mauritian'},
		           {name: 'Mexican'},
		           {name: 'Micronesian'},
		           {name: 'Moldovan'},
		           {name: 'Monacan'},
		           {name: 'Mongolian'},
		           {name: 'Moroccan'},
		           {name: 'Mosotho'},
		           {name: 'Motswana'},
		           {name: 'Mozambican'},
		           {name: 'Namibian'},
		           {name: 'Nauruan'},
		           {name: 'Nepalese'},
		           {name: 'New Zealander'},
		           {name: 'Nicaraguan'},
		           {name: 'Nigerian'},
		           {name: 'Nigerien'},
		           {name: 'North Korean'},
		           {name: 'Northern Irish'},
		           {name: 'Norwegian'},
		           {name: 'Omani'},
		           {name: 'Pakistani'},
		           {name: 'Palauan'},
		           {name: 'Panamanian'},
		           {name: 'Papua New Guinean'},
		           {name: 'Paraguayan'},
		           {name: 'Peruvian'},
		           {name: 'Polish'},
		           {name: 'Portuguese'},
		           {name: 'Qatari'},
		           {name: 'Romani'},
		           {name: 'Russian'},
		           {name: 'Rwandan'},
		           {name: 'Saint Lucian'},
		           {name: 'Salvadoran'},
		           {name: 'Samoan'},
		           {name: 'San Marinese'},
		           {name: 'Sao Tomean'},
		           {name: 'Saudi'},
		           {name: 'Scottish'},
		           {name: 'Senegalese'},
		           {name: 'Serbian'},
		           {name: 'Seychellois'},
		           {name: 'Sierra Leonean'},
		           {name: 'Singaporean'},
		           {name: 'Slovakian'},
		           {name: 'Slovenian'},
		           {name: 'Solomon Islander'},
		           {name: 'Somali'},
		           {name: 'South African'},
		           {name: 'South Korean'},
		           {name: 'Spanish'},
		           {name: 'Sri Lankan'},
		           {name: 'Sudanese'},
		           {name: 'Surinamer'},
		           {name: 'Swazi'},
		           {name: 'Swedish'},
		           {name: 'Swiss'},
		           {name: 'Syrian'},
		           {name: 'Taiwanese'},
		           {name: 'Tajik'},
		           {name: 'Tanzanian'},
		           {name: 'Thai'},
		           {name: 'Togolese'},
		           {name: 'Tongan'},
		           {name: 'Trinidadian or Tobagonian'},
		           {name: 'Tunisian'},
		           {name: 'Turkish'},
		           {name: 'Tuvaluan'},
		           {name: 'Ugandan'},
		           {name: 'Ukrainian'},
		           {name: 'Uruguaya'},
		           {name: 'Uzbekistani'},
		           {name: 'Venezuela'},
		           {name: 'Vietnamese'},
		           {name: 'Wels'},
		           {name: 'Yemenit'},
		           {name: 'Zambia'},
		           {name: 'Zimbabwe'},
		        ],
		          // http://www.loc.gov/standards/iso639-2/php/code_list.php (ISO-639-1 codes)
		        locale_languages: [
		          "aa",
		          "ab",
		          "ae",
		          "af",
		          "ak",
		          "am",
		          "an",
		          "ar",
		          "as",
		          "av",
		          "ay",
		          "az",
		          "ba",
		          "be",
		          "bg",
		          "bh",
		          "bi",
		          "bm",
		          "bn",
		          "bo",
		          "br",
		          "bs",
		          "ca",
		          "ce",
		          "ch",
		          "co",
		          "cr",
		          "cs",
		          "cu",
		          "cv",
		          "cy",
		          "da",
		          "de",
		          "dv",
		          "dz",
		          "ee",
		          "el",
		          "en",
		          "eo",
		          "es",
		          "et",
		          "eu",
		          "fa",
		          "ff",
		          "fi",
		          "fj",
		          "fo",
		          "fr",
		          "fy",
		          "ga",
		          "gd",
		          "gl",
		          "gn",
		          "gu",
		          "gv",
		          "ha",
		          "he",
		          "hi",
		          "ho",
		          "hr",
		          "ht",
		          "hu",
		          "hy",
		          "hz",
		          "ia",
		          "id",
		          "ie",
		          "ig",
		          "ii",
		          "ik",
		          "io",
		          "is",
		          "it",
		          "iu",
		          "ja",
		          "jv",
		          "ka",
		          "kg",
		          "ki",
		          "kj",
		          "kk",
		          "kl",
		          "km",
		          "kn",
		          "ko",
		          "kr",
		          "ks",
		          "ku",
		          "kv",
		          "kw",
		          "ky",
		          "la",
		          "lb",
		          "lg",
		          "li",
		          "ln",
		          "lo",
		          "lt",
		          "lu",
		          "lv",
		          "mg",
		          "mh",
		          "mi",
		          "mk",
		          "ml",
		          "mn",
		          "mr",
		          "ms",
		          "mt",
		          "my",
		          "na",
		          "nb",
		          "nd",
		          "ne",
		          "ng",
		          "nl",
		          "nn",
		          "no",
		          "nr",
		          "nv",
		          "ny",
		          "oc",
		          "oj",
		          "om",
		          "or",
		          "os",
		          "pa",
		          "pi",
		          "pl",
		          "ps",
		          "pt",
		          "qu",
		          "rm",
		          "rn",
		          "ro",
		          "ru",
		          "rw",
		          "sa",
		          "sc",
		          "sd",
		          "se",
		          "sg",
		          "si",
		          "sk",
		          "sl",
		          "sm",
		          "sn",
		          "so",
		          "sq",
		          "sr",
		          "ss",
		          "st",
		          "su",
		          "sv",
		          "sw",
		          "ta",
		          "te",
		          "tg",
		          "th",
		          "ti",
		          "tk",
		          "tl",
		          "tn",
		          "to",
		          "tr",
		          "ts",
		          "tt",
		          "tw",
		          "ty",
		          "ug",
		          "uk",
		          "ur",
		          "uz",
		          "ve",
		          "vi",
		          "vo",
		          "wa",
		          "wo",
		          "xh",
		          "yi",
		          "yo",
		          "za",
		          "zh",
		          "zu"
		        ],

		        // From http://data.okfn.org/data/core/language-codes#resource-language-codes-full (IETF language tags)
		        locale_regions: [
		          "agq-CM",
		          "asa-TZ",
		          "ast-ES",
		          "bas-CM",
		          "bem-ZM",
		          "bez-TZ",
		          "brx-IN",
		          "cgg-UG",
		          "chr-US",
		          "dav-KE",
		          "dje-NE",
		          "dsb-DE",
		          "dua-CM",
		          "dyo-SN",
		          "ebu-KE",
		          "ewo-CM",
		          "fil-PH",
		          "fur-IT",
		          "gsw-CH",
		          "gsw-FR",
		          "gsw-LI",
		          "guz-KE",
		          "haw-US",
		          "hsb-DE",
		          "jgo-CM",
		          "jmc-TZ",
		          "kab-DZ",
		          "kam-KE",
		          "kde-TZ",
		          "kea-CV",
		          "khq-ML",
		          "kkj-CM",
		          "kln-KE",
		          "kok-IN",
		          "ksb-TZ",
		          "ksf-CM",
		          "ksh-DE",
		          "lag-TZ",
		          "lkt-US",
		          "luo-KE",
		          "luy-KE",
		          "mas-KE",
		          "mas-TZ",
		          "mer-KE",
		          "mfe-MU",
		          "mgh-MZ",
		          "mgo-CM",
		          "mua-CM",
		          "naq-NA",
		          "nmg-CM",
		          "nnh-CM",
		          "nus-SD",
		          "nyn-UG",
		          "rof-TZ",
		          "rwk-TZ",
		          "sah-RU",
		          "saq-KE",
		          "sbp-TZ",
		          "seh-MZ",
		          "ses-ML",
		          "shi-Latn",
		          "shi-Latn-MA",
		          "shi-Tfng",
		          "shi-Tfng-MA",
		          "smn-FI",
		          "teo-KE",
		          "teo-UG",
		          "twq-NE",
		          "tzm-Latn",
		          "tzm-Latn-MA",
		          "vai-Latn",
		          "vai-Latn-LR",
		          "vai-Vaii",
		          "vai-Vaii-LR",
		          "vun-TZ",
		          "wae-CH",
		          "xog-UG",
		          "yav-CM",
		          "zgh-MA",
		          "af-NA",
		          "af-ZA",
		          "ak-GH",
		          "am-ET",
		          "ar-001",
		          "ar-AE",
		          "ar-BH",
		          "ar-DJ",
		          "ar-DZ",
		          "ar-EG",
		          "ar-EH",
		          "ar-ER",
		          "ar-IL",
		          "ar-IQ",
		          "ar-JO",
		          "ar-KM",
		          "ar-KW",
		          "ar-LB",
		          "ar-LY",
		          "ar-MA",
		          "ar-MR",
		          "ar-OM",
		          "ar-PS",
		          "ar-QA",
		          "ar-SA",
		          "ar-SD",
		          "ar-SO",
		          "ar-SS",
		          "ar-SY",
		          "ar-TD",
		          "ar-TN",
		          "ar-YE",
		          "as-IN",
		          "az-Cyrl",
		          "az-Cyrl-AZ",
		          "az-Latn",
		          "az-Latn-AZ",
		          "be-BY",
		          "bg-BG",
		          "bm-Latn",
		          "bm-Latn-ML",
		          "bn-BD",
		          "bn-IN",
		          "bo-CN",
		          "bo-IN",
		          "br-FR",
		          "bs-Cyrl",
		          "bs-Cyrl-BA",
		          "bs-Latn",
		          "bs-Latn-BA",
		          "ca-AD",
		          "ca-ES",
		          "ca-ES-VALENCIA",
		          "ca-FR",
		          "ca-IT",
		          "cs-CZ",
		          "cy-GB",
		          "da-DK",
		          "da-GL",
		          "de-AT",
		          "de-BE",
		          "de-CH",
		          "de-DE",
		          "de-LI",
		          "de-LU",
		          "dz-BT",
		          "ee-GH",
		          "ee-TG",
		          "el-CY",
		          "el-GR",
		          "en-001",
		          "en-150",
		          "en-AG",
		          "en-AI",
		          "en-AS",
		          "en-AU",
		          "en-BB",
		          "en-BE",
		          "en-BM",
		          "en-BS",
		          "en-BW",
		          "en-BZ",
		          "en-CA",
		          "en-CC",
		          "en-CK",
		          "en-CM",
		          "en-CX",
		          "en-DG",
		          "en-DM",
		          "en-ER",
		          "en-FJ",
		          "en-FK",
		          "en-FM",
		          "en-GB",
		          "en-GD",
		          "en-GG",
		          "en-GH",
		          "en-GI",
		          "en-GM",
		          "en-GU",
		          "en-GY",
		          "en-HK",
		          "en-IE",
		          "en-IM",
		          "en-IN",
		          "en-IO",
		          "en-JE",
		          "en-JM",
		          "en-KE",
		          "en-KI",
		          "en-KN",
		          "en-KY",
		          "en-LC",
		          "en-LR",
		          "en-LS",
		          "en-MG",
		          "en-MH",
		          "en-MO",
		          "en-MP",
		          "en-MS",
		          "en-MT",
		          "en-MU",
		          "en-MW",
		          "en-MY",
		          "en-NA",
		          "en-NF",
		          "en-NG",
		          "en-NR",
		          "en-NU",
		          "en-NZ",
		          "en-PG",
		          "en-PH",
		          "en-PK",
		          "en-PN",
		          "en-PR",
		          "en-PW",
		          "en-RW",
		          "en-SB",
		          "en-SC",
		          "en-SD",
		          "en-SG",
		          "en-SH",
		          "en-SL",
		          "en-SS",
		          "en-SX",
		          "en-SZ",
		          "en-TC",
		          "en-TK",
		          "en-TO",
		          "en-TT",
		          "en-TV",
		          "en-TZ",
		          "en-UG",
		          "en-UM",
		          "en-US",
		          "en-US-POSIX",
		          "en-VC",
		          "en-VG",
		          "en-VI",
		          "en-VU",
		          "en-WS",
		          "en-ZA",
		          "en-ZM",
		          "en-ZW",
		          "eo-001",
		          "es-419",
		          "es-AR",
		          "es-BO",
		          "es-CL",
		          "es-CO",
		          "es-CR",
		          "es-CU",
		          "es-DO",
		          "es-EA",
		          "es-EC",
		          "es-ES",
		          "es-GQ",
		          "es-GT",
		          "es-HN",
		          "es-IC",
		          "es-MX",
		          "es-NI",
		          "es-PA",
		          "es-PE",
		          "es-PH",
		          "es-PR",
		          "es-PY",
		          "es-SV",
		          "es-US",
		          "es-UY",
		          "es-VE",
		          "et-EE",
		          "eu-ES",
		          "fa-AF",
		          "fa-IR",
		          "ff-CM",
		          "ff-GN",
		          "ff-MR",
		          "ff-SN",
		          "fi-FI",
		          "fo-FO",
		          "fr-BE",
		          "fr-BF",
		          "fr-BI",
		          "fr-BJ",
		          "fr-BL",
		          "fr-CA",
		          "fr-CD",
		          "fr-CF",
		          "fr-CG",
		          "fr-CH",
		          "fr-CI",
		          "fr-CM",
		          "fr-DJ",
		          "fr-DZ",
		          "fr-FR",
		          "fr-GA",
		          "fr-GF",
		          "fr-GN",
		          "fr-GP",
		          "fr-GQ",
		          "fr-HT",
		          "fr-KM",
		          "fr-LU",
		          "fr-MA",
		          "fr-MC",
		          "fr-MF",
		          "fr-MG",
		          "fr-ML",
		          "fr-MQ",
		          "fr-MR",
		          "fr-MU",
		          "fr-NC",
		          "fr-NE",
		          "fr-PF",
		          "fr-PM",
		          "fr-RE",
		          "fr-RW",
		          "fr-SC",
		          "fr-SN",
		          "fr-SY",
		          "fr-TD",
		          "fr-TG",
		          "fr-TN",
		          "fr-VU",
		          "fr-WF",
		          "fr-YT",
		          "fy-NL",
		          "ga-IE",
		          "gd-GB",
		          "gl-ES",
		          "gu-IN",
		          "gv-IM",
		          "ha-Latn",
		          "ha-Latn-GH",
		          "ha-Latn-NE",
		          "ha-Latn-NG",
		          "he-IL",
		          "hi-IN",
		          "hr-BA",
		          "hr-HR",
		          "hu-HU",
		          "hy-AM",
		          "id-ID",
		          "ig-NG",
		          "ii-CN",
		          "is-IS",
		          "it-CH",
		          "it-IT",
		          "it-SM",
		          "ja-JP",
		          "ka-GE",
		          "ki-KE",
		          "kk-Cyrl",
		          "kk-Cyrl-KZ",
		          "kl-GL",
		          "km-KH",
		          "kn-IN",
		          "ko-KP",
		          "ko-KR",
		          "ks-Arab",
		          "ks-Arab-IN",
		          "kw-GB",
		          "ky-Cyrl",
		          "ky-Cyrl-KG",
		          "lb-LU",
		          "lg-UG",
		          "ln-AO",
		          "ln-CD",
		          "ln-CF",
		          "ln-CG",
		          "lo-LA",
		          "lt-LT",
		          "lu-CD",
		          "lv-LV",
		          "mg-MG",
		          "mk-MK",
		          "ml-IN",
		          "mn-Cyrl",
		          "mn-Cyrl-MN",
		          "mr-IN",
		          "ms-Latn",
		          "ms-Latn-BN",
		          "ms-Latn-MY",
		          "ms-Latn-SG",
		          "mt-MT",
		          "my-MM",
		          "nb-NO",
		          "nb-SJ",
		          "nd-ZW",
		          "ne-IN",
		          "ne-NP",
		          "nl-AW",
		          "nl-BE",
		          "nl-BQ",
		          "nl-CW",
		          "nl-NL",
		          "nl-SR",
		          "nl-SX",
		          "nn-NO",
		          "om-ET",
		          "om-KE",
		          "or-IN",
		          "os-GE",
		          "os-RU",
		          "pa-Arab",
		          "pa-Arab-PK",
		          "pa-Guru",
		          "pa-Guru-IN",
		          "pl-PL",
		          "ps-AF",
		          "pt-AO",
		          "pt-BR",
		          "pt-CV",
		          "pt-GW",
		          "pt-MO",
		          "pt-MZ",
		          "pt-PT",
		          "pt-ST",
		          "pt-TL",
		          "qu-BO",
		          "qu-EC",
		          "qu-PE",
		          "rm-CH",
		          "rn-BI",
		          "ro-MD",
		          "ro-RO",
		          "ru-BY",
		          "ru-KG",
		          "ru-KZ",
		          "ru-MD",
		          "ru-RU",
		          "ru-UA",
		          "rw-RW",
		          "se-FI",
		          "se-NO",
		          "se-SE",
		          "sg-CF",
		          "si-LK",
		          "sk-SK",
		          "sl-SI",
		          "sn-ZW",
		          "so-DJ",
		          "so-ET",
		          "so-KE",
		          "so-SO",
		          "sq-AL",
		          "sq-MK",
		          "sq-XK",
		          "sr-Cyrl",
		          "sr-Cyrl-BA",
		          "sr-Cyrl-ME",
		          "sr-Cyrl-RS",
		          "sr-Cyrl-XK",
		          "sr-Latn",
		          "sr-Latn-BA",
		          "sr-Latn-ME",
		          "sr-Latn-RS",
		          "sr-Latn-XK",
		          "sv-AX",
		          "sv-FI",
		          "sv-SE",
		          "sw-CD",
		          "sw-KE",
		          "sw-TZ",
		          "sw-UG",
		          "ta-IN",
		          "ta-LK",
		          "ta-MY",
		          "ta-SG",
		          "te-IN",
		          "th-TH",
		          "ti-ER",
		          "ti-ET",
		          "to-TO",
		          "tr-CY",
		          "tr-TR",
		          "ug-Arab",
		          "ug-Arab-CN",
		          "uk-UA",
		          "ur-IN",
		          "ur-PK",
		          "uz-Arab",
		          "uz-Arab-AF",
		          "uz-Cyrl",
		          "uz-Cyrl-UZ",
		          "uz-Latn",
		          "uz-Latn-UZ",
		          "vi-VN",
		          "yi-001",
		          "yo-BJ",
		          "yo-NG",
		          "zh-Hans",
		          "zh-Hans-CN",
		          "zh-Hans-HK",
		          "zh-Hans-MO",
		          "zh-Hans-SG",
		          "zh-Hant",
		          "zh-Hant-HK",
		          "zh-Hant-MO",
		          "zh-Hant-TW",
		          "zu-ZA"
		        ],

		        us_states_and_dc: [
		            {name: 'Alabama', abbreviation: 'AL'},
		            {name: 'Alaska', abbreviation: 'AK'},
		            {name: 'Arizona', abbreviation: 'AZ'},
		            {name: 'Arkansas', abbreviation: 'AR'},
		            {name: 'California', abbreviation: 'CA'},
		            {name: 'Colorado', abbreviation: 'CO'},
		            {name: 'Connecticut', abbreviation: 'CT'},
		            {name: 'Delaware', abbreviation: 'DE'},
		            {name: 'District of Columbia', abbreviation: 'DC'},
		            {name: 'Florida', abbreviation: 'FL'},
		            {name: 'Georgia', abbreviation: 'GA'},
		            {name: 'Hawaii', abbreviation: 'HI'},
		            {name: 'Idaho', abbreviation: 'ID'},
		            {name: 'Illinois', abbreviation: 'IL'},
		            {name: 'Indiana', abbreviation: 'IN'},
		            {name: 'Iowa', abbreviation: 'IA'},
		            {name: 'Kansas', abbreviation: 'KS'},
		            {name: 'Kentucky', abbreviation: 'KY'},
		            {name: 'Louisiana', abbreviation: 'LA'},
		            {name: 'Maine', abbreviation: 'ME'},
		            {name: 'Maryland', abbreviation: 'MD'},
		            {name: 'Massachusetts', abbreviation: 'MA'},
		            {name: 'Michigan', abbreviation: 'MI'},
		            {name: 'Minnesota', abbreviation: 'MN'},
		            {name: 'Mississippi', abbreviation: 'MS'},
		            {name: 'Missouri', abbreviation: 'MO'},
		            {name: 'Montana', abbreviation: 'MT'},
		            {name: 'Nebraska', abbreviation: 'NE'},
		            {name: 'Nevada', abbreviation: 'NV'},
		            {name: 'New Hampshire', abbreviation: 'NH'},
		            {name: 'New Jersey', abbreviation: 'NJ'},
		            {name: 'New Mexico', abbreviation: 'NM'},
		            {name: 'New York', abbreviation: 'NY'},
		            {name: 'North Carolina', abbreviation: 'NC'},
		            {name: 'North Dakota', abbreviation: 'ND'},
		            {name: 'Ohio', abbreviation: 'OH'},
		            {name: 'Oklahoma', abbreviation: 'OK'},
		            {name: 'Oregon', abbreviation: 'OR'},
		            {name: 'Pennsylvania', abbreviation: 'PA'},
		            {name: 'Rhode Island', abbreviation: 'RI'},
		            {name: 'South Carolina', abbreviation: 'SC'},
		            {name: 'South Dakota', abbreviation: 'SD'},
		            {name: 'Tennessee', abbreviation: 'TN'},
		            {name: 'Texas', abbreviation: 'TX'},
		            {name: 'Utah', abbreviation: 'UT'},
		            {name: 'Vermont', abbreviation: 'VT'},
		            {name: 'Virginia', abbreviation: 'VA'},
		            {name: 'Washington', abbreviation: 'WA'},
		            {name: 'West Virginia', abbreviation: 'WV'},
		            {name: 'Wisconsin', abbreviation: 'WI'},
		            {name: 'Wyoming', abbreviation: 'WY'}
		        ],

		        territories: [
		            {name: 'American Samoa', abbreviation: 'AS'},
		            {name: 'Federated States of Micronesia', abbreviation: 'FM'},
		            {name: 'Guam', abbreviation: 'GU'},
		            {name: 'Marshall Islands', abbreviation: 'MH'},
		            {name: 'Northern Mariana Islands', abbreviation: 'MP'},
		            {name: 'Puerto Rico', abbreviation: 'PR'},
		            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}
		        ],

		        armed_forces: [
		            {name: 'Armed Forces Europe', abbreviation: 'AE'},
		            {name: 'Armed Forces Pacific', abbreviation: 'AP'},
		            {name: 'Armed Forces the Americas', abbreviation: 'AA'}
		        ],

		        country_regions: {
		            it: [
		                { name: "Valle d'Aosta", abbreviation: "VDA" },
		                { name: "Piemonte", abbreviation: "PIE" },
		                { name: "Lombardia", abbreviation: "LOM" },
		                { name: "Veneto", abbreviation: "VEN" },
		                { name: "Trentino Alto Adige", abbreviation: "TAA" },
		                { name: "Friuli Venezia Giulia", abbreviation: "FVG" },
		                { name: "Liguria", abbreviation: "LIG" },
		                { name: "Emilia Romagna", abbreviation: "EMR" },
		                { name: "Toscana", abbreviation: "TOS" },
		                { name: "Umbria", abbreviation: "UMB" },
		                { name: "Marche", abbreviation: "MAR" },
		                { name: "Abruzzo", abbreviation: "ABR" },
		                { name: "Lazio", abbreviation: "LAZ" },
		                { name: "Campania", abbreviation: "CAM" },
		                { name: "Puglia", abbreviation: "PUG" },
		                { name: "Basilicata", abbreviation: "BAS" },
		                { name: "Molise", abbreviation: "MOL" },
		                { name: "Calabria", abbreviation: "CAL" },
		                { name: "Sicilia", abbreviation: "SIC" },
		                { name: "Sardegna", abbreviation: "SAR" }
		            ],
		            mx: [
		                { name: 'Aguascalientes', abbreviation: 'AGU' },
		                { name: 'Baja California', abbreviation: 'BCN' },
		                { name: 'Baja California Sur', abbreviation: 'BCS' },
		                { name: 'Campeche', abbreviation: 'CAM' },
		                { name: 'Chiapas', abbreviation: 'CHP' },
		                { name: 'Chihuahua', abbreviation: 'CHH' },
		                { name: 'Ciudad de México', abbreviation: 'DIF' },
		                { name: 'Coahuila', abbreviation: 'COA' },
		                { name: 'Colima', abbreviation: 'COL' },
		                { name: 'Durango', abbreviation: 'DUR' },
		                { name: 'Guanajuato', abbreviation: 'GUA' },
		                { name: 'Guerrero', abbreviation: 'GRO' },
		                { name: 'Hidalgo', abbreviation: 'HID' },
		                { name: 'Jalisco', abbreviation: 'JAL' },
		                { name: 'México', abbreviation: 'MEX' },
		                { name: 'Michoacán', abbreviation: 'MIC' },
		                { name: 'Morelos', abbreviation: 'MOR' },
		                { name: 'Nayarit', abbreviation: 'NAY' },
		                { name: 'Nuevo León', abbreviation: 'NLE' },
		                { name: 'Oaxaca', abbreviation: 'OAX' },
		                { name: 'Puebla', abbreviation: 'PUE' },
		                { name: 'Querétaro', abbreviation: 'QUE' },
		                { name: 'Quintana Roo', abbreviation: 'ROO' },
		                { name: 'San Luis Potosí', abbreviation: 'SLP' },
		                { name: 'Sinaloa', abbreviation: 'SIN' },
		                { name: 'Sonora', abbreviation: 'SON' },
		                { name: 'Tabasco', abbreviation: 'TAB' },
		                { name: 'Tamaulipas', abbreviation: 'TAM' },
		                { name: 'Tlaxcala', abbreviation: 'TLA' },
		                { name: 'Veracruz', abbreviation: 'VER' },
		                { name: 'Yucatán', abbreviation: 'YUC' },
		                { name: 'Zacatecas', abbreviation: 'ZAC' }
		            ]
		        },

		        street_suffixes: {
		            'us': [
		                {name: 'Avenue', abbreviation: 'Ave'},
		                {name: 'Boulevard', abbreviation: 'Blvd'},
		                {name: 'Center', abbreviation: 'Ctr'},
		                {name: 'Circle', abbreviation: 'Cir'},
		                {name: 'Court', abbreviation: 'Ct'},
		                {name: 'Drive', abbreviation: 'Dr'},
		                {name: 'Extension', abbreviation: 'Ext'},
		                {name: 'Glen', abbreviation: 'Gln'},
		                {name: 'Grove', abbreviation: 'Grv'},
		                {name: 'Heights', abbreviation: 'Hts'},
		                {name: 'Highway', abbreviation: 'Hwy'},
		                {name: 'Junction', abbreviation: 'Jct'},
		                {name: 'Key', abbreviation: 'Key'},
		                {name: 'Lane', abbreviation: 'Ln'},
		                {name: 'Loop', abbreviation: 'Loop'},
		                {name: 'Manor', abbreviation: 'Mnr'},
		                {name: 'Mill', abbreviation: 'Mill'},
		                {name: 'Park', abbreviation: 'Park'},
		                {name: 'Parkway', abbreviation: 'Pkwy'},
		                {name: 'Pass', abbreviation: 'Pass'},
		                {name: 'Path', abbreviation: 'Path'},
		                {name: 'Pike', abbreviation: 'Pike'},
		                {name: 'Place', abbreviation: 'Pl'},
		                {name: 'Plaza', abbreviation: 'Plz'},
		                {name: 'Point', abbreviation: 'Pt'},
		                {name: 'Ridge', abbreviation: 'Rdg'},
		                {name: 'River', abbreviation: 'Riv'},
		                {name: 'Road', abbreviation: 'Rd'},
		                {name: 'Square', abbreviation: 'Sq'},
		                {name: 'Street', abbreviation: 'St'},
		                {name: 'Terrace', abbreviation: 'Ter'},
		                {name: 'Trail', abbreviation: 'Trl'},
		                {name: 'Turnpike', abbreviation: 'Tpke'},
		                {name: 'View', abbreviation: 'Vw'},
		                {name: 'Way', abbreviation: 'Way'}
		            ],
		            'it': [
		                { name: 'Accesso', abbreviation: 'Acc.' },
		                { name: 'Alzaia', abbreviation: 'Alz.' },
		                { name: 'Arco', abbreviation: 'Arco' },
		                { name: 'Archivolto', abbreviation: 'Acv.' },
		                { name: 'Arena', abbreviation: 'Arena' },
		                { name: 'Argine', abbreviation: 'Argine' },
		                { name: 'Bacino', abbreviation: 'Bacino' },
		                { name: 'Banchi', abbreviation: 'Banchi' },
		                { name: 'Banchina', abbreviation: 'Ban.' },
		                { name: 'Bastioni', abbreviation: 'Bas.' },
		                { name: 'Belvedere', abbreviation: 'Belv.' },
		                { name: 'Borgata', abbreviation: 'B.ta' },
		                { name: 'Borgo', abbreviation: 'B.go' },
		                { name: 'Calata', abbreviation: 'Cal.' },
		                { name: 'Calle', abbreviation: 'Calle' },
		                { name: 'Campiello', abbreviation: 'Cam.' },
		                { name: 'Campo', abbreviation: 'Cam.' },
		                { name: 'Canale', abbreviation: 'Can.' },
		                { name: 'Carraia', abbreviation: 'Carr.' },
		                { name: 'Cascina', abbreviation: 'Cascina' },
		                { name: 'Case sparse', abbreviation: 'c.s.' },
		                { name: 'Cavalcavia', abbreviation: 'Cv.' },
		                { name: 'Circonvallazione', abbreviation: 'Cv.' },
		                { name: 'Complanare', abbreviation: 'C.re' },
		                { name: 'Contrada', abbreviation: 'C.da' },
		                { name: 'Corso', abbreviation: 'C.so' },
		                { name: 'Corte', abbreviation: 'C.te' },
		                { name: 'Cortile', abbreviation: 'C.le' },
		                { name: 'Diramazione', abbreviation: 'Dir.' },
		                { name: 'Fondaco', abbreviation: 'F.co' },
		                { name: 'Fondamenta', abbreviation: 'F.ta' },
		                { name: 'Fondo', abbreviation: 'F.do' },
		                { name: 'Frazione', abbreviation: 'Fr.' },
		                { name: 'Isola', abbreviation: 'Is.' },
		                { name: 'Largo', abbreviation: 'L.go' },
		                { name: 'Litoranea', abbreviation: 'Lit.' },
		                { name: 'Lungolago', abbreviation: 'L.go lago' },
		                { name: 'Lungo Po', abbreviation: 'l.go Po' },
		                { name: 'Molo', abbreviation: 'Molo' },
		                { name: 'Mura', abbreviation: 'Mura' },
		                { name: 'Passaggio privato', abbreviation: 'pass. priv.' },
		                { name: 'Passeggiata', abbreviation: 'Pass.' },
		                { name: 'Piazza', abbreviation: 'P.zza' },
		                { name: 'Piazzale', abbreviation: 'P.le' },
		                { name: 'Ponte', abbreviation: 'P.te' },
		                { name: 'Portico', abbreviation: 'P.co' },
		                { name: 'Rampa', abbreviation: 'Rampa' },
		                { name: 'Regione', abbreviation: 'Reg.' },
		                { name: 'Rione', abbreviation: 'R.ne' },
		                { name: 'Rio', abbreviation: 'Rio' },
		                { name: 'Ripa', abbreviation: 'Ripa' },
		                { name: 'Riva', abbreviation: 'Riva' },
		                { name: 'Rondò', abbreviation: 'Rondò' },
		                { name: 'Rotonda', abbreviation: 'Rot.' },
		                { name: 'Sagrato', abbreviation: 'Sagr.' },
		                { name: 'Salita', abbreviation: 'Sal.' },
		                { name: 'Scalinata', abbreviation: 'Scal.' },
		                { name: 'Scalone', abbreviation: 'Scal.' },
		                { name: 'Slargo', abbreviation: 'Sl.' },
		                { name: 'Sottoportico', abbreviation: 'Sott.' },
		                { name: 'Strada', abbreviation: 'Str.' },
		                { name: 'Stradale', abbreviation: 'Str.le' },
		                { name: 'Strettoia', abbreviation: 'Strett.' },
		                { name: 'Traversa', abbreviation: 'Trav.' },
		                { name: 'Via', abbreviation: 'V.' },
		                { name: 'Viale', abbreviation: 'V.le' },
		                { name: 'Vicinale', abbreviation: 'Vic.le' },
		                { name: 'Vicolo', abbreviation: 'Vic.' }
		            ],
		            'uk' : [
		                {name: 'Avenue', abbreviation: 'Ave'},
		                {name: 'Close', abbreviation: 'Cl'},
		                {name: 'Court', abbreviation: 'Ct'},
		                {name: 'Crescent', abbreviation: 'Cr'},
		                {name: 'Drive', abbreviation: 'Dr'},
		                {name: 'Garden', abbreviation: 'Gdn'},
		                {name: 'Gardens', abbreviation: 'Gdns'},
		                {name: 'Green', abbreviation: 'Gn'},
		                {name: 'Grove', abbreviation: 'Gr'},
		                {name: 'Lane', abbreviation: 'Ln'},
		                {name: 'Mount', abbreviation: 'Mt'},
		                {name: 'Place', abbreviation: 'Pl'},
		                {name: 'Park', abbreviation: 'Pk'},
		                {name: 'Ridge', abbreviation: 'Rdg'},
		                {name: 'Road', abbreviation: 'Rd'},
		                {name: 'Square', abbreviation: 'Sq'},
		                {name: 'Street', abbreviation: 'St'},
		                {name: 'Terrace', abbreviation: 'Ter'},
		                {name: 'Valley', abbreviation: 'Val'}
		            ]
		        },

		        months: [
		            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},
		            // Not messing with leap years...
		            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},
		            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},
		            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},
		            {name: 'May', short_name: 'May', numeric: '05', days: 31},
		            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},
		            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},
		            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},
		            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},
		            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},
		            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},
		            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}
		        ],

		        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
		        cc_types: [
		            {name: "American Express", short_name: 'amex', prefix: '34', length: 15},
		            {name: "Bankcard", short_name: 'bankcard', prefix: '5610', length: 16},
		            {name: "China UnionPay", short_name: 'chinaunion', prefix: '62', length: 16},
		            {name: "Diners Club Carte Blanche", short_name: 'dccarte', prefix: '300', length: 14},
		            {name: "Diners Club enRoute", short_name: 'dcenroute', prefix: '2014', length: 15},
		            {name: "Diners Club International", short_name: 'dcintl', prefix: '36', length: 14},
		            {name: "Diners Club United States & Canada", short_name: 'dcusc', prefix: '54', length: 16},
		            {name: "Discover Card", short_name: 'discover', prefix: '6011', length: 16},
		            {name: "InstaPayment", short_name: 'instapay', prefix: '637', length: 16},
		            {name: "JCB", short_name: 'jcb', prefix: '3528', length: 16},
		            {name: "Laser", short_name: 'laser', prefix: '6304', length: 16},
		            {name: "Maestro", short_name: 'maestro', prefix: '5018', length: 16},
		            {name: "Mastercard", short_name: 'mc', prefix: '51', length: 16},
		            {name: "Solo", short_name: 'solo', prefix: '6334', length: 16},
		            {name: "Switch", short_name: 'switch', prefix: '4903', length: 16},
		            {name: "Visa", short_name: 'visa', prefix: '4', length: 16},
		            {name: "Visa Electron", short_name: 'electron', prefix: '4026', length: 16}
		        ],

		        //return all world currency by ISO 4217
		        currency_types: [
		            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},
		            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},
		            {'code' : 'ALL', 'name' : 'Albania Lek'},
		            {'code' : 'AMD', 'name' : 'Armenia Dram'},
		            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},
		            {'code' : 'AOA', 'name' : 'Angola Kwanza'},
		            {'code' : 'ARS', 'name' : 'Argentina Peso'},
		            {'code' : 'AUD', 'name' : 'Australia Dollar'},
		            {'code' : 'AWG', 'name' : 'Aruba Guilder'},
		            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},
		            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},
		            {'code' : 'BBD', 'name' : 'Barbados Dollar'},
		            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},
		            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},
		            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},
		            {'code' : 'BIF', 'name' : 'Burundi Franc'},
		            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},
		            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},
		            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},
		            {'code' : 'BRL', 'name' : 'Brazil Real'},
		            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},
		            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},
		            {'code' : 'BWP', 'name' : 'Botswana Pula'},
		            {'code' : 'BYR', 'name' : 'Belarus Ruble'},
		            {'code' : 'BZD', 'name' : 'Belize Dollar'},
		            {'code' : 'CAD', 'name' : 'Canada Dollar'},
		            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},
		            {'code' : 'CHF', 'name' : 'Switzerland Franc'},
		            {'code' : 'CLP', 'name' : 'Chile Peso'},
		            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},
		            {'code' : 'COP', 'name' : 'Colombia Peso'},
		            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},
		            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},
		            {'code' : 'CUP', 'name' : 'Cuba Peso'},
		            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},
		            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},
		            {'code' : 'DJF', 'name' : 'Djibouti Franc'},
		            {'code' : 'DKK', 'name' : 'Denmark Krone'},
		            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},
		            {'code' : 'DZD', 'name' : 'Algeria Dinar'},
		            {'code' : 'EGP', 'name' : 'Egypt Pound'},
		            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},
		            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},
		            {'code' : 'EUR', 'name' : 'Euro Member Countries'},
		            {'code' : 'FJD', 'name' : 'Fiji Dollar'},
		            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},
		            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},
		            {'code' : 'GEL', 'name' : 'Georgia Lari'},
		            {'code' : 'GGP', 'name' : 'Guernsey Pound'},
		            {'code' : 'GHS', 'name' : 'Ghana Cedi'},
		            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},
		            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},
		            {'code' : 'GNF', 'name' : 'Guinea Franc'},
		            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},
		            {'code' : 'GYD', 'name' : 'Guyana Dollar'},
		            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},
		            {'code' : 'HNL', 'name' : 'Honduras Lempira'},
		            {'code' : 'HRK', 'name' : 'Croatia Kuna'},
		            {'code' : 'HTG', 'name' : 'Haiti Gourde'},
		            {'code' : 'HUF', 'name' : 'Hungary Forint'},
		            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},
		            {'code' : 'ILS', 'name' : 'Israel Shekel'},
		            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},
		            {'code' : 'INR', 'name' : 'India Rupee'},
		            {'code' : 'IQD', 'name' : 'Iraq Dinar'},
		            {'code' : 'IRR', 'name' : 'Iran Rial'},
		            {'code' : 'ISK', 'name' : 'Iceland Krona'},
		            {'code' : 'JEP', 'name' : 'Jersey Pound'},
		            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},
		            {'code' : 'JOD', 'name' : 'Jordan Dinar'},
		            {'code' : 'JPY', 'name' : 'Japan Yen'},
		            {'code' : 'KES', 'name' : 'Kenya Shilling'},
		            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},
		            {'code' : 'KHR', 'name' : 'Cambodia Riel'},
		            {'code' : 'KMF', 'name' : 'Comoros Franc'},
		            {'code' : 'KPW', 'name' : 'Korea (North) Won'},
		            {'code' : 'KRW', 'name' : 'Korea (South) Won'},
		            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},
		            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},
		            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},
		            {'code' : 'LAK', 'name' : 'Laos Kip'},
		            {'code' : 'LBP', 'name' : 'Lebanon Pound'},
		            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},
		            {'code' : 'LRD', 'name' : 'Liberia Dollar'},
		            {'code' : 'LSL', 'name' : 'Lesotho Loti'},
		            {'code' : 'LTL', 'name' : 'Lithuania Litas'},
		            {'code' : 'LYD', 'name' : 'Libya Dinar'},
		            {'code' : 'MAD', 'name' : 'Morocco Dirham'},
		            {'code' : 'MDL', 'name' : 'Moldova Leu'},
		            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},
		            {'code' : 'MKD', 'name' : 'Macedonia Denar'},
		            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},
		            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},
		            {'code' : 'MOP', 'name' : 'Macau Pataca'},
		            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},
		            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},
		            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},
		            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},
		            {'code' : 'MXN', 'name' : 'Mexico Peso'},
		            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},
		            {'code' : 'MZN', 'name' : 'Mozambique Metical'},
		            {'code' : 'NAD', 'name' : 'Namibia Dollar'},
		            {'code' : 'NGN', 'name' : 'Nigeria Naira'},
		            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},
		            {'code' : 'NOK', 'name' : 'Norway Krone'},
		            {'code' : 'NPR', 'name' : 'Nepal Rupee'},
		            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},
		            {'code' : 'OMR', 'name' : 'Oman Rial'},
		            {'code' : 'PAB', 'name' : 'Panama Balboa'},
		            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},
		            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},
		            {'code' : 'PHP', 'name' : 'Philippines Peso'},
		            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},
		            {'code' : 'PLN', 'name' : 'Poland Zloty'},
		            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},
		            {'code' : 'QAR', 'name' : 'Qatar Riyal'},
		            {'code' : 'RON', 'name' : 'Romania New Leu'},
		            {'code' : 'RSD', 'name' : 'Serbia Dinar'},
		            {'code' : 'RUB', 'name' : 'Russia Ruble'},
		            {'code' : 'RWF', 'name' : 'Rwanda Franc'},
		            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},
		            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},
		            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},
		            {'code' : 'SDG', 'name' : 'Sudan Pound'},
		            {'code' : 'SEK', 'name' : 'Sweden Krona'},
		            {'code' : 'SGD', 'name' : 'Singapore Dollar'},
		            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},
		            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},
		            {'code' : 'SOS', 'name' : 'Somalia Shilling'},
		            {'code' : 'SPL', 'name' : 'Seborga Luigino'},
		            {'code' : 'SRD', 'name' : 'Suriname Dollar'},
		            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},
		            {'code' : 'SVC', 'name' : 'El Salvador Colon'},
		            {'code' : 'SYP', 'name' : 'Syria Pound'},
		            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},
		            {'code' : 'THB', 'name' : 'Thailand Baht'},
		            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},
		            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},
		            {'code' : 'TND', 'name' : 'Tunisia Dinar'},
		            {'code' : 'TOP', 'name' : 'Tonga Pa\'anga'},
		            {'code' : 'TRY', 'name' : 'Turkey Lira'},
		            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},
		            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},
		            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},
		            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},
		            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},
		            {'code' : 'UGX', 'name' : 'Uganda Shilling'},
		            {'code' : 'USD', 'name' : 'United States Dollar'},
		            {'code' : 'UYU', 'name' : 'Uruguay Peso'},
		            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},
		            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},
		            {'code' : 'VND', 'name' : 'Viet Nam Dong'},
		            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},
		            {'code' : 'WST', 'name' : 'Samoa Tala'},
		            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},
		            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},
		            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},
		            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},
		            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},
		            {'code' : 'YER', 'name' : 'Yemen Rial'},
		            {'code' : 'ZAR', 'name' : 'South Africa Rand'},
		            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},
		            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}
		        ],

		        // return the names of all valide colors
		        colorNames : [  "AliceBlue", "Black", "Navy", "DarkBlue", "MediumBlue", "Blue", "DarkGreen", "Green", "Teal", "DarkCyan", "DeepSkyBlue", "DarkTurquoise", "MediumSpringGreen", "Lime", "SpringGreen",
		            "Aqua", "Cyan", "MidnightBlue", "DodgerBlue", "LightSeaGreen", "ForestGreen", "SeaGreen", "DarkSlateGray", "LimeGreen", "MediumSeaGreen", "Turquoise", "RoyalBlue", "SteelBlue", "DarkSlateBlue", "MediumTurquoise",
		            "Indigo", "DarkOliveGreen", "CadetBlue", "CornflowerBlue", "RebeccaPurple", "MediumAquaMarine", "DimGray", "SlateBlue", "OliveDrab", "SlateGray", "LightSlateGray", "MediumSlateBlue", "LawnGreen", "Chartreuse",
		            "Aquamarine", "Maroon", "Purple", "Olive", "Gray", "SkyBlue", "LightSkyBlue", "BlueViolet", "DarkRed", "DarkMagenta", "SaddleBrown", "Ivory", "White",
		            "DarkSeaGreen", "LightGreen", "MediumPurple", "DarkViolet", "PaleGreen", "DarkOrchid", "YellowGreen", "Sienna", "Brown", "DarkGray", "LightBlue", "GreenYellow", "PaleTurquoise", "LightSteelBlue", "PowderBlue",
		            "FireBrick", "DarkGoldenRod", "MediumOrchid", "RosyBrown", "DarkKhaki", "Silver", "MediumVioletRed", "IndianRed", "Peru", "Chocolate", "Tan", "LightGray", "Thistle", "Orchid", "GoldenRod", "PaleVioletRed",
		            "Crimson", "Gainsboro", "Plum", "BurlyWood", "LightCyan", "Lavender", "DarkSalmon", "Violet", "PaleGoldenRod", "LightCoral", "Khaki", "AliceBlue", "HoneyDew", "Azure", "SandyBrown", "Wheat", "Beige", "WhiteSmoke",
		            "MintCream", "GhostWhite", "Salmon", "AntiqueWhite", "Linen", "LightGoldenRodYellow", "OldLace", "Red", "Fuchsia", "Magenta", "DeepPink", "OrangeRed", "Tomato", "HotPink", "Coral", "DarkOrange", "LightSalmon", "Orange",
		            "LightPink", "Pink", "Gold", "PeachPuff", "NavajoWhite", "Moccasin", "Bisque", "MistyRose", "BlanchedAlmond", "PapayaWhip", "LavenderBlush", "SeaShell", "Cornsilk", "LemonChiffon", "FloralWhite", "Snow", "Yellow", "LightYellow"
		        ],

		        // Data taken from https://www.sec.gov/rules/other/4-460list.htm
		        company: [ "3Com Corp",
		        "3M Company",
		        "A.G. Edwards Inc.",
		        "Abbott Laboratories",
		        "Abercrombie & Fitch Co.",
		        "ABM Industries Incorporated",
		        "Ace Hardware Corporation",
		        "ACT Manufacturing Inc.",
		        "Acterna Corp.",
		        "Adams Resources & Energy, Inc.",
		        "ADC Telecommunications, Inc.",
		        "Adelphia Communications Corporation",
		        "Administaff, Inc.",
		        "Adobe Systems Incorporated",
		        "Adolph Coors Company",
		        "Advance Auto Parts, Inc.",
		        "Advanced Micro Devices, Inc.",
		        "AdvancePCS, Inc.",
		        "Advantica Restaurant Group, Inc.",
		        "The AES Corporation",
		        "Aetna Inc.",
		        "Affiliated Computer Services, Inc.",
		        "AFLAC Incorporated",
		        "AGCO Corporation",
		        "Agilent Technologies, Inc.",
		        "Agway Inc.",
		        "Apartment Investment and Management Company",
		        "Air Products and Chemicals, Inc.",
		        "Airborne, Inc.",
		        "Airgas, Inc.",
		        "AK Steel Holding Corporation",
		        "Alaska Air Group, Inc.",
		        "Alberto-Culver Company",
		        "Albertson's, Inc.",
		        "Alcoa Inc.",
		        "Alleghany Corporation",
		        "Allegheny Energy, Inc.",
		        "Allegheny Technologies Incorporated",
		        "Allergan, Inc.",
		        "ALLETE, Inc.",
		        "Alliant Energy Corporation",
		        "Allied Waste Industries, Inc.",
		        "Allmerica Financial Corporation",
		        "The Allstate Corporation",
		        "ALLTEL Corporation",
		        "The Alpine Group, Inc.",
		        "Amazon.com, Inc.",
		        "AMC Entertainment Inc.",
		        "American Power Conversion Corporation",
		        "Amerada Hess Corporation",
		        "AMERCO",
		        "Ameren Corporation",
		        "America West Holdings Corporation",
		        "American Axle & Manufacturing Holdings, Inc.",
		        "American Eagle Outfitters, Inc.",
		        "American Electric Power Company, Inc.",
		        "American Express Company",
		        "American Financial Group, Inc.",
		        "American Greetings Corporation",
		        "American International Group, Inc.",
		        "American Standard Companies Inc.",
		        "American Water Works Company, Inc.",
		        "AmerisourceBergen Corporation",
		        "Ames Department Stores, Inc.",
		        "Amgen Inc.",
		        "Amkor Technology, Inc.",
		        "AMR Corporation",
		        "AmSouth Bancorp.",
		        "Amtran, Inc.",
		        "Anadarko Petroleum Corporation",
		        "Analog Devices, Inc.",
		        "Anheuser-Busch Companies, Inc.",
		        "Anixter International Inc.",
		        "AnnTaylor Inc.",
		        "Anthem, Inc.",
		        "AOL Time Warner Inc.",
		        "Aon Corporation",
		        "Apache Corporation",
		        "Apple Computer, Inc.",
		        "Applera Corporation",
		        "Applied Industrial Technologies, Inc.",
		        "Applied Materials, Inc.",
		        "Aquila, Inc.",
		        "ARAMARK Corporation",
		        "Arch Coal, Inc.",
		        "Archer Daniels Midland Company",
		        "Arkansas Best Corporation",
		        "Armstrong Holdings, Inc.",
		        "Arrow Electronics, Inc.",
		        "ArvinMeritor, Inc.",
		        "Ashland Inc.",
		        "Astoria Financial Corporation",
		        "AT&T Corp.",
		        "Atmel Corporation",
		        "Atmos Energy Corporation",
		        "Audiovox Corporation",
		        "Autoliv, Inc.",
		        "Automatic Data Processing, Inc.",
		        "AutoNation, Inc.",
		        "AutoZone, Inc.",
		        "Avaya Inc.",
		        "Avery Dennison Corporation",
		        "Avista Corporation",
		        "Avnet, Inc.",
		        "Avon Products, Inc.",
		        "Baker Hughes Incorporated",
		        "Ball Corporation",
		        "Bank of America Corporation",
		        "The Bank of New York Company, Inc.",
		        "Bank One Corporation",
		        "Banknorth Group, Inc.",
		        "Banta Corporation",
		        "Barnes & Noble, Inc.",
		        "Bausch & Lomb Incorporated",
		        "Baxter International Inc.",
		        "BB&T Corporation",
		        "The Bear Stearns Companies Inc.",
		        "Beazer Homes USA, Inc.",
		        "Beckman Coulter, Inc.",
		        "Becton, Dickinson and Company",
		        "Bed Bath & Beyond Inc.",
		        "Belk, Inc.",
		        "Bell Microproducts Inc.",
		        "BellSouth Corporation",
		        "Belo Corp.",
		        "Bemis Company, Inc.",
		        "Benchmark Electronics, Inc.",
		        "Berkshire Hathaway Inc.",
		        "Best Buy Co., Inc.",
		        "Bethlehem Steel Corporation",
		        "Beverly Enterprises, Inc.",
		        "Big Lots, Inc.",
		        "BJ Services Company",
		        "BJ's Wholesale Club, Inc.",
		        "The Black & Decker Corporation",
		        "Black Hills Corporation",
		        "BMC Software, Inc.",
		        "The Boeing Company",
		        "Boise Cascade Corporation",
		        "Borders Group, Inc.",
		        "BorgWarner Inc.",
		        "Boston Scientific Corporation",
		        "Bowater Incorporated",
		        "Briggs & Stratton Corporation",
		        "Brightpoint, Inc.",
		        "Brinker International, Inc.",
		        "Bristol-Myers Squibb Company",
		        "Broadwing, Inc.",
		        "Brown Shoe Company, Inc.",
		        "Brown-Forman Corporation",
		        "Brunswick Corporation",
		        "Budget Group, Inc.",
		        "Burlington Coat Factory Warehouse Corporation",
		        "Burlington Industries, Inc.",
		        "Burlington Northern Santa Fe Corporation",
		        "Burlington Resources Inc.",
		        "C. H. Robinson Worldwide Inc.",
		        "Cablevision Systems Corp",
		        "Cabot Corp",
		        "Cadence Design Systems, Inc.",
		        "Calpine Corp.",
		        "Campbell Soup Co.",
		        "Capital One Financial Corp.",
		        "Cardinal Health Inc.",
		        "Caremark Rx Inc.",
		        "Carlisle Cos. Inc.",
		        "Carpenter Technology Corp.",
		        "Casey's General Stores Inc.",
		        "Caterpillar Inc.",
		        "CBRL Group Inc.",
		        "CDI Corp.",
		        "CDW Computer Centers Inc.",
		        "CellStar Corp.",
		        "Cendant Corp",
		        "Cenex Harvest States Cooperatives",
		        "Centex Corp.",
		        "CenturyTel Inc.",
		        "Ceridian Corp.",
		        "CH2M Hill Cos. Ltd.",
		        "Champion Enterprises Inc.",
		        "Charles Schwab Corp.",
		        "Charming Shoppes Inc.",
		        "Charter Communications Inc.",
		        "Charter One Financial Inc.",
		        "ChevronTexaco Corp.",
		        "Chiquita Brands International Inc.",
		        "Chubb Corp",
		        "Ciena Corp.",
		        "Cigna Corp",
		        "Cincinnati Financial Corp.",
		        "Cinergy Corp.",
		        "Cintas Corp.",
		        "Circuit City Stores Inc.",
		        "Cisco Systems Inc.",
		        "Citigroup, Inc",
		        "Citizens Communications Co.",
		        "CKE Restaurants Inc.",
		        "Clear Channel Communications Inc.",
		        "The Clorox Co.",
		        "CMGI Inc.",
		        "CMS Energy Corp.",
		        "CNF Inc.",
		        "Coca-Cola Co.",
		        "Coca-Cola Enterprises Inc.",
		        "Colgate-Palmolive Co.",
		        "Collins & Aikman Corp.",
		        "Comcast Corp.",
		        "Comdisco Inc.",
		        "Comerica Inc.",
		        "Comfort Systems USA Inc.",
		        "Commercial Metals Co.",
		        "Community Health Systems Inc.",
		        "Compass Bancshares Inc",
		        "Computer Associates International Inc.",
		        "Computer Sciences Corp.",
		        "Compuware Corp.",
		        "Comverse Technology Inc.",
		        "ConAgra Foods Inc.",
		        "Concord EFS Inc.",
		        "Conectiv, Inc",
		        "Conoco Inc",
		        "Conseco Inc.",
		        "Consolidated Freightways Corp.",
		        "Consolidated Edison Inc.",
		        "Constellation Brands Inc.",
		        "Constellation Emergy Group Inc.",
		        "Continental Airlines Inc.",
		        "Convergys Corp.",
		        "Cooper Cameron Corp.",
		        "Cooper Industries Ltd.",
		        "Cooper Tire & Rubber Co.",
		        "Corn Products International Inc.",
		        "Corning Inc.",
		        "Costco Wholesale Corp.",
		        "Countrywide Credit Industries Inc.",
		        "Coventry Health Care Inc.",
		        "Cox Communications Inc.",
		        "Crane Co.",
		        "Crompton Corp.",
		        "Crown Cork & Seal Co. Inc.",
		        "CSK Auto Corp.",
		        "CSX Corp.",
		        "Cummins Inc.",
		        "CVS Corp.",
		        "Cytec Industries Inc.",
		        "D&K Healthcare Resources, Inc.",
		        "D.R. Horton Inc.",
		        "Dana Corporation",
		        "Danaher Corporation",
		        "Darden Restaurants Inc.",
		        "DaVita Inc.",
		        "Dean Foods Company",
		        "Deere & Company",
		        "Del Monte Foods Co",
		        "Dell Computer Corporation",
		        "Delphi Corp.",
		        "Delta Air Lines Inc.",
		        "Deluxe Corporation",
		        "Devon Energy Corporation",
		        "Di Giorgio Corporation",
		        "Dial Corporation",
		        "Diebold Incorporated",
		        "Dillard's Inc.",
		        "DIMON Incorporated",
		        "Dole Food Company, Inc.",
		        "Dollar General Corporation",
		        "Dollar Tree Stores, Inc.",
		        "Dominion Resources, Inc.",
		        "Domino's Pizza LLC",
		        "Dover Corporation, Inc.",
		        "Dow Chemical Company",
		        "Dow Jones & Company, Inc.",
		        "DPL Inc.",
		        "DQE Inc.",
		        "Dreyer's Grand Ice Cream, Inc.",
		        "DST Systems, Inc.",
		        "DTE Energy Co.",
		        "E.I. Du Pont de Nemours and Company",
		        "Duke Energy Corp",
		        "Dun & Bradstreet Inc.",
		        "DURA Automotive Systems Inc.",
		        "DynCorp",
		        "Dynegy Inc.",
		        "E*Trade Group, Inc.",
		        "E.W. Scripps Company",
		        "Earthlink, Inc.",
		        "Eastman Chemical Company",
		        "Eastman Kodak Company",
		        "Eaton Corporation",
		        "Echostar Communications Corporation",
		        "Ecolab Inc.",
		        "Edison International",
		        "EGL Inc.",
		        "El Paso Corporation",
		        "Electronic Arts Inc.",
		        "Electronic Data Systems Corp.",
		        "Eli Lilly and Company",
		        "EMC Corporation",
		        "Emcor Group Inc.",
		        "Emerson Electric Co.",
		        "Encompass Services Corporation",
		        "Energizer Holdings Inc.",
		        "Energy East Corporation",
		        "Engelhard Corporation",
		        "Enron Corp.",
		        "Entergy Corporation",
		        "Enterprise Products Partners L.P.",
		        "EOG Resources, Inc.",
		        "Equifax Inc.",
		        "Equitable Resources Inc.",
		        "Equity Office Properties Trust",
		        "Equity Residential Properties Trust",
		        "Estee Lauder Companies Inc.",
		        "Exelon Corporation",
		        "Exide Technologies",
		        "Expeditors International of Washington Inc.",
		        "Express Scripts Inc.",
		        "ExxonMobil Corporation",
		        "Fairchild Semiconductor International Inc.",
		        "Family Dollar Stores Inc.",
		        "Farmland Industries Inc.",
		        "Federal Mogul Corp.",
		        "Federated Department Stores Inc.",
		        "Federal Express Corp.",
		        "Felcor Lodging Trust Inc.",
		        "Ferro Corp.",
		        "Fidelity National Financial Inc.",
		        "Fifth Third Bancorp",
		        "First American Financial Corp.",
		        "First Data Corp.",
		        "First National of Nebraska Inc.",
		        "First Tennessee National Corp.",
		        "FirstEnergy Corp.",
		        "Fiserv Inc.",
		        "Fisher Scientific International Inc.",
		        "FleetBoston Financial Co.",
		        "Fleetwood Enterprises Inc.",
		        "Fleming Companies Inc.",
		        "Flowers Foods Inc.",
		        "Flowserv Corp",
		        "Fluor Corp",
		        "FMC Corp",
		        "Foamex International Inc",
		        "Foot Locker Inc",
		        "Footstar Inc.",
		        "Ford Motor Co",
		        "Forest Laboratories Inc.",
		        "Fortune Brands Inc.",
		        "Foster Wheeler Ltd.",
		        "FPL Group Inc.",
		        "Franklin Resources Inc.",
		        "Freeport McMoran Copper & Gold Inc.",
		        "Frontier Oil Corp",
		        "Furniture Brands International Inc.",
		        "Gannett Co., Inc.",
		        "Gap Inc.",
		        "Gateway Inc.",
		        "GATX Corporation",
		        "Gemstar-TV Guide International Inc.",
		        "GenCorp Inc.",
		        "General Cable Corporation",
		        "General Dynamics Corporation",
		        "General Electric Company",
		        "General Mills Inc",
		        "General Motors Corporation",
		        "Genesis Health Ventures Inc.",
		        "Gentek Inc.",
		        "Gentiva Health Services Inc.",
		        "Genuine Parts Company",
		        "Genuity Inc.",
		        "Genzyme Corporation",
		        "Georgia Gulf Corporation",
		        "Georgia-Pacific Corporation",
		        "Gillette Company",
		        "Gold Kist Inc.",
		        "Golden State Bancorp Inc.",
		        "Golden West Financial Corporation",
		        "Goldman Sachs Group Inc.",
		        "Goodrich Corporation",
		        "The Goodyear Tire & Rubber Company",
		        "Granite Construction Incorporated",
		        "Graybar Electric Company Inc.",
		        "Great Lakes Chemical Corporation",
		        "Great Plains Energy Inc.",
		        "GreenPoint Financial Corp.",
		        "Greif Bros. Corporation",
		        "Grey Global Group Inc.",
		        "Group 1 Automotive Inc.",
		        "Guidant Corporation",
		        "H&R Block Inc.",
		        "H.B. Fuller Company",
		        "H.J. Heinz Company",
		        "Halliburton Co.",
		        "Harley-Davidson Inc.",
		        "Harman International Industries Inc.",
		        "Harrah's Entertainment Inc.",
		        "Harris Corp.",
		        "Harsco Corp.",
		        "Hartford Financial Services Group Inc.",
		        "Hasbro Inc.",
		        "Hawaiian Electric Industries Inc.",
		        "HCA Inc.",
		        "Health Management Associates Inc.",
		        "Health Net Inc.",
		        "Healthsouth Corp",
		        "Henry Schein Inc.",
		        "Hercules Inc.",
		        "Herman Miller Inc.",
		        "Hershey Foods Corp.",
		        "Hewlett-Packard Company",
		        "Hibernia Corp.",
		        "Hillenbrand Industries Inc.",
		        "Hilton Hotels Corp.",
		        "Hollywood Entertainment Corp.",
		        "Home Depot Inc.",
		        "Hon Industries Inc.",
		        "Honeywell International Inc.",
		        "Hormel Foods Corp.",
		        "Host Marriott Corp.",
		        "Household International Corp.",
		        "Hovnanian Enterprises Inc.",
		        "Hub Group Inc.",
		        "Hubbell Inc.",
		        "Hughes Supply Inc.",
		        "Humana Inc.",
		        "Huntington Bancshares Inc.",
		        "Idacorp Inc.",
		        "IDT Corporation",
		        "IKON Office Solutions Inc.",
		        "Illinois Tool Works Inc.",
		        "IMC Global Inc.",
		        "Imperial Sugar Company",
		        "IMS Health Inc.",
		        "Ingles Market Inc",
		        "Ingram Micro Inc.",
		        "Insight Enterprises Inc.",
		        "Integrated Electrical Services Inc.",
		        "Intel Corporation",
		        "International Paper Co.",
		        "Interpublic Group of Companies Inc.",
		        "Interstate Bakeries Corporation",
		        "International Business Machines Corp.",
		        "International Flavors & Fragrances Inc.",
		        "International Multifoods Corporation",
		        "Intuit Inc.",
		        "IT Group Inc.",
		        "ITT Industries Inc.",
		        "Ivax Corp.",
		        "J.B. Hunt Transport Services Inc.",
		        "J.C. Penny Co.",
		        "J.P. Morgan Chase & Co.",
		        "Jabil Circuit Inc.",
		        "Jack In The Box Inc.",
		        "Jacobs Engineering Group Inc.",
		        "JDS Uniphase Corp.",
		        "Jefferson-Pilot Co.",
		        "John Hancock Financial Services Inc.",
		        "Johnson & Johnson",
		        "Johnson Controls Inc.",
		        "Jones Apparel Group Inc.",
		        "KB Home",
		        "Kellogg Company",
		        "Kellwood Company",
		        "Kelly Services Inc.",
		        "Kemet Corp.",
		        "Kennametal Inc.",
		        "Kerr-McGee Corporation",
		        "KeyCorp",
		        "KeySpan Corp.",
		        "Kimball International Inc.",
		        "Kimberly-Clark Corporation",
		        "Kindred Healthcare Inc.",
		        "KLA-Tencor Corporation",
		        "K-Mart Corp.",
		        "Knight-Ridder Inc.",
		        "Kohl's Corp.",
		        "KPMG Consulting Inc.",
		        "Kroger Co.",
		        "L-3 Communications Holdings Inc.",
		        "Laboratory Corporation of America Holdings",
		        "Lam Research Corporation",
		        "LandAmerica Financial Group Inc.",
		        "Lands' End Inc.",
		        "Landstar System Inc.",
		        "La-Z-Boy Inc.",
		        "Lear Corporation",
		        "Legg Mason Inc.",
		        "Leggett & Platt Inc.",
		        "Lehman Brothers Holdings Inc.",
		        "Lennar Corporation",
		        "Lennox International Inc.",
		        "Level 3 Communications Inc.",
		        "Levi Strauss & Co.",
		        "Lexmark International Inc.",
		        "Limited Inc.",
		        "Lincoln National Corporation",
		        "Linens 'n Things Inc.",
		        "Lithia Motors Inc.",
		        "Liz Claiborne Inc.",
		        "Lockheed Martin Corporation",
		        "Loews Corporation",
		        "Longs Drug Stores Corporation",
		        "Louisiana-Pacific Corporation",
		        "Lowe's Companies Inc.",
		        "LSI Logic Corporation",
		        "The LTV Corporation",
		        "The Lubrizol Corporation",
		        "Lucent Technologies Inc.",
		        "Lyondell Chemical Company",
		        "M & T Bank Corporation",
		        "Magellan Health Services Inc.",
		        "Mail-Well Inc.",
		        "Mandalay Resort Group",
		        "Manor Care Inc.",
		        "Manpower Inc.",
		        "Marathon Oil Corporation",
		        "Mariner Health Care Inc.",
		        "Markel Corporation",
		        "Marriott International Inc.",
		        "Marsh & McLennan Companies Inc.",
		        "Marsh Supermarkets Inc.",
		        "Marshall & Ilsley Corporation",
		        "Martin Marietta Materials Inc.",
		        "Masco Corporation",
		        "Massey Energy Company",
		        "MasTec Inc.",
		        "Mattel Inc.",
		        "Maxim Integrated Products Inc.",
		        "Maxtor Corporation",
		        "Maxxam Inc.",
		        "The May Department Stores Company",
		        "Maytag Corporation",
		        "MBNA Corporation",
		        "McCormick & Company Incorporated",
		        "McDonald's Corporation",
		        "The McGraw-Hill Companies Inc.",
		        "McKesson Corporation",
		        "McLeodUSA Incorporated",
		        "M.D.C. Holdings Inc.",
		        "MDU Resources Group Inc.",
		        "MeadWestvaco Corporation",
		        "Medtronic Inc.",
		        "Mellon Financial Corporation",
		        "The Men's Wearhouse Inc.",
		        "Merck & Co., Inc.",
		        "Mercury General Corporation",
		        "Merrill Lynch & Co. Inc.",
		        "Metaldyne Corporation",
		        "Metals USA Inc.",
		        "MetLife Inc.",
		        "Metris Companies Inc",
		        "MGIC Investment Corporation",
		        "MGM Mirage",
		        "Michaels Stores Inc.",
		        "Micron Technology Inc.",
		        "Microsoft Corporation",
		        "Milacron Inc.",
		        "Millennium Chemicals Inc.",
		        "Mirant Corporation",
		        "Mohawk Industries Inc.",
		        "Molex Incorporated",
		        "The MONY Group Inc.",
		        "Morgan Stanley Dean Witter & Co.",
		        "Motorola Inc.",
		        "MPS Group Inc.",
		        "Murphy Oil Corporation",
		        "Nabors Industries Inc",
		        "Nacco Industries Inc",
		        "Nash Finch Company",
		        "National City Corp.",
		        "National Commerce Financial Corporation",
		        "National Fuel Gas Company",
		        "National Oilwell Inc",
		        "National Rural Utilities Cooperative Finance Corporation",
		        "National Semiconductor Corporation",
		        "National Service Industries Inc",
		        "Navistar International Corporation",
		        "NCR Corporation",
		        "The Neiman Marcus Group Inc.",
		        "New Jersey Resources Corporation",
		        "New York Times Company",
		        "Newell Rubbermaid Inc",
		        "Newmont Mining Corporation",
		        "Nextel Communications Inc",
		        "Nicor Inc",
		        "Nike Inc",
		        "NiSource Inc",
		        "Noble Energy Inc",
		        "Nordstrom Inc",
		        "Norfolk Southern Corporation",
		        "Nortek Inc",
		        "North Fork Bancorporation Inc",
		        "Northeast Utilities System",
		        "Northern Trust Corporation",
		        "Northrop Grumman Corporation",
		        "NorthWestern Corporation",
		        "Novellus Systems Inc",
		        "NSTAR",
		        "NTL Incorporated",
		        "Nucor Corp",
		        "Nvidia Corp",
		        "NVR Inc",
		        "Northwest Airlines Corp",
		        "Occidental Petroleum Corp",
		        "Ocean Energy Inc",
		        "Office Depot Inc.",
		        "OfficeMax Inc",
		        "OGE Energy Corp",
		        "Oglethorpe Power Corp.",
		        "Ohio Casualty Corp.",
		        "Old Republic International Corp.",
		        "Olin Corp.",
		        "OM Group Inc",
		        "Omnicare Inc",
		        "Omnicom Group",
		        "On Semiconductor Corp",
		        "ONEOK Inc",
		        "Oracle Corp",
		        "Oshkosh Truck Corp",
		        "Outback Steakhouse Inc.",
		        "Owens & Minor Inc.",
		        "Owens Corning",
		        "Owens-Illinois Inc",
		        "Oxford Health Plans Inc",
		        "Paccar Inc",
		        "PacifiCare Health Systems Inc",
		        "Packaging Corp. of America",
		        "Pactiv Corp",
		        "Pall Corp",
		        "Pantry Inc",
		        "Park Place Entertainment Corp",
		        "Parker Hannifin Corp.",
		        "Pathmark Stores Inc.",
		        "Paychex Inc",
		        "Payless Shoesource Inc",
		        "Penn Traffic Co.",
		        "Pennzoil-Quaker State Company",
		        "Pentair Inc",
		        "Peoples Energy Corp.",
		        "PeopleSoft Inc",
		        "Pep Boys Manny, Moe & Jack",
		        "Potomac Electric Power Co.",
		        "Pepsi Bottling Group Inc.",
		        "PepsiAmericas Inc.",
		        "PepsiCo Inc.",
		        "Performance Food Group Co.",
		        "Perini Corp",
		        "PerkinElmer Inc",
		        "Perot Systems Corp",
		        "Petco Animal Supplies Inc.",
		        "Peter Kiewit Sons', Inc.",
		        "PETsMART Inc",
		        "Pfizer Inc",
		        "Pacific Gas & Electric Corp.",
		        "Pharmacia Corp",
		        "Phar Mor Inc.",
		        "Phelps Dodge Corp.",
		        "Philip Morris Companies Inc.",
		        "Phillips Petroleum Co",
		        "Phillips Van Heusen Corp.",
		        "Phoenix Companies Inc",
		        "Pier 1 Imports Inc.",
		        "Pilgrim's Pride Corporation",
		        "Pinnacle West Capital Corp",
		        "Pioneer-Standard Electronics Inc.",
		        "Pitney Bowes Inc.",
		        "Pittston Brinks Group",
		        "Plains All American Pipeline LP",
		        "PNC Financial Services Group Inc.",
		        "PNM Resources Inc",
		        "Polaris Industries Inc.",
		        "Polo Ralph Lauren Corp",
		        "PolyOne Corp",
		        "Popular Inc",
		        "Potlatch Corp",
		        "PPG Industries Inc",
		        "PPL Corp",
		        "Praxair Inc",
		        "Precision Castparts Corp",
		        "Premcor Inc.",
		        "Pride International Inc",
		        "Primedia Inc",
		        "Principal Financial Group Inc.",
		        "Procter & Gamble Co.",
		        "Pro-Fac Cooperative Inc.",
		        "Progress Energy Inc",
		        "Progressive Corporation",
		        "Protective Life Corp",
		        "Provident Financial Group",
		        "Providian Financial Corp.",
		        "Prudential Financial Inc.",
		        "PSS World Medical Inc",
		        "Public Service Enterprise Group Inc.",
		        "Publix Super Markets Inc.",
		        "Puget Energy Inc.",
		        "Pulte Homes Inc",
		        "Qualcomm Inc",
		        "Quanta Services Inc.",
		        "Quantum Corp",
		        "Quest Diagnostics Inc.",
		        "Questar Corp",
		        "Quintiles Transnational",
		        "Qwest Communications Intl Inc",
		        "R.J. Reynolds Tobacco Company",
		        "R.R. Donnelley & Sons Company",
		        "Radio Shack Corporation",
		        "Raymond James Financial Inc.",
		        "Raytheon Company",
		        "Reader's Digest Association Inc.",
		        "Reebok International Ltd.",
		        "Regions Financial Corp.",
		        "Regis Corporation",
		        "Reliance Steel & Aluminum Co.",
		        "Reliant Energy Inc.",
		        "Rent A Center Inc",
		        "Republic Services Inc",
		        "Revlon Inc",
		        "RGS Energy Group Inc",
		        "Rite Aid Corp",
		        "Riverwood Holding Inc.",
		        "RoadwayCorp",
		        "Robert Half International Inc.",
		        "Rock-Tenn Co",
		        "Rockwell Automation Inc",
		        "Rockwell Collins Inc",
		        "Rohm & Haas Co.",
		        "Ross Stores Inc",
		        "RPM Inc.",
		        "Ruddick Corp",
		        "Ryder System Inc",
		        "Ryerson Tull Inc",
		        "Ryland Group Inc.",
		        "Sabre Holdings Corp",
		        "Safeco Corp",
		        "Safeguard Scientifics Inc.",
		        "Safeway Inc",
		        "Saks Inc",
		        "Sanmina-SCI Inc",
		        "Sara Lee Corp",
		        "SBC Communications Inc",
		        "Scana Corp.",
		        "Schering-Plough Corp",
		        "Scholastic Corp",
		        "SCI Systems Onc.",
		        "Science Applications Intl. Inc.",
		        "Scientific-Atlanta Inc",
		        "Scotts Company",
		        "Seaboard Corp",
		        "Sealed Air Corp",
		        "Sears Roebuck & Co",
		        "Sempra Energy",
		        "Sequa Corp",
		        "Service Corp. International",
		        "ServiceMaster Co",
		        "Shaw Group Inc",
		        "Sherwin-Williams Company",
		        "Shopko Stores Inc",
		        "Siebel Systems Inc",
		        "Sierra Health Services Inc",
		        "Sierra Pacific Resources",
		        "Silgan Holdings Inc.",
		        "Silicon Graphics Inc",
		        "Simon Property Group Inc",
		        "SLM Corporation",
		        "Smith International Inc",
		        "Smithfield Foods Inc",
		        "Smurfit-Stone Container Corp",
		        "Snap-On Inc",
		        "Solectron Corp",
		        "Solutia Inc",
		        "Sonic Automotive Inc.",
		        "Sonoco Products Co.",
		        "Southern Company",
		        "Southern Union Company",
		        "SouthTrust Corp.",
		        "Southwest Airlines Co",
		        "Southwest Gas Corp",
		        "Sovereign Bancorp Inc.",
		        "Spartan Stores Inc",
		        "Spherion Corp",
		        "Sports Authority Inc",
		        "Sprint Corp.",
		        "SPX Corp",
		        "St. Jude Medical Inc",
		        "St. Paul Cos.",
		        "Staff Leasing Inc.",
		        "StanCorp Financial Group Inc",
		        "Standard Pacific Corp.",
		        "Stanley Works",
		        "Staples Inc",
		        "Starbucks Corp",
		        "Starwood Hotels & Resorts Worldwide Inc",
		        "State Street Corp.",
		        "Stater Bros. Holdings Inc.",
		        "Steelcase Inc",
		        "Stein Mart Inc",
		        "Stewart & Stevenson Services Inc",
		        "Stewart Information Services Corp",
		        "Stilwell Financial Inc",
		        "Storage Technology Corporation",
		        "Stryker Corp",
		        "Sun Healthcare Group Inc.",
		        "Sun Microsystems Inc.",
		        "SunGard Data Systems Inc.",
		        "Sunoco Inc.",
		        "SunTrust Banks Inc",
		        "Supervalu Inc",
		        "Swift Transportation, Co., Inc",
		        "Symbol Technologies Inc",
		        "Synovus Financial Corp.",
		        "Sysco Corp",
		        "Systemax Inc.",
		        "Target Corp.",
		        "Tech Data Corporation",
		        "TECO Energy Inc",
		        "Tecumseh Products Company",
		        "Tektronix Inc",
		        "Teleflex Incorporated",
		        "Telephone & Data Systems Inc",
		        "Tellabs Inc.",
		        "Temple-Inland Inc",
		        "Tenet Healthcare Corporation",
		        "Tenneco Automotive Inc.",
		        "Teradyne Inc",
		        "Terex Corp",
		        "Tesoro Petroleum Corp.",
		        "Texas Industries Inc.",
		        "Texas Instruments Incorporated",
		        "Textron Inc",
		        "Thermo Electron Corporation",
		        "Thomas & Betts Corporation",
		        "Tiffany & Co",
		        "Timken Company",
		        "TJX Companies Inc",
		        "TMP Worldwide Inc",
		        "Toll Brothers Inc",
		        "Torchmark Corporation",
		        "Toro Company",
		        "Tower Automotive Inc.",
		        "Toys 'R' Us Inc",
		        "Trans World Entertainment Corp.",
		        "TransMontaigne Inc",
		        "Transocean Inc",
		        "TravelCenters of America Inc.",
		        "Triad Hospitals Inc",
		        "Tribune Company",
		        "Trigon Healthcare Inc.",
		        "Trinity Industries Inc",
		        "Trump Hotels & Casino Resorts Inc.",
		        "TruServ Corporation",
		        "TRW Inc",
		        "TXU Corp",
		        "Tyson Foods Inc",
		        "U.S. Bancorp",
		        "U.S. Industries Inc.",
		        "UAL Corporation",
		        "UGI Corporation",
		        "Unified Western Grocers Inc",
		        "Union Pacific Corporation",
		        "Union Planters Corp",
		        "Unisource Energy Corp",
		        "Unisys Corporation",
		        "United Auto Group Inc",
		        "United Defense Industries Inc.",
		        "United Parcel Service Inc",
		        "United Rentals Inc",
		        "United Stationers Inc",
		        "United Technologies Corporation",
		        "UnitedHealth Group Incorporated",
		        "Unitrin Inc",
		        "Universal Corporation",
		        "Universal Forest Products Inc",
		        "Universal Health Services Inc",
		        "Unocal Corporation",
		        "Unova Inc",
		        "UnumProvident Corporation",
		        "URS Corporation",
		        "US Airways Group Inc",
		        "US Oncology Inc",
		        "USA Interactive",
		        "USFreighways Corporation",
		        "USG Corporation",
		        "UST Inc",
		        "Valero Energy Corporation",
		        "Valspar Corporation",
		        "Value City Department Stores Inc",
		        "Varco International Inc",
		        "Vectren Corporation",
		        "Veritas Software Corporation",
		        "Verizon Communications Inc",
		        "VF Corporation",
		        "Viacom Inc",
		        "Viad Corp",
		        "Viasystems Group Inc",
		        "Vishay Intertechnology Inc",
		        "Visteon Corporation",
		        "Volt Information Sciences Inc",
		        "Vulcan Materials Company",
		        "W.R. Berkley Corporation",
		        "W.R. Grace & Co",
		        "W.W. Grainger Inc",
		        "Wachovia Corporation",
		        "Wakenhut Corporation",
		        "Walgreen Co",
		        "Wallace Computer Services Inc",
		        "Wal-Mart Stores Inc",
		        "Walt Disney Co",
		        "Walter Industries Inc",
		        "Washington Mutual Inc",
		        "Washington Post Co.",
		        "Waste Management Inc",
		        "Watsco Inc",
		        "Weatherford International Inc",
		        "Weis Markets Inc.",
		        "Wellpoint Health Networks Inc",
		        "Wells Fargo & Company",
		        "Wendy's International Inc",
		        "Werner Enterprises Inc",
		        "WESCO International Inc",
		        "Western Digital Inc",
		        "Western Gas Resources Inc",
		        "WestPoint Stevens Inc",
		        "Weyerhauser Company",
		        "WGL Holdings Inc",
		        "Whirlpool Corporation",
		        "Whole Foods Market Inc",
		        "Willamette Industries Inc.",
		        "Williams Companies Inc",
		        "Williams Sonoma Inc",
		        "Winn Dixie Stores Inc",
		        "Wisconsin Energy Corporation",
		        "Wm Wrigley Jr Company",
		        "World Fuel Services Corporation",
		        "WorldCom Inc",
		        "Worthington Industries Inc",
		        "WPS Resources Corporation",
		        "Wyeth",
		        "Wyndham International Inc",
		        "Xcel Energy Inc",
		        "Xerox Corp",
		        "Xilinx Inc",
		        "XO Communications Inc",
		        "Yellow Corporation",
		        "York International Corp",
		        "Yum Brands Inc.",
		        "Zale Corporation",
		        "Zions Bancorporation"
		      ],

		        fileExtension : {
		            "raster"    : ["bmp", "gif", "gpl", "ico", "jpeg", "psd", "png", "psp", "raw", "tiff"],
		            "vector"    : ["3dv", "amf", "awg", "ai", "cgm", "cdr", "cmx", "dxf", "e2d", "egt", "eps", "fs", "odg", "svg", "xar"],
		            "3d"        : ["3dmf", "3dm", "3mf", "3ds", "an8", "aoi", "blend", "cal3d", "cob", "ctm", "iob", "jas", "max", "mb", "mdx", "obj", "x", "x3d"],
		            "document"  : ["doc", "docx", "dot", "html", "xml", "odt", "odm", "ott", "csv", "rtf", "tex", "xhtml", "xps"]
		        },

		        // Data taken from https://github.com/dmfilipenko/timezones.json/blob/master/timezones.json
		        timezones: [
		                  {
		                    "name": "Dateline Standard Time",
		                    "abbr": "DST",
		                    "offset": -12,
		                    "isdst": false,
		                    "text": "(UTC-12:00) International Date Line West",
		                    "utc": [
		                      "Etc/GMT+12"
		                    ]
		                  },
		                  {
		                    "name": "UTC-11",
		                    "abbr": "U",
		                    "offset": -11,
		                    "isdst": false,
		                    "text": "(UTC-11:00) Coordinated Universal Time-11",
		                    "utc": [
		                      "Etc/GMT+11",
		                      "Pacific/Midway",
		                      "Pacific/Niue",
		                      "Pacific/Pago_Pago"
		                    ]
		                  },
		                  {
		                    "name": "Hawaiian Standard Time",
		                    "abbr": "HST",
		                    "offset": -10,
		                    "isdst": false,
		                    "text": "(UTC-10:00) Hawaii",
		                    "utc": [
		                      "Etc/GMT+10",
		                      "Pacific/Honolulu",
		                      "Pacific/Johnston",
		                      "Pacific/Rarotonga",
		                      "Pacific/Tahiti"
		                    ]
		                  },
		                  {
		                    "name": "Alaskan Standard Time",
		                    "abbr": "AKDT",
		                    "offset": -8,
		                    "isdst": true,
		                    "text": "(UTC-09:00) Alaska",
		                    "utc": [
		                      "America/Anchorage",
		                      "America/Juneau",
		                      "America/Nome",
		                      "America/Sitka",
		                      "America/Yakutat"
		                    ]
		                  },
		                  {
		                    "name": "Pacific Standard Time (Mexico)",
		                    "abbr": "PDT",
		                    "offset": -7,
		                    "isdst": true,
		                    "text": "(UTC-08:00) Baja California",
		                    "utc": [
		                      "America/Santa_Isabel"
		                    ]
		                  },
		                  {
		                    "name": "Pacific Daylight Time",
		                    "abbr": "PDT",
		                    "offset": -7,
		                    "isdst": true,
		                    "text": "(UTC-07:00) Pacific Time (US & Canada)",
		                    "utc": [
		                      "America/Dawson",
		                      "America/Los_Angeles",
		                      "America/Tijuana",
		                      "America/Vancouver",
		                      "America/Whitehorse"
		                    ]
		                  },
		                  {
		                    "name": "Pacific Standard Time",
		                    "abbr": "PST",
		                    "offset": -8,
		                    "isdst": false,
		                    "text": "(UTC-08:00) Pacific Time (US & Canada)",
		                    "utc": [
		                      "America/Dawson",
		                      "America/Los_Angeles",
		                      "America/Tijuana",
		                      "America/Vancouver",
		                      "America/Whitehorse",
		                      "PST8PDT"
		                    ]
		                  },
		                  {
		                    "name": "US Mountain Standard Time",
		                    "abbr": "UMST",
		                    "offset": -7,
		                    "isdst": false,
		                    "text": "(UTC-07:00) Arizona",
		                    "utc": [
		                      "America/Creston",
		                      "America/Dawson_Creek",
		                      "America/Hermosillo",
		                      "America/Phoenix",
		                      "Etc/GMT+7"
		                    ]
		                  },
		                  {
		                    "name": "Mountain Standard Time (Mexico)",
		                    "abbr": "MDT",
		                    "offset": -6,
		                    "isdst": true,
		                    "text": "(UTC-07:00) Chihuahua, La Paz, Mazatlan",
		                    "utc": [
		                      "America/Chihuahua",
		                      "America/Mazatlan"
		                    ]
		                  },
		                  {
		                    "name": "Mountain Standard Time",
		                    "abbr": "MDT",
		                    "offset": -6,
		                    "isdst": true,
		                    "text": "(UTC-07:00) Mountain Time (US & Canada)",
		                    "utc": [
		                      "America/Boise",
		                      "America/Cambridge_Bay",
		                      "America/Denver",
		                      "America/Edmonton",
		                      "America/Inuvik",
		                      "America/Ojinaga",
		                      "America/Yellowknife",
		                      "MST7MDT"
		                    ]
		                  },
		                  {
		                    "name": "Central America Standard Time",
		                    "abbr": "CAST",
		                    "offset": -6,
		                    "isdst": false,
		                    "text": "(UTC-06:00) Central America",
		                    "utc": [
		                      "America/Belize",
		                      "America/Costa_Rica",
		                      "America/El_Salvador",
		                      "America/Guatemala",
		                      "America/Managua",
		                      "America/Tegucigalpa",
		                      "Etc/GMT+6",
		                      "Pacific/Galapagos"
		                    ]
		                  },
		                  {
		                    "name": "Central Standard Time",
		                    "abbr": "CDT",
		                    "offset": -5,
		                    "isdst": true,
		                    "text": "(UTC-06:00) Central Time (US & Canada)",
		                    "utc": [
		                      "America/Chicago",
		                      "America/Indiana/Knox",
		                      "America/Indiana/Tell_City",
		                      "America/Matamoros",
		                      "America/Menominee",
		                      "America/North_Dakota/Beulah",
		                      "America/North_Dakota/Center",
		                      "America/North_Dakota/New_Salem",
		                      "America/Rainy_River",
		                      "America/Rankin_Inlet",
		                      "America/Resolute",
		                      "America/Winnipeg",
		                      "CST6CDT"
		                    ]
		                  },
		                  {
		                    "name": "Central Standard Time (Mexico)",
		                    "abbr": "CDT",
		                    "offset": -5,
		                    "isdst": true,
		                    "text": "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
		                    "utc": [
		                      "America/Bahia_Banderas",
		                      "America/Cancun",
		                      "America/Merida",
		                      "America/Mexico_City",
		                      "America/Monterrey"
		                    ]
		                  },
		                  {
		                    "name": "Canada Central Standard Time",
		                    "abbr": "CCST",
		                    "offset": -6,
		                    "isdst": false,
		                    "text": "(UTC-06:00) Saskatchewan",
		                    "utc": [
		                      "America/Regina",
		                      "America/Swift_Current"
		                    ]
		                  },
		                  {
		                    "name": "SA Pacific Standard Time",
		                    "abbr": "SPST",
		                    "offset": -5,
		                    "isdst": false,
		                    "text": "(UTC-05:00) Bogota, Lima, Quito",
		                    "utc": [
		                      "America/Bogota",
		                      "America/Cayman",
		                      "America/Coral_Harbour",
		                      "America/Eirunepe",
		                      "America/Guayaquil",
		                      "America/Jamaica",
		                      "America/Lima",
		                      "America/Panama",
		                      "America/Rio_Branco",
		                      "Etc/GMT+5"
		                    ]
		                  },
		                  {
		                    "name": "Eastern Standard Time",
		                    "abbr": "EDT",
		                    "offset": -4,
		                    "isdst": true,
		                    "text": "(UTC-05:00) Eastern Time (US & Canada)",
		                    "utc": [
		                      "America/Detroit",
		                      "America/Havana",
		                      "America/Indiana/Petersburg",
		                      "America/Indiana/Vincennes",
		                      "America/Indiana/Winamac",
		                      "America/Iqaluit",
		                      "America/Kentucky/Monticello",
		                      "America/Louisville",
		                      "America/Montreal",
		                      "America/Nassau",
		                      "America/New_York",
		                      "America/Nipigon",
		                      "America/Pangnirtung",
		                      "America/Port-au-Prince",
		                      "America/Thunder_Bay",
		                      "America/Toronto",
		                      "EST5EDT"
		                    ]
		                  },
		                  {
		                    "name": "US Eastern Standard Time",
		                    "abbr": "UEDT",
		                    "offset": -4,
		                    "isdst": true,
		                    "text": "(UTC-05:00) Indiana (East)",
		                    "utc": [
		                      "America/Indiana/Marengo",
		                      "America/Indiana/Vevay",
		                      "America/Indianapolis"
		                    ]
		                  },
		                  {
		                    "name": "Venezuela Standard Time",
		                    "abbr": "VST",
		                    "offset": -4.5,
		                    "isdst": false,
		                    "text": "(UTC-04:30) Caracas",
		                    "utc": [
		                      "America/Caracas"
		                    ]
		                  },
		                  {
		                    "name": "Paraguay Standard Time",
		                    "abbr": "PYT",
		                    "offset": -4,
		                    "isdst": false,
		                    "text": "(UTC-04:00) Asuncion",
		                    "utc": [
		                      "America/Asuncion"
		                    ]
		                  },
		                  {
		                    "name": "Atlantic Standard Time",
		                    "abbr": "ADT",
		                    "offset": -3,
		                    "isdst": true,
		                    "text": "(UTC-04:00) Atlantic Time (Canada)",
		                    "utc": [
		                      "America/Glace_Bay",
		                      "America/Goose_Bay",
		                      "America/Halifax",
		                      "America/Moncton",
		                      "America/Thule",
		                      "Atlantic/Bermuda"
		                    ]
		                  },
		                  {
		                    "name": "Central Brazilian Standard Time",
		                    "abbr": "CBST",
		                    "offset": -4,
		                    "isdst": false,
		                    "text": "(UTC-04:00) Cuiaba",
		                    "utc": [
		                      "America/Campo_Grande",
		                      "America/Cuiaba"
		                    ]
		                  },
		                  {
		                    "name": "SA Western Standard Time",
		                    "abbr": "SWST",
		                    "offset": -4,
		                    "isdst": false,
		                    "text": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
		                    "utc": [
		                      "America/Anguilla",
		                      "America/Antigua",
		                      "America/Aruba",
		                      "America/Barbados",
		                      "America/Blanc-Sablon",
		                      "America/Boa_Vista",
		                      "America/Curacao",
		                      "America/Dominica",
		                      "America/Grand_Turk",
		                      "America/Grenada",
		                      "America/Guadeloupe",
		                      "America/Guyana",
		                      "America/Kralendijk",
		                      "America/La_Paz",
		                      "America/Lower_Princes",
		                      "America/Manaus",
		                      "America/Marigot",
		                      "America/Martinique",
		                      "America/Montserrat",
		                      "America/Port_of_Spain",
		                      "America/Porto_Velho",
		                      "America/Puerto_Rico",
		                      "America/Santo_Domingo",
		                      "America/St_Barthelemy",
		                      "America/St_Kitts",
		                      "America/St_Lucia",
		                      "America/St_Thomas",
		                      "America/St_Vincent",
		                      "America/Tortola",
		                      "Etc/GMT+4"
		                    ]
		                  },
		                  {
		                    "name": "Pacific SA Standard Time",
		                    "abbr": "PSST",
		                    "offset": -4,
		                    "isdst": false,
		                    "text": "(UTC-04:00) Santiago",
		                    "utc": [
		                      "America/Santiago",
		                      "Antarctica/Palmer"
		                    ]
		                  },
		                  {
		                    "name": "Newfoundland Standard Time",
		                    "abbr": "NDT",
		                    "offset": -2.5,
		                    "isdst": true,
		                    "text": "(UTC-03:30) Newfoundland",
		                    "utc": [
		                      "America/St_Johns"
		                    ]
		                  },
		                  {
		                    "name": "E. South America Standard Time",
		                    "abbr": "ESAST",
		                    "offset": -3,
		                    "isdst": false,
		                    "text": "(UTC-03:00) Brasilia",
		                    "utc": [
		                      "America/Sao_Paulo"
		                    ]
		                  },
		                  {
		                    "name": "Argentina Standard Time",
		                    "abbr": "AST",
		                    "offset": -3,
		                    "isdst": false,
		                    "text": "(UTC-03:00) Buenos Aires",
		                    "utc": [
		                      "America/Argentina/La_Rioja",
		                      "America/Argentina/Rio_Gallegos",
		                      "America/Argentina/Salta",
		                      "America/Argentina/San_Juan",
		                      "America/Argentina/San_Luis",
		                      "America/Argentina/Tucuman",
		                      "America/Argentina/Ushuaia",
		                      "America/Buenos_Aires",
		                      "America/Catamarca",
		                      "America/Cordoba",
		                      "America/Jujuy",
		                      "America/Mendoza"
		                    ]
		                  },
		                  {
		                    "name": "SA Eastern Standard Time",
		                    "abbr": "SEST",
		                    "offset": -3,
		                    "isdst": false,
		                    "text": "(UTC-03:00) Cayenne, Fortaleza",
		                    "utc": [
		                      "America/Araguaina",
		                      "America/Belem",
		                      "America/Cayenne",
		                      "America/Fortaleza",
		                      "America/Maceio",
		                      "America/Paramaribo",
		                      "America/Recife",
		                      "America/Santarem",
		                      "Antarctica/Rothera",
		                      "Atlantic/Stanley",
		                      "Etc/GMT+3"
		                    ]
		                  },
		                  {
		                    "name": "Greenland Standard Time",
		                    "abbr": "GDT",
		                    "offset": -3,
		                    "isdst": true,
		                    "text": "(UTC-03:00) Greenland",
		                    "utc": [
		                      "America/Godthab"
		                    ]
		                  },
		                  {
		                    "name": "Montevideo Standard Time",
		                    "abbr": "MST",
		                    "offset": -3,
		                    "isdst": false,
		                    "text": "(UTC-03:00) Montevideo",
		                    "utc": [
		                      "America/Montevideo"
		                    ]
		                  },
		                  {
		                    "name": "Bahia Standard Time",
		                    "abbr": "BST",
		                    "offset": -3,
		                    "isdst": false,
		                    "text": "(UTC-03:00) Salvador",
		                    "utc": [
		                      "America/Bahia"
		                    ]
		                  },
		                  {
		                    "name": "UTC-02",
		                    "abbr": "U",
		                    "offset": -2,
		                    "isdst": false,
		                    "text": "(UTC-02:00) Coordinated Universal Time-02",
		                    "utc": [
		                      "America/Noronha",
		                      "Atlantic/South_Georgia",
		                      "Etc/GMT+2"
		                    ]
		                  },
		                  {
		                    "name": "Mid-Atlantic Standard Time",
		                    "abbr": "MDT",
		                    "offset": -1,
		                    "isdst": true,
		                    "text": "(UTC-02:00) Mid-Atlantic - Old",
		                    "utc": []
		                  },
		                  {
		                    "name": "Azores Standard Time",
		                    "abbr": "ADT",
		                    "offset": 0,
		                    "isdst": true,
		                    "text": "(UTC-01:00) Azores",
		                    "utc": [
		                      "America/Scoresbysund",
		                      "Atlantic/Azores"
		                    ]
		                  },
		                  {
		                    "name": "Cape Verde Standard Time",
		                    "abbr": "CVST",
		                    "offset": -1,
		                    "isdst": false,
		                    "text": "(UTC-01:00) Cape Verde Is.",
		                    "utc": [
		                      "Atlantic/Cape_Verde",
		                      "Etc/GMT+1"
		                    ]
		                  },
		                  {
		                    "name": "Morocco Standard Time",
		                    "abbr": "MDT",
		                    "offset": 1,
		                    "isdst": true,
		                    "text": "(UTC) Casablanca",
		                    "utc": [
		                      "Africa/Casablanca",
		                      "Africa/El_Aaiun"
		                    ]
		                  },
		                  {
		                    "name": "UTC",
		                    "abbr": "UTC",
		                    "offset": 0,
		                    "isdst": false,
		                    "text": "(UTC) Coordinated Universal Time",
		                    "utc": [
		                      "America/Danmarkshavn",
		                      "Etc/GMT"
		                    ]
		                  },
		                  {
		                    "name": "GMT Standard Time",
		                    "abbr": "GMT",
		                    "offset": 0,
		                    "isdst": false,
		                    "text": "(UTC) Edinburgh, London",
		                    "utc": [
		                      "Europe/Isle_of_Man",
		                      "Europe/Guernsey",
		                      "Europe/Jersey",
		                      "Europe/London"
		                    ]
		                  },
		                  {
		                    "name": "British Summer Time",
		                    "abbr": "BST",
		                    "offset": 1,
		                    "isdst": true,
		                    "text": "(UTC+01:00) Edinburgh, London",
		                    "utc": [
		                      "Europe/Isle_of_Man",
		                      "Europe/Guernsey",
		                      "Europe/Jersey",
		                      "Europe/London"
		                    ]
		                  },
		                  {
		                    "name": "GMT Standard Time",
		                    "abbr": "GDT",
		                    "offset": 1,
		                    "isdst": true,
		                    "text": "(UTC) Dublin, Lisbon",
		                    "utc": [
		                      "Atlantic/Canary",
		                      "Atlantic/Faeroe",
		                      "Atlantic/Madeira",
		                      "Europe/Dublin",
		                      "Europe/Lisbon"
		                    ]
		                  },
		                  {
		                    "name": "Greenwich Standard Time",
		                    "abbr": "GST",
		                    "offset": 0,
		                    "isdst": false,
		                    "text": "(UTC) Monrovia, Reykjavik",
		                    "utc": [
		                      "Africa/Abidjan",
		                      "Africa/Accra",
		                      "Africa/Bamako",
		                      "Africa/Banjul",
		                      "Africa/Bissau",
		                      "Africa/Conakry",
		                      "Africa/Dakar",
		                      "Africa/Freetown",
		                      "Africa/Lome",
		                      "Africa/Monrovia",
		                      "Africa/Nouakchott",
		                      "Africa/Ouagadougou",
		                      "Africa/Sao_Tome",
		                      "Atlantic/Reykjavik",
		                      "Atlantic/St_Helena"
		                    ]
		                  },
		                  {
		                    "name": "W. Europe Standard Time",
		                    "abbr": "WEDT",
		                    "offset": 2,
		                    "isdst": true,
		                    "text": "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
		                    "utc": [
		                      "Arctic/Longyearbyen",
		                      "Europe/Amsterdam",
		                      "Europe/Andorra",
		                      "Europe/Berlin",
		                      "Europe/Busingen",
		                      "Europe/Gibraltar",
		                      "Europe/Luxembourg",
		                      "Europe/Malta",
		                      "Europe/Monaco",
		                      "Europe/Oslo",
		                      "Europe/Rome",
		                      "Europe/San_Marino",
		                      "Europe/Stockholm",
		                      "Europe/Vaduz",
		                      "Europe/Vatican",
		                      "Europe/Vienna",
		                      "Europe/Zurich"
		                    ]
		                  },
		                  {
		                    "name": "Central Europe Standard Time",
		                    "abbr": "CEDT",
		                    "offset": 2,
		                    "isdst": true,
		                    "text": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
		                    "utc": [
		                      "Europe/Belgrade",
		                      "Europe/Bratislava",
		                      "Europe/Budapest",
		                      "Europe/Ljubljana",
		                      "Europe/Podgorica",
		                      "Europe/Prague",
		                      "Europe/Tirane"
		                    ]
		                  },
		                  {
		                    "name": "Romance Standard Time",
		                    "abbr": "RDT",
		                    "offset": 2,
		                    "isdst": true,
		                    "text": "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
		                    "utc": [
		                      "Africa/Ceuta",
		                      "Europe/Brussels",
		                      "Europe/Copenhagen",
		                      "Europe/Madrid",
		                      "Europe/Paris"
		                    ]
		                  },
		                  {
		                    "name": "Central European Standard Time",
		                    "abbr": "CEDT",
		                    "offset": 2,
		                    "isdst": true,
		                    "text": "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
		                    "utc": [
		                      "Europe/Sarajevo",
		                      "Europe/Skopje",
		                      "Europe/Warsaw",
		                      "Europe/Zagreb"
		                    ]
		                  },
		                  {
		                    "name": "W. Central Africa Standard Time",
		                    "abbr": "WCAST",
		                    "offset": 1,
		                    "isdst": false,
		                    "text": "(UTC+01:00) West Central Africa",
		                    "utc": [
		                      "Africa/Algiers",
		                      "Africa/Bangui",
		                      "Africa/Brazzaville",
		                      "Africa/Douala",
		                      "Africa/Kinshasa",
		                      "Africa/Lagos",
		                      "Africa/Libreville",
		                      "Africa/Luanda",
		                      "Africa/Malabo",
		                      "Africa/Ndjamena",
		                      "Africa/Niamey",
		                      "Africa/Porto-Novo",
		                      "Africa/Tunis",
		                      "Etc/GMT-1"
		                    ]
		                  },
		                  {
		                    "name": "Namibia Standard Time",
		                    "abbr": "NST",
		                    "offset": 1,
		                    "isdst": false,
		                    "text": "(UTC+01:00) Windhoek",
		                    "utc": [
		                      "Africa/Windhoek"
		                    ]
		                  },
		                  {
		                    "name": "GTB Standard Time",
		                    "abbr": "GDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) Athens, Bucharest",
		                    "utc": [
		                      "Asia/Nicosia",
		                      "Europe/Athens",
		                      "Europe/Bucharest",
		                      "Europe/Chisinau"
		                    ]
		                  },
		                  {
		                    "name": "Middle East Standard Time",
		                    "abbr": "MEDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) Beirut",
		                    "utc": [
		                      "Asia/Beirut"
		                    ]
		                  },
		                  {
		                    "name": "Egypt Standard Time",
		                    "abbr": "EST",
		                    "offset": 2,
		                    "isdst": false,
		                    "text": "(UTC+02:00) Cairo",
		                    "utc": [
		                      "Africa/Cairo"
		                    ]
		                  },
		                  {
		                    "name": "Syria Standard Time",
		                    "abbr": "SDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) Damascus",
		                    "utc": [
		                      "Asia/Damascus"
		                    ]
		                  },
		                  {
		                    "name": "E. Europe Standard Time",
		                    "abbr": "EEDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) E. Europe",
		                    "utc": [
		                      "Asia/Nicosia",
		                      "Europe/Athens",
		                      "Europe/Bucharest",
		                      "Europe/Chisinau",
		                      "Europe/Helsinki",
		                      "Europe/Kiev",
		                      "Europe/Mariehamn",
		                      "Europe/Nicosia",
		                      "Europe/Riga",
		                      "Europe/Sofia",
		                      "Europe/Tallinn",
		                      "Europe/Uzhgorod",
		                      "Europe/Vilnius",
		                      "Europe/Zaporozhye"
		                    ]
		                  },
		                  {
		                    "name": "South Africa Standard Time",
		                    "abbr": "SAST",
		                    "offset": 2,
		                    "isdst": false,
		                    "text": "(UTC+02:00) Harare, Pretoria",
		                    "utc": [
		                      "Africa/Blantyre",
		                      "Africa/Bujumbura",
		                      "Africa/Gaborone",
		                      "Africa/Harare",
		                      "Africa/Johannesburg",
		                      "Africa/Kigali",
		                      "Africa/Lubumbashi",
		                      "Africa/Lusaka",
		                      "Africa/Maputo",
		                      "Africa/Maseru",
		                      "Africa/Mbabane",
		                      "Etc/GMT-2"
		                    ]
		                  },
		                  {
		                    "name": "FLE Standard Time",
		                    "abbr": "FDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
		                    "utc": [
		                      "Europe/Helsinki",
		                      "Europe/Kiev",
		                      "Europe/Mariehamn",
		                      "Europe/Riga",
		                      "Europe/Sofia",
		                      "Europe/Tallinn",
		                      "Europe/Uzhgorod",
		                      "Europe/Vilnius",
		                      "Europe/Zaporozhye"
		                    ]
		                  },
		                  {
		                    "name": "Turkey Standard Time",
		                    "abbr": "TDT",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Istanbul",
		                    "utc": [
		                      "Europe/Istanbul"
		                    ]
		                  },
		                  {
		                    "name": "Israel Standard Time",
		                    "abbr": "JDT",
		                    "offset": 3,
		                    "isdst": true,
		                    "text": "(UTC+02:00) Jerusalem",
		                    "utc": [
		                      "Asia/Jerusalem"
		                    ]
		                  },
		                  {
		                    "name": "Libya Standard Time",
		                    "abbr": "LST",
		                    "offset": 2,
		                    "isdst": false,
		                    "text": "(UTC+02:00) Tripoli",
		                    "utc": [
		                      "Africa/Tripoli"
		                    ]
		                  },
		                  {
		                    "name": "Jordan Standard Time",
		                    "abbr": "JST",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Amman",
		                    "utc": [
		                      "Asia/Amman"
		                    ]
		                  },
		                  {
		                    "name": "Arabic Standard Time",
		                    "abbr": "AST",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Baghdad",
		                    "utc": [
		                      "Asia/Baghdad"
		                    ]
		                  },
		                  {
		                    "name": "Kaliningrad Standard Time",
		                    "abbr": "KST",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+02:00) Kaliningrad",
		                    "utc": [
		                      "Europe/Kaliningrad"
		                    ]
		                  },
		                  {
		                    "name": "Arab Standard Time",
		                    "abbr": "AST",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Kuwait, Riyadh",
		                    "utc": [
		                      "Asia/Aden",
		                      "Asia/Bahrain",
		                      "Asia/Kuwait",
		                      "Asia/Qatar",
		                      "Asia/Riyadh"
		                    ]
		                  },
		                  {
		                    "name": "E. Africa Standard Time",
		                    "abbr": "EAST",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Nairobi",
		                    "utc": [
		                      "Africa/Addis_Ababa",
		                      "Africa/Asmera",
		                      "Africa/Dar_es_Salaam",
		                      "Africa/Djibouti",
		                      "Africa/Juba",
		                      "Africa/Kampala",
		                      "Africa/Khartoum",
		                      "Africa/Mogadishu",
		                      "Africa/Nairobi",
		                      "Antarctica/Syowa",
		                      "Etc/GMT-3",
		                      "Indian/Antananarivo",
		                      "Indian/Comoro",
		                      "Indian/Mayotte"
		                    ]
		                  },
		                  {
		                    "name": "Moscow Standard Time",
		                    "abbr": "MSK",
		                    "offset": 3,
		                    "isdst": false,
		                    "text": "(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk",
		                    "utc": [
		                        "Europe/Kirov",
		                      "Europe/Moscow",
		                      "Europe/Simferopol",
		                      "Europe/Volgograd",
		                      "Europe/Minsk"
		                    ]
		                  },
		                  {
		                    "name": "Samara Time",
		                    "abbr": "SAMT",
		                    "offset": 4,
		                    "isdst": false,
		                    "text": "(UTC+04:00) Samara, Ulyanovsk, Saratov",
		                    "utc": [
		                        "Europe/Astrakhan",
		                      "Europe/Samara",
		                        "Europe/Ulyanovsk"
		                    ]
		                  },
		                  {
		                    "name": "Iran Standard Time",
		                    "abbr": "IDT",
		                    "offset": 4.5,
		                    "isdst": true,
		                    "text": "(UTC+03:30) Tehran",
		                    "utc": [
		                      "Asia/Tehran"
		                    ]
		                  },
		                  {
		                    "name": "Arabian Standard Time",
		                    "abbr": "AST",
		                    "offset": 4,
		                    "isdst": false,
		                    "text": "(UTC+04:00) Abu Dhabi, Muscat",
		                    "utc": [
		                      "Asia/Dubai",
		                      "Asia/Muscat",
		                      "Etc/GMT-4"
		                    ]
		                  },
		                  {
		                    "name": "Azerbaijan Standard Time",
		                    "abbr": "ADT",
		                    "offset": 5,
		                    "isdst": true,
		                    "text": "(UTC+04:00) Baku",
		                    "utc": [
		                      "Asia/Baku"
		                    ]
		                  },
		                  {
		                    "name": "Mauritius Standard Time",
		                    "abbr": "MST",
		                    "offset": 4,
		                    "isdst": false,
		                    "text": "(UTC+04:00) Port Louis",
		                    "utc": [
		                      "Indian/Mahe",
		                      "Indian/Mauritius",
		                      "Indian/Reunion"
		                    ]
		                  },
		                  {
		                    "name": "Georgian Standard Time",
		                    "abbr": "GET",
		                    "offset": 4,
		                    "isdst": false,
		                    "text": "(UTC+04:00) Tbilisi",
		                    "utc": [
		                      "Asia/Tbilisi"
		                    ]
		                  },
		                  {
		                    "name": "Caucasus Standard Time",
		                    "abbr": "CST",
		                    "offset": 4,
		                    "isdst": false,
		                    "text": "(UTC+04:00) Yerevan",
		                    "utc": [
		                      "Asia/Yerevan"
		                    ]
		                  },
		                  {
		                    "name": "Afghanistan Standard Time",
		                    "abbr": "AST",
		                    "offset": 4.5,
		                    "isdst": false,
		                    "text": "(UTC+04:30) Kabul",
		                    "utc": [
		                      "Asia/Kabul"
		                    ]
		                  },
		                  {
		                    "name": "West Asia Standard Time",
		                    "abbr": "WAST",
		                    "offset": 5,
		                    "isdst": false,
		                    "text": "(UTC+05:00) Ashgabat, Tashkent",
		                    "utc": [
		                      "Antarctica/Mawson",
		                      "Asia/Aqtau",
		                      "Asia/Aqtobe",
		                      "Asia/Ashgabat",
		                      "Asia/Dushanbe",
		                      "Asia/Oral",
		                      "Asia/Samarkand",
		                      "Asia/Tashkent",
		                      "Etc/GMT-5",
		                      "Indian/Kerguelen",
		                      "Indian/Maldives"
		                    ]
		                  },
		                  {
		                    "name": "Yekaterinburg Time",
		                    "abbr": "YEKT",
		                    "offset": 5,
		                    "isdst": false,
		                    "text": "(UTC+05:00) Yekaterinburg",
		                    "utc": [
		                      "Asia/Yekaterinburg"
		                    ]
		                  },
		                  {
		                    "name": "Pakistan Standard Time",
		                    "abbr": "PKT",
		                    "offset": 5,
		                    "isdst": false,
		                    "text": "(UTC+05:00) Islamabad, Karachi",
		                    "utc": [
		                      "Asia/Karachi"
		                    ]
		                  },
		                  {
		                    "name": "India Standard Time",
		                    "abbr": "IST",
		                    "offset": 5.5,
		                    "isdst": false,
		                    "text": "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
		                    "utc": [
		                      "Asia/Kolkata"
		                    ]
		                  },
		                  {
		                    "name": "Sri Lanka Standard Time",
		                    "abbr": "SLST",
		                    "offset": 5.5,
		                    "isdst": false,
		                    "text": "(UTC+05:30) Sri Jayawardenepura",
		                    "utc": [
		                      "Asia/Colombo"
		                    ]
		                  },
		                  {
		                    "name": "Nepal Standard Time",
		                    "abbr": "NST",
		                    "offset": 5.75,
		                    "isdst": false,
		                    "text": "(UTC+05:45) Kathmandu",
		                    "utc": [
		                      "Asia/Kathmandu"
		                    ]
		                  },
		                  {
		                    "name": "Central Asia Standard Time",
		                    "abbr": "CAST",
		                    "offset": 6,
		                    "isdst": false,
		                    "text": "(UTC+06:00) Nur-Sultan (Astana)",
		                    "utc": [
		                      "Antarctica/Vostok",
		                      "Asia/Almaty",
		                      "Asia/Bishkek",
		                      "Asia/Qyzylorda",
		                      "Asia/Urumqi",
		                      "Etc/GMT-6",
		                      "Indian/Chagos"
		                    ]
		                  },
		                  {
		                    "name": "Bangladesh Standard Time",
		                    "abbr": "BST",
		                    "offset": 6,
		                    "isdst": false,
		                    "text": "(UTC+06:00) Dhaka",
		                    "utc": [
		                      "Asia/Dhaka",
		                      "Asia/Thimphu"
		                    ]
		                  },
		                  {
		                    "name": "Myanmar Standard Time",
		                    "abbr": "MST",
		                    "offset": 6.5,
		                    "isdst": false,
		                    "text": "(UTC+06:30) Yangon (Rangoon)",
		                    "utc": [
		                      "Asia/Rangoon",
		                      "Indian/Cocos"
		                    ]
		                  },
		                  {
		                    "name": "SE Asia Standard Time",
		                    "abbr": "SAST",
		                    "offset": 7,
		                    "isdst": false,
		                    "text": "(UTC+07:00) Bangkok, Hanoi, Jakarta",
		                    "utc": [
		                      "Antarctica/Davis",
		                      "Asia/Bangkok",
		                      "Asia/Hovd",
		                      "Asia/Jakarta",
		                      "Asia/Phnom_Penh",
		                      "Asia/Pontianak",
		                      "Asia/Saigon",
		                      "Asia/Vientiane",
		                      "Etc/GMT-7",
		                      "Indian/Christmas"
		                    ]
		                  },
		                  {
		                    "name": "N. Central Asia Standard Time",
		                    "abbr": "NCAST",
		                    "offset": 7,
		                    "isdst": false,
		                    "text": "(UTC+07:00) Novosibirsk",
		                    "utc": [
		                      "Asia/Novokuznetsk",
		                      "Asia/Novosibirsk",
		                      "Asia/Omsk"
		                    ]
		                  },
		                  {
		                    "name": "China Standard Time",
		                    "abbr": "CST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
		                    "utc": [
		                      "Asia/Hong_Kong",
		                      "Asia/Macau",
		                      "Asia/Shanghai"
		                    ]
		                  },
		                  {
		                    "name": "North Asia Standard Time",
		                    "abbr": "NAST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Krasnoyarsk",
		                    "utc": [
		                      "Asia/Krasnoyarsk"
		                    ]
		                  },
		                  {
		                    "name": "Singapore Standard Time",
		                    "abbr": "MPST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Kuala Lumpur, Singapore",
		                    "utc": [
		                      "Asia/Brunei",
		                      "Asia/Kuala_Lumpur",
		                      "Asia/Kuching",
		                      "Asia/Makassar",
		                      "Asia/Manila",
		                      "Asia/Singapore",
		                      "Etc/GMT-8"
		                    ]
		                  },
		                  {
		                    "name": "W. Australia Standard Time",
		                    "abbr": "WAST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Perth",
		                    "utc": [
		                      "Antarctica/Casey",
		                      "Australia/Perth"
		                    ]
		                  },
		                  {
		                    "name": "Taipei Standard Time",
		                    "abbr": "TST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Taipei",
		                    "utc": [
		                      "Asia/Taipei"
		                    ]
		                  },
		                  {
		                    "name": "Ulaanbaatar Standard Time",
		                    "abbr": "UST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Ulaanbaatar",
		                    "utc": [
		                      "Asia/Choibalsan",
		                      "Asia/Ulaanbaatar"
		                    ]
		                  },
		                  {
		                    "name": "North Asia East Standard Time",
		                    "abbr": "NAEST",
		                    "offset": 8,
		                    "isdst": false,
		                    "text": "(UTC+08:00) Irkutsk",
		                    "utc": [
		                      "Asia/Irkutsk"
		                    ]
		                  },
		                  {
		                    "name": "Japan Standard Time",
		                    "abbr": "JST",
		                    "offset": 9,
		                    "isdst": false,
		                    "text": "(UTC+09:00) Osaka, Sapporo, Tokyo",
		                    "utc": [
		                      "Asia/Dili",
		                      "Asia/Jayapura",
		                      "Asia/Tokyo",
		                      "Etc/GMT-9",
		                      "Pacific/Palau"
		                    ]
		                  },
		                  {
		                    "name": "Korea Standard Time",
		                    "abbr": "KST",
		                    "offset": 9,
		                    "isdst": false,
		                    "text": "(UTC+09:00) Seoul",
		                    "utc": [
		                      "Asia/Pyongyang",
		                      "Asia/Seoul"
		                    ]
		                  },
		                  {
		                    "name": "Cen. Australia Standard Time",
		                    "abbr": "CAST",
		                    "offset": 9.5,
		                    "isdst": false,
		                    "text": "(UTC+09:30) Adelaide",
		                    "utc": [
		                      "Australia/Adelaide",
		                      "Australia/Broken_Hill"
		                    ]
		                  },
		                  {
		                    "name": "AUS Central Standard Time",
		                    "abbr": "ACST",
		                    "offset": 9.5,
		                    "isdst": false,
		                    "text": "(UTC+09:30) Darwin",
		                    "utc": [
		                      "Australia/Darwin"
		                    ]
		                  },
		                  {
		                    "name": "E. Australia Standard Time",
		                    "abbr": "EAST",
		                    "offset": 10,
		                    "isdst": false,
		                    "text": "(UTC+10:00) Brisbane",
		                    "utc": [
		                      "Australia/Brisbane",
		                      "Australia/Lindeman"
		                    ]
		                  },
		                  {
		                    "name": "AUS Eastern Standard Time",
		                    "abbr": "AEST",
		                    "offset": 10,
		                    "isdst": false,
		                    "text": "(UTC+10:00) Canberra, Melbourne, Sydney",
		                    "utc": [
		                      "Australia/Melbourne",
		                      "Australia/Sydney"
		                    ]
		                  },
		                  {
		                    "name": "West Pacific Standard Time",
		                    "abbr": "WPST",
		                    "offset": 10,
		                    "isdst": false,
		                    "text": "(UTC+10:00) Guam, Port Moresby",
		                    "utc": [
		                      "Antarctica/DumontDUrville",
		                      "Etc/GMT-10",
		                      "Pacific/Guam",
		                      "Pacific/Port_Moresby",
		                      "Pacific/Saipan",
		                      "Pacific/Truk"
		                    ]
		                  },
		                  {
		                    "name": "Tasmania Standard Time",
		                    "abbr": "TST",
		                    "offset": 10,
		                    "isdst": false,
		                    "text": "(UTC+10:00) Hobart",
		                    "utc": [
		                      "Australia/Currie",
		                      "Australia/Hobart"
		                    ]
		                  },
		                  {
		                    "name": "Yakutsk Standard Time",
		                    "abbr": "YST",
		                    "offset": 9,
		                    "isdst": false,
		                    "text": "(UTC+09:00) Yakutsk",
		                    "utc": [
		                      "Asia/Chita",
		                      "Asia/Khandyga",
		                      "Asia/Yakutsk"
		                    ]
		                  },
		                  {
		                    "name": "Central Pacific Standard Time",
		                    "abbr": "CPST",
		                    "offset": 11,
		                    "isdst": false,
		                    "text": "(UTC+11:00) Solomon Is., New Caledonia",
		                    "utc": [
		                      "Antarctica/Macquarie",
		                      "Etc/GMT-11",
		                      "Pacific/Efate",
		                      "Pacific/Guadalcanal",
		                      "Pacific/Kosrae",
		                      "Pacific/Noumea",
		                      "Pacific/Ponape"
		                    ]
		                  },
		                  {
		                    "name": "Vladivostok Standard Time",
		                    "abbr": "VST",
		                    "offset": 11,
		                    "isdst": false,
		                    "text": "(UTC+11:00) Vladivostok",
		                    "utc": [
		                      "Asia/Sakhalin",
		                      "Asia/Ust-Nera",
		                      "Asia/Vladivostok"
		                    ]
		                  },
		                  {
		                    "name": "New Zealand Standard Time",
		                    "abbr": "NZST",
		                    "offset": 12,
		                    "isdst": false,
		                    "text": "(UTC+12:00) Auckland, Wellington",
		                    "utc": [
		                      "Antarctica/McMurdo",
		                      "Pacific/Auckland"
		                    ]
		                  },
		                  {
		                    "name": "UTC+12",
		                    "abbr": "U",
		                    "offset": 12,
		                    "isdst": false,
		                    "text": "(UTC+12:00) Coordinated Universal Time+12",
		                    "utc": [
		                      "Etc/GMT-12",
		                      "Pacific/Funafuti",
		                      "Pacific/Kwajalein",
		                      "Pacific/Majuro",
		                      "Pacific/Nauru",
		                      "Pacific/Tarawa",
		                      "Pacific/Wake",
		                      "Pacific/Wallis"
		                    ]
		                  },
		                  {
		                    "name": "Fiji Standard Time",
		                    "abbr": "FST",
		                    "offset": 12,
		                    "isdst": false,
		                    "text": "(UTC+12:00) Fiji",
		                    "utc": [
		                      "Pacific/Fiji"
		                    ]
		                  },
		                  {
		                    "name": "Magadan Standard Time",
		                    "abbr": "MST",
		                    "offset": 12,
		                    "isdst": false,
		                    "text": "(UTC+12:00) Magadan",
		                    "utc": [
		                      "Asia/Anadyr",
		                      "Asia/Kamchatka",
		                      "Asia/Magadan",
		                      "Asia/Srednekolymsk"
		                    ]
		                  },
		                  {
		                    "name": "Kamchatka Standard Time",
		                    "abbr": "KDT",
		                    "offset": 13,
		                    "isdst": true,
		                    "text": "(UTC+12:00) Petropavlovsk-Kamchatsky - Old",
		                    "utc": [
		                      "Asia/Kamchatka"
		                    ]
		                  },
		                  {
		                    "name": "Tonga Standard Time",
		                    "abbr": "TST",
		                    "offset": 13,
		                    "isdst": false,
		                    "text": "(UTC+13:00) Nuku'alofa",
		                    "utc": [
		                      "Etc/GMT-13",
		                      "Pacific/Enderbury",
		                      "Pacific/Fakaofo",
		                      "Pacific/Tongatapu"
		                    ]
		                  },
		                  {
		                    "name": "Samoa Standard Time",
		                    "abbr": "SST",
		                    "offset": 13,
		                    "isdst": false,
		                    "text": "(UTC+13:00) Samoa",
		                    "utc": [
		                      "Pacific/Apia"
		                    ]
		                  }
		                ],
		        //List source: http://answers.google.com/answers/threadview/id/589312.html
		        profession: [
		            "Airline Pilot",
		            "Academic Team",
		            "Accountant",
		            "Account Executive",
		            "Actor",
		            "Actuary",
		            "Acquisition Analyst",
		            "Administrative Asst.",
		            "Administrative Analyst",
		            "Administrator",
		            "Advertising Director",
		            "Aerospace Engineer",
		            "Agent",
		            "Agricultural Inspector",
		            "Agricultural Scientist",
		            "Air Traffic Controller",
		            "Animal Trainer",
		            "Anthropologist",
		            "Appraiser",
		            "Architect",
		            "Art Director",
		            "Artist",
		            "Astronomer",
		            "Athletic Coach",
		            "Auditor",
		            "Author",
		            "Baker",
		            "Banker",
		            "Bankruptcy Attorney",
		            "Benefits Manager",
		            "Biologist",
		            "Bio-feedback Specialist",
		            "Biomedical Engineer",
		            "Biotechnical Researcher",
		            "Broadcaster",
		            "Broker",
		            "Building Manager",
		            "Building Contractor",
		            "Building Inspector",
		            "Business Analyst",
		            "Business Planner",
		            "Business Manager",
		            "Buyer",
		            "Call Center Manager",
		            "Career Counselor",
		            "Cash Manager",
		            "Ceramic Engineer",
		            "Chief Executive Officer",
		            "Chief Operation Officer",
		            "Chef",
		            "Chemical Engineer",
		            "Chemist",
		            "Child Care Manager",
		            "Chief Medical Officer",
		            "Chiropractor",
		            "Cinematographer",
		            "City Housing Manager",
		            "City Manager",
		            "Civil Engineer",
		            "Claims Manager",
		            "Clinical Research Assistant",
		            "Collections Manager",
		            "Compliance Manager",
		            "Comptroller",
		            "Computer Manager",
		            "Commercial Artist",
		            "Communications Affairs Director",
		            "Communications Director",
		            "Communications Engineer",
		            "Compensation Analyst",
		            "Computer Programmer",
		            "Computer Ops. Manager",
		            "Computer Engineer",
		            "Computer Operator",
		            "Computer Graphics Specialist",
		            "Construction Engineer",
		            "Construction Manager",
		            "Consultant",
		            "Consumer Relations Manager",
		            "Contract Administrator",
		            "Copyright Attorney",
		            "Copywriter",
		            "Corporate Planner",
		            "Corrections Officer",
		            "Cosmetologist",
		            "Credit Analyst",
		            "Cruise Director",
		            "Chief Information Officer",
		            "Chief Technology Officer",
		            "Customer Service Manager",
		            "Cryptologist",
		            "Dancer",
		            "Data Security Manager",
		            "Database Manager",
		            "Day Care Instructor",
		            "Dentist",
		            "Designer",
		            "Design Engineer",
		            "Desktop Publisher",
		            "Developer",
		            "Development Officer",
		            "Diamond Merchant",
		            "Dietitian",
		            "Direct Marketer",
		            "Director",
		            "Distribution Manager",
		            "Diversity Manager",
		            "Economist",
		            "EEO Compliance Manager",
		            "Editor",
		            "Education Adminator",
		            "Electrical Engineer",
		            "Electro Optical Engineer",
		            "Electronics Engineer",
		            "Embassy Management",
		            "Employment Agent",
		            "Engineer Technician",
		            "Entrepreneur",
		            "Environmental Analyst",
		            "Environmental Attorney",
		            "Environmental Engineer",
		            "Environmental Specialist",
		            "Escrow Officer",
		            "Estimator",
		            "Executive Assistant",
		            "Executive Director",
		            "Executive Recruiter",
		            "Facilities Manager",
		            "Family Counselor",
		            "Fashion Events Manager",
		            "Fashion Merchandiser",
		            "Fast Food Manager",
		            "Film Producer",
		            "Film Production Assistant",
		            "Financial Analyst",
		            "Financial Planner",
		            "Financier",
		            "Fine Artist",
		            "Wildlife Specialist",
		            "Fitness Consultant",
		            "Flight Attendant",
		            "Flight Engineer",
		            "Floral Designer",
		            "Food & Beverage Director",
		            "Food Service Manager",
		            "Forestry Technician",
		            "Franchise Management",
		            "Franchise Sales",
		            "Fraud Investigator",
		            "Freelance Writer",
		            "Fund Raiser",
		            "General Manager",
		            "Geologist",
		            "General Counsel",
		            "Geriatric Specialist",
		            "Gerontologist",
		            "Glamour Photographer",
		            "Golf Club Manager",
		            "Gourmet Chef",
		            "Graphic Designer",
		            "Grounds Keeper",
		            "Hazardous Waste Manager",
		            "Health Care Manager",
		            "Health Therapist",
		            "Health Service Administrator",
		            "Hearing Officer",
		            "Home Economist",
		            "Horticulturist",
		            "Hospital Administrator",
		            "Hotel Manager",
		            "Human Resources Manager",
		            "Importer",
		            "Industrial Designer",
		            "Industrial Engineer",
		            "Information Director",
		            "Inside Sales",
		            "Insurance Adjuster",
		            "Interior Decorator",
		            "Internal Controls Director",
		            "International Acct.",
		            "International Courier",
		            "International Lawyer",
		            "Interpreter",
		            "Investigator",
		            "Investment Banker",
		            "Investment Manager",
		            "IT Architect",
		            "IT Project Manager",
		            "IT Systems Analyst",
		            "Jeweler",
		            "Joint Venture Manager",
		            "Journalist",
		            "Labor Negotiator",
		            "Labor Organizer",
		            "Labor Relations Manager",
		            "Lab Services Director",
		            "Lab Technician",
		            "Land Developer",
		            "Landscape Architect",
		            "Law Enforcement Officer",
		            "Lawyer",
		            "Lead Software Engineer",
		            "Lead Software Test Engineer",
		            "Leasing Manager",
		            "Legal Secretary",
		            "Library Manager",
		            "Litigation Attorney",
		            "Loan Officer",
		            "Lobbyist",
		            "Logistics Manager",
		            "Maintenance Manager",
		            "Management Consultant",
		            "Managed Care Director",
		            "Managing Partner",
		            "Manufacturing Director",
		            "Manpower Planner",
		            "Marine Biologist",
		            "Market Res. Analyst",
		            "Marketing Director",
		            "Materials Manager",
		            "Mathematician",
		            "Membership Chairman",
		            "Mechanic",
		            "Mechanical Engineer",
		            "Media Buyer",
		            "Medical Investor",
		            "Medical Secretary",
		            "Medical Technician",
		            "Mental Health Counselor",
		            "Merchandiser",
		            "Metallurgical Engineering",
		            "Meteorologist",
		            "Microbiologist",
		            "MIS Manager",
		            "Motion Picture Director",
		            "Multimedia Director",
		            "Musician",
		            "Network Administrator",
		            "Network Specialist",
		            "Network Operator",
		            "New Product Manager",
		            "Novelist",
		            "Nuclear Engineer",
		            "Nuclear Specialist",
		            "Nutritionist",
		            "Nursing Administrator",
		            "Occupational Therapist",
		            "Oceanographer",
		            "Office Manager",
		            "Operations Manager",
		            "Operations Research Director",
		            "Optical Technician",
		            "Optometrist",
		            "Organizational Development Manager",
		            "Outplacement Specialist",
		            "Paralegal",
		            "Park Ranger",
		            "Patent Attorney",
		            "Payroll Specialist",
		            "Personnel Specialist",
		            "Petroleum Engineer",
		            "Pharmacist",
		            "Photographer",
		            "Physical Therapist",
		            "Physician",
		            "Physician Assistant",
		            "Physicist",
		            "Planning Director",
		            "Podiatrist",
		            "Political Analyst",
		            "Political Scientist",
		            "Politician",
		            "Portfolio Manager",
		            "Preschool Management",
		            "Preschool Teacher",
		            "Principal",
		            "Private Banker",
		            "Private Investigator",
		            "Probation Officer",
		            "Process Engineer",
		            "Producer",
		            "Product Manager",
		            "Product Engineer",
		            "Production Engineer",
		            "Production Planner",
		            "Professional Athlete",
		            "Professional Coach",
		            "Professor",
		            "Project Engineer",
		            "Project Manager",
		            "Program Manager",
		            "Property Manager",
		            "Public Administrator",
		            "Public Safety Director",
		            "PR Specialist",
		            "Publisher",
		            "Purchasing Agent",
		            "Publishing Director",
		            "Quality Assurance Specialist",
		            "Quality Control Engineer",
		            "Quality Control Inspector",
		            "Radiology Manager",
		            "Railroad Engineer",
		            "Real Estate Broker",
		            "Recreational Director",
		            "Recruiter",
		            "Redevelopment Specialist",
		            "Regulatory Affairs Manager",
		            "Registered Nurse",
		            "Rehabilitation Counselor",
		            "Relocation Manager",
		            "Reporter",
		            "Research Specialist",
		            "Restaurant Manager",
		            "Retail Store Manager",
		            "Risk Analyst",
		            "Safety Engineer",
		            "Sales Engineer",
		            "Sales Trainer",
		            "Sales Promotion Manager",
		            "Sales Representative",
		            "Sales Manager",
		            "Service Manager",
		            "Sanitation Engineer",
		            "Scientific Programmer",
		            "Scientific Writer",
		            "Securities Analyst",
		            "Security Consultant",
		            "Security Director",
		            "Seminar Presenter",
		            "Ship's Officer",
		            "Singer",
		            "Social Director",
		            "Social Program Planner",
		            "Social Research",
		            "Social Scientist",
		            "Social Worker",
		            "Sociologist",
		            "Software Developer",
		            "Software Engineer",
		            "Software Test Engineer",
		            "Soil Scientist",
		            "Special Events Manager",
		            "Special Education Teacher",
		            "Special Projects Director",
		            "Speech Pathologist",
		            "Speech Writer",
		            "Sports Event Manager",
		            "Statistician",
		            "Store Manager",
		            "Strategic Alliance Director",
		            "Strategic Planning Director",
		            "Stress Reduction Specialist",
		            "Stockbroker",
		            "Surveyor",
		            "Structural Engineer",
		            "Superintendent",
		            "Supply Chain Director",
		            "System Engineer",
		            "Systems Analyst",
		            "Systems Programmer",
		            "System Administrator",
		            "Tax Specialist",
		            "Teacher",
		            "Technical Support Specialist",
		            "Technical Illustrator",
		            "Technical Writer",
		            "Technology Director",
		            "Telecom Analyst",
		            "Telemarketer",
		            "Theatrical Director",
		            "Title Examiner",
		            "Tour Escort",
		            "Tour Guide Director",
		            "Traffic Manager",
		            "Trainer Translator",
		            "Transportation Manager",
		            "Travel Agent",
		            "Treasurer",
		            "TV Programmer",
		            "Underwriter",
		            "Union Representative",
		            "University Administrator",
		            "University Dean",
		            "Urban Planner",
		            "Veterinarian",
		            "Vendor Relations Director",
		            "Viticulturist",
		            "Warehouse Manager"
		        ],
		        animals : {
		          //list of ocean animals comes from https://owlcation.com/stem/list-of-ocean-animals
		          "ocean" : ["Acantharea","Anemone","Angelfish King","Ahi Tuna","Albacore","American Oyster","Anchovy","Armored Snail","Arctic Char","Atlantic Bluefin Tuna","Atlantic Cod","Atlantic Goliath Grouper","Atlantic Trumpetfish","Atlantic Wolffish","Baleen Whale","Banded Butterflyfish","Banded Coral Shrimp","Banded Sea Krait","Barnacle","Barndoor Skate","Barracuda","Basking Shark","Bass","Beluga Whale","Bluebanded Goby","Bluehead Wrasse","Bluefish","Bluestreak Cleaner-Wrasse","Blue Marlin","Blue Shark","Blue Spiny Lobster","Blue Tang","Blue Whale","Broadclub Cuttlefish","Bull Shark","Chambered Nautilus","Chilean Basket Star","Chilean Jack Mackerel","Chinook Salmon","Christmas Tree Worm","Clam","Clown Anemonefish","Clown Triggerfish","Cod","Coelacanth","Cockscomb Cup Coral","Common Fangtooth","Conch","Cookiecutter Shark","Copepod","Coral","Corydoras","Cownose Ray","Crab","Crown-of-Thorns Starfish","Cushion Star","Cuttlefish","California Sea Otters","Dolphin","Dolphinfish","Dory","Devil Fish","Dugong","Dumbo Octopus","Dungeness Crab","Eccentric Sand Dollar","Edible Sea Cucumber","Eel","Elephant Seal","Elkhorn Coral","Emperor Shrimp","Estuarine Crocodile","Fathead Sculpin","Fiddler Crab","Fin Whale","Flameback","Flamingo Tongue Snail","Flashlight Fish","Flatback Turtle","Flatfish","Flying Fish","Flounder","Fluke","French Angelfish","Frilled Shark","Fugu (also called Pufferfish)","Gar","Geoduck","Giant Barrel Sponge","Giant Caribbean Sea Anemone","Giant Clam","Giant Isopod","Giant Kingfish","Giant Oarfish","Giant Pacific Octopus","Giant Pyrosome","Giant Sea Star","Giant Squid","Glowing Sucker Octopus","Giant Tube Worm","Goblin Shark","Goosefish","Great White Shark","Greenland Shark","Grey Atlantic Seal","Grouper","Grunion","Guineafowl Puffer","Haddock","Hake","Halibut","Hammerhead Shark","Hapuka","Harbor Porpoise","Harbor Seal","Hatchetfish","Hawaiian Monk Seal","Hawksbill Turtle","Hector's Dolphin","Hermit Crab","Herring","Hoki","Horn Shark","Horseshoe Crab","Humpback Anglerfish","Humpback Whale","Icefish","Imperator Angelfish","Irukandji Jellyfish","Isopod","Ivory Bush Coral","Japanese Spider Crab","Jellyfish","John Dory","Juan Fernandez Fur Seal","Killer Whale","Kiwa Hirsuta","Krill","Lagoon Triggerfish","Lamprey","Leafy Seadragon","Leopard Seal","Limpet","Ling","Lionfish","Lions Mane Jellyfish","Lobe Coral","Lobster","Loggerhead Turtle","Longnose Sawshark","Longsnout Seahorse","Lophelia Coral","Marrus Orthocanna","Manatee","Manta Ray","Marlin","Megamouth Shark","Mexican Lookdown","Mimic Octopus","Moon Jelly","Mollusk","Monkfish","Moray Eel","Mullet","Mussel","Megaladon","Napoleon Wrasse","Nassau Grouper","Narwhal","Nautilus","Needlefish","Northern Seahorse","North Atlantic Right Whale","Northern Red Snapper","Norway Lobster","Nudibranch","Nurse Shark","Oarfish","Ocean Sunfish","Oceanic Whitetip Shark","Octopus","Olive Sea Snake","Orange Roughy","Ostracod","Otter","Oyster","Pacific Angelshark","Pacific Blackdragon","Pacific Halibut","Pacific Sardine","Pacific Sea Nettle Jellyfish","Pacific White Sided Dolphin","Pantropical Spotted Dolphin","Patagonian Toothfish","Peacock Mantis Shrimp","Pelagic Thresher Shark","Penguin","Peruvian Anchoveta","Pilchard","Pink Salmon","Pinniped","Plankton","Porpoise","Polar Bear","Portuguese Man o' War","Pycnogonid Sea Spider","Quahog","Queen Angelfish","Queen Conch","Queen Parrotfish","Queensland Grouper","Ragfish","Ratfish","Rattail Fish","Ray","Red Drum","Red King Crab","Ringed Seal","Risso's Dolphin","Ross Seals","Sablefish","Salmon","Sand Dollar","Sandbar Shark","Sawfish","Sarcastic Fringehead","Scalloped Hammerhead Shark","Seahorse","Sea Cucumber","Sea Lion","Sea Urchin","Seal","Shark","Shortfin Mako Shark","Shovelnose Guitarfish","Shrimp","Silverside Fish","Skipjack Tuna","Slender Snipe Eel","Smalltooth Sawfish","Smelts","Sockeye Salmon","Southern Stingray","Sponge","Spotted Porcupinefish","Spotted Dolphin","Spotted Eagle Ray","Spotted Moray","Squid","Squidworm","Starfish","Stickleback","Stonefish","Stoplight Loosejaw","Sturgeon","Swordfish","Tan Bristlemouth","Tasseled Wobbegong","Terrible Claw Lobster","Threespot Damselfish","Tiger Prawn","Tiger Shark","Tilefish","Toadfish","Tropical Two-Wing Flyfish","Tuna","Umbrella Squid","Velvet Crab","Venus Flytrap Sea Anemone","Vigtorniella Worm","Viperfish","Vampire Squid","Vaquita","Wahoo","Walrus","West Indian Manatee","Whale","Whale Shark","Whiptail Gulper","White-Beaked Dolphin","White-Ring Garden Eel","White Shrimp","Wobbegong","Wrasse","Wreckfish","Xiphosura","Yellowtail Damselfish","Yelloweye Rockfish","Yellow Cup Black Coral","Yellow Tube Sponge","Yellowfin Tuna","Zebrashark","Zooplankton"],
		          //list of desert, grassland, and forest animals comes from http://www.skyenimals.com/
		          "desert" : ["Aardwolf","Addax","African Wild Ass","Ant","Antelope","Armadillo","Baboon","Badger","Bat","Bearded Dragon","Beetle","Bird","Black-footed Cat","Boa","Brown Bear","Bustard","Butterfly","Camel","Caracal","Caracara","Caterpillar","Centipede","Cheetah","Chipmunk","Chuckwalla","Climbing Mouse","Coati","Cobra","Cotton Rat","Cougar","Courser","Crane Fly","Crow","Dassie Rat","Dove","Dunnart","Eagle","Echidna","Elephant","Emu","Falcon","Fly","Fox","Frogmouth","Gecko","Geoffroy's Cat","Gerbil","Grasshopper","Guanaco","Gundi","Hamster","Hawk","Hedgehog","Hyena","Hyrax","Jackal","Kangaroo","Kangaroo Rat","Kestrel","Kowari","Kultarr","Leopard","Lion","Macaw","Meerkat","Mouse","Oryx","Ostrich","Owl","Pronghorn","Python","Rabbit","Raccoon","Rattlesnake","Rhinoceros","Sand Cat","Spectacled Bear","Spiny Mouse","Starling","Stick Bug","Tarantula","Tit","Toad","Tortoise","Tyrant Flycatcher","Viper","Vulture","Waxwing","Xerus","Zebra"],
		          "grassland" : ["Aardvark","Aardwolf","Accentor","African Buffalo","African Wild Dog","Alpaca","Anaconda","Ant","Anteater","Antelope","Armadillo","Baboon","Badger","Bandicoot","Barbet","Bat","Bee","Bee-eater","Beetle","Bird","Bison","Black-footed Cat","Black-footed Ferret","Bluebird","Boa","Bowerbird","Brown Bear","Bush Dog","Bushshrike","Bustard","Butterfly","Buzzard","Caracal","Caracara","Cardinal","Caterpillar","Cheetah","Chipmunk","Civet","Climbing Mouse","Clouded Leopard","Coati","Cobra","Cockatoo","Cockroach","Common Genet","Cotton Rat","Cougar","Courser","Coyote","Crane","Crane Fly","Cricket","Crow","Culpeo","Death Adder","Deer","Deer Mouse","Dingo","Dinosaur","Dove","Drongo","Duck","Duiker","Dunnart","Eagle","Echidna","Elephant","Elk","Emu","Falcon","Finch","Flea","Fly","Flying Frog","Fox","Frog","Frogmouth","Garter Snake","Gazelle","Gecko","Geoffroy's Cat","Gerbil","Giant Tortoise","Giraffe","Grasshopper","Grison","Groundhog","Grouse","Guanaco","Guinea Pig","Hamster","Harrier","Hartebeest","Hawk","Hedgehog","Helmetshrike","Hippopotamus","Hornbill","Hyena","Hyrax","Impala","Jackal","Jaguar","Jaguarundi","Kangaroo","Kangaroo Rat","Kestrel","Kultarr","Ladybug","Leopard","Lion","Macaw","Meerkat","Mouse","Newt","Oryx","Ostrich","Owl","Pangolin","Pheasant","Prairie Dog","Pronghorn","Przewalski's Horse","Python","Quoll","Rabbit","Raven","Rhinoceros","Shelduck","Sloth Bear","Spectacled Bear","Squirrel","Starling","Stick Bug","Tamandua","Tasmanian Devil","Thornbill","Thrush","Toad","Tortoise"],
		          "forest" : ["Agouti","Anaconda","Anoa","Ant","Anteater","Antelope","Armadillo","Asian Black Bear","Aye-aye","Babirusa","Baboon","Badger","Bandicoot","Banteng","Barbet","Basilisk","Bat","Bearded Dragon","Bee","Bee-eater","Beetle","Bettong","Binturong","Bird-of-paradise","Bongo","Bowerbird","Bulbul","Bush Dog","Bushbaby","Bushshrike","Butterfly","Buzzard","Caecilian","Cardinal","Cassowary","Caterpillar","Centipede","Chameleon","Chimpanzee","Cicada","Civet","Clouded Leopard","Coati","Cobra","Cockatoo","Cockroach","Colugo","Cotinga","Cotton Rat","Cougar","Crane Fly","Cricket","Crocodile","Crow","Cuckoo","Cuscus","Death Adder","Deer","Dhole","Dingo","Dinosaur","Drongo","Duck","Duiker","Eagle","Echidna","Elephant","Finch","Flat-headed Cat","Flea","Flowerpecker","Fly","Flying Frog","Fossa","Frog","Frogmouth","Gaur","Gecko","Gorilla","Grison","Hawaiian Honeycreeper","Hawk","Hedgehog","Helmetshrike","Hornbill","Hyrax","Iguana","Jackal","Jaguar","Jaguarundi","Kestrel","Ladybug","Lemur","Leopard","Lion","Macaw","Mandrill","Margay","Monkey","Mouse","Mouse Deer","Newt","Okapi","Old World Flycatcher","Orangutan","Owl","Pangolin","Peafowl","Pheasant","Possum","Python","Quokka","Rabbit","Raccoon","Red Panda","Red River Hog","Rhinoceros","Sloth Bear","Spectacled Bear","Squirrel","Starling","Stick Bug","Sun Bear","Tamandua","Tamarin","Tapir","Tarantula","Thrush","Tiger","Tit","Toad","Tortoise","Toucan","Trogon","Trumpeter","Turaco","Turtle","Tyrant Flycatcher","Viper","Vulture","Wallaby","Warbler","Wasp","Waxwing","Weaver","Weaver-finch","Whistler","White-eye","Whydah","Woodswallow","Worm","Wren","Xenops","Yellowjacket","Accentor","African Buffalo","American Black Bear","Anole","Bird","Bison","Boa","Brown Bear","Chipmunk","Common Genet","Copperhead","Coyote","Deer Mouse","Dormouse","Elk","Emu","Fisher","Fox","Garter Snake","Giant Panda","Giant Tortoise","Groundhog","Grouse","Guanaco","Himalayan Tahr","Kangaroo","Koala","Numbat","Quoll","Raccoon dog","Tasmanian Devil","Thornbill","Turkey","Vole","Weasel","Wildcat","Wolf","Wombat","Woodchuck","Woodpecker"],
		          //list of farm animals comes from https://www.buzzle.com/articles/farm-animals-list.html
		          "farm" : ["Alpaca","Buffalo","Banteng","Cow","Cat","Chicken","Carp","Camel","Donkey","Dog","Duck","Emu","Goat","Gayal","Guinea","Goose","Horse","Honey","Llama","Pig","Pigeon","Rhea","Rabbit","Sheep","Silkworm","Turkey","Yak","Zebu"],
		          //list of pet animals comes from https://www.dogbreedinfo.com/pets/pet.htm
		          "pet" : ["Bearded Dragon","Birds","Burro","Cats","Chameleons","Chickens","Chinchillas","Chinese Water Dragon","Cows","Dogs","Donkey","Ducks","Ferrets","Fish","Geckos","Geese","Gerbils","Goats","Guinea Fowl","Guinea Pigs","Hamsters","Hedgehogs","Horses","Iguanas","Llamas","Lizards","Mice","Mule","Peafowl","Pigs and Hogs","Pigeons","Ponies","Pot Bellied Pig","Rabbits","Rats","Sheep","Skinks","Snakes","Stick Insects","Sugar Gliders","Tarantula","Turkeys","Turtles"],
		          //list of zoo animals comes from https://bronxzoo.com/animals
		          "zoo" : ["Aardvark","African Wild Dog","Aldabra Tortoise","American Alligator","American Bison","Amur Tiger","Anaconda","Andean Condor","Asian Elephant","Baby Doll Sheep","Bald Eagle","Barred Owl","Blue Iguana","Boer Goat","California Sea Lion","Caribbean Flamingo","Chinchilla","Collared Lemur","Coquerel's Sifaka","Cuban Amazon Parrot","Ebony Langur","Fennec Fox","Fossa","Gelada","Giant Anteater","Giraffe","Gorilla","Grizzly Bear","Henkel's Leaf-tailed Gecko","Indian Gharial","Indian Rhinoceros","King Cobra","King Vulture","Komodo Dragon","Linne's Two-toed Sloth","Lion","Little Penguin","Madagascar Tree Boa","Magellanic Penguin","Malayan Tapir","Malayan Tiger","Matschies Tree Kangaroo","Mini Donkey","Monarch Butterfly","Nile crocodile","North American Porcupine","Nubian Ibex","Okapi","Poison Dart Frog","Polar Bear","Pygmy Marmoset","Radiated Tortoise","Red Panda","Red Ruffed Lemur","Ring-tailed Lemur","Ring-tailed Mongoose","Rock Hyrax","Small Clawed Asian Otter","Snow Leopard","Snowy Owl","Southern White-faced Owl","Southern White Rhinocerous","Squirrel Monkey","Tufted Puffin","White Cheeked Gibbon","White-throated Bee Eater","Zebra"]
		        },
		        primes: [
		            // 1230 first primes, i.e. all primes up to the first one greater than 10000, inclusive.
		            2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973,10007
		        ],
		        emotions: [
		            "love",
		            "joy",
		            "surprise",
		            "anger",
		            "sadness",
		            "fear"
		        ],
		        music_genres: {
		            'general': [
		                'Rock', 
		                'Pop', 
		                'Hip-Hop', 
		                'Jazz', 
		                'Classical', 
		                'Electronic', 
		                'Country', 
		                'R&B', 
		                'Reggae', 
		                'Blues', 
		                'Metal', 
		                'Folk', 
		                'Alternative', 
		                'Punk',
		                'Disco', 
		                'Funk', 
		                'Techno',
		                'Indie',
		                'Gospel', 
		                'Dance', 
		                'Children\'s', 
		                'World'
		            ],
		            'alternative': [
		                'Art Punk',
		                'Alternative Rock',
		                'Britpunk',
		                'College Rock',
		                'Crossover Thrash',
		                'Crust Punk',
		                'Emo / Emocore',
		                'Experimental Rock',
		                'Folk Punk',
		                'Goth / Gothic Rock',
		                'Grunge',
		                'Hardcore Punk',
		                'Hard Rock',
		                'Indie Rock',
		                'Lo-fi',
		                'Musique Concrète',
		                'New Wave',
		                'Progressive Rock',
		                'Punk',
		                'Shoegaze',
		                'Steampunk',
		            ], 'blues': [
		                'Acoustic Blues',
		                'African Blues',
		                'Blues Rock',
		                'Blues Shouter',
		                'British Blues',
		                'Canadian Blues',
		                'Chicago Blues',
		                'Classic Blues',
		                'Classic Female Blues',
		                'Contemporary Blues',
		                'Country Blues',
		                'Dark Blues',
		                'Delta Blues',
		                'Detroit Blues',
		                'Doom Blues',
		                'Electric Blues',
		                'Folk Blues',
		                'Gospel Blues',
		                'Harmonica Blues',
		                'Hill Country Blues',
		                'Hokum Blues',
		                'Jazz Blues',
		                'Jump Blues',
		                'Kansas City Blues',
		                'Louisiana Blues',
		                'Memphis Blues',
		                'Modern Blues',
		                'New Orlean Blues',
		                'NY Blues',
		                'Piano Blues',
		                'Piedmont Blues',
		                'Punk Blues',
		                'Ragtime Blues',
		                'Rhythm Blues',
		                'Soul Blues',
		                'St.Louis Blues',
		                'Soul Blues',
		                'Swamp Blues',
		                'Texas Blues',
		                'Urban Blues',
		                'Vandeville',
		                'West Coast Blues',
		            ], 'children\'s': [
		                'Lullabies',
		                'Sing - Along',
		                'Stories'
		            ], 'classical': [
		                'Avant-Garde',
		                'Ballet',
		                'Baroque',
		                'Cantata',
		                'Chamber Music',
		                'String Quartet',
		                'Chant',
		                'Choral',
		                'Classical Crossover',
		                'Concerto',
		                'Concerto Grosso',
		                'Contemporary Classical',
		                'Early Music',
		                'Expressionist',
		                'High Classical',
		                'Impressionist',
		                'Mass Requiem',
		                'Medieval',
		                'Minimalism',
		                'Modern Composition',
		                'Modern Classical',
		                'Opera',
		                'Oratorio',
		                'Orchestral',
		                'Organum',
		                'Renaissance',
		                'Romantic (early period)',
		                'Romantic (later period)',
		                'Sonata',
		                'Symphonic',
		                'Symphony',
		                'Twelve-tone',
		                'Wedding Music'
		            ], 'country': [
		                'Alternative Country',
		                'Americana',
		                'Australian Country',
		                'Bakersfield Sound',
		                'Bluegrass',
		                'Blues Country',
		                'Cajun Fiddle Tunes',
		                'Christian Country',
		                'Classic Country',
		                'Close Harmony',
		                'Contemporary Bluegrass',
		                'Contemporary Country',
		                'Country Gospel',
		                'Country Pop',
		                'Country Rap',
		                'Country Rock',
		                'Country Soul',
		                'Cowboy / Western',
		                'Cowpunk',
		                'Dansband',
		                'Honky Tonk',
		                'Franco-Country',
		                'Gulf and Western',
		                'Hellbilly Music',
		                'Honky Tonk',
		                'Instrumental Country',
		                'Lubbock Sound',
		                'Nashville Sound',
		                'Neotraditional Country',
		                'Outlaw Country',
		                'Progressive',
		                'Psychobilly / Punkabilly',
		                'Red Dirt',
		                'Sertanejo',
		                'Texas County',
		                'Traditional Bluegrass',
		                'Traditional Country',
		                'Truck-Driving Country',
		                'Urban Cowboy',
		                'Western Swing'
		            ], 'dance': [
		                'Club / Club Dance',
		                'Breakcore',
		                'Breakbeat / Breakstep',
		                'Chillstep',
		                'Deep House',
		                'Dubstep',
		                'Dancehall',
		                'Electro House',
		                'Electroswing',
		                'Exercise',
		                'Future Garage',
		                'Garage',
		                'Glitch Hop',
		                'Glitch Pop',
		                'Grime',
		                'Hardcore',
		                'Hard Dance',
		                'Hi-NRG / Eurodance',
		                'Horrorcore',
		                'House',
		                'Jackin House',
		                'Jungle / Drum n bass',
		                'Liquid Dub',
		                'Regstep',
		                'Speedcore',
		                'Techno',
		                'Trance',
		                'Trap'
		            ], electronic: [
		                '2-Step',
		                '8bit',
		                'Ambient',
		                'Asian Underground',
		                'Bassline',
		                'Chillwave',
		                'Chiptune',
		                'Crunk',
		                'Downtempo',
		                'Drum & Bass',
		                'Hard Step',
		                'Electro',
		                'Electro-swing',
		                'Electroacoustic',
		                'Electronica',
		                'Electronic Rock',
		                'Eurodance',
		                'Hardstyle',
		                'Hi-Nrg',
		                'IDM/Experimental',
		                'Industrial',
		                'Trip Hop',
		                'Vaporwave',
		                'UK Garage',
		                'House',
		                'Dubstep',
		                'Deep House',
		                'EDM',
		                'Future Bass',
		                'Psychedelic trance'
		            ], 'jazz' : [
		                'Acid Jazz',
		                'Afro-Cuban Jazz',
		                'Avant-Garde Jazz',
		                'Bebop',
		                'Big Band',
		                'Blue Note',
		                'British Dance Band (Jazz)',
		                'Cape Jazz',
		                'Chamber Jazz',
		                'Contemporary Jazz',
		                'Continental Jazz',
		                'Cool Jazz',
		                'Crossover Jazz',
		                'Dark Jazz',
		                'Dixieland',
		                'Early Jazz',
		                'Electro Swing (Jazz)',
		                'Ethio-jazz',
		                'Ethno-Jazz',
		                'European Free Jazz',
		                'Free Funk (Avant-Garde / Funk Jazz)',
		                'Free Jazz',
		                'Fusion',
		                'Gypsy Jazz',
		                'Hard Bop',
		                'Indo Jazz',
		                'Jazz Blues',
		                'Jazz-Funk (see Free Funk)',
		                'Jazz-Fusion',
		                'Jazz Rap',
		                'Jazz Rock',
		                'Kansas City Jazz',
		                'Latin Jazz',
		                'M-Base Jazz',
		                'Mainstream Jazz',
		                'Modal Jazz',
		                'Neo-Bop',
		                'Neo-Swing',
		                'Nu Jazz',
		                'Orchestral Jazz',
		                'Post-Bop',
		                'Punk Jazz',
		                'Ragtime',
		                'Ska Jazz',
		                'Skiffle (also Folk)',
		                'Smooth Jazz',
		                'Soul Jazz',
		                'Swing Jazz',
		                'Straight-Ahead Jazz',
		                'Trad Jazz',
		                'Third Stream',
		                'Jazz-Funk',
		                'Free Jazz',
		                'West Coast Jazz'
		            ], 'metal': [
		                'Heavy Metal',
		                'Speed Metal',
		                'Thrash Metal',
		                'Power Metal',
		                'Death Metal',
		                'Black Metal',
		                'Pagan Metal',
		                'Viking Metal',
		                'Folk Metal',
		                'Symphonic Metal',
		                'Gothic Metal',
		                'Glam Metal',
		                'Hair Metal',
		                'Doom Metal',
		                'Groove Metal',
		                'Industrial Metal',
		                'Modern Metal',
		                'Neoclassical Metal',
		                'New Wave Of British Heavy Metal',
		                'Post Metal',
		                'Progressive Metal',
		                'Avantgarde Metal',
		                'Sludge',
		                'Djent',
		                'Drone',
		                'Kawaii Metal',
		                'Pirate Metal',
		                'Nu Metal',
		                'Neue Deutsche Härte',
		                'Math Metal',
		                'Crossover',
		                'Grindcore',
		                'Hardcore',
		                'Metalcore',
		                'Deathcore',
		                'Post Hardcore',
		                'Mathcore'
		            ], 'folk': [
		                'American Folk Revival',
		                'Anti - Folk',
		                'British Folk Revival',
		                'Contemporary Folk',
		                'Filk Music',
		                'Freak Folk',
		                'Indie Folk',
		                'Industrial Folk',
		                'Neofolk',
		                'Progressive Folk',
		                'Psychedelic Folk',
		                'Sung Poetry',
		                'Techno - Folk',
		                'Folk Rock',
		                'Old-time Music',
		                'Bluegrass',
		                'Appalachian',
		                'Roots Revival',
		                'Celtic',
		                'Indie Folk'
		            ], 'pop': [
		                'Adult Contemporary',
		                'Arab Pop',
		                'Baroque',
		                'Britpop',
		                'Bubblegum Pop',
		                'Chamber Pop',
		                'Chanson',
		                'Christian Pop',
		                'Classical Crossover',
		                'Europop',
		                'Austropop',
		                'Balkan Pop',
		                'French Pop',
		                'Korean Pop',
		                'Japanese Pop',
		                'Chinese Pop',
		                'Latin Pop',
		                'Laïkó',
		                'Nederpop',
		                'Russian Pop',
		                'Dance Pop',
		                'Dream Pop',
		                'Electro Pop',
		                'Iranian Pop',
		                'Jangle Pop',
		                'Latin Ballad',
		                'Levenslied',
		                'Louisiana Swamp Pop',
		                'Mexican Pop',
		                'Motorpop',
		                'New Romanticism',
		                'Orchestral Pop',
		                'Pop Rap',
		                'Popera',
		                'Pop / Rock',
		                'Pop Punk',
		                'Power Pop',
		                'Psychedelic Pop',
		                'Russian Pop',
		                'Schlager',
		                'Soft Rock',
		                'Sophisti - Pop',
		                'Space Age Pop',
		                'Sunshine Pop',
		                'Surf Pop',
		                'Synthpop',
		                'Teen Pop',
		                'Traditional Pop Music',
		                'Turkish Pop',
		                'Vispop',
		                'Wonky Pop'
		            ], 'r&b': [
		                '(Carolina) Beach Music',
		                'Contemporary R & B',
		                'Disco',
		                'Doo Wop',
		                'Funk',
		                'Modern Soul',
		                'Motown',
		                'Neo - Soul',
		                'Northern Soul',
		                'Psychedelic Soul',
		                'Quiet Storm',
		                'Soul',
		                'Soul Blues',
		                'Southern Soul'
		            ], 'reggae': [
		                '2 - Tone',
		                'Dub',
		                'Roots Reggae',
		                'Reggae Fusion',
		                'Reggae en Español',
		                'Spanish Reggae',
		                'Reggae 110',
		                'Reggae Bultrón',
		                'Romantic Flow',
		                'Lovers Rock',
		                'Raggamuffin',
		                'Ragga',
		                'Dancehall',
		                'Ska',
		            ], 'rock': [
		                'Acid Rock',
		                'Adult - Oriented Rock',
		                'Afro Punk',
		                'Adult Alternative',
		                'Alternative Rock',
		                'American Traditional Rock',
		                'Anatolian Rock',
		                'Arena Rock',
		                'Art Rock',
		                'Blues - Rock',
		                'British Invasion',
		                'Cock Rock',
		                'Death Metal / Black Metal',
		                'Doom Metal',
		                'Glam Rock',
		                'Gothic Metal',
		                'Grind Core',
		                'Hair Metal',
		                'Hard Rock',
		                'Math Metal',
		                'Math Rock',
		                'Metal',
		                'Metal Core',
		                'Noise Rock',
		                'Jam Bands',
		                'Post Punk',
		                'Post Rock',
		                'Prog - Rock / Art Rock',
		                'Progressive Metal',
		                'Psychedelic',
		                'Rock & Roll',
		                'Rockabilly',
		                'Roots Rock',
		                'Singer / Songwriter',
		                'Southern Rock',
		                'Spazzcore',
		                'Stoner Metal',
		                'Surf',
		                'Technical Death Metal',
		                'Tex - Mex',
		                'Thrash Metal',
		                'Time Lord Rock(Trock)',
		                'Trip - hop',
		                'Yacht Rock',
		                'School House Rock'
		            ], 'hip-hop': [
		                'Alternative Rap',
		                'Avant - Garde',
		                'Bounce',
		                'Chap Hop',
		                'Christian Hip Hop',
		                'Conscious Hip Hop',
		                'Country - Rap',
		                'Grunk',
		                'Crunkcore',
		                'Cumbia Rap',
		                'Dirty South',
		                'East Coast',
		                'Brick City Club',
		                'Hardcore Hip Hop',
		                'Mafioso Rap',
		                'New Jersey Hip Hop',
		                'Freestyle Rap',
		                'G - Funk',
		                'Gangsta Rap',
		                'Golden Age',
		                'Grime',
		                'Hardcore Rap',
		                'Hip - Hop',
		                'Hip Pop',
		                'Horrorcore',
		                'Hyphy',
		                'Industrial Hip Hop',
		                'Instrumental Hip Hop',
		                'Jazz Rap',
		                'Latin Rap',
		                'Low Bap',
		                'Lyrical Hip Hop',
		                'Merenrap',
		                'Midwest Hip Hop',
		                'Chicago Hip Hop',
		                'Detroit Hip Hop',
		                'Horrorcore',
		                'St.Louis Hip Hop',
		                'Twin Cities Hip Hop',
		                'Motswako',
		                'Nerdcore',
		                'New Jack Swing',
		                'New School Hip Hop',
		                'Old School Rap',
		                'Rap',
		                'Trap',
		                'Turntablism',
		                'Underground Rap',
		                'West Coast Rap',
		                'East Coast Rap',
		                'Trap',
		                'UK Grime',
		                'Hyphy',
		                'Emo-rap',
		                'Cloud rap',
		                'G-funk',
		                'Boom Bap',
		                'Mumble',
		                'Drill',
		                'UK Drill',
		                'Soundcloud Rap',
		                'Lo-fi'
		            ], 'punk': [
		                'Afro-punk',
		                'Anarcho punk',
		                'Art punk',
		                'Christian punk',
		                'Crust punk',
		                'Deathrock',
		                'Egg punk',
		                'Garage punk',
		                'Glam punk',
		                'Hardcore punk',
		                'Horror punk',
		                'Incelcore/e-punk',
		                'Oi!',
		                'Peace punk',
		                'Punk pathetique',
		                'Queercore',
		                'Riot Grrrl',
		                'Skate punk',
		                'Street punk',
		                'Taqwacore',
		                'Trallpunk'
		            ], 'disco': [
		                'Nu-disco',
		                'Disco-funk',
		                'Hi-NRG',
		                'Italo Disco',
		                'Eurodisco',
		                'Boogie',
		                'Space Disco',
		                'Post-disco',
		                'Electro Disco',
		                'Disco House',
		                'Disco Pop',
		                'Soulful House'
		            ], 'funk': [
		                'Funk Rock',
		                'P-Funk (Parliament-Funkadelic)',
		                'Psychedelic Funk',
		                'Funk Metal',
		                'Electro-Funk',
		                'Go-go',
		                'Boogie-Funk',
		                'Jazz-Funk',
		                'Soul-Funk',
		                'Funky Disco',
		                'Nu-Funk',
		                'Afrobeat',
		                'Latin Funk',
		                'G-Funk',
		                'Acid Jazz',
		                'Funktronica',
		                'Folk-Funk',
		                'Space Funk',
		                'Ambient Funk',
		                'Hard Funk',
		                'Fusion Funk'
		            ], 'techno': [
		                'Acid Techno',
		                'Ambient Techno',
		                'Detroit Techno',
		                'Dub Techno',
		                'Minimal Techno',
		                'Industrial Techno',
		                'Hard Techno',
		                'Trance',
		                'Progressive Techno',
		                'Tech House',
		                'Electronica',
		                'Breakbeat Techno',
		                'Electro Techno',
		                'Melodic Techno',
		                'Experimental Techno',
		                'Dark Techno',
		                'Ebm',
		                'Hypnotic Techno',
		                'Psychedelic Techno',
		                'Rave Techno',
		                'Techno-Pop'
		            ], 'indie': [
		                'Indie Rock',
		                'Indie Pop',
		                'Indie Folk',
		                'Indie Electronic',
		                'Indie Punk',
		                'Indie Hip-Hop',
		                'Dream Pop',
		                'Shoegaze',
		                'Lo-fi',
		                'Chillwave',
		                'Freak Folk',
		                'Noise Pop',
		                'Math Rock',
		                'Post-Punk',
		                'Garage Rock',
		                'Experimental Indie',
		                'Surf Rock',
		                'Alternative Country',
		                'Indie Soul',
		                'Art Rock',
		                'Indie R&B',
		                'Indietronica',
		                'Emo',
		                'Post-Rock',
		                'Indie Pop-Rock',
		                'Indie Synthpop',
		                'Noise Rock',
		                'Psych Folk',
		                'Indie Blues'
		            ], 'gospel': [
		                'Traditional Gospel',
		                'Contemporary Gospel',
		                'Southern Gospel',
		                'Black Gospel',
		                'Urban Contemporary Gospel',
		                'Gospel Blues',
		                'Bluegrass Gospel',
		                'Country Gospel',
		                'Praise and Worship',
		                'Christian Hip-Hop',
		                'Gospel Jazz',
		                'Reggae Gospel',
		                'African Gospel',
		                'Latin Gospel',
		                'R&B Gospel',
		                'Gospel Choir',
		                'Acappella Gospel',
		                'Instrumental Gospel',
		                'Gospel Rap'
		            ], 'world': [
		                'African',
		                'Arabic',
		                'Asian',
		                'Caribbean',
		                'Celtic',
		                'European',
		                'Latin American',
		                'Middle Eastern',
		                'Native American',
		                'Polynesian',
		                'Reggae',
		                'Ska',
		                'Salsa',
		                'Flamenco',
		                'Bossa Nova',
		                'Tango',
		                'Fado',
		                'Klezmer',
		                'Balkan',
		                'Afrobeat',
		                'Mongolian Throat Singing',
		                'Indian Classical',
		                'Gamelan',
		                'Sufi Music',
		                'Zydeco',
		                'Kora Music',
		                'Andean Music',
		                'Irish Traditional',
		                'Gypsy Jazz',
		                'Bollywood',
		                'Bhangra',
		                'Jawaiian',
		                'Hawaiian Slack Key Guitar',
		                'Calypso',
		                'Cuban Son',
		                'Taiko Drumming',
		                'African Highlife',
		                'Merengue',
		                'Tuvan Throat Singing'
		            ]
		        },

		        // Data sourced from https://unicode.org/emoji/charts/full-emoji-list.html
		        emojis: {
		            "smileys_and_emotion": [
		                "0x1f600",
		                "0x1f603",
		                "0x1f604",
		                "0x1f601",
		                "0x1f606",
		                "0x1f605",
		                "0x1f923",
		                "0x1f602",
		                "0x1f642",
		                "0x1f643",
		                "0x1fae0",
		                "0x1f609",
		                "0x1f60a",
		                "0x1f607",
		                "0x1f970",
		                "0x1f60d",
		                "0x1f929",
		                "0x1f618",
		                "0x1f617",
		                "0x263a",
		                "0x1f61a",
		                "0x1f619",
		                "0x1f972",
		                "0x1f60b",
		                "0x1f61b",
		                "0x1f61c",
		                "0x1f92a",
		                "0x1f61d",
		                "0x1f911",
		                "0x1f917",
		                "0x1f92d",
		                "0x1fae2",
		                "0x1fae3",
		                "0x1f92b",
		                "0x1f914",
		                "0x1fae1",
		                "0x1f910",
		                "0x1f928",
		                "0x1f610",
		                "0x1f611",
		                "0x1f636",
		                "0x1fae5",
		                "0x1f636",
		                "0x200d",
		                "0x1f32b",
		                "0xfe0f",
		                "0x1f60f",
		                "0x1f612",
		                "0x1f644",
		                "0x1f62c",
		                "0x1f62e",
		                "0x200d",
		                "0x1f4a8",
		                "0x1f925",
		                "0x1fae8",
		                "0x1f642",
		                "0x200d",
		                "0x2194",
		                "0xfe0f",
		                "0x1f642",
		                "0x200d",
		                "0x2195",
		                "0xfe0f",
		                "0x1f60c",
		                "0x1f614",
		                "0x1f62a",
		                "0x1f924",
		                "0x1f634",
		                "0x1f637",
		                "0x1f912",
		                "0x1f915",
		                "0x1f922",
		                "0x1f92e",
		                "0x1f927",
		                "0x1f975",
		                "0x1f976",
		                "0x1f974",
		                "0x1f635",
		                "0x1f635",
		                "0x200d",
		                "0x1f4ab",
		                "0x1f92f",
		                "0x1f920",
		                "0x1f973",
		                "0x1f978",
		                "0x1f60e",
		                "0x1f913",
		                "0x1f9d0",
		                "0x1f615",
		                "0x1fae4",
		                "0x1f61f",
		                "0x1f641",
		                "0x2639",
		                "0x1f62e",
		                "0x1f62f",
		                "0x1f632",
		                "0x1f633",
		                "0x1f97a",
		                "0x1f979",
		                "0x1f626",
		                "0x1f627",
		                "0x1f628",
		                "0x1f630",
		                "0x1f625",
		                "0x1f622",
		                "0x1f62d",
		                "0x1f631",
		                "0x1f616",
		                "0x1f623",
		                "0x1f61e",
		                "0x1f613",
		                "0x1f629",
		                "0x1f62b",
		                "0x1f971",
		                "0x1f624",
		                "0x1f621",
		                "0x1f620",
		                "0x1f92c",
		                "0x1f608",
		                "0x1f47f",
		                "0x1f480",
		                "0x2620",
		                "0x1f4a9",
		                "0x1f921",
		                "0x1f479",
		                "0x1f47a",
		                "0x1f47b",
		                "0x1f47d",
		                "0x1f47e",
		                "0x1f916",
		                "0x1f63a",
		                "0x1f638",
		                "0x1f639",
		                "0x1f63b",
		                "0x1f63c",
		                "0x1f63d",
		                "0x1f640",
		                "0x1f63f",
		                "0x1f63e",
		                "0x1f648",
		                "0x1f649",
		                "0x1f64a",
		                "0x1f48c",
		                "0x1f498",
		                "0x1f49d",
		                "0x1f496",
		                "0x1f497",
		                "0x1f493",
		                "0x1f49e",
		                "0x1f495",
		                "0x1f49f",
		                "0x2763",
		                "0x1f494",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f525",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1fa79",
		                "0x2764",
		                "0x1fa77",
		                "0x1f9e1",
		                "0x1f49b",
		                "0x1f49a",
		                "0x1f499",
		                "0x1fa75",
		                "0x1f49c",
		                "0x1f90e",
		                "0x1f5a4",
		                "0x1fa76",
		                "0x1f90d",
		                "0x1f48b",
		                "0x1f4af",
		                "0x1f4a2",
		                "0x1f4a5",
		                "0x1f4ab",
		                "0x1f4a6",
		                "0x1f4a8",
		                "0x1f573",
		                "0x1f4ac",
		                "0x1f441",
		                "0xfe0f",
		                "0x200d",
		                "0x1f5e8",
		                "0xfe0f",
		                "0x1f5e8",
		                "0x1f5ef",
		                "0x1f4ad",
		                "0x1f4a4"
		            ],
		            "people_and_body": [
		                "0x1f44b",
		                "0x1f91a",
		                "0x1f590",
		                "0x270b",
		                "0x1f596",
		                "0x1faf1",
		                "0x1faf2",
		                "0x1faf3",
		                "0x1faf4",
		                "0x1faf7",
		                "0x1faf8",
		                "0x1f44c",
		                "0x1f90c",
		                "0x1f90f",
		                "0x270c",
		                "0x1f91e",
		                "0x1faf0",
		                "0x1f91f",
		                "0x1f918",
		                "0x1f919",
		                "0x1f448",
		                "0x1f449",
		                "0x1f446",
		                "0x1f595",
		                "0x1f447",
		                "0x261d",
		                "0x1faf5",
		                "0x1f44d",
		                "0x1f44e",
		                "0x270a",
		                "0x1f44a",
		                "0x1f91b",
		                "0x1f91c",
		                "0x1f44f",
		                "0x1f64c",
		                "0x1faf6",
		                "0x1f450",
		                "0x1f932",
		                "0x1f91d",
		                "0x1f64f",
		                "0x270d",
		                "0x1f485",
		                "0x1f933",
		                "0x1f4aa",
		                "0x1f9be",
		                "0x1f9bf",
		                "0x1f9b5",
		                "0x1f9b6",
		                "0x1f442",
		                "0x1f9bb",
		                "0x1f443",
		                "0x1f9e0",
		                "0x1fac0",
		                "0x1fac1",
		                "0x1f9b7",
		                "0x1f9b4",
		                "0x1f440",
		                "0x1f441",
		                "0x1f445",
		                "0x1f444",
		                "0x1fae6",
		                "0x1f476",
		                "0x1f9d2",
		                "0x1f466",
		                "0x1f467",
		                "0x1f9d1",
		                "0x1f471",
		                "0x1f468",
		                "0x1f9d4",
		                "0x1f9d4",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d4",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x1f9b0",
		                "0x1f468",
		                "0x200d",
		                "0x1f9b1",
		                "0x1f468",
		                "0x200d",
		                "0x1f9b3",
		                "0x1f468",
		                "0x200d",
		                "0x1f9b2",
		                "0x1f469",
		                "0x1f469",
		                "0x200d",
		                "0x1f9b0",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9b0",
		                "0x1f469",
		                "0x200d",
		                "0x1f9b1",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9b1",
		                "0x1f469",
		                "0x200d",
		                "0x1f9b3",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9b3",
		                "0x1f469",
		                "0x200d",
		                "0x1f9b2",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9b2",
		                "0x1f471",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f471",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d3",
		                "0x1f474",
		                "0x1f475",
		                "0x1f64d",
		                "0x1f64d",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f64d",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f64e",
		                "0x1f64e",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f64e",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f645",
		                "0x1f645",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f645",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f646",
		                "0x1f646",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f646",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f481",
		                "0x1f481",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f481",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f64b",
		                "0x1f64b",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f64b",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9cf",
		                "0x1f9cf",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9cf",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f647",
		                "0x1f647",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f647",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f926",
		                "0x1f926",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f926",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f937",
		                "0x1f937",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f937",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x2695",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x2695",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x2695",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f393",
		                "0x1f468",
		                "0x200d",
		                "0x1f393",
		                "0x1f469",
		                "0x200d",
		                "0x1f393",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f3eb",
		                "0x1f468",
		                "0x200d",
		                "0x1f3eb",
		                "0x1f469",
		                "0x200d",
		                "0x1f3eb",
		                "0x1f9d1",
		                "0x200d",
		                "0x2696",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x2696",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x2696",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f33e",
		                "0x1f468",
		                "0x200d",
		                "0x1f33e",
		                "0x1f469",
		                "0x200d",
		                "0x1f33e",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f373",
		                "0x1f468",
		                "0x200d",
		                "0x1f373",
		                "0x1f469",
		                "0x200d",
		                "0x1f373",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f527",
		                "0x1f468",
		                "0x200d",
		                "0x1f527",
		                "0x1f469",
		                "0x200d",
		                "0x1f527",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f3ed",
		                "0x1f468",
		                "0x200d",
		                "0x1f3ed",
		                "0x1f469",
		                "0x200d",
		                "0x1f3ed",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f4bc",
		                "0x1f468",
		                "0x200d",
		                "0x1f4bc",
		                "0x1f469",
		                "0x200d",
		                "0x1f4bc",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f52c",
		                "0x1f468",
		                "0x200d",
		                "0x1f52c",
		                "0x1f469",
		                "0x200d",
		                "0x1f52c",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f4bb",
		                "0x1f468",
		                "0x200d",
		                "0x1f4bb",
		                "0x1f469",
		                "0x200d",
		                "0x1f4bb",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f3a4",
		                "0x1f468",
		                "0x200d",
		                "0x1f3a4",
		                "0x1f469",
		                "0x200d",
		                "0x1f3a4",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f3a8",
		                "0x1f468",
		                "0x200d",
		                "0x1f3a8",
		                "0x1f469",
		                "0x200d",
		                "0x1f3a8",
		                "0x1f9d1",
		                "0x200d",
		                "0x2708",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x2708",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x2708",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f680",
		                "0x1f468",
		                "0x200d",
		                "0x1f680",
		                "0x1f469",
		                "0x200d",
		                "0x1f680",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f692",
		                "0x1f468",
		                "0x200d",
		                "0x1f692",
		                "0x1f469",
		                "0x200d",
		                "0x1f692",
		                "0x1f46e",
		                "0x1f46e",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f46e",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f575",
		                "0x1f575",
		                "0xfe0f",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f575",
		                "0xfe0f",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f482",
		                "0x1f482",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f482",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f977",
		                "0x1f477",
		                "0x1f477",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f477",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1fac5",
		                "0x1f934",
		                "0x1f478",
		                "0x1f473",
		                "0x1f473",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f473",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f472",
		                "0x1f9d5",
		                "0x1f935",
		                "0x1f935",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f935",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f470",
		                "0x1f470",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f470",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f930",
		                "0x1fac3",
		                "0x1fac4",
		                "0x1f931",
		                "0x1f469",
		                "0x200d",
		                "0x1f37c",
		                "0x1f468",
		                "0x200d",
		                "0x1f37c",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f37c",
		                "0x1f47c",
		                "0x1f385",
		                "0x1f936",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f384",
		                "0x1f9b8",
		                "0x1f9b8",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9b8",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9b9",
		                "0x1f9b9",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9b9",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9d9",
		                "0x1f9d9",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d9",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9da",
		                "0x1f9da",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9da",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9db",
		                "0x1f9db",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9db",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9dc",
		                "0x1f9dc",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9dc",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9dd",
		                "0x1f9dd",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9dd",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9de",
		                "0x1f9de",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9de",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9df",
		                "0x1f9df",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9df",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9cc",
		                "0x1f486",
		                "0x1f486",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f486",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f487",
		                "0x1f487",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f487",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6b6",
		                "0x1f6b6",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f6b6",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6b6",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f6b6",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f6b6",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9cd",
		                "0x1f9cd",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9cd",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9ce",
		                "0x1f9ce",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9ce",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9ce",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9ce",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9ce",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9af",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9af",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x1f9af",
		                "0x1f468",
		                "0x200d",
		                "0x1f9af",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x1f9af",
		                "0x1f469",
		                "0x200d",
		                "0x1f9af",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9bc",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9bc",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x1f9bc",
		                "0x1f468",
		                "0x200d",
		                "0x1f9bc",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x1f9bc",
		                "0x1f469",
		                "0x200d",
		                "0x1f9bc",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9bd",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9bd",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f468",
		                "0x200d",
		                "0x1f9bd",
		                "0x1f468",
		                "0x200d",
		                "0x1f9bd",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f469",
		                "0x200d",
		                "0x1f9bd",
		                "0x1f469",
		                "0x200d",
		                "0x1f9bd",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f3c3",
		                "0x1f3c3",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f3c3",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f3c3",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f3c3",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f3c3",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x200d",
		                "0x27a1",
		                "0xfe0f",
		                "0x1f483",
		                "0x1f57a",
		                "0x1f574",
		                "0x1f46f",
		                "0x1f46f",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f46f",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9d6",
		                "0x1f9d6",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d6",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9d7",
		                "0x1f9d7",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d7",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f93a",
		                "0x1f3c7",
		                "0x26f7",
		                "0x1f3c2",
		                "0x1f3cc",
		                "0x1f3cc",
		                "0xfe0f",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f3cc",
		                "0xfe0f",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f3c4",
		                "0x1f3c4",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f3c4",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6a3",
		                "0x1f6a3",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f6a3",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f3ca",
		                "0x1f3ca",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f3ca",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x26f9",
		                "0x26f9",
		                "0xfe0f",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x26f9",
		                "0xfe0f",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f3cb",
		                "0x1f3cb",
		                "0xfe0f",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f3cb",
		                "0xfe0f",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6b4",
		                "0x1f6b4",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f6b4",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6b5",
		                "0x1f6b5",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f6b5",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f938",
		                "0x1f938",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f938",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f93c",
		                "0x1f93c",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f93c",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f93d",
		                "0x1f93d",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f93d",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f93e",
		                "0x1f93e",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f93e",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f939",
		                "0x1f939",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f939",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f9d8",
		                "0x1f9d8",
		                "0x200d",
		                "0x2642",
		                "0xfe0f",
		                "0x1f9d8",
		                "0x200d",
		                "0x2640",
		                "0xfe0f",
		                "0x1f6c0",
		                "0x1f6cc",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f91d",
		                "0x200d",
		                "0x1f9d1",
		                "0x1f46d",
		                "0x1f46b",
		                "0x1f46c",
		                "0x1f48f",
		                "0x1f469",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f48b",
		                "0x200d",
		                "0x1f468",
		                "0x1f468",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f48b",
		                "0x200d",
		                "0x1f468",
		                "0x1f469",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f48b",
		                "0x200d",
		                "0x1f469",
		                "0x1f491",
		                "0x1f469",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f468",
		                "0x1f468",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f468",
		                "0x1f469",
		                "0x200d",
		                "0x2764",
		                "0xfe0f",
		                "0x200d",
		                "0x1f469",
		                "0x1f468",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x1f468",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f467",
		                "0x1f468",
		                "0x200d",
		                "0x1f468",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x1f468",
		                "0x200d",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f468",
		                "0x200d",
		                "0x1f466",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f467",
		                "0x1f469",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x1f469",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f467",
		                "0x1f468",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f466",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f466",
		                "0x1f468",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f467",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f466",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f466",
		                "0x1f469",
		                "0x200d",
		                "0x1f467",
		                "0x200d",
		                "0x1f467",
		                "0x1f5e3",
		                "0x1f464",
		                "0x1f465",
		                "0x1fac2",
		                "0x1f46a",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d2",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d2",
		                "0x200d",
		                "0x1f9d2",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d2",
		                "0x1f9d1",
		                "0x200d",
		                "0x1f9d2",
		                "0x200d",
		                "0x1f9d2",
		                "0x1f463"
		            ],
		            "animals_and_nature": [
		                "0x1f435",
		                "0x1f412",
		                "0x1f98d",
		                "0x1f9a7",
		                "0x1f436",
		                "0x1f415",
		                "0x1f9ae",
		                "0x1f415",
		                "0x200d",
		                "0x1f9ba",
		                "0x1f429",
		                "0x1f43a",
		                "0x1f98a",
		                "0x1f99d",
		                "0x1f431",
		                "0x1f408",
		                "0x1f408",
		                "0x200d",
		                "0x2b1b",
		                "0x1f981",
		                "0x1f42f",
		                "0x1f405",
		                "0x1f406",
		                "0x1f434",
		                "0x1face",
		                "0x1facf",
		                "0x1f40e",
		                "0x1f984",
		                "0x1f993",
		                "0x1f98c",
		                "0x1f9ac",
		                "0x1f42e",
		                "0x1f402",
		                "0x1f403",
		                "0x1f404",
		                "0x1f437",
		                "0x1f416",
		                "0x1f417",
		                "0x1f43d",
		                "0x1f40f",
		                "0x1f411",
		                "0x1f410",
		                "0x1f42a",
		                "0x1f42b",
		                "0x1f999",
		                "0x1f992",
		                "0x1f418",
		                "0x1f9a3",
		                "0x1f98f",
		                "0x1f99b",
		                "0x1f42d",
		                "0x1f401",
		                "0x1f400",
		                "0x1f439",
		                "0x1f430",
		                "0x1f407",
		                "0x1f43f",
		                "0x1f9ab",
		                "0x1f994",
		                "0x1f987",
		                "0x1f43b",
		                "0x1f43b",
		                "0x200d",
		                "0x2744",
		                "0xfe0f",
		                "0x1f428",
		                "0x1f43c",
		                "0x1f9a5",
		                "0x1f9a6",
		                "0x1f9a8",
		                "0x1f998",
		                "0x1f9a1",
		                "0x1f43e",
		                "0x1f983",
		                "0x1f414",
		                "0x1f413",
		                "0x1f423",
		                "0x1f424",
		                "0x1f425",
		                "0x1f426",
		                "0x1f427",
		                "0x1f54a",
		                "0x1f985",
		                "0x1f986",
		                "0x1f9a2",
		                "0x1f989",
		                "0x1f9a4",
		                "0x1fab6",
		                "0x1f9a9",
		                "0x1f99a",
		                "0x1f99c",
		                "0x1fabd",
		                "0x1f426",
		                "0x200d",
		                "0x2b1b",
		                "0x1fabf",
		                "0x1f426",
		                "0x200d",
		                "0x1f525",
		                "0x1f438",
		                "0x1f40a",
		                "0x1f422",
		                "0x1f98e",
		                "0x1f40d",
		                "0x1f432",
		                "0x1f409",
		                "0x1f995",
		                "0x1f996",
		                "0x1f433",
		                "0x1f40b",
		                "0x1f42c",
		                "0x1f9ad",
		                "0x1f41f",
		                "0x1f420",
		                "0x1f421",
		                "0x1f988",
		                "0x1f419",
		                "0x1f41a",
		                "0x1fab8",
		                "0x1fabc",
		                "0x1f40c",
		                "0x1f98b",
		                "0x1f41b",
		                "0x1f41c",
		                "0x1f41d",
		                "0x1fab2",
		                "0x1f41e",
		                "0x1f997",
		                "0x1fab3",
		                "0x1f577",
		                "0x1f578",
		                "0x1f982",
		                "0x1f99f",
		                "0x1fab0",
		                "0x1fab1",
		                "0x1f9a0",
		                "0x1f490",
		                "0x1f338",
		                "0x1f4ae",
		                "0x1fab7",
		                "0x1f3f5",
		                "0x1f339",
		                "0x1f940",
		                "0x1f33a",
		                "0x1f33b",
		                "0x1f33c",
		                "0x1f337",
		                "0x1fabb",
		                "0x1f331",
		                "0x1fab4",
		                "0x1f332",
		                "0x1f333",
		                "0x1f334",
		                "0x1f335",
		                "0x1f33e",
		                "0x1f33f",
		                "0x2618",
		                "0x1f340",
		                "0x1f341",
		                "0x1f342",
		                "0x1f343",
		                "0x1fab9",
		                "0x1faba",
		                "0x1f344"
		            ],
		            "food_and_drink": [
		                "0x1f347",
		                "0x1f348",
		                "0x1f349",
		                "0x1f34a",
		                "0x1f34b",
		                "0x1f34b",
		                "0x200d",
		                "0x1f7e9",
		                "0x1f34c",
		                "0x1f34d",
		                "0x1f96d",
		                "0x1f34e",
		                "0x1f34f",
		                "0x1f350",
		                "0x1f351",
		                "0x1f352",
		                "0x1f353",
		                "0x1fad0",
		                "0x1f95d",
		                "0x1f345",
		                "0x1fad2",
		                "0x1f965",
		                "0x1f951",
		                "0x1f346",
		                "0x1f954",
		                "0x1f955",
		                "0x1f33d",
		                "0x1f336",
		                "0x1fad1",
		                "0x1f952",
		                "0x1f96c",
		                "0x1f966",
		                "0x1f9c4",
		                "0x1f9c5",
		                "0x1f95c",
		                "0x1fad8",
		                "0x1f330",
		                "0x1fada",
		                "0x1fadb",
		                "0x1f344",
		                "0x200d",
		                "0x1f7eb",
		                "0x1f35e",
		                "0x1f950",
		                "0x1f956",
		                "0x1fad3",
		                "0x1f968",
		                "0x1f96f",
		                "0x1f95e",
		                "0x1f9c7",
		                "0x1f9c0",
		                "0x1f356",
		                "0x1f357",
		                "0x1f969",
		                "0x1f953",
		                "0x1f354",
		                "0x1f35f",
		                "0x1f355",
		                "0x1f32d",
		                "0x1f96a",
		                "0x1f32e",
		                "0x1f32f",
		                "0x1fad4",
		                "0x1f959",
		                "0x1f9c6",
		                "0x1f95a",
		                "0x1f373",
		                "0x1f958",
		                "0x1f372",
		                "0x1fad5",
		                "0x1f963",
		                "0x1f957",
		                "0x1f37f",
		                "0x1f9c8",
		                "0x1f9c2",
		                "0x1f96b",
		                "0x1f371",
		                "0x1f358",
		                "0x1f359",
		                "0x1f35a",
		                "0x1f35b",
		                "0x1f35c",
		                "0x1f35d",
		                "0x1f360",
		                "0x1f362",
		                "0x1f363",
		                "0x1f364",
		                "0x1f365",
		                "0x1f96e",
		                "0x1f361",
		                "0x1f95f",
		                "0x1f960",
		                "0x1f961",
		                "0x1f980",
		                "0x1f99e",
		                "0x1f990",
		                "0x1f991",
		                "0x1f9aa",
		                "0x1f366",
		                "0x1f367",
		                "0x1f368",
		                "0x1f369",
		                "0x1f36a",
		                "0x1f382",
		                "0x1f370",
		                "0x1f9c1",
		                "0x1f967",
		                "0x1f36b",
		                "0x1f36c",
		                "0x1f36d",
		                "0x1f36e",
		                "0x1f36f",
		                "0x1f37c",
		                "0x1f95b",
		                "0x2615",
		                "0x1fad6",
		                "0x1f375",
		                "0x1f376",
		                "0x1f37e",
		                "0x1f377",
		                "0x1f378",
		                "0x1f379",
		                "0x1f37a",
		                "0x1f37b",
		                "0x1f942",
		                "0x1f943",
		                "0x1fad7",
		                "0x1f964",
		                "0x1f9cb",
		                "0x1f9c3",
		                "0x1f9c9",
		                "0x1f9ca",
		                "0x1f962",
		                "0x1f37d",
		                "0x1f374",
		                "0x1f944",
		                "0x1f52a",
		                "0x1fad9",
		                "0x1f3fa"
		            ],
		            "travel_and_places": [
		                "0x1f30d",
		                "0x1f30e",
		                "0x1f30f",
		                "0x1f310",
		                "0x1f5fa",
		                "0x1f5fe",
		                "0x1f9ed",
		                "0x1f3d4",
		                "0x26f0",
		                "0x1f30b",
		                "0x1f5fb",
		                "0x1f3d5",
		                "0x1f3d6",
		                "0x1f3dc",
		                "0x1f3dd",
		                "0x1f3de",
		                "0x1f3df",
		                "0x1f3db",
		                "0x1f3d7",
		                "0x1f9f1",
		                "0x1faa8",
		                "0x1fab5",
		                "0x1f6d6",
		                "0x1f3d8",
		                "0x1f3da",
		                "0x1f3e0",
		                "0x1f3e1",
		                "0x1f3e2",
		                "0x1f3e3",
		                "0x1f3e4",
		                "0x1f3e5",
		                "0x1f3e6",
		                "0x1f3e8",
		                "0x1f3e9",
		                "0x1f3ea",
		                "0x1f3eb",
		                "0x1f3ec",
		                "0x1f3ed",
		                "0x1f3ef",
		                "0x1f3f0",
		                "0x1f492",
		                "0x1f5fc",
		                "0x1f5fd",
		                "0x26ea",
		                "0x1f54c",
		                "0x1f6d5",
		                "0x1f54d",
		                "0x26e9",
		                "0x1f54b",
		                "0x26f2",
		                "0x26fa",
		                "0x1f301",
		                "0x1f303",
		                "0x1f3d9",
		                "0x1f304",
		                "0x1f305",
		                "0x1f306",
		                "0x1f307",
		                "0x1f309",
		                "0x2668",
		                "0x1f3a0",
		                "0x1f6dd",
		                "0x1f3a1",
		                "0x1f3a2",
		                "0x1f488",
		                "0x1f3aa",
		                "0x1f682",
		                "0x1f683",
		                "0x1f684",
		                "0x1f685",
		                "0x1f686",
		                "0x1f687",
		                "0x1f688",
		                "0x1f689",
		                "0x1f68a",
		                "0x1f69d",
		                "0x1f69e",
		                "0x1f68b",
		                "0x1f68c",
		                "0x1f68d",
		                "0x1f68e",
		                "0x1f690",
		                "0x1f691",
		                "0x1f692",
		                "0x1f693",
		                "0x1f694",
		                "0x1f695",
		                "0x1f696",
		                "0x1f697",
		                "0x1f698",
		                "0x1f699",
		                "0x1f6fb",
		                "0x1f69a",
		                "0x1f69b",
		                "0x1f69c",
		                "0x1f3ce",
		                "0x1f3cd",
		                "0x1f6f5",
		                "0x1f9bd",
		                "0x1f9bc",
		                "0x1f6fa",
		                "0x1f6b2",
		                "0x1f6f4",
		                "0x1f6f9",
		                "0x1f6fc",
		                "0x1f68f",
		                "0x1f6e3",
		                "0x1f6e4",
		                "0x1f6e2",
		                "0x26fd",
		                "0x1f6de",
		                "0x1f6a8",
		                "0x1f6a5",
		                "0x1f6a6",
		                "0x1f6d1",
		                "0x1f6a7",
		                "0x2693",
		                "0x1f6df",
		                "0x26f5",
		                "0x1f6f6",
		                "0x1f6a4",
		                "0x1f6f3",
		                "0x26f4",
		                "0x1f6e5",
		                "0x1f6a2",
		                "0x2708",
		                "0x1f6e9",
		                "0x1f6eb",
		                "0x1f6ec",
		                "0x1fa82",
		                "0x1f4ba",
		                "0x1f681",
		                "0x1f69f",
		                "0x1f6a0",
		                "0x1f6a1",
		                "0x1f6f0",
		                "0x1f680",
		                "0x1f6f8",
		                "0x1f6ce",
		                "0x1f9f3",
		                "0x231b",
		                "0x23f3",
		                "0x231a",
		                "0x23f0",
		                "0x23f1",
		                "0x23f2",
		                "0x1f570",
		                "0x1f55b",
		                "0x1f567",
		                "0x1f550",
		                "0x1f55c",
		                "0x1f551",
		                "0x1f55d",
		                "0x1f552",
		                "0x1f55e",
		                "0x1f553",
		                "0x1f55f",
		                "0x1f554",
		                "0x1f560",
		                "0x1f555",
		                "0x1f561",
		                "0x1f556",
		                "0x1f562",
		                "0x1f557",
		                "0x1f563",
		                "0x1f558",
		                "0x1f564",
		                "0x1f559",
		                "0x1f565",
		                "0x1f55a",
		                "0x1f566",
		                "0x1f311",
		                "0x1f312",
		                "0x1f313",
		                "0x1f314",
		                "0x1f315",
		                "0x1f316",
		                "0x1f317",
		                "0x1f318",
		                "0x1f319",
		                "0x1f31a",
		                "0x1f31b",
		                "0x1f31c",
		                "0x1f321",
		                "0x2600",
		                "0x1f31d",
		                "0x1f31e",
		                "0x1fa90",
		                "0x2b50",
		                "0x1f31f",
		                "0x1f320",
		                "0x1f30c",
		                "0x2601",
		                "0x26c5",
		                "0x26c8",
		                "0x1f324",
		                "0x1f325",
		                "0x1f326",
		                "0x1f327",
		                "0x1f328",
		                "0x1f329",
		                "0x1f32a",
		                "0x1f32b",
		                "0x1f32c",
		                "0x1f300",
		                "0x1f308",
		                "0x1f302",
		                "0x2602",
		                "0x2614",
		                "0x26f1",
		                "0x26a1",
		                "0x2744",
		                "0x2603",
		                "0x26c4",
		                "0x2604",
		                "0x1f525",
		                "0x1f4a7",
		                "0x1f30a"
		            ],
		            "activities": [
		                "0x1f383",
		                "0x1f384",
		                "0x1f386",
		                "0x1f387",
		                "0x1f9e8",
		                "0x2728",
		                "0x1f388",
		                "0x1f389",
		                "0x1f38a",
		                "0x1f38b",
		                "0x1f38d",
		                "0x1f38e",
		                "0x1f38f",
		                "0x1f390",
		                "0x1f391",
		                "0x1f9e7",
		                "0x1f380",
		                "0x1f381",
		                "0x1f397",
		                "0x1f39f",
		                "0x1f3ab",
		                "0x1f396",
		                "0x1f3c6",
		                "0x1f3c5",
		                "0x1f947",
		                "0x1f948",
		                "0x1f949",
		                "0x26bd",
		                "0x26be",
		                "0x1f94e",
		                "0x1f3c0",
		                "0x1f3d0",
		                "0x1f3c8",
		                "0x1f3c9",
		                "0x1f3be",
		                "0x1f94f",
		                "0x1f3b3",
		                "0x1f3cf",
		                "0x1f3d1",
		                "0x1f3d2",
		                "0x1f94d",
		                "0x1f3d3",
		                "0x1f3f8",
		                "0x1f94a",
		                "0x1f94b",
		                "0x1f945",
		                "0x26f3",
		                "0x26f8",
		                "0x1f3a3",
		                "0x1f93f",
		                "0x1f3bd",
		                "0x1f3bf",
		                "0x1f6f7",
		                "0x1f94c",
		                "0x1f3af",
		                "0x1fa80",
		                "0x1fa81",
		                "0x1f52b",
		                "0x1f3b1",
		                "0x1f52e",
		                "0x1fa84",
		                "0x1f3ae",
		                "0x1f579",
		                "0x1f3b0",
		                "0x1f3b2",
		                "0x1f9e9",
		                "0x1f9f8",
		                "0x1fa85",
		                "0x1faa9",
		                "0x1fa86",
		                "0x2660",
		                "0x2665",
		                "0x2666",
		                "0x2663",
		                "0x265f",
		                "0x1f0cf",
		                "0x1f004",
		                "0x1f3b4",
		                "0x1f3ad",
		                "0x1f5bc",
		                "0x1f3a8",
		                "0x1f9f5",
		                "0x1faa1",
		                "0x1f9f6",
		                "0x1faa2"
		            ],
		            "objects": [
		                "0x1f453",
		                "0x1f576",
		                "0x1f97d",
		                "0x1f97c",
		                "0x1f9ba",
		                "0x1f454",
		                "0x1f455",
		                "0x1f456",
		                "0x1f9e3",
		                "0x1f9e4",
		                "0x1f9e5",
		                "0x1f9e6",
		                "0x1f457",
		                "0x1f458",
		                "0x1f97b",
		                "0x1fa71",
		                "0x1fa72",
		                "0x1fa73",
		                "0x1f459",
		                "0x1f45a",
		                "0x1faad",
		                "0x1f45b",
		                "0x1f45c",
		                "0x1f45d",
		                "0x1f6cd",
		                "0x1f392",
		                "0x1fa74",
		                "0x1f45e",
		                "0x1f45f",
		                "0x1f97e",
		                "0x1f97f",
		                "0x1f460",
		                "0x1f461",
		                "0x1fa70",
		                "0x1f462",
		                "0x1faae",
		                "0x1f451",
		                "0x1f452",
		                "0x1f3a9",
		                "0x1f393",
		                "0x1f9e2",
		                "0x1fa96",
		                "0x26d1",
		                "0x1f4ff",
		                "0x1f484",
		                "0x1f48d",
		                "0x1f48e",
		                "0x1f507",
		                "0x1f508",
		                "0x1f509",
		                "0x1f50a",
		                "0x1f4e2",
		                "0x1f4e3",
		                "0x1f4ef",
		                "0x1f514",
		                "0x1f515",
		                "0x1f3bc",
		                "0x1f3b5",
		                "0x1f3b6",
		                "0x1f399",
		                "0x1f39a",
		                "0x1f39b",
		                "0x1f3a4",
		                "0x1f3a7",
		                "0x1f4fb",
		                "0x1f3b7",
		                "0x1fa97",
		                "0x1f3b8",
		                "0x1f3b9",
		                "0x1f3ba",
		                "0x1f3bb",
		                "0x1fa95",
		                "0x1f941",
		                "0x1fa98",
		                "0x1fa87",
		                "0x1fa88",
		                "0x1f4f1",
		                "0x1f4f2",
		                "0x260e",
		                "0x1f4de",
		                "0x1f4df",
		                "0x1f4e0",
		                "0x1f50b",
		                "0x1faab",
		                "0x1f50c",
		                "0x1f4bb",
		                "0x1f5a5",
		                "0x1f5a8",
		                "0x2328",
		                "0x1f5b1",
		                "0x1f5b2",
		                "0x1f4bd",
		                "0x1f4be",
		                "0x1f4bf",
		                "0x1f4c0",
		                "0x1f9ee",
		                "0x1f3a5",
		                "0x1f39e",
		                "0x1f4fd",
		                "0x1f3ac",
		                "0x1f4fa",
		                "0x1f4f7",
		                "0x1f4f8",
		                "0x1f4f9",
		                "0x1f4fc",
		                "0x1f50d",
		                "0x1f50e",
		                "0x1f56f",
		                "0x1f4a1",
		                "0x1f526",
		                "0x1f3ee",
		                "0x1fa94",
		                "0x1f4d4",
		                "0x1f4d5",
		                "0x1f4d6",
		                "0x1f4d7",
		                "0x1f4d8",
		                "0x1f4d9",
		                "0x1f4da",
		                "0x1f4d3",
		                "0x1f4d2",
		                "0x1f4c3",
		                "0x1f4dc",
		                "0x1f4c4",
		                "0x1f4f0",
		                "0x1f5de",
		                "0x1f4d1",
		                "0x1f516",
		                "0x1f3f7",
		                "0x1f4b0",
		                "0x1fa99",
		                "0x1f4b4",
		                "0x1f4b5",
		                "0x1f4b6",
		                "0x1f4b7",
		                "0x1f4b8",
		                "0x1f4b3",
		                "0x1f9fe",
		                "0x1f4b9",
		                "0x2709",
		                "0x1f4e7",
		                "0x1f4e8",
		                "0x1f4e9",
		                "0x1f4e4",
		                "0x1f4e5",
		                "0x1f4e6",
		                "0x1f4eb",
		                "0x1f4ea",
		                "0x1f4ec",
		                "0x1f4ed",
		                "0x1f4ee",
		                "0x1f5f3",
		                "0x270f",
		                "0x2712",
		                "0x1f58b",
		                "0x1f58a",
		                "0x1f58c",
		                "0x1f58d",
		                "0x1f4dd",
		                "0x1f4bc",
		                "0x1f4c1",
		                "0x1f4c2",
		                "0x1f5c2",
		                "0x1f4c5",
		                "0x1f4c6",
		                "0x1f5d2",
		                "0x1f5d3",
		                "0x1f4c7",
		                "0x1f4c8",
		                "0x1f4c9",
		                "0x1f4ca",
		                "0x1f4cb",
		                "0x1f4cc",
		                "0x1f4cd",
		                "0x1f4ce",
		                "0x1f587",
		                "0x1f4cf",
		                "0x1f4d0",
		                "0x2702",
		                "0x1f5c3",
		                "0x1f5c4",
		                "0x1f5d1",
		                "0x1f512",
		                "0x1f513",
		                "0x1f50f",
		                "0x1f510",
		                "0x1f511",
		                "0x1f5dd",
		                "0x1f528",
		                "0x1fa93",
		                "0x26cf",
		                "0x2692",
		                "0x1f6e0",
		                "0x1f5e1",
		                "0x2694",
		                "0x1f4a3",
		                "0x1fa83",
		                "0x1f3f9",
		                "0x1f6e1",
		                "0x1fa9a",
		                "0x1f527",
		                "0x1fa9b",
		                "0x1f529",
		                "0x2699",
		                "0x1f5dc",
		                "0x2696",
		                "0x1f9af",
		                "0x1f517",
		                "0x26d3",
		                "0xfe0f",
		                "0x200d",
		                "0x1f4a5",
		                "0x26d3",
		                "0x1fa9d",
		                "0x1f9f0",
		                "0x1f9f2",
		                "0x1fa9c",
		                "0x2697",
		                "0x1f9ea",
		                "0x1f9eb",
		                "0x1f9ec",
		                "0x1f52c",
		                "0x1f52d",
		                "0x1f4e1",
		                "0x1f489",
		                "0x1fa78",
		                "0x1f48a",
		                "0x1fa79",
		                "0x1fa7c",
		                "0x1fa7a",
		                "0x1fa7b",
		                "0x1f6aa",
		                "0x1f6d7",
		                "0x1fa9e",
		                "0x1fa9f",
		                "0x1f6cf",
		                "0x1f6cb",
		                "0x1fa91",
		                "0x1f6bd",
		                "0x1faa0",
		                "0x1f6bf",
		                "0x1f6c1",
		                "0x1faa4",
		                "0x1fa92",
		                "0x1f9f4",
		                "0x1f9f7",
		                "0x1f9f9",
		                "0x1f9fa",
		                "0x1f9fb",
		                "0x1faa3",
		                "0x1f9fc",
		                "0x1fae7",
		                "0x1faa5",
		                "0x1f9fd",
		                "0x1f9ef",
		                "0x1f6d2",
		                "0x1f6ac",
		                "0x26b0",
		                "0x1faa6",
		                "0x26b1",
		                "0x1f9ff",
		                "0x1faac",
		                "0x1f5ff",
		                "0x1faa7",
		                "0x1faaa"
		            ],
		            "symbols": [
		                "0x1f3e7",
		                "0x1f6ae",
		                "0x1f6b0",
		                "0x267f",
		                "0x1f6b9",
		                "0x1f6ba",
		                "0x1f6bb",
		                "0x1f6bc",
		                "0x1f6be",
		                "0x1f6c2",
		                "0x1f6c3",
		                "0x1f6c4",
		                "0x1f6c5",
		                "0x26a0",
		                "0x1f6b8",
		                "0x26d4",
		                "0x1f6ab",
		                "0x1f6b3",
		                "0x1f6ad",
		                "0x1f6af",
		                "0x1f6b1",
		                "0x1f6b7",
		                "0x1f4f5",
		                "0x1f51e",
		                "0x2622",
		                "0x2623",
		                "0x2b06",
		                "0x2197",
		                "0x27a1",
		                "0x2198",
		                "0x2b07",
		                "0x2199",
		                "0x2b05",
		                "0x2196",
		                "0x2195",
		                "0x2194",
		                "0x21a9",
		                "0x21aa",
		                "0x2934",
		                "0x2935",
		                "0x1f503",
		                "0x1f504",
		                "0x1f519",
		                "0x1f51a",
		                "0x1f51b",
		                "0x1f51c",
		                "0x1f51d",
		                "0x1f6d0",
		                "0x269b",
		                "0x1f549",
		                "0x2721",
		                "0x2638",
		                "0x262f",
		                "0x271d",
		                "0x2626",
		                "0x262a",
		                "0x262e",
		                "0x1f54e",
		                "0x1f52f",
		                "0x1faaf",
		                "0x2648",
		                "0x2649",
		                "0x264a",
		                "0x264b",
		                "0x264c",
		                "0x264d",
		                "0x264e",
		                "0x264f",
		                "0x2650",
		                "0x2651",
		                "0x2652",
		                "0x2653",
		                "0x26ce",
		                "0x1f500",
		                "0x1f501",
		                "0x1f502",
		                "0x25b6",
		                "0x23e9",
		                "0x23ed",
		                "0x23ef",
		                "0x25c0",
		                "0x23ea",
		                "0x23ee",
		                "0x1f53c",
		                "0x23eb",
		                "0x1f53d",
		                "0x23ec",
		                "0x23f8",
		                "0x23f9",
		                "0x23fa",
		                "0x23cf",
		                "0x1f3a6",
		                "0x1f505",
		                "0x1f506",
		                "0x1f4f6",
		                "0x1f6dc",
		                "0x1f4f3",
		                "0x1f4f4",
		                "0x2640",
		                "0x2642",
		                "0x26a7",
		                "0x2716",
		                "0x2795",
		                "0x2796",
		                "0x2797",
		                "0x1f7f0",
		                "0x267e",
		                "0x203c",
		                "0x2049",
		                "0x2753",
		                "0x2754",
		                "0x2755",
		                "0x2757",
		                "0x3030",
		                "0x1f4b1",
		                "0x1f4b2",
		                "0x2695",
		                "0x267b",
		                "0x269c",
		                "0x1f531",
		                "0x1f4db",
		                "0x1f530",
		                "0x2b55",
		                "0x2705",
		                "0x2611",
		                "0x2714",
		                "0x274c",
		                "0x274e",
		                "0x27b0",
		                "0x27bf",
		                "0x303d",
		                "0x2733",
		                "0x2734",
		                "0x2747",
		                "0x00a9",
		                "0x00ae",
		                "0x2122",
		                "0x0023",
		                "0xfe0f",
		                "0x20e3",
		                "0x002a",
		                "0xfe0f",
		                "0x20e3",
		                "0x0030",
		                "0xfe0f",
		                "0x20e3",
		                "0x0031",
		                "0xfe0f",
		                "0x20e3",
		                "0x0032",
		                "0xfe0f",
		                "0x20e3",
		                "0x0033",
		                "0xfe0f",
		                "0x20e3",
		                "0x0034",
		                "0xfe0f",
		                "0x20e3",
		                "0x0035",
		                "0xfe0f",
		                "0x20e3",
		                "0x0036",
		                "0xfe0f",
		                "0x20e3",
		                "0x0037",
		                "0xfe0f",
		                "0x20e3",
		                "0x0038",
		                "0xfe0f",
		                "0x20e3",
		                "0x0039",
		                "0xfe0f",
		                "0x20e3",
		                "0x1f51f",
		                "0x1f520",
		                "0x1f521",
		                "0x1f522",
		                "0x1f523",
		                "0x1f524",
		                "0x1f170",
		                "0x1f18e",
		                "0x1f171",
		                "0x1f191",
		                "0x1f192",
		                "0x1f193",
		                "0x2139",
		                "0x1f194",
		                "0x24c2",
		                "0x1f195",
		                "0x1f196",
		                "0x1f17e",
		                "0x1f197",
		                "0x1f17f",
		                "0x1f198",
		                "0x1f199",
		                "0x1f19a",
		                "0x1f201",
		                "0x1f202",
		                "0x1f237",
		                "0x1f236",
		                "0x1f22f",
		                "0x1f250",
		                "0x1f239",
		                "0x1f21a",
		                "0x1f232",
		                "0x1f251",
		                "0x1f238",
		                "0x1f234",
		                "0x1f233",
		                "0x3297",
		                "0x3299",
		                "0x1f23a",
		                "0x1f235",
		                "0x1f534",
		                "0x1f7e0",
		                "0x1f7e1",
		                "0x1f7e2",
		                "0x1f535",
		                "0x1f7e3",
		                "0x1f7e4",
		                "0x26ab",
		                "0x26aa",
		                "0x1f7e5",
		                "0x1f7e7",
		                "0x1f7e8",
		                "0x1f7e9",
		                "0x1f7e6",
		                "0x1f7ea",
		                "0x1f7eb",
		                "0x2b1b",
		                "0x2b1c",
		                "0x25fc",
		                "0x25fb",
		                "0x25fe",
		                "0x25fd",
		                "0x25aa",
		                "0x25ab",
		                "0x1f536",
		                "0x1f537",
		                "0x1f538",
		                "0x1f539",
		                "0x1f53a",
		                "0x1f53b",
		                "0x1f4a0",
		                "0x1f518",
		                "0x1f533",
		                "0x1f532"
		            ],
		            "flags": [
		                "0x1f3c1",
		                "0x1f6a9",
		                "0x1f38c",
		                "0x1f3f4",
		                "0x1f3f3",
		                "0x1f3f3",
		                "0xfe0f",
		                "0x200d",
		                "0x1f308",
		                "0x1f3f3",
		                "0xfe0f",
		                "0x200d",
		                "0x26a7",
		                "0xfe0f",
		                "0x1f3f4",
		                "0x200d",
		                "0x2620",
		                "0xfe0f",
		                "0x1f1e6",
		                "0x1f1e8",
		                "0x1f1e6",
		                "0x1f1e9",
		                "0x1f1e6",
		                "0x1f1ea",
		                "0x1f1e6",
		                "0x1f1eb",
		                "0x1f1e6",
		                "0x1f1ec",
		                "0x1f1e6",
		                "0x1f1ee",
		                "0x1f1e6",
		                "0x1f1f1",
		                "0x1f1e6",
		                "0x1f1f2",
		                "0x1f1e6",
		                "0x1f1f4",
		                "0x1f1e6",
		                "0x1f1f6",
		                "0x1f1e6",
		                "0x1f1f7",
		                "0x1f1e6",
		                "0x1f1f8",
		                "0x1f1e6",
		                "0x1f1f9",
		                "0x1f1e6",
		                "0x1f1fa",
		                "0x1f1e6",
		                "0x1f1fc",
		                "0x1f1e6",
		                "0x1f1fd",
		                "0x1f1e6",
		                "0x1f1ff",
		                "0x1f1e7",
		                "0x1f1e6",
		                "0x1f1e7",
		                "0x1f1e7",
		                "0x1f1e7",
		                "0x1f1e9",
		                "0x1f1e7",
		                "0x1f1ea",
		                "0x1f1e7",
		                "0x1f1eb",
		                "0x1f1e7",
		                "0x1f1ec",
		                "0x1f1e7",
		                "0x1f1ed",
		                "0x1f1e7",
		                "0x1f1ee",
		                "0x1f1e7",
		                "0x1f1ef",
		                "0x1f1e7",
		                "0x1f1f1",
		                "0x1f1e7",
		                "0x1f1f2",
		                "0x1f1e7",
		                "0x1f1f3",
		                "0x1f1e7",
		                "0x1f1f4",
		                "0x1f1e7",
		                "0x1f1f6",
		                "0x1f1e7",
		                "0x1f1f7",
		                "0x1f1e7",
		                "0x1f1f8",
		                "0x1f1e7",
		                "0x1f1f9",
		                "0x1f1e7",
		                "0x1f1fb",
		                "0x1f1e7",
		                "0x1f1fc",
		                "0x1f1e7",
		                "0x1f1fe",
		                "0x1f1e7",
		                "0x1f1ff",
		                "0x1f1e8",
		                "0x1f1e6",
		                "0x1f1e8",
		                "0x1f1e8",
		                "0x1f1e8",
		                "0x1f1e9",
		                "0x1f1e8",
		                "0x1f1eb",
		                "0x1f1e8",
		                "0x1f1ec",
		                "0x1f1e8",
		                "0x1f1ed",
		                "0x1f1e8",
		                "0x1f1ee",
		                "0x1f1e8",
		                "0x1f1f0",
		                "0x1f1e8",
		                "0x1f1f1",
		                "0x1f1e8",
		                "0x1f1f2",
		                "0x1f1e8",
		                "0x1f1f3",
		                "0x1f1e8",
		                "0x1f1f4",
		                "0x1f1e8",
		                "0x1f1f5",
		                "0x1f1e8",
		                "0x1f1f7",
		                "0x1f1e8",
		                "0x1f1fa",
		                "0x1f1e8",
		                "0x1f1fb",
		                "0x1f1e8",
		                "0x1f1fc",
		                "0x1f1e8",
		                "0x1f1fd",
		                "0x1f1e8",
		                "0x1f1fe",
		                "0x1f1e8",
		                "0x1f1ff",
		                "0x1f1e9",
		                "0x1f1ea",
		                "0x1f1e9",
		                "0x1f1ec",
		                "0x1f1e9",
		                "0x1f1ef",
		                "0x1f1e9",
		                "0x1f1f0",
		                "0x1f1e9",
		                "0x1f1f2",
		                "0x1f1e9",
		                "0x1f1f4",
		                "0x1f1e9",
		                "0x1f1ff",
		                "0x1f1ea",
		                "0x1f1e6",
		                "0x1f1ea",
		                "0x1f1e8",
		                "0x1f1ea",
		                "0x1f1ea",
		                "0x1f1ea",
		                "0x1f1ec",
		                "0x1f1ea",
		                "0x1f1ed",
		                "0x1f1ea",
		                "0x1f1f7",
		                "0x1f1ea",
		                "0x1f1f8",
		                "0x1f1ea",
		                "0x1f1f9",
		                "0x1f1ea",
		                "0x1f1fa",
		                "0x1f1eb",
		                "0x1f1ee",
		                "0x1f1eb",
		                "0x1f1ef",
		                "0x1f1eb",
		                "0x1f1f0",
		                "0x1f1eb",
		                "0x1f1f2",
		                "0x1f1eb",
		                "0x1f1f4",
		                "0x1f1eb",
		                "0x1f1f7",
		                "0x1f1ec",
		                "0x1f1e6",
		                "0x1f1ec",
		                "0x1f1e7",
		                "0x1f1ec",
		                "0x1f1e9",
		                "0x1f1ec",
		                "0x1f1ea",
		                "0x1f1ec",
		                "0x1f1eb",
		                "0x1f1ec",
		                "0x1f1ec",
		                "0x1f1ec",
		                "0x1f1ed",
		                "0x1f1ec",
		                "0x1f1ee",
		                "0x1f1ec",
		                "0x1f1f1",
		                "0x1f1ec",
		                "0x1f1f2",
		                "0x1f1ec",
		                "0x1f1f3",
		                "0x1f1ec",
		                "0x1f1f5",
		                "0x1f1ec",
		                "0x1f1f6",
		                "0x1f1ec",
		                "0x1f1f7",
		                "0x1f1ec",
		                "0x1f1f8",
		                "0x1f1ec",
		                "0x1f1f9",
		                "0x1f1ec",
		                "0x1f1fa",
		                "0x1f1ec",
		                "0x1f1fc",
		                "0x1f1ec",
		                "0x1f1fe",
		                "0x1f1ed",
		                "0x1f1f0",
		                "0x1f1ed",
		                "0x1f1f2",
		                "0x1f1ed",
		                "0x1f1f3",
		                "0x1f1ed",
		                "0x1f1f7",
		                "0x1f1ed",
		                "0x1f1f9",
		                "0x1f1ed",
		                "0x1f1fa",
		                "0x1f1ee",
		                "0x1f1e8",
		                "0x1f1ee",
		                "0x1f1e9",
		                "0x1f1ee",
		                "0x1f1ea",
		                "0x1f1ee",
		                "0x1f1f1",
		                "0x1f1ee",
		                "0x1f1f2",
		                "0x1f1ee",
		                "0x1f1f3",
		                "0x1f1ee",
		                "0x1f1f4",
		                "0x1f1ee",
		                "0x1f1f6",
		                "0x1f1ee",
		                "0x1f1f7",
		                "0x1f1ee",
		                "0x1f1f8",
		                "0x1f1ee",
		                "0x1f1f9",
		                "0x1f1ef",
		                "0x1f1ea",
		                "0x1f1ef",
		                "0x1f1f2",
		                "0x1f1ef",
		                "0x1f1f4",
		                "0x1f1ef",
		                "0x1f1f5",
		                "0x1f1f0",
		                "0x1f1ea",
		                "0x1f1f0",
		                "0x1f1ec",
		                "0x1f1f0",
		                "0x1f1ed",
		                "0x1f1f0",
		                "0x1f1ee",
		                "0x1f1f0",
		                "0x1f1f2",
		                "0x1f1f0",
		                "0x1f1f3",
		                "0x1f1f0",
		                "0x1f1f5",
		                "0x1f1f0",
		                "0x1f1f7",
		                "0x1f1f0",
		                "0x1f1fc",
		                "0x1f1f0",
		                "0x1f1fe",
		                "0x1f1f0",
		                "0x1f1ff",
		                "0x1f1f1",
		                "0x1f1e6",
		                "0x1f1f1",
		                "0x1f1e7",
		                "0x1f1f1",
		                "0x1f1e8",
		                "0x1f1f1",
		                "0x1f1ee",
		                "0x1f1f1",
		                "0x1f1f0",
		                "0x1f1f1",
		                "0x1f1f7",
		                "0x1f1f1",
		                "0x1f1f8",
		                "0x1f1f1",
		                "0x1f1f9",
		                "0x1f1f1",
		                "0x1f1fa",
		                "0x1f1f1",
		                "0x1f1fb",
		                "0x1f1f1",
		                "0x1f1fe",
		                "0x1f1f2",
		                "0x1f1e6",
		                "0x1f1f2",
		                "0x1f1e8",
		                "0x1f1f2",
		                "0x1f1e9",
		                "0x1f1f2",
		                "0x1f1ea",
		                "0x1f1f2",
		                "0x1f1eb",
		                "0x1f1f2",
		                "0x1f1ec",
		                "0x1f1f2",
		                "0x1f1ed",
		                "0x1f1f2",
		                "0x1f1f0",
		                "0x1f1f2",
		                "0x1f1f1",
		                "0x1f1f2",
		                "0x1f1f2",
		                "0x1f1f2",
		                "0x1f1f3",
		                "0x1f1f2",
		                "0x1f1f4",
		                "0x1f1f2",
		                "0x1f1f5",
		                "0x1f1f2",
		                "0x1f1f6",
		                "0x1f1f2",
		                "0x1f1f7",
		                "0x1f1f2",
		                "0x1f1f8",
		                "0x1f1f2",
		                "0x1f1f9",
		                "0x1f1f2",
		                "0x1f1fa",
		                "0x1f1f2",
		                "0x1f1fb",
		                "0x1f1f2",
		                "0x1f1fc",
		                "0x1f1f2",
		                "0x1f1fd",
		                "0x1f1f2",
		                "0x1f1fe",
		                "0x1f1f2",
		                "0x1f1ff",
		                "0x1f1f3",
		                "0x1f1e6",
		                "0x1f1f3",
		                "0x1f1e8",
		                "0x1f1f3",
		                "0x1f1ea",
		                "0x1f1f3",
		                "0x1f1eb",
		                "0x1f1f3",
		                "0x1f1ec",
		                "0x1f1f3",
		                "0x1f1ee",
		                "0x1f1f3",
		                "0x1f1f1",
		                "0x1f1f3",
		                "0x1f1f4",
		                "0x1f1f3",
		                "0x1f1f5",
		                "0x1f1f3",
		                "0x1f1f7",
		                "0x1f1f3",
		                "0x1f1fa",
		                "0x1f1f3",
		                "0x1f1ff",
		                "0x1f1f4",
		                "0x1f1f2",
		                "0x1f1f5",
		                "0x1f1e6",
		                "0x1f1f5",
		                "0x1f1ea",
		                "0x1f1f5",
		                "0x1f1eb",
		                "0x1f1f5",
		                "0x1f1ec",
		                "0x1f1f5",
		                "0x1f1ed",
		                "0x1f1f5",
		                "0x1f1f0",
		                "0x1f1f5",
		                "0x1f1f1",
		                "0x1f1f5",
		                "0x1f1f2",
		                "0x1f1f5",
		                "0x1f1f3",
		                "0x1f1f5",
		                "0x1f1f7",
		                "0x1f1f5",
		                "0x1f1f8",
		                "0x1f1f5",
		                "0x1f1f9",
		                "0x1f1f5",
		                "0x1f1fc",
		                "0x1f1f5",
		                "0x1f1fe",
		                "0x1f1f6",
		                "0x1f1e6",
		                "0x1f1f7",
		                "0x1f1ea",
		                "0x1f1f7",
		                "0x1f1f4",
		                "0x1f1f7",
		                "0x1f1f8",
		                "0x1f1f7",
		                "0x1f1fa",
		                "0x1f1f7",
		                "0x1f1fc",
		                "0x1f1f8",
		                "0x1f1e6",
		                "0x1f1f8",
		                "0x1f1e7",
		                "0x1f1f8",
		                "0x1f1e8",
		                "0x1f1f8",
		                "0x1f1e9",
		                "0x1f1f8",
		                "0x1f1ea",
		                "0x1f1f8",
		                "0x1f1ec",
		                "0x1f1f8",
		                "0x1f1ed",
		                "0x1f1f8",
		                "0x1f1ee",
		                "0x1f1f8",
		                "0x1f1ef",
		                "0x1f1f8",
		                "0x1f1f0",
		                "0x1f1f8",
		                "0x1f1f1",
		                "0x1f1f8",
		                "0x1f1f2",
		                "0x1f1f8",
		                "0x1f1f3",
		                "0x1f1f8",
		                "0x1f1f4",
		                "0x1f1f8",
		                "0x1f1f7",
		                "0x1f1f8",
		                "0x1f1f8",
		                "0x1f1f8",
		                "0x1f1f9",
		                "0x1f1f8",
		                "0x1f1fb",
		                "0x1f1f8",
		                "0x1f1fd",
		                "0x1f1f8",
		                "0x1f1fe",
		                "0x1f1f8",
		                "0x1f1ff",
		                "0x1f1f9",
		                "0x1f1e6",
		                "0x1f1f9",
		                "0x1f1e8",
		                "0x1f1f9",
		                "0x1f1e9",
		                "0x1f1f9",
		                "0x1f1eb",
		                "0x1f1f9",
		                "0x1f1ec",
		                "0x1f1f9",
		                "0x1f1ed",
		                "0x1f1f9",
		                "0x1f1ef",
		                "0x1f1f9",
		                "0x1f1f0",
		                "0x1f1f9",
		                "0x1f1f1",
		                "0x1f1f9",
		                "0x1f1f2",
		                "0x1f1f9",
		                "0x1f1f3",
		                "0x1f1f9",
		                "0x1f1f4",
		                "0x1f1f9",
		                "0x1f1f7",
		                "0x1f1f9",
		                "0x1f1f9",
		                "0x1f1f9",
		                "0x1f1fb",
		                "0x1f1f9",
		                "0x1f1fc",
		                "0x1f1f9",
		                "0x1f1ff",
		                "0x1f1fa",
		                "0x1f1e6",
		                "0x1f1fa",
		                "0x1f1ec",
		                "0x1f1fa",
		                "0x1f1f2",
		                "0x1f1fa",
		                "0x1f1f3",
		                "0x1f1fa",
		                "0x1f1f8",
		                "0x1f1fa",
		                "0x1f1fe",
		                "0x1f1fa",
		                "0x1f1ff",
		                "0x1f1fb",
		                "0x1f1e6",
		                "0x1f1fb",
		                "0x1f1e8",
		                "0x1f1fb",
		                "0x1f1ea",
		                "0x1f1fb",
		                "0x1f1ec",
		                "0x1f1fb",
		                "0x1f1ee",
		                "0x1f1fb",
		                "0x1f1f3",
		                "0x1f1fb",
		                "0x1f1fa",
		                "0x1f1fc",
		                "0x1f1eb",
		                "0x1f1fc",
		                "0x1f1f8",
		                "0x1f1fd",
		                "0x1f1f0",
		                "0x1f1fe",
		                "0x1f1ea",
		                "0x1f1fe",
		                "0x1f1f9",
		                "0x1f1ff",
		                "0x1f1e6",
		                "0x1f1ff",
		                "0x1f1f2",
		                "0x1f1ff",
		                "0x1f1fc",
		                "0x1f3f4",
		                "0xe0067",
		                "0xe0062",
		                "0xe0065",
		                "0xe006e",
		                "0xe0067",
		                "0xe007f",
		                "0x1f3f4",
		                "0xe0067",
		                "0xe0062",
		                "0xe0073",
		                "0xe0063",
		                "0xe0074",
		                "0xe007f",
		                "0x1f3f4",
		                "0xe0067",
		                "0xe0062",
		                "0xe0077",
		                "0xe006c",
		                "0xe0073",
		                "0xe007f"
		            ]
		        }
		    };

		    var o_hasOwnProperty = Object.prototype.hasOwnProperty;
		    var o_keys = (Object.keys || function(obj) {
		      var result = [];
		      for (var key in obj) {
		        if (o_hasOwnProperty.call(obj, key)) {
		          result.push(key);
		        }
		      }

		      return result;
		    });


		    function _copyObject(source, target) {
		      var keys = o_keys(source);
		      var key;

		      for (var i = 0, l = keys.length; i < l; i++) {
		        key = keys[i];
		        target[key] = source[key] || target[key];
		      }
		    }

		    function _copyArray(source, target) {
		      for (var i = 0, l = source.length; i < l; i++) {
		        target[i] = source[i];
		      }
		    }

		    function copyObject(source, _target) {
		        var isArray = Array.isArray(source);
		        var target = _target || (isArray ? new Array(source.length) : {});

		        if (isArray) {
		          _copyArray(source, target);
		        } else {
		          _copyObject(source, target);
		        }

		        return target;
		    }

		    /** Get the data based on key**/
		    Chance.prototype.get = function (name) {
		        return copyObject(data[name]);
		    };

		    // Mac Address
		    Chance.prototype.mac_address = function(options){
		        // typically mac addresses are separated by ":"
		        // however they can also be separated by "-"
		        // the network variant uses a dot every fourth byte

		        options = initOptions(options);
		        if(!options.separator) {
		            options.separator =  options.networkVersion ? "." : ":";
		        }

		        var mac_pool="ABCDEF1234567890",
		            mac = "";
		        if(!options.networkVersion) {
		            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);
		        } else {
		            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);
		        }

		        return mac;
		    };

		    Chance.prototype.normal = function (options) {
		        options = initOptions(options, {mean : 0, dev : 1, pool : []});

		        testRange(
		            options.pool.constructor !== Array,
		            "Chance: The pool option must be a valid array."
		        );
		        testRange(
		            typeof options.mean !== 'number',
		            "Chance: Mean (mean) must be a number"
		        );
		        testRange(
		            typeof options.dev !== 'number',
		            "Chance: Standard deviation (dev) must be a number"
		        );

		        // If a pool has been passed, then we are returning an item from that pool,
		        // using the normal distribution settings that were passed in
		        if (options.pool.length > 0) {
		            return this.normal_pool(options);
		        }

		        // The Marsaglia Polar method
		        var s, u, v, norm,
		            mean = options.mean,
		            dev = options.dev;

		        do {
		            // U and V are from the uniform distribution on (-1, 1)
		            u = this.random() * 2 - 1;
		            v = this.random() * 2 - 1;

		            s = u * u + v * v;
		        } while (s >= 1);

		        // Compute the standard normal variate
		        norm = u * Math.sqrt(-2 * Math.log(s) / s);

		        // Shape and scale
		        return dev * norm + mean;
		    };

		    Chance.prototype.normal_pool = function(options) {
		        var performanceCounter = 0;
		        do {
		            var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));
		            if (idx < options.pool.length && idx >= 0) {
		                return options.pool[idx];
		            } else {
		                performanceCounter++;
		            }
		        } while(performanceCounter < 100);

		        throw new RangeError("Chance: Your pool is too small for the given mean and standard deviation. Please adjust.");
		    };

		    Chance.prototype.radio = function (options) {
		        // Initial Letter (Typically Designated by Side of Mississippi River)
		        options = initOptions(options, {side : "?"});
		        var fl = "";
		        switch (options.side.toLowerCase()) {
		        case "east":
		        case "e":
		            fl = "W";
		            break;
		        case "west":
		        case "w":
		            fl = "K";
		            break;
		        default:
		            fl = this.character({pool: "KW"});
		            break;
		        }

		        return fl + this.character({alpha: true, casing: "upper"}) +
		                this.character({alpha: true, casing: "upper"}) +
		                this.character({alpha: true, casing: "upper"});
		    };

		    // Set the data as key and data or the data map
		    Chance.prototype.set = function (name, values) {
		        if (typeof name === "string") {
		            data[name] = values;
		        } else {
		            data = copyObject(name, data);
		        }
		    };

		    Chance.prototype.tv = function (options) {
		        return this.radio(options);
		    };

		    // ID number for Brazil companies
		    Chance.prototype.cnpj = function () {
		        var n = this.n(this.natural, 8, { max: 9 });
		        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;
		        d1 = 11 - (d1 % 11);
		        if (d1>=10){
		            d1 = 0;
		        }
		        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;
		        d2 = 11 - (d2 % 11);
		        if (d2>=10){
		            d2 = 0;
		        }
		        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;
		    };

		    Chance.prototype.emotion = function () {
		        return this.pick(this.get("emotions"));
		    };

		    // -- End Miscellaneous --

		    Chance.prototype.mersenne_twister = function (seed) {
		        return new MersenneTwister(seed);
		    };

		    Chance.prototype.blueimp_md5 = function () {
		        return new BlueImpMD5();
		    };

		    // Mersenne Twister from https://gist.github.com/banksean/300494
		    /*
		       A C-program for MT19937, with initialization improved 2002/1/26.
		       Coded by Takuji Nishimura and Makoto Matsumoto.

		       Before using, initialize the state by using init_genrand(seed)
		       or init_by_array(init_key, key_length).

		       Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
		       All rights reserved.

		       Redistribution and use in source and binary forms, with or without
		       modification, are permitted provided that the following conditions
		       are met:

		       1. Redistributions of source code must retain the above copyright
		       notice, this list of conditions and the following disclaimer.

		       2. Redistributions in binary form must reproduce the above copyright
		       notice, this list of conditions and the following disclaimer in the
		       documentation and/or other materials provided with the distribution.

		       3. The names of its contributors may not be used to endorse or promote
		       products derived from this software without specific prior written
		       permission.

		       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		       A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
		       CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
		       EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
		       PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
		       PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
		       LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		       NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
		       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


		       Any feedback is very welcome.
		       http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
		       email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
		     */
		    var MersenneTwister = function (seed) {
		        if (seed === undefined) {
		            // kept random number same size as time used previously to ensure no unexpected results downstream
		            seed = Math.floor(Math.random()*Math.pow(10,13));
		        }
		        /* Period parameters */
		        this.N = 624;
		        this.M = 397;
		        this.MATRIX_A = 0x9908b0df;   /* constant vector a */
		        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
		        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

		        this.mt = new Array(this.N); /* the array for the state vector */
		        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */

		        this.init_genrand(seed);
		    };

		    /* initializes mt[N] with a seed */
		    MersenneTwister.prototype.init_genrand = function (s) {
		        this.mt[0] = s >>> 0;
		        for (this.mti = 1; this.mti < this.N; this.mti++) {
		            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
		            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;
		            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
		            /* In the previous versions, MSBs of the seed affect   */
		            /* only MSBs of the array mt[].                        */
		            /* 2002/01/09 modified by Makoto Matsumoto             */
		            this.mt[this.mti] >>>= 0;
		            /* for >32 bit machines */
		        }
		    };

		    /* initialize by an array with array-length */
		    /* init_key is the array for initializing keys */
		    /* key_length is its length */
		    /* slight change for C++, 2004/2/26 */
		    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
		        var i = 1, j = 0, k, s;
		        this.init_genrand(19650218);
		        k = (this.N > key_length ? this.N : key_length);
		        for (; k; k--) {
		            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */
		            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		            i++;
		            j++;
		            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
		            if (j >= key_length) { j = 0; }
		        }
		        for (k = this.N - 1; k; k--) {
		            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
		            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */
		            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		            i++;
		            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
		        }

		        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
		    };

		    /* generates a random number on [0,0xffffffff]-interval */
		    MersenneTwister.prototype.genrand_int32 = function () {
		        var y;
		        var mag01 = new Array(0x0, this.MATRIX_A);
		        /* mag01[x] = x * MATRIX_A  for x=0,1 */

		        if (this.mti >= this.N) { /* generate N words at one time */
		            var kk;

		            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */
		                this.init_genrand(5489); /* a default initial seed is used */
		            }
		            for (kk = 0; kk < this.N - this.M; kk++) {
		                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
		                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
		            }
		            for (;kk < this.N - 1; kk++) {
		                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
		                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
		            }
		            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
		            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

		            this.mti = 0;
		        }

		        y = this.mt[this.mti++];

		        /* Tempering */
		        y ^= (y >>> 11);
		        y ^= (y << 7) & 0x9d2c5680;
		        y ^= (y << 15) & 0xefc60000;
		        y ^= (y >>> 18);

		        return y >>> 0;
		    };

		    /* generates a random number on [0,0x7fffffff]-interval */
		    MersenneTwister.prototype.genrand_int31 = function () {
		        return (this.genrand_int32() >>> 1);
		    };

		    /* generates a random number on [0,1]-real-interval */
		    MersenneTwister.prototype.genrand_real1 = function () {
		        return this.genrand_int32() * (1.0 / 4294967295.0);
		        /* divided by 2^32-1 */
		    };

		    /* generates a random number on [0,1)-real-interval */
		    MersenneTwister.prototype.random = function () {
		        return this.genrand_int32() * (1.0 / 4294967296.0);
		        /* divided by 2^32 */
		    };

		    /* generates a random number on (0,1)-real-interval */
		    MersenneTwister.prototype.genrand_real3 = function () {
		        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
		        /* divided by 2^32 */
		    };

		    /* generates a random number on [0,1) with 53-bit resolution*/
		    MersenneTwister.prototype.genrand_res53 = function () {
		        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;
		        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
		    };

		    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5
		    var BlueImpMD5 = function () {};

		    BlueImpMD5.prototype.VERSION = '1.0.1';

		    /*
		    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
		    * to work around bugs in some JS interpreters.
		    */
		    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {
		        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
		            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		        return (msw << 16) | (lsw & 0xFFFF);
		    };

		    /*
		    * Bitwise rotate a 32-bit number to the left.
		    */
		    BlueImpMD5.prototype.bit_roll = function (num, cnt) {
		        return (num << cnt) | (num >>> (32 - cnt));
		    };

		    /*
		    * These functions implement the five basic operations the algorithm uses.
		    */
		    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {
		        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
		    };
		    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {
		        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
		    };
		    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {
		        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
		    };
		    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {
		        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
		    };
		    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {
		        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
		    };

		    /*
		    * Calculate the MD5 of an array of little-endian words, and a bit length.
		    */
		    BlueImpMD5.prototype.binl_md5 = function (x, len) {
		        /* append padding */
		        x[len >> 5] |= 0x80 << (len % 32);
		        x[(((len + 64) >>> 9) << 4) + 14] = len;

		        var i, olda, oldb, oldc, oldd,
		            a =  1732584193,
		            b = -271733879,
		            c = -1732584194,
		            d =  271733878;

		        for (i = 0; i < x.length; i += 16) {
		            olda = a;
		            oldb = b;
		            oldc = c;
		            oldd = d;

		            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);
		            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);
		            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);
		            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);
		            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);
		            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);
		            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);
		            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);
		            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);
		            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);
		            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
		            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
		            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);
		            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
		            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
		            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);

		            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);
		            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);
		            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);
		            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);
		            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);
		            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);
		            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
		            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);
		            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);
		            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);
		            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);
		            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);
		            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);
		            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);
		            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);
		            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

		            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);
		            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);
		            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);
		            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
		            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);
		            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);
		            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);
		            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
		            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);
		            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);
		            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);
		            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);
		            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);
		            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
		            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);
		            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);

		            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);
		            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);
		            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
		            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);
		            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);
		            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);
		            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
		            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);
		            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);
		            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
		            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);
		            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);
		            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);
		            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
		            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);
		            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);

		            a = this.safe_add(a, olda);
		            b = this.safe_add(b, oldb);
		            c = this.safe_add(c, oldc);
		            d = this.safe_add(d, oldd);
		        }
		        return [a, b, c, d];
		    };

		    /*
		    * Convert an array of little-endian words to a string
		    */
		    BlueImpMD5.prototype.binl2rstr = function (input) {
		        var i,
		            output = '';
		        for (i = 0; i < input.length * 32; i += 8) {
		            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
		        }
		        return output;
		    };

		    /*
		    * Convert a raw string to an array of little-endian words
		    * Characters >255 have their high-byte silently ignored.
		    */
		    BlueImpMD5.prototype.rstr2binl = function (input) {
		        var i,
		            output = [];
		        output[(input.length >> 2) - 1] = undefined;
		        for (i = 0; i < output.length; i += 1) {
		            output[i] = 0;
		        }
		        for (i = 0; i < input.length * 8; i += 8) {
		            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
		        }
		        return output;
		    };

		    /*
		    * Calculate the MD5 of a raw string
		    */
		    BlueImpMD5.prototype.rstr_md5 = function (s) {
		        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
		    };

		    /*
		    * Calculate the HMAC-MD5, of a key and some data (raw strings)
		    */
		    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {
		        var i,
		            bkey = this.rstr2binl(key),
		            ipad = [],
		            opad = [],
		            hash;
		        ipad[15] = opad[15] = undefined;
		        if (bkey.length > 16) {
		            bkey = this.binl_md5(bkey, key.length * 8);
		        }
		        for (i = 0; i < 16; i += 1) {
		            ipad[i] = bkey[i] ^ 0x36363636;
		            opad[i] = bkey[i] ^ 0x5C5C5C5C;
		        }
		        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);
		        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
		    };

		    /*
		    * Convert a raw string to a hex string
		    */
		    BlueImpMD5.prototype.rstr2hex = function (input) {
		        var hex_tab = '0123456789abcdef',
		            output = '',
		            x,
		            i;
		        for (i = 0; i < input.length; i += 1) {
		            x = input.charCodeAt(i);
		            output += hex_tab.charAt((x >>> 4) & 0x0F) +
		                hex_tab.charAt(x & 0x0F);
		        }
		        return output;
		    };

		    /*
		    * Encode a string as utf-8
		    */
		    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {
		        return unescape(encodeURIComponent(input));
		    };

		    /*
		    * Take string arguments and return either raw or hex encoded strings
		    */
		    BlueImpMD5.prototype.raw_md5 = function (s) {
		        return this.rstr_md5(this.str2rstr_utf8(s));
		    };
		    BlueImpMD5.prototype.hex_md5 = function (s) {
		        return this.rstr2hex(this.raw_md5(s));
		    };
		    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {
		        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));
		    };
		    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {
		        return this.rstr2hex(this.raw_hmac_md5(k, d));
		    };

		    BlueImpMD5.prototype.md5 = function (string, key, raw) {
		        if (!key) {
		            if (!raw) {
		                return this.hex_md5(string);
		            }

		            return this.raw_md5(string);
		        }

		        if (!raw) {
		            return this.hex_hmac_md5(key, string);
		        }

		        return this.raw_hmac_md5(key, string);
		    };

		    // CommonJS module
		    {
		        if (module.exports) {
		            exports = module.exports = Chance;
		        }
		        exports.Chance = Chance;
		    }

		    // if there is a importsScrips object define chance for worker
		    // allows worker to use full Chance functionality with seed
		    if (typeof importScripts !== 'undefined') {
		        chance = new Chance();
		        self.Chance = Chance;
		    }

		    // If there is a window object, that at least has a document property,
		    // instantiate and define chance on the window
		    if (typeof window === "object" && typeof window.document === "object") {
		        window.Chance = Chance;
		        window.chance = new Chance();
		    }
		})(); 
	} (chance$1, chance$1.exports));
	return chance$1.exports;
}

var chanceExports = requireChance();

const groupByWhenCaseForScatterPlotAggregation = "${ groupByFieldsForStatistics } WHEN (${ y } ${ yMinOperand } ${ yValue } AND ${ y } ${ yMaxOperand } ${ yValuePlusStep } AND ${ x } ${ xMinOperand } ${ xValue } AND ${ x } ${ xMaxOperand } ${ xValuePlusStep }) THEN '${ xValue }|${ xValuePlusStep}|${ yValue }|${ yValuePlusStep }'";

/**
 * Fetches a count of distinct values for the x and y fields
 * @param props.chartConfig The chart configuration
 * @param props.queryObject The query object
 * @param props.queryConfig The query configuration
 * @param props.abortKey The abort key for the query
 */
async function getStatsForAggregation(props) {
    const { chartConfig, queryObject, queryConfig, abortKey } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    const { dataContextCountDistinctX, dataContextCountDistinctY } = ChartDefaults.scatterPlotAggregationFields;
    const modifiedQueryConfig = {
        ...queryConfig,
        outStatistics: [
            {
                statisticType: RESTStatisticType.Count,
                outStatisticFieldName: dataContextCountDistinctX,
                onStatisticField: x,
            },
            {
                statisticType: RESTStatisticType.Count,
                outStatisticFieldName: dataContextCountDistinctY,
                onStatisticField: y,
            },
        ],
        returnDistinctValues: true, // this parameters guarantees the 2 count stats bring back distinct values. It has no impact on the other stats.
    };
    const aggregationStatsMap = await ip({
        queryObject,
        queryConfig: modifiedQueryConfig,
        abortKey,
    });
    return aggregationStatsMap;
}
/**
 * Fetches some additional statistics needed for the aggregation feature.
 * @param props.statsMap The Map already storing the common statistics
 * @param props.queryObject The query object
 * @param props.chartConfig The chart configuration
 * @param props.options The chart options
 * @param props.queryConfig The query configuration
 * @param props.abortKey The abort key for the query
 */
async function fetchAggregationDataStatistics(props) {
    const { statsMap, chartConfig, queryObject, options, queryConfig, abortKey } = props;
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField, dataContextCountDistinctX, dataContextCountDistinctY, } = ChartDefaults.scatterPlotAggregationFields;
    let xStep;
    let yStep;
    let rowCount;
    let columnCount;
    let realGridSize;
    const xMin = statsMap.get(dataContextXMinField);
    const xMax = statsMap.get(dataContextXMaxField);
    const yMin = statsMap.get(dataContextYMinField);
    const yMax = statsMap.get(dataContextYMaxField);
    // If one of the min/max is values has non been computed, we cannot perform the aggregation and return an empty array
    if (xMin !== undefined &&
        xMin !== null &&
        yMin !== undefined &&
        yMin !== null &&
        xMax !== undefined &&
        xMax !== null &&
        yMax !== undefined &&
        yMax !== null &&
        !Number.isNaN(xMin + xMax + yMin + yMax)) {
        const { maxScatterPointsAfterAggregation } = Zo(options?.chartLimits);
        const gridSize = maxScatterPointsAfterAggregation;
        // The maximum number of rows and columns for a given grid size (ie 100 for a grid size of 10,000 cells)
        const maxRowAndColumnCount = Math.floor(Math.sqrt(gridSize));
        // Fetching the distinct count for the x and y fields
        // This is used to avoid creating more columns or rows than there are values for those fields
        const distinctCountsMap = await getStatsForAggregation({
            queryObject,
            chartConfig,
            queryConfig,
            abortKey,
        });
        rowCount = Math.min(distinctCountsMap.get(dataContextCountDistinctY) ?? Number.NaN, maxRowAndColumnCount);
        columnCount = Math.min(distinctCountsMap.get(dataContextCountDistinctX) ?? Number.NaN, maxRowAndColumnCount);
        // The real grid size can be different from the default grid size because 'numRowOrColumn' is rounded, usually leading to a smaller grid
        realGridSize = columnCount * rowCount;
        // Calculating the steps (each square size). the step is 0 if min = max
        xStep = xMax === xMin ? 0 : (xMax - xMin) / (columnCount - 1);
        yStep = yMax === yMin ? 0 : (yMax - yMin) / (rowCount - 1);
        // complete the statistic map
        statsMap.set(ChartDefaults.scatterPlotAggregationFields.xStep, xStep);
        statsMap.set(ChartDefaults.scatterPlotAggregationFields.yStep, yStep);
        statsMap.set(ChartDefaults.scatterPlotAggregationFields.rowCount, rowCount);
        statsMap.set(ChartDefaults.scatterPlotAggregationFields.columnCount, columnCount);
        statsMap.set(ChartDefaults.scatterPlotAggregationFields.realGridSize, realGridSize);
    }
}
function addWhenCase(props) {
    const { groupByFieldsForStatistics, x, y, xValue, yValue, xStep, yStep, endOfRow, endOfColumn } = props;
    let newGroupByField = groupByFieldsForStatistics === "" ? GroupByKeywords.groupByCaseBegin : groupByFieldsForStatistics;
    newGroupByField = On(groupByWhenCaseForScatterPlotAggregation, {
        groupByFieldsForStatistics: newGroupByField,
        x,
        y,
        xValue: `${xValue}`,
        yValue: `${yValue}`,
        xValuePlusStep: `${xValue + (endOfColumn ? 0 : xStep)}`,
        yValuePlusStep: `${yValue + (endOfRow ? 0 : yStep)}`,
        xMinOperand: endOfColumn ? "=" : ">=", // we use = to catch the last value of the column, >= otherwise
        yMinOperand: endOfRow ? "=" : ">=", // we use = to catch the last value of the line, >= otherwise
        xMaxOperand: endOfColumn ? "=" : "<", // we use = to catch the last value of the column, < otherwise
        yMaxOperand: endOfRow ? "=" : "<", // we use = to catch the last value of the line, < otherwise
    });
    return newGroupByField;
}
async function addAggregatedFeatures(props) {
    const { chartConfig, queryConfig, queryObject, xMin, xMax, yMin, yMax, abortKey } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    const modifiedQueryConfig = { ...queryConfig };
    modifiedQueryConfig.where = $s([modifiedQueryConfig.where, `${x}>=${xMin}`, `${x}<=${xMax}`]);
    if (x !== y) {
        modifiedQueryConfig.where = $s([modifiedQueryConfig.where, `${y}>=${yMin}`, `${y}<=${yMax}`]);
    }
    return await op({
        queryObject,
        queryConfig: modifiedQueryConfig,
        noBatch: true,
        featureCount: 1, // this will skip the query counting the features
        abortKey,
    });
}
/**
 * Fetches aggregated data for the scatter plot
 * @param props.statsMap The Map already storing the common statistics
 * @param props.queryObject The query object (layer or layer view)
 * @param props.chartConfig The chart configuration
 * @param props.options The chart options
 * @param props.queryConfig The query configuration
 * @param props.useQueryAttributeBins Whether to use the queryAttributeBins method
 * @param props.errorStrings The error strings
 * @param props.abortKey The abort key for the query
 */
async function fetchRawScatterPlotAggregatedData(props) {
    const { statsMap, chartConfig, queryObject, queryConfig, useQueryAttributeBins, errorStrings, abortKey } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField, queryNumberOfFeatures, queryNumberOfAggregatedFeatures, } = ChartDefaults.scatterPlotAggregationFields;
    let rawScatterPlotAggregatedData = [];
    const xMin = statsMap?.get(dataContextXMinField) ?? Number.NaN;
    const xMax = statsMap?.get(dataContextXMaxField) ?? Number.NaN;
    const numberOfFeatures = statsMap?.get(queryNumberOfFeatures) ?? Number.NaN;
    // If x and y are different fields, we fetch them, otherwise they're equal to xMin and xMax
    const yMin = statsMap?.get(dataContextYMinField) ?? xMin;
    const yMax = statsMap?.get(dataContextYMaxField) ?? xMax;
    // If one of the min/max is values has non been computed, we cannot perform the aggregation and return an empty array
    if (xMin !== undefined &&
        xMin !== null &&
        yMin !== undefined &&
        yMin !== null &&
        xMax !== undefined &&
        xMax !== null &&
        yMax !== undefined &&
        yMax !== null &&
        !Number.isNaN(xMin + xMax + yMin + yMax)) {
        const layer = Ds(queryObject);
        const { objectIdField } = layer;
        const xStep = statsMap?.get(ChartDefaults.scatterPlotAggregationFields.xStep);
        const yStep = statsMap?.get(ChartDefaults.scatterPlotAggregationFields.yStep);
        const realGridSize = statsMap?.get(ChartDefaults.scatterPlotAggregationFields.realGridSize);
        const rowCount = statsMap?.get(ChartDefaults.scatterPlotAggregationFields.rowCount);
        const columnCount = statsMap?.get(ChartDefaults.scatterPlotAggregationFields.columnCount);
        // using the Map object to help filter out the duplicate field names
        const dataOutStatistics = new Map();
        // adding to the outFields all the other numeric fields for handling bubble plot
        const fieldList = await Sc(queryObject);
        fieldList?.forEach((field) => {
            if (Ic(field)) {
                dataOutStatistics.set(field.name, {
                    onStatisticField: field.name,
                    outStatisticFieldName: field.name,
                    statisticType: RESTStatisticType.Maximum,
                });
            }
        });
        // Adding the Average value from the renderer fields to be able to do a color match
        const rendererFieldNames = await jc(layer);
        rendererFieldNames.forEach((fieldName) => {
            dataOutStatistics.set(fieldName, {
                onStatisticField: fieldName,
                outStatisticFieldName: fieldName,
                statisticType: RESTStatisticType.Maximum,
            });
        });
        // Adding a stat to know how many points have been aggregated per cell
        // add these items last to make sure their values will be used if the item already exist
        dataOutStatistics
            .set(objectIdField, {
            onStatisticField: objectIdField,
            outStatisticFieldName: queryNumberOfAggregatedFeatures,
            statisticType: RESTStatisticType.Count,
        })
            .set(x, {
            onStatisticField: x,
            outStatisticFieldName: x,
            statisticType: RESTStatisticType.Maximum,
        })
            .set(y, {
            onStatisticField: y,
            outStatisticFieldName: y,
            statisticType: RESTStatisticType.Maximum,
        });
        if (xStep !== undefined && yStep !== undefined) {
            if (useQueryAttributeBins) {
                const modifiedQueryConfig = {
                    ...queryConfig,
                    outStatistics: [...dataOutStatistics.values()],
                };
                rawScatterPlotAggregatedData = await ep({
                    queryObject,
                    queryConfig: modifiedQueryConfig,
                    xStep,
                    xMin,
                    xMax,
                    x,
                    y,
                    yStep,
                    errorStrings,
                });
            }
            else if (rowCount !== undefined && columnCount !== undefined) {
                // counter to keep track of how many cells we dealt with while building the query
                let numberOfCells = 0;
                const { maxScatterCellsPerQuery: maxScatterCellsPerQueryDefault, maxScatterCellsPerQueryForStandard } = ea();
                const isStandardDatabase = await Bc(layer);
                const maxScatterCellsPerQuery = isStandardDatabase
                    ? maxScatterCellsPerQueryForStandard
                    : maxScatterCellsPerQueryDefault;
                const dataPromiseArray = [];
                let moreData = true;
                let xValue = xMin;
                let yValue = yMin;
                let groupByFieldsForStatistics = "";
                let rowNumber = 1;
                let columnNumber = 1;
                let queryXMin = Number.MAX_SAFE_INTEGER;
                let queryXMax = Number.MIN_SAFE_INTEGER;
                let queryYMin = Number.MAX_SAFE_INTEGER;
                let queryYMax = Number.MIN_SAFE_INTEGER;
                while (columnNumber <= columnCount && moreData) {
                    yValue = yMin;
                    rowNumber = 1;
                    while (rowNumber <= rowCount && moreData) {
                        groupByFieldsForStatistics = addWhenCase({
                            groupByFieldsForStatistics,
                            x,
                            y,
                            xValue,
                            yValue,
                            xStep,
                            yStep,
                            endOfRow: rowNumber === rowCount,
                            endOfColumn: columnNumber === columnCount,
                        });
                        // Adjusting the query xmin/xmax/ymin/ymax according to the values of the computed cell
                        if (xValue < queryXMin) {
                            queryXMin = xValue;
                        }
                        if (xValue + xStep > queryXMax) {
                            queryXMax = xValue + xStep;
                        }
                        if (yValue < queryYMin) {
                            queryYMin = yValue;
                        }
                        if (yValue + xStep > queryYMax) {
                            queryYMax = yValue + yStep;
                        }
                        numberOfCells += 1;
                        /* if we reached the maximum number of elements per query or the end of the last grid cell,
                    we finish the groupByFieldsForStatistics string and finalize the query.
                    */
                        if (numberOfCells % maxScatterCellsPerQuery === 0 ||
                            numberOfCells === realGridSize ||
                            numberOfCells === numberOfFeatures) {
                            groupByFieldsForStatistics = `${groupByFieldsForStatistics} ${GroupByKeywords.groupByCaseEnd}`;
                            const modifiedQueryConfig = {
                                ...queryConfig,
                                groupByFieldsForStatistics: [groupByFieldsForStatistics],
                                outStatistics: [...dataOutStatistics.values()],
                            };
                            dataPromiseArray.push(addAggregatedFeatures({
                                chartConfig,
                                queryConfig: modifiedQueryConfig,
                                queryObject,
                                xMin: queryXMin,
                                xMax: queryXMax,
                                yMin: queryYMin,
                                yMax: queryYMax,
                                abortKey,
                            }));
                            // Reset the extent for the next query
                            queryXMin = Number.MAX_SAFE_INTEGER;
                            queryXMax = Number.MIN_SAFE_INTEGER;
                            queryYMin = Number.MAX_SAFE_INTEGER;
                            queryYMax = Number.MIN_SAFE_INTEGER;
                            // We reset the groupByFieldsForStatistics to start a new query
                            groupByFieldsForStatistics = "";
                            // We are done when we went through the whole grid
                            if (numberOfCells === realGridSize) {
                                moreData = false;
                            }
                        }
                        yValue += yStep;
                        rowNumber += 1;
                    }
                    xValue += xStep;
                    columnNumber += 1;
                }
                rawScatterPlotAggregatedData = (await Promise.all(dataPromiseArray)).flat();
            }
        }
    }
    return rawScatterPlotAggregatedData;
}

const seedString = "arcgis-charts-scatter-seed";

var regression$1 = {exports: {}};

var regression = regression$1.exports;

var hasRequiredRegression;

function requireRegression () {
	if (hasRequiredRegression) return regression$1.exports;
	hasRequiredRegression = 1;
	(function (module, exports) {
		(function (global, factory) {
		  {
		    factory(module);
		  }
		})(regression, function (module) {

		  function _defineProperty(obj, key, value) {
		    if (key in obj) {
		      Object.defineProperty(obj, key, {
		        value: value,
		        enumerable: true,
		        configurable: true,
		        writable: true
		      });
		    } else {
		      obj[key] = value;
		    }

		    return obj;
		  }

		  var _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  };

		  function _toConsumableArray(arr) {
		    if (Array.isArray(arr)) {
		      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
		        arr2[i] = arr[i];
		      }

		      return arr2;
		    } else {
		      return Array.from(arr);
		    }
		  }

		  var DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };

		  /**
		  * Determine the coefficient of determination (r^2) of a fit from the observations
		  * and predictions.
		  *
		  * @param {Array<Array<number>>} data - Pairs of observed x-y values
		  * @param {Array<Array<number>>} results - Pairs of observed predicted x-y values
		  *
		  * @return {number} - The r^2 value, or NaN if one cannot be calculated.
		  */
		  function determinationCoefficient(data, results) {
		    var predictions = [];
		    var observations = [];

		    data.forEach(function (d, i) {
		      if (d[1] !== null) {
		        observations.push(d);
		        predictions.push(results[i]);
		      }
		    });

		    var sum = observations.reduce(function (a, observation) {
		      return a + observation[1];
		    }, 0);
		    var mean = sum / observations.length;

		    var ssyy = observations.reduce(function (a, observation) {
		      var difference = observation[1] - mean;
		      return a + difference * difference;
		    }, 0);

		    var sse = observations.reduce(function (accum, observation, index) {
		      var prediction = predictions[index];
		      var residual = observation[1] - prediction[1];
		      return accum + residual * residual;
		    }, 0);

		    return 1 - sse / ssyy;
		  }

		  /**
		  * Determine the solution of a system of linear equations A * x = b using
		  * Gaussian elimination.
		  *
		  * @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]
		  * @param {number} order - How many degrees to solve for
		  *
		  * @return {Array<number>} - Vector of normalized solution coefficients matrix (x)
		  */
		  function gaussianElimination(input, order) {
		    var matrix = input;
		    var n = input.length - 1;
		    var coefficients = [order];

		    for (var i = 0; i < n; i++) {
		      var maxrow = i;
		      for (var j = i + 1; j < n; j++) {
		        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {
		          maxrow = j;
		        }
		      }

		      for (var k = i; k < n + 1; k++) {
		        var tmp = matrix[k][i];
		        matrix[k][i] = matrix[k][maxrow];
		        matrix[k][maxrow] = tmp;
		      }

		      for (var _j = i + 1; _j < n; _j++) {
		        for (var _k = n; _k >= i; _k--) {
		          matrix[_k][_j] -= matrix[_k][i] * matrix[i][_j] / matrix[i][i];
		        }
		      }
		    }

		    for (var _j2 = n - 1; _j2 >= 0; _j2--) {
		      var total = 0;
		      for (var _k2 = _j2 + 1; _k2 < n; _k2++) {
		        total += matrix[_k2][_j2] * coefficients[_k2];
		      }

		      coefficients[_j2] = (matrix[n][_j2] - total) / matrix[_j2][_j2];
		    }

		    return coefficients;
		  }

		  /**
		  * Round a number to a precision, specificed in number of decimal places
		  *
		  * @param {number} number - The number to round
		  * @param {number} precision - The number of decimal places to round to:
		  *                             > 0 means decimals, < 0 means powers of 10
		  *
		  *
		  * @return {numbr} - The number, rounded
		  */
		  function round(number, precision) {
		    var factor = Math.pow(10, precision);
		    return Math.round(number * factor) / factor;
		  }

		  /**
		  * The set of all fitting methods
		  *
		  * @namespace
		  */
		  var methods = {
		    linear: function linear(data, options) {
		      var sum = [0, 0, 0, 0, 0];
		      var len = 0;

		      for (var n = 0; n < data.length; n++) {
		        if (data[n][1] !== null) {
		          len++;
		          sum[0] += data[n][0];
		          sum[1] += data[n][1];
		          sum[2] += data[n][0] * data[n][0];
		          sum[3] += data[n][0] * data[n][1];
		          sum[4] += data[n][1] * data[n][1];
		        }
		      }

		      var run = len * sum[2] - sum[0] * sum[0];
		      var rise = len * sum[3] - sum[0] * sum[1];
		      var gradient = run === 0 ? 0 : round(rise / run, options.precision);
		      var intercept = round(sum[1] / len - gradient * sum[0] / len, options.precision);

		      var predict = function predict(x) {
		        return [round(x, options.precision), round(gradient * x + intercept, options.precision)];
		      };

		      var points = data.map(function (point) {
		        return predict(point[0]);
		      });

		      return {
		        points: points,
		        predict: predict,
		        equation: [gradient, intercept],
		        r2: round(determinationCoefficient(data, points), options.precision),
		        string: intercept === 0 ? 'y = ' + gradient + 'x' : 'y = ' + gradient + 'x + ' + intercept
		      };
		    },
		    exponential: function exponential(data, options) {
		      var sum = [0, 0, 0, 0, 0, 0];

		      for (var n = 0; n < data.length; n++) {
		        if (data[n][1] !== null) {
		          sum[0] += data[n][0];
		          sum[1] += data[n][1];
		          sum[2] += data[n][0] * data[n][0] * data[n][1];
		          sum[3] += data[n][1] * Math.log(data[n][1]);
		          sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);
		          sum[5] += data[n][0] * data[n][1];
		        }
		      }

		      var denominator = sum[1] * sum[2] - sum[5] * sum[5];
		      var a = Math.exp((sum[2] * sum[3] - sum[5] * sum[4]) / denominator);
		      var b = (sum[1] * sum[4] - sum[5] * sum[3]) / denominator;
		      var coeffA = round(a, options.precision);
		      var coeffB = round(b, options.precision);
		      var predict = function predict(x) {
		        return [round(x, options.precision), round(coeffA * Math.exp(coeffB * x), options.precision)];
		      };

		      var points = data.map(function (point) {
		        return predict(point[0]);
		      });

		      return {
		        points: points,
		        predict: predict,
		        equation: [coeffA, coeffB],
		        string: 'y = ' + coeffA + 'e^(' + coeffB + 'x)',
		        r2: round(determinationCoefficient(data, points), options.precision)
		      };
		    },
		    logarithmic: function logarithmic(data, options) {
		      var sum = [0, 0, 0, 0];
		      var len = data.length;

		      for (var n = 0; n < len; n++) {
		        if (data[n][1] !== null) {
		          sum[0] += Math.log(data[n][0]);
		          sum[1] += data[n][1] * Math.log(data[n][0]);
		          sum[2] += data[n][1];
		          sum[3] += Math.pow(Math.log(data[n][0]), 2);
		        }
		      }

		      var a = (len * sum[1] - sum[2] * sum[0]) / (len * sum[3] - sum[0] * sum[0]);
		      var coeffB = round(a, options.precision);
		      var coeffA = round((sum[2] - coeffB * sum[0]) / len, options.precision);

		      var predict = function predict(x) {
		        return [round(x, options.precision), round(round(coeffA + coeffB * Math.log(x), options.precision), options.precision)];
		      };

		      var points = data.map(function (point) {
		        return predict(point[0]);
		      });

		      return {
		        points: points,
		        predict: predict,
		        equation: [coeffA, coeffB],
		        string: 'y = ' + coeffA + ' + ' + coeffB + ' ln(x)',
		        r2: round(determinationCoefficient(data, points), options.precision)
		      };
		    },
		    power: function power(data, options) {
		      var sum = [0, 0, 0, 0, 0];
		      var len = data.length;

		      for (var n = 0; n < len; n++) {
		        if (data[n][1] !== null) {
		          sum[0] += Math.log(data[n][0]);
		          sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);
		          sum[2] += Math.log(data[n][1]);
		          sum[3] += Math.pow(Math.log(data[n][0]), 2);
		        }
		      }

		      var b = (len * sum[1] - sum[0] * sum[2]) / (len * sum[3] - Math.pow(sum[0], 2));
		      var a = (sum[2] - b * sum[0]) / len;
		      var coeffA = round(Math.exp(a), options.precision);
		      var coeffB = round(b, options.precision);

		      var predict = function predict(x) {
		        return [round(x, options.precision), round(round(coeffA * Math.pow(x, coeffB), options.precision), options.precision)];
		      };

		      var points = data.map(function (point) {
		        return predict(point[0]);
		      });

		      return {
		        points: points,
		        predict: predict,
		        equation: [coeffA, coeffB],
		        string: 'y = ' + coeffA + 'x^' + coeffB,
		        r2: round(determinationCoefficient(data, points), options.precision)
		      };
		    },
		    polynomial: function polynomial(data, options) {
		      var lhs = [];
		      var rhs = [];
		      var a = 0;
		      var b = 0;
		      var len = data.length;
		      var k = options.order + 1;

		      for (var i = 0; i < k; i++) {
		        for (var l = 0; l < len; l++) {
		          if (data[l][1] !== null) {
		            a += Math.pow(data[l][0], i) * data[l][1];
		          }
		        }

		        lhs.push(a);
		        a = 0;

		        var c = [];
		        for (var j = 0; j < k; j++) {
		          for (var _l = 0; _l < len; _l++) {
		            if (data[_l][1] !== null) {
		              b += Math.pow(data[_l][0], i + j);
		            }
		          }
		          c.push(b);
		          b = 0;
		        }
		        rhs.push(c);
		      }
		      rhs.push(lhs);

		      var coefficients = gaussianElimination(rhs, k).map(function (v) {
		        return round(v, options.precision);
		      });

		      var predict = function predict(x) {
		        return [round(x, options.precision), round(coefficients.reduce(function (sum, coeff, power) {
		          return sum + coeff * Math.pow(x, power);
		        }, 0), options.precision)];
		      };

		      var points = data.map(function (point) {
		        return predict(point[0]);
		      });

		      var string = 'y = ';
		      for (var _i = coefficients.length - 1; _i >= 0; _i--) {
		        if (_i > 1) {
		          string += coefficients[_i] + 'x^' + _i + ' + ';
		        } else if (_i === 1) {
		          string += coefficients[_i] + 'x + ';
		        } else {
		          string += coefficients[_i];
		        }
		      }

		      return {
		        string: string,
		        points: points,
		        predict: predict,
		        equation: [].concat(_toConsumableArray(coefficients)).reverse(),
		        r2: round(determinationCoefficient(data, points), options.precision)
		      };
		    }
		  };

		  function createWrapper() {
		    var reduce = function reduce(accumulator, name) {
		      return _extends({
		        _round: round
		      }, accumulator, _defineProperty({}, name, function (data, supplied) {
		        return methods[name](data, _extends({}, DEFAULT_OPTIONS, supplied));
		      }));
		    };

		    return Object.keys(methods).reduce(reduce, {});
		  }

		  module.exports = createWrapper();
		}); 
	} (regression$1, regression$1.exports));
	return regression$1.exports;
}

var regressionExports = requireRegression();

const QueryAnalyticForTrendline = {
    dataFormat: "json",
    outputFormat: "json",
    typeKey: "analyticType",
    typeValue: "LinRegR2",
    fieldValue: "onAnalyticField",
    slopePropertyList: ["Slope", "SLOPE", "slope"],
    interceptPropertyList: ["Intercept", "INTERCEPT", "intercept"],
    r2PropertyList: ["R2", "r2"],
};

/**
 * Returns whether the supports computing the trendline information on the server.
 * It is true when:
 *   - the layer is not a feature collection (using client-side data)
 *   - the query object is not a feature layer view
 *   - the FS accepts query analytics
 * @param props
 */
async function isServerCalculationPossible(props) {
    const { queryObject } = props;
    let possible = false;
    const isFL = Os(queryObject);
    const layer = Ds(queryObject);
    const mainLayer = js(layer);
    // excluding from the calculation:
    // - FeatureLayerView
    // - Feature Collection (when source is a Collection of Graphic)
    if (isFL && mainLayer.url !== undefined && mainLayer.url !== null) {
        const queryURL = `${mainLayer.url}/${mainLayer.layerId}?f=json`;
        try {
            const esriRequest = await importRequest();
            const layerMetaData = (await esriRequest(queryURL)).data;
            const supportsQueryAnalytic = layerMetaData?.advancedQueryCapabilities?.supportsQueryAnalytic === true;
            // For online feature layers sqlParserVersion is not defined and it is only defined for enterprise feature layers.
            // Linear Regression function support was added to Enterprise FS ( ArcObjects and Hosted ) only in 10.9.1 onwards.
            const supportsLineReg = layerMetaData?.sqlParserVersion === undefined || (mainLayer.version != null && mainLayer.version >= 10.91);
            possible = supportsQueryAnalytic && supportsLineReg;
        }
        catch (e) {
            // nothing to do, the boolean stays false
        }
    }
    return possible;
}
/**
 * This function assures the trendline to be displayed within the same bounds of the main series' data.
 * In some cases the initial trendline can have points slightly off the main extent, which can cause
 * issues on an logarithmic axis for instance that doesn't accept some values.
 * @param props
 */
function secureAndFormatTrendlinePoints(props) {
    const { x, y, statsMap, fullTrendlinePoints, securePoints } = props;
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField } = ChartDefaults.scatterPlotAggregationFields;
    const minX = statsMap.get(dataContextXMinField) ?? Number.NaN;
    const maxX = statsMap.get(dataContextXMaxField) ?? Number.NaN;
    const minY = statsMap.get(dataContextYMinField) ?? Number.NaN;
    const maxY = statsMap.get(dataContextYMaxField) ?? Number.NaN;
    // sorting the array so the first and last points are the ones we want
    // Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7285
    const sortedTrendLinePoints = [...fullTrendlinePoints].sort((pointA, pointB) => pointA[0] - pointB[0]);
    // Excluding the points not within the main series' extent
    /* TODO: sometimes after excluding points with the filter the trendline doesn't cover the
    entire drawing area anymore. It stops before reaching the last displayed points, making it look an unfinished business.
    To avoid it we could simply calculate and add one point at ymin and one point at ymax (using the equation). */
    const securedPoints = securePoints === true
        ? sortedTrendLinePoints.filter((point) => point[0] >= minX && point[1] >= minY && point[0] <= maxX && point[1] <= maxY)
        : sortedTrendLinePoints;
    const securedFirstPointX = securedPoints?.[0]?.[0] ?? Number.NaN;
    const securedFirstPointY = securedPoints?.[0]?.[1] ?? Number.NaN;
    const securedLastPointX = securedPoints?.[securedPoints.length - 1]?.[0] ?? Number.NaN;
    const securedLastPointY = securedPoints?.[securedPoints.length - 1]?.[1] ?? Number.NaN;
    const trendLinePoints = [
        { [x]: securedFirstPointX, [y]: securedFirstPointY },
        { [x]: securedLastPointX, [y]: securedLastPointY },
    ];
    return trendLinePoints;
}
/**
 * Filtering out the Number.NaN/null values from the input data and mapping what's left to a [number, number][]
 * @param props.data The array of WebChartDataItem to be filtered.
 * @param props.x The key of which value is to be used to form the first value in the [number, number] (~x)
 * @param props.y The key of which value is to be used to form the second value in the [number, number] (~y)
 */
function getDataPoints(props) {
    const { data, x, y } = props;
    let dataPoints = [];
    if (data !== undefined) {
        // filter out the Number.NaN or null values and mapping what's left to a [number, number][]
        dataPoints = data
            .filter((dataItem) => Number.isFinite(dataItem[x]) && Number.isFinite(dataItem[y]))
            .map((dataItem) => [dataItem[x], dataItem[y]]);
    }
    return dataPoints;
}
/**
 * Uses a query analytic to get the trendline data value from the server.
 * @param props
 */
async function getFinalTrendLineDataServerSide(props) {
    const { statsMap, queryObject, chartConfig, queryConfig } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    let r2 = Number.NaN;
    let trendLinePoints = [
        { [x]: Number.NaN, [y]: Number.NaN },
        { [x]: Number.NaN, [y]: Number.NaN },
    ];
    const { dataFormat, outputFormat, typeKey, typeValue, fieldValue, slopePropertyList, interceptPropertyList, r2PropertyList, } = QueryAnalyticForTrendline;
    // building the parameters
    const outAnalytics = `[{"${typeKey}": "${typeValue}", "${fieldValue}":"${x},${y}"}]`;
    const queryData = await Js({
        queryObject,
        queryConfig,
        outputFormat,
        dataFormat,
        outAnalytics,
    });
    if (queryData !== undefined) {
        let slope = Number.NaN;
        let intercept = Number.NaN;
        // storing the results from the query (r2, slope and intercept)
        const { expr: slopeProperty } = Rl(queryData, slopePropertyList);
        const { expr: interceptProperty } = Rl(queryData, interceptPropertyList);
        const { expr: r2Property } = Rl(queryData, r2PropertyList);
        if (slopeProperty !== undefined && Number.isFinite(queryData[slopeProperty])) {
            slope = queryData[slopeProperty];
        }
        if (interceptProperty !== undefined && Number.isFinite(queryData[interceptProperty])) {
            intercept = queryData[interceptProperty];
        }
        if (r2Property !== undefined && Number.isFinite(queryData[r2Property])) {
            r2 = queryData[r2Property];
        }
        const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField } = ChartDefaults.scatterPlotAggregationFields;
        const minX = statsMap.get(dataContextXMinField) ?? Number.NaN;
        const maxX = statsMap.get(dataContextXMaxField) ?? Number.NaN;
        const minY = statsMap.get(dataContextYMinField) ?? Number.NaN;
        const maxY = statsMap.get(dataContextYMaxField) ?? Number.NaN;
        /* The next section calculates the first and last points of the trendline, using the slope and intersect.
          We also secure the values to make sure they are within the chart extent. */
        const resolution = 100;
        const xStep = (maxX - minX) / resolution;
        let firstPointX = minX - xStep; // starting one step behind
        let firstPointY = Number.NaN;
        // As long as the first trendline point is not within the chart's extent, we recalculate it a step closer to the inside
        while (!(firstPointY >= minY && firstPointY <= maxY) && firstPointX <= maxX) {
            firstPointX += xStep;
            firstPointY = slope * firstPointX + intercept;
        }
        let lastPointX = maxX + xStep; // starting one step ahead
        let lastPointY = Number.NaN;
        // As long as the last trendline point is not within the chart's extent, we recalculate it a step closer to the inside
        while (!(lastPointY >= minY && lastPointY <= maxY) && lastPointX >= minX) {
            lastPointX -= xStep;
            lastPointY = slope * lastPointX + intercept;
        }
        trendLinePoints = [
            { [x]: firstPointX, [y]: firstPointY },
            { [x]: lastPointX, [y]: lastPointY },
        ];
    }
    return { r2, trendLinePoints };
}
/**
 * Uses a `linear` function to calculate the trendline data from the main series' data.
 * @param props
 */
function getFinalTrendLineDataClientSide(props, securePoints = true) {
    const { data, chartConfig, statsMap } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    let { r2, trendLinePoints } = ChartDefaults.scatterPlotSeries;
    // The data is transformed from a WebChartDataItem[] to a [number, number] before being passed to the `linear` function
    const dataPoints = getDataPoints({ data, x, y });
    if (dataPoints !== undefined) {
        // calculating the trendline points using regression/linear
        const regressionResults = regressionExports.linear(dataPoints, {
            precision: ChartDefaults.scatterPlotSeries.regressionPrecision,
        });
        // We read the r2, points and equation produced by the `linear` function
        r2 = regressionResults.r2;
        const { points: fullTrendlinePoints } = regressionResults;
        trendLinePoints = secureAndFormatTrendlinePoints({
            x,
            y,
            fullTrendlinePoints,
            statsMap,
            securePoints,
        });
    }
    return { r2, trendLinePoints };
}
/**
 * Calculates the trendline information.
 * - If the layer supports computing the trendline information on the server using query analytic capability, a query analytic is executed to get the slope, intercept and r2. Based on those we calculate the trendline points
 * - When the layer does not support computing the trendline information on the server, we call a linear function on the chart data to calculate the trendline points and r2
 * @param props
 */
async function getFinalTrendLineData(props) {
    const useServer = await isServerCalculationPossible(props);
    const { chartConfig, statsMap, options } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    const { r2 } = ChartDefaults.scatterPlotSeries;
    const trendLinePoints = [
        { [x]: Number.NaN, [y]: Number.NaN },
        { [x]: Number.NaN, [y]: Number.NaN },
    ];
    let result = { r2, trendLinePoints };
    let serverFailed = false;
    if (useServer) {
        try {
            result = await getFinalTrendLineDataServerSide(props);
        }
        catch (e) {
            serverFailed = true;
        }
    }
    // We decided to return NaN when the trendline data can't be computed by the server and the chart is aggregated, rather than returning false results
    if ((!useServer || serverFailed) && !isScatterPlotAggregated({ statsMap, chartLimits: options?.chartLimits })) {
        result = getFinalTrendLineDataClientSide(props);
    }
    return result;
}

/**
 * Retrieves the min/max values of the data extent and the total number of features
 * @param props.chartConfig the chart configuration
 * @param props.queryConfig the query configuration
 * @param props.queryObject the query object
 * @param props.abortKey the key to abort the query
 */
async function fetchDataStatistics(props) {
    const { chartConfig, queryConfig, queryObject, abortKey } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    let statsMap = new Map();
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField, queryNumberOfFeatures, } = ChartDefaults.scatterPlotAggregationFields;
    const { objectIdField } = Ds(queryObject);
    // Asking for min/max x/y to know the data extent
    const minMaxOutStatistics = [
        {
            statisticType: RESTStatisticType.Count,
            onStatisticField: objectIdField,
            outStatisticFieldName: queryNumberOfFeatures,
        },
        {
            statisticType: RESTStatisticType.Minimum,
            outStatisticFieldName: dataContextXMinField,
            onStatisticField: x,
        },
        {
            statisticType: RESTStatisticType.Maximum,
            outStatisticFieldName: dataContextXMaxField,
            onStatisticField: x,
        },
    ];
    // Testing if x !== y to avoid adding twice the same outStats to the query
    if (x !== y) {
        minMaxOutStatistics.push({
            statisticType: RESTStatisticType.Minimum,
            outStatisticFieldName: dataContextYMinField,
            onStatisticField: y,
        }, {
            statisticType: RESTStatisticType.Maximum,
            outStatisticFieldName: dataContextYMaxField,
            onStatisticField: y,
        });
    }
    const modifiedQueryConfig = { ...queryConfig };
    modifiedQueryConfig.outStatistics = minMaxOutStatistics;
    statsMap = await ip({
        queryObject,
        queryConfig: modifiedQueryConfig,
        abortKey,
    });
    // if x and y are the same field we set the yMin/Max to the same values as xMin/Max
    if (x === y) {
        statsMap.set(dataContextYMinField, statsMap.get(dataContextXMinField) ?? Number.NaN);
        statsMap.set(dataContextYMaxField, statsMap.get(dataContextXMaxField) ?? Number.NaN);
    }
    return statsMap;
}
/**
 * Randomizes a x or y value within its cell boundaries (> min and < max).
 * It helps generating a more natural look to the scatter plot markers, otherwise they have a tendency to render in lines.
 * @param props.value The value to randomize (x or y)
 * @param props.valueMin The minimum value of the cell
 * @param props.valueMax The maximum value of the cell
 * @param props.randomNumberGenerator The random seed to adjust the markers' position
 */
function randomizePositionWithinCell(props) {
    const { value, valueMin, valueMax, randomNumberGenerator } = props;
    // If a x or y coordinate is not right on the cell's edge (value = min or value = max), we randomize it
    return value === valueMin || value === valueMax
        ? value
        : randomNumberGenerator.floating({ min: 0, max: 1 }) * (valueMax - valueMin) + valueMin;
}
/**
 * Transforms a query feature into a chart data item.
 * QueryAttributeBins() will potentially return multiple features (stacks) while the classic aggregation queries
 * will bring only one.
 * @param props.useQueryAttributeBins If the query is using the QueryAttributeBins() function
 * @param props.graphic The graphic containing the attributes to transform
 * @param props.x The x field
 * @param props.y The y field
 * @param props.yStep The step for the y field
 * @param props.randomNumberGenerator The random seed to adjust the markers' position
 */
function convertAttributeToScatterPlotDataItem(props) {
    const { useQueryAttributeBins, graphic, x, y, yStep, randomNumberGenerator } = props;
    const { groupByOutKeyword } = GroupByKeywords;
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField } = ChartDefaults.scatterPlotAggregationFields;
    let aggregatedAttributes = [];
    // If the query is using the QueryAttributeBins() function, we need to transform the data, we go through each attribute
    // and within them through each stack. Each attribute contains the information for a column while each stack contains the
    // information for a row.
    if (useQueryAttributeBins && "stackedAttributes" in graphic) {
        const aliases = Zs(x, y);
        const xMin = graphic.attributes[aliases.lowerBoundaryAlias];
        const xMax = graphic.attributes[aliases.upperBoundaryAlias];
        graphic.stackedAttributes.forEach((stack) => {
            // we initialize the yMin with
            let yMin = stack[aliases.stackAlias];
            let yMax;
            // calculating the yMin value
            if (typeof yMin === "number" && typeof yStep === "number") {
                yMin *= yStep;
            }
            // calculating the yMax value
            if (typeof yMin === "number" && typeof yStep === "number") {
                yMax = yMin + yStep;
            }
            const xValue = stack[x];
            const yValue = stack[y];
            if (typeof yMin === "number" &&
                typeof yMax === "number" &&
                typeof xValue === "number" &&
                typeof yValue === "number") {
                aggregatedAttributes.push({
                    ...stack,
                    [x]: randomizePositionWithinCell({ value: xValue, valueMin: xMin, valueMax: xMax, randomNumberGenerator }),
                    [y]: randomizePositionWithinCell({ value: yValue, valueMin: yMin, valueMax: yMax, randomNumberGenerator }),
                    [dataContextXMinField]: Math.min(xMin, xMax),
                    [dataContextXMaxField]: Math.max(xMin, xMax),
                    [dataContextYMinField]: yMin,
                    [dataContextYMaxField]: yMax,
                });
            }
        });
    }
    else {
        const { expr, isInItem } = _l(graphic.attributes);
        if (isInItem && expr && graphic.attributes[expr] !== groupByOutKeyword) {
            let [xMin, xMax, yMin, yMax] = graphic.attributes[expr].split("|");
            // The extent of the point will be used by the selection feature and the marker tooltip
            xMin = Math.min(xMin, xMax);
            xMax = Math.max(xMin, xMax);
            yMin = Math.min(yMin, yMax);
            yMax = Math.max(yMin, yMax);
            const newAttributes = {
                ...graphic.attributes,
                [dataContextXMinField]: xMin,
                [dataContextXMaxField]: xMax,
                [dataContextYMinField]: yMin,
                [dataContextYMaxField]: yMax,
            };
            newAttributes[x] = randomizePositionWithinCell({
                value: newAttributes[x],
                valueMin: xMin,
                valueMax: xMax,
                randomNumberGenerator,
            });
            newAttributes[y] = randomizePositionWithinCell({
                value: newAttributes[y],
                valueMin: yMin,
                valueMax: yMax,
                randomNumberGenerator,
            });
            aggregatedAttributes = [newAttributes];
        }
    }
    return aggregatedAttributes;
}
/**
 * Transforms the raw scatterplot data into a list of chart data items.
 * @param props.queryObject The query object (layer or layer view)
 * @param props.chartConfig The chart configuration
 * @param props.rawData The raw data fetched from the server
 * @param props.isAggregationMode If the data is in aggregation mode
 * @param props.yStep The step for the y field
 * @param props.useQueryAttributeBins If the query is using the QueryAttributeBins() function
 */
async function transformScatterPlotData(props) {
    const { queryObject, chartConfig, rawData, isAggregationMode, yStep, useQueryAttributeBins } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    let transformedData = [];
    const layer = Ds(queryObject);
    const fieldOID = layer.objectIdField;
    // A random number generator seeded with the string initialized in interfaces
    const randomNumberGenerator = new chanceExports.Chance(seedString);
    transformedData = rawData.flatMap((graphic) => {
        let newAttributes = [{ ...graphic.attributes }];
        // sanitize the data in case the server returns data with uppercase properties
        // see PR https://devtopia.esri.com/WebGIS/arcgis-charts/pull/6070
        restoreAttributesCase(newAttributes[0], [x, y]);
        if (isAggregationMode) {
            newAttributes = convertAttributeToScatterPlotDataItem({
                useQueryAttributeBins,
                graphic,
                x,
                y,
                yStep,
                randomNumberGenerator,
            });
        }
        else {
            // TODO: temporary fix used as a workaround as long as the PBF queries can't bring back aliased fields
            // See issues #2195, #2128 and JSAPI https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/31780
            newAttributes[0][Un.uniqueIdsName] = newAttributes[0][fieldOID];
        }
        return newAttributes;
    });
    // Excluding the outed and invalid points
    transformedData = transformedData.filter((dataItem) => {
        const { expr } = _l(dataItem);
        return (Number.isFinite(dataItem[x]) &&
            Number.isFinite(dataItem[y]) &&
            (expr === undefined || dataItem[expr] !== GroupByKeywords.groupByOutKeyword));
    });
    return transformedData;
}
async function fetchRawScatterPlotNonAggregatedData(props) {
    const { queryObject, queryConfig, chartConfig, featureCount, abortKey } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    const layer = Ds(queryObject);
    let rawData = [];
    // adding to the outFields:
    // - x and y for the main data
    // - the objectId for the selection
    // - all the other numeric fields for handling bubble plot
    const fieldList = await Sc(queryObject);
    const numericFieldNames = (fieldList?.filter((field) => Ic(field) && field.name !== x && field.name !== y) ?? []).map((field) => field.name) ?? [];
    const outFields = [x, y, layer.objectIdField, ...numericFieldNames];
    if (!js(layer).isTable) {
        const { rendererField, rendererNormalizationField } = fc(layer?.renderer ?? undefined);
        // Adding the fields used by the renderer to the list of data to fetch
        if (!Ol(rendererField)) {
            outFields.push(rendererField);
        }
        if (!Ol(rendererNormalizationField)) {
            outFields.push(rendererNormalizationField);
        }
    }
    const modifiedQueryConfig = {
        ...queryConfig,
        orderByFields: [`${x} ${WebChartSortOrderKinds.Ascending}`],
        outFields,
    };
    rawData = (await op({
        queryObject,
        queryConfig: modifiedQueryConfig,
        featureCount,
        abortKey,
    }));
    return rawData;
}
/**
 * Fetches the data for the Scatter Plot
 * @param props
 */
async function fetchRawScatterPlotData(props) {
    let rawData = [];
    const { chartConfig, queryConfig, queryObject, statsMap, numberOfFeatures, isAggregationMode, options, useQueryAttributeBins, errorStrings, abortKey, } = props;
    const series = chartConfig.series[0];
    const { x, y } = series;
    // performing the data fetching only if there are features to fetch
    if (!Number.isNaN(numberOfFeatures) && numberOfFeatures > 0) {
        const modifiedQueryConfig = { ...queryConfig };
        modifiedQueryConfig.where = $s([modifiedQueryConfig.where, `${x} IS NOT NULL`, `${y} IS NOT NULL`]);
        if (!isAggregationMode) {
            rawData = await fetchRawScatterPlotNonAggregatedData({
                queryObject,
                chartConfig,
                queryConfig: modifiedQueryConfig,
                featureCount: numberOfFeatures,
                abortKey,
            });
        }
        else {
            rawData = await fetchRawScatterPlotAggregatedData({
                chartConfig,
                queryObject,
                queryConfig: modifiedQueryConfig,
                options,
                statsMap,
                useQueryAttributeBins,
                abortKey,
                errorStrings,
            });
        }
    }
    return rawData;
}
/**
 * Creates a WebChartScatterPlotDataItem object with default values for r2 and trendLinePoints.
 * Those values will be calculated later by the regression plugin.
 * @param props.chartConfig The chart configuration
 * @param props.queryConfig The query configuration
 * @param props.queryObject The query object
 * @param props.sortData If the data should be sorted
 * @param props.calculateTrendLine If the trendline should be calculated
 * @param props.options The chart options
 * @param props.abortKey The key to abort the query
 */
async function fetchFinishedScatterPlotData(props) {
    const { chartConfig, queryConfig, queryObject, sortData, calculateTrendLine, options, abortKey } = props;
    // computing some stats commonly used by the scatter plot functions fetching data
    const statsMap = await fetchDataStatistics({
        chartConfig,
        queryConfig,
        queryObject,
        abortKey,
    });
    const { queryNumberOfFeatures, yStep } = ChartDefaults.scatterPlotAggregationFields;
    const { maxScatterPointsBeforeAggregation } = Zo(options?.chartLimits);
    const numberOfFeatures = statsMap?.get(queryNumberOfFeatures) ?? Number.NaN;
    const isAggregationMode = numberOfFeatures >= maxScatterPointsBeforeAggregation;
    const useQueryAttributeBins = Ns(queryObject);
    // In aggregation we add some more stats to the Map
    if (isAggregationMode) {
        await fetchAggregationDataStatistics({
            statsMap,
            chartConfig,
            queryObject,
            options,
            queryConfig,
            abortKey,
        });
    }
    // Fetching the raw scatterplot data
    const rawData = await fetchRawScatterPlotData({
        ...props,
        statsMap,
        numberOfFeatures,
        isAggregationMode,
        useQueryAttributeBins,
    });
    // Processing the raw data
    const transformedData = await transformScatterPlotData({
        queryObject,
        chartConfig,
        rawData,
        isAggregationMode,
        yStep: statsMap.get(yStep),
        useQueryAttributeBins,
    });
    if (sortData !== false) {
        sortWebChartDataItemsUsingDirectionalSort({
            arrayToSort: transformedData,
            sortingField: chartConfig.series[0].x,
            orderBy: WebChartSortOrderKinds.Ascending,
        });
    }
    // Calculating the trendline data
    const { r2, trendLinePoints } = calculateTrendLine !== false
        ? await getFinalTrendLineData({
            data: transformedData,
            statsMap,
            queryConfig,
            options,
            queryObject,
            chartConfig,
        })
        : ChartDefaults.scatterPlotSeries;
    return { dataItems: transformedData, r2, trendLinePoints };
}

/**
 * Transform a couple key/value to where clause equivalent to 'key = value'.
 * It adds quotes around the value if it's not detected as a number.
 *
 * TODO: the value parameter is a `WebChartDataItemValue` but most of types from that union wouldn't be
 * accepted in a SQL where clause. It might be more needed to specify more strict types.
 * @param key
 * @param value
 */
function objectToWhereQuery(key, value) {
    let queryString = "";
    if (key.trim() !== "" && value !== undefined) {
        // handling the specific `null` value
        if (value === null) {
            queryString = `${key} IS NULL`;
        }
        else {
            // adding quotes around the value if the value is not numeric
            const optionalQuote = typeof value !== "number" ? "'" : "";
            queryString = `${key}=${optionalQuote}${value.toString()}${optionalQuote}`;
        }
    }
    return queryString;
}

function buildSelectionFilterForAScatterPlotElement(props) {
    const { dataContext, xAxisField, yAxisField, options } = props;
    let filter = "";
    const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField } = ChartDefaults.scatterPlotAggregationFields;
    // When the scatter plot is aggregated we use the point extent range
    if (isScatterPlotAggregated({ dataContext, chartLimits: options?.chartLimits })) {
        const { [dataContextXMinField]: xMin, [dataContextXMaxField]: xMax } = dataContext;
        // If x and y are equal, it means xMin=yMin and xMax=yMax
        const yMin = xAxisField !== yAxisField ? dataContext[dataContextYMinField] : xMin;
        const yMax = xAxisField !== yAxisField ? dataContext[dataContextYMaxField] : xMax;
        if (!Number.isNaN(xMin) && !Number.isNaN(xMax) && !Number.isNaN(yMin) && !Number.isNaN(yMax)) {
            const filters = [];
            // if xMin and xMax are the same, the filter needs to be x=xMin (or xMax). Otherwise it needs to be x>=xMin AND x<xMax
            if (xMin === xMax) {
                filters.push(`${xAxisField}=${xMin?.toString()}`);
            }
            else {
                filters.push(`${xAxisField}>=${xMin?.toString()}`);
                filters.push(`${xAxisField}<=${xMax?.toString()}`);
            }
            // Same for y
            if (yMin === yMax) {
                filters.push(`${yAxisField}=${yMin?.toString()}`);
            }
            else {
                filters.push(`${yAxisField}>=${yMin?.toString()}`);
                filters.push(`${yAxisField}<=${yMax?.toString()}`);
            }
            filter = $s(filters);
        }
    }
    else {
        // When the scatter plot is not aggregated we use the x and y value from the point (x=value AND y=value)
        // Note: this should never be executed given the OIDs are already fetched with the data for non aggregated scatter plots
        filter = $s([
            Zl({ where: objectToWhereQuery(xAxisField, dataContext[xAxisField]) }),
            yAxisField !== undefined
                ? Zl({ where: objectToWhereQuery(yAxisField, dataContext[yAxisField]) })
                : "",
        ]);
    }
    return filter;
}
/**
 * Builds a filter to be used by a query, based on a data context containing a date range provided as two timestamps.
 * @param xAxisField The field used by the x-axis
 * @param dataContext The data context containing the range of dates
 * @returns A filter as a string, usable to query
 */
function buildSelectionFilterForATimeBinningChartElement(xAxisField, dataContext) {
    let filter = "";
    const dateBinningRange = dataContext[ChartDefaults.dateBinningRange];
    if (isArray$1(dateBinningRange) && dateBinningRange.length === 2) {
        const [timeStampMin, timeStampMax] = dateBinningRange;
        // we build the filter only if the values are valid
        if (Number.isFinite(timeStampMin) && Number.isFinite(timeStampMax)) {
            const dateMin = transformDateToQueryFormat(timeStampMin);
            const dateMax = transformDateToQueryFormat(timeStampMax);
            filter = `${xAxisField}>='${dateMin}' AND ${xAxisField}<='${dateMax}'`;
        }
    }
    return filter;
}
/**
 * The double fields can have a precision issue with the server.
 * For instance if a value is equal to 4.73450600069336, a where clause set to `field=4.73450600069336` won't bring any result.
 * The function tweaks the filter to bring back the expected results.
 * @param xAxisValue
 * @param xAxisField
 * @returns
 */
function buildSelectionFilterForADoubleField(xAxisValue, xAxisField) {
    let filter = "";
    if (Number.isFinite(xAxisValue)) {
        const delta = 1 / 10 ** ChartDefaults.queryMaxFloatPrecision;
        // we query by range rather than direct comparison, using a very short delta
        filter = `${xAxisField}>=${xAxisValue - delta} AND ${xAxisField}<=${xAxisValue + delta}`;
    }
    return filter;
}
/**
 * Builds a query filter for the box plot selection. It considers a specific data context from a box
 * by looking at the category, split-by and min/max values
 * @param props.xAxisField The x-axis field or ChartDefaults.boxPlot.boxPlotCategory
 * @param props.yAxisField The y-axis field
 * @param props.splitBy The split-by (field and value)
 * @param props.dataContext A box's data context
 * @param props.isDateAxis Whether the x-axis is a date axis
 * @param props.isXAxisFieldDouble Whether the x-axis uses a double field
 * @param props.showOutliers Whether the outliers are shown
 * @param props.chartSubType The chart sub type
 *
 * @returns A string representing the filter
 */
function buildSelectionFilterForABoxPlotElement(props) {
    const { xAxisField, yAxisField, splitBy, dataContext, isDateAxis, isXAxisFieldDouble, showOutliers, chartSubType } = props;
    let xAxisFilter = "";
    // no need to use the x-axis field when there's no category
    if (xAxisField !== undefined && xAxisField !== ChartDefaults.boxPlot.boxPlotCategory) {
        let xAxisValue = getXAxisValueFromContext({
            value: dataContext[xAxisField],
            dataContext,
            keepNullValues: true,
            specificField: ChartDefaults.typeOrDomainIdValue,
        });
        //  special case for double values to handle a precision issue with the server
        if (isXAxisFieldDouble) {
            xAxisFilter = buildSelectionFilterForADoubleField(xAxisValue, xAxisField);
        }
        else {
            // when the axis is a date, the x axis value is a timestamp we need to convert for the query
            if (isDateAxis) {
                xAxisValue = transformDateToQueryFormat(xAxisValue);
            }
            xAxisFilter = Zl({
                where: objectToWhereQuery(xAxisField, xAxisValue),
                normalize: false,
                escape: true,
            });
        }
    }
    // adding the split-by filter
    const splitByFilter = Zl({ where: splitBy ?? "", normalize: false, escape: true });
    // when the outliers are displayed the min/max values need to be adjusted to consider the reduced limits
    let minMaxFilter = "";
    if (showOutliers === true) {
        const y = chartSubType === ml.BoxPlotMultiFieldsAndCategory ? yAxisField : undefined;
        const minField = ls({
            key: Wl.Min,
            showOutliers: true,
            splitBy,
            y,
        });
        const maxField = ls({
            key: Wl.Max,
            showOutliers: true,
            splitBy,
            y,
        });
        const statField = xAxisField === ChartDefaults.boxPlot.boxPlotCategory ? dataContext[xAxisField] : yAxisField;
        // preventing building a filter with undefined / null / empty values
        if (!Ol(statField)) {
            const minValue = dataContext[minField];
            const maxValue = dataContext[maxField];
            if (Number.isFinite(minValue) && Number.isFinite(maxValue)) {
                minMaxFilter = `${statField?.toString()}>=${minValue?.toString()} AND ${statField?.toString()}<=${maxValue?.toString()}`;
            }
        }
    }
    // combining the filters
    const filter = $s([xAxisFilter, splitByFilter, minMaxFilter]);
    return filter;
}
function buildSelectionFilterForABarOrLineElement(props) {
    const { xAxisField, splitBy, dataContext, isDateAxis, isXAxisFieldDouble, chartSubType } = props;
    let xAxisFilter = "";
    // If the `dateBinningRange` is in the context it means the points are aggregated and the filter needs to consider a date range
    if (ChartDefaults.dateBinningRange in dataContext) {
        xAxisFilter = buildSelectionFilterForATimeBinningChartElement(xAxisField, dataContext);
    }
    else if (chartSubType !== ml.BarAndLineFromFields) {
        let xAxisValue = getXAxisValueFromContext({
            value: dataContext[xAxisField],
            dataContext,
            keepNullValues: true,
            specificField: ChartDefaults.typeOrDomainIdValue,
        });
        //  special case for double values to handle a precision issue with the server
        if (isXAxisFieldDouble) {
            xAxisFilter = buildSelectionFilterForADoubleField(xAxisValue, xAxisField);
        }
        else {
            // when the axis is a date, the x axis value is a timestamp we need to convert for the query
            if (isDateAxis) {
                xAxisValue = transformDateToQueryFormat(xAxisValue);
            }
            xAxisFilter = Zl({
                where: objectToWhereQuery(xAxisField, xAxisValue),
                normalize: false,
                escape: true,
            });
        }
    }
    // adding the split-by filter
    const splitByFilter = Zl({ where: splitBy ?? "", normalize: false, escape: true });
    // combining the filters
    const filter = $s([xAxisFilter, splitByFilter]);
    return filter;
}
function buildSelectionFilterForAPieChartElement(props) {
    const { xAxisField: categoryField, dataContext, chartSubType } = props;
    let categoryValue = ChartDefaults.typeOrDomainIdValue in dataContext
        ? dataContext[ChartDefaults.typeOrDomainIdValue]
        : dataContext[ChartDefaults.originalCategoryValue];
    // Note: not using the nullish coalescing to keep the `null` values
    if (categoryValue === undefined) {
        categoryValue = dataContext[categoryField];
    }
    const filter = chartSubType === ml.PieFromFields
        ? ""
        : Zl({
            where: objectToWhereQuery(categoryField, categoryValue),
            normalize: false,
            escape: true,
        });
    return filter;
}
function buildSelectionFilterForAHistogramElement(props) {
    const { xAxisField, dataContext, dataTransformationType } = props;
    let filter = "";
    const { minValue, maxValue } = dataContext;
    if (Number.isFinite(minValue) && Number.isFinite(maxValue)) {
        const transformedXAxisField = getTransformedQuery(xAxisField, dataTransformationType);
        filter = $s([
            `${transformedXAxisField}>=${minValue?.toString()}`,
            `${transformedXAxisField}<=${maxValue?.toString()}`,
        ]);
    }
    return filter;
}
/**
 * Builds a query filter for selection
 * @param props
 * @returns
 */
function buildSelectionFilterForOneElement(props) {
    const { chartType } = props;
    let filter = "";
    switch (chartType) {
        case WebChartTypes.ScatterSeries:
            filter = buildSelectionFilterForAScatterPlotElement(props);
            break;
        case WebChartTypes.BarSeries:
        case WebChartTypes.LineSeries:
        case WebChartTypes.ComboLineAndBarSeries:
            filter = buildSelectionFilterForABarOrLineElement(props);
            break;
        case WebChartTypes.BoxPlotSeries:
            filter = buildSelectionFilterForABoxPlotElement(props);
            break;
        case WebChartTypes.HistogramSeries:
            filter = buildSelectionFilterForAHistogramElement(props);
            break;
        case WebChartTypes.PieSeries:
            filter = buildSelectionFilterForAPieChartElement(props);
            break;
    }
    return filter;
}

/**
 * Function comparing two array containing selection items.
 * @param props.itemsA First array
 * @param props.itemsB Second array
 * @param props.x The x-axis field
 * @param props.isPieFromFields Flag to indicate if the chart is a pie chart from fields
 */
function hasSelectionByItemsChanged(props) {
    const { itemsA, itemsB, x, isPieFromFields } = props;
    let changed = false;
    // ii one of the arrays is undefined while the other is not, we flag it as a change
    if ((itemsA === undefined && itemsB !== undefined) || (itemsA !== undefined && itemsB === undefined)) {
        changed = true;
    }
    else if (!isPieFromFields) {
        // for pie from fields charts, when both itemA and itemB are defined, we consider there is no change.
        // see issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/2369 for details
        // filtering out the properties that would trigger false positives
        const propertiesToDelete = [
            ChartDefaults.originalCategoryValue,
            ChartDefaults.originalDateValue,
            ChartDefaults.xAxisField,
            ChartDefaults.technicalSortingFieldBySum,
            ChartDefaults.technicalSortingFieldByPercent,
            ChartDefaults.pieChart.technicalFieldSlicePercent,
            ChartDefaults.pieChart.technicalFieldGroupedSlices,
            ChartDefaults.pieChart.technicalFieldSliceId,
            ChartDefaults.typeOrDomainFieldName,
            ChartDefaults.typeOrDomainIdValue,
            Un.uniqueIdsName,
            ...Gn,
        ];
        const reducePredicate = (accumulator, currentItem) => {
            // check to se if the item has coded values
            // if it does, we need to swap its description with the coded value preparing for the comparison process
            const typeOrDomainFieldName = currentItem[ChartDefaults.typeOrDomainFieldName];
            if (typeof typeOrDomainFieldName === "string" && currentItem[typeOrDomainFieldName] !== undefined) {
                currentItem[typeOrDomainFieldName] = currentItem[ChartDefaults.typeOrDomainIdValue];
            }
            const filteredItem = {};
            // copying only the necessary properties
            Object.keys(currentItem).forEach((propName) => {
                if (!propertiesToDelete.includes(propName) && !propName.includes(ChartDefaults.rendererSymbolField)) {
                    filteredItem[propName] = currentItem[propName];
                }
            });
            accumulator.push(filteredItem);
            return accumulator;
        };
        // sorting the arrays to avoid triggering a false positive when the arrays are sorted differently
        const sortPredicate = (a, b) => (a[x] ?? a[ChartDefaults.boxPlot.boxPlotCategory] ?? a[defaultPieFromFieldsName] ?? "") >
            (b[x] ?? b[ChartDefaults.boxPlot.boxPlotCategory] ?? b[defaultPieFromFieldsName] ?? "")
            ? 1
            : -1;
        const itemsAToCompare = itemsA?.reduce(reducePredicate, [])?.sort(sortPredicate);
        const itemsBToCompare = itemsB?.reduce(reducePredicate, [])?.sort(sortPredicate);
        changed = !isEqual(itemsAToCompare, itemsBToCompare);
    }
    return changed;
}
function getSelectedData(props) {
    const { chartConfig, currentSelectionDataItems, options } = props;
    const { selectionData } = options ?? {};
    let selectedData = [];
    if (chartConfig !== undefined) {
        const seriesConfig = chartConfig.series;
        const { selectionItems } = selectionData ?? {};
        // We use the incoming selection (selectionItems) if it's different from the current selection on the chart (currentSelectionDataItems)
        // Otherwise we use currentSelectionDataItems as it contains extra properties needed for the rendering (Refer to bug https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6380)
        if (selectionItems !== undefined &&
            hasSelectionByItemsChanged({
                itemsA: selectionItems,
                itemsB: currentSelectionDataItems,
                x: chartConfig.series[0].x,
                isPieFromFields: ts(chartConfig.series) === ml.PieFromFields,
            })) {
            selectedData = selectionItems;
        }
        else {
            selectedData = currentSelectionDataItems ?? [];
        }
        // regroup the selection data for multi-series bar and line charts
        if (seriesConfig.length > 1) {
            const splitByField = Xl(seriesConfig[0].query?.where);
            selectedData = groupDataByCategory({ data: selectedData, x: seriesConfig[0].x, splitByField });
        }
        sortFetchedData({
            arrayToSort: selectedData,
            chartConfig,
        });
    }
    return selectedData ?? [];
}

const ChartEvents = {
    DataProcessComplete: "arcgisChartsJSDataProcessComplete",
    DataFetchComplete: "arcgisChartsJSDataFetchComplete",
    LegendItemVisibilityChange: "arcgisChartsJSLegendItemVisibilityChange",
    UpdateComplete: "arcgisChartsJSUpdateComplete",
    RenderingComplete: "arcgisChartsJSRenderingComplete",
    SeriesColorsChange: "arcgisChartsJSSeriesColorChange",
    AxesMinMaxChange: "arcgisChartsJSAxesMinMaxChange",
    SelectionComplete: "arcgisChartsJSSelectionComplete",
    TooManySelectedElements: "arcgisChartsJSTooManySelectedElements",
    BadDataWarningRaise: "arcgisChartsJSBadDataWarningRaise",
    SeriesOrder: "arcgisChartsJSSeriesOrder",
};

/**
 * Generates the `CustomEventInit` dictionary for [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent)
 * @param eventPayload
 */
function generateEventInit(eventPayload) {
    return {
        detail: eventPayload,
        composed: true,
        cancelable: true,
        bubbles: true,
    };
}
/**
 * Sending an event carrying the chart processed data at any data update.
 * Contains the statistics for Histogram and Scatter Plot
 * @param props.data The data payload
 * @param props.seriesConfig The array of series config
 * @param props.htmlContainer The chart's HTML container
 */
function notifyDataProcessed(props) {
    const { data, seriesConfig, htmlContainer } = props;
    if (htmlContainer && data) {
        // Before sending the event, we revert some technical changes made to the dataset
        const payloadData = sanitizeData({ data, seriesConfig });
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.DataProcessComplete, generateEventInit(payloadData)));
    }
}
/**
 * Sending an event carrying the fetched data.
 * Only used by pie chart for now to make a distinction between the processed data containing information
 * regarding the rendering like the group of slices, and the raw fetched data.
 * @param props.data The chart's data
 * @param props.chartConfig The chart's config
 * @param props.htmlContainer The chart's HTML container
 */
function notifyDataFetched(props) {
    const { data, chartConfig, htmlContainer } = props;
    if (htmlContainer && data) {
        const payloadData = rebuildPieChartFetchedData(data, chartConfig);
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.DataFetchComplete, generateEventInit(payloadData)));
    }
}
/**
 * Sending an event indicating a legend item visibility has changed
 * @param data
 * @param htmlContainer
 */
function notifyLegendItemVisibilityChanged(data, htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.LegendItemVisibilityChange, generateEventInit(data)));
    }
}
/**
 * Sending an event indicating that the chart is updated with the new config
 * @param data
 * @param htmlContainer
 */
function notifyChartUpdated(data, htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.UpdateComplete, generateEventInit(data)));
    }
}
/**
 * Sending an event indicating all the chart's series (non-overlays) are [`ready`](https://www.amcharts.com/docs/v4/reference/series/#ready_event)
 * @param htmlContainer
 */
function notifyRenderingCompleted(htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.RenderingComplete, generateEventInit()));
    }
}
/**
 * Sending selectionEvent on range select
 * @param props.data The selection data
 * @param props.seriesConfig The array of series config
 * @param props.htmlContainer The chart's HTML container
 */
function notifySelectionCompleted(props) {
    const { data, seriesConfig, htmlContainer } = props;
    if (htmlContainer) {
        const payloadData = data;
        // Before sending the event, we revert some technical changes made to the dataset
        let payloadDataItems = cloneDeep(data.selectionItems);
        if (payloadDataItems) {
            payloadDataItems = revertOriginalXValues(payloadDataItems, seriesConfig);
            payloadDataItems = payloadDataItems.map(removeAdditionalStatisticsPerItem);
            payloadDataItems = revertPieFromFieldsProperties(payloadDataItems, seriesConfig);
            payloadData.selectionItems = payloadDataItems;
        }
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.SelectionComplete, generateEventInit(payloadData)));
    }
}
/**
 * Sending an event to notify too many elements have been selected on the chart
 * @param htmlContainer
 */
function notifyTooManySelectedElements(htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.TooManySelectedElements, generateEventInit()));
    }
}
/**
 * Sending an event containing the either the symbols assigned to a chart's series, or information regarding
 * a pie chart slices.
 * @param data an item representing the symbols applied to the chart's series
 * @param htmlContainer The chart's html container, used to propagate the event
 */
function notifySeriesColorsChange(props) {
    const { data, htmlContainer, chartId, colorMatchApplied } = props;
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.SeriesColorsChange, generateEventInit({
            chartId,
            data,
            colorMatchApplied,
        })));
    }
}
/**
 * Sending an event containing the chart' axes min and max
 * @param data
 * @param htmlContainer
 */
function notifyAxesMinMaxChange(data, htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.AxesMinMaxChange, generateEventInit(data)));
    }
}
/**
 * Sending an event containing info on how the data is bad
 * @param data
 * @param htmlContainer
 */
function notifyBadDataRaise(data, htmlContainer) {
    if (htmlContainer) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.BadDataWarningRaise, generateEventInit(data)));
    }
}
/**
 * Sending an event carrying the series order on the chart.
 * @param props.data The list of series id
 * @param props.htmlContainer The chart's HTML container
 */
function notifySeriesOrder(props) {
    const { data, htmlContainer } = props;
    if (htmlContainer && data) {
        htmlContainer.dispatchEvent(new window.CustomEvent(ChartEvents.SeriesOrder, generateEventInit(data)));
    }
}

/**
 * Returns true when the time interval info was set previously and are not in the new config
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasTimeIntervalInfoBeenReset(oldConfig, newConfig) {
    const oldUnits = "timeIntervalUnits" in oldConfig.series[0] ? oldConfig.series[0].timeIntervalUnits : undefined;
    const oldSize = "timeIntervalSize" in oldConfig.series[0] ? oldConfig.series[0].timeIntervalSize : undefined;
    const newUnits = "timeIntervalUnits" in newConfig.series[0] ? newConfig.series[0].timeIntervalUnits : undefined;
    const newSize = "timeIntervalSize" in newConfig.series[0] ? newConfig.series[0].timeIntervalSize : undefined;
    return isTimeIntervalInfoComplete(oldUnits, oldSize) && !isTimeIntervalInfoComplete(newUnits, newSize);
}
/**
 * Returns true when the dual axis feature was enabled or disabled (number of axes changed)
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasDualAxisChanged(oldConfig, newConfig) {
    return ((oldConfig.axes?.length === 3 && newConfig.axes?.length === 2) ||
        (oldConfig.axes?.length === 2 && newConfig.axes?.length === 3));
}
/**
 * Returns true when the series are not associated to the same axis anymore
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasSeriesAxisChanged(oldConfig, newConfig) {
    return (JSON.stringify(oldConfig.series.map((series) => series.assignToSecondValueAxis ?? false)) !==
        JSON.stringify(newConfig.series.map((series) => series.assignToSecondValueAxis ?? false)));
}
/**
 * Returns true when at least one guide's 'above' property changed from an update to another.
 * @param oldConfig The old chart config
 * @param newConfig The new chart config
 * @returns
 */
function hasAnyGuideAboveChanged(oldConfig, newConfig) {
    const oldAboveList = oldConfig.axes?.map((axis) => axis?.guides?.map((guide) => guide?.above === true));
    const newAboveList = newConfig.axes?.map((axis) => axis?.guides?.map((guide) => guide?.above === true));
    return JSON.stringify(oldAboveList) !== JSON.stringify(newAboveList);
}
/**
 * Returns true if the rotated property changed since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasRotationChanged(oldConfig, newConfig) {
    return bl(oldConfig) !== bl(newConfig);
}
/**
 * Returns the field to be used by the x-axis.
 * @param chartConfig The chart's config
 */
function getXAxisField(chartConfig) {
    const chartType = fl(chartConfig.series);
    return chartType !== WebChartTypes.BoxPlotSeries ? ChartDefaults.xAxisField : chartConfig.series[0].x;
}
/**
 * Check if chart is stacked
 * @param config The chart config
 */
function isChartStacked(config) {
    const stackedType = Sl(config);
    return stackedType === WebChartStackedKinds.Stacked || stackedType === WebChartStackedKinds.Stacked100;
}
/**
 * Returns true if the rotated property changed since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasOutliersVisibilityChanged(oldConfig, newConfig) {
    return ((oldConfig.showOutliers ?? ChartDefaults.boxPlot.boxPlotOutliersVisibility) !==
        (newConfig.showOutliers ?? ChartDefaults.boxPlot.boxPlotOutliersVisibility));
}
/**
 * Returns true if the 'standardizeValues' property changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasStandardizeValuesVisibilityChanged(oldConfig, newConfig) {
    return ((oldConfig.standardizeValues ?? ChartDefaults.boxPlot.boxPlotStandardizeValuesVisibility) !==
        (newConfig.standardizeValues ?? ChartDefaults.boxPlot.boxPlotStandardizeValuesVisibility));
}
/**
 * Returns true if the 'chartRenderer' property changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasChartRendererChanged(oldConfig, newConfig) {
    return JSON.stringify(oldConfig.chartRenderer) !== JSON.stringify(newConfig.chartRenderer);
}
/**
 * Returns true if the 'timeZone' property from the axis value format changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
function hasIntlTimeZoneChanged(oldConfig, newConfig) {
    const previousTimeZone = oldConfig.axes?.[0].valueFormat.type === WebChartTypes.DateAxisFormat
        ? oldConfig.axes[0].valueFormat.intlOptions.timeZone
        : undefined;
    const newTimeZone = newConfig.axes?.[0].valueFormat.type === WebChartTypes.DateAxisFormat
        ? newConfig.axes[0].valueFormat.intlOptions.timeZone
        : undefined;
    return previousTimeZone !== newTimeZone;
}
/**
 * Determines if any of the series' name has changed between the previous and the new configs.
 *
 * The order of the series is preserved when comparing for changes.
 *
 * @param oldConfig The previous chart config
 * @param newConfig The new chart config
 * @returns
 */
function hasConfigSeriesNamesChanged(oldConfig, newConfig) {
    return oldConfig.series.map((s) => s.name).join() !== newConfig.series.map((s) => s.name).join();
}
/**
 * Determines if the series order has changed between the old and the new configs.
 *
 * @param oldConfig The previous chart config
 * @param newConfig The new chart config
 * @returns
 */
function hasSeriesOrderChanged(oldConfig, newConfig) {
    const oldOrderSeriesBy = oldConfig.orderOptions?.series;
    const newOrderSeriesBy = newConfig.orderOptions?.series;
    const seriesOrderChanged = (oldOrderSeriesBy?.orderBy ?? WebChartSortOrderKinds.Ascending) !==
        (newOrderSeriesBy?.orderBy ?? WebChartSortOrderKinds.Ascending);
    const dataLabelPreferencesChanged = (oldOrderSeriesBy?.preferLabel ?? true) !== (newOrderSeriesBy?.preferLabel ?? true);
    return seriesOrderChanged || dataLabelPreferencesChanged;
}
/**
 * Determines whether a sort by series is needed.
 * A sort by series is needed when either the series order has changed or any of the series names have changed.
 *
 * @param oldConfig The previous chart config.
 * @param newConfig The new chart config.
 * @returns
 */
function isSortBySeriesNeeded(oldConfig, newConfig) {
    return hasSeriesOrderChanged(oldConfig, newConfig) || hasConfigSeriesNamesChanged(oldConfig, newConfig);
}
/**
 * Gets the `sortingField` and `orderBy` from the `orderOptions.data` for the boxplot chart.
 * @param chartConfig The chart config
 * @returns A sortingField and orderBy object, or undefined.
 */
function getDataOrderParametersForBoxPlot(chartConfig) {
    const chartSubType = ts(chartConfig.series);
    let dataOrderParamerters;
    if (chartConfig.orderOptions?.data !== undefined) {
        // retrieve from the config's orderOptions.data the orderType and the orderBy
        let sortingField = chartConfig.orderOptions?.data?.orderType ?? WebChartOrderDataByTypes.Category;
        let orderBy = chartConfig.orderOptions?.data?.orderBy;
        // remap the sorting field to the actual field name
        if (sortingField === WebChartOrderDataByTypes.Category) {
            sortingField = chartConfig.series[0].x;
        }
        else {
            // get the y field key for the sorting field
            if (sortingField === WebChartOrderDataByTypes.Mean) {
                sortingField = Wl.Average;
            }
            else if (sortingField === WebChartOrderDataByTypes.Median) {
                sortingField = Wl.Median;
            }
            // get the field name for the sorting field
            const y = chartSubType === ml.BoxPlotMultiFieldsAndCategory && typeof chartConfig.series[0].y === "string"
                ? chartConfig.series[0].y
                : undefined;
            const splitBy = Xl(chartConfig.series[0].query?.where);
            const splitByValue = Ql({
                where: chartConfig.series[0].query?.where,
            });
            sortingField = ls({
                key: sortingField,
                y,
                chartSubType,
                splitBy,
                splitByValue,
            });
            // for mean/median sort, if orderBy is specified as an array of labels, we default it to ascending
            // since at the moment, a predefined labels is only supported for category order.
            if (Array.isArray(orderBy)) {
                orderBy = WebChartSortOrderKinds.Ascending;
            }
        }
        dataOrderParamerters = {
            sortingField,
            orderBy: orderBy ?? WebChartSortOrderKinds.Ascending,
        };
    }
    return dataOrderParamerters;
}
/**
 * Gets the `sortingField` and `orderBy` from the `orderOptions.data` for bar, line, and pie charts,
 * It also considers other parameters such as the type of chart, stacked type or number of series
 * (for bar and line) when determining the sorting field.
 *
 * Notes: this function does not apply to boxplot, which is handled by `getDataOrderParametersForBoxPlot()`.
 * @param chartConfig The chart configuration
 * @returns A sortingField and orderBy object, or undefined
 */
function getDataOrderParametersForCommonChart(chartConfig) {
    const firstSeries = chartConfig.series[0];
    const { x, y } = firstSeries;
    const isPieFromFields = ts(chartConfig.series) === ml.PieFromFields;
    let dataOrderParamerters;
    let sortingField = "";
    let orderBy;
    if (chartConfig.orderOptions?.data !== undefined) {
        // retrieve from the config's orderOptions.data the orderType and the orderBy
        sortingField = chartConfig.orderOptions?.data?.orderType ?? WebChartOrderDataByTypes.Category;
        orderBy = chartConfig.orderOptions?.data?.orderBy;
        // converting the sorting field to the actual field name
        if (sortingField === WebChartOrderDataByTypes.Category) {
            sortingField = isPieFromFields ? defaultPieFromFieldsName : x;
        }
        else {
            sortingField = isPieFromFields ? defaultPieFromFieldsValue : [y].flat()[0];
        }
    }
    if (sortingField !== undefined && sortingField !== "") {
        const stackedType = Sl(chartConfig);
        const chartType = fl(chartConfig.series);
        // for multi-series bar/line charts
        if (chartType !== WebChartTypes.PieSeries && sortingField !== x && chartConfig.series?.length > 1) {
            // if there are 2+ series, the field to sort is not x, we default it to:
            // - value (y) from the first series for a side-by-side chart
            // - percent from the first series for a stacked 100% chart
            // - sum of the stack for a stacked chart
            // TODO: that rule is not good as default, it should come from the consumer
            switch (stackedType) {
                case WebChartStackedKinds.Stacked:
                    sortingField = ChartDefaults.technicalSortingFieldBySum;
                    break;
                case WebChartStackedKinds.Stacked100:
                    sortingField = ChartDefaults.technicalSortingFieldByPercent;
                    break;
                case WebChartStackedKinds.Side:
                    if (typeof y === "string") {
                        sortingField = y;
                    }
                    break;
            }
        }
        dataOrderParamerters = {
            sortingField,
            orderBy: orderBy ?? WebChartSortOrderKinds.Ascending,
        };
    }
    return dataOrderParamerters;
}
/**
 * Constructs the `sortingField`, `orderBy`, and/or `preferLabel` for sorting the chart data.
 * @param chartConfig The chart configuration
 * @returns An object with info about sortingField, orderBy, and optionally preferLabel
 */
function getDataOrderParameters(chartConfig) {
    let dataOrderByParams;
    if (chartConfig?.orderOptions?.data && chartConfig.series?.length > 0) {
        const chartType = fl(chartConfig.series);
        switch (chartType) {
            case WebChartTypes.BoxPlotSeries:
                dataOrderByParams = getDataOrderParametersForBoxPlot(chartConfig);
                break;
            case WebChartTypes.LineSeries:
            case WebChartTypes.BarSeries:
            case WebChartTypes.PieSeries:
                dataOrderByParams = getDataOrderParametersForCommonChart(chartConfig);
                break;
        }
        // transfer the preferLabel option from the config to the dataOrderByParams for later use
        if (dataOrderByParams && chartConfig.orderOptions?.data?.preferLabel !== undefined) {
            dataOrderByParams.preferLabel = chartConfig.orderOptions.data.preferLabel;
        }
    }
    return dataOrderByParams;
}
/**
 * Returns true if the data order instructions (orderType or sortingField, orderBy, and/or preferLabel) have changed, or
 * the data update is needed.
 *
 * @param props.oldConfig The previous chart config
 * @param props.newConfig The new chart config
 * @param props.dataUpdateNeeded Indicates if data update is needed; this is used by and important for box-plot charts. It's ignored for non-boxplot charts.
 */
function isNewSortNeeded(props) {
    const { oldConfig, newConfig, dataUpdateNeeded } = props;
    const chartSubType = ts(newConfig.series);
    let sortNeeded = false;
    let dataOrderChanged = false;
    // C1 and C5 box-plots don't need to be sorted
    if (chartSubType !== ml.BoxPlotMonoField &&
        chartSubType !== ml.BoxPlotMonoFieldAndSplitBy &&
        newConfig.orderOptions?.data !== undefined) {
        const oldDataOrderParameters = getDataOrderParameters(oldConfig);
        const newDataOrderParameters = getDataOrderParameters(newConfig);
        // we also need to compare the orderType to cover the case where the chart's x and y fields are empty as in BarAndLineFromFields chart
        dataOrderChanged =
            oldConfig.orderOptions?.data?.orderType !== newConfig.orderOptions?.data?.orderType ||
                oldDataOrderParameters?.sortingField !== newDataOrderParameters?.sortingField ||
                oldDataOrderParameters?.orderBy !== newDataOrderParameters?.orderBy ||
                (oldDataOrderParameters?.preferLabel ?? true) !== (newDataOrderParameters?.preferLabel ?? true);
        sortNeeded = dataOrderChanged || dataUpdateNeeded;
    }
    return sortNeeded;
}
/**
 * After comparing two arrays containing the same number of series, returns the potential changes
 * in the series order among their array.
 * Ex: if oldSeries contains [0, 1 ,2] and newSeries [1, 0, 2], the function returns [[0,1]]
 * @param oldSeries
 * @param newSeries
 */
function getPositionChanges(oldSeries, newSeries) {
    const positionChanges = [];
    const replacements = new Map();
    const oldSeriesMap = new Map();
    // mapping the series. key = series id, value = series old position
    oldSeries.forEach((series, index) => oldSeriesMap.set(series.id, index));
    // looking for changes
    newSeries.forEach((series, newIndex) => {
        // getting the old position of the series
        let oldIndex = oldSeriesMap.get(series.id);
        if (oldIndex !== undefined) {
            // checking if the oldIndex has to be replaced (consequence of a previous swap)
            oldIndex = replacements.get(oldIndex) ?? oldIndex;
            // if the two indexes are different
            if (oldIndex !== newIndex) {
                // we store the position change
                positionChanges.push([oldIndex, newIndex]);
                // now when the oldIndex will be met it will be replaced by its new position
                replacements.set(newIndex, oldIndex);
            }
        }
    });
    return positionChanges;
}
/**
 * Compares two colors (array of 4 numbers) and indicates if they are equal
 * @param color1
 * @param color2
 */
function areColorsEqual(color1, color2) {
    return (color1?.[0] === color2?.[0] &&
        color1?.[1] === color2?.[1] &&
        color1?.[2] === color2?.[2] &&
        color1?.[3] === color2?.[3]);
}
/**
 * Sorts the series in the config based on the series sort options.
 * When no sort option is provide, no sorting is performed.
 *
 * @param chartConfig The optional chart config to sort the series
 * @param chartContainer The HTML chart container
 * @returns The updated chart config with the series sorted, or undefined if the input config is undefined
 */
function sortConfigSeries(chartConfig, chartContainer) {
    const updatedConfig = cloneDeep(chartConfig);
    if (updatedConfig && updatedConfig.series.length > 1) {
        const { preferLabel, orderBy } = updatedConfig.orderOptions?.series ?? {};
        if (orderBy !== undefined) {
            // sort by series name or splitByValue
            let sortBy;
            if (preferLabel === false) {
                const chartSubType = ts(updatedConfig.series);
                sortBy = Fl(chartSubType) ? "splitByValue" : "name";
            }
            else {
                sortBy = "name";
            }
            updatedConfig.series.sort((seriesA, seriesB) => {
                let seriesASortValue;
                let seriesBSortValue;
                if (sortBy === "splitByValue") {
                    seriesASortValue = Ql({ where: seriesA.query?.where }) ?? "";
                    seriesBSortValue = Ql({ where: seriesB.query?.where }) ?? "";
                }
                else {
                    seriesASortValue = seriesA.name;
                    seriesBSortValue = seriesB.name;
                }
                const [sortA, sortB] = orderBy.toUpperCase() === WebChartSortOrderKinds.Descending
                    ? [seriesBSortValue, seriesASortValue]
                    : [seriesASortValue, seriesBSortValue];
                return typeof sortA === "string" && typeof sortB === "string"
                    ? sortA.localeCompare(sortB)
                    : Number(sortA) - Number(sortB);
            });
        }
    }
    // whether a sort has been performed, we send an event to notify the series order
    notifySeriesOrder({
        data: updatedConfig?.series.map((s) => s.id),
        htmlContainer: chartContainer,
    });
    return updatedConfig;
}
/**
 * In "Mean lines" mode, the boxes are not matching their config anymore:
 * - C5 becomes C1
 * - C6 becomes C2
 * - C7 becomes C3
 * To fetch the proper data we alter the config to remove the `where` clause, which is the same as removing
 * the split-by field and apply the right combination
 */
function getMeanLinesBoxPlotConfig(chartConfig) {
    const modifiedChartConfig = { ...chartConfig };
    // double checking whether showMean is true (which should be done by the caller too)
    if (chartConfig.showMean === true) {
        // keeping only one series
        modifiedChartConfig.series = [modifiedChartConfig.series[0]];
        // removing the where clause to transform the chart sub-type
        if (modifiedChartConfig.series[0].query?.where !== undefined) {
            delete modifiedChartConfig.series[0].query.where;
        }
    }
    return modifiedChartConfig;
}

/**
 * Fetches new data for box plot based on the current selection.
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartConfig The chart's config
 * @param props.queryConfig The query's config
 * @param props.currentSelectionDataItems The selection items
 * @param props.options The runtime options
 * @param props.errorStrings The t9n error strings
 * @param props.abortKey The key to abort queries
 */
async function fetchBoxPlotDataWithFilterBySelection(props) {
    const { queryObject, queryConfig, chartConfig, currentSelectionDataItems, options, errorStrings, abortKey } = props;
    const chartSubType = ts(chartConfig.series);
    let dataInfo = { valid: true, data: { dataItems: [] } };
    if (currentSelectionDataItems !== undefined && currentSelectionDataItems.length > 0) {
        const firstSeriesConfig = Yl(chartConfig);
        const { x: xAxisField } = firstSeriesConfig;
        const y = "y" in firstSeriesConfig ? firstSeriesConfig.y : "";
        const isDateAxis = isDateValueFormat(chartConfig.axes?.[0].valueFormat);
        const { showOutliers } = chartConfig;
        // finding whether the x-axis field is a double
        let isXAxisFieldDouble = false;
        if (queryObject !== undefined) {
            const layerFields = await Sc(queryObject);
            isXAxisFieldDouble =
                layerFields.find((field) => field.name === xAxisField)?.type === RESTFieldType.Double;
        }
        // oid list that will be feed if outliers are part of the selection
        const oidList = [];
        const selectionFilters = currentSelectionDataItems.reduce((accumulator, dataItem) => {
            let splitBy = "";
            // if the current selection item belongs to an outlier and has info regarding the OIDs
            if (Un.uniqueIdsName in dataItem) {
                // adding the OID from the outlier
                oidList.push(dataItem[Un.uniqueIdsName]);
            }
            else {
                // else if the current selection item belongs to a box and has a split-by
                switch (chartSubType) {
                    case ml.BoxPlotMonoFieldAndSplitBy:
                    case ml.BoxPlotMultiFieldsAndSplitBy:
                    case ml.BoxPlotMonoFieldAndCategoryAndSplitBy: {
                        // Extracting the split- by field from the first series. The split-by value will be computed differently
                        splitBy = firstSeriesConfig.query?.where ?? "";
                        const splitByField = Xl(splitBy);
                        let splitByValue = "";
                        // From a selected item we can't say directly what is the series / split-by value associated to that item.
                        // Given the information is missing we need to extract the split-by value from the given properties.
                        // For instance if a data item has the property `Utah_avg`, we are going to extract
                        // the `Utah` out of it to rebuild the split-by and use it for the filter.
                        const matchingKey = `_${Wl.Average}`;
                        Object.keys(dataItem).forEach((propertyName) => {
                            // Examples of keys we found on the split-by combinations:
                            // C5: New Jersey_avg
                            // C6: Alabama_avg
                            // C7: Private room_avg
                            if (propertyName.includes(matchingKey)) {
                                splitByValue = propertyName.replace(matchingKey, "");
                            }
                        });
                        // rebuilding the split-by
                        if (splitByValue.trim() !== "") {
                            splitBy = objectToWhereQuery(splitByField, splitByValue);
                        }
                        break;
                    }
                }
                // if `y` is an array containing multiple values it means it's not necessary to pass a specific value to `buildSelectionFilterForABoxPlotElement()`
                // as a selection made on field A will apply to field B (they point to the same features)
                const yList = [y].flat();
                let yAxisField = yList.length === 1 ? yList[0] : "";
                if (chartSubType === ml.BoxPlotMultiFieldsAndCategory) {
                    // Similar to the split-by logic above:
                    // From a selected item we can't say directly what is the series / numeric field associated to that item.
                    // Given the information is missing we need to extract the numeric field from the given properties.
                    // For instance if a data item has the property `Hispanico_first_quartile`, we are going to extract
                    // the `Hispanico` out of it to set properly the `yAxisField`.
                    const matchingKey = `_${Wl.FirstQuartile}`;
                    const matchingProp = Object.keys(dataItem).find((propertyName) => propertyName.includes(matchingKey));
                    if (matchingProp !== undefined) {
                        yAxisField = matchingProp.replace(matchingKey, "");
                    }
                }
                const filter = buildSelectionFilterForABoxPlotElement({
                    xAxisField,
                    yAxisField,
                    splitBy,
                    dataContext: dataItem,
                    isDateAxis,
                    isXAxisFieldDouble,
                    showOutliers,
                    chartSubType,
                });
                accumulator.push(filter);
            }
            return accumulator;
        }, []);
        // if there were outliers in the selection, we use their OIDs to build the filter
        const layer = Ds(queryObject);
        if (layer !== undefined && oidList.length > 0) {
            const { objectIdField } = layer;
            selectionFilters.push(`${objectIdField} IN (${oidList.join(",")})`);
        }
        const selectionFilter = selectionFilters.join(" OR ");
        // updating the query config filter
        const modifiedQueryConfig = { ...queryConfig };
        modifiedQueryConfig.where = $s([modifiedQueryConfig.where, selectionFilter]);
        dataInfo = await fetchFinishedBoxPlotData({
            queryObject,
            chartConfig,
            queryConfig: modifiedQueryConfig,
            options,
            errorStrings,
            abortKey,
        });
    }
    return dataInfo;
}
async function fetchFinishedDataWithFilterBySelection(props) {
    const { queryObject, queryConfig, chartConfig, currentSelectionDataItems, options, errorStrings, abortKey } = props;
    const { series: seriesConfig } = chartConfig;
    const chartType = fl(seriesConfig);
    const xAxisValueFormatType = getXAxisValueFormat(chartConfig);
    let dataInfo = { valid: true };
    const selectedData = getSelectedData({
        chartConfig,
        currentSelectionDataItems,
        options,
        queryObject,
        queryConfig,
    });
    let sortNeeded = false;
    switch (chartType) {
        case WebChartTypes.PieSeries:
            if (ts(chartConfig.series) === ml.PieFromFields) {
                const { x, y } = chartConfig.series[0];
                // the information stored in `selectedData` has been manipulated to look better, but we need to revert
                // those changes in order for the chart to render
                const pieFromFieldsData = cloneDeep(selectedData);
                pieFromFieldsData.forEach((dataItem) => {
                    // revert the x field
                    if (x in dataItem) {
                        dataItem[defaultPieFromFieldsName] = dataItem[x];
                        delete dataItem[x];
                    }
                    // revert the y field
                    if (y in dataItem) {
                        dataItem[defaultPieFromFieldsValue] = dataItem[y];
                        delete dataItem[y];
                    }
                });
                dataInfo.data = { dataItems: pieFromFieldsData };
            }
            else {
                // we directly assign the selected data to the chart
                dataInfo.data = { dataItems: selectedData };
            }
            dataInfo.count = selectedData.length;
            sortNeeded = true;
            break;
        case WebChartTypes.BoxPlotSeries:
            // on box plot we rebuild a new chart based on a filter using the selected items attributes and OIDs
            dataInfo = await fetchBoxPlotDataWithFilterBySelection(props);
            break;
        case WebChartTypes.BarSeries:
        case WebChartTypes.ComboLineAndBarSeries:
        case WebChartTypes.RadarSeries:
        case WebChartTypes.LineSeries:
            if (selectedData.length === 0 ||
                !is({
                    xAxisValueFormatType,
                    setTimeBinningInfoWhenNotProvided: options?.setTimeBinningInfoWhenNotProvided,
                    seriesConfig: seriesConfig[0],
                })) {
                // we directly assign the selected data to the chart
                dataInfo.data = { dataItems: selectedData };
                dataInfo.count = selectedData.length * seriesConfig.length;
                sortNeeded = true;
            }
            else {
                const modifiedQueryConfig = { ...queryConfig };
                // Building a filter based on the selection dates
                if (currentSelectionDataItems !== undefined && currentSelectionDataItems.length > 0) {
                    const selectionFilters = currentSelectionDataItems.map((dataItem) => buildSelectionFilterForATimeBinningChartElement(seriesConfig[0].x, dataItem));
                    const filter = $s(selectionFilters, "OR");
                    modifiedQueryConfig.where = $s([modifiedQueryConfig.where, filter]);
                }
                const dataProps = {
                    queryObject,
                    queryConfig: modifiedQueryConfig,
                    chartConfig,
                    errorStrings,
                    options,
                };
                dataInfo = await fetchFinishedLineChartTimeBinningData(dataProps);
            }
            break;
        case WebChartTypes.HistogramSeries: {
            // if there's no selected data, we return default info
            if (selectedData.length === 0) {
                dataInfo.data = {
                    mean: Number.NaN,
                    median: Number.NaN,
                    stddev: Number.NaN,
                    max: Number.NaN,
                    min: Number.NaN,
                    bins: [],
                };
                dataInfo.count = 0;
            }
            else {
                // otherwise we build a whole new histogram
                const { x } = seriesConfig[0];
                // Building a filter based on the filtered bins
                const selectionFilter = selectedData.map((dataItem, index) => {
                    const { minValue, maxValue } = dataItem;
                    // for the last bin we use <=, otherwise <, to avoid values to be in two bins at once
                    const maxOperand = index === selectedData.length - 1 ? "<=" : "<";
                    return `${x} >= ${minValue} AND ${x} ${maxOperand} ${maxValue}`;
                });
                // expected result: (x >= bin 1 min AND x < bin 1 max) OR (...) OR (x >= bin N min AND x <= bin N max)
                const filter = $s(selectionFilter, "OR");
                const modifiedQueryConfig = { ...queryConfig };
                modifiedQueryConfig.where = $s([modifiedQueryConfig.where, filter]);
                // Calculating the whole new histogram
                dataInfo = await fetchFinishedHistogramData({
                    queryObject,
                    chartConfig,
                    queryConfig: modifiedQueryConfig,
                    options,
                    errorStrings,
                    abortKey,
                });
            }
            break;
        }
        case WebChartTypes.ScatterSeries: {
            // if there's no selected data, we return default info
            if (selectedData.length === 0) {
                const { r2, trendLinePoints } = ChartDefaults.scatterPlotSeries;
                dataInfo.data = { dataItems: [], r2, trendLinePoints, count: 0 };
                dataInfo.count = 0;
            }
            else {
                // otherwise we directly use the selected data and rebuild the trendline
                const statsMap = new Map();
                // we recalculate the trendline points
                const { r2, trendLinePoints } = getFinalTrendLineDataClientSide({ data: selectedData, queryConfig, chartConfig, statsMap }, false);
                dataInfo.data = { dataItems: selectedData, r2, trendLinePoints };
                dataInfo.count = selectedData.length;
            }
            break;
        }
    }
    // sorting the data as the local selection data might have a different order than the one on the chart
    if (sortNeeded && dataInfo.data !== undefined) {
        sortFetchedData({
            arrayToSort: ("dataItems" in dataInfo.data ? dataInfo.data.dataItems : dataInfo.data),
            chartConfig,
        });
    }
    return dataInfo;
}
/**
 * Fetches a box plot data
 * @param props.chartConfig The chart's config
 * @param props.queryConfig The query's config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.options The runtime options
 * @param props.errorStrings The t9n error strings
 * @param props.abortKey The key to abort queries
 */
async function fetchFinishedBoxPlotData(props) {
    const { queryObject, chartConfig, queryConfig, options, errorStrings, abortKey } = props;
    let dataInfo = { valid: true };
    const showMean = getShowMean(chartConfig);
    // Fetching a first round of data.
    // If showMean is true we will use:
    // - only the data items, to feed the mean line series
    // If showMean is false (or undefined) we will use:
    // - the data items for the candle stick series
    // - the outliers
    const dataInfo1 = await fetchFinishedGenericChartData({
        queryObject,
        queryConfig,
        fetchFullBoxPlotData: !showMean,
        options,
        chartConfig,
        errorStrings,
        abortKey,
    });
    if (!showMean) {
        dataInfo = dataInfo1;
    }
    else {
        const boxPloxData = { dataItems: [] };
        // In "Mean lines" mode the lines will use the main data items containing all the stats including the mean/avg
        boxPloxData.meanLines = dataInfo1.data.dataItems;
        // In "Mean lines" mode the boxes are not matching their initial config anymore and we need to transform
        // that config to generate the proper chart sub type (C5=>C1, C6=>C2, C7=>C3)
        const modifiedChartConfig = getMeanLinesBoxPlotConfig(chartConfig);
        // Fetching a second round of data. We will use:
        // - the data items for the candle stick series
        // - the outliers
        const boxPloxDataInfo = (await fetchFinishedGenericChartData({
            queryObject,
            queryConfig,
            fetchFullBoxPlotData: true,
            options,
            errorStrings,
            chartConfig: modifiedChartConfig,
            abortKey,
        })).data;
        // the data items will be used by the grey candles displayed behind the mean lines
        boxPloxData.dataItems = boxPloxDataInfo.dataItems;
        boxPloxData.outliers = boxPloxDataInfo.outliers;
        dataInfo.data = boxPloxData;
    }
    return dataInfo;
}
async function fetchFinishedData(props) {
    const { queryObject, chartConfig, queryConfig, binnedServerData, options, errorStrings, abortKey, fieldList } = props;
    const { series } = chartConfig;
    const { filterBySelection } = options ?? {};
    // TODO: CT: revisit when time binning is supported for combo chart
    const chartType = fl(series);
    let dataInfo = { valid: true };
    if (filterBySelection === true) {
        dataInfo = await fetchFinishedDataWithFilterBySelection(props);
    }
    else {
        // if the filter by selection is disabled, we fetch new data
        switch (chartType) {
            case WebChartTypes.BoxPlotSeries:
                dataInfo = await fetchFinishedBoxPlotData(props);
                break;
            case WebChartTypes.BarSeries:
            case WebChartTypes.ComboLineAndBarSeries:
            case WebChartTypes.PieSeries:
            case WebChartTypes.RadarSeries:
            case WebChartTypes.LineSeries: {
                // Setting common props whether we are in time binning
                const dataProps = {
                    queryObject,
                    queryConfig,
                    chartConfig,
                    errorStrings,
                    options,
                    abortKey,
                    fieldList,
                };
                if (is({
                    xAxisValueFormatType: getXAxisValueFormat(chartConfig),
                    setTimeBinningInfoWhenNotProvided: options?.setTimeBinningInfoWhenNotProvided,
                    seriesConfig: series[0],
                })) {
                    if (binnedServerData !== undefined) {
                        dataProps.binnedServerData = binnedServerData;
                    }
                    dataInfo = await fetchFinishedLineChartTimeBinningData(dataProps);
                }
                else {
                    // When time binning is not used we can call the generic function
                    dataInfo = await fetchFinishedGenericChartData(dataProps);
                }
                break;
            }
            case WebChartTypes.ScatterSeries:
                dataInfo.data = await fetchFinishedScatterPlotData({
                    queryObject,
                    queryConfig,
                    options,
                    chartConfig,
                    errorStrings,
                    abortKey,
                });
                break;
            case WebChartTypes.HistogramSeries:
                dataInfo = await fetchFinishedHistogramData({
                    queryObject,
                    queryConfig,
                    chartConfig,
                    options,
                    abortKey,
                    errorStrings,
                });
                break;
            case WebChartTypes.GaugeSeries:
                dataInfo = await fetchFinishedGaugeData({
                    queryObject,
                    chartConfig: chartConfig,
                    queryConfig,
                    options,
                    abortKey,
                });
                break;
        }
    }
    return dataInfo;
}
async function getData(props) {
    const { queryObject, chartConfig, abortKey, currentSelectionDataItems, binnedServerData, options, errorStrings, fieldList, } = props;
    let dataInfo = { valid: true };
    // Building the WebChartQuery
    const queryConfig = Mc({
        queryObject,
        chartConfig,
        runtimeDataFilters: options?.runtimeDataFilters,
        ignoreViewExtent: options?.ignoreViewExtent,
    });
    // Abort all pending queries
    lp(abortKey);
    // We fetch finished data for all the series
    dataInfo = await fetchFinishedData({
        chartConfig,
        queryObject,
        queryConfig,
        currentSelectionDataItems,
        binnedServerData,
        options,
        abortKey,
        errorStrings,
        fieldList,
    });
    dataInfo.queryConfig = queryConfig;
    return dataInfo;
}

/**
 * Returns the feature extent and the extent key for a feature.
 * @param props.feature The feature to fetch the extent from
 * @param props.splitByField The split-by field from the config
 * @param props.chartSubType The chart subtype
 * @returns
 */
function getFeatureGeometryExtent(props) {
    const { feature, splitByField, chartSubType } = props;
    // mapping the geometry aggregation to an extent when available
    const { extent } = feature.aggregateGeometries ?? feature.geometry ?? {};
    const featureExtent = extent?.toJSON();
    let featureExtentKey = Vn;
    // for split-by bar and line charts, we need to add a suffix to the default extent key to prevent them from being overwritten
    // by the category grouping process (see groupDataByCategory()). This helps differentiating the extents of features from different series
    // for certain workflows like selection.  See https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8039 for more details.
    if (featureExtent !== undefined &&
        splitByField !== undefined &&
        chartSubType !== undefined &&
        chartSubType === ml.BarAndLineSplitBy) {
        featureExtentKey =
            feature.attributes[splitByField] !== undefined
                ? `${Vn}_${feature.attributes[splitByField]}`
                : Vn;
    }
    return { featureExtent, featureExtentKey };
}
/**
 * Regroups all the data items related to a same category together.
 * @param props.input The scattered list of data items
 * @param props.x The category field used to group the data
 * @param props.splitByField The split-by field from the config
 */
function mergeDataItems(props) {
    const { input, x, splitByField } = props;
    const output = input.reduce((accumulator, dataItem) => {
        // deleting the split-by field, if it's not the same as the category x field, as the merged data item contains values for multiple series
        // we need to be careful not to delete the split-by field when it's the same as the category field to avoid issues like
        // https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7939
        if (splitByField !== undefined && splitByField !== x) {
            delete dataItem[splitByField];
        }
        return Object.assign(accumulator, dataItem);
    }, {});
    return output;
}
/**
 * Group a dataset over a x field
 *
 * Notes: we regroup the data for:
 * - processed data on split-by bar and line charts
 * - selection data on multi-series bar and line charts
 *
 * @param props.data the input data to be grouped
 * @param props.x the category field used to group the data
 * @param props.splitByField the split-by field from the config
 */
function groupDataByCategory(props) {
    const { data, x, splitByField } = props;
    let groupedProcessedData = data;
    if (data !== undefined && data.length > 0) {
        const rolledUpData = rollup(data, (group) => mergeDataItems({ input: group, x, splitByField }), (datum) => datum[x]);
        groupedProcessedData = [...rolledUpData.values()];
    }
    return groupedProcessedData;
}
/**
 * Calculates for each data item (category) for bar and line:
 *   - the category's sum
 *   - the percent for the first series
 * @param data The chart's data
 * @param seriesConfig The series config
 * @returns
 */
function calculateSeriesPercent(data, seriesConfig) {
    const processedData = data;
    const chartType = fl(seriesConfig);
    // excluding pie chart and Box plot as they don't need it
    if (chartType !== WebChartTypes.PieSeries && chartType !== WebChartTypes.BoxPlotSeries) {
        const yList = ds(seriesConfig);
        const firstSeriesY = seriesConfig[0].y; // excluding string[] as only box plot supports it
        // for each data item (each category), we'll calculate the sum and the percent for the first series
        data.forEach((dataItem) => {
            let statSum = 0;
            // calculating the sum for the whole item (category)
            yList.forEach((y) => {
                const stat = dataItem[y];
                if (Number.isFinite(stat)) {
                    statSum += stat;
                }
            });
            // storing the sum so we can use it later for sorting purpose
            dataItem[ChartDefaults.technicalSortingFieldBySum] = statSum;
            // now we know the sum, we calculate the first series percent
            if (Number.isFinite(statSum) && statSum > 0) {
                const stat = dataItem[firstSeriesY];
                if (Number.isFinite(stat)) {
                    const seriesPercent = stat / statSum;
                    dataItem[ChartDefaults.technicalSortingFieldByPercent] = seriesPercent;
                }
            }
        });
    }
    return processedData;
}
/**
  Calculate the Interquartile Range (IQR) for the given attributes and return the processed attributes objects with calculated IQR property .
  IQR is the difference between the first quartile and the third quartile.
  @param {WebChartBoxPlotSeries[]} seriesConfig - The list of series in the box plot chart config
  @param {WebChartDataItem} attributes - The data object containing the first and third quartile values.
*/
function calculateInterQuartileRange(seriesConfig, attributes) {
    const processAttribute = attributes;
    const yList = ds(seriesConfig);
    const uniqueNumericField = yList.length === 1;
    yList.forEach((y) => {
        // if the yList has only one value it means the box plot uses only one numeric field and in that case
        // we don't want to use the `y` value
        const yFieldNames = rs(uniqueNumericField ? undefined : y);
        const firstQuartile = processAttribute[yFieldNames[Wl.FirstQuartile]];
        const thirdQuartile = processAttribute[yFieldNames[Wl.ThirdQuartile]];
        // calculation will be done if both quartiles are valid, finite number and third quartile is greater than or equal to the first quartile
        const isValid = Number.isFinite(firstQuartile) && Number.isFinite(thirdQuartile) && thirdQuartile >= firstQuartile;
        if (isValid) {
            // calculate the Inter Quartile Range (IQR)
            processAttribute[yFieldNames[Wl.IQR]] = thirdQuartile - firstQuartile;
        }
    });
    return processAttribute;
}
/**
 * Assigns the specified property to a best-guessed value from the query results.
 * If its upper-cased or lowercased corresponding properties (that are not coming from the config) exist, remove them as well.
 *
 * @param attributes The attributes associated with a feature returned from the query result
 * @param propertyNames The properties referencing the proper case
 */
function restoreAttributesCase(attributes, propertyNames) {
    [propertyNames].flat().forEach((propertyName) => {
        if (propertyName) {
            // assign the property its 'best-guessed' value if it's undefined
            if (attributes[propertyName] === undefined) {
                attributes[propertyName] =
                    attributes[propertyName.toUpperCase()] !== undefined
                        ? attributes[propertyName.toUpperCase()]
                        : attributes[propertyName.toLowerCase()];
            }
            // check the result again and clean up if needed.
            if (attributes[propertyName] !== undefined) {
                if (propertyName !== propertyName.toUpperCase()) {
                    delete attributes[propertyName.toUpperCase()];
                }
                if (propertyName !== propertyName.toLowerCase()) {
                    delete attributes[propertyName.toLowerCase()];
                }
            }
            else {
                delete attributes[propertyName];
            }
        }
    });
}
/**
 * Builds a list of the outStatisticFieldName used in the config and restore their case to prevent a shift between
 * the query results' case and the config's.
 * See issues:
 * - https://devtopia.esri.com/webgis/arcgis-charts/issues/6038
 * - https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7837
 * @param attributes The attributes associated with a feature returned from the query result
 * @param seriesConfig The series config
 */
function restoreStatFieldNamesCase(attributes, seriesConfig) {
    // gathering all the outStatisticFieldName used in the config
    const propertyNames = Array.from(new Set(seriesConfig.flatMap((s) => s.query?.outStatistics?.map((stat) => stat.outStatisticFieldName))));
    // adding the generic out stat field name for the queries using a split-by field
    propertyNames.push(Un.outStatistics.outStatisticFieldName);
    restoreAttributesCase(attributes, propertyNames);
}
/**
 * This function goes through the properties of the dataItem and compare them with the outStatisticFieldNames
 * in the list of outStatistics. If a match is found, swap that property to its corresponding onStatisticField
 * property instead.
 *
 * Refer to issue https://devtopia.esri.com/webgis/arcgis-charts/issues/6018 for details
 *
 * @param dataItem The dataItem of which properties may change.
 * @param outStatistics The list of outStatistics to find the matching onStatisticFields for the properties in the dataItem.
 */
function swapStatFieldNamesToStatisticFields(dataItem, outStatistics) {
    let modifiedDataItem = { ...dataItem };
    if (dataItem !== undefined && outStatistics[0] !== undefined) {
        modifiedDataItem = Object.keys(dataItem).reduce((accumulator, prop) => {
            const field = outStatistics.find((item) => item.outStatisticFieldName?.toLowerCase() === prop.toLowerCase())?.onStatisticField;
            if (field !== undefined && dataItem[prop] !== undefined && field !== prop) {
                accumulator[field] = dataItem[prop];
            }
            else {
                accumulator[prop] = dataItem[prop];
            }
            return accumulator;
        }, {});
    }
    return modifiedDataItem;
}
/**
 * Since the series's dataFields.valueY was set to `${y}_${splitByValue},
 * we need to add a new property to the dataItem using that format and populate it with the value from to the y property.
 * @param props.dataItem The dataItem of which properties are to be manipulated.
 * @param props.splitByField The split-by-field
 * @param props.y The y property for all series.
 */
function renameYFieldForSplitByNoAggregation(props) {
    const { dataItem, splitByField, y } = props;
    if (dataItem !== undefined && !Ol(splitByField) && !Ol(y)) {
        const splitByValue = dataItem[splitByField];
        const dataFieldY = `${y}_${splitByValue?.toString()}`;
        dataItem[dataFieldY] = dataItem[y];
        delete dataItem[y];
    }
}
/**
 * Removes a prefix added to the box plot out statistic field names by `buildUniqueBoxPlotOutStatistics()`.
 * The prefix was added to avoid the queries to fail on some specific services. Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7376
 * @param attributes The attributes to be modified
 * @param y The numeric field name used as a prefix
 */
function removeBoxPlotOutStatisticFieldNamePrefix(attributes, y) {
    const attributesProperties = Object.keys(attributes);
    attributesProperties.forEach((attributeName) => {
        if (attributeName.startsWith(`${y}_`)) {
            const newAttributeName = attributeName.slice(y.length + 1);
            attributes[newAttributeName] = attributes[attributeName];
            delete attributes[attributeName];
        }
    });
}
/**
 * Indicates how many items we will find in one feature.
 * On most of the charts we have one for one, but for instance on a bar from fields
 * we have N items for one feature (N being the number of numeric fields).
 * This needs to be kept in sync with `getMaximumNumberOfFeaturesToFetch()`.
 * @param chartSubType The chart sub-type
 * @param chartConfig The chart config
 */
function getNumberOfItemsPerFeature(chartSubType, chartConfig) {
    let numberOfItems = 1;
    switch (chartSubType) {
        case ml.BarAndLineFromFields:
        case ml.PieFromFields:
            numberOfItems = chartConfig.series[0].query?.outStatistics?.length ?? 1;
            break;
        case ml.BoxPlotMultiFields:
        case ml.BoxPlotMultiFieldsAndSplitBy:
            // for those charts y is an array of numeric fields
            numberOfItems = chartConfig.series[0].y.length;
            break;
    }
    return numberOfItems;
}
/**
 * Adding a special attribute to the data item to indicate it belongs to a mean line marker.
 * This will make it easier when applying the selection to the chart.
 * @param props.attributes The attributes to be modified
 * @param props.showMean Whether the mean line marker should be displayed
 * @param props.chartSubType The chart sub-type
 */
function flagMeanLineMarker(props) {
    const { attributes, showMean, chartSubType } = props;
    if (showMean &&
        (chartSubType === ml.BoxPlotMonoFieldAndSplitBy ||
            chartSubType === ml.BoxPlotMultiFieldsAndSplitBy ||
            chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy)) {
        attributes[ChartDefaults.boxPlot.boxPlotMeanLineMarkerId] = true;
    }
}
/**
 * Trims the number of categories based on the provided `maxCategoryCount`. This is possible only for charts having
 * a query response for which each result is a category. If a result contains potentially multiple categories it will
 * be handled by the `limitCategories()` function.
 * @param props.queryResponse The query response to be trimmed
 * @param props.chartConfig The chart configuration
 * @param props.maxCategoryCount The maximum number of categories to keep
 */
function trimCategories(props) {
    const { queryResponse, chartConfig, maxCategoryCount } = props;
    const chartSubType = ts(chartConfig.series);
    return maxCategoryCount &&
        Number.isFinite(maxCategoryCount) &&
        maxCategoryCount < queryResponse.length &&
        supportedSubTypesForCategoryTrimming.includes(chartSubType)
        ? queryResponse.slice(0, maxCategoryCount)
        : queryResponse;
}
/**
 * Limits the number of categories based on the provided `maxCategoryCount`.
 * This function is called for each data item and will decide whether to keep the item or not.
 * @param props.attributes The attributes to be checked
 * @param props.uniqueCategoryList The list of unique categories to keep track of how many categories have been processed
 * @param props.maxCategoryCount The maximum number of categories to keep
 * @param props.x The x field
 * @param props.chartSubType The chart sub-type
 */
function limitCategories(props) {
    const { attributes, uniqueCategoryList, maxCategoryCount, x, chartSubType } = props;
    let skipAttribute = false;
    // We only act on the chart sub-types that were not already processed by `trimCategories()`
    if (x &&
        maxCategoryCount &&
        Number.isFinite(maxCategoryCount) &&
        !supportedSubTypesForCategoryTrimming.includes(chartSubType)) {
        // For the charts from fields there's only data item, in which each stat matches a slice / bar / marker.
        // To apply the limit we remove as many stats as needed to stay under the limit.
        if ((chartSubType === ml.BarAndLineFromFields || chartSubType === ml.PieFromFields) &&
            Object.keys(attributes).length > maxCategoryCount) {
            Object.keys(attributes)
                .filter((statName) => statName !== RESTStatisticType.EnvelopeAggregate)
                .forEach((statName, index) => {
                if (index >= maxCategoryCount) {
                    delete attributes[statName];
                }
            });
        }
        else {
            const currentCategory = attributes[x];
            // testing 'currentCategory !== undefined' and not just 'x' to keep the `null` categories
            if (currentCategory !== undefined) {
                // we consider the limit as exceeded if the number max of categories is reached and if the current category
                // is different from those already processed
                if (uniqueCategoryList.size === maxCategoryCount && !uniqueCategoryList.has(currentCategory)) {
                    skipAttribute = true;
                }
                else {
                    uniqueCategoryList.add(currentCategory);
                }
            }
        }
    }
    return skipAttribute;
}
/**
 * This function goes through the results from the query to delete/modify/add attributes. Examples:
 * - transforms the `x` value from `null` to `"arcgis_charts_null"`
 * - adds the features extent
 * - fetches and stores the sub-type name
 * - calculates and stores the IQR fox bot plots
 * - ...
 * Those modified attributes are later feed to the chart and transformed into data contexts we can access
 * through each column / slice / marker...
 * @param props
 */
function mapQueryResults(props) {
    const { queryResponse, chartConfig, mapToStatField, splitByField, fieldOID, isDateField, isTimeBinningSeries, subtypeInfo, resultLimit, showMean, chartLimits, fieldList, } = props;
    const { series: seriesConfig } = chartConfig;
    const chartSubType = ts(seriesConfig);
    const chartType = fl(seriesConfig);
    const { x } = seriesConfig[0];
    const firstSeriesY = "y" in seriesConfig[0] ? seriesConfig[0].y : undefined;
    const outStatistics = seriesConfig[0].query?.outStatistics ?? [];
    const { originalCategoryValue, originalDateValue, typeOrDomainFieldName, typeOrDomainIdValue } = ChartDefaults;
    const allAttributes = [];
    let resultsMapped = 0;
    const uniqueCategoryList = new Set();
    const { maxCategoryCount } = Zo(chartLimits);
    // Trimming the number of categories to consider the `maxCategoryCount` property
    // This will act only on the charts having 1 feature = 1 category
    // The other charts are handled below through `limitCategories()`
    const trimmedQueryResponse = trimCategories({
        queryResponse,
        chartConfig,
        maxCategoryCount,
    });
    for (let featureIndex = 0; trimmedQueryResponse[featureIndex] && featureIndex < trimmedQueryResponse.length; featureIndex += 1) {
        // we double check whether we don't exceed the number of features. This is normally handled by the query itself,
        // but some flavors of service tend to ignore the limit we are passing (Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6992)
        // When the limit is reached, we quit the loop
        if (resultLimit !== undefined && resultsMapped >= resultLimit) {
            break;
        }
        resultsMapped += getNumberOfItemsPerFeature(chartSubType, chartConfig);
        const feature = trimmedQueryResponse[featureIndex];
        let attributes = { ...feature.attributes };
        // Limiting the number of features per series, according to the provided chart limits
        // Note: we previously were doing so by setting the query `num` property but it was not covering all cases
        // Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7122
        if (limitCategories({
            attributes,
            uniqueCategoryList,
            maxCategoryCount,
            x,
            chartSubType,
        })) {
            // `continue` will end the current iteration from the for... loop and jump to the next one without adding the
            // current attributes to the final result. We need to continue looping on the other results as we might need
            // to retain more features for other series
            continue;
        }
        // restores the case of the attributes as defined in the config
        restoreStatFieldNamesCase(attributes, seriesConfig);
        // For pie from fields, store the retrieved value to the dataContext using the information from the outStatistic;
        // refer to issue https://devtopia.esri.com/webgis/arcgis-charts/issues/6018 for details
        if (chartSubType === ml.PieFromFields || chartSubType === ml.BarAndLineFromFields) {
            attributes = swapStatFieldNamesToStatisticFields(attributes, outStatistics);
        }
        else if (typeof firstSeriesY === "string" && chartSubType === ml.BarAndLineSplitByNoAggregation) {
            // For non-aggregated split-by line chart, we swap out the split-by-field property with the y property
            // for each series (based on the split-by value)
            renameYFieldForSplitByNoAggregation({
                dataItem: attributes,
                splitByField,
                y: firstSeriesY,
            });
        }
        else if (firstSeriesY &&
            (chartSubType === ml.BoxPlotMonoField ||
                chartSubType === ml.BoxPlotMonoFieldAndCategory ||
                chartSubType === ml.BoxPlotMonoFieldAndSplitBy ||
                chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy)) {
            // Fox box plot with a single numeric field we need to remove a prefix added to the out statistics field names
            removeBoxPlotOutStatisticFieldNamePrefix(attributes, typeof firstSeriesY === "string" ? firstSeriesY : firstSeriesY[0]);
        }
        flagMeanLineMarker({ attributes, showMean, chartSubType });
        let xValue = attributes[x];
        // if the x value is `null` and the config asks to fetch the null values, we need to transform them to a
        // string value so they are not ignored later in the process when fed to the chart
        if (xValue === null &&
            seriesConfig[0]?.query?.fetchNullValues === true &&
            chartSubType !== ml.PieFromFields) {
            attributes[originalCategoryValue] = null;
            xValue = ChartDefaults.nullValue;
        }
        // On a line series using time binning, we convert and store the SQL date, from the EXPR_1 to the x value;
        if (isTimeBinningSeries) {
            xValue = createDatefromAttributes(attributes);
        }
        // getting the stat field name as defined in the config
        const { outStatisticFieldName } = Un.outStatistics ?? {};
        // fetching the feature's geometry extent and extent key, then storing them in the data context if available
        const { featureExtent, featureExtentKey } = getFeatureGeometryExtent({
            feature,
            splitByField,
            chartSubType,
        });
        if (featureExtent) {
            attributes[featureExtentKey] = featureExtent;
        }
        if (chartSubType === ml.BarAndLineSplitBy && outStatisticFieldName !== undefined) {
            // Getting the split-by value
            const splitByValue = attributes[splitByField];
            // Getting the stat field associated to the given split-by value. `mapToStatField` is computed by mapUniqueValueToStatField()
            const statField = mapToStatField?.get(splitByValue);
            if (statField !== undefined) {
                attributes[statField] = attributes[outStatisticFieldName];
            }
            // Deleting the default property. Doing it outside of the condition above to prevent from that property to stay in the data context
            // when the original stat field is not found in `mapToStatField`.
            delete attributes[outStatisticFieldName];
        }
        else if (chartSubType === ml.PieNoAggregation ||
            chartSubType === ml.BarAndLineNoAggregation ||
            chartSubType === ml.BarAndLineSplitByNoAggregation) {
            /* If the category field is a date, we store the original date value in the data context to use it
              later when we perform selection queries */
            if (isDateField) {
                attributes[originalDateValue] = xValue;
            }
            else if (xValue !== ChartDefaults.nullValue) {
                // Saving the original category/date value before modifying it (the null case is handled beforehand)
                attributes[originalCategoryValue] = xValue;
            }
            // To display categories with the same label we add a suffix to the x value to differentiate the bars and lines and avoid them to overlap.
            // Later in the process an adapter is used on the x-axis to not display the suffixed value but the original one.
            if (useCategoryAxis({
                isXAxis: true,
                chartType,
                valueFormat: chartConfig.axes?.[0]?.valueFormat,
            })) {
                attributes[ChartDefaults.xAxisField] = `${xValue}-${featureIndex}`;
            }
            // Adding to the data context the OID associated to the feature in order to avoid an extra query when the bar is selected
            attributes[Un.uniqueIdsName] = attributes[fieldOID];
        }
        // try to get the field description if the field contains subtype or domain info
        const fieldSubtypeOrDomainDescription = _c({
            subtypeInfo,
            fieldList,
            fieldName: x,
            fieldValueToMatch: xValue,
        });
        // if the field description is available, store it to the original category
        if (fieldSubtypeOrDomainDescription !== undefined &&
            fieldSubtypeOrDomainDescription !== xValue &&
            chartSubType !== ml.PieFromFields) {
            // store the field description to the original category; also the field name
            attributes[originalCategoryValue] = fieldSubtypeOrDomainDescription;
            attributes[typeOrDomainFieldName] = x;
            // store the original subtype/domain id value for color matching using sliceId (for pie), and selection (for Pie/Bar/Line)
            attributes[typeOrDomainIdValue] = xValue;
        }
        if (chartType === WebChartTypes.BoxPlotSeries) {
            // box plot series have y defined as string | string[]. so, we flatten the y if it is of type string[]
            attributes = calculateInterQuartileRange(seriesConfig, attributes);
        }
        // For a pie chart using a numeric field as category, we stringify the values
        // see issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6025
        if (chartType === WebChartTypes.PieSeries && typeof xValue === "number") {
            if (attributes[originalCategoryValue] === undefined) {
                attributes[originalCategoryValue] = attributes[x];
            }
            xValue = `${xValue}`;
        }
        if (xValue !== undefined) {
            // saving the original category if none of the cases above covered it
            if (attributes[originalCategoryValue] === undefined) {
                attributes[originalCategoryValue] = attributes[x];
            }
            // set the value for x considering coded values
            attributes[x] = fieldSubtypeOrDomainDescription ?? xValue;
            if (attributes[x] === null) {
                attributes[x] = ChartDefaults.nullValue;
            }
            // we define the field that will be used by the x-axis (which needs to be unique)
            // we first use the domain id when available, otherwise the x value (Refer to issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6782)
            if (attributes[ChartDefaults.xAxisField] === undefined) {
                attributes[ChartDefaults.xAxisField] = attributes[typeOrDomainIdValue] ?? attributes[x];
            }
        }
        allAttributes.push(attributes);
    }
    return allAttributes;
}
/**
 * Function executing a unique query and processing its results.
 * @param props
 */
async function processUniqueQueryResults(props) {
    const { queryObject, uniqueQuery, chartConfig, mapToStatField, abortKey, elementCount, isTimeBinningSeries, showMean, chartLimits, usePopupTemplateFieldsInfo, } = props;
    const { series: seriesConfig } = chartConfig;
    const chartSubType = ts(seriesConfig);
    let processedData = [];
    // Fetching the split-by field. Double checking the query type to debunk cases like `where: 1=1` used on some other query types
    const splitByField = chartSubType === ml.BarAndLineSplitBy || chartSubType === ml.BarAndLineSplitByNoAggregation
        ? Xl(seriesConfig[0].query?.where)
        : "";
    // Waiting for the query
    const queryResponse = (await op({
        queryObject,
        queryConfig: uniqueQuery,
        featureCount: elementCount,
        abortKey,
    }));
    const fieldList = await Sc(queryObject, usePopupTemplateFieldsInfo);
    const layer = Ds(queryObject);
    const fieldOID = layer.objectIdField;
    const dateFields = Ec(fieldList);
    const { x } = seriesConfig[0];
    const isDateField = dateFields.includes(x);
    const subtypeInfo = Rc(queryObject);
    processedData = mapQueryResults({
        queryResponse,
        chartConfig,
        mapToStatField,
        splitByField,
        fieldOID,
        isDateField,
        isTimeBinningSeries,
        subtypeInfo,
        fieldList,
        resultLimit: uniqueQuery.num,
        showMean,
        chartLimits,
    });
    if (chartSubType !== ml.BarAndLineSplitByNoAggregation &&
        chartSubType !== ml.BarAndLineFromFields) {
        // If a split-by field is defined, we need to regroup the data per split-by value
        if (splitByField !== "") {
            processedData = groupDataByCategory({
                data: processedData,
                x,
                splitByField,
            });
        }
        // Calculate stats
        processedData = calculateSeriesPercent(processedData, seriesConfig);
    }
    return processedData;
}
/**
 * Returns the number total of elements (bar | markers | slices) to be displayed on a chart.
 * It considers the chart will display all the categories/dates (filter on).
 * TODO: that is only necessary because the REST API doesn't return (yet?) the features for which the result (sum, count...) is 0.
 * @param props
 */
async function getTotalElementCount(props) {
    const { chartConfig, queryObject, queryConfig, numberMaxOfFeaturesToFetch, behaviorAfterLimit, isGaugeByFeature } = props;
    const { series: seriesConfig } = chartConfig;
    const chartSubType = ts(seriesConfig);
    const { x } = seriesConfig[0];
    const numberOfSeries = seriesConfig.length;
    let categoryOrDateCount;
    let elementCount;
    // TODO:  set value of element Count to provided y value
    // multiple that count by number of series
    if (chartSubType === ml.BoxPlotMonoField || chartSubType === ml.BoxPlotMonoFieldAndSplitBy) {
        elementCount = numberOfSeries;
        categoryOrDateCount = elementCount;
    }
    else if (chartSubType === ml.BoxPlotMultiFields ||
        chartSubType === ml.BoxPlotMultiFieldsAndSplitBy) {
        // for the box plot multi fields there's one element per numeric field (y being a string[] and listing all
        // the numeric fields)
        elementCount = chartConfig.series[0].y.length;
        categoryOrDateCount = elementCount;
    }
    else if (chartSubType === ml.PieFromFields || chartSubType === ml.BarAndLineFromFields) {
        // filtering out the outStatistic used to fetch the geometry aggregation
        elementCount =
            seriesConfig[0].query?.outStatistics?.filter((stat) => stat.statisticType !== RESTStatisticType.EnvelopeAggregate)
                .length ?? 0;
        categoryOrDateCount = elementCount;
    }
    else {
        categoryOrDateCount = await tp({
            queryObject,
            x,
            chartSubType,
            queryConfig,
            isGaugeByFeature,
        });
    }
    if (categoryOrDateCount !== undefined) {
        const isMonoFieldBoxplot = chartSubType === ml.BoxPlotMonoField ||
            chartSubType === ml.BoxPlotMonoFieldAndCategory ||
            chartSubType === ml.BoxPlotMonoFieldAndSplitBy;
        // when the chart is not aggregated, the series are sharing the same data so we don't need to multiply the category count by the number of series;
        // also when the chart is a mono field box plot, we don't need to multiply the category count by the number of series since each category has one element
        elementCount =
            isAggregatedChart(chartSubType) && !isMonoFieldBoxplot
                ? categoryOrDateCount * numberOfSeries
                : categoryOrDateCount;
    }
    // when the chart is requested to render up to the limit, we choose the minimum value between:
    // - `elementCount` which is basically how many features the data query would return
    // - `numberMaxOfFeaturesToFetch` which is a number calculated by `getMaximumNumberOfFeaturesToFetch()` to limit the query
    if (behaviorAfterLimit === We.RenderUpToTheLimit &&
        elementCount !== undefined &&
        numberMaxOfFeaturesToFetch !== undefined &&
        numberMaxOfFeaturesToFetch < elementCount) {
        elementCount = numberMaxOfFeaturesToFetch;
        categoryOrDateCount = Math.ceil(elementCount / numberOfSeries);
    }
    return {
        categoryOrDateCount,
        elementCount,
    };
}
/**
 * Sort bar/line/pie chart data.
 * No sorting will be performed if no sorting instruction is provided via the chart config's `orderOptions.data` property.
 * Also, if it's a time binning series, the data is already sorted by the query and other routines, we won't need to resort them.
 * @param props.arrayToSort The data array to sort
 * @param props.chartConfig The chart's config
 * @param props.fieldList The layer field list
 * @param props.isTimeBinningSeries Whether the series is a time binning series
 */
function sortFetchedData(props) {
    const { arrayToSort, chartConfig, fieldList, isTimeBinningSeries } = props;
    if (isTimeBinningSeries !== true) {
        const { series: seriesConfig } = chartConfig;
        const chartSubType = ts(seriesConfig);
        const chartType = fl(seriesConfig);
        const xAxisValueFormatType = getXAxisValueFormat(chartConfig);
        const dataOrderParameters = getDataOrderParameters(chartConfig);
        if (dataOrderParameters !== undefined && arrayToSort !== undefined && arrayToSort.length > 1) {
            // get order instructions
            const { orderBy } = dataOrderParameters;
            let { sortingField } = dataOrderParameters;
            const sortByCategory = chartConfig.orderOptions?.data?.orderType === WebChartOrderDataByTypes.Category;
            const preferLabel = dataOrderParameters.preferLabel !== false;
            const isByFieldsChart = chartSubType === ml.BarAndLineFromFields ||
                chartSubType === ml.PieFromFields ||
                chartSubType === ml.BoxPlotMultiFields ||
                chartSubType === ml.BoxPlotMultiFieldsAndSplitBy;
            const isPieOrByFieldsChart = isByFieldsChart || chartType === WebChartTypes.PieSeries;
            const isNonAggregated = chartSubType === ml.PieNoAggregation ||
                chartSubType === ml.BarAndLineNoAggregation ||
                chartSubType === ml.BarAndLineSplitByNoAggregation;
            // when an x field has coded value domain, the data item will be populated with that info in the `mapQueryResults()`
            const fieldHasCodedValueDomain = isByFieldsChart
                ? false
                : arrayToSort?.length > 0 && arrayToSort.some((item) => Object.hasOwn(item, ChartDefaults.typeOrDomainIdValue));
            /* when sort by category, we will need to adjust the sorting field, if:
            1. preferLabel is set to false, or
            2. it's a line chart with value axis
            when the sorting field contains coded domain value or field alias
            see details from https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8605
            and https://devtopia.esri.com/WebGIS/arcgis-web-components/issues/2404
            */
            if (sortByCategory &&
                (!preferLabel ||
                    (chartType === WebChartTypes.LineSeries && xAxisValueFormatType === WebChartTypes.NumberAxisFormat))) {
                if (fieldHasCodedValueDomain) {
                    sortingField = ChartDefaults.typeOrDomainIdValue;
                }
                else if (isPieOrByFieldsChart) {
                    sortingField = ChartDefaults.originalCategoryValue;
                }
            }
            if (Array.isArray(orderBy)) {
                sortWebChartDataItemsUsingPredefinedLabels({
                    arrayToSort,
                    orderBy,
                    sortingField,
                    fieldList,
                    isByFieldsChart,
                    preferLabel,
                });
            }
            else {
                /* We force an ascending order for a date x-axis and sort on x to avoid a zoom glitch. The axis will be reversed later
                in the process in the function `updateXYChartAxes()`.
                See issue #3614 and amCharts ticket https://amcharts.zendesk.com/hc/en-us/requests/62307
                */
                const forceAscendingOrder = xAxisValueFormatType === WebChartTypes.DateAxisFormat && sortByCategory;
                sortWebChartDataItemsUsingDirectionalSort({
                    arrayToSort,
                    orderBy,
                    sortingField,
                    forceAscendingOrder,
                    isNonAggregated,
                    sortByCategory,
                    preferLabel,
                    isPieOrByFieldsChart,
                });
            }
        }
    }
}
/**
 * Fetching the data for multiple types of chart.
 * @param props
 */
async function fetchFinishedGenericChartData(props) {
    const { chartConfig, queryConfig, fetchFullBoxPlotData, options, queryObject, abortKey, fieldList } = props;
    const showMean = "showMean" in chartConfig && typeof chartConfig.showMean === "boolean" ? chartConfig.showMean : false;
    const { chartLimits, usePopupTemplateFieldsInfo } = options ?? {};
    const replaceNoValueCategoryWithZero = options?.replaceNoValueCategoryWithZero ?? ChartDefaults.options.replaceNoValueCategoryWithZero;
    const { behaviorAfterLimit } = chartLimits ?? {};
    const fetchResult = { valid: true };
    let data;
    let outlierExceedLimit = false;
    const seriesConfig = chartConfig.series;
    const firstSeriesConfig = seriesConfig[0];
    const chartSubType = ts(chartConfig.series);
    if (firstSeriesConfig !== undefined && queryObject !== undefined) {
        // TODO: CT: if there is a limit of elements for combo chart, we can't use the first index
        // TODO: CT: Also, may need to revisit when time binning is implemented for combo chart
        const chartType = fl(seriesConfig);
        const { uniqueQuery, mapToStatField } = buildUniqueQuery({
            chartConfig,
            queryObject,
            queryConfig,
            fetchFullBoxPlotData,
            options,
        });
        let { categoryOrDateCount, elementCount } = await getTotalElementCount({
            chartConfig,
            queryObject,
            queryConfig,
            behaviorAfterLimit,
            numberMaxOfFeaturesToFetch: uniqueQuery.num,
        });
        // If `elementCount` is null, NaN, undefined... it means the query counting the features failed to bring back results
        const countQueryFailed = !Number.isFinite(elementCount);
        /* We check a first time if the number of bars or markers is under the limit.
        If the query counting the features failed we let it pass given we'll do another control once we get the data. */
        let numberOfElementsUnderLimit = countQueryFailed ||
            Il({
                count: elementCount ?? 0,
                seriesCount: seriesConfig.length,
                chartType,
                chartLimits,
            });
        // If the limit is not exceeded or if we want to render up to the limit, we continue to fetching the data
        if (numberOfElementsUnderLimit) {
            data = await processUniqueQueryResults({
                queryObject,
                uniqueQuery,
                chartConfig,
                mapToStatField,
                elementCount,
                isTimeBinningSeries: false,
                showMean,
                chartLimits,
                abortKey,
                usePopupTemplateFieldsInfo,
            });
            // box plot specific data
            if (chartType === WebChartTypes.BoxPlotSeries) {
                fetchResult.data = await completeBoxPlotResults({
                    data,
                    queryObject,
                    fetchFullBoxPlotData,
                    uniqueQuery,
                    chartConfig: chartConfig,
                    elementCount,
                    chartLimits,
                    abortKey,
                });
                // check number of outliers to make sure it doesn't exceed limit
                if (chartLimits?.maxBoxPlotOutlierLimit !== undefined) {
                    numberOfElementsUnderLimit =
                        (fetchResult.data.outliers ?? []).length <= chartLimits.maxBoxPlotOutlierLimit;
                    outlierExceedLimit = !numberOfElementsUnderLimit;
                }
            }
            // If the count query failed earlier we proceed to a second check with the data this tine. We also update the counters with it.
            if (countQueryFailed) {
                categoryOrDateCount = data.length;
                // when the chart is not aggregated, the series are sharing the same data so we don't need to multiply the count by the number of series
                elementCount = isAggregatedChart(chartSubType)
                    ? categoryOrDateCount * seriesConfig.length
                    : categoryOrDateCount;
                numberOfElementsUnderLimit = Il({
                    count: elementCount,
                    seriesCount: seriesConfig.length,
                    chartType,
                    chartLimits,
                });
            }
            // If the limit is not exceeded or if we want to render up to the limit, we continue to fetching the data
            if (numberOfElementsUnderLimit) {
                if (chartType === WebChartTypes.PieSeries) {
                    // convert the data retrieved for pie with category from fields
                    if (chartSubType === ml.PieFromFields) {
                        data = convertMultipleNumericFieldsData({
                            dataToConvert: data[0],
                            x: defaultPieFromFieldsName,
                            y: defaultPieFromFieldsValue,
                            fieldList,
                        });
                    }
                    // Perform another check for pie with mixture of negative and positive data
                    const isSupportedPie = checkForSupportedPieChart(data, chartSubType === ml.PieFromFields ? defaultPieFromFieldsValue : firstSeriesConfig.y);
                    if (isSupportedPie) {
                        // setting the data. Note: it will later sorted by `updatePieChartCategories()`
                        fetchResult.data = { dataItems: data };
                    }
                    else {
                        // set the error info
                        completeDataUnsupportedPieInfo(fetchResult, $c.PieChartMixOfNegativePositiveSlices);
                    }
                }
                else if (chartType === WebChartTypes.RadarSeries ||
                    chartType === WebChartTypes.BarSeries ||
                    chartType === WebChartTypes.LineSeries ||
                    chartType === WebChartTypes.ComboLineAndBarSeries) {
                    // convert the data retrieved for bar/line by field
                    if (chartSubType === ml.BarAndLineFromFields) {
                        data = convertMultipleNumericFieldsData({
                            dataToConvert: data[0],
                            x: firstSeriesConfig.x,
                            y: firstSeriesConfig.y,
                            fieldList,
                        });
                    }
                    else {
                        // Completing the missing categories
                        data = await completeDataWithMissingCategories({
                            queryObject,
                            seriesData: data,
                            chartConfig,
                            queryConfig,
                            categoryOrDateCount,
                            behaviorAfterLimit,
                            abortKey,
                        });
                    }
                    // data.length represents the number of categories which can be increased by `completeDataWithMissingCategories()`
                    // when the chart is not aggregated, the series are sharing the same data so we don't need to multiply the count by the number of series
                    elementCount = isAggregatedChart(chartSubType) ? data.length * seriesConfig.length : data.length;
                    // We need to check once more if the number of elements is under the limit
                    numberOfElementsUnderLimit = Il({
                        count: elementCount,
                        seriesCount: seriesConfig.length,
                        chartType,
                        chartLimits,
                    });
                    // If the limit is not exceeded or if we want to render up to the limit, we continue to fetching the data
                    if (numberOfElementsUnderLimit) {
                        if (replaceNoValueCategoryWithZero) {
                            data = completeDataForEmptyCategoriesWithZeros(data, chartConfig);
                        }
                        sortFetchedData({
                            arrayToSort: data,
                            chartConfig,
                            fieldList,
                        });
                        let timeIntervalInfo = {};
                        // When `binTemporalData` is undefined or true, we fetch the data through `fetchFinishedLineChartTimeBinningData`
                        // When it is false we might still get information regarding the time unit and size, that we store in the data set to be
                        // later used by the axis to define its base interval (see `updateBaseInterval()`)
                        const { timeIntervalSize, timeIntervalUnits } = firstSeriesConfig;
                        // if both the unit and size are defined
                        if (timeIntervalSize !== undefined && timeIntervalUnits !== undefined) {
                            timeIntervalInfo = { timeIntervalSize, timeIntervalUnits };
                        }
                        // On a line/bar series the data structure is a WebChartGenericDataItem
                        fetchResult.data = { dataItems: data, timeIntervalInfo };
                    }
                }
            }
        }
        // Note: we don't use a `if...else` here because the value of numberOfElementsUnderLimit can be changed in the block above
        if (!numberOfElementsUnderLimit) {
            completeDataExceedLimitInfo({
                dataInfo: fetchResult,
                chartType,
                subError: { outlierLimit: outlierExceedLimit },
            });
        }
        // for pie chart, numberOfElementsUnderLimit could still be true, but if it's unsupported pie, fetchResult.valid already be set to false.
        fetchResult.count = elementCount;
    }
    return fetchResult;
}
/**
 * Fetching the data for specifically a line chart using time binning options.
 * @param props
 */
async function fetchFinishedLineChartTimeBinningData(props) {
    const { chartConfig, queryConfig, queryObject, abortKey, binnedServerData, options } = props;
    const { chartLimits, usePopupTemplateFieldsInfo } = options ?? {};
    const { behaviorAfterLimit } = chartLimits ?? {};
    const { chartRenderer } = chartConfig;
    const showMean = "showMean" in chartConfig && typeof chartConfig.showMean === "boolean" ? chartConfig.showMean : false;
    const seriesConfig = chartConfig.series;
    const firstSeries = seriesConfig[0];
    const fetchResult = { valid: true };
    let data;
    // TODO: CT: will need to revisit when time binning is supported for combo chart
    if (queryObject !== undefined) {
        const { x, timeIntervalUnits, timeIntervalSize } = firstSeries;
        const calculateTimeIntervalInfoIsNeeded = needsToCalculateTimeIntervalInfo({
            series: firstSeries,
            isTimeBinningSeries: true,
            setTimeBinningInfoWhenNotProvided: options?.setTimeBinningInfoWhenNotProvided,
        });
        // If not already provided as an input, fetching the time range and number of features when we are on a time binning series
        const timeBinningStats = binnedServerData?.timeBinningStats ??
            (await getTimeBinningStatistics({
                queryObject,
                queryConfig,
                x,
            }));
        // The time interval comes from either the config or by calculation
        const timeIntervalInfo = calculateTimeIntervalInfoIsNeeded
            ? getBestInterval(timeBinningStats)
            : {
                timeIntervalUnits,
                timeIntervalSize,
            };
        const { uniqueQuery, mapToStatField } = buildUniqueQuery({
            chartConfig,
            queryConfig,
            queryObject,
            timeIntervalInfo,
            options,
        });
        // TODO: we need to consider the null policy "interpolate" which will generate less bins than the "null" and "zero" policies
        const { numberOfFinalBinsWithinDataRange: markerCountPerSeries } = getNumberOfBinsWithinDataRange({
            dateMinTimestamp: timeBinningStats.dateRange.dateMinTimestamp,
            dateMaxTimestamp: timeBinningStats.dateRange.dateMaxTimestamp,
            timeIntervalInfo,
        });
        let totalMarkerCount = markerCountPerSeries * seriesConfig.length;
        // Given `getNumberOfBinsWithinDataRange()` returns a diff in days for weeks, months and years,
        // we need to divide the result to get a better approximation
        totalMarkerCount = adjustElementCount(totalMarkerCount, timeIntervalInfo.timeIntervalUnits);
        const { elementCount } = await getTotalElementCount({
            chartConfig,
            queryObject,
            queryConfig,
            behaviorAfterLimit,
            numberMaxOfFeaturesToFetch: uniqueQuery.num,
        });
        // We check a first time if the total number of markers is under the limit
        const numberOfElementsUnderLimit = Il({
            count: totalMarkerCount ?? 0,
            seriesCount: seriesConfig.length,
            chartType: WebChartTypes.LineSeries,
            chartLimits,
        });
        // If the limit is not exceeded or if we want to render up to the limit, we continue to fetching the data
        if (numberOfElementsUnderLimit) {
            data =
                binnedServerData?.data ??
                    (await processUniqueQueryResults({
                        queryObject,
                        uniqueQuery,
                        chartConfig,
                        mapToStatField,
                        elementCount,
                        abortKey,
                        showMean,
                        chartLimits,
                        isTimeBinningSeries: true,
                        usePopupTemplateFieldsInfo,
                    }));
            // Storing the pre-binned data before re-binning it
            fetchResult.binnedServerData = {
                data: cloneDeep(data),
                timeBinningStats,
            };
            // Starting the client-side binning
            data = await processTimeBinningData({
                queryObject,
                queryConfig,
                data,
                x,
                seriesConfig,
                dateRange: timeBinningStats.dateRange,
                timeIntervalInfo,
                chartRenderer,
            });
            // We splice the data to keep only a subset of the bins, when chart's limit option is set to `RenderUpToTheLimit`
            // See https://devtopia.esri.com/WebGIS/arcgis-charts/issues/5126
            if (behaviorAfterLimit === We.RenderUpToTheLimit) {
                const numberMaxOfFeaturesToFetch = getMaximumNumberOfFeaturesToFetch(chartConfig, options?.chartLimits);
                if (numberMaxOfFeaturesToFetch !== undefined) {
                    data.splice(numberMaxOfFeaturesToFetch);
                }
            }
        }
        else {
            fetchResult.valid = false;
            fetchResult.invalidType = $c.LineChartExceedsLimit;
        }
        fetchResult.data = {
            dataItems: data,
            timeIntervalInfo,
        };
        fetchResult.count = totalMarkerCount;
    }
    return fetchResult;
}
/**
 * Fetching selection data for multiple types of chart.
 * This function is a subset of `fetchFinishedGenericChartData` and was created to avoid bringing too much
 * complexity to it. They need to evolve together if the data fetching pattern changes.
 * @param props
 */
async function fetchFinishedGenericChartSelectionData(props) {
    const { chartConfig, queryConfig, queryObject, abortKey, options } = props;
    const showMean = getShowMean(chartConfig);
    const { setTimeBinningInfoWhenNotProvided, chartLimits, usePopupTemplateFieldsInfo } = options ?? {};
    const fetchResult = { valid: true };
    if (queryObject !== undefined) {
        const seriesConfig = chartConfig.series;
        // TODO: CT: if time binning applied to combo chart, may need to revisit
        const isTimeBinningSeries = is({
            seriesConfig: seriesConfig[0],
            xAxisValueFormatType: getXAxisValueFormat(chartConfig),
            setTimeBinningInfoWhenNotProvided,
        });
        const { uniqueQuery, mapToStatField } = buildUniqueQuery({
            chartConfig,
            queryObject,
            queryConfig,
            setTimeBinningInfoWhenNotProvided,
            fetchFullBoxPlotData: !showMean,
            options,
        });
        let data = await processUniqueQueryResults({
            queryObject,
            uniqueQuery,
            elementCount: 1, // this will skip the query counting the number of features, not needed for selection
            chartConfig,
            mapToStatField,
            isTimeBinningSeries,
            showMean,
            chartLimits,
            abortKey,
            usePopupTemplateFieldsInfo,
        });
        // additional data formatting for the box plot
        if (fl(chartConfig.series) === WebChartTypes.BoxPlotSeries) {
            data = processDataForBoxPlot({
                chartConfig: chartConfig,
                data,
                calculateZScore: false,
            });
        }
        fetchResult.data = { dataItems: data };
    }
    return fetchResult;
}
/**
 * Fetching selection data for box plot.
 * @param props.chartConfig The chart config
 * @param props.queryConfig The query config
 * @param props.queryObject The query object
 * @param props.options The runtime chart options
 * @param props.errorStrings The t9n error strings
 * @param props.abortKey The abort key to cancel queries
 */
async function fetchFinishedBoxPlotSelectionData(props) {
    const { chartConfig, queryConfig, queryObject, abortKey, options, errorStrings } = props;
    const showMean = "showMean" in chartConfig ? chartConfig.showMean : false;
    const fetchResult = await fetchFinishedBoxPlotData({
        queryObject,
        chartConfig,
        queryConfig,
        options,
        errorStrings,
        abortKey,
    });
    // From the data fetched by the function for the selection we will only keep the data items (see call to `extractSelectionDataItems()` in `fetchSelectionData()`),
    // so merging the mean lines data with the data items ensures they will be extracted and used to match the selection data with the data items
    if (showMean &&
        fetchResult.data &&
        "dataItems" in fetchResult.data &&
        "meanLines" in fetchResult.data &&
        fetchResult.data.meanLines) {
        fetchResult.data.dataItems = [...fetchResult.data.dataItems, ...fetchResult.data.meanLines];
    }
    return fetchResult;
}

/**
 * Indicates whether the data context is associated to a slice group.
 * @param dataContext The data context from a slice or label
 */
function isElementFromGroupOfSlices(dataContext) {
    // We use the property `pieChartSpecialSlicesId.defaultGroupOfSlicesId` to detect the slice group. It is added by the function `updatePieChartGroupOfSlices()``
    return dataContext?.[Zn.defaultGroupOfSlicesId] === true;
}
/**
 * Indicates whether the pie chart data changed after excluding the data item associated to the
 * grouped slice.
 * @param oldData The former chart's data
 * @param newData The new chart's data
 */
function pieChartDataChanged(oldData, newData) {
    // excluding the group slice data item that will always be in the old data but not necessarily the new one
    const oldDataWithoutGroupSlice = oldData.filter((dataItem) => !isElementFromGroupOfSlices(dataItem));
    return !isEqual(oldDataWithoutGroupSlice, newData);
}
/**
 * Rebuilds the fetched data from the current chart's data that might have been modified to regroup slices
 * under a group of slices.
 * @param chartData The chart's data
 * @param chartConfig The chart's config
 */
function rebuildPieChartFetchedData(chartData, chartConfig) {
    // rebuilding the list of data items from the non-grouped slices and the group of slices
    let data = chartData.reduce((accumulator, dataItem) => {
        // if the current item is a group of slices
        if (dataItem[Zn.defaultGroupOfSlicesId] === true) {
            const groupedSlices = dataItem[ChartDefaults.pieChart.technicalFieldGroupedSlices];
            if (groupedSlices !== undefined) {
                // we fetch the grouped slices
                groupedSlices.forEach((groupedSlice) => {
                    accumulator.push(groupedSlice);
                });
            }
        }
        else {
            accumulator.push(dataItem);
        }
        return accumulator;
    }, []);
    // sorting the data
    sortFetchedData({
        arrayToSort: data,
        chartConfig,
    });
    // removing the unnecessary properties
    data =
        sanitizeData({
            data: { dataItems: data },
            seriesConfig: chartConfig.series,
        })?.dataItems ?? [];
    return data;
}

/**
 * Truncates a string to a given character limit and adds an ellipsis at the end.
 * @param props.stringToTruncate The string to truncate
 * @param props.characterLimit The character limit to truncate the string to
 * @param props.ellipsis The ellipsis to add at the end of the truncated string
 */
function truncateWithEllipsis(props) {
    const { stringToTruncate, characterLimit, ellipsis = ChartDefaults.chartEllipsis } = props;
    let truncatedString = stringToTruncate;
    if (typeof characterLimit === "number" &&
        Number.isFinite(characterLimit) &&
        characterLimit > 0 &&
        characterLimit < stringToTruncate.length) {
        // truncating the input
        truncatedString = stringToTruncate.slice(0, characterLimit);
        // adding the ellipsis
        truncatedString = `${truncatedString}${ellipsis}`;
    }
    return truncatedString;
}
/**
 * Returns a character string with "strong direction" based on the locale's `rtl` value. This is useful
 * for breaking an RTL string at the character predictably.
 * The input character is defaulted to a colon (":") if none is provided.
 * See https://www.w3.org/International/articles/inline-bidi-markup/uba-basics for details.
 * More details on \u200E: https://codepoints.net/U+200E
 * More details on \u200F: https://codepoints.net/U+200F
 * @param props.isRTL The RTL value
 * @param props.character The character to add the strong direction to
 */
function getDirectionallyStrongCharacter(isRTL, character = ":") {
    const unicodeStrongLTR = "\u200E";
    const unicodeStrongRTL = "\u200F";
    return !isRTL ? `${unicodeStrongLTR}${character}` : `${unicodeStrongRTL}${character}`;
}
/**
 * Generates a function truncating a label according to the limit passed as input. If the limit is undefined,
 * null or invalid, the original label is returned.
 * Additionally an ellipsis is added to the end of the truncated label.
 * @param characterLimit The number of characters to truncate the label to
 */
function generateTruncationCallback(characterLimit) {
    let callback = (value) => value;
    callback = (value) => {
        let output = typeof value !== "string" ? value?.toString() : value;
        if (!Ol(output) && output !== ChartDefaults.htmlEmptyContent) {
            output = truncateWithEllipsis({
                stringToTruncate: output,
                characterLimit,
            });
        }
        return output;
    };
    return callback;
}
/**
 * Escape the brackets (i.e. [, ], {, } ) contained in a string by doubling them,
 * as per amCharts documentation: https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Escaping
 * @param value The value containing the brackets to escape
 */
function escapeBrackets(value) {
    const regexSquareOpenBracketsObj = /[[]/gu;
    const regexSquareCloseBracketsObj = /[\]]/gu;
    const regexCurlyOpenBracketsObj = /[{]/gu;
    const regexCurlyCloseBracketsObj = /[}]/gu;
    const regexApostropheObj = /[']/gu;
    value = value.replace(regexSquareOpenBracketsObj, "[[");
    value = value.replace(regexSquareCloseBracketsObj, "]]");
    value = value.replace(regexCurlyOpenBracketsObj, "{{");
    value = value.replace(regexCurlyCloseBracketsObj, "}}");
    value = value.replace(regexApostropheObj, "''");
    return value;
}
/**
 * Generate a `CSS` styling string displaying the `font-style` property
 * @param fontStyle The font style
 * @param format Describes the expected output format
 */
function mapFontStyle(fontStyle, format) {
    let cssString = "";
    if (fontStyle !== undefined) {
        // amCharts v4 and v5 handle the attribute name differently
        // See https://www.amcharts.com/docs/v5/concepts/formatters/text-styling/#Available_style_codes
        const attributeName = format === "amChartsV5" ? "fontStyle" : "font-style";
        cssString = `${attributeName}:${fontStyle};`;
    }
    return cssString;
}
/**
 * Map ITextSymbol's `kerning` property to letter-spacing
 * See MDN's SVG [letter-kerning](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/letter-spacing)
 * @param kerning Whether to enable kerning
 * @param format Describes the expected output format
 */
function mapKerning(kerning, format) {
    let cssString = "";
    if (kerning === true) {
        // amCharts v4 and v5 handle the attribute name differently
        // See https://www.amcharts.com/docs/v5/concepts/formatters/text-styling/#Available_style_codes
        const attributeName = format === "amChartsV5" ? "letterSpacing" : "letter-spacing";
        cssString = `${attributeName}:1px;`;
    }
    return cssString;
}
/**
 * Attaches inline css styling to a string.
 * The output format depends on the props.type:
 *   - if "html": <p style="...">text</p>"
 *   - if "amCharts" (default type): [...]text[/]"
 * @param props.textSymbol The symbol containing the font, kerning and text
 * @param props.placeholderString A string used over the textSymbol.text if provided
 * @param props.format Describes the expected output format
 * @param props.axisLabelsBehavior The behavior of the axis labels
 * @param props.defaults The default label properties to fetch the wrap and maxWidth values
 */
function attachInlineCSS(props) {
    const { textSymbol, placeholderString, format, axisLabelsBehavior, defaults } = props;
    const fontStyle = mapFontStyle(textSymbol?.font?.style, format);
    const kerning = mapKerning(textSymbol?.kerning, format);
    let text = placeholderString ?? textSymbol?.text ?? "";
    // adding the inline css following the requested format
    if (format === "html") {
        // if the wrap option is on and a max width is not provided, we use a default value and translate it to an inline css
        let { wrap, maxWidth } = defaults ?? {};
        if (axisLabelsBehavior === WebChartLabelBehavior.Wrap) {
            wrap = true;
            maxWidth = maxWidth ?? ChartDefaults.xAxisLabelMaxWidth;
        }
        const wrapInline = wrap === true && Number.isFinite(maxWidth) ? `max-width: ${maxWidth}px; word-break: break-word;` : "";
        text = `<p style="margin:0;${fontStyle}${kerning}${wrapInline}">${text}</p>`;
    }
    else {
        // we escape the brackets to avoid the text in between them to be hidden
        text = escapeBrackets(text);
        if (fontStyle !== "" || kerning !== "") {
            text = `[${fontStyle}${kerning}]${text}[/]`;
        }
    }
    return text;
}
/**
 * Transform a string to kebab case.
 * Example:
 * - input: "camelCase" -> output: "camel-case"
 * - input: "uniqueValues" -> output: "unique-values"
 * @param input The input string to transform
 */
function kebabize(input) {
    return !input ? undefined : input.replace(/[A-Z]/gu, (match) => `-${match.toLowerCase()}`);
}

const RendererOrigin = {
    ChartRenderer: 1,
    LayerRenderer: 2,
};

/**
 * Centralizes all the rules indicating whether a chart can use the color match mode.
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object
 */
function isColorMatchAllowed(props) {
    const { chartConfig, queryObject } = props;
    let allowed = false;
    // If the user provides a chart renderer, we consider they want to use the color match mode
    // no matter what so we disable the compatibility rules.
    if (chartConfig.chartRenderer) {
        allowed = true;
    }
    else {
        const { series: seriesConfig } = chartConfig;
        const chartType = fl(seriesConfig);
        const chartSubType = ts(seriesConfig);
        const seriesReference = Yl(chartConfig);
        const isTimeBinningSeries = is({
            seriesConfig: seriesReference,
        });
        const layer = Ds(queryObject);
        const renderer = layer?.renderer;
        const rendererType = renderer?.type;
        switch (rendererType) {
            case RESTRendererType.Simple:
                allowed =
                    chartType === WebChartTypes.HistogramSeries ||
                        chartType === WebChartTypes.ScatterSeries ||
                        chartSubType === ml.BarAndLineMonoField ||
                        chartSubType === ml.BoxPlotMonoField ||
                        chartSubType === ml.BoxPlotMultiFields ||
                        chartSubType === ml.BoxPlotMonoFieldAndCategory ||
                        (chartSubType === ml.BarAndLineNoAggregation && seriesConfig.length === 1 && !isTimeBinningSeries);
                break;
            case RESTRendererType.UniqueValue:
                {
                    const rendererField = renderer?.field;
                    const splitByField = Xl(seriesReference.query?.where);
                    const { x } = seriesReference;
                    allowed =
                        ((chartSubType === ml.BoxPlotMonoFieldAndSplitBy ||
                            chartSubType === ml.BoxPlotMultiFieldsAndSplitBy ||
                            chartSubType === ml.BoxPlotMonoFieldAndCategoryAndSplitBy ||
                            chartSubType === ml.BarAndLineSplitByNoAggregation ||
                            chartSubType === ml.BarAndLineSplitBy) &&
                            rendererField === splitByField) ||
                            ((chartSubType === ml.BoxPlotMonoFieldAndCategory ||
                                chartSubType === ml.PieFromCategory ||
                                chartSubType === ml.BarAndLineMonoField) &&
                                rendererField === x) ||
                            chartSubType === ml.BarAndLineNoAggregation ||
                            chartSubType === ml.PieNoAggregation ||
                            chartType === WebChartTypes.ScatterSeries;
                }
                break;
            case RESTRendererType.PieChart:
                allowed =
                    chartSubType === ml.PieFromFields ||
                        chartSubType === ml.BarAndLineFromFields ||
                        chartSubType === ml.BarAndLineMultiFields ||
                        chartSubType === ml.BarAndLineMonoField ||
                        chartSubType === ml.BoxPlotMonoField ||
                        chartSubType === ml.BoxPlotMultiFields ||
                        chartSubType === ml.BoxPlotMonoFieldAndCategory ||
                        chartSubType === ml.BoxPlotMultiFieldsAndCategory;
                break;
            case RESTRendererType.ClassBreaks:
                // TODO: should we support ClassBreaks for all the non aggregated charts?
                allowed =
                    chartType === WebChartTypes.ScatterSeries ||
                        chartSubType === ml.BarAndLineNoAggregation ||
                        chartSubType === ml.PieNoAggregation;
                break;
        }
    }
    return allowed;
}
/**
 * Returns the renderer type, from either the chart renderer or the layer's.
 * It normalizes the chart renderer type to a RESTRendererType.
 * @param chartRenderer The chart renderer
 * @param renderer The layer's renderer
 */
function getRendererType(chartRenderer, renderer) {
    return kebabize(chartRenderer?.type) ?? renderer?.type;
}
/**
 * Returns the renderer label from the data context if it founds one.
 * @param dataContext The data context to look into
 */
function getDataItemRendererLabel(dataContext) {
    const rendererLabelKey = Object.keys(dataContext).find((key) => key.includes(ChartDefaults.rendererSymbolField)) ?? "";
    return dataContext[rendererLabelKey]?.label;
}
/**
 * Determines whether a renderer symbol is valid.
 * @param rendererSymbol The renderer symbol to validate
 * @returns
 */
function isValidRendererSymbol(rendererSymbol) {
    return (rendererSymbol?.type !== undefined &&
        (rendererSymbol.color !== undefined ||
            rendererSymbol.label !== undefined ||
            rendererSymbol.style !== undefined ||
            rendererSymbol.outline !== undefined));
}
/**
 * Updates a data item by adding a renderer symbol to it, after eventually tweaking the color opacity.
 * @param props.symbolField The field name to use to store the symbol
 * @param props.dataItem The data item to complete
 * @param props.rendererSymbol The symbol to store within the data item
 * @param props.rendererOrigin Whether the renderer comes from the chart renderer or the layer's
 * @returns Whether the color match was applied to the data item.
 */
function updateDataItemWithRendererSymbol(props) {
    const { symbolField, dataItem, rendererSymbol, rendererOrigin } = props;
    let colorMatchApplied = false;
    if (!isValidRendererSymbol(rendererSymbol)) {
        delete dataItem[symbolField];
    }
    else {
        const modifiedRendererSymbol = { ...rendererSymbol };
        if (modifiedRendererSymbol.color !== undefined && rendererOrigin === RendererOrigin.LayerRenderer) {
            // using a reduced opacity when requested
            modifiedRendererSymbol.color[3] = Hn * 255;
        }
        // We make a distinction between the renderer symbol coming from the chart renderer and the one coming
        // from the layer's renderer.
        // This is mainly due to Map Viewer not having a requirement to support the style, outline and label from
        // the renderer.
        // => When the renderer comes from the layer, we delete everything but the color.
        if (rendererOrigin === RendererOrigin.LayerRenderer) {
            delete modifiedRendererSymbol.style;
            delete modifiedRendererSymbol.outline;
            delete modifiedRendererSymbol.label;
        }
        // adding the renderer symbol to the data item
        dataItem[symbolField] = modifiedRendererSymbol;
        // sett the flag
        colorMatchApplied = true;
    }
    return colorMatchApplied;
}
/**
 * Computes the renderer symbol of a data item from a layer or chart renderer, specifically for the pie chart renderer.
 * @param props.renderer The renderer
 * @param props.seriesConfig The array of series config
 * @param props.chartSubType The chart sub type
 * @param props.dataItem The data item to match with the renderer info
 * @param props.rendererOrigin The origin of the renderer
 * @returns An object containing the renderer symbol and whether the color match was applied to the data item.
 */
function computePieChartRendererSymbol(props) {
    const { renderer, seriesConfig, chartSubType, dataItem, rendererOrigin } = props;
    let rendererSymbol;
    let colorMatchApplied = false;
    const chartType = fl(seriesConfig);
    // getting the outline defined on the renderer
    const { outline: rendererOutline, attributes } = renderer;
    // we don't use getDisplayedColor() for a pie renderer as the rules are not applying in the same way
    attributes.forEach((attribute) => {
        let { field } = attribute;
        const { color, label } = attribute;
        const rendererColor = color && "toRgba" in color ? color.toRgba() : color;
        let isDataItemCompatible = false;
        let useLabel = true;
        switch (chartType) {
            case WebChartTypes.BarSeries:
            case WebChartTypes.LineSeries:
            case WebChartTypes.ComboLineAndBarSeries:
            case WebChartTypes.RadarSeries:
                if (chartSubType !== ml.BarAndLineFromFields) {
                    const matchingSeries = seriesConfig.find((s) => s.query?.outStatistics?.[0]?.onStatisticField === field);
                    if (matchingSeries !== undefined && "y" in matchingSeries) {
                        field = [matchingSeries.y].flat()[0];
                    }
                    else {
                        field = "";
                    }
                }
                isDataItemCompatible =
                    chartSubType !== ml.BarAndLineFromFields || field === dataItem[ChartDefaults.originalCategoryValue];
                break;
            case WebChartTypes.PieSeries:
                isDataItemCompatible =
                    chartSubType === ml.PieFromFields && field === dataItem[ChartDefaults.originalCategoryValue];
                break;
            case WebChartTypes.BoxPlotSeries:
                if (chartSubType === ml.BoxPlotMonoField ||
                    chartSubType === ml.BoxPlotMonoFieldAndCategory) {
                    isDataItemCompatible = field === seriesConfig[0].y;
                }
                else if (field &&
                    (chartSubType === ml.BoxPlotMultiFields ||
                        chartSubType === ml.BoxPlotMultiFieldsAndCategory)) {
                    const numericFields = seriesConfig.map((s) => s.y).flat();
                    isDataItemCompatible = numericFields.includes(field);
                }
                // for box plot we don't want to use the label
                useLabel = false;
                break;
        }
        if (isDataItemCompatible && rendererColor) {
            // building a simple symbol based on the renderer color
            rendererSymbol = {
                type: RESTSymbolType.SMS,
                color: rendererColor,
                label: useLabel && label ? label : undefined,
            };
            // adding the global renderer outline if defined
            if (rendererOutline !== null && rendererOutline !== undefined) {
                rendererSymbol.outline = rendererOutline;
            }
            const colorApplied = updateDataItemWithRendererSymbol({
                dataItem,
                symbolField: chartSubType === ml.BarAndLineFromFields || chartSubType === ml.PieFromFields
                    ? ChartDefaults.rendererSymbolField
                    : `${ChartDefaults.rendererSymbolField}_${field}`,
                rendererSymbol,
                rendererOrigin,
            });
            // if the color was applied to the data item, we set the flag to true
            if (colorApplied) {
                colorMatchApplied = true;
            }
        }
    });
    return { rendererSymbol, colorMatchApplied };
}
/**
 * Returns the suffix symbol key(s) to use to retrieve the renderer symbol from a data item,
 * base on the chart sub type and the renderer type.
 *
 * Any combination of chart sub type and renderer type that is not handled here will return the default symbol key `ChartDefaults.rendererSymbolField`.
 *
 * The caller should handle the case where the return is an array of strings to match with the dataItem
 * to find the correct symbol suffix key.  At this time, this only happens for BoxPlot series with PieChart renderer.
 *
 * @param props.seriesConfig The series config
 * @param props.chartSubType The chart sub type
 * @param props.rendererType The renderer type using the kebab case
 * @returns The suffix key(s) or the default color key `ChartDefaults.rendererSymbolField` to use to retrieve the renderer color from a data item.
 */
function getRendererSymbolSuffixKey(props) {
    const { seriesConfig, chartSubType, rendererType } = props;
    const defaultColorKey = ChartDefaults.rendererSymbolField;
    let symbolKey = defaultColorKey;
    if (rendererType === RESTRendererType.UniqueValue) {
        if (Fl(chartSubType)) {
            const splitByValue = Ql({
                where: seriesConfig.query?.where,
            });
            // using a different key for null to make a distinction with "null"
            if (splitByValue === null) {
                symbolKey = ChartDefaults.nullValue;
            }
            else if (chartSubType === ml.BarAndLineSplitBy && typeof seriesConfig.y === "string") {
                symbolKey = seriesConfig.y;
            }
            else if (chartSubType === ml.BarAndLineSplitByNoAggregation && typeof seriesConfig.y === "string") {
                symbolKey = `${seriesConfig.y}_${splitByValue}`;
            }
            else {
                symbolKey = `${splitByValue}`;
            }
        }
    }
    else if (rendererType === RESTRendererType.PieChart) {
        switch (chartSubType) {
            case ml.BoxPlotMultiFields:
                symbolKey = Array.isArray(seriesConfig.y) ? seriesConfig.y.flat() : seriesConfig.y;
                break;
            case ml.BarAndLineMonoField:
            case ml.BarAndLineMultiFields:
            case ml.BoxPlotMonoField:
            case ml.BoxPlotMonoFieldAndCategory:
            case ml.BoxPlotMultiFieldsAndCategory:
                symbolKey = seriesConfig.y;
                break;
        }
    }
    return symbolKey;
}
/**
 * Returns the symbol field to retrieve the renderer symbol from a data item.
 *
 * @param props.seriesConfig The series config
 * @param props.chartSubType The chart sub type
 * @param props.rendererType The renderer type
 * @param props.dataItem The data item to retrieve the renderer symbol (only used for BoxPlot series with PieChart renderer)
 * @returns The symbol field to use to retrieve the renderer symbol from a data item.
 */
function getRendererSymbolField(props) {
    const { seriesConfig, chartSubType, rendererType, dataItem } = props;
    let symbolField = getRendererSymbolSuffixKey({
        seriesConfig,
        chartSubType,
        rendererType,
    });
    // for box-plot with PieChart renderer, we need to use data item to determine which field (y) to use
    if (symbolField instanceof Array &&
        seriesConfig.type === WebChartTypes.BoxPlotSeries &&
        rendererType === RESTRendererType.PieChart &&
        dataItem !== undefined) {
        symbolField = symbolField.find((s) => s === dataItem[eo]) ?? symbolField[0];
    }
    // if the symbol field is not the default one, we add it as a suffix to the default symbol field
    symbolField =
        symbolField !== ChartDefaults.rendererSymbolField
            ? `${ChartDefaults.rendererSymbolField}_${symbolField.toString()}`
            : symbolField;
    return symbolField;
}
/**
 * Gets a graphic template to use to compute the renderer color.
 * @param props.chartRenderer The chart renderer
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.rendererJsonUtils The arcgis/core renderer json utils module
 */
async function getGraphicTemplate(props) {
    const { chartRenderer, queryObject, rendererJsonUtils } = props;
    // setting the proper renderer to the layer that will be used by the graphic template
    // we do a copy when adding the chartRenderer to avoid modifying the original layer
    const layerForGraphicTemplate = chartRenderer !== undefined
        ? {
            ...Ds(queryObject),
            renderer: rendererJsonUtils.fromJSON(chartRenderer),
        }
        : Ds(queryObject);
    // the graphic template is initialized with the layer
    // later its attributes will be set to the data item from each chart element to compute their renderer color
    const graphicTemplate = await newGraphic({
        layer: layerForGraphicTemplate,
    });
    return graphicTemplate;
}
/**
 * Computes the renderer symbol of a data item from a layer or chart renderer.
 * @param props.seriesConfig The series config
 * @param props.dataItem The data related to the the feature we want to compute a color for
 * @param props.renderer The renderer definition, from the chartRenderer or the JSON version of the layer's
 * @param props.rendererType The renderer type
 * @param props.chartSubType The chart sub type
 * @param props.splitByField The split by field
 * @param props.supportSymbolUtils The symbol utils module to use to compute the color
 * @param props.graphicTemplate The graphic template to use to compute the color
 * @param props.rendererFieldNames The fields used by the layer's renderer
 * @param props.mapAttributesToSymbol The map to store the computed symbol for a given data item
 * @returns An object containing the renderer symbol and whether the color match was applied to the data item.
 */
async function computeRendererSymbol(props) {
    const { seriesConfig, dataItem, renderer, rendererType, rendererOrigin, chartSubType, splitByField, graphicTemplate, supportSymbolUtils, rendererFieldNames, mapAttributesToSymbol, } = props;
    let rendererSymbol;
    let colorMatchApplied = false;
    // we don't use getDisplayedColor() for a pie renderer as the rules are not applying in the same way
    if (rendererType === RESTRendererType.PieChart) {
        const result = computePieChartRendererSymbol({
            renderer,
            seriesConfig,
            chartSubType,
            dataItem,
            rendererOrigin,
        });
        rendererSymbol = result.rendererSymbol;
        colorMatchApplied = result.colorMatchApplied;
    }
    else if (!isElementFromGroupOfSlices(dataItem)) {
        const { x } = seriesConfig[0];
        // Map to store the data item to use to compute the color. The key is the color field to use to store the color
        const colorFieldToAttributes = new Map();
        if (splitByField && splitByField.trim() !== "") {
            seriesConfig.forEach((currentSeriesConfig) => {
                if (currentSeriesConfig.type === WebChartTypes.BarSeries ||
                    currentSeriesConfig.type === WebChartTypes.LineSeries ||
                    currentSeriesConfig.type === WebChartTypes.BoxPlotSeries ||
                    currentSeriesConfig.type === WebChartTypes.RadarSeries) {
                    const symbolField = getRendererSymbolField({
                        seriesConfig: currentSeriesConfig,
                        chartSubType,
                        rendererType,
                        dataItem,
                    });
                    const splitByValue = Ql({
                        where: currentSeriesConfig.query?.where,
                        normalize: true,
                        keepSurroundingQuotes: false,
                        escape: false,
                    });
                    colorFieldToAttributes.set(symbolField, {
                        ...dataItem,
                        [splitByField]: splitByValue,
                    });
                }
            });
        }
        else {
            // For the other types of chart we use the default color key and data item.
            // Fetching the original x value to cross it with the renderer information. This avoids false negatives when the fields have aliases for instance.
            colorFieldToAttributes.set(ChartDefaults.rendererSymbolField, {
                ...dataItem,
                [x]: getOriginalXValueFromContext(dataItem),
            });
        }
        // Using a try/catch to prevent failures from the external getDisplayedSymbol() and getLegendLabel() functions
        try {
            const colorFieldToAttributesArray = Array.from(colorFieldToAttributes.entries());
            const graphic = graphicTemplate.clone();
            // going through the list of colorField => attributes to compute the color
            for (let i = 0; i < colorFieldToAttributesArray.length; i += 1) {
                const [symbolField, attributes] = colorFieldToAttributesArray[i];
                // We replace the `null` values by an encoded string. This needs to work in sync with the `replaceChartRendererNullValue()` function.
                handleNullValuesForRenderer({
                    mode: "encode",
                    x,
                    splitByField,
                    attributes,
                });
                // if the renderer field names are provided we filter out the attributes that are not in the list
                if (rendererFieldNames && rendererFieldNames.length > 0) {
                    Object.keys(attributes).forEach((key) => {
                        if (!rendererFieldNames.includes(key)) {
                            delete attributes[key];
                        }
                    });
                }
                graphic.attributes = attributes;
                // if the symbol has already been computed for the same attributes, we reuse it
                if (mapAttributesToSymbol?.has(JSON.stringify(attributes))) {
                    rendererSymbol = mapAttributesToSymbol.get(JSON.stringify(attributes));
                }
                else {
                    rendererSymbol = (await supportSymbolUtils.getDisplayedSymbol(graphic))?.toJSON();
                    if (rendererSymbol !== undefined && rendererSymbol !== null) {
                        // If ever the 'color' property is missing from the symbol, we use `getDisplayedColor()` as a backup.
                        // It can happen for instance when the symbol is a `CIMSymbolReference`. Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7168
                        if (rendererSymbol.color === undefined) {
                            rendererSymbol.color = (await supportSymbolUtils.getDisplayedColor(graphic))?.toJSON();
                        }
                        // fetching the chart renderer label
                        // eslint-disable-next-line no-await-in-loop
                        const rendererLabel = await supportSymbolUtils.getLegendLabel(graphic);
                        // Adding the label to the symbol
                        if (rendererLabel !== null && rendererLabel !== undefined && rendererLabel !== "") {
                            rendererSymbol.label = rendererLabel;
                        }
                    }
                    // caching the result for the given attributes
                    mapAttributesToSymbol?.set(JSON.stringify(attributes), rendererSymbol);
                }
                // We restore the `null` values encoded above
                handleNullValuesForRenderer({
                    mode: "revert",
                    x,
                    splitByField,
                    attributes: dataItem,
                });
                // Note: this call needs to be outside of the condition testing whether the renderer symbol is defined.
                // When it is undefined we need to update the data item to remove a potential existing symbol.
                // See https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7004
                const colorApplied = updateDataItemWithRendererSymbol({
                    dataItem,
                    symbolField,
                    rendererSymbol,
                    rendererOrigin,
                });
                if (colorApplied) {
                    colorMatchApplied = true;
                }
            }
        }
        catch (e) {
            //  continue regardless of the error
        }
    }
    return { rendererSymbol, colorMatchApplied };
}
/**
 * Values passed as `null` are ignored by the @arcgis/core functions `getDisplayedSymbol()` & `getDisplayedColor()`
 * To bypass it we transcode the `null` value to a string beforehand.
 * `computeRendererSymbol()` applies the same transformation on the data item itself to ensure the color is correctly computed.
 * We only apply this transformation to a chart renderer (not layer renderer).
 * Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7770
 * @param chartRenderer The chart renderer
 */
function replaceChartRendererNullValue(chartRenderer) {
    const modifiedChartRenderer = chartRenderer;
    if (chartRenderer?.type === "uniqueValue") {
        chartRenderer.uniqueValueInfos = chartRenderer.uniqueValueInfos.map((uniqueValueInfo) => {
            const newValue = uniqueValueInfo.value === null ? ChartDefaults.nullValue : uniqueValueInfo.value;
            return { ...uniqueValueInfo, value: newValue };
        });
    }
    return modifiedChartRenderer;
}
/**
 * Encodes `null` by `ChartDefaults.nullValue` or reverts it.
 * @param props.mode Encode or revert the null values
 * @param props.attributes The attributes to update
 * @param props.splitByField The split by field
 * @param props.x The x field
 */
function handleNullValuesForRenderer(props) {
    const { splitByField, attributes, x, mode } = props;
    // encoding or reverting the null values for the x and splitByField
    [x, splitByField ?? ""].forEach((field) => {
        if (attributes[field] === (mode === "encode" ? null : ChartDefaults.nullValue)) {
            attributes[field] = mode === "encode" ? ChartDefaults.nullValue : null;
        }
    });
}
/**
 * Completes a data set with renderer colors.
 * @param props.data The data set to complete
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.allowColorMatch Whether the color match is allowed
 * @returns An object containing the data items that may be filled with the renderer symbol and whether the color match was applied to any of the data items.
 */
async function completeDataWithRendererSymbol(props) {
    const { data, queryObject, chartConfig, allowColorMatch } = props;
    let colorMatchApplied = false;
    // Only when the color match is allowed, we then compute the renderer symbol for each data item.
    if (allowColorMatch) {
        const { series: seriesConfig, chartRenderer } = chartConfig;
        const rendererJsonUtils = await importRenderersSupportJsonUtils();
        // Handling the null values. This is done only for the chart renderer.
        const modifiedChartRenderer = replaceChartRendererNullValue(chartRenderer);
        const rendererOrigin = modifiedChartRenderer ? RendererOrigin.ChartRenderer : RendererOrigin.LayerRenderer;
        const layer = queryObject ? Ds(queryObject) : undefined;
        const renderer = modifiedChartRenderer ?? layer?.renderer;
        // Computing the renderer type beforehand. It's important to do so as the chartRenderer.type and the layer.renderer.type
        // don't share the type (the former uses camel case, the latter kebab case)
        const rendererType = getRendererType(modifiedChartRenderer, layer?.renderer);
        // get a graphic template
        const graphicTemplate = await getGraphicTemplate({
            chartRenderer,
            queryObject,
            rendererJsonUtils,
        });
        const supportSymbolUtils = await importSymbolsSupportSymbolUtils();
        const chartSubType = ts(seriesConfig);
        const seriesReference = Yl(chartConfig);
        const splitByField = Xl(seriesReference.query?.where);
        // object mapping data attributes to a renderer symbol
        let mapAttributesToSymbol;
        // the fields used by the renderer
        let rendererFieldNames = [];
        // we pull the renderer fields and initialize the mapAttributesToSymbol
        // we don't it for a chartRenderer as for now we can't reliably identify the fields used by the renderer
        if (!chartRenderer && queryObject) {
            const layer = Ms(queryObject);
            rendererFieldNames = await jc(layer);
            mapAttributesToSymbol = new Map();
        }
        // going through each data item and adding the renderer color (when a color is found)
        for (let i = 0; i < data.length; i += 1) {
            const dataItem = data[i];
            const results = await computeRendererSymbol({
                seriesConfig: chartConfig.series,
                dataItem,
                renderer,
                rendererType,
                rendererOrigin,
                chartSubType,
                splitByField,
                graphicTemplate,
                supportSymbolUtils,
                mapAttributesToSymbol,
                rendererFieldNames,
            });
            colorMatchApplied = colorMatchApplied || results.colorMatchApplied;
        }
    }
    return { dataItems: data, colorMatchApplied };
}
/**
 * Gets the renderer color stored in the data item, when in color match mode.
 * @param props.dataItem The dataItem to retrieve the renderer color
 * @param props.seriesConfig The series config
 * @param props.chartSubType The ChartSubType
 * @param props.colorMatch Whether the color match mode is enabled
 * @param props.rendererType The type of renderer
 * @returns
 */
function getRendererElementSymbol(props) {
    const { dataItem, seriesConfig, chartSubType, colorMatch, rendererType } = props;
    let rendererSymbol;
    if (colorMatch && dataItem !== undefined) {
        const symbolColorKey = getRendererSymbolField({
            seriesConfig: seriesConfig,
            chartSubType,
            rendererType,
            dataItem,
        });
        rendererSymbol = dataItem[symbolColorKey];
    }
    return rendererSymbol;
}
/**
 * Merges the styling information coming from a renderer symbol with a series symbol.
 * @param props.seriesSymbol The series symbol
 * @param props.rendererSymbol The renderer symbol
 * @param props.colorIndex A color index used when using the color ramp
 */
function mergeRendererSymbolWithSeriesSymbol(props) {
    const { seriesSymbol, rendererSymbol, colorIndex } = props;
    const updatedSymbol = {
        ...seriesSymbol,
        color: rendererSymbol?.color ?? seriesSymbol.color ?? ro({ colorIndex, opacity: Hn }),
    };
    // assigning the renderer style if the symbol is from the same type (Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/7346)
    if (rendererSymbol?.type === seriesSymbol.type && rendererSymbol.style !== undefined) {
        updatedSymbol.style = rendererSymbol.style;
    }
    // updating the outline for the marker and fill symbol
    if (updatedSymbol.type !== RESTSymbolType.SLS) {
        updatedSymbol.outline = {
            type: RESTSymbolType.SLS,
            style: rendererSymbol?.outline?.style ?? updatedSymbol.outline?.style,
            width: rendererSymbol?.outline?.width ?? updatedSymbol.outline?.width,
            color: rendererSymbol?.outline?.color ?? updatedSymbol.outline?.color ?? rendererSymbol?.color,
        };
    }
    return updatedSymbol;
}

/**
 * Returns true if dataTransformationType changed
 * @param oldSeries
 * @param newSeries
 */
function hasTransformationTypeChanged(oldSeries, newSeries) {
    // Comparing old and new values. Considering only one series (index 0) for now.
    return oldSeries[0].dataTransformationType !== newSeries[0].dataTransformationType;
}
/**
 * Returns true if a specific prop for Histogram requiring a data update has been changed
 * @param oldSeries
 * @param newSeries
 */
function hasBinCountChanged(oldSeries, newSeries) {
    // Comparing old and new values. Considering only one series (index 0) for now.
    return oldSeries[0].binCount !== newSeries[0].binCount;
}
/**
 * When a chart is updated an existing series type can be changed (bar series => line series,
 * histogram series => pie series...). Some changes are allowed, others not.
 * This function defines which changes are allowed.
 * @param oldConfig The previous config
 * @param newConfig The new config
 */
function isSeriesTypeChangeAllowed(oldConfig, newConfig) {
    let allowed = true;
    const oldChartType = fl(oldConfig?.series);
    const newChartType = fl(newConfig?.series);
    // if the types are the same we allow the change
    // otherwise we check whether the change is allowed
    if (oldChartType !== newChartType) {
        // if the new chart type is different, we allow only switching from:
        // - combo to bar or line
        // - bar or line to combo
        // - bar to line
        // - line to bar
        allowed =
            (oldChartType === WebChartTypes.ComboLineAndBarSeries &&
                (newChartType === WebChartTypes.BarSeries || newChartType === WebChartTypes.LineSeries)) ||
                (newChartType === WebChartTypes.ComboLineAndBarSeries &&
                    (oldChartType === WebChartTypes.BarSeries || oldChartType === WebChartTypes.LineSeries)) ||
                (oldChartType === WebChartTypes.BarSeries && newChartType === WebChartTypes.LineSeries) ||
                (oldChartType === WebChartTypes.LineSeries && newChartType === WebChartTypes.BarSeries);
    }
    return allowed;
}
/**
 * Indicates whether the time interval information is complete (units and size are set).
 * @param timeIntervalUnits The time interval unit
 * @param timeIntervalSize The time interval size
 */
function isTimeIntervalInfoComplete(timeIntervalUnits, timeIntervalSize) {
    return timeIntervalUnits !== undefined && timeIntervalSize !== undefined && timeIntervalSize > 0;
}
/**
 * Fetches the series color list.
 * The function support only bar and line chart at the moment.
 * It the series have each a unique color, it will make a list of them, whether they come from the renderer
 * or the series config or the color ramp.
 * @param props.chartConfig The chart's config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartData The chart's data containing the renderer colors
 */
function getSeriesColorList(props) {
    const { chartConfig, queryObject, chartData } = props;
    let colorList = [];
    const chartSubType = ts(chartConfig.series);
    const colorMatch = hl(chartConfig);
    const layer = Ds(queryObject);
    const renderer = chartConfig.chartRenderer ?? layer?.renderer?.toJSON();
    // for each series we look into the series symbol, the renderer color and the color ramp
    colorList = chartConfig.series
        .map((currentSeries, seriesIndex) => {
        const seriesType = fl([currentSeries]);
        let seriesUniqueColor;
        if (seriesType === WebChartTypes.BarSeries ||
            seriesType === WebChartTypes.LineSeries ||
            seriesType === WebChartTypes.RadarSeries) {
            // first we get the series symbol color
            if (currentSeries.type === WebChartTypes.BarSeries) {
                seriesUniqueColor = currentSeries.fillSymbol?.color;
            }
            else if (currentSeries.type === WebChartTypes.RadarSeries ||
                currentSeries.type === WebChartTypes.LineSeries) {
                seriesUniqueColor = currentSeries.lineSymbol?.color;
            }
            // we override it with the renderer color if it exists
            if (colorMatch) {
                // look into chartData
                seriesUniqueColor = getRendererElementSymbol({
                    dataItem: chartData[0],
                    seriesConfig: currentSeries,
                    chartSubType,
                    colorMatch,
                    rendererType: renderer?.type,
                })?.color;
            }
            else if (seriesUniqueColor === undefined) {
                // last case, we pick a color from the ramp
                seriesUniqueColor = ro({ colorIndex: seriesIndex });
            }
        }
        return seriesUniqueColor;
    })
        .filter((color) => color !== undefined);
    return colorList;
}
/**
 * Indicates whether the chart is aggregated or not.
 * @param chartSubType The chart sub type
 */
function isAggregatedChart(chartSubType) {
    return (chartSubType !== ml.PieNoAggregation &&
        chartSubType !== ml.BarAndLineNoAggregation &&
        chartSubType !== ml.BarAndLineSplitByNoAggregation);
}
/**
 * Returns the `showMean` property from the chart config and `false` if not found
 * @param chartConfig The chart config
 */
function getShowMean(chartConfig) {
    return chartConfig && "showMean" in chartConfig && typeof chartConfig.showMean === "boolean"
        ? chartConfig.showMean
        : false;
}
/**
 * Returns a common string used by the series screen reader.
 * @returns The screen reader text for XY chart
 */
function getXYChartScreenReaderText() {
    return "{name} {categoryX} {categoryY} {dateY} {valueX} {dateX} {valueY}";
}

/**
 * Generates an id for a slice from a non aggregated slice.
 * it will generate `arcgis-charts-slice-id-<object id>` or `arcgis-charts-slice-id-<slice index>`
 * @param props.dataContext The slice's data context to access the x value
 * @param props.dataIndex The slice's position on the chart
 * @param props.objectIdField The field used as an object Id by the layer (when applicable)
 */
function generateNonAggregatedSliceId(props) {
    const { dataContext, dataIndex, objectIdField } = props;
    return `${Zn.sliceIdPrefix}-${dataContext[objectIdField ?? ""]?.toString() ?? dataIndex}`;
}
/**
 * Return the slice information from the series config based on sliceId from the slice's data context.
 * @param slices The slices config
 * @param sliceId The slice id to match the
 */
function retrievePieSliceInfoFromConfig(slices, sliceId) {
    let sliceFromConfig;
    if (slices !== undefined && sliceId !== undefined) {
        sliceFromConfig = slices.find((sliceConfig) => sliceConfig.sliceId === sliceId);
    }
    return sliceFromConfig;
}
/**
 * Generates an id for the slice, based on the type of query.
 * For an aggregated pie chart by field it will be the field name
 * For an aggregated pie chart by category it will be the category name; if the category field is a subtype field, its id will be used for sliceId
 * For a non aggregated pie chart it will generate `arcgis-charts-slice-id-<object id>` or `arcgis-charts-slice-id-<slice index>`
 * @param props.dataContext The slice's data context to access the x value
 * @param props.isNonAggregatedChart To know whether the chart is aggregated
 * @param props.x The x field
 * @param props.dataIndex The slice's position on the chart
 * @param props.objectIdField The field used as an object Id by the layer (when applicable)
 * @param props.isPieFromFields Boolean indicating whether the chart is a pie chart from fields
 */
function generateSliceId(props) {
    const { dataContext, isNonAggregatedChart, x, dataIndex, objectIdField, isPieFromFields } = props;
    let sliceId = "";
    // 1: if pie chart by field
    if (isPieFromFields === true) {
        // we use first the original category value, and then the "field" property
        sliceId = (dataContext[ChartDefaults.originalCategoryValue] ?? dataContext[defaultPieFromFieldsName]);
    }
    else if (isNonAggregatedChart) {
        sliceId = generateNonAggregatedSliceId({
            dataContext,
            dataIndex,
            objectIdField,
        });
    }
    else {
        // we use first the original category value, and then the x property.  If category is a subtype field, try to use field id
        sliceId =
            dataContext[ChartDefaults.typeOrDomainIdValue] ??
                dataContext[ChartDefaults.originalCategoryValue];
        // handling special cases
        if (sliceId === "") {
            sliceId = Zn.emptySliceId;
        }
        else if (sliceId === null) {
            sliceId = Zn.nullSliceId;
        }
        sliceId = sliceId ?? dataContext[x];
    }
    if (sliceId === undefined) {
        sliceId = Zn.undefinedSliceId;
    }
    return sliceId.toString();
}
/**
 * Generates the slice label, by considering
 * - a custom label coming from the config (series.slices)
 * - the layer's fields' aliases (in Feature layer data source)
 * - the layer's subtype / domain
 *
 * Stores the original category / field name in a new property so we can still use it later on.
 * Directly modify the label in the provided data context.
 * @param props.dataContext The data context related to the slice
 * @param props.sliceFromConfig The config for the slice
 * @param props.seriesConfig The pie series config
 * @param props.fieldList The layer's field list
 * @param props.isPieFromFields Whether the pie if from fields
 * @param props.isColorMatch Whether the color match is enabled
 * @param props.labelUpdateNeeded Whether the labels were updated
 * @param props.commonStrings The common strings containing the default slice grouping label
 */
function computeSliceLabel(props) {
    const { dataContext, sliceFromConfig, isGroupOfSlices, seriesConfig, fieldList, isPieFromFields, labelUpdateNeeded, colorMatch, commonStrings, } = props;
    const { sliceGrouping } = seriesConfig;
    let { x } = seriesConfig;
    if (isPieFromFields) {
        x = defaultPieFromFieldsName;
    }
    const currentLabel = dataContext[x] ?? dataContext[ChartDefaults.originalCategoryValue];
    const originalLabel = (dataContext[ChartDefaults.originalCategoryValue] ?? currentLabel);
    let newLabel = currentLabel;
    if (labelUpdateNeeded) {
        if (isGroupOfSlices) {
            newLabel =
                sliceGrouping?.label ??
                    sliceGrouping?.originalLabel?.toString() ??
                    commonStrings.pieChart.defaultSliceGroupingLabel;
        }
        else if (colorMatch && dataContext[ChartDefaults.rendererSymbolField]?.label !== undefined) {
            newLabel = dataContext[ChartDefaults.rendererSymbolField].label;
        }
        else if (sliceFromConfig !== undefined || fieldList !== undefined) {
            // if the `slices` from the config is defined or if a field list is provided
            // 1. First, we look for a custom label from the config
            newLabel = sliceFromConfig?.label ?? originalLabel;
            // if this variable is not undefined, it means there is subtype information
            const typeOrDomainIdValue = dataContext[ChartDefaults.typeOrDomainIdValue];
            // 2. If the field is a subtype field and no custom label was provided, we need to use the subtype name instead of subtype id value
            if (typeOrDomainIdValue !== undefined && newLabel?.toString() === typeOrDomainIdValue?.toString()) {
                newLabel = originalLabel;
            }
            else if (newLabel === originalLabel && originalLabel !== undefined && originalLabel !== null) {
                // 3. We look for a field alias if the newLabel is not customized
                newLabel = Tl(fieldList, originalLabel);
            }
        }
        else if (sliceFromConfig === undefined) {
            // if sliceFromConfig is undefined it means the slice has been removed from the slices array
            // in that case we restore its original label
            newLabel = originalLabel;
        }
        // if the label is equal to `ChartDefaults.nullValue` it means its original value is `null`.
        // in that case we convert it to "null"
        if (newLabel === ChartDefaults.nullValue) {
            newLabel = "null";
        }
        // otherwise converting the label into a string when its not null or undefined
        else if (newLabel !== null && newLabel !== undefined) {
            newLabel = newLabel.toString();
        }
    }
    return newLabel;
}
/**
 * Indicates whether an update is necessary on the pie chart slice group
 * @param oldSeries
 * @param newSeries
 */
function isPieChartGroupOfSlicesUpdateNeeded(oldSeries, newSeries) {
    return oldSeries[0]?.sliceGrouping?.percentageThreshold !== newSeries[0]?.sliceGrouping?.percentageThreshold;
}
/**
 * Retrieves the grouped slices data (by updatePieChartGroupOfSlices()).
 * Uses the group of slices data context if provided, or look for it in the pie
 * chart's data.
 * @param props.groupOfSlicesDataContext The group of slices data context
 * @param props.pieChart The pie chart
 */
function getGroupedSlicesDataItem(props) {
    const { groupOfSlicesDataContext, chartData } = props;
    // uses the provided context, or look for it in the charts'data
    const dataContext = groupOfSlicesDataContext ??
        chartData?.find((dataItem) => dataItem[Zn.defaultGroupOfSlicesId] === true);
    const groupOfSlices = dataContext?.[ChartDefaults.pieChart.technicalFieldGroupedSlices];
    return groupOfSlices;
}
/**
 * Returns the symbol associated to a slice.
 * @param props.dataContext The slice's data context
 * @param props.seriesConfig The pie chart series config
 * @param props.pieSlicesSymbols The pre-computed slices symbol
 */
function getSliceSymbol(props) {
    const { dataContext, pieSlicesSymbols, seriesConfig } = props;
    let sliceSymbol = seriesConfig.fillSymbol
        ? { ...seriesConfig.fillSymbol }
        : Lo();
    const isGroupOfSlices = isElementFromGroupOfSlices(dataContext);
    if (isGroupOfSlices) {
        // the group of slices uses a symbol mixing the config one with a default one
        sliceSymbol = {
            ...ChartDefaults.pieChart.sliceGrouping.fillSymbol,
            ...pieSlicesSymbols?.groupOfSlices?.fillSymbol,
        };
    }
    else {
        // the other slices use the config one (defined in the slices[] or at the series root level in that order)
        const sliceId = dataContext[ChartDefaults.pieChart.technicalFieldSliceId];
        const sliceFromConfig = pieSlicesSymbols?.slices?.find((sliceConfig) => sliceConfig.sliceId === sliceId);
        sliceSymbol = cloneDeep(sliceFromConfig?.fillSymbol ?? seriesConfig.fillSymbol ?? Lo());
    }
    return sliceSymbol;
}

/**
 * Determines whether to set the whisker (step line series) with a default color. It is necessary as whiskers from a same series
 * can't use different colors, while their associated candle stick series can.
 * Refer to issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6572
 * @param props.colorMatch mode of color applied to the chart: `single` or `colorMatch`
 * @param props.chartSubType Box plot sub type
 * @param props.queryObject query object for the box plot
 * @param props.chartData data item object extracted from the box plot series element
 */
function shouldUpdateWhiskersWithDefaultColor(props) {
    const { data, colorMatch, chartSubType, rendererType } = props;
    return (data !== undefined &&
        colorMatch &&
        rendererType !== undefined &&
        ((chartSubType === ml.BoxPlotMultiFields &&
            (rendererType === RESTRendererType.UniqueValue || rendererType === RESTRendererType.PieChart)) ||
            (chartSubType === ml.BoxPlotMonoFieldAndCategory && rendererType === RESTRendererType.UniqueValue)) &&
        data.some((dataItem) => Object.keys(dataItem).some((dataItemProp) => dataItemProp.includes(ChartDefaults.rendererSymbolField))));
}

const BoxPlotStepLineSeriesType = {
    Top: "top",
    Bottom: "bottom",
    Median: "median",
    Outliers: "outliers",
};

/**
 * Converts a numeric value to a ratio based on the axis min and max.
 * @param props.value The value to convert
 * @param props.axisMin The axis min bound
 * @param props.axisMax The axis max bound
 */
function convertValueToRatio(props) {
    const { value, axisMin, axisMax } = props;
    let ratio = Number.NaN;
    const axisRange = axisMax - axisMin;
    if (axisRange !== 0) {
        ratio = (value - axisMin) / axisRange;
    }
    return ratio;
}
/**
 * Validates a given labels increment
 * @param value The value to validate
 */
function isValidLabelsIncrement(value) {
    return value !== undefined && value !== null && value !== 0;
}
/**
 * Calculates the labelsIncrement (if not provided) and adjust the axis maximum if needed.
 * It then returns the calculated labelsIncrement, number of intervals with the axis min and max.
 * @param axisConfig the axis config
 */
function getGaugeAxisFactors(axisConfig) {
    const { minimum, maximum, labelsIncrement: configLabelsIncrement, minimumValueConversion, maximumValueConversion, } = axisConfig;
    let newMin = minimum ?? ChartDefaults.gauge.axisMinimum;
    let newMax = maximum ?? ChartDefaults.gauge.axisMaximum;
    // apply conversion to the min and max
    newMin = applyValueConversion(newMin, minimumValueConversion);
    newMax = applyValueConversion(newMax, maximumValueConversion);
    const userProvidedValidLabelsIncrement = isValidLabelsIncrement(configLabelsIncrement);
    // get the labelsIncrement
    let newLabelsIncrement = isValidLabelsIncrement(configLabelsIncrement)
        ? configLabelsIncrement
        : Math.abs(newMax - newMin) / ChartDefaults.gauge.numberOfLabelIntervals;
    // get the number of intervals
    let numberOfIntervals = userProvidedValidLabelsIncrement
        ? Math.round(Math.abs(newMax - newMin) / newLabelsIncrement)
        : ChartDefaults.gauge.numberOfLabelIntervals;
    // when user does not provides labelsIncrement, the chart will be defaulted to have
    // 5 intervals with 6 labels within the axis minimum and maximum;
    // only when user provides labelsIncrement, we may need to adjust the axis maximum
    // and number of intervals to make sure that we honor the supplied labelsIntervals and
    // axis range always include the supplied maximum
    if (userProvidedValidLabelsIncrement) {
        // check whether the number of intervals exceeds the limit
        if (numberOfIntervals > ChartDefaults.gauge.maximumNumberOfLabelIntervals) {
            // if so, reset the labelsIncrement and number of intervals
            newLabelsIncrement = Math.abs(newMax - newMin);
            numberOfIntervals = 1;
        }
        else {
            const testValue = newMin + numberOfIntervals * newLabelsIncrement;
            if (testValue < newMax) {
                numberOfIntervals += 1; // the number of intervals was rounded down previously
                newMax = newMin + numberOfIntervals * newLabelsIncrement;
            }
            else if (testValue > newMax) {
                newMax = testValue;
            }
        }
    }
    return {
        min: newMin,
        max: newMax,
        labelsIncrement: newLabelsIncrement,
        numberOfIntervals,
    };
}
/**
 * When the axis is displayed using the percent format, we need to adjust the guide boundaries
 * to a value relative to the modified axis min max.
 * For instance if a guide start is 150 while axis min is 0 and axis max is 300, it means start
 * is at 50% of the axis. In consequence the bound will be changed to 0.5.
 * @param props.axisConfig The configuration for the axis
 * @param props.axisMin The axis min bound from the config
 * @param props.axisMax The axis max bound from the config
 */
function applyPercentRatioToGuideBoundaries(props) {
    const { axisConfig, axisMin, axisMax } = props;
    if (typeof axisMin === "number" && typeof axisMax === "number") {
        const axisRange = axisMax - axisMin;
        if (axisRange !== 0) {
            // we also modify the guide start and end values
            axisConfig.guides?.forEach((guide) => {
                const { start, end } = guide;
                if (typeof start === "number") {
                    guide.start = convertValueToRatio({ value: start, axisMin, axisMax });
                }
                if (typeof end === "number") {
                    guide.end = convertValueToRatio({ value: end, axisMin, axisMax });
                }
            });
        }
    }
}
/**
 * Fetches the gauge bounds from the data, based on the provided index
 * @param props.chartData The gauge chart data
 * @param props.featureIndex The index of the ∂ata item to look into (zero-based index)
 * @param props.chartConfig The chart configuration
 */
function fetchGaugeByFeatureBounds(props) {
    const { featureIndex, chartData, chartConfig } = props;
    const { minimumFromField, maximumFromField } = chartConfig?.axes?.[0] ?? {};
    let minimumFromData;
    let maximumFromData;
    // if the feature index is valid
    if (featureIndex >= 0 && featureIndex < chartData.length) {
        const data = chartData[featureIndex];
        if (typeof minimumFromField === "string" &&
            !Ol(minimumFromField) &&
            Number.isFinite(data[minimumFromField])) {
            minimumFromData = data[minimumFromField];
        }
        if (typeof maximumFromField === "string" &&
            !Ol(maximumFromField) &&
            Number.isFinite(data[maximumFromField])) {
            maximumFromData = data[maximumFromField];
        }
    }
    return { minimumFromData, maximumFromData };
}
/**
 * Fetches the `x` value from the feature specified by the index.
 * @param props.chartData The gauge chart data
 * @param props.featureIndex The index of the feature to render (zero-based index)
 * @param props.x The series' `x` property
 */
function getFeatureValue(props) {
    const { featureIndex, chartData, x } = props;
    let dataValue = -1;
    if (featureIndex >= 0 && featureIndex < chartData.length) {
        const data = chartData[featureIndex];
        if (x !== undefined && !Ol(x) && Number.isFinite(data[x])) {
            dataValue = data[x];
        }
    }
    return dataValue;
}
/**
 * Get the minimum, maximum, and inner label values for the input dataset, considering the `minimumFromField`, `maximumFromField`
 * from the axis configuration, and the `x` property from the series configuration.
 *
 * For a gauge by feature, the `featureIndex` parameter is needed to fetch the min/max bounds from the data.
 *
 * For a statistic gauge, the `queryConfig` and `queryObject` is needed for a new query to be performed to get the min/max bounds from the data.
 *
 * @param props.chartConfig The chart config
 * @param props.chartData The gauge chart data
 * @param props.featureIndex The index of the feature to render (zero-based index) for a gauge by feature*
 * @param props.queryConfig The query config to be used to fetch the data for a statistic gauge
 * @param props.queryObject The query object to be used to fetch the data for a statistic gauge (layer or feature layer view)
 *
 * @returns The values for the minimum, maximum and inner labels for rendering a new gauge chart.
 */
async function getGaugeDataInfo(props) {
    const { featureIndex = 0, chartData, queryConfig, chartConfig, queryObject } = props;
    const { axes: axesConfig, series: seriesConfig } = chartConfig;
    const gaugeByFeature = ns(chartConfig);
    const { minimum: configMin, maximum: configMax } = axesConfig?.[0] ?? {};
    const { x } = seriesConfig?.[0] ?? {};
    const gaugeDefaults = ChartDefaults.gauge;
    let minimumFromData;
    let maximumFromData;
    // on a gauge by feature we'll read the min/max bounds from the feature itself
    if (gaugeByFeature) {
        ({ minimumFromData, maximumFromData } = fetchGaugeByFeatureBounds({
            featureIndex,
            chartData,
            chartConfig,
        }));
    }
    else if (queryObject !== undefined && queryConfig !== undefined) {
        // on a statistic gauge we'll perform a new query to get the min/max bounds
        ({ minimumFromData, maximumFromData } = await fetchStatisticGaugeBounds({
            queryObject,
            chartConfig,
            queryConfig,
        }));
    }
    const minimum = minimumFromData ?? configMin ?? gaugeDefaults.axisMinimum;
    const maximum = maximumFromData ?? configMax ?? gaugeDefaults.axisMaximum;
    const dataValue = getFeatureValue({ chartData, featureIndex, x });
    return { minimum, maximum, dataValue };
}
/**
 * Determine whether or not ticks (with and without labels) should be created by checking if
 * any of the following has changed:
 * - axis min and max,
 * - axis value format,
 * - labelsIncrement
 * - minimumFromField
 *
 * @param props.oldConfig The former config
 * @param props.axisMax The axis max bound
 * @param props.min The min value for the first tick
 * @param props.max The max value for the last tick
 * @param props.labelsIncrement The label increment
 * @param props.numberOfIntervals The number of intervals (space between two axis labels)
 * @param props.valueFormat The number format of the axis
 * @param props.minimumFromField The minimumFromField (used in gauge by feature)
 */
function shouldCreateTicksAndLabels(props) {
    const { oldConfig, axisMax, min, max, labelsIncrement, numberOfIntervals, valueFormat, minimumFromField } = props;
    const isPercentFormat = isPercentNumberValueFormat(valueFormat);
    let shouldCreate = true;
    if (oldConfig !== undefined) {
        const { minimum: oldMinimum, minimumFromField: oldMinimumFromField, labelsIncrement: oldLabelsIncrement, valueFormat: oldValueFormat, } = oldConfig.axes[0];
        // compare values from the old and the new configs
        const valueFormatStyleHasChanged = oldValueFormat?.intlOptions?.style !== valueFormat?.intlOptions?.style;
        // this should be true when:
        // 1. the old labelsIncrement was defined and is different from the new one whether a new labelsIncrement is defined or calculated.
        // 2. the old labelsIncrement was undefined and a new labelsIncrement is defined (when a labelsIncrement is undefined, the numberOfIntervals will be defaulted to 5)
        const labelsIncrementHasChanged = isValidLabelsIncrement(oldLabelsIncrement)
            ? oldLabelsIncrement !== labelsIncrement
            : numberOfIntervals !== ChartDefaults.gauge.numberOfLabelIntervals;
        shouldCreate =
            valueFormatStyleHasChanged ||
                min !== oldMinimum ||
                minimumFromField !== oldMinimumFromField ||
                (!isPercentFormat && max !== axisMax) ||
                labelsIncrementHasChanged;
    }
    return shouldCreate;
}

/**
 * Function Definition: https://js.tensorflow.org/api/0.6.1/#linspace
 * Returns empty array when number of points are <= 0 or range is 0
 * @param start The start value
 * @param end The end value
 * @param numberOfPoints The number of points to generate
 */
function linspace(start, end, numberOfPoints) {
    const range$1 = end - start;
    let output = [];
    if (range$1 !== 0) {
        if (numberOfPoints === 1) {
            output = [start];
        }
        else if (numberOfPoints > 1) {
            const stepSize = range$1 / (numberOfPoints - 1);
            output = [...range(start, end, stepSize), end];
        }
    }
    return output;
}
/**
 * Calculates the y values of the normal distribution curve
 * @param x The x value
 * @param mean The mean value
 * @param stddev The standard deviation value
 * @param scalingFactor The scaling factor
 */
function calculateNormalDistribution({ x, mean, stddev, scalingFactor }) {
    const stddev2 = 2 * stddev ** 2;
    const K1 = -1 / stddev2;
    const result = (scalingFactor ?? 1) * Math.exp(K1 * (x - mean) ** 2);
    return result;
}
/**
 * Valid only for "equal-interval" type histogram classification
 * @param bins The histogram bins
 */
function calculateScalingFactor(bins) {
    let scalingFactor = 0;
    if (bins.length > 0) {
        // looking for the max bin count
        for (let iBin = 0; iBin < bins.length; iBin += 1) {
            if (bins[iBin].count > scalingFactor) {
                scalingFactor = bins[iBin].count;
            }
        }
    }
    return scalingFactor;
}

/**
 * Builds a where clause following the pattern `<OID field> in (<list_of_OIDs>)`
 * @param fieldOID
 * @param listOIDs
 */
function joinOIDs(fieldOID, listOIDs) {
    let filterQuery;
    if (listOIDs !== undefined && listOIDs.length > 0) {
        filterQuery = `${fieldOID} IN (${listOIDs.join(",")})`;
    }
    return filterQuery;
}
async function fetchSelectionData(props) {
    const { numberOfQueries, selectionOIDs, chartConfig, queryConfig, options, errorStrings, queryObject } = props;
    const { series: seriesConfig } = chartConfig;
    const chartType = fl(seriesConfig);
    const dataFetchingPromises = [];
    const layer = Ds(queryObject);
    const { objectIdField } = layer;
    const { maxOIDsPerSelectionQuery } = ea();
    for (let iQuery = 0; iQuery < numberOfQueries; iQuery += 1) {
        // Building the subset of OIDs to use for the next query
        const start = iQuery * maxOIDsPerSelectionQuery;
        const end = (iQuery + 1) * maxOIDsPerSelectionQuery - 1;
        const selectionOIDsBatch = selectionOIDs.slice(start === 0 ? 0 : start - 1, end);
        const filterByOIDs = joinOIDs(objectIdField, selectionOIDsBatch);
        const modifiedQueryConfig = { ...queryConfig };
        modifiedQueryConfig.where = $s([modifiedQueryConfig.where, filterByOIDs]);
        // We call the same functions as when we fetched the chart's data. The `filterQuery` property will filter based on the OIDs
        // TODO: scatter plot is optimized to avoid calculating the trendline (given we only need the data), we could do the same for histogram
        switch (chartType) {
            case WebChartTypes.PieSeries:
            case WebChartTypes.BarSeries:
            case WebChartTypes.LineSeries:
            case WebChartTypes.ComboLineAndBarSeries:
                dataFetchingPromises.push(fetchFinishedGenericChartSelectionData({
                    queryObject,
                    chartConfig,
                    options,
                    errorStrings,
                    queryConfig: modifiedQueryConfig,
                }));
                break;
            case WebChartTypes.BoxPlotSeries:
                dataFetchingPromises.push(fetchFinishedBoxPlotSelectionData({
                    queryObject,
                    chartConfig,
                    options,
                    errorStrings,
                    queryConfig: modifiedQueryConfig,
                }));
                break;
            case WebChartTypes.ScatterSeries:
                dataFetchingPromises.push(fetchFinishedScatterPlotData({
                    queryObject,
                    chartConfig,
                    queryConfig: modifiedQueryConfig,
                    options,
                    errorStrings,
                    sortData: false, // sort not needed
                    calculateTrendLine: false, // trendline not needed
                }));
                break;
            case WebChartTypes.HistogramSeries:
                dataFetchingPromises.push(fetchHistogramSelectionData({
                    queryObject,
                    queryConfig: modifiedQueryConfig,
                    chartConfig,
                    x: seriesConfig[0].x,
                }));
                break;
        }
    }
    const dataFetchingResults = await Promise.all(dataFetchingPromises);
    return dataFetchingResults;
}
function extractSelectionDataItems(props) {
    const { dataFetchingResults, numberOfQueries, series } = props;
    const chartType = fl(series);
    const chartSubType = ts(series);
    let selectionDataItems = [];
    // Extracting the data from the results
    for (let iResult = 0; iResult < numberOfQueries; iResult += 1) {
        const nextResult = dataFetchingResults[iResult];
        if (nextResult !== undefined) {
            let dataItems;
            if (chartType === WebChartTypes.ScatterSeries) {
                // extract the data items
                dataItems = nextResult.dataItems;
            }
            else if ("data" in nextResult && nextResult.data) {
                const nextResultData = nextResult.data;
                // extract the data items
                if ("dataItems" in nextResultData) {
                    dataItems = nextResultData.dataItems;
                }
                // if the data info contains outliers or mean lines we add them to the selection data items
                if ("outliers" in nextResultData && nextResultData.outliers) {
                    selectionDataItems.push(...nextResultData.outliers);
                }
                if ("meanLines" in nextResultData && nextResultData.meanLines) {
                    selectionDataItems.push(...nextResultData.meanLines);
                }
            }
            if (dataItems) {
                if (series[0].type === WebChartTypes.ScatterSeries) {
                    const { x: xAxisField, y: yAxisField } = series[0];
                    // on scatter plot we extract the x and y fields from the selection items to keep a neat result
                    selectionDataItems.push(...dataItems.map((dataItem) => ({
                        [xAxisField]: dataItem[xAxisField],
                        [yAxisField]: dataItem[yAxisField],
                    })));
                }
                else if (nextResult.valid) {
                    if (chartSubType === ml.PieFromFields) {
                        // the pie from fields needs an extra conversion step
                        selectionDataItems = convertMultipleNumericFieldsData({
                            dataToConvert: dataItems[0],
                            x: defaultPieFromFieldsName,
                            y: defaultPieFromFieldsValue,
                        });
                    }
                    else if (chartSubType === ml.BarAndLineFromFields) {
                        // same for the bar/line from fields
                        selectionDataItems = convertMultipleNumericFieldsData({
                            dataToConvert: dataItems[0],
                            x: series[0].x,
                            y: series[0].y,
                        });
                    }
                    else {
                        // for all the other chart types we just add the data items
                        selectionDataItems.push(...dataItems);
                    }
                }
            }
        }
    }
    return selectionDataItems;
}
/**
 * Fetches data from a list of OIDs. If the chart is non aggregated we directly read the OIDs stored in the data context,
 * and if the chart is aggregated we perform queries to fetch the data.
 * @param props.chartData The data fetched by the last call to `getData()`
 * @param props.chartConfig The chart's config
 * @param props.queryConfig The query config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.dataWasUpdated Whether the data was updated
 * @param props.currentSelectionOIDs The OIDs representing the selection currently active on the chart
 * @param props.options The runtime options
 * @param props.errorStrings The t9n error strings
 */
async function getSelectionItemsFromOIDs(props) {
    const { chartConfig, queryConfig, chartData, currentSelectionOIDs, dataWasUpdated, queryObject, options, errorStrings, } = props;
    const { series: seriesConfig } = chartConfig;
    const { selectionData, viewExtentUpdated, returnSelectionOIDs, chartLimits } = options ?? {};
    const { selectionItems, selectionOIDs } = selectionData ?? {};
    let selectionDataItems;
    const chartType = fl(seriesConfig);
    const xMissingInSelectionItems = chartType !== WebChartTypes.HistogramSeries &&
        selectionItems !== undefined &&
        selectionItems.length > 0 &&
        !(seriesConfig[0].x in selectionItems[0]) &&
        !(defaultPieFromFieldsName in selectionItems[0]) &&
        !(ChartDefaults.boxPlot.boxPlotCategory in selectionItems[0]);
    // We consider we need to fetch data if:
    // - we are in layer more
    // - and the update is not related to a view update
    // - and the `returnSelectionOIDs` option is not false
    // - and the provided selection OIDs is not empty
    // - and
    //   - the data was updated
    //   - or the x field is missing from the selected items
    //   - or the selection OIDs changed
    const fetchFromOIDsIsNeeded = viewExtentUpdated !== true &&
        returnSelectionOIDs !== false &&
        selectionOIDs !== undefined &&
        selectionOIDs.length > 0 &&
        (dataWasUpdated === true || xMissingInSelectionItems || !isEqual(selectionOIDs, currentSelectionOIDs));
    if (fetchFromOIDsIsNeeded) {
        const data = os(chartData);
        // TODO: Box plot optimization: add the outlier data as an input of this function, to use the first loop using the knownOID
        // Then we can merge the results with the result of `fetchSelectionData()` for the candle sticks
        // It means we'll need to restructure the if...else condition so the paths are not always exclusive
        // If the chart is non aggregated we can directly fetch the OIDs from the elements' data context
        // That information is stored in the data context when the chart's data is fetched
        if (data !== undefined && !isChartAggregated({ dataContext: data[0], chartConfig, chartLimits })) {
            selectionDataItems = data.filter((dataContext) => {
                const knownOID = dataContext[Un.uniqueIdsName];
                return typeof knownOID === "number" ? selectionOIDs?.includes(knownOID) : false;
            });
        }
        else if (selectionOIDs?.[0] !== undefined && queryConfig !== undefined) {
            const { maxOIDsPerSelectionQuery } = ea();
            // we batch the queries by block of `maxOIDsPerSelectionQuery` to avoid overloading the requests
            const numberOfQueries = Math.ceil(selectionOIDs.length / maxOIDsPerSelectionQuery);
            const dataFetchingResults = await fetchSelectionData({
                numberOfQueries,
                selectionOIDs,
                queryConfig,
                queryObject,
                options,
                errorStrings,
                chartConfig,
            });
            selectionDataItems = extractSelectionDataItems({
                dataFetchingResults,
                numberOfQueries,
                series: seriesConfig,
            });
        }
    }
    return selectionDataItems;
}
function* queryUniqueIDsGenerator(props) {
    const { filterList, queryObject, queryConfig } = props;
    for (let i = 0; i < filterList.length; i += 1) {
        const modifiedQueryConfig = { ...queryConfig };
        modifiedQueryConfig.where = $s([modifiedQueryConfig.where, filterList[i]]);
        yield ap({
            queryObject,
            queryConfig: modifiedQueryConfig,
            uniqueFeature: true,
        });
    }
}
/**
 * Fetches OIDs based on a where clause gathering information from multiples elements (markers, bars...)
 * TODO: add a threshold to limit the number of data items to bring back
 * @param props
 * @returns a list of OIDs matching the provided the where clause
 */
async function fetchOIDsFromWhereClause(props) {
    const { whereList, queryObject, queryFilter, queryConfig } = props;
    let fetchedOIDs = [];
    if (whereList.length > 0) {
        const selectionThreshold = ea().maxElementsPerSelectionQuery;
        const filterList = [];
        // Batching the queries
        const numberOfQueries = Math.ceil(whereList.length / selectionThreshold);
        for (let iQuery = 0; iQuery < numberOfQueries; iQuery += 1) {
            const start = iQuery * selectionThreshold;
            const end = (iQuery + 1) * selectionThreshold;
            const whereSubList = whereList.slice(start === 0 ? 0 : start - 1, end);
            // Combining the filters using a OR operand
            let filter = $s(whereSubList, "OR");
            filter = $s([queryFilter, filter]);
            filterList.push(filter);
        }
        // Creating a generator to execute in parallel the queries outside of the loop
        const generator = queryUniqueIDsGenerator({
            filterList,
            queryObject,
            queryConfig,
        });
        fetchedOIDs = (await Promise.all(generator)).flat();
        // to eliminate duplicates
        fetchedOIDs = Array.from(new Set(fetchedOIDs));
    }
    return fetchedOIDs;
}

const States = {
    CustomActive: "custom-active",
    CustomInactive: "custom-inactive",
    Default: "default",
    Active: "active",
};

const HistogramResultKeys = {
    Count: "count",
    Start: "minValue",
    End: "maxValue",
};
const OverlayTerms = {
    Mean: "Mean",
    Median: "Median",
    StdDev: "Standard Deviation",
    Normal: "Normal Distribution",
    Trendline: "Trendline",
};

const CursorBehavior = {
    SelectXY: "selectXY",
    SelectX: "selectX",
    SelectY: "selectY",
    ZoomXY: "zoomXY",
    ZoomX: "zoomX",
    ZoomY: "zoomY",
    None: "none",
};

/**
 * Sets the cursor behavior based on the action mode and cursor range.
 * @param props.actionMode The action mode (selection, zoon...)
 * @param props.cursorRange The cursor range (multi-axes, x-axis...)
 * @param props.isRotated Whether the chart is rotated
 */
function mapCursorRangeToCursorBehavior(props) {
    const { actionMode, cursorRange, isRotated } = props;
    let cursorBehavior = CursorBehavior.None;
    switch (cursorRange) {
        case $y.MultiAxes:
            if (actionMode === zy.MultiSelectionWithCtrlKey || actionMode === zy.MultiSelection) {
                cursorBehavior = CursorBehavior.SelectXY;
            }
            else if (actionMode === zy.Zoom) {
                cursorBehavior = CursorBehavior.ZoomXY;
            }
            break;
        case $y.XAxis:
            if (actionMode === zy.MultiSelectionWithCtrlKey || actionMode === zy.MultiSelection) {
                cursorBehavior = isRotated === true ? CursorBehavior.SelectY : CursorBehavior.SelectX;
            }
            else if (actionMode === zy.Zoom) {
                cursorBehavior = isRotated === true ? CursorBehavior.ZoomY : CursorBehavior.ZoomX;
            }
            break;
        case $y.YAxis:
            if (actionMode === zy.MultiSelectionWithCtrlKey || actionMode === zy.MultiSelection) {
                cursorBehavior = isRotated === true ? CursorBehavior.SelectX : CursorBehavior.SelectY;
            }
            else if (actionMode === zy.Zoom) {
                cursorBehavior = isRotated === true ? CursorBehavior.ZoomX : CursorBehavior.ZoomY;
            }
            break;
    }
    return cursorBehavior;
}

const OriginAndDestinationContextTypes = {
    Outlier: "outlier",
    Box: "box",
    OutlierToOutlier: "outlier-outlier",
    OutlierToBox: "outlier-box",
    BoxToOutlier: "box-outlier",
    BoxToBox: "box-box",
};

/**
 * Returns the origin and destination contexts. Different possibilities:
 * - outlier-outlier
 * - outlier-box
 * - box-outlier
 * - box-box
 * @param props.oneSelectedItem The context from the selected item
 * @param props.elementOutlierValue The outlier value from the current element
 */
function getOriginAndDestinationContexts(oneSelectedItem, elementOutlierValue) {
    const from = oneSelectedItem[ChartDefaults.boxPlot.boxPlotOutlierId] === true
        ? OriginAndDestinationContextTypes.Outlier
        : OriginAndDestinationContextTypes.Box;
    const to = typeof elementOutlierValue === "number"
        ? OriginAndDestinationContextTypes.Outlier
        : OriginAndDestinationContextTypes.Box;
    return `${from}-${to}`;
}
/**
 * Returns whether two outlier contexts are matching
 * @param props.oneSelectedItem The context from the selected item
 * @param props.dataContext The context from the current element
 * @param props.selectedOutlierKey The key to access the outlier value
 */
function matchOutlierToOutlierSelection(props) {
    const { oneSelectedItem, dataContext, selectedOutlierKey } = props;
    // Matching the value
    return oneSelectedItem[selectedOutlierKey] === dataContext[selectedOutlierKey];
}
/**
 * Returns whether an outlier context matches a box context
 * @param props.elementMin The current element min
 * @param props.elementMax The current element max
 * @param props.selectedOutlierValue The outlier value from the selection context
 */
function matchOutlierToBoxSelection(props) {
    const { elementMin, elementMax, selectedOutlierValue } = props;
    let valueIsAMatch;
    // Matching the value
    if (typeof elementMin === "number" && typeof elementMax === "number" && typeof selectedOutlierValue === "number") {
        valueIsAMatch = selectedOutlierValue >= elementMin && selectedOutlierValue <= elementMax;
    }
    return valueIsAMatch;
}
/**
 * Returns whether a box context matches an outlier context
 * @param props.selectedMin The box min from the selection context
 * @param props.selectedMax The box max from the selection context
 * @param props.elementOutlierValue The outlier value from the current element
 * @param props.oneSelectedItem The selection context
 * @param props.iqrField The key to access the IQR field according to the current series configuration
 */
function matchBoxToOutlierSelection(props) {
    const { selectedMin, selectedMax, elementOutlierValue, oneSelectedItem, iqrField } = props;
    let valueIsAMatch;
    // Matching the value
    if (typeof selectedMin === "number" && typeof selectedMax === "number" && typeof elementOutlierValue === "number") {
        valueIsAMatch = elementOutlierValue >= selectedMin && elementOutlierValue <= selectedMax;
    }
    // We check whether a stat property (IQR, but could be another one) generated using the series info (split-by and y)
    // is part of the selected item. If not it's not a match
    const numericFieldOrSplitByIsAMatch = iqrField in oneSelectedItem;
    return valueIsAMatch !== false && numericFieldOrSplitByIsAMatch;
}
/**
 * Returns whether two box contexts are matching
 * @param props.selectedMin The box min from the selection context
 * @param props.selectedMax The box max from the selection context
 * @param props.elementMin The box min from the current element context
 * @param props.elementMax The box max from the current element context
 * @param props.oneSelectedItem The selection context
 * @param props.iqrField The key to access the IQR field according to the current series configuration
 */
function matchBoxToBoxSelection(props) {
    const { selectedMin, selectedMax, elementMin, oneSelectedItem, elementMax, iqrField } = props;
    let valueIsAMatch;
    // Matching the value. We check whether the outlier is within the min/max range
    if (typeof elementMin === "number" &&
        typeof elementMax === "number" &&
        typeof selectedMin === "number" &&
        typeof selectedMax === "number") {
        valueIsAMatch = !(elementMin >= selectedMax || elementMax <= selectedMin);
    }
    // We check whether a stat property (IQR, but could be another one) generated using the series info (split-by and y)
    // is part of the selected item. If not it's not a match
    const numericFieldOrSplitByIsAMatch = iqrField in oneSelectedItem;
    return valueIsAMatch !== false && numericFieldOrSplitByIsAMatch;
}
/**
 * Returns whether the x value from two contexts are matching
 * @param props.oneSelectedItem
 * @param props.dataContext
 * @param props.xAxisField The field used by the x-axis
 * @returns
 */
function matchXValue(props) {
    const { oneSelectedItem, dataContext, xAxisField } = props;
    const elementX = dataContext[ChartDefaults.typeOrDomainIdValue] ??
        dataContext[ChartDefaults.originalCategoryValue] ??
        dataContext[ChartDefaults.boxPlot.boxPlotCategory] ??
        dataContext[xAxisField];
    const selectedX = oneSelectedItem[ChartDefaults.typeOrDomainIdValue] ??
        oneSelectedItem[ChartDefaults.originalCategoryValue] ??
        oneSelectedItem[ChartDefaults.boxPlot.boxPlotCategory] ??
        oneSelectedItem[xAxisField];
    // Matching the category
    return elementX === selectedX;
}
/**
 * Computes the data fields necessary to the box plot selection predicate
 * @param props.chartSubType The chart sub type
 * @param props.yAxisField The y-axis field
 * @param props.splitBy The split-by clause (field = value)
 * @param props.showOutliers Whether the outliers are shown on the chart
 */
function getDataFields(props) {
    const { chartSubType, yAxisField, splitBy, showOutliers } = props;
    const seriesY = chartSubType === ml.BoxPlotMultiFieldsAndCategory ? yAxisField : undefined;
    const fieldProps = { y: seriesY, splitBy };
    const selectedOutlierKey = ls({
        ...fieldProps,
        key: Wl.Outlier,
    });
    const maxField = ls({
        ...fieldProps,
        key: Wl.Max,
        showOutliers,
    });
    const minField = ls({
        ...fieldProps,
        key: Wl.Min,
        showOutliers,
    });
    const selectedMaxFieldWoOutliers = ls({
        ...fieldProps,
        key: Wl.Max,
        showOutliers: false,
    });
    const selectedMinFieldWoOutliers = ls({
        ...fieldProps,
        key: Wl.Min,
        showOutliers: false,
    });
    const selectedMaxFieldWithOutliers = ls({
        ...fieldProps,
        key: Wl.Max,
        showOutliers: true,
    });
    const selectedMinFieldWithOutliers = ls({
        ...fieldProps,
        key: Wl.Min,
        showOutliers: true,
    });
    const iqrField = ls({
        splitBy,
        y: seriesY,
        key: Wl.IQR,
    });
    return {
        selectedOutlierKey,
        maxField,
        minField,
        selectedMaxFieldWoOutliers,
        selectedMinFieldWoOutliers,
        selectedMaxFieldWithOutliers,
        selectedMinFieldWithOutliers,
        iqrField,
    };
}
/**
 * This function helps matching a list of selection data with a specific box plot element (candle stick, marker) represented by its data context.
 * @param props.elementDataContext The data context to test upon the selection items
 * @param props.chartSubType The chart sub type
 * @param props.layerOidField The layer Object Id
 * @param props.xAxisField The x-axis field
 * @param props.yAxisField The y-axis field
 * @param props.splitBy The split-by clause (field = value)
 * @param props.showOutliers Whether the outliers are shown on the chart
 * @returns A predicate for Array.some to be used by `isElementPartOfSelection()`
 */
function getBoxPlotSelectionPredicate(props) {
    const { elementDataContext, layerOidField, xAxisField, splitBy, yAxisField, chartSubType, showOutliers } = props;
    const dataContext = elementDataContext;
    let somePredicate;
    const isMeanLineMarker = dataContext?.[ChartDefaults.boxPlot.boxPlotMeanLineMarkerId] === true;
    if (isMeanLineMarker) {
        const avgField = ls({
            splitBy,
            key: Wl.Average,
        });
        // on a mean line marker we look for:
        // - matching the category (if it's in both contexts)
        // - whether the avg field is in both contexts
        somePredicate = (oneSelectedItem) => {
            const matchingCategory = !xAxisField ||
                !(xAxisField in oneSelectedItem && xAxisField in dataContext) ||
                oneSelectedItem[xAxisField] === dataContext[xAxisField];
            const avgFieldInBothContexts = avgField in oneSelectedItem && avgField in dataContext;
            return matchingCategory && avgFieldInBothContexts;
        };
    }
    else {
        if (xAxisField !== undefined && yAxisField !== undefined) {
            somePredicate = (oneSelectedItem) => {
                let result;
                if (layerOidField !== undefined && layerOidField in oneSelectedItem && layerOidField in dataContext) {
                    // If the OID field is present in both objects, we can directly compare them. It will happen on non aggregated bar or line charts
                    result = oneSelectedItem[layerOidField] === dataContext[layerOidField];
                }
                else {
                    const { selectedOutlierKey, maxField, minField, selectedMaxFieldWoOutliers, selectedMinFieldWoOutliers, selectedMaxFieldWithOutliers, selectedMinFieldWithOutliers, iqrField, } = getDataFields({ chartSubType, yAxisField, splitBy, showOutliers });
                    const elementOutlierValue = dataContext[selectedOutlierKey];
                    const selectedOutlierValue = oneSelectedItem[selectedOutlierKey];
                    const elementMin = dataContext[minField];
                    const elementMax = dataContext[maxField];
                    // Important: the selected item context only contains the min/max values relative the value of the
                    // `showOutliers` **from when the selection was made**. This is decided by `getSelectedElementData()`.
                    // Here we check the min/max values in both version (with and without outliers) to pick the right one
                    const selectedMin = oneSelectedItem[selectedMinFieldWoOutliers] ?? oneSelectedItem[selectedMinFieldWithOutliers];
                    const selectedMax = oneSelectedItem[selectedMaxFieldWoOutliers] ?? oneSelectedItem[selectedMaxFieldWithOutliers];
                    // First we check whether the x-values match
                    let match = matchXValue({ oneSelectedItem, dataContext, xAxisField });
                    // if the match is true at this stage, we continue checking the other conditions
                    if (match) {
                        // Identifying where the selected context is coming from, and what it is matched with
                        const fromTo = getOriginAndDestinationContexts(oneSelectedItem, elementOutlierValue);
                        switch (fromTo) {
                            case OriginAndDestinationContextTypes.OutlierToOutlier:
                                match = matchOutlierToOutlierSelection({ oneSelectedItem, dataContext, selectedOutlierKey });
                                break;
                            case OriginAndDestinationContextTypes.OutlierToBox:
                                match = matchOutlierToBoxSelection({ elementMin, elementMax, selectedOutlierValue });
                                break;
                            case OriginAndDestinationContextTypes.BoxToOutlier:
                                match = matchBoxToOutlierSelection({
                                    selectedMin,
                                    selectedMax,
                                    elementOutlierValue,
                                    oneSelectedItem,
                                    iqrField,
                                });
                                break;
                            case OriginAndDestinationContextTypes.BoxToBox:
                                match = matchBoxToBoxSelection({
                                    selectedMin,
                                    selectedMax,
                                    elementMin,
                                    oneSelectedItem,
                                    elementMax,
                                    iqrField,
                                });
                                break;
                        }
                    }
                    result = match === true;
                }
                return result;
            };
        }
    }
    return somePredicate;
}
/**
 * Indicates whether a slice data context matches a selection data context
 * @param props.sliceDataContext The slice data context
 * @param props.selectionDataContext The selection data context
 * @param props.xAxisField The x-axis field
 * @param props.layerOidField The layer Object Id
 */
function isSliceMatchingSelection(props) {
    const { layerOidField, sliceDataContext, selectionDataContext, xAxisField } = props;
    let match = false;
    if (layerOidField !== undefined && layerOidField in sliceDataContext && layerOidField in selectionDataContext) {
        match = selectionDataContext[layerOidField]?.toString() === sliceDataContext[layerOidField]?.toString();
    }
    else {
        // We compare by priority 1/ `typeOrDomainIdValue` 2/ `originalCategoryValue` 3/ the x value 4/ the x placeholder for a pie from fields
        // Note: not using optional chaining to allow the comparison of `null` values
        let elementX = sliceDataContext[ChartDefaults.typeOrDomainIdValue];
        if (elementX === undefined) {
            elementX = sliceDataContext[ChartDefaults.originalCategoryValue];
        }
        if (elementX === undefined) {
            elementX = sliceDataContext[xAxisField];
        }
        if (elementX === undefined) {
            elementX = sliceDataContext[defaultPieFromFieldsName];
        }
        let selectedX = selectionDataContext[ChartDefaults.typeOrDomainIdValue];
        if (selectedX === undefined) {
            selectedX = selectionDataContext[ChartDefaults.originalCategoryValue];
        }
        if (selectedX === undefined) {
            selectedX = selectionDataContext[xAxisField];
        }
        if (selectedX === undefined) {
            selectedX = selectionDataContext[defaultPieFromFieldsName];
        }
        match = elementX !== undefined && selectedX !== undefined && elementX === selectedX;
    }
    return match;
}
/**
 * This function helps matching a list of selection data with a specific element (column, marker, slice) represented by its data context.
 * Each type of series has its own set of rules to defined what is a match.
 * @param props
 * @returns A boolean indicating whether it matched, and the data context that matched (useful for pie chart group of slices)
 */
function isElementPartOfSelection(props) {
    const { options, elementDataContext, selectionDataItems, layerOidField, xAxisField, yAxisField, chartType } = props;
    const { originalCategoryValue } = ChartDefaults;
    let isPartOfIt = false;
    let somePredicate;
    if (elementDataContext !== undefined && selectionDataItems !== undefined) {
        switch (chartType) {
            case WebChartTypes.BarSeries:
            case WebChartTypes.LineSeries:
            case WebChartTypes.ComboLineAndBarSeries:
                if (xAxisField !== undefined && yAxisField !== undefined) {
                    const dataContext = elementDataContext;
                    somePredicate = (oneSelectedItem) => {
                        let result;
                        // If the OID field is present in both objects, we can directly compare them. It will happen on non aggregated bar or line charts
                        if (layerOidField !== undefined && layerOidField in oneSelectedItem && layerOidField in dataContext) {
                            result = oneSelectedItem[layerOidField] === dataContext[layerOidField];
                        }
                        else if (ChartDefaults.dateBinningRange in dataContext &&
                            typeof oneSelectedItem[xAxisField] === "number" // we compare timestamps
                        ) {
                            const selectedDate = oneSelectedItem[xAxisField];
                            // When the chart uses time binning, we check if the incoming date is within the element's date range
                            const [rangeStartDate, rangeEndDate] = dataContext[ChartDefaults.dateBinningRange];
                            result = selectedDate >= rangeStartDate && selectedDate <= rangeEndDate && yAxisField in oneSelectedItem;
                        }
                        else {
                            // We compare by priority 1/ `typeOrDomainIdValue` 2/ `originalCategoryValue` 3/ the x value
                            const elementX = dataContext[ChartDefaults.typeOrDomainIdValue] ??
                                dataContext[originalCategoryValue] ??
                                dataContext[xAxisField];
                            const selectedX = oneSelectedItem[ChartDefaults.typeOrDomainIdValue] ??
                                oneSelectedItem[originalCategoryValue] ??
                                oneSelectedItem[xAxisField];
                            result = selectedX === elementX && yAxisField in oneSelectedItem;
                        }
                        return result;
                    };
                }
                break;
            case WebChartTypes.BoxPlotSeries:
                somePredicate = getBoxPlotSelectionPredicate(props);
                break;
            case WebChartTypes.ScatterSeries:
                if (xAxisField !== undefined && yAxisField !== undefined) {
                    const scatterPlotElementDataContext = elementDataContext;
                    // For a non aggregated scatter plot we match the object if field or the couple x/y
                    if (!isScatterPlotAggregated({
                        dataContext: scatterPlotElementDataContext,
                        chartLimits: options?.chartLimits,
                    })) {
                        somePredicate = (oneSelectedItem) => {
                            let result;
                            if (layerOidField !== undefined &&
                                layerOidField in scatterPlotElementDataContext &&
                                layerOidField in oneSelectedItem) {
                                result = oneSelectedItem[layerOidField] === scatterPlotElementDataContext[layerOidField];
                            }
                            else {
                                result =
                                    oneSelectedItem[xAxisField] === scatterPlotElementDataContext[xAxisField] &&
                                        oneSelectedItem[yAxisField] === scatterPlotElementDataContext[yAxisField];
                            }
                            return result;
                        };
                    }
                    else {
                        /* For an aggregated scatter plot the selected item needs to be within the element's range, at the exception of an
                        aggregated point having xMin === xMax or yMin === yMax */
                        const { dataContextXMinField, dataContextXMaxField, dataContextYMinField, dataContextYMaxField } = ChartDefaults.scatterPlotAggregationFields;
                        const { [dataContextXMinField]: xMin, [dataContextXMaxField]: xMax } = scatterPlotElementDataContext;
                        // If x and y are equal, it means xMin=yMin and xMax=yMax
                        const yMin = xAxisField !== yAxisField ? scatterPlotElementDataContext[dataContextYMinField] : xMin;
                        const yMax = xAxisField !== yAxisField ? scatterPlotElementDataContext[dataContextYMaxField] : xMax;
                        const somePredicateX = (oneSelectedItem) => {
                            const oneSelectedItemX = oneSelectedItem[xAxisField] ?? Number.NaN;
                            const elementXMin = xMin ?? Number.NaN;
                            const elementXMax = xMax ?? Number.NaN;
                            return xMin === xMax
                                ? oneSelectedItemX === elementXMin
                                : (oneSelectedItemX ?? Number.NaN) >= elementXMin && (oneSelectedItemX ?? Number.NaN) < elementXMax;
                        };
                        const somePredicateY = (oneSelectedItem) => {
                            const oneSelectedItemY = oneSelectedItem[yAxisField] ?? Number.NaN;
                            const elementYMin = yMin ?? Number.NaN;
                            const elementYMax = yMax ?? Number.NaN;
                            return yMin === yMax
                                ? oneSelectedItemY === elementYMin
                                : oneSelectedItemY >= elementYMin && oneSelectedItemY < elementYMax;
                        };
                        somePredicate = (oneSelectedItem) => somePredicateX(oneSelectedItem) && somePredicateY(oneSelectedItem);
                    }
                }
                break;
            case WebChartTypes.HistogramSeries:
                somePredicate = (oneSelectedItem) => {
                    let match = false;
                    const { minValue: binMinValue, maxValue: binMaxValue } = elementDataContext;
                    // The selected items can be either WebChartDataItem or WebChartBin for histogram
                    // As a consequence there are two different paths to know whether an element is part of the selection
                    if (xAxisField !== undefined && xAxisField in oneSelectedItem) {
                        const selectedValue = oneSelectedItem[xAxisField];
                        // it's a match if the selected value is in the bin
                        match = typeof selectedValue === "number" && selectedValue >= binMinValue && selectedValue <= binMaxValue;
                    }
                    else if ("minValue" in oneSelectedItem && "maxValue" in oneSelectedItem) {
                        const { minValue: selectedBinMinValue, maxValue: selectedBinMaxValue } = oneSelectedItem;
                        // it's a match if the bins overlap
                        match = !(binMinValue >= selectedBinMaxValue || binMaxValue <= selectedBinMinValue);
                    }
                    return match;
                };
                break;
            case WebChartTypes.PieSeries:
                if (xAxisField !== undefined) {
                    somePredicate = (oneSelectedItem) => {
                        const dataContext = elementDataContext;
                        const isSliceGroup = isElementFromGroupOfSlices(dataContext);
                        // We define the contexts we want to go through to match the selection
                        const sliceDataContexts = [dataContext];
                        // If the current context belongs to the group of slices, we add all the grouped slices contexts
                        if (isSliceGroup) {
                            sliceDataContexts.push(...(getGroupedSlicesDataItem({ groupOfSlicesDataContext: dataContext }) ?? []));
                        }
                        const result = sliceDataContexts.some((sliceDataContext) => isSliceMatchingSelection({
                            sliceDataContext,
                            selectionDataContext: oneSelectedItem,
                            layerOidField,
                            xAxisField,
                        }));
                        return result;
                    };
                }
                break;
        }
    }
    if (somePredicate !== undefined) {
        isPartOfIt = selectionDataItems.some(somePredicate);
    }
    return isPartOfIt;
}
function getSelectedElementData(props) {
    const { dataContext, yAxisField, yList, xAxisField, splitBy, chartType, chartSubType, showOutliers } = props;
    let selectedData = { ...dataContext };
    if (dataContext !== undefined) {
        // bar and line charts are more complex
        if (chartType === WebChartTypes.BarSeries ||
            chartType === WebChartTypes.LineSeries ||
            chartType === WebChartTypes.ComboLineAndBarSeries ||
            chartType === WebChartTypes.PieSeries) {
            // a bar or marker carries information about all the chart's series, so we remove them to avoid polluting the payload
            // this does not apply to pie from fields
            if (chartType !== WebChartTypes.PieSeries) {
                yList.forEach((y) => {
                    if (y !== yAxisField) {
                        delete selectedData[y];
                    }
                });
            }
            // finding the x-axis value which has been modified on non aggregated charts
            const xAxisValue = getXAxisValueFromContext({
                value: dataContext[xAxisField],
                dataContext,
            });
            selectedData[xAxisField] = xAxisValue;
            // Adding the split-by info if known
            if (!Ol(splitBy)) {
                selectedData[Xl(splitBy)] = Ql({ where: splitBy, escape: false });
            }
        }
        else if (chartType === WebChartTypes.BoxPlotSeries) {
            selectedData = { [xAxisField]: dataContext[xAxisField] };
            // keeping some specific properties
            [
                Un.uniqueIdsName,
                ChartDefaults.boxPlot.boxPlotMeanLineMarkerId,
                ChartDefaults.boxPlot.boxPlotOutlierId,
                ChartDefaults.typeOrDomainIdValue,
            ].forEach((propToKeep) => {
                if (dataContext[propToKeep]) {
                    selectedData[propToKeep] = dataContext[propToKeep];
                }
            });
            const y = chartSubType === ml.BoxPlotMultiFieldsAndCategory ? yAxisField : undefined;
            Object.values(Wl).forEach((statKey) => {
                // Passing the `showOutliers` helps keeping track of the min/max values of the box **when the selection is made**.
                // This is used by `getBoxPlotSelectionPredicate()` and both functions need to be kept in sync.
                const key = ls({ key: statKey, y, splitBy, showOutliers });
                const prop = dataContext[key];
                if (prop !== undefined) {
                    selectedData[key] = dataContext[key];
                }
            });
        }
    }
    return selectedData;
}

/**
 * Returns the primary text if not empty, the default text otherwise
 * @param defaultText
 * @param primaryText
 */
function getTooltipHeadingText(defaultText, primaryText) {
    // NOTE: the amcharts util was essentially just a null and empty string check
    return primaryText !== undefined && primaryText !== null && primaryText !== "" ? primaryText : defaultText;
}
/**
 * Returns the label for the provided aggregation type, using the commStrings from ac-js itself.
 *
 * Use this function for bar and line chart tooltip instead of the one from the shared-utils because
 * calling the ac - utils function with await from inside the Adapter function waits infinitely.
 *
 * @param aggregationType
 * @param commonStrings
 * @returns
 */
function getDefaultAggregationTypeLabel(aggregationType, commonStrings) {
    let title;
    switch (aggregationType) {
        case RESTStatisticType.Average: {
            title = commonStrings.statistics.mean;
            break;
        }
        case RESTStatisticType.ContinuousPercentile: {
            title = commonStrings.statistics.median;
            break;
        }
        case RESTStatisticType.Sum: {
            title = commonStrings.statistics.sum;
            break;
        }
        case RESTStatisticType.Minimum: {
            title = commonStrings.statistics.minimum;
            break;
        }
        case RESTStatisticType.Maximum: {
            title = commonStrings.statistics.maximum;
            break;
        }
        case RESTStatisticType.Variance: {
            title = commonStrings.statistics.variance;
            break;
        }
        case RESTStatisticType.DiscretePercentile: {
            title = commonStrings.statistics.discretePercentile;
            break;
        }
        case RESTStatisticType.NoAggregation: {
            title = commonStrings.statistics.noAggregation;
            break;
        }
        case RESTStatisticType.Count:
        default: {
            title = commonStrings.statistics.count;
            break;
        }
    }
    return title;
}
/**
 * Returns the tooltip to display for a bar/line by field.
 * or the axis title itself.
 * @param props.config The chart's config
 * @param props.fieldName The field name from the hovered bar/marker
 * @param props.commonStrings The common strings containing the localized text
 */
function getTooltipLabelForBarLineFromFields(props) {
    const { config, fieldName = "", commonStrings } = props;
    const statisticType = config.series[0].query?.outStatistics?.[0].statisticType ?? StatisticsDefaults.statisticType;
    const aggregationType = getDefaultAggregationTypeLabel(statisticType, commonStrings);
    return On(commonStrings.statistics.aggregation, {
        statistics: aggregationType,
        fieldName,
    });
}
/**
 * The tooltip y label is the label associated to the y-axis. It can be the name of the field used by the axis, its alias,
 * or the axis title itself.
 * @param props
 */
function getTooltipYLabel(props) {
    const { config, fieldList, objectIdField, seriesIndex, isStacked100, commonStrings } = props;
    let yLabel = "";
    const seriesName = config.series[seriesIndex].name;
    const seriesConfig = config.series[seriesIndex];
    const y = [seriesConfig.y].flat()[0];
    const axes = config.axes;
    const chartSubType = ts(config.series);
    const fieldOID = objectIdField ?? Un.outStatistics.onStatisticField;
    const statisticField = seriesConfig.query?.outStatistics?.[0].onStatisticField ?? fieldOID;
    const statisticFieldAlias = Tl(fieldList, statisticField);
    const statisticType = seriesConfig.query?.outStatistics?.[0].statisticType ?? StatisticsDefaults.statisticType;
    const aggregationType = getDefaultAggregationTypeLabel(statisticType, commonStrings);
    if (chartSubType === ml.BarAndLineNoAggregation) {
        yLabel = seriesName ?? Tl(fieldList, y);
    }
    else if (chartSubType === ml.BarAndLineSplitByNoAggregation) {
        yLabel = Tl(fieldList, y);
    }
    else {
        yLabel =
            statisticType === RESTStatisticType.Count && statisticField === fieldOID
                ? commonStrings.statistics.count
                : On(commonStrings.statistics.aggregation, {
                    statistics: aggregationType,
                    fieldName: statisticFieldAlias ?? seriesName,
                });
        if (chartSubType === ml.BarAndLineMonoField && !isStacked100) {
            yLabel = getTooltipHeadingText(yLabel, axes[1].title?.content?.text);
        }
    }
    return yLabel;
}

const AxisDataItemType = {
    Guides: "guides",
    Ticks: "ticks",
    GaugeFirstAndLastGuides: "firstAndLast",
    GaugeTicksWithLabels: "gaugeTicksWithLabels",
};

const LegendReverseKeys = {
    Rotated: 0,
    NonRotated: 1,
    RTL: 2,
    LTR: 3,
    Stacked: 4,
    Stacked100: 5,
    SideBySide: 6,
    LegendTop: 7,
    LegendBottom: 8,
    LegendLeft: 9,
    LegendRight: 10,
    DateAxis: 11,
    ValueAxis: 12,
    CategoryAxis: 13,
    OrderByFieldsASC: 14,
    OrderByFieldsDESC: 15,
};
const barLineLegendReverseRules = new Set([
    // Case of descending order for a DateAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked100:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Case of ascending order for a DateAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked100:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.DateAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Case of ascending order for a CategoryAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked:
    // LTR and notRotated chart: done done
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked100:
    // LTR and notRotated chart: done done
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Case of descending order for a CategoryAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked:
    // LTR and notRotated chart: done done
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked100:
    // LTR and notRotated chart: done done
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.CategoryAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Case of ascending order for a ValueAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Stacked100:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsASC}`,
    // Case of descending order for a ValueAxis
    // SideBySide
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.SideBySide}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // Stacked100:
    // LTR and notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.LTR}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    // RTL and choosing between rotated or notRotated chart
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendLeft}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.NonRotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendRight}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendTop}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
    `${LegendReverseKeys.Rotated}-${LegendReverseKeys.RTL}-${LegendReverseKeys.Stacked100}-${LegendReverseKeys.LegendBottom}-${LegendReverseKeys.ValueAxis}-${LegendReverseKeys.OrderByFieldsDESC}`,
]);

/**
 * determines whether a string is a base64 data url
 * @param src
 * @returns
 */
function isBase64DataUrl(src) {
    const dataUriRegex = /^data:[a-z]+\/[a-z+.-]+;base64/u;
    if (dataUriRegex.test(src)) {
        return true;
    }
    return false;
}
/**
 * Convert a DataURI string to blob for file upload.
 *
 * NOTE: Requires window.atob() in global scope.
 *
 * Credit:
 * https://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript
 * https://stackoverflow.com/questions/12168909/blob-from-dataurl
 *
 * @param dataURI - The data URL to process
 * @param sliceSize - The number of bytes to process before slicing into parallel process.
 */
function dataURItoBlob(dataURI, sliceSize = 512) {
    if (!isBase64DataUrl(dataURI)) {
        throw new Error("Cannot convert a string that is not a data uri to a blob");
    }
    // separate out the mime component
    const mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
    // convert base64 to raw binary data held in a string
    // doesn't handle URLEncoded DataURIs
    const byteCharacters = atob(dataURI.split(",")[1]);
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
    }
    return new Blob(byteArrays, { type: mimeString });
}

exports.AxisDataItemType = AxisDataItemType;
exports.BoxPlotStepLineSeriesType = BoxPlotStepLineSeriesType;
exports.ChartDefaults = ChartDefaults;
exports.ChartEvents = ChartEvents;
exports.CursorBehavior = CursorBehavior;
exports.GroupByKeywords = GroupByKeywords;
exports.HistogramResultKeys = HistogramResultKeys;
exports.LabelType = LabelType;
exports.LegendReverseKeys = LegendReverseKeys;
exports.OriginAndDestinationContextTypes = OriginAndDestinationContextTypes;
exports.OverlayTerms = OverlayTerms;
exports.QueryAnalyticForTrendline = QueryAnalyticForTrendline;
exports.RendererOrigin = RendererOrigin;
exports.States = States;
exports.addFeatureLimitation = addFeatureLimitation;
exports.adjustElementCount = adjustElementCount;
exports.applyPercentRatioToGuideBoundaries = applyPercentRatioToGuideBoundaries;
exports.applyValueConversion = applyValueConversion;
exports.areColorsEqual = areColorsEqual;
exports.attachInlineCSS = attachInlineCSS;
exports.barLineLegendReverseRules = barLineLegendReverseRules;
exports.buildSelectionFilterForABoxPlotElement = buildSelectionFilterForABoxPlotElement;
exports.buildSelectionFilterForATimeBinningChartElement = buildSelectionFilterForATimeBinningChartElement;
exports.buildSelectionFilterForOneElement = buildSelectionFilterForOneElement;
exports.buildUniqueQuery = buildUniqueQuery;
exports.calculateNormalDistribution = calculateNormalDistribution;
exports.calculateScalingFactor = calculateScalingFactor;
exports.checkForSupportedPieChart = checkForSupportedPieChart;
exports.completeBoxPlotResults = completeBoxPlotResults;
exports.completeDataExceedLimitInfo = completeDataExceedLimitInfo;
exports.completeDataForEmptyCategoriesWithZeros = completeDataForEmptyCategoriesWithZeros;
exports.completeDataUnsupportedPieInfo = completeDataUnsupportedPieInfo;
exports.completeDataWithMissingCategories = completeDataWithMissingCategories;
exports.completeDataWithRendererSymbol = completeDataWithRendererSymbol;
exports.computeRendererSymbol = computeRendererSymbol;
exports.computeSliceLabel = computeSliceLabel;
exports.convertMultipleNumericFieldsData = convertMultipleNumericFieldsData;
exports.convertValueToRatio = convertValueToRatio;
exports.createDatefromAttributes = createDatefromAttributes;
exports.dataURItoBlob = dataURItoBlob;
exports.escapeBrackets = escapeBrackets;
exports.extractPercentValue = extractPercentValue;
exports.fetchAggregationDataStatistics = fetchAggregationDataStatistics;
exports.fetchFinishedBoxPlotData = fetchFinishedBoxPlotData;
exports.fetchFinishedBoxPlotSelectionData = fetchFinishedBoxPlotSelectionData;
exports.fetchFinishedGaugeData = fetchFinishedGaugeData;
exports.fetchFinishedGenericChartData = fetchFinishedGenericChartData;
exports.fetchFinishedGenericChartSelectionData = fetchFinishedGenericChartSelectionData;
exports.fetchFinishedHistogramData = fetchFinishedHistogramData;
exports.fetchFinishedLineChartTimeBinningData = fetchFinishedLineChartTimeBinningData;
exports.fetchFinishedScatterPlotData = fetchFinishedScatterPlotData;
exports.fetchGaugeByFeatureBounds = fetchGaugeByFeatureBounds;
exports.fetchHistogramSelectionData = fetchHistogramSelectionData;
exports.fetchOIDsFromWhereClause = fetchOIDsFromWhereClause;
exports.fetchRawScatterPlotAggregatedData = fetchRawScatterPlotAggregatedData;
exports.fetchStatisticGaugeBounds = fetchStatisticGaugeBounds;
exports.generateNonAggregatedSliceId = generateNonAggregatedSliceId;
exports.generateSliceId = generateSliceId;
exports.generateTruncationCallback = generateTruncationCallback;
exports.getAxisSeriesIds = getAxisSeriesIds;
exports.getBestInterval = getBestInterval;
exports.getData = getData;
exports.getDataItemRendererLabel = getDataItemRendererLabel;
exports.getDataOrderParameters = getDataOrderParameters;
exports.getDataWarningObject = getDataWarningObject;
exports.getDirectionallyStrongCharacter = getDirectionallyStrongCharacter;
exports.getFeatureValue = getFeatureValue;
exports.getFinalTrendLineData = getFinalTrendLineData;
exports.getFinalTrendLineDataClientSide = getFinalTrendLineDataClientSide;
exports.getGaugeAxisFactors = getGaugeAxisFactors;
exports.getGaugeDataInfo = getGaugeDataInfo;
exports.getGraphicTemplate = getGraphicTemplate;
exports.getGroupedSlicesDataItem = getGroupedSlicesDataItem;
exports.getMaximumNumberOfFeaturesToFetch = getMaximumNumberOfFeaturesToFetch;
exports.getMeanLinesBoxPlotConfig = getMeanLinesBoxPlotConfig;
exports.getNumberOfBinsWithinDataRange = getNumberOfBinsWithinDataRange;
exports.getOriginalXValueFromContext = getOriginalXValueFromContext;
exports.getPositionChanges = getPositionChanges;
exports.getRendererElementSymbol = getRendererElementSymbol;
exports.getRendererType = getRendererType;
exports.getSelectedData = getSelectedData;
exports.getSelectedElementData = getSelectedElementData;
exports.getSelectionItemsFromOIDs = getSelectionItemsFromOIDs;
exports.getSeriesColorList = getSeriesColorList;
exports.getShowMean = getShowMean;
exports.getSliceSymbol = getSliceSymbol;
exports.getTimeBinGroupByFieldsForStatistics = getTimeBinGroupByFieldsForStatistics;
exports.getTimeBinningStatistics = getTimeBinningStatistics;
exports.getTooltipHeadingText = getTooltipHeadingText;
exports.getTooltipLabelForBarLineFromFields = getTooltipLabelForBarLineFromFields;
exports.getTooltipYLabel = getTooltipYLabel;
exports.getTotalElementCount = getTotalElementCount;
exports.getTransformedQuery = getTransformedQuery;
exports.getXAxisField = getXAxisField;
exports.getXAxisValueFormat = getXAxisValueFormat;
exports.getXAxisValueFromContext = getXAxisValueFromContext;
exports.getXYChartScreenReaderText = getXYChartScreenReaderText;
exports.groupByWhenCaseForScatterPlotAggregation = groupByWhenCaseForScatterPlotAggregation;
exports.groupDataByCategory = groupDataByCategory;
exports.hasAnyGuideAboveChanged = hasAnyGuideAboveChanged;
exports.hasAxisLabelsBehaviorChanged = hasAxisLabelsBehaviorChanged;
exports.hasBinCountChanged = hasBinCountChanged;
exports.hasChartRendererChanged = hasChartRendererChanged;
exports.hasColorMatchChanged = hasColorMatchChanged;
exports.hasDualAxisChanged = hasDualAxisChanged;
exports.hasIntlTimeZoneChanged = hasIntlTimeZoneChanged;
exports.hasNumericFieldsChanged = hasNumericFieldsChanged;
exports.hasOutliersVisibilityChanged = hasOutliersVisibilityChanged;
exports.hasRotationChanged = hasRotationChanged;
exports.hasSelectionByItemsChanged = hasSelectionByItemsChanged;
exports.hasSeriesAxisChanged = hasSeriesAxisChanged;
exports.hasSlicesConfigChanged = hasSlicesConfigChanged;
exports.hasSplitByValueChanged = hasSplitByValueChanged;
exports.hasStandardizeValuesVisibilityChanged = hasStandardizeValuesVisibilityChanged;
exports.hasTimeIntervalInfoBeenReset = hasTimeIntervalInfoBeenReset;
exports.hasTransformationTypeChanged = hasTransformationTypeChanged;
exports.isAggregatedChart = isAggregatedChart;
exports.isBinnedServerDataResetNeeded = isBinnedServerDataResetNeeded;
exports.isCategoryValueFormat = isCategoryValueFormat;
exports.isChartAggregated = isChartAggregated;
exports.isChartStacked = isChartStacked;
exports.isColorMatchAllowed = isColorMatchAllowed;
exports.isDataUpdateNeeded = isDataUpdateNeeded;
exports.isDateValueFormat = isDateValueFormat;
exports.isElementFromGroupOfSlices = isElementFromGroupOfSlices;
exports.isElementPartOfSelection = isElementPartOfSelection;
exports.isNewSortNeeded = isNewSortNeeded;
exports.isNumberValueFormat = isNumberValueFormat;
exports.isPercentNumberValueFormat = isPercentNumberValueFormat;
exports.isPieChartGroupOfSlicesUpdateNeeded = isPieChartGroupOfSlicesUpdateNeeded;
exports.isScatterPlotAggregated = isScatterPlotAggregated;
exports.isSeriesTypeChangeAllowed = isSeriesTypeChangeAllowed;
exports.isSliceMatchingSelection = isSliceMatchingSelection;
exports.isSortBySeriesNeeded = isSortBySeriesNeeded;
exports.isTimeIntervalInfoComplete = isTimeIntervalInfoComplete;
exports.isValidLabelsIncrement = isValidLabelsIncrement;
exports.joinOIDs = joinOIDs;
exports.kebabize = kebabize;
exports.linspace = linspace;
exports.mapCursorRangeToCursorBehavior = mapCursorRangeToCursorBehavior;
exports.mapValueFormat = mapValueFormat;
exports.mergeExtents = mergeExtents;
exports.mergeRendererSymbolWithSeriesSymbol = mergeRendererSymbolWithSeriesSymbol;
exports.needsToCalculateTimeIntervalInfo = needsToCalculateTimeIntervalInfo;
exports.notifyAxesMinMaxChange = notifyAxesMinMaxChange;
exports.notifyBadDataRaise = notifyBadDataRaise;
exports.notifyChartUpdated = notifyChartUpdated;
exports.notifyDataFetched = notifyDataFetched;
exports.notifyDataProcessed = notifyDataProcessed;
exports.notifyLegendItemVisibilityChanged = notifyLegendItemVisibilityChanged;
exports.notifyRenderingCompleted = notifyRenderingCompleted;
exports.notifySelectionCompleted = notifySelectionCompleted;
exports.notifySeriesColorsChange = notifySeriesColorsChange;
exports.notifySeriesOrder = notifySeriesOrder;
exports.notifyTooManySelectedElements = notifyTooManySelectedElements;
exports.objectToWhereQuery = objectToWhereQuery;
exports.pieChartDataChanged = pieChartDataChanged;
exports.processDataForBoxPlot = processDataForBoxPlot;
exports.processTimeBinningData = processTimeBinningData;
exports.processUniqueQueryResults = processUniqueQueryResults;
exports.rebuildPieChartFetchedData = rebuildPieChartFetchedData;
exports.removeAdditionalStatistics = removeAdditionalStatistics;
exports.removeAdditionalStatisticsPerItem = removeAdditionalStatisticsPerItem;
exports.restoreAttributesCase = restoreAttributesCase;
exports.retrievePieSliceInfoFromConfig = retrievePieSliceInfoFromConfig;
exports.revertOriginalXValues = revertOriginalXValues;
exports.revertPieFromFieldsProperties = revertPieFromFieldsProperties;
exports.sanitizeData = sanitizeData;
exports.seedString = seedString;
exports.shouldCreateTicksAndLabels = shouldCreateTicksAndLabels;
exports.shouldUpdateWhiskersWithDefaultColor = shouldUpdateWhiskersWithDefaultColor;
exports.sortConfigSeries = sortConfigSeries;
exports.sortFetchedData = sortFetchedData;
exports.sortWebChartDataItemsUsingDirectionalSort = sortWebChartDataItemsUsingDirectionalSort;
exports.sortWebChartDataItemsUsingPredefinedLabels = sortWebChartDataItemsUsingPredefinedLabels;
exports.supportedSubTypesForCategoryTrimming = supportedSubTypesForCategoryTrimming;
exports.throwError = throwError;
exports.totalFeatureCount = totalFeatureCount;
exports.transformDateToQueryFormat = transformDateToQueryFormat;
exports.truncateWithEllipsis = truncateWithEllipsis;
exports.useCategoryAxis = useCategoryAxis;
exports.validateAxesValueFormat = validateAxesValueFormat;
