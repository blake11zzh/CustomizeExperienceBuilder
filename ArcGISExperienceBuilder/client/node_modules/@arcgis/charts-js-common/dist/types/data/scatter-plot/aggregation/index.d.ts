import type { WebChart, WebChartQuery } from "@arcgis/charts-spec";
import type { QueryObject, AbortControllerKeyType, ErrorStrings } from "@arcgis/charts-shared-utils";
import type Graphic from "@arcgis/core/Graphic";
import type { ChartOptions } from "../../../interfaces";
/**
 * Fetches some additional statistics needed for the aggregation feature.
 * @param props.statsMap The Map already storing the common statistics
 * @param props.queryObject The query object
 * @param props.chartConfig The chart configuration
 * @param props.options The chart options
 * @param props.queryConfig The query configuration
 * @param props.abortKey The abort key for the query
 */
export declare function fetchAggregationDataStatistics(props: {
    statsMap: Map<string, number>;
    queryObject: QueryObject;
    chartConfig: WebChart;
    options?: ChartOptions;
    queryConfig: WebChartQuery;
    abortKey?: AbortControllerKeyType;
}): Promise<void>;
/**
 * Fetches aggregated data for the scatter plot
 * @param props.statsMap The Map already storing the common statistics
 * @param props.queryObject The query object (layer or layer view)
 * @param props.chartConfig The chart configuration
 * @param props.options The chart options
 * @param props.queryConfig The query configuration
 * @param props.useQueryAttributeBins Whether to use the queryAttributeBins method
 * @param props.errorStrings The error strings
 * @param props.abortKey The abort key for the query
 */
export declare function fetchRawScatterPlotAggregatedData(props: {
    statsMap?: Map<string, number>;
    queryObject: QueryObject;
    chartConfig: WebChart;
    options?: ChartOptions;
    queryConfig: WebChartQuery;
    useQueryAttributeBins: boolean;
    errorStrings: ErrorStrings;
    abortKey?: AbortControllerKeyType;
}): Promise<Graphic[]>;
