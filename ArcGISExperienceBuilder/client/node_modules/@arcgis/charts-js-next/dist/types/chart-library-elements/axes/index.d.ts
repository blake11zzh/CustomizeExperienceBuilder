import type { Root } from "@amcharts/amcharts5";
import { AxisRendererX, AxisRendererY } from "@amcharts/amcharts5/xy";
import type { XYChart, Axis, AxisRenderer } from "@amcharts/amcharts5/xy";
import { AxisRendererCircular, AxisRendererRadial } from "@amcharts/amcharts5/radar";
import type { TimeIntervalInfo, WebChart, WebChartAxis, WebChartDataTypes, WebChartLabelBehavior } from "@arcgis/charts-spec";
import { WebChartTypes } from "@arcgis/charts-spec";
import type { CommonStrings, ErrorStrings } from "@arcgis/charts-shared-utils";
import type { List } from "@amcharts/amcharts5/.internal/core/util/List";
import type { AxisLabelFormatCallback, GuideTooltipFormatCallback } from "@arcgis/charts-js-common";
import type { UpdateAxesProps } from "../../interfaces";
import type { UpdateGaugeAxisProps } from "./gauge/interfaces";
/**
 * Function deciding whether we should create a category axis
 * @param props.isXAxis Whether the axis is the x-axis
 * @param props.chartType The chart type
 * @param props.valueFormat The axis value format
 * @param props.isAxisForHistogramOverlaySeries Whether the axis is for a histogram column series
 */
export declare function useCategoryAxis(props: {
    isXAxis: boolean;
    chartType?: WebChartTypes;
    valueFormat?: WebChartAxis["valueFormat"];
    isAxisForHistogramOverlaySeries?: boolean;
}): boolean;
/**
 * Initialize the correct type of axes.
 * - Need to initialize a new instance of NumberFormatter because otherwise all axes inherits the format from the chart object instead.
 * - Also assigns vanilla formatting (#) so that the NumberFormatter of the axis.
 * - This way, in `textOutput` adapter, we will get unformatted which is easier to manipulate.
 * @param props.root The root
 * @param props.axes The list of axes
 * @param props.isXAxis Whether the axis to initialize is the x-axis
 * @param props.axisRenderer The axis renderer
 * @param props.valueFormat The axis value format
 * @param props.isSecondValueAxis Whether we create a secondary value axis
 * @param props.chartType The chart type
 * @param props.isAxisForHistogramOverlaySeries Whether the axis is for a histogram overlay series
 */
export declare function initializeAxis(props: {
    root: Root;
    axes: List<Axis<AxisRenderer>>;
    isXAxis: boolean;
    axisRenderer: AxisRendererCircular | AxisRendererRadial | AxisRendererX | AxisRendererY;
    valueFormat: WebChartAxis["valueFormat"];
    isSecondValueAxis?: boolean;
    chartType?: WebChartTypes;
    isAxisForHistogramOverlaySeries?: boolean;
}): Axis<AxisRenderer> | undefined;
/**
 * Assigns the data to the axis
 * @param axis The axis to assign the data to
 * @param data The data to assign to the axis
 */
export declare function updateAxisData(axis: Axis<AxisRenderer>, data?: WebChartDataTypes): void;
/**
 * Updates an axis
 * props.chartConfig The chart's config
 * @param props.axis The axis to update
 * @param props.data The data to assign to the axis
 * @param props.axisConfig The axis's config
 * @param props.timeIntervalInfo The time interval info
 * @param props.horizontalAxisLabelsBehavior The horizontal axis labels behavior
 * @param props.verticalAxisLabelsBehavior The vertical axis labels behavior
 * @param props.axisLabelsBehaviorChanged Whether the axis labels behavior changed
 * @param props.anyGuideAboveChanged Whether any guide 'above' property was changed
 * @param props.isNonAggregatedChart Whether the chart is non-aggregated
 * @param props.isSecondValueAxis Whether the axis is the second value axis
 * @param props.axisLabelFormatter The axis value formatter
 * @param props.guideTooltipFormatter The guide's tooltip formatter
 * @param props.commonStrings List of t9n strings
 * @param props.errorStrings The t9n error strings
 */
export declare function updateAxis(props: {
    chartConfig: WebChart;
    axis: Axis<AxisRenderer>;
    data?: WebChartDataTypes;
    axisConfig: WebChartAxis;
    timeIntervalInfo?: TimeIntervalInfo;
    horizontalAxisLabelsBehavior?: WebChartLabelBehavior;
    verticalAxisLabelsBehavior?: WebChartLabelBehavior;
    axisLabelsBehaviorChanged?: [boolean, boolean];
    anyGuideAboveChanged?: boolean;
    isNonAggregatedChart?: boolean;
    isSecondValueAxis?: boolean;
    axisLabelFormatter?: AxisLabelFormatCallback;
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Initializes the chart's axes
 * props.chart The chart
 * props.chartConfig The chart's config
 * @param props.errorStrings The t9n error strings
 */
export declare function initializeAxes(props: {
    chart: XYChart;
    chartConfig: WebChart;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Updates the chart axes
 * @param props.chart The chart referencing the axes to update
 * @param props.chartConfig The chart's config
 */
export declare function updateAxes(props: UpdateAxesProps | UpdateGaugeAxisProps): Promise<void>;
