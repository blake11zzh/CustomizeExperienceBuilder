import { PieSeries } from "@amcharts/amcharts5/percent";
import type { InitializePieChartSeriesProps, UpdatePieChartSeriesProps } from "./interfaces";
import type { WebChart, WebChartDataTypes } from "@arcgis/charts-spec";
import type { CommonStrings, PieSlicesSymbols, QueryObject } from "@arcgis/charts-shared-utils";
import type { Root } from "@amcharts/amcharts5";
/**
 * Generates a slices array containing the slices id, label and style.
 * @param props.root The root element
 * @param props.data The chart data
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object (layer or layer view)
 * @param props.usePopupTemplateFieldsInfo Whether to use the popup template info for the aliases
 * @param props.labelUpdateNeeded Whether the labels were updated
 * @param props.commonStrings The common t9n strings
 */
export declare function computePieChartSlices(props: {
    root: Root;
    data?: WebChartDataTypes;
    chartConfig: WebChart;
    queryObject: QueryObject;
    usePopupTemplateFieldsInfo?: boolean;
    labelUpdateNeeded: boolean;
    commonStrings: CommonStrings;
}): Promise<PieSlicesSymbols>;
/**
 * Initialize a pie chart series
 * @param props.root The root element
 * @param props.seriesConfig The pie series configuration
 */
export declare function initializePieChartSeries(props: InitializePieChartSeriesProps): PieSeries;
/**
 * Updates a pie chart series
 * @param props.series The pie series
 * @param props.seriesConfig The pie series configuration
 * @param props.seriesWereReinitialized If the series were reinitialized
 * @param props.dataWasUpdated If the data was updated
 * @param props.sortChanged If the sort changed
 * @param props.data The data
 */
export declare function updatePieChartSeries(props: UpdatePieChartSeriesProps): void;
