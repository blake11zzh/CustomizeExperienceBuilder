import type { Series, Graphics, Chart } from "@amcharts/amcharts5";
import type { AxisRenderer, Axis, XYSeries } from "@amcharts/amcharts5/xy";
import { XYChart, LineSeries, ColumnSeries } from "@amcharts/amcharts5/xy";
import type { DataUpdateNeededDetails } from "@arcgis/charts-js-common";
import type { SubtypeInfo } from "@arcgis/charts-shared-utils";
import type { WebChartSeriesType, WebChart, WebChartLineChartSeries, IField, WebChartSeries, WebChartBarChartSeries, WebChartRadarChartSeries } from "@arcgis/charts-spec";
import { WebChartTypes } from "@arcgis/charts-spec";
import type { ApplySelectionOnSeriesProps } from "../../../selection/apply/interfaces";
import type { StyleCallbackProps } from "../interfaces";
/**
 * Returns the data fields to be used by the series
 * @param chartConfig The chart config
 * @param seriesConfig The series config
 */
export declare function getBarOrLineSeriesDataFields(chartConfig: WebChart, seriesConfig: WebChartBarChartSeries | WebChartLineChartSeries | WebChartRadarChartSeries): {
    xField: string;
    yField: string;
    xAxisField: string;
    yAxisField: string;
};
/**
 * Function applying a specific pattern to apply a selection to a series. See `addSeriesStyleOrSelectionCallback()` for
 * more details.
 * @param props.callbackProps The input properties for `applySelectionOnSeries()``
 * @param props.series The series instance
 * @param props.seriesConfig The series config
 * @param props.delayUpdate Whether to delay the update
 */
export declare function addSelectionCallback(props: {
    callbackProps: ApplySelectionOnSeriesProps;
    series: Series;
    seriesConfig: WebChartSeriesType;
    delayUpdate?: boolean;
}): void;
/**
 * Function applying a specific pattern to style a series. See `addSeriesStyleOrSelectionCallback()` for
 * more details.
 * @param props.styleCallback The function to execute to style the series
 * @param props.callbackProps The input properties for props.styleCallback
 * @param props.series The series instance
 * @param props.seriesConfig The series config
 * @param props.delayUpdate Whether to delay the update
 */
export declare function addSeriesStylingCallback(props: {
    styleCallback: (props: StyleCallbackProps) => Promise<void> | void;
    callbackProps: StyleCallbackProps;
    series: Series;
    seriesConfig: WebChartSeriesType;
    delayUpdate?: boolean;
}): void;
/**
 * Returns a list containing the visible series id, or `undefined` when the chart doesn't have series.
 * The latter can happen during the initialization step, in which case we want to make a distinction between
 * a chart with no visible series (=> []) and one that's not initialized yet (=> undefined).
 * @param chart The chart containing the series
 */
export declare function getVisibleSeriesIDs(chart?: XYChart): string[] | undefined;
/**
 * Updates the series properties according to the stacked type in the series config.
 * @param props.series The series instance
 * @param props.chartConfig The chart config
 * @param props.isRotated Bool if chart is rotated
 */
export declare function updateSeriesStackedType(props: {
    series: ColumnSeries | LineSeries;
    chartConfig: WebChart;
    isRotated: boolean | undefined;
}): void;
/**
 * Updates a series name
 * @param series The series instance
 * @param seriesName The new series name
 */
export declare function updateSeriesName(series: Series, seriesName: string): void;
/**
 * Retrieves X and Y axes from chart
 * @param props.chart The chart
 * @param props.chartType The chart type
 * @param props.rotated Whether the chart is rotated
 * @param props.assignToSecondValueAxis If series should be assigned to the second value axis
 */
export declare function getAxes(props: {
    chart: XYChart;
    chartType?: WebChartTypes;
    rotated?: boolean;
    assignToSecondValueAxis?: boolean;
}): {
    xAxis: Axis<AxisRenderer> | undefined;
    xAxisForHistogramOverlaySeries: Axis<AxisRenderer> | undefined;
    yAxis: Axis<AxisRenderer> | undefined;
};
/**
 * set the accessibility features for the amCharts series elements
 * @param series - the series to set the accessibility features
 */
export declare function setAccessibilityFeatures(series: Series): void;
/**
 * Indicates whether the series need to be reinitialized.
 * @param props.chart The chart
 * @param props.chartConfig The chart's config
 * @param props.updateNeededDetails The details of why the update was needed
 */
export declare function isInitializingSeriesNeeded(props: {
    chart: XYChart;
    chartConfig: WebChart;
    updateNeededDetails?: DataUpdateNeededDetails;
}): boolean;
/**
 * Updates a bar or line series name, considering the coded domain / subtype potentially attached to the field used to display the series name in the legend.
 * @param props.chartConfig The chart configuration
 * @param props.seriesIndex The series index
 * @param props.series The series instance
 * @param props.subtypeInfo The subtype info
 * @param props.fieldList The layer's field list
 */
export declare function updateBarOrLineSeriesName(props: {
    chartConfig: WebChart;
    seriesIndex: number;
    series: Series;
    subtypeInfo?: SubtypeInfo;
    fieldList?: IField[];
}): void;
/**
 * Finds the series config associated to the series instance, based on its id.
 * @param seriesInstance The series instance
 * @param chartConfig The chart config
 * @returns The matching series config when found
 */
export declare function findSeriesConfig(seriesInstance: Series, chartConfig?: WebChart): WebChartSeries | undefined;
/**
 * This function checks if the marker is within the visible range of the axes and hides it if it is not.
 * Based on amCharts suggestion: https://help.amcharts.com/hc/en-us/requests/100228
 * Refer to: https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8286
 * @param marker The marker to check if it is out of the chart's container (or plot container).
 * @param series The series the marker belongs too
 */
export declare function checkMarkerPosition(marker: Graphics, series: XYSeries): void;
/**
 * Determines if color match has been applied to the chart.
 * @param chart The chart
 * @param chartConfig A specific chart config
 * @returns
 */
export declare function hasColorMatchBeenApplied(chart: Chart, chartConfig?: WebChart): boolean;
