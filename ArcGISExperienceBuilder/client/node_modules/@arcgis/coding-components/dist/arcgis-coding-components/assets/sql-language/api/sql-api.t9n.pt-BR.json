[{"id":"date_functions","title":"Funções de data","items":[{"type":"function","name":"current_date","bundle":"date","description":"Retorna a data atual em UTC.","examples":"\n##### Exemplo\n\nRetorna a data atual em UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna a data atual em UTC.\n\n**Retornar valor**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Retorna a data e hora UTC atuais em horas, minutos e segundos.","examples":"\n##### Exemplo\n\nRetorna a data e hora UTC atuais em horas, minutos e segundos.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna a data e hora UTC atuais em horas, minutos e segundos.\n\n**Retornar valor**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Retorna a data e hora UTC atuais em horas, minutos, segundos e milissegundos.","examples":"\n##### Exemplo\n\nRetorna a data e hora UTC atuais em horas, minutos, segundos e milissegundos.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna a data e hora UTC atuais em horas, minutos, segundos e milissegundos.\n\n**Retornar valor**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Retorna uma única parte de uma data e hora, como ano, mês, dia, hora, minuto ou segundo.","examples":"\n##### Exemplos\n\nRetorna 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nRetorna 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nRetorna 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna uma única parte de uma data e hora, como ano, mês, dia, hora, minuto ou segundo.\n\n**Parâmetros**\n\n- **part**: A parte a ser extraída da data. Valores possíveis: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: A data de onde extrair uma parte.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Funções de string","items":[{"type":"function","name":"char_length","bundle":"string","description":"Retorna o número de caracteres na string de texto como um inteiro.","examples":"\n##### Exemplo\n\nRetorna 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o número de caracteres na string de texto como um inteiro.\n\n**Parâmetro**\n\n- **string**: A string de texto para retornar o comprimento.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Retorna o primeiro valor na lista que não é `NULL`. Todos os valores passados ​​para a função devem ser do mesmo tipo, com exceção dos valores `NULL`.","examples":"\n##### Exemplos\n\nRetorna 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nRetorna -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o primeiro valor na lista que não é `NULL`. Todos os valores passados ​​para a função devem ser do mesmo tipo, com exceção dos valores `NULL`.\n\n**Parâmetros**\n\n- **value1**: O primeiro valor na lista.\n- **valueN**: O(s) valor(es) subsequente(s) na lista.\n\n**Retornar valor**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Concatena duas strings.","examples":"\n##### Exemplo\n\nRetorna 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Concatena duas strings.\n\n**Parâmetros**\n\n- **string1**: A primeira string de texto.\n- **string2**: A string de texto para concatenar na primeira string de texto.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Retorna o nome de usuário do usuário atualmente conectado ao portal.","examples":"\n##### Exemplo\n\nRetorna o nome de usuário do usuário atualmente conectado ao portal.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o nome de usuário do usuário atualmente conectado ao portal.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Converte todos os caracteres na sequência de texto em minúsculas.","examples":"\n##### Exemplo\n\nRetorna 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte todos os caracteres na sequência de texto em minúsculas.\n\n**Parâmetro**\n\n- **string**: A string de texto para converter em letra minúscula.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Retorna a primeira ocorrência de uma substring em outra string de texto. Retorna 0 se a substring não for encontrada.","examples":"\n##### Exemplos\n\nRetorna 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nRetorna 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna a primeira ocorrência de uma substring em outra string de texto. Retorna 0 se a substring não for encontrada.\n\n**Parâmetros**\n\n- **substring**: A sequência de texto a ser pesquisada.\n- **string**: A string que será pesquisada para a substring.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Retorna um subconjunto de caracteres em uma sequência de texto de um ponto inicial até o comprimento de sequência especificado.","examples":"\n##### Exemplo\n\nRetorna 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna um subconjunto de caracteres em uma sequência de texto de um ponto inicial até o comprimento de sequência especificado.\n\n**Parâmetros**\n\n- **string**: A string de texto para extrair.\n- **start**: O valor inteiro que especifica onde os caracteres retornados começarão.\n- **length**: O número de caracteres para extrair.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Retorna um subconjunto de caracteres em uma sequência de texto de um ponto inicial até o comprimento de sequência especificado.","examples":"\n##### Exemplos\n\nRetorna 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nRetorna 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna um subconjunto de caracteres em uma sequência de texto de um ponto inicial até o comprimento de sequência especificado.\n\n**Parâmetros**\n\n- **string**: A string de texto para extrair.\n- **start**: O valor inteiro que especifica onde os caracteres retornados começarão.\n- **length**: O número de caracteres para extrair.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Retorna um string de texto onde todos os espaços iniciais e/ou finais ou outros caracteres especificados foram removidos. LEADING cortará o lado inicial da string de texto, TRAILING cortará o lado final da string de texto, enquanto BOTH cortará ambos os lados da string de texto.","examples":"\n##### Exemplos\n\nRetorna 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nRetorna '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nRetorna 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna um string de texto onde todos os espaços iniciais e/ou finais ou outros caracteres especificados foram removidos. LEADING cortará o lado inicial da string de texto, TRAILING cortará o lado final da string de texto, enquanto BOTH cortará ambos os lados da string de texto.\n\n**Parâmetros**\n\n- **side**: O lado da string de texto onde o(s) espaço(s) ou caractere(s) serão removidos. Valores possíveis: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: O(s) caractere(s) que serão cortados da string de texto.\n- **string**: A string de texto para recortar.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Converte todos os caracteres na string de texto em maiúsculas.","examples":"\n##### Exemplo\n\nRetorna 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte todos os caracteres na string de texto em maiúsculas.\n\n**Parâmetro**\n\n- **string**: A string a ser convertida para maiúsculas.\n\n**Retornar valor**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"numeric_functions","title":"Funções numéricas","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Retorna o valor absoluto do número.","examples":"\n##### Exemplo\n\nRetorna 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o valor absoluto do número.\n\n**Parâmetro**\n\n- **number**: Um número no qual executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Retorna o arco cosseno de um número.","examples":"\n##### Exemplo\n\nRetorna 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o arco cosseno de um número.\n\n**Parâmetro**\n\n- **number**: Um número entre -1 e 1 para executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Retorna o arco seno de um número.","examples":"\n##### Exemplo\n\nRetorna 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o arco seno de um número.\n\n**Parâmetro**\n\n- **number**: Um número entre -1 e 1 para executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Retorna o arco tangente de um número.","examples":"\n##### Exemplo\n\nRetorna 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o arco tangente de um número.\n\n**Parâmetro**\n\n- **number**: Um número no qual executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Converte um valor de um tipo de dado para outro. O parâmetro dataType determinará para qual tipo o valor será convertido. FLOAT converte o valor em um double, INTEGER converte o valor em um inteiro, etc.","examples":"\n##### Exemplos\n\nRetorna 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nRetorna '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nRetorna '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte um valor de um tipo de dado para outro. O parâmetro dataType determinará para qual tipo o valor será convertido. FLOAT converte o valor em um double, INTEGER converte o valor em um inteiro, etc.\n\n**Parâmetros**\n\n- **value**: O valor para converter em outro tipo de dados.\n- **dataType**: O tipo de dados para o qual o valor será convertido. Valores possíveis: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Retornar valor**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Retorna o menor inteiro maior ou igual ao número.","examples":"\n##### Exemplo\n\nRetorna 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o menor inteiro maior ou igual ao número.\n\n**Parâmetro**\n\n- **number**: O número para arredondar acima.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Retorna o cosseno trigonométrico do número, que é considerado um ângulo em radianos.","examples":"\n##### Exemplo\n\nRetorna -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o cosseno trigonométrico do número, que é considerado um ângulo em radianos.\n\n**Parâmetro**\n\n- **number**: Um ângulo em radianos para executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Retorna o maior inteiro que é menor ou igual ao número.","examples":"\n##### Exemplo\n\nRetorna 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o maior inteiro que é menor ou igual ao número.\n\n**Parâmetro**\n\n- **number**: O número a ser arredondado para baixo.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Retorna o logaritmo natural (base e) do número.","examples":"\n##### Exemplo\n\nRetorna 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o logaritmo natural (base e) do número.\n\n**Parâmetro**\n\n- **number**: Um número maior que 0 no qual a operação será executada.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Retorna o logaritmo de base-10 do número.","examples":"\n##### Exemplo\n\nRetorna 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o logaritmo de base-10 do número.\n\n**Parâmetro**\n\n- **number**: Um número no qual a operação será executada que seja maior que 0.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Retorna o restante após dividir um dividendo por um divisor. Tanto o dividendo quanto o divisor devem ser inteiros.","examples":"\n##### Exemplo\n\nRetorna 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o restante após dividir um dividendo por um divisor. Tanto o dividendo quanto o divisor devem ser inteiros.\n\n**Parâmetros**\n\n- **x**: O número que representa o dividendo.\n- **y**: O número representando o divisor.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Retorna `NULL` se expressão1 for igual a expressão2, caso contrário retorna expressão1. Os valores para expression1 e expression2 devem ser do mesmo tipo. NULLIF é comumente usado para evitar erros de divisão por zero, definindo expression2 como 0.","examples":"\n##### Exemplos\n\nRetorna `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nRetorna 32\n\n```sql\nNULLIF(32, 0)\n```\n\nRetorna `null` se POP18 for igual a 0, caso contrário, retorna o valor de TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna `NULL` se expressão1 for igual a expressão2, caso contrário retorna expressão1. Os valores para expression1 e expression2 devem ser do mesmo tipo. NULLIF é comumente usado para evitar erros de divisão por zero, definindo expression2 como 0.\n\n**Parâmetros**\n\n- **expression1**: Um valor no qual a operação será executada.\n- **expression2**: Um valor no qual a operação será executada.\n\n**Retornar valor**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Retorna o valor do número elevado à potência especificada.","examples":"\n##### Exemplo\n\nRetorna 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o valor do número elevado à potência especificada.\n\n**Parâmetros**\n\n- **x**: O número no qual executar a operação.\n- **y**: O expoente indicando o número de vezes para multiplicar o número isoladamente.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Arredonda o número para o comprimento especificado.","examples":"\n##### Exemplos\n\nRetorna 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nRetorna 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Arredonda o número para o comprimento especificado.\n\n**Parâmetros**\n\n- **number**: O número a ser arredondado.\n- **length**: O número de casas decimais para arredondar o número. Um comprimento positivo arredonda o número para a casa decimal especificada. Um comprimento negativo arredondará o número para a esquerda da vírgula decimal.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Retorna o sinal de um número fornecido. Um número negativo retornará -1. Um número positivo retornará 1.","examples":"\n##### Exemplos\n\nRetorna -1\n\n```sql\nSIGN(-132)\n```\n\nRetorna 0\n\n```sql\nSIGN(0)\n```\n\nRetorna 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o sinal de um número fornecido. Um número negativo retornará -1. Um número positivo retornará 1.\n\n**Parâmetro**\n\n- **number**: Um número no qual executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Retorna o seno trigonométrico do número, que é assumido para ser um ângulo em radianos.","examples":"\n##### Exemplo\n\nRetorna 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna o seno trigonométrico do número, que é assumido para ser um ângulo em radianos.\n\n**Parâmetro**\n\n- **number**: Um ângulo em radianos para executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Retorna a tangente de um número, que é assumida para ser um ângulo em radianos.","examples":"\n##### Exemplo\n\nRetorna 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna a tangente de um número, que é assumida para ser um ângulo em radianos.\n\n**Parâmetro**\n\n- **number**: Um ângulo em radianos para executar a operação.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Retorna um número truncado.","examples":"\n##### Exemplos\n\nRetorna 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nRetorna 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nRetorna 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retorna um número truncado.\n\n**Parâmetros**\n\n- **number**: Um número para truncar.\n- **decimals**: Um valor positivo trunca o número para a casa decimal especificada. Um valor negativo trunca o número à esquerda da vírgula decimal.\n\n**Retornar valor**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]