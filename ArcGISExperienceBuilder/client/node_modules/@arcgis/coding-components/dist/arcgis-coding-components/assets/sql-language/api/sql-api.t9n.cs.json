[{"id":"numeric_functions","title":"Číselné funkce","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Vrátí absolutní hodnotu čísla.","examples":"\n##### Příklad\n\nVrátí 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí absolutní hodnotu čísla.\n\n**Parametr**\n\n- **number**: Číslo, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Vrátí arkus kosinus čísla.","examples":"\n##### Příklad\n\nVrátí 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí arkus kosinus čísla.\n\n**Parametr**\n\n- **number**: Číslo mezi -1 a 1, se kterým se má operace provést.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Vrátí arkus sinus čísla.","examples":"\n##### Příklad\n\nVrátí 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí arkus sinus čísla.\n\n**Parametr**\n\n- **number**: Číslo mezi -1 a 1, se kterým se má operace provést.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Vrátí arkus tangens čísla.","examples":"\n##### Příklad\n\nVrátí 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí arkus tangens čísla.\n\n**Parametr**\n\n- **number**: Číslo, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Převede hodnotu z jednoho typu dat na jiný. Parametr dataType určí, na jaký typ je hodnota převedena. FLOAT převede hodnotu na desetinné číslo s dvojitou přesností, INTEGER převede hodnotu na celé číslo atd.","examples":"\n##### Ukázky\n\nVrátí 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nVrátí '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nVrátí '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Převede hodnotu z jednoho typu dat na jiný. Parametr dataType určí, na jaký typ je hodnota převedena. FLOAT převede hodnotu na desetinné číslo s dvojitou přesností, INTEGER převede hodnotu na celé číslo atd.\n\n**Parametry**\n\n- **value**: Hodnota, která se má převést na jiný typ dat.\n- **dataType**: Typ dat, na který se má hodnota převést. Možné hodnoty: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Vrácená hodnota**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Vrátí nejmenší celé číslo větší nebo rovné danému číslu.","examples":"\n##### Příklad\n\nVrátí 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí nejmenší celé číslo větší nebo rovné danému číslu.\n\n**Parametr**\n\n- **number**: Číslo, které se má zaokrouhlit nahoru.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Vrátí trigonometrický kosinus čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.","examples":"\n##### Příklad\n\nVrátí -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí trigonometrický kosinus čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.\n\n**Parametr**\n\n- **number**: Úhel v radiánech, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Vrátí největší celé číslo menší nebo rovné danému číslu.","examples":"\n##### Příklad\n\nVrátí 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí největší celé číslo menší nebo rovné danému číslu.\n\n**Parametr**\n\n- **number**: Číslo, které se má zaokrouhlit dolů.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Vrátí přirozený logaritmus (základ e) daného čísla.","examples":"\n##### Příklad\n\nVrátí 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí přirozený logaritmus (základ e) daného čísla.\n\n**Parametr**\n\n- **number**: Číslo větší než 0, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Vrátí dekadický logaritmus daného čísla.","examples":"\n##### Příklad\n\nVrátí 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí dekadický logaritmus daného čísla.\n\n**Parametr**\n\n- **number**: Číslo, se kterým má být provedena operace, které je větší než 0.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Vrátí zbytek po dělení dělence dělitelem. Dělenec i dělitel musí být celá čísla.","examples":"\n##### Příklad\n\nVrátí 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí zbytek po dělení dělence dělitelem. Dělenec i dělitel musí být celá čísla.\n\n**Parametry**\n\n- **x**: Číslo představující dělence.\n- **y**: Číslo představující dělitele.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Vrátí `NULL`, pokud se expression1 rovná expression2, jinak vrátí expression1. Hodnoty pro expression1 a expression2 musí být stejného typu. NULLIF se zpravidla používá k ochraně proti chybám vzniklým dělením nulou nastavením výrazu expression2 na 0.","examples":"\n##### Ukázky\n\nVrátí 'null'\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nVrátí 32\n\n```sql\nNULLIF(32, 0)\n```\n\nVrátí 'null', pokud se POP18 rovná 0, jinak vrátí hodnotu TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí `NULL`, pokud se expression1 rovná expression2, jinak vrátí expression1. Hodnoty pro expression1 a expression2 musí být stejného typu. NULLIF se zpravidla používá k ochraně proti chybám vzniklým dělením nulou nastavením výrazu expression2 na 0.\n\n**Parametry**\n\n- **expression1**: Hodnota, se kterou má být provedena operace.\n- **expression2**: Hodnota, se kterou má být provedena operace.\n\n**Vrácená hodnota**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Vrátí hodnotu konkrétní mocniny čísla.","examples":"\n##### Příklad\n\nVrátí 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí hodnotu konkrétní mocniny čísla.\n\n**Parametry**\n\n- **x**: Číslo, se kterým má být provedena operace.\n- **y**: Exponent určující, kolikrát se má číslo vynásobit sebou samým.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Zaokrouhlí číslo na konkrétní délku.","examples":"\n##### Ukázky\n\nVrátí 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nVrátí 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zaokrouhlí číslo na konkrétní délku.\n\n**Parametry**\n\n- **number**: Číslo, které se má zaokrouhlit.\n- **length**: Počet desetinných míst pro zaokrouhlení čísla. Kladná délka zaokrouhlí číslo na konkrétní desetinné místo. Záporná délka zaokrouhlí číslo nalevo od desetinné čárky.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Vrátí znaménko daného čísla. Záporné číslo vrátí -1. Kladné číslo vrátí 1.","examples":"\n##### Ukázky\n\nVrátí -1\n\n```sql\nSIGN(-132)\n```\n\nVrátí 0\n\n```sql\nSIGN(0)\n```\n\nVrátí 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí znaménko daného čísla. Záporné číslo vrátí -1. Kladné číslo vrátí 1.\n\n**Parametr**\n\n- **number**: Číslo, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Vrátí trigonometrický sinus čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.","examples":"\n##### Příklad\n\nVrátí 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí trigonometrický sinus čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.\n\n**Parametr**\n\n- **number**: Úhel v radiánech, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Vrátí tangens čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.","examples":"\n##### Příklad\n\nVrátí 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí tangens čísla, u kterého se předpokládá, že se jedná o úhel v radiánech.\n\n**Parametr**\n\n- **number**: Úhel v radiánech, se kterým má být provedena operace.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Vrátí zkrácené číslo.","examples":"\n##### Ukázky\n\nVrátí 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nVrátí 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nVrátí 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí zkrácené číslo.\n\n**Parametry**\n\n- **number**: Číslo, které se má zkrátit.\n- **decimals**: Kladná hodnota zkrátí číslo na konkrétní desetinné místo. Záporná hodnota zkrátí číslo nalevo od desetinné čárky.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"date_functions","title":"Funkce data","items":[{"type":"function","name":"current_date","bundle":"date","description":"Vrátí aktuální datum v pásmu UTC.","examples":"\n##### Příklad\n\nVrátí aktuální datum v pásmu UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí aktuální datum v pásmu UTC.\n\n**Vrácená hodnota**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Vrátí aktuální datum a čas v hodinách, minutách a sekundách v pásmu UTC.","examples":"\n##### Příklad\n\nVrátí aktuální datum a čas v hodinách, minutách a sekundách v pásmu UTC.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí aktuální datum a čas v hodinách, minutách a sekundách v pásmu UTC.\n\n**Vrácená hodnota**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Vrátí aktuální datum a čas v hodinách, minutách, sekundách a milisekundách v pásmu UTC.","examples":"\n##### Příklad\n\nVrátí aktuální datum a čas v hodinách, minutách, sekundách a milisekundách v pásmu UTC.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí aktuální datum a čas v hodinách, minutách, sekundách a milisekundách v pásmu UTC.\n\n**Vrácená hodnota**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Vrátí jednu část data a času, např. rok, měsíc, den, hodinu, minutu nebo sekundu.","examples":"\n##### Ukázky\n\nVrátí 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nVrátí 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nVrátí 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí jednu část data a času, např. rok, měsíc, den, hodinu, minutu nebo sekundu.\n\n**Parametry**\n\n- **part**: Část, která se má extrahovat z data. Možné hodnoty: 'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE', 'SECOND'.\n- **datetime**: Datum, ze kterého se má část extrahovat.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Řetězcové funkce","items":[{"type":"function","name":"char_length","bundle":"string","description":"Vrátí počet znaků v textovém řetězci jako celé číslo.","examples":"\n##### Příklad\n\nVrátí 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí počet znaků v textovém řetězci jako celé číslo.\n\n**Parametr**\n\n- **string**: Textový řetězec, jehož délka má být vrácena.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Vrátí první hodnotu v seznamu, která není 'NULL'. Všechny hodnoty předané této funkci musí být stejného typu, s výjimkou hodnot 'NULL'.","examples":"\n##### Ukázky\n\nVrátí 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nVrátí -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí první hodnotu v seznamu, která není 'NULL'. Všechny hodnoty předané této funkci musí být stejného typu, s výjimkou hodnot 'NULL'.\n\n**Parametry**\n\n- **value1**: První hodnota v seznamu.\n- **valueN**: Následující hodnoty v seznamu.\n\n**Vrácená hodnota**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Spojí dva řetězce do jednoho.","examples":"\n##### Příklad\n\nVrátí 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Spojí dva řetězce do jednoho.\n\n**Parametry**\n\n- **string1**: První textový řetězec.\n- **string2**: Textový řetězec, který se má spojit s prvním textovým řetězcem.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Vrátí uživatelské jméno aktuálně přihlášeného uživatele na portálu.","examples":"\n##### Příklad\n\nVrátí uživatelské jméno aktuálně přihlášeného uživatele na portálu.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí uživatelské jméno aktuálně přihlášeného uživatele na portálu.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Převede všechny znaky v textovém řetězci na malá písmena.","examples":"\n##### Příklad\n\nVrátí 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Převede všechny znaky v textovém řetězci na malá písmena.\n\n**Parametr**\n\n- **string**: Textový řetězec, který se má převést na malá písmena.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Vrátí první výskyt podřetězce v jiném textovém řetězci. Vrátí 0 pokud podřetězec není nalezen.","examples":"\n##### Ukázky\n\nVrátí 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nVrátí 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí první výskyt podřetězce v jiném textovém řetězci. Vrátí 0 pokud podřetězec není nalezen.\n\n**Parametry**\n\n- **substring**: Textový řetězec, který se má hledat.\n- **string**: Řetězec, ve kterém se bude vyhledávat podřetězec.\n\n**Vrácená hodnota**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Vrátí podmnožinu znaků v textovém řetězci od počátečního bodu po konkrétní délku řetězce.","examples":"\n##### Příklad\n\nVrátí 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí podmnožinu znaků v textovém řetězci od počátečního bodu po konkrétní délku řetězce.\n\n**Parametry**\n\n- **string**: Textový řetězec, ze kterého se má extrahovat.\n- **start**: Celočíselná hodnota stanovující, kde začínají znaky, které má funkce vrátit.\n- **length**: Počet znaků, které se mají extrahovat.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Vrátí podmnožinu znaků v textovém řetězci od počátečního bodu po konkrétní délku řetězce.","examples":"\n##### Ukázky\n\nVrátí 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nVrátí 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí podmnožinu znaků v textovém řetězci od počátečního bodu po konkrétní délku řetězce.\n\n**Parametry**\n\n- **string**: Textový řetězec, ze kterého se má extrahovat.\n- **start**: Celočíselná hodnota stanovující, kde začínají znaky, které má funkce vrátit.\n- **length**: Počet znaků, které se mají extrahovat.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Vrátí textový řetězec, kde jsou odstraněny všechny počáteční a/nebo koncové mezery či jiné určené znaky. LEADING ořízne začátek textového řetězce, TRAILING ořízne konec textového řetězce, BOTH ořízne obě strany textového řetězce.","examples":"\n##### Ukázky\n\nVrátí 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nVrátí '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nVrátí 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Vrátí textový řetězec, kde jsou odstraněny všechny počáteční a/nebo koncové mezery či jiné určené znaky. LEADING ořízne začátek textového řetězce, TRAILING ořízne konec textového řetězce, BOTH ořízne obě strany textového řetězce.\n\n**Parametry**\n\n- **side**: Strana textového řetězce, ze které budou odebrány mezery nebo znaky. Možné hodnoty: 'LEADING', 'TRAILING', 'BOTH'.\n- **character**: Znaky, které budou oříznuty z textového řetězce.\n- **string**: Textový řetězec, který se má oříznout.a\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Převede všechny znaky v textovém řetězci na velká písmena.","examples":"\n##### Příklad\n\nVrátí 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Převede všechny znaky v textovém řetězci na velká písmena.\n\n**Parametr**\n\n- **string**: Řetězec, který se má převést na velká písmena.\n\n**Vrácená hodnota**: String"}},"parametersInfo":{"min":1,"max":1}}]}]