[{"id":"string_functions","title":"Dizi işlevleri","items":[{"type":"function","name":"char_length","bundle":"string","description":"Metin dizisindeki karakter sayısını bir tamsayı olarak döndürür.","examples":"\n##### Örnek\n\n11 döndürür\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Metin dizisindeki karakter sayısını bir tamsayı olarak döndürür.\n\n**Parametre**\n\n- **string**: Uzunluğu döndürülecek metin dizisi.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Listedeki `NULL` olmayan ilk değeri döndürür. İşleve aktarılan tüm değerler, `NULL` değerler hariç olmak üzere aynı türde olmalıdır.","examples":"\n##### Örnekler\n\n'Green goldfish' döndürür\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\n-21 döndürür\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Listedeki `NULL` olmayan ilk değeri döndürür. İşleve aktarılan tüm değerler, `NULL` değerler hariç olmak üzere aynı türde olmalıdır.\n\n**Parametreler**\n\n- **value1**: Listedeki ilk değer.\n- **valueN**: Listedeki diğer değerler.\n\n**Dönüş değeri**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"İki diziyi birleştirir.","examples":"\n##### Örnek\n\n'Maple syrup' döndürür\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"İki diziyi birleştirir.\n\n**Parametreler**\n\n- **string1**: İlk metin dizisi.\n- **string2**: İlk metin dizgisine bağlanacak olan metin dizisi.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Portalda oturum açmış olan kullanıcının kullanıcı adını döndürür.","examples":"\n##### Örnek\n\nPortalda oturum açmış olan kullanıcının kullanıcı adını döndürür.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Portalda oturum açmış olan kullanıcının kullanıcı adını döndürür.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Metin dizgisindeki tüm karakterleri küçük harfe dönüştürür.","examples":"\n##### Örnek\n\n'hello world' döndürür\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Metin dizgisindeki tüm karakterleri küçük harfe dönüştürür.\n\n**Parametre**\n\n- **string**: Küçük harfe dönüştürülecek metin dizisidir.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Başka bir metin dizgisinde bir alt dizginin ilk oluşumunu verir. Alt dizgi bulunamazsa 0 verir.","examples":"\n##### Örnekler\n\n6 döndürür\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\n9 döndürür\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Başka bir metin dizgisinde bir alt dizginin ilk oluşumunu verir. Alt dizgi bulunamazsa 0 verir.\n\n**Parametreler**\n\n- **substring**: Aranacak metin dizisi.\n- **string**: Alt dizi için aranacak dizi.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Bir başlangıç noktasından belirtilen dizgi uzunluğuna kadar bir metin dizgisindeki karakterlerin alt kümesini verir.","examples":"\n##### Örnek\n\n'City' döndürür\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir başlangıç noktasından belirtilen dizgi uzunluğuna kadar bir metin dizgisindeki karakterlerin alt kümesini verir.\n\n**Parametreler**\n\n- **string**: İçinden çıkarılacak metin dizisi.\n- **start**: Döndürülen karakterlerin nereden başlayacağını belirten tamsayı değeri.\n- **length**: Ayıklanacak karakter sayısı.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Bir başlangıç noktasından belirtilen dizgi uzunluğuna kadar bir metin dizgisindeki karakterlerin alt kümesini verir.","examples":"\n##### Örnekler\n\n'City' döndürür\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\n'New York' döndürür\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir başlangıç noktasından belirtilen dizgi uzunluğuna kadar bir metin dizgisindeki karakterlerin alt kümesini verir.\n\n**Parametreler**\n\n- **string**: İçinden çıkarılacak metin dizisi.\n- **start**: Döndürülen karakterlerin nereden başlayacağını belirten tamsayı değeri.\n- **length**: Ayıklanacak karakter sayısı.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Baştaki ve/veya sondaki tüm boşlukların veya belirtilen diğer karakterlerin kaldırıldığı bir metin dizisi döndürür. LEADING metin dizisinin ön tarafını, TRAILING metin dizisinin arka tarafını, BOTH ise metin dizisinin her iki tarafını kırpacaktır.","examples":"\n##### Örnekler\n\n'myFunc' döndürür\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\n'  hello world' döndürür\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\n'hello world' döndürür\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Baştaki ve/veya sondaki tüm boşlukların veya belirtilen diğer karakterlerin kaldırıldığı bir metin dizisi döndürür. LEADING metin dizisinin ön tarafını, TRAILING metin dizisinin arka tarafını, BOTH ise metin dizisinin her iki tarafını kırpacaktır.\n\n**Parametreler**\n\n- **side**: Metin dizisinin boşlukların veya karakterlerin kaldırılacağı tarafı. Olası değerler: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Metin dizisinden kırpılacak karakterler.\n- **string**: Kırpılacak metin dizisi.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Metin dizgisindeki tüm karakterleri büyük harfe dönüştürür.","examples":"\n##### Örnek\n\n'QUICK RED FOX' döndürür\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Metin dizgisindeki tüm karakterleri büyük harfe dönüştürür.\n\n**Parametre**\n\n- **string**: Büyük harfe dönüştürülecek dizidir.\n\n**Dönüş değeri**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"numeric_functions","title":"Sayısal işlevler","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Bir sayının mutlak değerini döndürür.","examples":"\n##### Örnek\n\n2 döndürür\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir sayının mutlak değerini döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Bir sayının yay kosinüsünü döndürür.","examples":"\n##### Örnek\n\n1.26610367 döndürür\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir sayının yay kosinüsünü döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı -1 ile 1 arasında bir sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Bir sayının yay sinüsünü döndürür.","examples":"\n##### Örnek\n\n0.30469265 döndürür\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir sayının yay sinüsünü döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı -1 ile 1 arasında bir sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Bir sayının yay tanjantını döndürür.","examples":"\n##### Örnek\n\n0.78539816 döndürür\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir sayının yay tanjantını döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Bir değeri bir veri türünden diğerine dönüştürür. dataType parametresi, değerin hangi türe dönüştürüleceğini belirler. FLOAT, değeri bir double'a dönüştürür; INTEGER, değeri bir tamsayıya dönüştürür, vb.","examples":"\n##### Örnekler\n\n2 döndürür\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\n'1:00 PM' döndürür\n\n```sql\nCAST('13:00' AS TIME)\n```\n\n\"50\" döndürür\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir değeri bir veri türünden diğerine dönüştürür. dataType parametresi, değerin hangi türe dönüştürüleceğini belirler. FLOAT, değeri bir double'a dönüştürür; INTEGER, değeri bir tamsayıya dönüştürür, vb.\n\n**Parametreler**\n\n- **value**: Başka bir veri türüne dönüştürülecek değerdir.\n- **dataType**: Değerin dönüştürüleceği veri türü. Olası değerler: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Dönüş değeri**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Sayıdan büyük veya sayıya eşit en küçük tamsayıyı verir.","examples":"\n##### Örnek\n\n235 döndürür\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Sayıdan büyük veya sayıya eşit en küçük tamsayıyı verir.\n\n**Parametre**\n\n- **number**: Yukarı yuvarlanacak sayı.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Radyan cinsinden bir açı olduğu varsayılan sayının trigonometrik kosinüsünü döndürür.","examples":"\n##### Örnek\n\n-0.41614684 döndürür\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Radyan cinsinden bir açı olduğu varsayılan sayının trigonometrik kosinüsünü döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı radyan cinsinden açıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Sayıdan küçük veya sayıya eşit en büyük tamsayıyı verir.","examples":"\n##### Örnek\n\n12 döndürür\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Sayıdan küçük veya sayıya eşit en büyük tamsayıyı verir.\n\n**Parametre**\n\n- **number**: Aşağı yuvarlanacak sayı.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Sayının doğal algoritmasını (e tabanı) verir.","examples":"\n##### Örnek\n\n2.302585 döndürür\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Sayının doğal algoritmasını (e tabanı) verir.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı 0'dan büyük bir sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Sayının 10 tabanına göre algoritmasını verir.","examples":"\n##### Örnek\n\n0.301030 döndürür\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Sayının 10 tabanına göre algoritmasını verir.\n\n**Parametre**\n\n- **number**: Üzerinde işlem yapılacak olan ve 0'dan büyük olan bir sayı.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Bir bölenin bir bölen ile bölünmesinden sonra kalanı döndürür. Hem bölünen hem de bölen tam sayı olmalıdır.","examples":"\n##### Örnek\n\n2 döndürür\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir bölenin bir bölen ile bölünmesinden sonra kalanı döndürür. Hem bölünen hem de bölen tam sayı olmalıdır.\n\n**Parametreler**\n\n- **x**: Sayı bölüneni temsil eder.\n- **y**: Sayı böleni temsil eder.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"expression1, expression2'ye eşitse \"NULL\", aksi takdirde expression1 döndürür. expression1 ve expression2 için değerler aynı türde olmalıdır. NULLIF genellikle expression2'yi 0'a ayarlayarak sıfıra bölme hatalarını önlemek için kullanılır.","examples":"\n##### Örnekler\n\n`null` döndürür.\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\n32 döndürür\n\n```sql\nNULLIF(32, 0)\n```\n\nPOP18 0'a eşitse `null` döndürür, aksi takdirde TOTALPOP / POP18 değerini döndürür.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"expression1, expression2'ye eşitse \"NULL\", aksi takdirde expression1 döndürür. expression1 ve expression2 için değerler aynı türde olmalıdır. NULLIF genellikle expression2'yi 0'a ayarlayarak sıfıra bölme hatalarını önlemek için kullanılır.\n\n**Parametreler**\n\n- **expression1**: Üzerinde işlem gerçekleştirilecek olan değerdir.\n- **expression2**: Üzerinde işlem gerçekleştirilecek olan değerdir.\n\n**Dönüş değeri**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Belirtilen güce yükseltilen sayının değerini verir.","examples":"\n##### Örnek\n\n8 döndürür\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Belirtilen güce yükseltilen sayının değerini verir.\n\n**Parametreler**\n\n- **x**: İşlemin üzerinde uygulanacağı sayıdır.\n- **y**: Sayının kendisiyle kaç kez çarpılacağını gösteren üs değeridir.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Sayıyı belirtilen uzunluğa yuvarlar.","examples":"\n##### Örnekler\n\n3.98 döndürür\n\n```sql\nROUND(3.98024, 2)\n```\n\n200 döndürür\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Sayıyı belirtilen uzunluğa yuvarlar.\n\n**Parametreler**\n\n- **number**: Yuvarlanacak sayı.\n- **length**: Sayının yuvarlanacağı ondalık basamakların sayısıdır. Pozitif bir uzunluk, sayıyı belirtilen ondalık basamağa yuvarlar. Negatif bir uzunluk, sayıyı ondalık noktanın soluna yuvarlar.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Verilen bir sayının işaretini döndürür. Negatif bir sayı -1 döndürür. Pozitif bir sayı 1 döndürür.","examples":"\n##### Örnekler\n\n-1 döndürür\n\n```sql\nSIGN(-132)\n```\n\n0 döndürür\n\n```sql\nSIGN(0)\n```\n\n1 döndürür\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Verilen bir sayının işaretini döndürür. Negatif bir sayı -1 döndürür. Pozitif bir sayı 1 döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı sayıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Radyan cinsinden bir açı olduğu varsayılan sayının trigonometrik sinüsünü döndürür.","examples":"\n##### Örnek\n\n0.84147098 döndürür\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Radyan cinsinden bir açı olduğu varsayılan sayının trigonometrik sinüsünü döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı radyan cinsinden açıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Radyan cinsinden bir açı olduğu varsayılan bir sayının tanjantını döndürür.","examples":"\n##### Örnek\n\n2.57215162 döndürür\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Radyan cinsinden bir açı olduğu varsayılan bir sayının tanjantını döndürür.\n\n**Parametre**\n\n- **number**: İşlemin üzerinde uygulanacağı radyan cinsinden açıdır.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Kesilen bir sayı verir.","examples":"\n##### Örnekler\n\n91.3 döndürür\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\n124 döndürür\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\n1900 döndürür\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Kesilen bir sayı verir.\n\n**Parametreler**\n\n- **number**: Kesilecek sayıdır.\n- **decimals**: Pozitif bir değer, sayıyı belirtilen ondalık basamağa keser. Negatif bir değer, sayıyı ondalık noktanın solunda keser.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"date_functions","title":"Tarih fonksiyonları","items":[{"type":"function","name":"current_date","bundle":"date","description":"Geçerli tarihi UTC olarak döndürür.","examples":"\n##### Örnek\n\nGeçerli tarihi UTC olarak döndürür.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Geçerli tarihi UTC olarak döndürür.\n\n**Dönüş değeri**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Geçerli UTC tarihi ve saatini saat, dakika ve saniye olarak verir.","examples":"\n##### Örnek\n\nGeçerli UTC tarihi ve saatini saat, dakika ve saniye olarak verir.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Geçerli UTC tarihi ve saatini saat, dakika ve saniye olarak verir.\n\n**Dönüş değeri**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Geçerli UTC tarihi ve saatini saat, dakika, saniye ve milisaniye olarak verir.","examples":"\n##### Örnek\n\nGeçerli UTC tarihi ve saatini saat, dakika, saniye ve milisaniye olarak verir.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Geçerli UTC tarihi ve saatini saat, dakika, saniye ve milisaniye olarak verir.\n\n**Dönüş değeri**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Bir tarihin/saatin yıl, ay, gün, saat, dakika veya saniye gibi tek bir bölümünü verir.","examples":"\n##### Örnekler\n\n12 döndürür\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\n21 döndürür\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\n30 döndürür\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Bir tarihin/saatin yıl, ay, gün, saat, dakika veya saniye gibi tek bir bölümünü verir.\n\n**Parametreler**\n\n- **part**: Tarihten çıkarılacak parça. Olası değerler: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Parça çıkarılacak tarih.\n\n**Dönüş değeri**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]