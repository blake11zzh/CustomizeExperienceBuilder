[{"id":"date_functions","title":"Date functions","items":[{"type":"function","name":"current_date","bundle":"date","description":"Returns the current date in UTC.","examples":"\n##### Example\n\nReturns the current date in UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the current date in UTC.\n\n**Return value**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Returns the current UTC date and time in hours, minutes, and seconds.","examples":"\n##### Example\n\nReturns the current UTC date and time in hours, minutes, and seconds.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the current UTC date and time in hours, minutes, and seconds.\n\n**Return value**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Returns the current UTC date and time in hours, minutes, seconds, and milliseconds.","examples":"\n##### Example\n\nReturns the current UTC date and time in hours, minutes, seconds, and milliseconds.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the current UTC date and time in hours, minutes, seconds, and milliseconds.\n\n**Return value**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Returns a single part of a datetime, such as year, month, day, hour, minute, or second.","examples":"\n##### Examples\n\nReturns 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nReturns 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nReturns 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns a single part of a datetime, such as year, month, day, hour, minute, or second.\n\n**Parameters**\n\n- **part**: The part to extract from the date. Possible values: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: The date to extract a part from.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Numeric functions","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Returns the absolute value of the number.","examples":"\n##### Example\n\nReturns 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the absolute value of the number.\n\n**Parameter**\n\n- **number**: A number on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Returns the arc cosine of a number.","examples":"\n##### Example\n\nReturns 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the arc cosine of a number.\n\n**Parameter**\n\n- **number**: A number between -1 and 1 on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Returns the arc sine of a number.","examples":"\n##### Example\n\nReturns 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the arc sine of a number.\n\n**Parameter**\n\n- **number**: A number between -1 and 1 on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Returns the arc tangent of a number.","examples":"\n##### Example\n\nReturns 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the arc tangent of a number.\n\n**Parameter**\n\n- **number**: A number on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Converts a value from one data type to another. The dataType parameter will determine what type the value is converted to. FLOAT converts the value to a double, INTEGER converts the value to an integer, etc.","examples":"\n##### Examples\n\nReturns 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nReturns '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nReturns '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converts a value from one data type to another. The dataType parameter will determine what type the value is converted to. FLOAT converts the value to a double, INTEGER converts the value to an integer, etc.\n\n**Parameters**\n\n- **value**: The value to convert to another data type.\n- **dataType**: The data type to convert the value to. Possible values: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Return value**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Returns the smallest integer greater than or equal to the number.","examples":"\n##### Example\n\nReturns 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the smallest integer greater than or equal to the number.\n\n**Parameter**\n\n- **number**: The number to round upward.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Returns the trigonometric cosine of the number, which is assumed to be an angle in radians.","examples":"\n##### Example\n\nReturns -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the trigonometric cosine of the number, which is assumed to be an angle in radians.\n\n**Parameter**\n\n- **number**: An angle in radians on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Returns the largest integer that is less than or equal to the number.","examples":"\n##### Example\n\nReturns 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the largest integer that is less than or equal to the number.\n\n**Parameter**\n\n- **number**: The number to round downward.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Returns the natural logarithm (base e) of the number.","examples":"\n##### Example\n\nReturns 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the natural logarithm (base e) of the number.\n\n**Parameter**\n\n- **number**: A number greater than 0 on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Returns the base-10 logarithm of the number.","examples":"\n##### Example\n\nReturns 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the base-10 logarithm of the number.\n\n**Parameter**\n\n- **number**: A number on which to perform the operation that is greater than 0.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Returns the remainder after dividing a dividend by a divisor. Both the divindend and divisor must be integers.","examples":"\n##### Example\n\nReturns 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the remainder after dividing a dividend by a divisor. Both the divindend and divisor must be integers.\n\n**Parameters**\n\n- **x**: The number representing the dividend.\n- **y**: The number representing the divisor.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Returns `NULL` if expression1 is equal to expression2, otherwise returns expression1. Values for expression1 and expression2 must be the same type. NULLIF is commonly used to prevent divide-by-zero errors by setting expression2 to 0.","examples":"\n##### Examples\n\nReturns `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nReturns 32\n\n```sql\nNULLIF(32, 0)\n```\n\nReturns `null` if POP18 is equal to 0, otherwise, returns the value of TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns `NULL` if expression1 is equal to expression2, otherwise returns expression1. Values for expression1 and expression2 must be the same type. NULLIF is commonly used to prevent divide-by-zero errors by setting expression2 to 0.\n\n**Parameters**\n\n- **expression1**: A value on which to perform the operation.\n- **expression2**: A value on which to perform the operation.\n\n**Return value**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Returns the value of the number raised to the specified power.","examples":"\n##### Example\n\nReturns 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the value of the number raised to the specified power.\n\n**Parameters**\n\n- **x**: The number on which to perform the operation.\n- **y**: The exponent indicating the number of times to multiply the number by itself.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Rounds the number to the specified length.","examples":"\n##### Examples\n\nReturns 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nReturns 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Rounds the number to the specified length.\n\n**Parameters**\n\n- **number**: The number to round.\n- **length**: The number of decimal places to round the number to. A positive length rounds the number to the specified decimal place. A negative length will round the number to the left of the decimal point.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Returns the sign of a given number. A negative number will return -1. A positive number will return 1.","examples":"\n##### Examples\n\nReturns -1\n\n```sql\nSIGN(-132)\n```\n\nReturns 0\n\n```sql\nSIGN(0)\n```\n\nReturns 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the sign of a given number. A negative number will return -1. A positive number will return 1.\n\n**Parameter**\n\n- **number**: A number on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Returns the trigonometric sine of the number, which is assumed to be an angle in radians.","examples":"\n##### Example\n\nReturns 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the trigonometric sine of the number, which is assumed to be an angle in radians.\n\n**Parameter**\n\n- **number**: An angle in radians on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Returns the tangent of a number, which is assumed to be an angle in radians.","examples":"\n##### Example\n\nReturns 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the tangent of a number, which is assumed to be an angle in radians.\n\n**Parameter**\n\n- **number**: An angle in radians on which to perform the operation.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Returns a truncated number.","examples":"\n##### Examples\n\nReturns 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nReturns 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nReturns 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns a truncated number.\n\n**Parameters**\n\n- **number**: A number to truncate.\n- **decimals**: A positive value truncates the number to the specified decimal place. A negative value truncates the number to the left of the decimal point.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"String functions","items":[{"type":"function","name":"char_length","bundle":"string","description":"Returns the number of characters in the text string as an integer.","examples":"\n##### Example\n\nReturns 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the number of characters in the text string as an integer.\n\n**Parameter**\n\n- **string**: The text string to return the length of.\n\n**Return value**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Returns the first value in the list that is not `NULL`. All values passed into the function must be the same type, with the exception of `NULL` values.","examples":"\n##### Examples\n\nReturns 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nReturns -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the first value in the list that is not `NULL`. All values passed into the function must be the same type, with the exception of `NULL` values.\n\n**Parameters**\n\n- **value1**: The first value in the list.\n- **valueN**: The subsequent value(s) in the list.\n\n**Return value**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Concatenates two strings together.","examples":"\n##### Example\n\nReturns 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Concatenates two strings together.\n\n**Parameters**\n\n- **string1**: The first text string.\n- **string2**: The text string to concatenate to the first text string.\n\n**Return value**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Returns the username of the user currently signed into the portal.","examples":"\n##### Example\n\nReturns the username of the user currently signed into the portal.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the username of the user currently signed into the portal.\n\n**Return value**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Converts all characters in the text string to lowercase.","examples":"\n##### Example\n\nReturns 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converts all characters in the text string to lowercase.\n\n**Parameter**\n\n- **string**: The text string to convert to lowercase.\n\n**Return value**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Returns the first occurrence of a substring in another text string. Returns 0 if the substring is not found.","examples":"\n##### Examples\n\nReturns 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nReturns 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns the first occurrence of a substring in another text string. Returns 0 if the substring is not found.\n\n**Parameters**\n\n- **substring**: The text string to search for.\n- **string**: The string that will be searched for the substring.\n\n**Return value**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Returns a subset of characters in a text string from a starting point to the specified string length.","examples":"\n##### Example\n\nReturns 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns a subset of characters in a text string from a starting point to the specified string length.\n\n**Parameters**\n\n- **string**: The text string to extract from.\n- **start**: The integer value that specifies where the returned characters will start.\n- **length**: The number of characters to extract.\n\n**Return value**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Returns a subset of characters in a text string from a starting point to the specified string length.","examples":"\n##### Examples\n\nReturns 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nReturns 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns a subset of characters in a text string from a starting point to the specified string length.\n\n**Parameters**\n\n- **string**: The text string to extract from.\n- **start**: The integer value that specifies where the returned characters will start.\n- **length**: The number of characters to extract.\n\n**Return value**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Returns a text string where all of the leading and/or trailing spaces or other specified characters have been removed. LEADING will trim the leading side of the text string, TRAILING will trim the trailing side of the text string, while BOTH will trim both sides of the text string.","examples":"\n##### Examples\n\nReturns 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nReturns '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nReturns 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Returns a text string where all of the leading and/or trailing spaces or other specified characters have been removed. LEADING will trim the leading side of the text string, TRAILING will trim the trailing side of the text string, while BOTH will trim both sides of the text string.\n\n**Parameters**\n\n- **side**: The side of the text string where the space(s) or character(s) will be removed. Possible values: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: The character(s) that will be trimmed from the text string.\n- **string**: The text string to trim.\n\n**Return value**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Converts all characters in the text string to uppercase.","examples":"\n##### Example\n\nReturns 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converts all characters in the text string to uppercase.\n\n**Parameter**\n\n- **string**: The string to convert to uppercase.\n\n**Return value**: String"}},"parametersInfo":{"min":1,"max":1}}]}]