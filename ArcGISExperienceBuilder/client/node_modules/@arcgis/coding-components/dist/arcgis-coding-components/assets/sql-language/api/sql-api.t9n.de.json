[{"id":"date_functions","title":"Datumsfunktionen","items":[{"type":"function","name":"current_date","bundle":"date","description":"Gibt das aktuelle Datum in UTC zurück.","examples":"\n##### Beispiel\n\nGibt das aktuelle Datum in UTC zurück.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt das aktuelle Datum in UTC zurück.\n\n**Rückgabewert**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Gibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten und Sekunden zurück.","examples":"\n##### Beispiel\n\nGibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten und Sekunden zurück.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten und Sekunden zurück.\n\n**Rückgabewert**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Gibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten, Sekunden und Millisekunden zurück.","examples":"\n##### Beispiel\n\nGibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten, Sekunden und Millisekunden zurück.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt das aktuelle UTC-Datum und die UTC-Uhrzeit in Stunden, Minuten, Sekunden und Millisekunden zurück.\n\n**Rückgabewert**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Gibt einen Teil einer Datums-/Zeitangabe wie Jahr, Monat, Tag, Stunde, Minute oder Sekunde zurück.","examples":"\n##### Beispiele\n\nGibt 12 zurück\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nGibt 21 zurück\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nGibt 30 zurück\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt einen Teil einer Datums-/Zeitangabe wie Jahr, Monat, Tag, Stunde, Minute oder Sekunde zurück.\n\n**Parameter**\n\n- **part**: Das Teil, das aus dem Datum extrahiert werden soll. Mögliche Werte: YEAR, MONTH, DAY, HOUR, MINUTE, SECOND.\n- **datetime**: Das Datum, aus dem ein Teil extrahiert werden soll.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Numerische Funktionen","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Gibt den absoluten Wert der Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 2 zurück\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den absoluten Wert der Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Gibt den Arkuscosinus einer Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 1.26610367 zurück\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Arkuscosinus einer Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl zwischen -1 und 1, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Gibt den Arkussinus einer Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 0.30469265 zurück\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Arkussinus einer Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl zwischen -1 und 1, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Gibt den Arkustangens einer Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 0.78539816 zurück\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Arkustangens einer Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Konvertiert einen Wert von einem Datentyp in einen anderen. Der Parameter \"dataType\" bestimmt, in welchen Typ der Wert konvertiert wird. FLOAT konvertiert den Wert in einen Double-Wert, INTEGER konvertiert den Wert in eine Ganzzahl usw.","examples":"\n##### Beispiele\n\nGibt 2 zurück\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nGibt \"13:00 Uhr\" zurück\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nGibt \"50\" zurück\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Konvertiert einen Wert von einem Datentyp in einen anderen. Der Parameter \"dataType\" bestimmt, in welchen Typ der Wert konvertiert wird. FLOAT konvertiert den Wert in einen Double-Wert, INTEGER konvertiert den Wert in eine Ganzzahl usw.\n\n**Parameter**\n\n- **value**: Der Wert, der in einen anderen Datentyp konvertiert werden soll.\n- **dataType**: Der Datentyp, in den der Wert konvertiert wird. Mögliche Werte: DATE, FLOAT, INTEGER, REAL, SMALLINT, TIME, TIMESTAMP, VARCHAR.\n\n**Rückgabewert**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Gibt den kleinsten Integer-Wert zurück, der größer als oder gleich der Zahl ist.","examples":"\n##### Beispiel\n\nGibt 235 zurück\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den kleinsten Integer-Wert zurück, der größer als oder gleich der Zahl ist.\n\n**Parameter**\n\n- **number**: Die nach oben zu rundende Zahl.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Gibt den trigonometrischen Cosinus der Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.","examples":"\n##### Beispiel\n\nGibt -0.41614684 zurück\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den trigonometrischen Cosinus der Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.\n\n**Parameter**\n\n- **number**: Ein Winkel in Radianten, für den die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Gibt den größten Integer-Wert zurück, der kleiner als oder gleich der Zahl ist.","examples":"\n##### Beispiel\n\nGibt 12 zurück\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den größten Integer-Wert zurück, der kleiner als oder gleich der Zahl ist.\n\n**Parameter**\n\n- **number**: Die nach unten zu rundende Zahl.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Gibt den natürlichen Logarithmus (Basis e) der Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 2.302585 zurück\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den natürlichen Logarithmus (Basis e) der Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl größer als 0, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Gibt den Logarithmus zur Basis 10 der Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 0.301030 zurück\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Logarithmus zur Basis 10 der Zahl zurück.\n\n**Parameter**\n\n- **number**: Eine Zahl größer als 0, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Gibt den Rest zurück, nachdem ein Dividend durch einen Divisor dividiert wurde. Sowohl der Dividend als auch der Divisor müssen ganze Zahlen sein.","examples":"\n##### Beispiel\n\nGibt 2 zurück\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Rest zurück, nachdem ein Dividend durch einen Divisor dividiert wurde. Sowohl der Dividend als auch der Divisor müssen ganze Zahlen sein.\n\n**Parameter**\n\n- **x**: Die Zahl, die den Dividend darstellt.\n- **y**: Die Zahl, die den Divisor darstellt.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Gibt \"NULL\" zurück, wenn \"expression1\" gleich \"expression2\" ist. Andernfalls wird \"expression1\" zurückgegeben. Werte für \"expression1\" und \"expression2\" müssen von demselben Typ sein. NULLIF wird im Allgemeinen verwendet, um \"Division durch Null\"-Fehler zu vermeiden, indem \"expression2\" auf 0 gesetzt wird.","examples":"\n##### Beispiele\n\nGibt \"null\" zurück\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nGibt 32 zurück\n\n```sql\nNULLIF(32, 0)\n```\n\nGibt Null zurück, wenn POP18 gleich 0 ist. Andernfalls wird der Wert \"TOTALPOP / POP18\" zurückgegeben.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt \"NULL\" zurück, wenn \"expression1\" gleich \"expression2\" ist. Andernfalls wird \"expression1\" zurückgegeben. Werte für \"expression1\" und \"expression2\" müssen von demselben Typ sein. NULLIF wird im Allgemeinen verwendet, um \"Division durch Null\"-Fehler zu vermeiden, indem \"expression2\" auf 0 gesetzt wird.\n\n**Parameter**\n\n- **expression1**: Ein Wert, für den die Operation durchgeführt wird.\n- **expression2**: Ein Wert, für den die Operation durchgeführt wird.\n\n**Rückgabewert**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Gibt den Wert der Zahl potenziert mit der angegebenen Potenz zurück.","examples":"\n##### Beispiel\n\nGibt 8 zurück\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Wert der Zahl potenziert mit der angegebenen Potenz zurück.\n\n**Parameter**\n\n- **x**: Die Zahl, für die die Operation durchgeführt wird.\n- **y**: Der Exponent gibt die Häufigkeit an, mit der die Zahl mit sich selbst multipliziert wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Rundet die Zahl auf den angegebenen Längenwert ab.","examples":"\n##### Beispiele\n\nGibt 3.98 zurück\n\n```sql\nROUND(3.98024, 2)\n```\n\nGibt 200 zurück\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Rundet die Zahl auf den angegebenen Längenwert ab.\n\n**Parameter**\n\n- **number**: Die zu rundende Zahl.\n- **length**: Die Anzahl der Dezimalstellen, auf die die Zahl gerundet wird. Eine positive Länge rundet die Zahl auf die angegebene Dezimalstelle auf. Bei einer negativen Länge wird die Zahl links vom Dezimaltrennzeichen gerundet.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Gibt das Vorzeichen einer angegebenen Zahl zurück. Eine negative Zahl ergibt -1. Eine positive Zahl ergibt 1.","examples":"\n##### Beispiele\n\nGibt -1 zurück\n\n```sql\nSIGN(-132)\n```\n\nGibt 0 zurück\n\n```sql\nSIGN(0)\n```\n\nGibt 1 zurück\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt das Vorzeichen einer angegebenen Zahl zurück. Eine negative Zahl ergibt -1. Eine positive Zahl ergibt 1.\n\n**Parameter**\n\n- **number**: Eine Zahl, für die die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Gibt den trigonometrischen Sinus der Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.","examples":"\n##### Beispiel\n\nGibt 0.84147098 zurück\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den trigonometrischen Sinus der Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.\n\n**Parameter**\n\n- **number**: Ein Winkel in Radianten, für den die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Gibt den Tangens einer Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.","examples":"\n##### Beispiel\n\nGibt 2.57215162 zurück\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Tangens einer Zahl zurück, von dem angenommen wird, dass es sich um einen Winkel in Radianten handelt.\n\n**Parameter**\n\n- **number**: Ein Winkel in Radianten, für den die Operation durchgeführt wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Gibt eine gekürzte Zahl zurück.","examples":"\n##### Beispiele\n\nGibt 91.3 zurück\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nGibt 124 zurück\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nGibt 1900 zurück\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt eine gekürzte Zahl zurück.\n\n**Parameter**\n\n- **number**: Die zu kürzende Zahl.\n- **decimals**: Ein positiver Wert kürzt die Zahl auf die angegebene Dezimalstelle. Ein negativer Wert kürzt die Zahl links vom Dezimaltrennzeichen.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Zeichenfolgenfunktionen","items":[{"type":"function","name":"char_length","bundle":"string","description":"Gibt die Anzahl der Zeichen in einer Textzeichenfolge als ganze Zahl zurück.","examples":"\n##### Beispiel\n\nGibt 11 zurück\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt die Anzahl der Zeichen in einer Textzeichenfolge als ganze Zahl zurück.\n\n**Parameter**\n\n- **string**: Die Textzeichenfolge, deren Länge zurückgegeben werden soll.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Gibt den ersten Nicht-NULL-Wert in der Liste zurück. Alle an die Funktion übergebenen Werte müssen vom gleichen Typ sein, mit Ausnahme von NULL-Werten.","examples":"\n##### Beispiele\n\nGibt \"Green goldfish\" zurück\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nGibt -21 zurück\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den ersten Nicht-NULL-Wert in der Liste zurück. Alle an die Funktion übergebenen Werte müssen vom gleichen Typ sein, mit Ausnahme von NULL-Werten.\n\n**Parameter**\n\n- **value1**: Der erste Wert in der Liste.\n- **valueN**: Nachfolgende Werte in der Liste.\n\n**Rückgabewert**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Verbindet zwei Zeichenfolgen.","examples":"\n##### Beispiel\n\nGibt \"Maple syrup\" zurück\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Verbindet zwei Zeichenfolgen.\n\n**Parameter**\n\n- **string1**: Die erste Textzeichenfolge.\n- **string2**: Die Textzeichenfolge, die mit der ersten Textzeichenfolge verbunden werden soll.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Gibt den Benutzernamen des Benutzers zurück, der aktuell im Portal angemeldet ist.","examples":"\n##### Beispiel\n\nGibt den Benutzernamen des Benutzers zurück, der aktuell im Portal angemeldet ist.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt den Benutzernamen des Benutzers zurück, der aktuell im Portal angemeldet ist.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Wandelt alle Zeichen in der Textzeichenfolge in Kleinbuchstaben um.","examples":"\n##### Beispiel\n\nGibt \"hello world\" zurück\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Wandelt alle Zeichen in der Textzeichenfolge in Kleinbuchstaben um.\n\n**Parameter**\n\n- **string**: Die Zeichenfolge, die in Kleinbuchstaben umgewandelt werden soll.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Gibt die erste Instanz einer Teilzeichenfolge in einer anderen Textzeichenfolge zurück. Gibt 0 zurück, wenn die Teilzeichenfolge nicht gefunden wird.","examples":"\n##### Beispiele\n\nGibt 6 zurück\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nGibt 9 zurück\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt die erste Instanz einer Teilzeichenfolge in einer anderen Textzeichenfolge zurück. Gibt 0 zurück, wenn die Teilzeichenfolge nicht gefunden wird.\n\n**Parameter**\n\n- **substring**: Die Textzeichenfolge, nach der gesucht werden soll.\n- **string**: Die Zeichenfolge, nach der für die Teilzeichenfolge gesucht wird.\n\n**Rückgabewert**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Gibt eine Teilmenge der Zeichen in einer Textzeichenfolge ab einem Anfangspunkt bis zur angegebenen Zeichenfolgenlänge zurück.","examples":"\n##### Beispiel\n\nGibt \"City\" zurück\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt eine Teilmenge der Zeichen in einer Textzeichenfolge ab einem Anfangspunkt bis zur angegebenen Zeichenfolgenlänge zurück.\n\n**Parameter**\n\n- **string**: Die Textzeichenfolge, aus der Zeichen extrahiert werden sollen.\n- **start**: Der ganzzahlige Wert, der angibt, wo die zurückgegebenen Zeichen beginnen.\n- **length**: Die Anzahl der zu extrahierenden Zeichen.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Gibt eine Teilmenge der Zeichen in einer Textzeichenfolge ab einem Anfangspunkt bis zur angegebenen Zeichenfolgenlänge zurück.","examples":"\n##### Beispiele\n\nGibt \"City\" zurück\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nGibt \"New York\" zurück\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt eine Teilmenge der Zeichen in einer Textzeichenfolge ab einem Anfangspunkt bis zur angegebenen Zeichenfolgenlänge zurück.\n\n**Parameter**\n\n- **string**: Die Textzeichenfolge, aus der Zeichen extrahiert werden sollen.\n- **start**: Der ganzzahlige Wert, der angibt, wo die zurückgegebenen Zeichen beginnen.\n- **length**: Die Anzahl der zu extrahierenden Zeichen.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Gibt eine Textzeichenfolge zurück, bei der alle voran- und nachgestellten Leerstellen oder andere angegebene Zeichen entfernt wurden. LEADING kürzt die Seite mit vorangestellten Zeichen der Textzeichenfolge, TRAILING kürzt die Seite mit nachgestellten Zeichen der Textzeichenfolge, während BOTH beide Seiten der Textzeichenfolge kürzt.","examples":"\n##### Beispiele\n\nGibt \"myFunc\" zurück\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nGibt \"  hello world\" zurück\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nGibt \"hello world\" zurück\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Gibt eine Textzeichenfolge zurück, bei der alle voran- und nachgestellten Leerstellen oder andere angegebene Zeichen entfernt wurden. LEADING kürzt die Seite mit vorangestellten Zeichen der Textzeichenfolge, TRAILING kürzt die Seite mit nachgestellten Zeichen der Textzeichenfolge, während BOTH beide Seiten der Textzeichenfolge kürzt.\n\n**Parameter**\n\n- **side**: Die Seite der Textzeichenfolge, auf der Leerzeichen oder Zeichen entfernt werden. Mögliche Werte: LEADING, TRAILING, BOTH.\n- **character**: Die Zeichen, die in der Textzeichenfolge gekürzt werden.\n- **string**: Die zu kürzende Textzeichenfolge.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Wandelt alle Zeichen in der Textzeichenfolge in Großbuchstaben um.","examples":"\n##### Beispiel\n\nGibt \"QUICK RED FOX\" zurück\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Wandelt alle Zeichen in der Textzeichenfolge in Großbuchstaben um.\n\n**Parameter**\n\n- **string**: Die Zeichenfolge, die in Großbuchstaben umgewandelt werden soll.\n\n**Rückgabewert**: String"}},"parametersInfo":{"min":1,"max":1}}]}]