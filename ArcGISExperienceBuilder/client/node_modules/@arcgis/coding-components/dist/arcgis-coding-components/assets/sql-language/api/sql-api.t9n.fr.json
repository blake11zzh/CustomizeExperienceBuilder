[{"id":"string_functions","title":"Fonctions de chaîne","items":[{"type":"function","name":"char_length","bundle":"string","description":"Renvoie le nombre de caractères dans la chaîne de texte sous forme d’entier.","examples":"\n##### Exemple\n\nRenvoie 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le nombre de caractères dans la chaîne de texte sous forme d’entier.\n\n**Paramètre**\n\n- **string**: Chaîne de texte dont la longueur doit être renvoyée.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Renvoie la première valeur de la liste qui n’est pas `NULL`. Toutes les valeurs transmises à la fonction doivent être du même type, à l’exception des valeurs `NULL`.","examples":"\n##### Exemples\n\nRenvoie 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nRenvoie -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la première valeur de la liste qui n’est pas `NULL`. Toutes les valeurs transmises à la fonction doivent être du même type, à l’exception des valeurs `NULL`.\n\n**Paramètres**\n\n- **value1**: Première valeur de la liste.\n- **valueN**: Valeur(s) suivante(s) de la liste.\n\n**Valeur de retour**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Concatène deux chaînes ensemble.","examples":"\n##### Exemple\n\nRenvoie 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Concatène deux chaînes ensemble.\n\n**Paramètres**\n\n- **string1**: Première chaîne de texte.\n- **string2**: Chaîne de texte à concaténer avec la première chaîne de texte.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Renvoie le nom de l’utilisateur actuellement connecté au portail.","examples":"\n##### Exemple\n\nRenvoie le nom de l’utilisateur actuellement connecté au portail.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le nom de l’utilisateur actuellement connecté au portail.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Convertit tous les caractères de la chaîne de texte en minuscules.","examples":"\n##### Exemple\n\nRenvoie 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Convertit tous les caractères de la chaîne de texte en minuscules.\n\n**Paramètre**\n\n- **string**: Chaîne de texte à convertir en minuscules.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Renvoie la première occurrence d’une sous-chaîne dans une autre chaîne de texte. Renvoie 0 si la sous-chaîne est introuvable.","examples":"\n##### Exemples\n\nRenvoie 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nRenvoie 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la première occurrence d’une sous-chaîne dans une autre chaîne de texte. Renvoie 0 si la sous-chaîne est introuvable.\n\n**Paramètres**\n\n- **substring**: Chaîne de texte à rechercher.\n- **string**: Chaîne dans laquelle la sous-chaîne doit être recherchée.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Renvoie le sous-ensemble de caractères dans une chaîne de texte à partir d’un point de départ et sur la longueur de chaîne spécifiée.","examples":"\n##### Exemple\n\nRenvoie 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le sous-ensemble de caractères dans une chaîne de texte à partir d’un point de départ et sur la longueur de chaîne spécifiée.\n\n**Paramètres**\n\n- **string**: Chaîne de texte à partir de laquelle effectuer l’extraction.\n- **start**: Valeur entière qui indique où commencent les caractères renvoyés.\n- **length**: Nombre de caractères à extraire.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Renvoie le sous-ensemble de caractères dans une chaîne de texte à partir d’un point de départ et sur la longueur de chaîne spécifiée.","examples":"\n##### Exemples\n\nRenvoie 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nRenvoie 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le sous-ensemble de caractères dans une chaîne de texte à partir d’un point de départ et sur la longueur de chaîne spécifiée.\n\n**Paramètres**\n\n- **string**: Chaîne de texte à partir de laquelle effectuer l’extraction.\n- **start**: Valeur entière qui indique où commencent les caractères renvoyés.\n- **length**: Nombre de caractères à extraire.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Renvoie une chaîne de texte dans laquelle tous les espaces de début et/ou de fin ou d’autres caractères spécifiés ont été supprimés. LEADING supprime les caractères de début de la chaîne de texte à tronquer, TRAILING supprime les caractères de fin de la chaîne de texte à tronquer et BOTH tronque la chaîne de texte au début et à la fin.","examples":"\n##### Exemples\n\nRenvoie 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nRenvoie '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nRenvoie 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie une chaîne de texte dans laquelle tous les espaces de début et/ou de fin ou d’autres caractères spécifiés ont été supprimés. LEADING supprime les caractères de début de la chaîne de texte à tronquer, TRAILING supprime les caractères de fin de la chaîne de texte à tronquer et BOTH tronque la chaîne de texte au début et à la fin.\n\n**Paramètres**\n\n- **side**: Partie de la chaîne de texte où le ou les espaces ou caractères sont supprimés. Valeurs possibles : `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Caractère(s) supprimé(s) de la chaîne de texte.\n- **string**: Chaîne de texte à tronquer.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Convertit tous les caractères de la chaîne de texte en majuscules.","examples":"\n##### Exemple\n\nRenvoie 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Convertit tous les caractères de la chaîne de texte en majuscules.\n\n**Paramètre**\n\n- **string**: Chaîne à convertir en majuscules.\n\n**Valeur de retour**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Fonctions de date","items":[{"type":"function","name":"current_date","bundle":"date","description":"Renvoie la date actuelle au format UTC.","examples":"\n##### Exemple\n\nRenvoie la date actuelle au format UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la date actuelle au format UTC.\n\n**Valeur de retour**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Renvoie la date et l’heure UTC actuelles en heures, minutes et secondes.","examples":"\n##### Exemple\n\nRenvoie la date et l’heure UTC actuelles en heures, minutes et secondes.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la date et l’heure UTC actuelles en heures, minutes et secondes.\n\n**Valeur de retour**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Renvoie la date et l’heure UTC actuelles en heures, minutes, secondes et millisecondes.","examples":"\n##### Exemple\n\nRenvoie la date et l’heure UTC actuelles en heures, minutes, secondes et millisecondes.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la date et l’heure UTC actuelles en heures, minutes, secondes et millisecondes.\n\n**Valeur de retour**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Renvoie une seule partie de la date/de l’heure, comme l’année, le mois, le jour, l’heure, la minute ou la seconde.","examples":"\n##### Exemples\n\nRenvoie 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nRenvoie 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nRenvoie 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie une seule partie de la date/de l’heure, comme l’année, le mois, le jour, l’heure, la minute ou la seconde.\n\n**Paramètres**\n\n- **part**: Partie à extraire de la date. Valeurs possibles : `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Date à partir de laquelle effectuer l’extraction partielle.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Fonctions numériques","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Renvoie la valeur absolue du nombre.","examples":"\n##### Exemple\n\nRenvoie 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la valeur absolue du nombre.\n\n**Paramètre**\n\n- **number**: Nombre sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Renvoie l’arc cosinus d’un nombre.","examples":"\n##### Exemple\n\nRenvoie 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie l’arc cosinus d’un nombre.\n\n**Paramètre**\n\n- **number**: Nombre compris entre -1 et 1 sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Renvoie l’arc sinus d’un nombre.","examples":"\n##### Exemple\n\nRenvoie 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie l’arc sinus d’un nombre.\n\n**Paramètre**\n\n- **number**: Nombre compris entre -1 et 1 sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Renvoie l’arc tangente d’un nombre.","examples":"\n##### Exemple\n\nRenvoie 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie l’arc tangente d’un nombre.\n\n**Paramètre**\n\n- **number**: Nombre sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Convertit une valeur d’un type de données en un autre. Le paramètre dataType détermine le type vers lequel la valeur est convertie. FLOAT convertit la valeur en nombre de type double, INTEGER convertit la valeur en nombre entier, etc.","examples":"\n##### Exemples\n\nRenvoie 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nRenvoie '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nRenvoie '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Convertit une valeur d’un type de données en un autre. Le paramètre dataType détermine le type vers lequel la valeur est convertie. FLOAT convertit la valeur en nombre de type double, INTEGER convertit la valeur en nombre entier, etc.\n\n**Paramètres**\n\n- **value**: Valeur à convertir en un autre type de données.\n- **dataType**: Type de données vers lequel la valeur doit être convertie. Valeurs possibles : `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Valeur de retour**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Renvoie le plus petit nombre entier supérieur ou égal au nombre.","examples":"\n##### Exemple\n\nRenvoie 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le plus petit nombre entier supérieur ou égal au nombre.\n\n**Paramètre**\n\n- **number**: Nombre à arrondir au supérieur.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Renvoie le cosinus trigonométrique du nombre, qui est supposé être un angle en radians.","examples":"\n##### Exemple\n\nRenvoie -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le cosinus trigonométrique du nombre, qui est supposé être un angle en radians.\n\n**Paramètre**\n\n- **number**: Angle en radians sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Renvoie le plus grand nombre entier inférieur ou égal au nombre.","examples":"\n##### Exemple\n\nRenvoie 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le plus grand nombre entier inférieur ou égal au nombre.\n\n**Paramètre**\n\n- **number**: Nombre à arrondir à l’inférieur.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Renvoie le logarithme naturel (base e) du nombre.","examples":"\n##### Exemple\n\nRenvoie 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le logarithme naturel (base e) du nombre.\n\n**Paramètre**\n\n- **number**: Nombre supérieur à 0 sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Renvoie le logarithme décimal du nombre.","examples":"\n##### Exemple\n\nRenvoie 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le logarithme décimal du nombre.\n\n**Paramètre**\n\n- **number**: Nombre supérieur à 0 sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Renvoie le reste une fois le dividende divisé par le diviseur. Le dividende et le diviseur doivent être des entiers.","examples":"\n##### Exemple\n\nRenvoie 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le reste une fois le dividende divisé par le diviseur. Le dividende et le diviseur doivent être des entiers.\n\n**Paramètres**\n\n- **x**: Nombre représentant le dividende.\n- **y**: Nombre représentant le diviseur.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Renvoie `NULL` si expression1 est égal à expression2, sinon renvoie expression1. Les valeurs pour expression1 et expression2 doivent être de même type. La fonction NULLIF est fréquemment utilisé pour éviter les erreurs de division par zéro lorsque expression2 est défini sur 0.","examples":"\n##### Exemples\n\nRenvoie `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nRenvoie 32\n\n```sql\nNULLIF(32, 0)\n```\n\nRenvoie `null` si POP18 est égal à 0. Sinon, renvoie la valeur de TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie `NULL` si expression1 est égal à expression2, sinon renvoie expression1. Les valeurs pour expression1 et expression2 doivent être de même type. La fonction NULLIF est fréquemment utilisé pour éviter les erreurs de division par zéro lorsque expression2 est défini sur 0.\n\n**Paramètres**\n\n- **expression1**: Valeur sur laquelle effectuer l’opération.\n- **expression2**: Valeur sur laquelle effectuer l’opération.\n\n**Valeur de retour**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Renvoie la valeur du nombre élevé à la puissance spécifiée.","examples":"\n##### Exemple\n\nRenvoie 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la valeur du nombre élevé à la puissance spécifiée.\n\n**Paramètres**\n\n- **x**: Nombre sur lequel effectuer l’opération.\n- **y**: Exposant indiquant le nombre de multiplications du nombre par lui-même.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Arrondit le nombre à la longueur spécifiée.","examples":"\n##### Exemples\n\nRenvoie 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nRenvoie 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Arrondit le nombre à la longueur spécifiée.\n\n**Paramètres**\n\n- **number**: Nombre à arrondir.\n- **length**: Nombre de décimales auquel arrondir le nombre. Une longueur positive arrondit le nombre au nombre de décimales spécifié. Une longueur négative arrondit le nombre à gauche du séparateur décimal.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Renvoie le signe d’un nombre donné. Un nombre négatif renvoie -1. Un nombre positif renvoie 1.","examples":"\n##### Exemples\n\nRenvoie -1\n\n```sql\nSIGN(-132)\n```\n\nRenvoie 0\n\n```sql\nSIGN(0)\n```\n\nRenvoie 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le signe d’un nombre donné. Un nombre négatif renvoie -1. Un nombre positif renvoie 1.\n\n**Paramètre**\n\n- **number**: Nombre sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Renvoie le sinus trigonométrique du nombre, qui est supposé être un angle en radians.","examples":"\n##### Exemple\n\nRenvoie 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie le sinus trigonométrique du nombre, qui est supposé être un angle en radians.\n\n**Paramètre**\n\n- **number**: Angle en radians sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Renvoie la tangente d’un nombre, qui est supposée être un angle en radians.","examples":"\n##### Exemple\n\nRenvoie 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie la tangente d’un nombre, qui est supposée être un angle en radians.\n\n**Paramètre**\n\n- **number**: Angle en radians sur lequel effectuer l’opération.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Renvoie un nombre tronqué.","examples":"\n##### Exemples\n\nRenvoie 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nRenvoie 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nRenvoie 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Renvoie un nombre tronqué.\n\n**Paramètres**\n\n- **number**: Nombre à tronquer.\n- **decimals**: Une valeur positive tronque le nombre à la décimale spécifiée. Une valeur négative tronque le nombre à gauche du séparateur décimal.\n\n**Valeur de retour**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]