[{"id":"string_functions","title":"Строковые функции","items":[{"type":"function","name":"char_length","bundle":"string","description":"Возвращает количество  символов в текстовой строке в виде целого числа.","examples":"\n##### Пример\n\nВозвращает 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает количество  символов в текстовой строке в виде целого числа.\n\n**Параметр**\n\n- **string**: Текстовая строка для возвращения её длины.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Возвращает первое значение в списке, которое не `NULL`. Все значения, передаваемые функции, должны быть одного типа, кроме значений `NULL`.","examples":"\n##### Примеры\n\nВозвращает 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nВозвращает -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает первое значение в списке, которое не `NULL`. Все значения, передаваемые функции, должны быть одного типа, кроме значений `NULL`.\n\n**Параметры**\n\n- **value1**: Первое значение в списке.\n- **valueN**: Последующие значения в списке.\n\n**Возвращаемое значение**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Соединяет два строковых значения.","examples":"\n##### Пример\n\nВозвращает 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Соединяет два строковых значения.\n\n**Параметры**\n\n- **string1**: Первая текстовая строка.\n- **string2**: Текстовая строка для объединения с первой текстовой строкой.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Возвращает имя пользователя для текущего пользователя, выполнившего вход на портал.","examples":"\n##### Пример\n\nВозвращает имя пользователя для текущего пользователя, выполнившего вход на портал.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает имя пользователя для текущего пользователя, выполнившего вход на портал.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Преобразует все символы в текстовой строке в строчные.","examples":"\n##### Пример\n\nВозвращает 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Преобразует все символы в текстовой строке в строчные.\n\n**Параметр**\n\n- **string**: Текстовая строка для преобразования в строчные символы.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Возвращает первое вхождение подстроки в другой текстовой строке. Возвращает 0, если подстрока не найдена.","examples":"\n##### Примеры\n\nВозвращает 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nВозвращает 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает первое вхождение подстроки в другой текстовой строке. Возвращает 0, если подстрока не найдена.\n\n**Параметры**\n\n- **substring**: Текстовая строка для поиска.\n- **string**: Строка, в которой ищется подстрока.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Возвращает поднабор символов в текстовой строке от начальной точки до указанной длины строки.","examples":"\n##### Пример\n\nВозвращает 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает поднабор символов в текстовой строке от начальной точки до указанной длины строки.\n\n**Параметры**\n\n- **string**: Текстовая строка, из которой выполняется извлечение.\n- **start**: Это целое число, указывающее, где начинаются возвращаемые символы.\n- **length**: Количество символов для извлечения.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Возвращает поднабор символов в текстовой строке от начальной точки до указанной длины строки.","examples":"\n##### Примеры\n\nВозвращает 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nВозвращает 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает поднабор символов в текстовой строке от начальной точки до указанной длины строки.\n\n**Параметры**\n\n- **string**: Текстовая строка, из которой выполняется извлечение.\n- **start**: Это целое число, указывающее, где начинаются возвращаемые символы.\n- **length**: Количество символов для извлечения.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Возвращает текстовую строку, где удалены все пробелы в начале и/или в конце строки или другие указанные символы.. LEADING сократит начальную часть строки, TRAILING сократит конечную часть строки, а BOTH - обе стороны строки.","examples":"\n##### Примеры\n\nВозвращает 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nВозвращает '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nВозвращает 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает текстовую строку, где удалены все пробелы в начале и/или в конце строки или другие указанные символы.. LEADING сократит начальную часть строки, TRAILING сократит конечную часть строки, а BOTH - обе стороны строки.\n\n**Параметры**\n\n- **side**: Сторона текстовой строки, с которой будут удалены символы. Возможные значения: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Символы, которые будут сокращены из текстовой строки.\n- **string**: Текстовая строка для сокращения.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Преобразует все символы в текстовой строке в заглавные.","examples":"\n##### Пример\n\nВозвращает 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Преобразует все символы в текстовой строке в заглавные.\n\n**Параметр**\n\n- **string**: Строка для преобразования в заглавные символы.\n\n**Возвращаемое значение**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Функции дат","items":[{"type":"function","name":"current_date","bundle":"date","description":"Возвращает текущую дату в формате UTC.","examples":"\n##### Пример\n\nВозвращает текущую дату в формате UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает текущую дату в формате UTC.\n\n**Возвращаемое значение**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Возвращает текущие дату и время UTC в часах, минутах и секундах.","examples":"\n##### Пример\n\nВозвращает текущие дату и время UTC в часах, минутах и секундах.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает текущие дату и время UTC в часах, минутах и секундах.\n\n**Возвращаемое значение**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Возвращает текущие дату и время UTC в часах, минутах, секундах и миллисекундах.","examples":"\n##### Пример\n\nВозвращает текущие дату и время UTC в часах, минутах, секундах и миллисекундах.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает текущие дату и время UTC в часах, минутах, секундах и миллисекундах.\n\n**Возвращаемое значение**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Возвращает одну из частей datetime, например, год, месяц, день, час, минуту и секунду.","examples":"\n##### Примеры\n\nВозвращает 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nВозвращает 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nВозвращает 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает одну из частей datetime, например, год, месяц, день, час, минуту и секунду.\n\n**Параметры**\n\n- **part**: Часть, извлекаемая из даты. Возможные значения: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Дата, из которой выполняется извлечение части.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Числовые функции","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Возвращает абсолютное значение числа.","examples":"\n##### Пример\n\nВозвращает 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает абсолютное значение числа.\n\n**Параметр**\n\n- **number**: Число, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Возвращает арккосинус числа.","examples":"\n##### Пример\n\nВозвращает 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает арккосинус числа.\n\n**Параметр**\n\n- **number**: Число в диапазоне от -1 до 1, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Возвращает арксинус числа.","examples":"\n##### Пример\n\nВозвращает 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает арксинус числа.\n\n**Параметр**\n\n- **number**: Число в диапазоне от -1 до 1, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Возвращает арктангенс числа.","examples":"\n##### Пример\n\nВозвращает 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает арктангенс числа.\n\n**Параметр**\n\n- **number**: Число, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Конвертирует значение в выражении из одного типа данных в другой. Параметр dataType будет определять, в какой тип будет конвертировано значение. FLOAT конвертирует число в значение двойной точности, INTEGER - в целочисленное и т.п.","examples":"\n##### Примеры\n\nВозвращает 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nВозвращает '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nВозвращает '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Конвертирует значение в выражении из одного типа данных в другой. Параметр dataType будет определять, в какой тип будет конвертировано значение. FLOAT конвертирует число в значение двойной точности, INTEGER - в целочисленное и т.п.\n\n**Параметры**\n\n- **value**: Значение для конвертации в другой тип данных.\n- **dataType**: Тип данных, в который будет преобразовано значение. Возможные значения: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Возвращаемое значение**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Возвращает наименьшее целочисленное значение, большее или равное числу.","examples":"\n##### Пример\n\nВозвращает 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает наименьшее целочисленное значение, большее или равное числу.\n\n**Параметр**\n\n- **number**: Число для округления в большую сторону.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Возвращает тригонометрический косинус числа, которое должно представлять значение угла в радианах.","examples":"\n##### Пример\n\nВозвращает -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает тригонометрический косинус числа, которое должно представлять значение угла в радианах.\n\n**Параметр**\n\n- **number**: Угол в радианах, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Возвращает наибольшее целое значение, меньшее или равное числу.","examples":"\n##### Пример\n\nВозвращает 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает наибольшее целое значение, меньшее или равное числу.\n\n**Параметр**\n\n- **number**: Число для округления в меньшую сторону.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Возвращает натуральный логарифм (по основанию е) для числа.","examples":"\n##### Пример\n\nВозвращает 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает натуральный логарифм (по основанию е) для числа.\n\n**Параметр**\n\n- **number**: Число больше нуля, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Возвращает логарифм числа по основанию 10 .","examples":"\n##### Пример\n\nВозвращает 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает логарифм числа по основанию 10 .\n\n**Параметр**\n\n- **number**: Число, для которого выполняется операция, больше нуля.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Возвращает остаток после деления делимого на делитель. И делимое, и делитель должны быть целыми числами.","examples":"\n##### Пример\n\nВозвращает 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает остаток после деления делимого на делитель. И делимое, и делитель должны быть целыми числами.\n\n**Параметры**\n\n- **x**: Число, представляющее делимое.\n- **y**: Число, представляющее делитель.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Возвращает `NULL`, если expression1 равно expression2, в противном случае возвращает expression1. Значения для expression1 и expression2 должны быть одного типа. NULLIF обычно используется для предотвращения ошибок деления на ноль, задавая expression2 равным 0.","examples":"\n##### Примеры\n\nВозвращает `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nВозвращает 32\n\n```sql\nNULLIF(32, 0)\n```\n\nВозвращает `null`, если POP18 равно 0, иначе возвращает значение TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает `NULL`, если expression1 равно expression2, в противном случае возвращает expression1. Значения для expression1 и expression2 должны быть одного типа. NULLIF обычно используется для предотвращения ошибок деления на ноль, задавая expression2 равным 0.\n\n**Параметры**\n\n- **expression1**: Значение, для которого выполняется операция.\n- **expression2**: Значение, для которого выполняется операция.\n\n**Возвращаемое значение**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Возвращает значение числа, возведенного в заданную степень.","examples":"\n##### Пример\n\nВозвращает 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает значение числа, возведенного в заданную степень.\n\n**Параметры**\n\n- **x**: Число, для которого выполняется операция.\n- **y**: Показатель степени, указывающий число раз, на которое число будет умножаться само на себя.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Округляет число до заданной длины.","examples":"\n##### Примеры\n\nВозвращает 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nВозвращает 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Округляет число до заданной длины.\n\n**Параметры**\n\n- **number**: Число для округления.\n- **length**: Количество знаков после запятой, до которого нужно округлить число. При положительной длине число округляется до указанного числа знаков после запятой. При отрицательной длине число округляется слева от десятичной точки.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Возвращает знак заданного числа. Отрицательное число вернет -1. Положительное число вернет 1.","examples":"\n##### Примеры\n\nВозвращает -1\n\n```sql\nSIGN(-132)\n```\n\nВозвращает 0\n\n```sql\nSIGN(0)\n```\n\nВозвращает 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает знак заданного числа. Отрицательное число вернет -1. Положительное число вернет 1.\n\n**Параметр**\n\n- **number**: Число, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Возвращает тригонометрический синус числа, которое должно представлять значение угла в радианах.","examples":"\n##### Пример\n\nВозвращает 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает тригонометрический синус числа, которое должно представлять значение угла в радианах.\n\n**Параметр**\n\n- **number**: Угол в радианах, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Возвращает тангенс числа, которое должно представлять значение угла в радианах.","examples":"\n##### Пример\n\nВозвращает 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает тангенс числа, которое должно представлять значение угла в радианах.\n\n**Параметр**\n\n- **number**: Угол в радианах, для которого выполняется операция.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Возвращает усеченное число.","examples":"\n##### Примеры\n\nВозвращает 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nВозвращает 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nВозвращает 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Возвращает усеченное число.\n\n**Параметры**\n\n- **number**: Число для усечения.\n- **decimals**: Положительное значение усекает число до указанного числа знаков после запятой. Отрицательное значение усекает число слева от десятичной точки.\n\n**Возвращаемое значение**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]