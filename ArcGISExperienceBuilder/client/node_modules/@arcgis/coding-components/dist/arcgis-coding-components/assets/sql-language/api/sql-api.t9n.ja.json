[{"id":"numeric_functions","title":"数値関数","items":[{"type":"function","name":"abs","bundle":"numeric","description":"数値の絶対値を返します。","examples":"\n##### 例\n\n2 を返します\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の絶対値を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"数値の逆余弦を返します。","examples":"\n##### 例\n\n1.26610367 を返します\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の逆余弦を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる -1 ～ 1 までの数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"数値の逆正弦を返します。","examples":"\n##### 例\n\n0.30469265 を返します\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の逆正弦を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる -1 ～ 1 までの数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"数値の逆正接を返します。","examples":"\n##### 例\n\n0.78539816 を返します\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の逆正接を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"値のデータ タイプを変換します。 dataType パラメーターにより、値の変換先のデータ タイプが決まります。 例: FLOAT は値を倍精度に変換し、INTEGER は値を整数に変換します。","examples":"\n##### 例\n\n2 を返します\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\n1:00 PM を返します\n\n```sql\nCAST('13:00' AS TIME)\n```\n\n50 を返します\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"値のデータ タイプを変換します。 dataType パラメーターにより、値の変換先のデータ タイプが決まります。 例: FLOAT は値を倍精度に変換し、INTEGER は値を整数に変換します。\n\n**パラメーター**\n\n- **value**: 別のデータ タイプに変換される値。\n- **dataType**: 値の変換先のデータ タイプ。 指定可能な値: DATE、FLOAT、INTEGER、REAL、SMALLINT、TIME、TIMESTAMP、VARCHAR。\n\n**戻り値**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"数値以上の最も小さい整数を返します。","examples":"\n##### 例\n\n235 を返します\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値以上の最も小さい整数を返します。\n\n**パラメーター**\n\n- **number**: 切り上げられる数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"数値の角度の余弦を返します。角度の単位はラジアンです。","examples":"\n##### 例\n\n-0.41614684 を返します\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の角度の余弦を返します。角度の単位はラジアンです。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となるラジアン単位の角度。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"数値以下の最も大きい整数を返します。","examples":"\n##### 例\n\n12 を返します\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値以下の最も大きい整数を返します。\n\n**パラメーター**\n\n- **number**: 切り下げられる数値。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"数値の自然対数 (底が e) を返します。","examples":"\n##### 例\n\n2.302585 を返します\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の自然対数 (底が e) を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる 0 より大きい数値。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"数値の底が 10 の対数を返します。","examples":"\n##### 例\n\n0.301030 を返します\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の底が 10 の対数を返します。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる 0 より大きい数値。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"被除数を除数で除算したときの余りを返します。 被除数と除数の両方が整数である必要があります。","examples":"\n##### 例\n\n2 を返します\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"被除数を除数で除算したときの余りを返します。 被除数と除数の両方が整数である必要があります。\n\n**パラメーター**\n\n- **x**: 被除数を表す数値。\n- **y**: 除数を表す数値。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"expression1 が expression2 と等しい場合、NULL を返します。等しくない場合、expression1 を返します。 expression1 と expression2 の値は同じ型である必要があります。 NULLIF は、expression2 を 0 に設定してゼロ除算エラーを防ぐためによく使用されます。","examples":"\n##### 例\n\nnull を返します\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\n32 を返します\n\n```sql\nNULLIF(32, 0)\n```\n\nPOP18 が 0 と等しい場合は null を返し、それ以外の場合は TOTALPOP / POP18 の値を返します。\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"expression1 が expression2 と等しい場合、NULL を返します。等しくない場合、expression1 を返します。 expression1 と expression2 の値は同じ型である必要があります。 NULLIF は、expression2 を 0 に設定してゼロ除算エラーを防ぐためによく使用されます。\n\n**パラメーター**\n\n- **expression1**: 演算の実行対象となる値。\n- **expression2**: 演算の実行対象となる値。\n\n**戻り値**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"数値を指定した乗数で累乗した値を返します。","examples":"\n##### 例\n\n8 を返します\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値を指定した乗数で累乗した値を返します。\n\n**パラメーター**\n\n- **x**: 演算の実行対象となる数値。\n- **y**: 数値の累乗を示す指数。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"数値を指定の長さに丸めます。","examples":"\n##### 例\n\n3.98 を返します\n\n```sql\nROUND(3.98024, 2)\n```\n\n200 を返します\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値を指定の長さに丸めます。\n\n**パラメーター**\n\n- **number**: 丸められる数値。\n- **length**: 数値を丸める小数点以下の桁数です。 長さが正の場合、数値を指定した小数桁に丸めます。 長さが負の場合、数値を小数点以上に丸めます。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"特定の数値の符号を返します。 数値が負の場合は -1 が返されます。 数値が正の場合は 1 が返されます。","examples":"\n##### 例\n\n-1 を返します\n\n```sql\nSIGN(-132)\n```\n\n0 を返します\n\n```sql\nSIGN(0)\n```\n\n1 を返します\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"特定の数値の符号を返します。 数値が負の場合は -1 が返されます。 数値が正の場合は 1 が返されます。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となる数値です。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"数値の角度の正弦を返します。角度の単位はラジアンです。","examples":"\n##### 例\n\n0.84147098 を返します\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の角度の正弦を返します。角度の単位はラジアンです。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となるラジアン単位の角度。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"数値の角度の正接を返します。角度の単位はラジアンです。","examples":"\n##### 例\n\n2.57215162 を返します\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"数値の角度の正接を返します。角度の単位はラジアンです。\n\n**パラメーター**\n\n- **number**: 演算の実行対象となるラジアン単位の角度。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"切り捨てられた数値を返します。","examples":"\n##### 例\n\n91.3 を返します\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\n124 を返します\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\n1900 を返します\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"切り捨てられた数値を返します。\n\n**パラメーター**\n\n- **number**: 切り捨てられる数値。\n- **decimals**: 値が正の場合、数値を指定した小数桁に切り捨てます。 値が負の場合、数値を小数点以上に切り捨てます。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"文字列関数","items":[{"type":"function","name":"char_length","bundle":"string","description":"テキスト文字列の文字数を整数として返します。","examples":"\n##### 例\n\n11 を返します\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"テキスト文字列の文字数を整数として返します。\n\n**パラメーター**\n\n- **string**: 長さを返すテキスト文字列。\n\n**戻り値**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"リストで NULL 以外の最初の値を返します。 NULL 値を除いて、関数に渡されるすべての値は同じタイプである必要があります。","examples":"\n##### 例\n\nGreen goldfish を返します\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\n-21 を返します\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"リストで NULL 以外の最初の値を返します。 NULL 値を除いて、関数に渡されるすべての値は同じタイプである必要があります。\n\n**パラメーター**\n\n- **value1**: リストの 1 番目の値。\n- **valueN**: リストの以降の値。\n\n**戻り値**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"2 つの文字列値を連結します。","examples":"\n##### 例\n\nMaple syrup を返します\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"2 つの文字列値を連結します。\n\n**パラメーター**\n\n- **string1**: 最初のテキスト文字列。\n- **string2**: 最初のテキスト文字列に連結するテキスト文字列。\n\n**戻り値**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"ポータルに現在サイン インしているユーザーのユーザー名を返します。","examples":"\n##### 例\n\nポータルに現在サイン インしているユーザーのユーザー名を返します。\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"ポータルに現在サイン インしているユーザーのユーザー名を返します。\n\n**戻り値**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"テキスト文字列内のすべての文字を小文字に変換します。","examples":"\n##### 例\n\nhello world を返します\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"テキスト文字列内のすべての文字を小文字に変換します。\n\n**パラメーター**\n\n- **string**: 小文字に変換されるテキスト文字列。\n\n**戻り値**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"別のテキスト文字列内で部分文字列の最初に現れる位置を返します。 部分文字列が見つからない場合は 0 を返します。","examples":"\n##### 例\n\n6 を返す\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\n9 を返します\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"別のテキスト文字列内で部分文字列の最初に現れる位置を返します。 部分文字列が見つからない場合は 0 を返します。\n\n**パラメーター**\n\n- **substring**: 検索対象のテキスト文字列。\n- **string**: 部分文字列を検索する文字列。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"テキスト文字列内で、開始点から指定した文字列長の文字のサブセットを返します。","examples":"\n##### 例\n\nCity を返します\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"テキスト文字列内で、開始点から指定した文字列長の文字のサブセットを返します。\n\n**パラメーター**\n\n- **string**: 抽出元のテキスト文字列。\n- **start**: 返される文字の開始位置を指定する整数値。\n- **length**: 抽出する文字数です。\n\n**戻り値**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"テキスト文字列内で、開始点から指定した文字列長の文字のサブセットを返します。","examples":"\n##### 例\n\nCity を返します\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nNew York を返します\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"テキスト文字列内で、開始点から指定した文字列長の文字のサブセットを返します。\n\n**パラメーター**\n\n- **string**: 抽出元のテキスト文字列。\n- **start**: 返される文字の開始位置を指定する整数値。\n- **length**: 抽出する文字数です。\n\n**戻り値**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"前後のスペースやその他の指定された文字をすべて削除したテキスト文字列を返します。 LEADING はテキスト文字列の先頭をトリムし、TRAILING はテキスト文字列の末尾をトリムし、BOTH はテキスト文字列の両側をトリムします。","examples":"\n##### 例\n\nmyFunc を返します\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nhello world を返します\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nhello world を返します\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"前後のスペースやその他の指定された文字をすべて削除したテキスト文字列を返します。 LEADING はテキスト文字列の先頭をトリムし、TRAILING はテキスト文字列の末尾をトリムし、BOTH はテキスト文字列の両側をトリムします。\n\n**パラメーター**\n\n- **side**: スペースまたは文字が削除されるテキスト文字列の側。 指定可能な値: LEADING, TRAILING, BOTH。\n- **character**: テキスト文字列からトリムされる文字。\n- **string**: トリムされるテキスト文字列。\n\n**戻り値**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"テキスト文字列内のすべての文字を大文字に変換します。","examples":"\n##### 例\n\nQUICK RED FOX を返します\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"テキスト文字列内のすべての文字を大文字に変換します。\n\n**パラメーター**\n\n- **string**: 大文字に変換される文字列。\n\n**戻り値**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"日付関数","items":[{"type":"function","name":"current_date","bundle":"date","description":"現在の日付を UTC で返します。","examples":"\n##### 例\n\n現在の日付を UTC で返します。\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"現在の日付を UTC で返します。\n\n**戻り値**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"現在の UTC の日付と時刻を時間、分、秒で返します。","examples":"\n##### 例\n\n現在の UTC の日付と時刻を時間、分、秒で返します。\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"現在の UTC の日付と時刻を時間、分、秒で返します。\n\n**戻り値**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"現在の UTC の日付と時刻を時間、分、秒、ミリ秒で返します。","examples":"\n##### 例\n\n現在の UTC の日付と時刻を時間、分、秒、ミリ秒で返します。\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"現在の UTC の日付と時刻を時間、分、秒、ミリ秒で返します。\n\n**戻り値**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"年、月、日、時間、分、秒など、datetime の一部を返します。","examples":"\n##### 例\n\n12 を返します\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\n21 を返します\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\n30 を返します\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"年、月、日、時間、分、秒など、datetime の一部を返します。\n\n**パラメーター**\n\n- **part**: 日付から抽出される部分。 指定可能な値: YEAR、MONTH、DAY、HOUR、MINUTE、SECOND。\n- **datetime**: 抽出元の日付。\n\n**戻り値**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]