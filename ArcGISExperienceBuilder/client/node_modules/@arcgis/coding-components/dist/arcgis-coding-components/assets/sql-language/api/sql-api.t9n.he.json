[{"id":"string_functions","title":"פונקציות מחרוזת","items":[{"type":"function","name":"char_length","bundle":"string","description":"מחזיר את מספר התווים במחרוזת טקסט כמספר שלם.","examples":"\n##### דוגמה\n\nמחזיר 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את מספר התווים במחרוזת טקסט כמספר שלם.\n\n**פרמטר**\n\n- **string**: מחרוזת הטקסט שאת אורכה יש להחזיר.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"מחזיר את הערך הראשון ברשימה שאינו 'NULL'. כל הערכים שמועברים אל הפונקציה חייבים להיות מאותו סוג, למעט ערכי 'NULL'.","examples":"\n##### דוגמאות\n\nמחזיר 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nמחזיר -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הערך הראשון ברשימה שאינו 'NULL'. כל הערכים שמועברים אל הפונקציה חייבים להיות מאותו סוג, למעט ערכי 'NULL'.\n\n**פרמטרים**\n\n- **value1**: הערך הראשון ברשימה.\n- **valueN**: הערך/ים הבא/ים ברשימה.\n\n**ערך החזרה**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"משרשר שתי מחרוזות יחד.","examples":"\n##### דוגמה\n\nמחזיר 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"משרשר שתי מחרוזות יחד.\n\n**פרמטרים**\n\n- **string1**: מחרוזת הטקסט הראשונה.\n- **string2**: מחרוזת הטקסט שיש לחתוך לפי מחרוזת הטקסט הראשונה.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"מחזיר את שם המשתמש של המשתמש שמחובר כעת לפורטל.","examples":"\n##### דוגמה\n\nמחזיר את שם המשתמש של המשתמש שמחובר כעת לפורטל.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את שם המשתמש של המשתמש שמחובר כעת לפורטל.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"ממיר את כל התווים במחרוזת הטקסט לאותיות קטנות.","examples":"\n##### דוגמה\n\nמחזיר 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"ממיר את כל התווים במחרוזת הטקסט לאותיות קטנות.\n\n**פרמטר**\n\n- **string**: מחרוזת הטקסט שיש להמיר לאותיות קטנות.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"מחזיר את המופע הראשון של תת-מחרוזת בתוך מחרוזת טקסט אחרת. מחזיר 0 אם מחרוזת המשנה זו לא נמצאה.","examples":"\n##### דוגמאות\n\nמחזיר 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nמחזיר 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את המופע הראשון של תת-מחרוזת בתוך מחרוזת טקסט אחרת. מחזיר 0 אם מחרוזת המשנה זו לא נמצאה.\n\n**פרמטרים**\n\n- **substring**: מחרוזת הטקסט שיש לחפש.\n- **string**: המחרוזת שבה יתבצע חיפוש של מחרוזת המשנה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"מחזיר סט משנה של תווים במחרוזת טקסט, מנקודת ההתחלה עד אורך המחרוזת שצוין.","examples":"\n##### דוגמה\n\nמחזיר 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר סט משנה של תווים במחרוזת טקסט, מנקודת ההתחלה עד אורך המחרוזת שצוין.\n\n**פרמטרים**\n\n- **string**: מחרוזת הטקסט שמתוכה יש לבצע חילוץ.\n- **start**: ערך המספר השלם שמציין היכן מתחילים התווים שיוחזרו.\n- **length**: מספר התווים שיש לחלץ.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"מחזיר סט משנה של תווים במחרוזת טקסט, מנקודת ההתחלה עד אורך המחרוזת שצוין.","examples":"\n##### דוגמאות\n\nמחזיר 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nמחזיר 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר סט משנה של תווים במחרוזת טקסט, מנקודת ההתחלה עד אורך המחרוזת שצוין.\n\n**פרמטרים**\n\n- **string**: מחרוזת הטקסט שמתוכה יש לבצע חילוץ.\n- **start**: ערך המספר השלם שמציין היכן מתחילים התווים שיוחזרו.\n- **length**: מספר התווים שיש לחלץ.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"מחזיר מחרוזת טקסט שבה הוסרו כל הרווחים הפותחים ו/או הסוגרים או שתווים אחרים שצוינו הוסרו. LEADING יחתוך את הצד המתחיל של מחרוזת הטקסט, TRAILING יחתוך את הצד הסוגר של מחרוזת הטקסט ו-BOTH יחתוך את שני צדי מחרוזת הטקסט.","examples":"\n##### דוגמאות\n\nמחזיר 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nמחזיר 'hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nמחזיר 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר מחרוזת טקסט שבה הוסרו כל הרווחים הפותחים ו/או הסוגרים או שתווים אחרים שצוינו הוסרו. LEADING יחתוך את הצד המתחיל של מחרוזת הטקסט, TRAILING יחתוך את הצד הסוגר של מחרוזת הטקסט ו-BOTH יחתוך את שני צדי מחרוזת הטקסט.\n\n**פרמטרים**\n\n- **side**: הצד של מחרוזת הטקסט שממנו רווחים או תווים יוסרו. ערכים אפשריים: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: התווים שיחתכו ממחרוזת הטקסט.\n- **string**: מחרוזת הטקסט שיש לחתוך.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"ממיר את כל התווים במחרוזת הטקסט לאותיות רישיות.","examples":"\n##### דוגמה\n\nמחזיר 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"ממיר את כל התווים במחרוזת הטקסט לאותיות רישיות.\n\n**פרמטר**\n\n- **string**: מחרוזת שיש להמיר לאותיות רישיות.\n\n**ערך החזרה**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"numeric_functions","title":"פונקציות מספריות","items":[{"type":"function","name":"abs","bundle":"numeric","description":"מחזיר את הערך האבסולוטי של המספר.","examples":"\n##### דוגמה\n\nמחזיר 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הערך האבסולוטי של המספר.\n\n**פרמטר**\n\n- **number**: מספר שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"מחזיר את הארק קוסינוס של מספר.","examples":"\n##### דוגמה\n\nמחזיר 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הארק קוסינוס של מספר.\n\n**פרמטר**\n\n- **number**: מספר בין ‎-1 לבין 1 שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"מחזיר את הארק סינוס של מספר.","examples":"\n##### דוגמה\n\nמחזיר 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הארק סינוס של מספר.\n\n**פרמטר**\n\n- **number**: מספר בין ‎-1 לבין 1 שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"מחזיר את הארק טנגנס של מספר.","examples":"\n##### דוגמה\n\nמחזיר 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הארק טנגנס של מספר.\n\n**פרמטר**\n\n- **number**: מספר שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"ממיר ערך מסוג נתונים אחד לאחר. הפרמטר dataType יקבע לאיזה סוג הערך יומר. FLOAT ממיר את הערך לכפול, INTEGER ממיר את הערך למספר שלם וכך הלאה.","examples":"\n##### דוגמאות\n\nמחזיר 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nמחזיר '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nמחזיר 50\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"ממיר ערך מסוג נתונים אחד לאחר. הפרמטר dataType יקבע לאיזה סוג הערך יומר. FLOAT ממיר את הערך לכפול, INTEGER ממיר את הערך למספר שלם וכך הלאה.\n\n**פרמטרים**\n\n- **value**: הערך שיש להמיר לסוג נתונים אחר.\n- **dataType**: סוג הנתונים שאליו יש להמיר את הערך. ערכים אפשריים: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**ערך החזרה**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"מחזיר את המספר השלם הקטן ביותר, שגדול או שווה למספר.","examples":"\n##### דוגמה\n\nמחזיר 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את המספר השלם הקטן ביותר, שגדול או שווה למספר.\n\n**פרמטר**\n\n- **number**: המספר שיש לעגל כלפי מעלה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"מחזיר את הקוסינוס הטריגונומטרי של המספר, אשר מבוסס על ההנחה שהנתונים שהוזנו מייצגים זווית ברדיאנים.","examples":"\n##### דוגמה\n\nמחזיר -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הקוסינוס הטריגונומטרי של המספר, אשר מבוסס על ההנחה שהנתונים שהוזנו מייצגים זווית ברדיאנים.\n\n**פרמטר**\n\n- **number**: זווית ברדיאנים שעליה תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"מחזיר את המספר השלם הגדול ביותר, שקטן או שווה למספר.","examples":"\n##### דוגמה\n\nמחזיר 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את המספר השלם הגדול ביותר, שקטן או שווה למספר.\n\n**פרמטר**\n\n- **number**: המספר שיש לעגל כלפי מטה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"מחזיר את הלוגריתם הטבעי (בסיס e) של המספר.","examples":"\n##### דוגמה\n\nמחזיר 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הלוגריתם הטבעי (בסיס e) של המספר.\n\n**פרמטר**\n\n- **number**: מספר גדול מ-0 שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"מחזיר את הלוגריתם בבסיס 10 של המספר.","examples":"\n##### דוגמה\n\nמחזיר 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הלוגריתם בבסיס 10 של המספר.\n\n**פרמטר**\n\n- **number**: מספר שעליו תבוצע הפעולה, שהוא גדול מ-0.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"מחזיר את השארית לאחר חלוקת המספר במחלק. המספר והמחלק חייבים שניהם להיות מספרים שלמים.","examples":"\n##### דוגמה\n\nמחזיר 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את השארית לאחר חלוקת המספר במחלק. המספר והמחלק חייבים שניהם להיות מספרים שלמים.\n\n**פרמטרים**\n\n- **x**: המספר שמייצג את המחולק.\n- **y**: המספר שמייצג את המחלק.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"מחזיר `NULL` אם ביטוי1 זהה לביטוי2, אחרת מחזיר את ביטוי1. ערכים עבור ביטוי1 וביטוי2 חייבים להיות מאותו סוג. לעתים קרובות נעשה שימוש ב-NULLIF כדי להימנע משגיאות של חלוקה באפס, הנובעות מהגדרת ביטוי2 כ-0.","examples":"\n##### דוגמאות\n\nמחזיר `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nמחזיר 32\n\n```sql\nNULLIF(32, 0)\n```\n\nמחזיר `null` אם POP18 שווה ל-0, אחרת, מחזיר את הערך של TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר `NULL` אם ביטוי1 זהה לביטוי2, אחרת מחזיר את ביטוי1. ערכים עבור ביטוי1 וביטוי2 חייבים להיות מאותו סוג. לעתים קרובות נעשה שימוש ב-NULLIF כדי להימנע משגיאות של חלוקה באפס, הנובעות מהגדרת ביטוי2 כ-0.\n\n**פרמטרים**\n\n- **expression1**: ערך שעליו תבוצע הפעולה.\n- **expression2**: ערך שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"מחזיר את הערך של המספר, לאחר העלאה בחזקה שצוינה.","examples":"\n##### דוגמה\n\nמחזיר 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הערך של המספר, לאחר העלאה בחזקה שצוינה.\n\n**פרמטרים**\n\n- **x**: המספר שעליו תבוצע הפעולה.\n- **y**: המעריך שמציין את מספר הפעמים להכפלת המספר בעצמו.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"מעגל את המספר לאורך שצוין.","examples":"\n##### דוגמאות\n\nמחזיר 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nמחזיר 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מעגל את המספר לאורך שצוין.\n\n**פרמטרים**\n\n- **number**: מספר שיש לעגל.\n- **length**: מספר הספרות העשרוניות שאליו יש לעגל את המספר. אורך חיובי מעגל את המספר למקום העשרוני שצוין. אורך שלילי יעגל את המספר משמאל לנקודה העשרונית.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"מחזיר את הסימון של מספר נתון. מספר שלילי יחזיר -1. מספר חיובי יחזיר 1.","examples":"\n##### דוגמאות\n\nמחזיר -1\n\n```sql\nSIGN(-132)\n```\n\nמחזיר 0\n\n```sql\nSIGN(0)\n```\n\nמחזיר 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הסימון של מספר נתון. מספר שלילי יחזיר -1. מספר חיובי יחזיר 1.\n\n**פרמטר**\n\n- **number**: מספר שעליו תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"מחזיר את הסינוס הטריגונומטרי של המספר, אשר מבוסס על ההנחה שהנתונים שהוזנו מייצגים זווית ברדיאנים.","examples":"\n##### דוגמה\n\nמחזיר 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את הסינוס הטריגונומטרי של המספר, אשר מבוסס על ההנחה שהנתונים שהוזנו מייצגים זווית ברדיאנים.\n\n**פרמטר**\n\n- **number**: זווית ברדיאנים שעליה תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"מחזיר טנגנס של מספר, שלפי ההנחה הוא זווית ברדיאנים.","examples":"\n##### דוגמה\n\nמחזיר 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר טנגנס של מספר, שלפי ההנחה הוא זווית ברדיאנים.\n\n**פרמטר**\n\n- **number**: זווית ברדיאנים שעליה תבוצע הפעולה.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"מחזיר מספר חתוך.","examples":"\n##### דוגמאות\n\nמחזיר 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nמחזיר 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nמחזיר 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר מספר חתוך.\n\n**פרמטרים**\n\n- **number**: מספר שיש לחתוך.\n- **decimals**: אורך חיובי חותך את המספר למקום העשרוני שצוין. אורך שלילי חותך את המספר משמאל לנקודה העשרונית.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"date_functions","title":"פונקציות תאריך","items":[{"type":"function","name":"current_date","bundle":"date","description":"מחזיר את התאריך הנוכחי לפי UTC.","examples":"\n##### דוגמה\n\nמחזיר את התאריך הנוכחי לפי UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את התאריך הנוכחי לפי UTC.\n\n**ערך החזרה**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"מחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות ושניות.","examples":"\n##### דוגמה\n\nמחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות ושניות.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות ושניות.\n\n**ערך החזרה**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"מחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות, שניות ואלפיות שנייה.","examples":"\n##### דוגמה\n\nמחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות, שניות ואלפיות שנייה.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר את התאריך והשעה הנוכחיים ב-UTC, בשעות, דקות, שניות ואלפיות שנייה.\n\n**ערך החזרה**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"מחזיר חלק אחד של תאריך ושעה, כגון שנה, חודש, יום, שעה, דקה או שנייה.","examples":"\n##### דוגמאות\n\nמחזיר 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nמחזיר 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nמחזיר 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"מחזיר חלק אחד של תאריך ושעה, כגון שנה, חודש, יום, שעה, דקה או שנייה.\n\n**פרמטרים**\n\n- **part**: החלק שיש לחלץ מהתאריך. ערכים אפשריים: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: התאריך שמתוכו יש לחלץ חלק.\n\n**ערך החזרה**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]