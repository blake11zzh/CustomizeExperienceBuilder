[{"id":"numeric_functions","title":"Fungsi numerik","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Menghasilkan nilai absolut dari angka yang dimaksud.","examples":"\n##### Contoh\n\nMenghasilkan 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan nilai absolut dari angka yang dimaksud.\n\n**Parameter**\n\n- **number**: Angka yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Menghasilkan arccosinus suatu angka.","examples":"\n##### Contoh\n\nMenghasilkan 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan arccosinus suatu angka.\n\n**Parameter**\n\n- **number**: Angka antara -1 dan 1 yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Menghasilkan arcsinus suatu angka.","examples":"\n##### Contoh\n\nMenghasilkan 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan arcsinus suatu angka.\n\n**Parameter**\n\n- **number**: Angka antara -1 dan 1 yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Menghasilkan arctangen suatu angka.","examples":"\n##### Contoh\n\nMenghasilkan 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan arctangen suatu angka.\n\n**Parameter**\n\n- **number**: Angka yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Mengonversi nilai dari satu jenis data ke jenis lainnya. Parameter dataType akan menentukan jenis data yang akan menjadi target konversi. FLOAT mengonversi nilai menjadi dua kali lipat, INTEGER mengonversi nilai menjadi bilangan bulat, dll.","examples":"\n##### Contoh\n\nMenghasilkan 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nMenghasilkan '13.00'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nMenghasilkan '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Mengonversi nilai dari satu jenis data ke jenis lainnya. Parameter dataType akan menentukan jenis data yang akan menjadi target konversi. FLOAT mengonversi nilai menjadi dua kali lipat, INTEGER mengonversi nilai menjadi bilangan bulat, dll.\n\n**Parameter**\n\n- **value**: Nilai yang akan dikonversi menjadi jenis data lain.\n- **dataType**: Jenis data yang menjadi target konversi. Nilai yang memungkinkan: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Nilai kembali**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Menghasilkan bilangan bulat terkecil yang lebih besar atau sama dengan angka yang ditentukan.","examples":"\n##### Contoh\n\nMenghasilkan 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan bilangan bulat terkecil yang lebih besar atau sama dengan angka yang ditentukan.\n\n**Parameter**\n\n- **number**: Angka dibulatkan ke atas.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Menghasilkan cosinus trigonometrik dari angka tersebut, yang diasumsikan sebagai sudut dalam radian.","examples":"\n##### Contoh\n\nMenghasilkan -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan cosinus trigonometrik dari angka tersebut, yang diasumsikan sebagai sudut dalam radian.\n\n**Parameter**\n\n- **number**: Sudut dalam radian yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Menghasilkan bilangan bulat terbesar yang kurang dari atau sama dengan angka tersebut.","examples":"\n##### Contoh\n\nMenghasilkan 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan bilangan bulat terbesar yang kurang dari atau sama dengan angka tersebut.\n\n**Parameter**\n\n- **number**: Angka yang akan dibulatkan ke bawah.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Menghasilkan logaritma alamiah (berbasis e) dari angka tersebut.","examples":"\n##### Contoh\n\nMenghasilkan 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan logaritma alamiah (berbasis e) dari angka tersebut.\n\n**Parameter**\n\n- **number**: Angka dengan nilai lebih dari 0 yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Menghasilkan logaritma basis-10 angka tersebut.","examples":"\n##### Contoh\n\nMenghasilkan 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan logaritma basis-10 angka tersebut.\n\n**Parameter**\n\n- **number**: Angka yang digunakan untuk melakukan operasi dengan nilai lebih dari 0.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Menghasilkan sisa setelah membagi pembilang dengan penyebut. Pembilang dan penyebut harus berupa bilangan bulat.","examples":"\n##### Contoh\n\nMenghasilkan 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan sisa setelah membagi pembilang dengan penyebut. Pembilang dan penyebut harus berupa bilangan bulat.\n\n**Parameter**\n\n- **x**: Angka tersebut merepresentasikan pembilang.\n- **y**: Angka tersebut merepresentasikan penyebut.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Menghasilkan `NULL` jika expression1 sama dengan expression2, jika tidak, akan menghasilkan expression1. Nilai untuk expression1 dan expression2 harus sejenis. NULLIF biasa digunakan untuk mencegah kesalahan bilangan dibagi 0 dengan mengatur expression2 menjadi 0.","examples":"\n##### Contoh\n\nMenghasilkan `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nMenghasilkan 32\n\n```sql\nNULLIF(32, 0)\n```\n\nMenghasilkan `null` jika POP18 sama dengan 0, jika tidak sama dengan 0, nilai TOTALPOP / POP18 akan dihasilkan.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan `NULL` jika expression1 sama dengan expression2, jika tidak, akan menghasilkan expression1. Nilai untuk expression1 dan expression2 harus sejenis. NULLIF biasa digunakan untuk mencegah kesalahan bilangan dibagi 0 dengan mengatur expression2 menjadi 0.\n\n**Parameter**\n\n- **expression1**: Nilai yang digunakan untuk melakukan operasi.\n- **expression2**: Nilai yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Menghasilkan nilai dari angka tersebut yang dinaikkan ke daya tertentu.","examples":"\n##### Contoh\n\nMenghasilkan 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan nilai dari angka tersebut yang dinaikkan ke daya tertentu.\n\n**Parameter**\n\n- **x**: Angka yang digunakan untuk melakukan operasi.\n- **y**: Eksponen yang menunjukkan jumlah kali untuk mengalikan angka itu sendiri.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Membulatkan angka ke panjang yang ditentukan.","examples":"\n##### Contoh\n\nMenghasilkan 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nMenghasilkan 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Membulatkan angka ke panjang yang ditentukan.\n\n**Parameter**\n\n- **number**: Angka yang akan dibulatkan.\n- **length**: Jumlah tempat desimal untuk membulatkan angka. Pembulatan panjang positif angka ke lokasi desimal yang ditentukan. Panjang negatif akan membulatkan angka ke kiri titik desimal.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Menghasilkan tanda dari angka yang diberikan. Angka negatif akan menghasilkan -1. Angka positif akan menghasilkan 1.","examples":"\n##### Contoh\n\nMenghasilkan -1\n\n```sql\nSIGN(-132)\n```\n\nMenghasilkan 0\n\n```sql\nSIGN(0)\n```\n\nMenghasilkan 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan tanda dari angka yang diberikan. Angka negatif akan menghasilkan -1. Angka positif akan menghasilkan 1.\n\n**Parameter**\n\n- **number**: Angka yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Menghasilkan sinus trigonometrik dari angka tersebut, yang diasumsikan sebagai sudut dalam radian.","examples":"\n##### Contoh\n\nMenghasilkan 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan sinus trigonometrik dari angka tersebut, yang diasumsikan sebagai sudut dalam radian.\n\n**Parameter**\n\n- **number**: Sudut dalam radian yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Menghasilkan tangen dari angka, yang diasumsikan sebagai sudut dalam radian.","examples":"\n##### Contoh\n\nMenghasilkan 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan tangen dari angka, yang diasumsikan sebagai sudut dalam radian.\n\n**Parameter**\n\n- **number**: Sudut di radian yang digunakan untuk melakukan operasi.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Menghasilkan angka terpotong.","examples":"\n##### Contoh\n\nMenghasilkan 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nMenghasilkan 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nMenghasilkan 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan angka terpotong.\n\n**Parameter**\n\n- **number**: Angka yang akan dipotong.\n- **decimals**: Nilai positif yang memotong angka ke lokasi desimal yang ditentukan. Nilai negatif yang memotong angka ke kiri titik desimal.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Fungsi string","items":[{"type":"function","name":"char_length","bundle":"string","description":"Menghasilkan angka karakter dalam string teks sebagai bilangan bulat.","examples":"\n##### Contoh\n\nMenghasilkan 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan angka karakter dalam string teks sebagai bilangan bulat.\n\n**Parameter**\n\n- **string**: String teks yang akan dihasilkan panjangnya.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Menghasilkan nilai pertama dalam daftar yang tidak `NULL`. Semua nilai yang dimasukkan ke dalam fungsi harus berjenis sama, kecuali nilai `NULL`.","examples":"\n##### Contoh\n\nMenghasilkan 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nMenghasilkan -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan nilai pertama dalam daftar yang tidak `NULL`. Semua nilai yang dimasukkan ke dalam fungsi harus berjenis sama, kecuali nilai `NULL`.\n\n**Parameter**\n\n- **value1**: Nilai pertama dalam daftar.\n- **valueN**: Nilai berikutnya dalam daftar.\n\n**Nilai kembali**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Mengaitkan dua string.","examples":"\n##### Contoh\n\nMenghasilkan 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Mengaitkan dua string.\n\n**Parameter**\n\n- **string1**: String teks pertama.\n- **string2**: String teks yang akan dikaitkan dengan string teks pertama.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Menghasilkan nama pengguna dari pengguna yang saat ini masuk ke portal.","examples":"\n##### Contoh\n\nMenghasilkan nama pengguna dari pengguna yang saat ini masuk ke portal.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan nama pengguna dari pengguna yang saat ini masuk ke portal.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Mengonversi semua karakter dalam string teks ke huruf kecil.","examples":"\n##### Contoh\n\nMenghasilkan 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Mengonversi semua karakter dalam string teks ke huruf kecil.\n\n**Parameter**\n\n- **string**: String teks yang akan dikonversi ke huruf kecil.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Menghasilkan kemunculan substring pertama di string teks lain. Menghasilkan 0 jika substring tidak ditemukan.","examples":"\n##### Contoh\n\nMengembalikan 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nMenghasilkan 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan kemunculan substring pertama di string teks lain. Menghasilkan 0 jika substring tidak ditemukan.\n\n**Parameter**\n\n- **substring**: String teks yang akan dicari.\n- **string**: String yang akan dicari untuk substring.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Menghasilkan subset karakter dalam string teks dari titik awal ke panjang string yang ditentukan.","examples":"\n##### Contoh\n\nMenghasilkan 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan subset karakter dalam string teks dari titik awal ke panjang string yang ditentukan.\n\n**Parameter**\n\n- **string**: String teks yang akan diekstrak.\n- **start**: Nilai bilangan bulat yang menentukan tempat mulai karakter yang dihasilkan.\n- **length**: Jumlah karakter yang akan diekstrak.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Menghasilkan subset karakter dalam string teks dari titik awal ke panjang string yang ditentukan.","examples":"\n##### Contoh\n\nMenghasilkan 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nMenghasilkan 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan subset karakter dalam string teks dari titik awal ke panjang string yang ditentukan.\n\n**Parameter**\n\n- **string**: String teks yang akan diekstrak.\n- **start**: Nilai bilangan bulat yang menentukan tempat mulai karakter yang dihasilkan.\n- **length**: Jumlah karakter yang akan diekstrak.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Menghasilkan string teks dengan semua ruang yang mendahului dan/atau mengikuti atau karakter lain yang ditentukan sudah dihapus. LEADING akan memangkas sisi yang mendahului string teks, TRAILING akan memangkas sisi yang mengikuti string teks, sedangkan BOTH akan memangkas kedua sisi string teks.","examples":"\n##### Contoh\n\nMenghasilkan 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nMenghasilkan '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nMenghasilkan 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan string teks dengan semua ruang yang mendahului dan/atau mengikuti atau karakter lain yang ditentukan sudah dihapus. LEADING akan memangkas sisi yang mendahului string teks, TRAILING akan memangkas sisi yang mengikuti string teks, sedangkan BOTH akan memangkas kedua sisi string teks.\n\n**Parameter**\n\n- **side**: Sisi string teks tempat ruang atau karakter akan dihapus. Nilai yang memungkinkan: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Karakter yang akan dipangkas dari string teks.\n- **string**: String teks yang akan dipangkas.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Mengonversi semua karakter dalam string teks ke huruf besar.","examples":"\n##### Contoh\n\nMenghasilkan 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Mengonversi semua karakter dalam string teks ke huruf besar.\n\n**Parameter**\n\n- **string**: String yang akan dikonversi ke huruf besar.\n\n**Nilai kembali**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Fungsi tanggal","items":[{"type":"function","name":"current_date","bundle":"date","description":"Menghasilkan tanggal dalam UTC saat ini.","examples":"\n##### Contoh\n\nMenghasilkan tanggal dalam UTC saat ini.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan tanggal dalam UTC saat ini.\n\n**Nilai kembali**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Menghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, dan detik.","examples":"\n##### Contoh\n\nMenghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, dan detik.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, dan detik.\n\n**Nilai kembali**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Menghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, detik, dan milidetik.","examples":"\n##### Contoh\n\nMenghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, detik, dan milidetik.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan tanggal dan waktu UTC saat ini dalam jam, menit, detik, dan milidetik.\n\n**Nilai kembali**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Menghasilkan bagian tunggal dari tanggal, seperti tahun, bulan, hari, jam, menit, atau detik.","examples":"\n##### Contoh\n\nMenghasilkan 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nMenghasilkan 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nMenghasilkan 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Menghasilkan bagian tunggal dari tanggal, seperti tahun, bulan, hari, jam, menit, atau detik.\n\n**Parameter**\n\n- **part**: Bagian yang diekstrak dari tanggal Nilai yang memungkinkan: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Tanggal dari bagian yang diekstrak.\n\n**Nilai kembali**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]