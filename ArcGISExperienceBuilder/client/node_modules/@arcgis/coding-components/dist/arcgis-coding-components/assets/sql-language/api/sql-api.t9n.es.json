[{"id":"string_functions","title":"Funciones de cadena","items":[{"type":"function","name":"char_length","bundle":"string","description":"Devuelve el número de caracteres de la cadena de texto como número entero.","examples":"\n##### Ejemplo\n\nDevuelve 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el número de caracteres de la cadena de texto como número entero.\n\n**Parámetro**\n\n- **string**: Cadena de caracteres de texto cuya longitud se debe devolver.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Devuelve el primer valor de la lista que no sea `NULL`. Todos los valores pasados a la función deben ser del mismo tipo, a excepción de los valores `NULL`.","examples":"\n##### Ejemplos\n\nDevuelve 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nDevuelve 21.\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el primer valor de la lista que no sea `NULL`. Todos los valores pasados a la función deben ser del mismo tipo, a excepción de los valores `NULL`.\n\n**Parámetros**\n\n- **value1**: El primer valor de la lista.\n- **valueN**: Los valores siguientes de la lista.\n\n**Valor de retorno**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Concatena dos cadenas.","examples":"\n##### Ejemplo\n\nDevuelve 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Concatena dos cadenas.\n\n**Parámetros**\n\n- **string1**: Primera cadena de texto.\n- **string2**: Cadena de texto que se desea concatenar a la primera cadena de texto.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Devuelve el nombre del usuario que ha iniciado sesión en el portal.","examples":"\n##### Ejemplo\n\nDevuelve el nombre del usuario que ha iniciado sesión en el portal.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el nombre del usuario que ha iniciado sesión en el portal.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Pone en minúsculas todos los caracteres de la cadena de texto.","examples":"\n##### Ejemplo\n\nDevuelve 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Pone en minúsculas todos los caracteres de la cadena de texto.\n\n**Parámetro**\n\n- **string**: Cadena de texto que se desea poner en minúsculas.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Devuelve la primera aparición de una subcadena en otra cadena de texto. Devuelve 0 si no se encuentra la subcadena.","examples":"\n##### Ejemplos\n\nDevuelve 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nDevuelve 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve la primera aparición de una subcadena en otra cadena de texto. Devuelve 0 si no se encuentra la subcadena.\n\n**Parámetros**\n\n- **substring**: Cadena de texto que se desea buscar.\n- **string**: Cadena en la que se buscará la subcadena.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Devuelve un subconjunto de caracteres de una cadena de texto desde el punto inicial hasta la longitud de cadena de caracteres especificada.","examples":"\n##### Ejemplo\n\nDevuelve 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve un subconjunto de caracteres de una cadena de texto desde el punto inicial hasta la longitud de cadena de caracteres especificada.\n\n**Parámetros**\n\n- **string**: La cadena de texto de la que se desea extraer.\n- **start**: Valor entero que especifica dónde comenzarán los caracteres devueltos.\n- **length**: El número de caracteres que se van a extraer.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Devuelve un subconjunto de caracteres de una cadena de texto desde el punto inicial hasta la longitud de cadena de caracteres especificada.","examples":"\n##### Ejemplos\n\nDevuelve 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nDevuelve 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve un subconjunto de caracteres de una cadena de texto desde el punto inicial hasta la longitud de cadena de caracteres especificada.\n\n**Parámetros**\n\n- **string**: La cadena de texto de la que se desea extraer.\n- **start**: Valor entero que especifica dónde comenzarán los caracteres devueltos.\n- **length**: El número de caracteres que se van a extraer.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Devuelve una cadena de texto en la que se han eliminado todos los espacios iniciales y/o finales u otros caracteres especificados. LEADING recortará el lado inicial de la cadena de texto, TRAILING recortará el lado final de la cadena de texto, mientras que BOTH recortará ambos lados de la cadena de texto.","examples":"\n##### Ejemplos\n\nDevuelve 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nDevuelve '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nDevuelve 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve una cadena de texto en la que se han eliminado todos los espacios iniciales y/o finales u otros caracteres especificados. LEADING recortará el lado inicial de la cadena de texto, TRAILING recortará el lado final de la cadena de texto, mientras que BOTH recortará ambos lados de la cadena de texto.\n\n**Parámetros**\n\n- **side**: Lado de la cadena de texto donde se eliminarán los espacios o caracteres. Posibles valores: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Carácter o caracteres que se recortarán de la cadena de texto.\n- **string**: Cadena de texto que se desea recortar.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Pone en mayúsculas todos los caracteres de la cadena de texto.","examples":"\n##### Ejemplo\n\nDevuelve 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Pone en mayúsculas todos los caracteres de la cadena de texto.\n\n**Parámetro**\n\n- **string**: Cadena de caracteres que se desea poner en mayúsculas.\n\n**Valor de retorno**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Funciones de fecha","items":[{"type":"function","name":"current_date","bundle":"date","description":"Devuelve la fecha actual en UTC.","examples":"\n##### Ejemplo\n\nDevuelve la fecha actual en UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve la fecha actual en UTC.\n\n**Valor de retorno**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Devuelve la fecha y hora UTC actuales en horas, minutos y segundos.‎","examples":"\n##### Ejemplo\n\nDevuelve la fecha y hora UTC actuales en horas, minutos y segundos.‎\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve la fecha y hora UTC actuales en horas, minutos y segundos.‎\n\n**Valor de retorno**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Devuelve la fecha y hora UTC actual en horas, minutos, segundos y milisegundos.","examples":"\n##### Ejemplo\n\nDevuelve la fecha y hora UTC actual en horas, minutos, segundos y milisegundos.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve la fecha y hora UTC actual en horas, minutos, segundos y milisegundos.\n\n**Valor de retorno**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Devuelve una parte de una fecha u hora, como año, mes, día, hora, minuto o segundo.","examples":"\n##### Ejemplos\n\nDevuelve 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nDevuelve 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nDevuelve 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve una parte de una fecha u hora, como año, mes, día, hora, minuto o segundo.\n\n**Parámetros**\n\n- **part**: La parte a extraer de la fecha. Valores posibles: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: La fecha de la que se desea extraer una parte.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Funciones numéricas","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Devuelve el valor absoluto del número.","examples":"\n##### Ejemplo\n\nDevuelve 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el valor absoluto del número.\n\n**Parámetro**\n\n- **number**: Un número en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Devuelve el arcocoseno de un número.","examples":"\n##### Ejemplo\n\nDevuelve 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el arcocoseno de un número.\n\n**Parámetro**\n\n- **number**: Un número entre -1 y 1 en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Devuelve el arcoseno de un número.","examples":"\n##### Ejemplo\n\nDevuelve 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el arcoseno de un número.\n\n**Parámetro**\n\n- **number**: Un número entre -1 y 1 en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Devuelve el arcotangente de un número.","examples":"\n##### Ejemplo\n\nDevuelve 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el arcotangente de un número.\n\n**Parámetro**\n\n- **number**: Un número en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Convierte un valor de un tipo de datos a otro. El parámetro dataType determinará a qué tipo se convierte el valor. FLOAT convierte el valor en un doble, INTEGER convierte el valor en un entero, etc.","examples":"\n##### Ejemplos\n\nDevuelve 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nDevuelve '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nDevuelve '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Convierte un valor de un tipo de datos a otro. El parámetro dataType determinará a qué tipo se convierte el valor. FLOAT convierte el valor en un doble, INTEGER convierte el valor en un entero, etc.\n\n**Parámetros**\n\n- **value**: Valor que se desea convertir a otro tipo de datos.\n- **dataType**: Tipo de datos al que convertir el valor. Valores posibles: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Valor de retorno**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Devuelve el valor entero más pequeño que es mayor o igual que el número.","examples":"\n##### Ejemplo\n\nDevuelve 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el valor entero más pequeño que es mayor o igual que el número.\n\n**Parámetro**\n\n- **number**: El número a redondear al alza.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Devuelve el coseno trigonométrico del número, que se asume que es un ángulo en radianes.","examples":"\n##### Ejemplo\n\nDevuelve -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el coseno trigonométrico del número, que se asume que es un ángulo en radianes.\n\n**Parámetro**\n\n- **number**: Ángulo en radianes en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Devuelve el número entero más grande que sea menor o igual que el número.","examples":"\n##### Ejemplo\n\nDevuelve 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el número entero más grande que sea menor o igual que el número.\n\n**Parámetro**\n\n- **number**: Número a redondear hacia abajo.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Devuelve el logaritmo natural (base e) del número.","examples":"\n##### Ejemplo\n\nDevuelve 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el logaritmo natural (base e) del número.\n\n**Parámetro**\n\n- **number**: Número mayor que 0 en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Devuelve el logaritmo de base 10 del número .","examples":"\n##### Ejemplo\n\nDevuelve 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el logaritmo de base 10 del número .\n\n**Parámetro**\n\n- **number**: Número en el que realizar la operación que es mayor que 0.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Devuelve el resto después de dividir un dividendo por un divisor. Tanto el dividendo como el divisor deben ser enteros.","examples":"\n##### Ejemplo\n\nDevuelve 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el resto después de dividir un dividendo por un divisor. Tanto el dividendo como el divisor deben ser enteros.\n\n**Parámetros**\n\n- **x**: Número que representa al dividendo.\n- **y**: Número que representa al divisor.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Devuelve `NULL` si expression1 es igual a expression2; de lo contrario, devuelve expression1. Los valores de expression1 y expression2 deben ser del mismo tipo. Por lo general, NULLIF se utiliza para evitar errores de división por cero estableciendo expression2 en 0.","examples":"\n##### Ejemplos\n\nDevuelve `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nDevuelve 32\n\n```sql\nNULLIF(32, 0)\n```\n\nDevuelve `null` si POP18 es igual a 0. De lo contrario, devuelve el valor de TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve `NULL` si expression1 es igual a expression2; de lo contrario, devuelve expression1. Los valores de expression1 y expression2 deben ser del mismo tipo. Por lo general, NULLIF se utiliza para evitar errores de división por cero estableciendo expression2 en 0.\n\n**Parámetros**\n\n- **expression1**: Valor en el que realizar la operación.\n- **expression2**: Valor en el que realizar la operación.\n\n**Valor de retorno**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Devuelve el valor del número elevado a la potencia especificada.","examples":"\n##### Ejemplo\n\nDevuelve 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el valor del número elevado a la potencia especificada.\n\n**Parámetros**\n\n- **x**: Número en el que realizar la operación.\n- **y**: Exponente que indica el número de veces que se debe multiplicar el número por sí mismo.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Redondea el número a la longitud especificada.","examples":"\n##### Ejemplos\n\nDevuelve 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nDevuelve 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Redondea el número a la longitud especificada.\n\n**Parámetros**\n\n- **number**: Número para redondear.\n- **length**: El número de posiciones decimales al que redondear el número. Una longitud positiva redondea el número al decimal especificado. Una longitud negativa redondeará el número a la izquierda del punto decimal.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Devuelve el signo de un número dado. Un número negativo devolverá -1. Un número positivo devolverá 1.","examples":"\n##### Ejemplos\n\nDevuelve -1\n\n```sql\nSIGN(-132)\n```\n\nDevuelve 0\n\n```sql\nSIGN(0)\n```\n\nDevuelve 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el signo de un número dado. Un número negativo devolverá -1. Un número positivo devolverá 1.\n\n**Parámetro**\n\n- **number**: Un número en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Devuelve el seno trigonométrico del número, que se asume que es un ángulo en radianes.","examples":"\n##### Ejemplo\n\nDevuelve 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve el seno trigonométrico del número, que se asume que es un ángulo en radianes.\n\n**Parámetro**\n\n- **number**: Ángulo en radianes en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Devuelve la tangente de un número, que se asume que es un ángulo en radianes.","examples":"\n##### Ejemplo\n\nDevuelve 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve la tangente de un número, que se asume que es un ángulo en radianes.\n\n**Parámetro**\n\n- **number**: Ángulo en radianes en el que realizar la operación.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Devuelve un número truncado.","examples":"\n##### Ejemplos\n\nDevuelve 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nDevuelve 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nDevuelve 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Devuelve un número truncado.\n\n**Parámetros**\n\n- **number**: Un número para truncar.\n- **decimals**: Un valor positivo trunca el número hasta el decimal especificado. Un valor negativo trunca el número a la izquierda del punto decimal.\n\n**Valor de retorno**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]