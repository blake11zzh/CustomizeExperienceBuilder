[{"id":"string_functions","title":"Funkcje ciągów znakowych","items":[{"type":"function","name":"char_length","bundle":"string","description":"Zwraca liczbę znaków w ciągu tekstowym jako liczbę całkowitą.","examples":"\n##### Przykład\n\nZwraca 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca liczbę znaków w ciągu tekstowym jako liczbę całkowitą.\n\n**Parametr**\n\n- **string**: Ciąg tekstowy, którego długość ma zostać zwrócona.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Zwraca pierwszą wartość na liście inną niż `NULL`. Wszystkie wartości przekazywane do funkcji muszą być tego samego typu, z wyjątkiem wartości `NULL`.","examples":"\n##### Przykłady\n\nZwraca 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nZwraca -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca pierwszą wartość na liście inną niż `NULL`. Wszystkie wartości przekazywane do funkcji muszą być tego samego typu, z wyjątkiem wartości `NULL`.\n\n**Parametry**\n\n- **value1**: Pierwsza wartość na liście.\n- **valueN**: Kolejne wartości na liście.\n\n**Wartość zwracana**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Łączy dwa ciągi znakowe.","examples":"\n##### Przykład\n\nZwraca 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Łączy dwa ciągi znakowe.\n\n**Parametry**\n\n- **string1**: Pierwszy ciąg tekstowy.\n- **string2**: Ciąg tekstowy, który ma zostać połączony z pierwszym ciągiem tekstowym.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Zwraca nazwę użytkownika obecnie zalogowanego w portalu.","examples":"\n##### Przykład\n\nZwraca nazwę użytkownika obecnie zalogowanego w portalu.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca nazwę użytkownika obecnie zalogowanego w portalu.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Konwertuje wszystkie znaki w ciągu tekstowym na małe litery.","examples":"\n##### Przykład\n\nZwraca 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Konwertuje wszystkie znaki w ciągu tekstowym na małe litery.\n\n**Parametr**\n\n- **string**: Ciąg tekstowy do przekonwertowania na małe litery.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Zwraca pierwsze wystąpienie podrzędnego ciągu znakowego w innym ciągu tekstowym. Zwraca 0, jeśli nie znaleziono podrzędnego ciągu znakowego.","examples":"\n##### Przykłady\n\nZwraca wartość 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nZwraca 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca pierwsze wystąpienie podrzędnego ciągu znakowego w innym ciągu tekstowym. Zwraca 0, jeśli nie znaleziono podrzędnego ciągu znakowego.\n\n**Parametry**\n\n- **substring**: Ciąg tekstowy do wyszukania.\n- **string**: Ciąg znakowy, który zostanie przeszukany pod kątem podrzędnego ciągu znakowego.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Zwraca podzestaw znaków w ciągu tekstowym od punktu początkowego do określonej długości ciągu znakowego.","examples":"\n##### Przykład\n\nZwraca 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca podzestaw znaków w ciągu tekstowym od punktu początkowego do określonej długości ciągu znakowego.\n\n**Parametry**\n\n- **string**: Ciąg tekstowy, z którego należy wyodrębnić fragment.\n- **start**: Wartość całkowita określająca miejsce, w którym rozpoczynają się zwracane znaki.\n- **length**: Liczba znaków do wydzielenia.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Zwraca podzestaw znaków w ciągu tekstowym od punktu początkowego do określonej długości ciągu znakowego.","examples":"\n##### Przykłady\n\nZwraca 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nZwraca 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca podzestaw znaków w ciągu tekstowym od punktu początkowego do określonej długości ciągu znakowego.\n\n**Parametry**\n\n- **string**: Ciąg tekstowy, z którego należy wyodrębnić fragment.\n- **start**: Wartość całkowita określająca miejsce, w którym rozpoczynają się zwracane znaki.\n- **length**: Liczba znaków do wydzielenia.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Zwraca ciąg tekstowy, z którego usunięto wszystkie początkowe i/lub końcowe spacje albo inne określone znaki. Funkcja LEADING przycina stronę początkową ciągu tekstowego. Funkcja TRAILING przycina stronę końcową ciągu tekstowego. Funkcja BOTH przycina obie strony ciągu tekstowego.","examples":"\n##### Przykłady\n\nZwraca 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nZwraca '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nZwraca 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca ciąg tekstowy, z którego usunięto wszystkie początkowe i/lub końcowe spacje albo inne określone znaki. Funkcja LEADING przycina stronę początkową ciągu tekstowego. Funkcja TRAILING przycina stronę końcową ciągu tekstowego. Funkcja BOTH przycina obie strony ciągu tekstowego.\n\n**Parametry**\n\n- **side**: Strona ciągu tekstowego, z której zostaną usunięte spacje lub znaki. Możliwe wartości: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: Znaki, które zostaną przycięte z ciągu tekstowego.\n- **string**: Ciąg tekstowy do przycięcia.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Konwertuje wszystkie znaki w ciągu tekstowym na wielkie litery.","examples":"\n##### Przykład\n\nZwraca 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Konwertuje wszystkie znaki w ciągu tekstowym na wielkie litery.\n\n**Parametr**\n\n- **string**: Ciąg znakowy do przekonwertowania na wielkie litery.\n\n**Wartość zwracana**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Funkcje dotyczące dat","items":[{"type":"function","name":"current_date","bundle":"date","description":"Zwraca bieżącą datę jako czas UTC.","examples":"\n##### Przykład\n\nZwraca bieżącą datę jako czas UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca bieżącą datę jako czas UTC.\n\n**Wartość zwracana**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Zwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut i sekund.","examples":"\n##### Przykład\n\nZwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut i sekund.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut i sekund.\n\n**Wartość zwracana**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Zwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut, sekund i milisekund.","examples":"\n##### Przykład\n\nZwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut, sekund i milisekund.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca bieżącą datę i godzinę w formacie UTC w postaci godziny, minut, sekund i milisekund.\n\n**Wartość zwracana**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Zwraca jedną część daty/czasu, na przykład rok, miesiąc, dzień, godzinę, minuty lub sekundę.","examples":"\n##### Przykłady\n\nZwraca 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nZwraca 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nZwraca 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca jedną część daty/czasu, na przykład rok, miesiąc, dzień, godzinę, minuty lub sekundę.\n\n**Parametry**\n\n- **part**: Część do wyodrębnienia z daty. Możliwe wartości: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Data, z której ma zostać wyodrębniona część.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Funkcje liczbowe","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Zwraca wartość bezwzględną liczby.","examples":"\n##### Przykład\n\nZwraca 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca wartość bezwzględną liczby.\n\n**Parametr**\n\n- **number**: Liczba, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Zwraca arcus cosinus liczby.","examples":"\n##### Przykład\n\nZwraca 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca arcus cosinus liczby.\n\n**Parametr**\n\n- **number**: Liczba z zakresu od -1 do 1, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Zwraca arcus sinus liczby.","examples":"\n##### Przykład\n\nZwraca 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca arcus sinus liczby.\n\n**Parametr**\n\n- **number**: Liczba z zakresu od -1 do 1, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Zwraca arcus tangens liczby.","examples":"\n##### Przykład\n\nZwraca 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca arcus tangens liczby.\n\n**Parametr**\n\n- **number**: Liczba, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Konwertuje wartość z jednego typu danych na inny. Parametr dataType określi, na jaki typ zostanie przekonwertowana wartość. Typ FLOAT konwertuje wartość na liczbę double, a INTEGER — na liczbę całkowitą (integer) itp.","examples":"\n##### Przykłady\n\nZwraca 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nZwraca '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nZwraca 50\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Konwertuje wartość z jednego typu danych na inny. Parametr dataType określi, na jaki typ zostanie przekonwertowana wartość. Typ FLOAT konwertuje wartość na liczbę double, a INTEGER — na liczbę całkowitą (integer) itp.\n\n**Parametry**\n\n- **value**: Wartość do przekonwertowania na inny typ danych.\n- **dataType**: Typ danych, na który ma zostać przekonwertowana wartość. Możliwe wartości: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Wartość zwracana**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Zwraca najmniejszą liczbę całkowitą większą od danej liczby lub jej równą.","examples":"\n##### Przykład\n\nZwraca 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca najmniejszą liczbę całkowitą większą od danej liczby lub jej równą.\n\n**Parametr**\n\n- **number**: Liczba do zaokrąglenia w górę.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Zwraca wartość funkcji trygonometrycznej cosinus dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.","examples":"\n##### Przykład\n\nZwraca -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca wartość funkcji trygonometrycznej cosinus dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.\n\n**Parametr**\n\n- **number**: Kąt w radianach, na którym należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Zwraca największą liczbę całkowitą mniejszą od danej liczby lub jej równą.","examples":"\n##### Przykład\n\nZwraca 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca największą liczbę całkowitą mniejszą od danej liczby lub jej równą.\n\n**Parametr**\n\n- **number**: Liczba do zaokrąglenia w dół.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Zwraca logarytm naturalny (o podstawie e) danej liczby.","examples":"\n##### Przykład\n\nZwraca 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca logarytm naturalny (o podstawie e) danej liczby.\n\n**Parametr**\n\n- **number**: Liczba większa niż 0, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Zwraca logarytm dziesiętny danej liczby.","examples":"\n##### Przykład\n\nZwraca 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca logarytm dziesiętny danej liczby.\n\n**Parametr**\n\n- **number**: Liczba większa niż 0, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Zwraca resztę z dzielenia dzielnej przez dzielnik. Dzielna i dzielnik muszą być liczbami całkowitymi.","examples":"\n##### Przykład\n\nZwraca 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca resztę z dzielenia dzielnej przez dzielnik. Dzielna i dzielnik muszą być liczbami całkowitymi.\n\n**Parametry**\n\n- **x**: Liczba reprezentująca dzielną.\n- **y**: Liczba reprezentująca dzielnik.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Zwraca NULL, jeśli wyrażenie 1 jest równe wyrażeniu 2. W przeciwnym razie zwraca wyrażenie 1. Wartości wyrażeń 1 i 2 muszą być tego samego typu. Funkcja NULLIF jest często stosowana, aby zapobiec wystąpieniu błędu dzielenia przez zero w przypadku określenia pozycji expression2 równej 0.","examples":"\n##### Przykłady\n\nZwraca `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nZwraca 32\n\n```sql\nNULLIF(32, 0)\n```\n\nZwraca wartość `null`, jeśli POP18 ma wartość 0. W przeciwnym razie zwraca wartość TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca NULL, jeśli wyrażenie 1 jest równe wyrażeniu 2. W przeciwnym razie zwraca wyrażenie 1. Wartości wyrażeń 1 i 2 muszą być tego samego typu. Funkcja NULLIF jest często stosowana, aby zapobiec wystąpieniu błędu dzielenia przez zero w przypadku określenia pozycji expression2 równej 0.\n\n**Parametry**\n\n- **expression1**: Wartość, na której należy wykonać operację.\n- **expression2**: Wartość, na której należy wykonać operację.\n\n**Wartość zwracana**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Zwraca wartość będącą wynikiem podniesienia liczby do określonej potęgi.","examples":"\n##### Przykład\n\nZwraca 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca wartość będącą wynikiem podniesienia liczby do określonej potęgi.\n\n**Parametry**\n\n- **x**: Liczba, na której należy wykonać operację.\n- **y**: Wykładnik wskazujący, ile razy należy pomnożyć daną liczbę przez nią samą.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Zaokrągla liczbę do określonej długości.","examples":"\n##### Przykłady\n\nZwraca 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nZwraca 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zaokrągla liczbę do określonej długości.\n\n**Parametry**\n\n- **number**: Liczba do zaokrąglenia.\n- **length**: Liczba miejsc dziesiętnych, do których dana liczba ma zostać zaokrąglona. Długość dodatnia powoduje zaokrąglenie liczby do określonego miejsca po przecinku. Długość ujemna powoduje zaokrąglenie liczby na lewo od przecinka dziesiętnego.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Zwraca znak danej liczby. Liczba ujemna powoduje zwrócenie -1. Liczba dodatnia powoduje zwrócenie 1.","examples":"\n##### Przykłady\n\nZwraca -1\n\n```sql\nSIGN(-132)\n```\n\nZwraca 0\n\n```sql\nSIGN(0)\n```\n\nZwraca 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca znak danej liczby. Liczba ujemna powoduje zwrócenie -1. Liczba dodatnia powoduje zwrócenie 1.\n\n**Parametr**\n\n- **number**: Liczba, na której należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Zwraca wartość funkcji trygonometrycznej sinus dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.","examples":"\n##### Przykład\n\nZwraca 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca wartość funkcji trygonometrycznej sinus dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.\n\n**Parametr**\n\n- **number**: Kąt w radianach, na którym należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Zwraca tangens dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.","examples":"\n##### Przykład\n\nZwraca 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca tangens dla liczby. Przyjmuje się, że liczba jest kątem wyrażonym w radianach.\n\n**Parametr**\n\n- **number**: Kąt w radianach, na którym należy wykonać operację.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Zwraca obciętą liczbę.","examples":"\n##### Przykłady\n\nZwraca 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nZwraca 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nZwraca 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zwraca obciętą liczbę.\n\n**Parametry**\n\n- **number**: Liczba do obcięcia.\n- **decimals**: Wartość dodatnia powoduje obcięcie liczby do określonego miejsca dziesiętnego. Wartość ujemna powoduje obcięcie liczby po lewej stronie przecinka dziesiętnego.\n\n**Wartość zwracana**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]