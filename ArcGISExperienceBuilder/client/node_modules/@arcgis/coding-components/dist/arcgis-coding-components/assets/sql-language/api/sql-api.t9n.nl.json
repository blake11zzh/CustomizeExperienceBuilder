[{"id":"date_functions","title":"Datumfuncties","items":[{"type":"function","name":"current_date","bundle":"date","description":"Retourneert de huidige tijd in UTC.","examples":"\n##### Voorbeeld\n\nRetourneert de huidige tijd in UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de huidige tijd in UTC.\n\n**Retourwaarde**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Retourneert de huidige UTC-datum en -tijd in uren, minuten en seconden.","examples":"\n##### Voorbeeld\n\nRetourneert de huidige UTC-datum en -tijd in uren, minuten en seconden.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de huidige UTC-datum en -tijd in uren, minuten en seconden.\n\n**Retourwaarde**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Retourneert de huidige UTC-datum en -tijd in uren, minuten, seconden en milliseconden.","examples":"\n##### Voorbeeld\n\nRetourneert de huidige UTC-datum en -tijd in uren, minuten, seconden en milliseconden.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de huidige UTC-datum en -tijd in uren, minuten, seconden en milliseconden.\n\n**Retourwaarde**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Retourneert één enkel deel van een datum / tijd, zoals jaar, maand, dag, uur, minuut of seconde.","examples":"\n##### Voorbeelden\n\nRetourneert 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nRetourneert 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nRetourneert 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert één enkel deel van een datum / tijd, zoals jaar, maand, dag, uur, minuut of seconde.\n\n**Parameters**\n\n- **part**: Het deel dat u uit de datum wilt extraheren. Mogelijke waarden: 'YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE', 'SECOND'.\n- **datetime**: De datum waaruit u een deel wilt extraheren.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Numerieke functies","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Retourneert de absolute waarde van het nummer.","examples":"\n##### Voorbeeld\n\nRetourneert 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de absolute waarde van het nummer.\n\n**Parameter**\n\n- **number**: Een getal waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Retourneert de boogcosinus van een getal.","examples":"\n##### Voorbeeld\n\nRetourneert 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de boogcosinus van een getal.\n\n**Parameter**\n\n- **number**: Een getal tussen -1 en 1 waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Retourneert de boogsinus van een getal.","examples":"\n##### Voorbeeld\n\nRetourneert 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de boogsinus van een getal.\n\n**Parameter**\n\n- **number**: Een getal tussen -1 en 1 waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Retourneert de boogtangens van een getal.","examples":"\n##### Voorbeeld\n\nRetourneert 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de boogtangens van een getal.\n\n**Parameter**\n\n- **number**: Een getal waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Converteert een waarde van het ene gegevenstype in het andere. De parameter dataType bepaals in welk type de waarde wordt omgezet. FLOAT zet de waarde om in een double, INTEGER zet de waarde om in een integer, etc.","examples":"\n##### Voorbeelden\n\nRetourneert 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nRetourneert '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nRetourneert '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converteert een waarde van het ene gegevenstype in het andere. De parameter dataType bepaals in welk type de waarde wordt omgezet. FLOAT zet de waarde om in een double, INTEGER zet de waarde om in een integer, etc.\n\n**Parameters**\n\n- **value**: De waarde die u in een ander gegevenstype wilt omzetten.\n- **dataType**: Het gegevenstype waarin u de waarde wilt omzetten. Mogelijke waarden: 'DATE', 'FLOAT', 'INTEGER', 'REAL', 'SMALLINT', 'TIME', 'TIMESTAMP', 'VARCHAR'.\n\n**Retourwaarde**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Retourneert de kleinste integer die groter is dan of gelijk is aan het getal.","examples":"\n##### Voorbeeld\n\nRetourneert 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de kleinste integer die groter is dan of gelijk is aan het getal.\n\n**Parameter**\n\n- **number**: Het getal dat naar boven moet worden afgerond.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Retourneert de trigonometrische cosinus van het getal, waarvan wordt aangenomen dat het een hoek in radialen is.","examples":"\n##### Voorbeeld\n\nRetourneert -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de trigonometrische cosinus van het getal, waarvan wordt aangenomen dat het een hoek in radialen is.\n\n**Parameter**\n\n- **number**: Een hoek in radialen waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Retourneert de grootste integer die kleiner is dan of gelijk is aan het getal.","examples":"\n##### Voorbeeld\n\nRetourneert 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de grootste integer die kleiner is dan of gelijk is aan het getal.\n\n**Parameter**\n\n- **number**: Het getal dat naar beneden moet worden afgerond.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Retourneert het natuurlijke logaritme (grondtal e) van het getal.","examples":"\n##### Voorbeeld\n\nRetourneert 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert het natuurlijke logaritme (grondtal e) van het getal.\n\n**Parameter**\n\n- **number**: Een getal dat hoger is dan 0 waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Retourneert het grondtal-10-logaritme van het getal.","examples":"\n##### Voorbeeld\n\nRetourneert 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert het grondtal-10-logaritme van het getal.\n\n**Parameter**\n\n- **number**: Een getal dat hoger is dan 0 waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Retourneert wat resteert nadat een deeltal door een deler wordt gedeeld. Zowel het deeltal als de deler moeten gehele getallen zijn.","examples":"\n##### Voorbeeld\n\nRetourneert 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert wat resteert nadat een deeltal door een deler wordt gedeeld. Zowel het deeltal als de deler moeten gehele getallen zijn.\n\n**Parameters**\n\n- **x**: Het getal dat het deeltal vertegenwoordigt.\n- **y**: Het getal dat de deler vertegenwoordigt.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Retourneert 'NULL' als expressie1 gelijk is aan expressie2 en retourneert anders expressie1. De waarden voor expressie1 en expressie2 moeten van hetzelfde type zijn. NULLIF wordt meestal gebruikt om delen-door-nul-fouten te vermijden door expressie2 op 0 in te stellen.","examples":"\n##### Voorbeelden\n\nRetourneert 'null'\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nRetourneert 32\n\n```sql\nNULLIF(32, 0)\n```\n\nRetourneert 'null' als POP18 gelijk is aan 0; als dit niet het geval is, retourneert het de waarde van TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert 'NULL' als expressie1 gelijk is aan expressie2 en retourneert anders expressie1. De waarden voor expressie1 en expressie2 moeten van hetzelfde type zijn. NULLIF wordt meestal gebruikt om delen-door-nul-fouten te vermijden door expressie2 op 0 in te stellen.\n\n**Parameters**\n\n- **expression1**: Een waarde waarop de bewerking moet worden uitgevoegd.\n- **expression2**: Een waarde waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Retourneert de waarde van number verheven tot de opgegeven macht.","examples":"\n##### Voorbeeld\n\nRetourneert 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de waarde van number verheven tot de opgegeven macht.\n\n**Parameters**\n\n- **x**: Het getal waarop de bewerking moet worden uitgevoerd.\n- **y**: De exponent die aangeeft hoe vaak het getal met zichzelf moet worden vermenigvuldigd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Rondt het getal af op de opgegeven lengte.","examples":"\n##### Voorbeelden\n\nRetourneert 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nRetourneert 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Rondt het getal af op de opgegeven lengte.\n\n**Parameters**\n\n- **number**: Het af te ronden getal.\n- **length**: Het aantal cijfers achter de komma waarop het getal moet worden afgerond. Een positieve lengte rond het getal af op de opgegeven decimaal. Een negatieve lengte rond het getal af op de linkerzijde van de decimaal.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Retourneert het teken van een opgegeven getal. Een negatief getal retourneert -1. Een positief getal retourneert 1.","examples":"\n##### Voorbeelden\n\nRetourneert -1\n\n```sql\nSIGN(-132)\n```\n\nRetourneert 0\n\n```sql\nSIGN(0)\n```\n\nRetourneert 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert het teken van een opgegeven getal. Een negatief getal retourneert -1. Een positief getal retourneert 1.\n\n**Parameter**\n\n- **number**: Een getal waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Retourneert de trigonometrische cosinus van het getal, waarvan wordt aangenomen dat het een hoek in radialen is.","examples":"\n##### Voorbeeld\n\nRetourneert 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de trigonometrische cosinus van het getal, waarvan wordt aangenomen dat het een hoek in radialen is.\n\n**Parameter**\n\n- **number**: Een hoek in radialen waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Retourneert de tangens van een getal, waarvan wordt aangenomen dat het een hoek in radialen is.","examples":"\n##### Voorbeeld\n\nRetourneert 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de tangens van een getal, waarvan wordt aangenomen dat het een hoek in radialen is.\n\n**Parameter**\n\n- **number**: Een hoek in radialen waarop de bewerking moet worden uitgevoerd.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Retourneert een ingekort getal.","examples":"\n##### Voorbeelden\n\nRetourneert 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nRetourneert 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nRetourneert 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert een ingekort getal.\n\n**Parameters**\n\n- **number**: Een in te korten getal.\n- **decimals**: Een positieve waarde kort het getal in tot de opgegeven decimaal. Een negatieve waarde kort het getal in tot de linkerzijde van de decimaal.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Tekenreeksfuncties","items":[{"type":"function","name":"char_length","bundle":"string","description":"Retourneert het aantal tekens in de tekst-tekenreeks als een geheel getal.","examples":"\n##### Voorbeeld\n\nRetourneert 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert het aantal tekens in de tekst-tekenreeks als een geheel getal.\n\n**Parameter**\n\n- **string**: De tekst-tekenreeks waarvan u de lengte wilt retourneren.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Retourneert de eerste waarde in de lijst die niet 'NULL' is. Alle waarden die in de functie worden gebruikt, moeten van hetzelfde type zijn, met uitzondering van 'NULL'-waarden.","examples":"\n##### Voorbeelden\n\nRetourneert 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nRetourneert -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de eerste waarde in de lijst die niet 'NULL' is. Alle waarden die in de functie worden gebruikt, moeten van hetzelfde type zijn, met uitzondering van 'NULL'-waarden.\n\n**Parameters**\n\n- **value1**: De eerste waarde in de lijst.\n- **valueN**: De volgende waarde(s) in de lijst.\n\n**Retourwaarde**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Voegt twee tekenreeksen samen.","examples":"\n##### Voorbeeld\n\nRetourneert 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Voegt twee tekenreeksen samen.\n\n**Parameters**\n\n- **string1**: De eerste tekst-tekenreeks.\n- **string2**: De tekst-tekenreeks die moet worden samengevoegd met de eerste tekst-tekenreeks.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Retourneert de gebruikersnaam van de gebruiker die momenteel bij het portaal is aangemeld.","examples":"\n##### Voorbeeld\n\nRetourneert de gebruikersnaam van de gebruiker die momenteel bij het portaal is aangemeld.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de gebruikersnaam van de gebruiker die momenteel bij het portaal is aangemeld.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Zet alle tekens in de tekst-tekenreeks om in kleine letters.","examples":"\n##### Voorbeeld\n\nRetourneert 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zet alle tekens in de tekst-tekenreeks om in kleine letters.\n\n**Parameter**\n\n- **string**: De tekst-tekenreeks die u in kleine letters wilt omzetten.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Retourneert de eerste verschijning van een sub-tekenreeks in een andere tekenreeks. Retourneert 0 als de sub-tekenreeks niet wordt gevonden.","examples":"\n##### Voorbeelden\n\nRetourneert 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nRetourneert 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert de eerste verschijning van een sub-tekenreeks in een andere tekenreeks. Retourneert 0 als de sub-tekenreeks niet wordt gevonden.\n\n**Parameters**\n\n- **substring**: De tekst-tekenreeks waarnaar moet worden gezocht.\n- **string**: De tekenreeks waarin naar de sub-tekenreeks zal worden gezocht.\n\n**Retourwaarde**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Retourneert een subset tekens in een tekst-tekenreeks van een startpunt tot de opgegeven tekenreekslengte.","examples":"\n##### Voorbeeld\n\nRetourneert 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert een subset tekens in een tekst-tekenreeks van een startpunt tot de opgegeven tekenreekslengte.\n\n**Parameters**\n\n- **string**: De tekst-tekenreeks waaruit moet worden geëxtraheerd.\n- **start**: De integerwaarde die opgeeft waar de geretourneerde tekens zullen starten.\n- **length**: Het aantal te extraheren tekens.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Retourneert een subset tekens in een tekst-tekenreeks van een startpunt tot de opgegeven tekenreekslengte.","examples":"\n##### Voorbeelden\n\nRetourneert 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nRetourneert 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert een subset tekens in een tekst-tekenreeks van een startpunt tot de opgegeven tekenreekslengte.\n\n**Parameters**\n\n- **string**: De tekst-tekenreeks waaruit moet worden geëxtraheerd.\n- **start**: De integerwaarde die opgeeft waar de geretourneerde tekens zullen starten.\n- **length**: Het aantal te extraheren tekens.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Retourneert een tekst-tekenreeks waarbij alle voorloop- en/of volgspaties of andere opgegeven tekens zijn verwijderd. LEADING knipt de voorloopkant van de tekst-tekenreeks bij, TRAILING knipt de volgkant van de tekst-tekenreeks bij, en BOTH zorgt ervoor dat beide kanten van de tekst-tekenreeks worden bijgeknipt.","examples":"\n##### Voorbeelden\n\nRetourneert 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nRetourneert '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nRetourneert 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Retourneert een tekst-tekenreeks waarbij alle voorloop- en/of volgspaties of andere opgegeven tekens zijn verwijderd. LEADING knipt de voorloopkant van de tekst-tekenreeks bij, TRAILING knipt de volgkant van de tekst-tekenreeks bij, en BOTH zorgt ervoor dat beide kanten van de tekst-tekenreeks worden bijgeknipt.\n\n**Parameters**\n\n- **side**: De kant van de tekst-tekenreeks waar de spatie(s) of teken(s) zullen worden verwijderd. Mogelijke waarden: 'LEADING', 'TRAILING', 'BOTH'.\n- **character**: Het teken of de tekens die uit de tekst-tekenreeks zullen worden weggeknipt.\n- **string**: De bij te knippen tekst-tekenreeks.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Zet alle tekens in de tekst-tekenreeks om in hoofdletters.","examples":"\n##### Voorbeeld\n\nRetourneert 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Zet alle tekens in de tekst-tekenreeks om in hoofdletters.\n\n**Parameter**\n\n- **string**: De tekenreeks die u in hoofdletters wilt omzetten.\n\n**Retourwaarde**: String"}},"parametersInfo":{"min":1,"max":1}}]}]