[{"id":"date_functions","title":"Funzioni di data","items":[{"type":"function","name":"current_date","bundle":"date","description":"Restituisce la data corrente in UTC.","examples":"\n##### Esempio\n\nRestituisce la data corrente in UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce la data corrente in UTC.\n\n**Valore restituito**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Restituisce data e ora UTC correnti in ore, minuti e secondi.","examples":"\n##### Esempio\n\nRestituisce data e ora UTC correnti in ore, minuti e secondi.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce data e ora UTC correnti in ore, minuti e secondi.\n\n**Valore restituito**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Restituisce data e ora UTC correnti in ore, minuti, secondi, e millisecondi.","examples":"\n##### Esempio\n\nRestituisce data e ora UTC correnti in ore, minuti, secondi, e millisecondi.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce data e ora UTC correnti in ore, minuti, secondi, e millisecondi.\n\n**Valore restituito**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Restituisce una singola parte di una data/ora, ad esempio anno, mese, giorno, ora, minuto o secondo.","examples":"\n##### Esempi\n\nRestituisce 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nRestituisce 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nRestituisce 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce una singola parte di una data/ora, ad esempio anno, mese, giorno, ora, minuto o secondo.\n\n**Parametri**\n\n- **part**: La parte da estrarre dalla data. Valori possibili: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: La data da cui estrarre una parte.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Funzioni numeriche","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Restituisce il valore assoluto del numero.","examples":"\n##### Esempio\n\nRestituisce 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il valore assoluto del numero.\n\n**Parametro**\n\n- **number**: Un numero su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Restituisce il coseno inverso di un numero.","examples":"\n##### Esempio\n\nRestituisce 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il coseno inverso di un numero.\n\n**Parametro**\n\n- **number**: Un numero compreso tra -1 e 1 su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Restituisce il seno inverso di un numero.","examples":"\n##### Esempio\n\nRestituisce 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il seno inverso di un numero.\n\n**Parametro**\n\n- **number**: Un numero compreso tra -1 e 1 su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Restituisce la tangente inversa di un numero.","examples":"\n##### Esempio\n\nRestituisce 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce la tangente inversa di un numero.\n\n**Parametro**\n\n- **number**: Un numero su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Converte un valore da un tipo di dati a un altro. Il parametro dataType determina il tipo di valori in cui convertire. FLOAT converte il valore in un doppio, INTEGER converte il valore in un intero ecc.","examples":"\n##### Esempi\n\nRestituisce 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nRestituisce '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nRestituisce '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte un valore da un tipo di dati a un altro. Il parametro dataType determina il tipo di valori in cui convertire. FLOAT converte il valore in un doppio, INTEGER converte il valore in un intero ecc.\n\n**Parametri**\n\n- **value**: Il valore da convertire in un altro tipo di dati.\n- **dataType**: Il tipo di dati in cui convertire il valore. Valori possibili: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Valore restituito**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Restituisce il valore intero più piccolo maggiore o uguale al numero.","examples":"\n##### Esempio\n\nRestituisce 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il valore intero più piccolo maggiore o uguale al numero.\n\n**Parametro**\n\n- **number**: Il numero da arrotondare per eccesso.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Restituisce il coseno trigonometrico del numero, che si suppone sia un angolo espresso in radianti.","examples":"\n##### Esempio\n\nRestituisce -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il coseno trigonometrico del numero, che si suppone sia un angolo espresso in radianti.\n\n**Parametro**\n\n- **number**: Un angolo in radianti su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Restituisce il valore intero massimo minore o uguale al numero.","examples":"\n##### Esempio\n\nRestituisce 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il valore intero massimo minore o uguale al numero.\n\n**Parametro**\n\n- **number**: Il numero da arrotondare per difetto.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Restituisce il logaritmo naturale (base e) del numero.","examples":"\n##### Esempio\n\nRestituisce 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il logaritmo naturale (base e) del numero.\n\n**Parametro**\n\n- **number**: Un numero maggiore di 0 su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Restituisce il logaritmo in base 10 del numero.","examples":"\n##### Esempio\n\nRestituisce 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il logaritmo in base 10 del numero.\n\n**Parametro**\n\n- **number**: Un numero maggiore di 0 su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Restituisce il resto dopo la divisione tra dividendo e divisore. Il dividendo e il divisore devono essere interi.","examples":"\n##### Esempio\n\nRestituisce 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il resto dopo la divisione tra dividendo e divisore. Il dividendo e il divisore devono essere interi.\n\n**Parametri**\n\n- **x**: Il numero che rappresenta il dividendo.\n- **y**: Il numero che rappresenta il divisore.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Restituisce 'NULL' se espressione1 è uguale a espressione2, altrimenti restituisce espressione1. I valori per espressione1 ed espressione2 devono essere dello stesso tipo. NULLIF viene utilizzato in genere per impedire errori di divisione per zero impostando espressione2 su 0.","examples":"\n##### Esempi\n\nRestituisce `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nRestituisce 32\n\n```sql\nNULLIF(32, 0)\n```\n\nRestituisce `null` se POP18 è uguale a 0, altrimenti restituisce il valore di TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce 'NULL' se espressione1 è uguale a espressione2, altrimenti restituisce espressione1. I valori per espressione1 ed espressione2 devono essere dello stesso tipo. NULLIF viene utilizzato in genere per impedire errori di divisione per zero impostando espressione2 su 0.\n\n**Parametri**\n\n- **expression1**: Un valore su cui eseguire l'operazione.\n- **expression2**: Un valore su cui eseguire l'operazione.\n\n**Valore restituito**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Restituisce il valore del numero elevato alla potenza specificata.","examples":"\n##### Esempio\n\nRestituisce 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il valore del numero elevato alla potenza specificata.\n\n**Parametri**\n\n- **x**: Il numero su cui eseguire l'operazione.\n- **y**: L'esponente che indica il numero di volte per cui il numero deve essere moltiplicato per se stesso.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Arrotonda il numero alla lunghezza specificata.","examples":"\n##### Esempi\n\nRestituisce 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nRestituisce 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Arrotonda il numero alla lunghezza specificata.\n\n**Parametri**\n\n- **number**: Il numero da arrotondare.\n- **length**: Il numero di posizioni decimali a cui arrotondare un numero. Una lunghezza positiva arrotonda il numero alla posizione decimale specificata. Una lunghezza negativa arrotonda il numero a sinistra del punto decimale.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Restituisce il segno su un dato numero. Un numero negativo restituisce -1. Un numero positivo restituisce 1.","examples":"\n##### Esempi\n\nRestituisce -1\n\n```sql\nSIGN(-132)\n```\n\nRestituisce 0\n\n```sql\nSIGN(0)\n```\n\nRestituisce 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il segno su un dato numero. Un numero negativo restituisce -1. Un numero positivo restituisce 1.\n\n**Parametro**\n\n- **number**: Un numero su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Restituisce il seno trigonometrico del numero, che si suppone sia un angolo espresso in radianti.","examples":"\n##### Esempio\n\nRestituisce 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il seno trigonometrico del numero, che si suppone sia un angolo espresso in radianti.\n\n**Parametro**\n\n- **number**: Un angolo in radianti su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Restituisce la tangente di numero, che si suppone sia un angolo espresso in radianti.","examples":"\n##### Esempio\n\nRestituisce 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce la tangente di numero, che si suppone sia un angolo espresso in radianti.\n\n**Parametro**\n\n- **number**: Un angolo in radianti su cui eseguire l'operazione.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Restituisce un numero troncato.","examples":"\n##### Esempi\n\nRestituisce 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nRestituisce 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nRestituisce 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce un numero troncato.\n\n**Parametri**\n\n- **number**: Un numero da troncare.\n- **decimals**: Una valore positivo tronca il numero alla posizione decimale specificata. Un valore negativo tronca il numero a sinistra del punto decimale.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"string_functions","title":"Funzioni stringa","items":[{"type":"function","name":"char_length","bundle":"string","description":"Restituisce il numero di caratteri nella stringa di testo come numero intero.","examples":"\n##### Esempio\n\nRestituisce 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il numero di caratteri nella stringa di testo come numero intero.\n\n**Parametro**\n\n- **string**: La stringa di testo di cui restituire la lunghezza.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Restituisce il primo valore non `NULL` dell'elenco. Tutti i valori passati nella funzione devono essere dello stesso tipo, ad eccezione dei valori `NULL`.","examples":"\n##### Esempi\n\nRestituisce 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nRestituisce -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il primo valore non `NULL` dell'elenco. Tutti i valori passati nella funzione devono essere dello stesso tipo, ad eccezione dei valori `NULL`.\n\n**Parametri**\n\n- **value1**: Il primo valore nell'elenco.\n- **valueN**: I valori successivi nell'elenco.\n\n**Valore restituito**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Concatena due stringhe.","examples":"\n##### Esempio\n\nRestituisce 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Concatena due stringhe.\n\n**Parametri**\n\n- **string1**: La prima stringa di testo.\n- **string2**: La stringa di testo da concatenare alla prima stringa di testo.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Restituisce il nome utente dell'utente attualmente collegato al portale.","examples":"\n##### Esempio\n\nRestituisce il nome utente dell'utente attualmente collegato al portale.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce il nome utente dell'utente attualmente collegato al portale.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Converte tutti i caratteri nella stringa di testo in caratteri minuscoli.","examples":"\n##### Esempio\n\nRestituisce 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte tutti i caratteri nella stringa di testo in caratteri minuscoli.\n\n**Parametro**\n\n- **string**: La stringa di testo da convertire in caratteri minuscoli.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Restituisce la prima occorrenza di una sottostringa in un’altra stringa di testo. Restituisce 0 se la sottostringa non viene trovata.","examples":"\n##### Esempi\n\nRestituisce 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nRestituisce 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce la prima occorrenza di una sottostringa in un’altra stringa di testo. Restituisce 0 se la sottostringa non viene trovata.\n\n**Parametri**\n\n- **substring**: La stringa di testo da cercare.\n- **string**: La stringa in cui sarà cercata la sottostringa.\n\n**Valore restituito**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Restituisce un sottoinsieme di caratteri in una stringa di testo da un punto di partenza alla lunghezza specificata della stringa.","examples":"\n##### Esempio\n\nRestituisce 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce un sottoinsieme di caratteri in una stringa di testo da un punto di partenza alla lunghezza specificata della stringa.\n\n**Parametri**\n\n- **string**: La stringa di testo da cui estrarre.\n- **start**: Il valore intero che specifica dove iniziano i caratteri restituiti.\n- **length**: Il numero di caratteri da estrarre.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Restituisce un sottoinsieme di caratteri in una stringa di testo da un punto di partenza alla lunghezza specificata della stringa.","examples":"\n##### Esempi\n\nRestituisce 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nRestituisce 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce un sottoinsieme di caratteri in una stringa di testo da un punto di partenza alla lunghezza specificata della stringa.\n\n**Parametri**\n\n- **string**: La stringa di testo da cui estrarre.\n- **start**: Il valore intero che specifica dove iniziano i caratteri restituiti.\n- **length**: Il numero di caratteri da estrarre.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Restituisce una stringa di testo dove tutti gli spazi iniziali o finali o altri caratteri specificati sono stati rimossi. LEADING taglia la parte iniziale della stringa di testo, TRAILING taglia la parte finale della stringa di testo, BOTH taglia entrambi i lati della stringa di testo.","examples":"\n##### Esempi\n\nRestituisce 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nRestituisce '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nRestituisce 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Restituisce una stringa di testo dove tutti gli spazi iniziali o finali o altri caratteri specificati sono stati rimossi. LEADING taglia la parte iniziale della stringa di testo, TRAILING taglia la parte finale della stringa di testo, BOTH taglia entrambi i lati della stringa di testo.\n\n**Parametri**\n\n- **side**: Il lato della stringa di testo in cui saranno rimossi i caratteri. Valori possibili: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: I caratteri che saranno tagliati dalla stringa di testo.\n- **string**: La stringa di testo da tagliare.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Converte tutti i caratteri nella stringa di testo in caratteri maiuscoli.","examples":"\n##### Esempio\n\nRestituisce 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Converte tutti i caratteri nella stringa di testo in caratteri maiuscoli.\n\n**Parametro**\n\n- **string**: La stringa da convertire in caratteri maiuscoli.\n\n**Valore restituito**: String"}},"parametersInfo":{"min":1,"max":1}}]}]