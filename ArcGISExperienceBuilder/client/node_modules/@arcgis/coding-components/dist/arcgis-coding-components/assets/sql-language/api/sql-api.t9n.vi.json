[{"id":"string_functions","title":"Hàm dạng chuỗi.","items":[{"type":"function","name":"char_length","bundle":"string","description":"Trả về số ký tự trong chuỗi văn bản dưới dạng số nguyên.","examples":"\n##### Ví dụ\n\nTrả về 11\n\n```sql\nCHAR_LENGTH('Nova Scotia')\n```\n\n","completion":{"label":"CHAR_LENGTH","detail":"CHAR_LENGTH(string) -> Number","insertText":"CHAR_LENGTH(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về số ký tự trong chuỗi văn bản dưới dạng số nguyên.\n\n**Tham số**\n\n- **string**: Chuỗi văn bản để trả về độ dài.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"coalesce","bundle":"string","description":"Trả về giá trị đầu tiên trong danh sách không phải là giá trị `NULL`. Tất cả các giá trị đều được đưa vào hàm phải cùng loại có ngoại lệ các giá trị `NULL`.","examples":"\n##### Ví dụ\n\nTrả về 'Green goldfish'\n\n```sql\nCOALESCE(null, null, 'Green goldfish', null, 'Purple cow')\n```\n\nTrả về -21\n\n```sql\nCOALESCE(null, -21, 33, null)\n```\n\n","completion":{"label":"COALESCE","detail":"COALESCE(value1, valueN) -> String,Number,Datetime","insertText":"COALESCE(${1:value1_}, ${2:valueN_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về giá trị đầu tiên trong danh sách không phải là giá trị `NULL`. Tất cả các giá trị đều được đưa vào hàm phải cùng loại có ngoại lệ các giá trị `NULL`.\n\n**Thông số**\n\n- **value1**: Giá trị đầu tiên trong danh sách.\n- **valueN**: (Các) Giá trị theo thứ tự trong danh sách.\n\n**Giá trị trả về**: String,Number,Datetime"}},"parametersInfo":{"min":2,"max":-1}},{"type":"function","name":"concat","bundle":"string","description":"Ghép nối hai chuỗi lại với nhau.","examples":"\n##### Ví dụ\n\nTrả về 'Maple syrup'\n\n```sql\nCONCAT('Maple ', 'syrup')\n```\n\n","completion":{"label":"CONCAT","detail":"CONCAT(string1, string2) -> String","insertText":"CONCAT(${1:string1_}, ${2:string2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Ghép nối hai chuỗi lại với nhau.\n\n**Thông số**\n\n- **string1**: Chuỗi văn bản đầu tiên.\n- **string2**: Chuỗi văn bản để ghép vào chuỗi văn bản đầu tiên.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"current_user","bundle":"string","description":"Trả về tên người dùng của người dùng hiện đang đăng nhập vào cổng thông tin.","examples":"\n##### Ví dụ\n\nTrả về tên người dùng của người dùng hiện đang đăng nhập vào cổng thông tin.\n\n```sql\nCURRENT_USER\n```\n\n","completion":{"label":"CURRENT_USER","detail":"CURRENT_USER -> String","insertText":"CURRENT_USER","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về tên người dùng của người dùng hiện đang đăng nhập vào cổng thông tin.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"lower","bundle":"string","description":"Chuyển đổi tất cả ký tự trong chuỗi văn bản thành chữ thường.","examples":"\n##### Ví dụ\n\nTrả về 'hello world'\n\n```sql\nLOWER('HELLO WORLD')\n```\n\n","completion":{"label":"LOWER","detail":"LOWER(string) -> String","insertText":"LOWER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Chuyển đổi tất cả ký tự trong chuỗi văn bản thành chữ thường.\n\n**Tham số**\n\n- **string**: Chuỗi văn bản để chuyển thành chữ thường.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"position","bundle":"string","description":"Trả về lần xuất hiện đầu tiên của chuỗi con trong một chuỗi văn bản khác. Trả về 0 nếu không tìm thấy chuỗi con.","examples":"\n##### Ví dụ\n\nTrả về 6\n\n```sql\nPOSITION('com' IN 'esri.com')\n```\n\nTrả về 9\n\n```sql\nPOSITION('sum' IN 'Lorem ipsum')\n```\n\n","completion":{"label":"POSITION","detail":"POSITION(substring, string) -> Number","insertText":"POSITION(${1:substring_} IN ${2:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về lần xuất hiện đầu tiên của chuỗi con trong một chuỗi văn bản khác. Trả về 0 nếu không tìm thấy chuỗi con.\n\n**Thông số**\n\n- **substring**: Chuỗi văn bản để tìm kiếm.\n- **string**: Chuỗi sẽ được tìm kiếm với chuỗi con.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}},[{"type":"function","name":"substring","bundle":"string","description":"Trả về một tập hợp con của các ký tự trong chuỗi văn bản từ một điểm bắt đầu đến độ dài chuỗi quy định.","examples":"\n##### Ví dụ\n\nTrả về 'City'\n\n```sql\nSUBSTRING('New York City', 10, 4)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_}, ${2:start_}, ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về một tập hợp con của các ký tự trong chuỗi văn bản từ một điểm bắt đầu đến độ dài chuỗi quy định.\n\n**Thông số**\n\n- **string**: Chuỗi văn bản để xuất.\n- **start**: Giá trị nguyên chỉ định điểm ký tự được trả về sẽ bắt đầu.\n- **length**: Số ký tự để trích xuất.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"substring","bundle":"string","description":"Trả về một tập hợp con của các ký tự trong chuỗi văn bản từ một điểm bắt đầu đến độ dài chuỗi quy định.","examples":"\n##### Ví dụ\n\nTrả về 'City'\n\n```sql\nSUBSTRING('New York City' FROM 10 FOR 4)\n```\n\nTrả về 'New York'\n\n```sql\nSUBSTRING('New York City' FROM 1 FOR 8)\n```\n\n","completion":{"label":"SUBSTRING","detail":"SUBSTRING(string, start, length) -> String","insertText":"SUBSTRING(${1:string_} FROM ${2:start_} FOR ${3:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về một tập hợp con của các ký tự trong chuỗi văn bản từ một điểm bắt đầu đến độ dài chuỗi quy định.\n\n**Thông số**\n\n- **string**: Chuỗi văn bản để xuất.\n- **start**: Giá trị nguyên chỉ định điểm ký tự được trả về sẽ bắt đầu.\n- **length**: Số ký tự để trích xuất.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":3,"max":3}}],{"type":"function","name":"trim","bundle":"string","description":"Trả về một chuỗi văn bản có tất cả các dấu cách đầu và/hoặc cuối hoặc các ký tự được chỉ định đã bị xóa. LEADING sẽ cắt phần đầu của chuỗi văn bản, TRAILING sẽ cắt phần cuối của chuỗi văn bản, trong BOTH sẽ cắt cả hai phần của chuỗi văn bản.","examples":"\n##### Ví dụ\n\nTrả về 'myFunc'\n\n```sql\nTRIM(LEADING 't' FROM 'tMyFunc')\n```\n\nTrả về '  hello world'\n\n```sql\nTRIM(TRAILING ' ' FROM '  hello world   ')\n```\n\nTrả về 'hello world'\n\n```sql\nTRIM(BOTH ' ' FROM '  hello world  ')\n```\n\n","completion":{"label":"TRIM","detail":"TRIM(side, character, string) -> String","insertText":"TRIM(${1:side_} ${2:character_} FROM ${3:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về một chuỗi văn bản có tất cả các dấu cách đầu và/hoặc cuối hoặc các ký tự được chỉ định đã bị xóa. LEADING sẽ cắt phần đầu của chuỗi văn bản, TRAILING sẽ cắt phần cuối của chuỗi văn bản, trong BOTH sẽ cắt cả hai phần của chuỗi văn bản.\n\n**Thông số**\n\n- **side**: Phần của chuỗi văn bản có (các) dấu cách hoặc (các) ký tự sẽ bị xóa. Giá trị có thể có: `LEADING`, `TRAILING`, `BOTH`.\n- **character**: (Các) ký tự sẽ bị cắt từ chuỗi văn bản.\n- **string**: Chuỗi văn bản cần cắt.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":3,"max":3}},{"type":"function","name":"upper","bundle":"string","description":"Chuyển đổi tất cả ký tự trong chuỗi văn bản thành chữ in hoa.","examples":"\n##### Ví dụ\n\nTrả về 'QUICK RED FOX'\n\n```sql\nUPPER('quick red fox')\n```\n\n","completion":{"label":"UPPER","detail":"UPPER(string) -> String","insertText":"UPPER(${1:string_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Chuyển đổi tất cả ký tự trong chuỗi văn bản thành chữ in hoa.\n\n**Tham số**\n\n- **string**: Chuỗi để chuyển thành chữ in hoa.\n\n**Giá trị trả về**: String"}},"parametersInfo":{"min":1,"max":1}}]},{"id":"date_functions","title":"Hàm ngày tháng","items":[{"type":"function","name":"current_date","bundle":"date","description":"Trả về ngày hiện tại theo UTC.","examples":"\n##### Ví dụ\n\nTrả về ngày hiện tại theo UTC.\n\n```sql\nCURRENT_DATE\n```\n\n","completion":{"label":"CURRENT_DATE","detail":"CURRENT_DATE -> Datetime","insertText":"CURRENT_DATE","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về ngày hiện tại theo UTC.\n\n**Giá trị trả về**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_time","bundle":"date","description":"Trả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây.","examples":"\n##### Ví dụ\n\nTrả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây.\n\n```sql\nCURRENT_TIME\n```\n\n","completion":{"label":"CURRENT_TIME","detail":"CURRENT_TIME -> Datetime","insertText":"CURRENT_TIME","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây.\n\n**Giá trị trả về**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"current_timestamp","bundle":"date","description":"Trả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây và phần trăm giây.","examples":"\n##### Ví dụ\n\nTrả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây và phần trăm giây.\n\n```sql\nCURRENT_TIMESTAMP\n```\n\n","completion":{"label":"CURRENT_TIMESTAMP","detail":"CURRENT_TIMESTAMP -> Datetime","insertText":"CURRENT_TIMESTAMP","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về ngày và giờ UTC hiện tại dưới dạng giờ, phút, giây và phần trăm giây.\n\n**Giá trị trả về**: Datetime"}},"parametersInfo":{"min":0,"max":0}},{"type":"function","name":"extract","bundle":"date","description":"Trả về một phần ngày giờ, như năm, tháng, ngày, giờ, phút hoặc giây.","examples":"\n##### Ví dụ\n\nTrả về 12\n\n```sql\nEXTRACT(MONTH FROM DATE '2016-12-21')\n```\n\nTrả về 21\n\n```sql\nEXTRACT(DAY FROM TIMESTAMP '2016-12-21 12:00:00')\n```\n\nTrả về 30\n\n```sql\nEXTRACT(SECOND FROM TIME '10:50:30')\n```\n\n","completion":{"label":"EXTRACT","detail":"EXTRACT(part, datetime) -> Number","insertText":"EXTRACT(${1:part_} FROM ${2:datetime_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về một phần ngày giờ, như năm, tháng, ngày, giờ, phút hoặc giây.\n\n**Thông số**\n\n- **part**: Phần để xuất từ ngày. Giá trị có thể có: `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`.\n- **datetime**: Ngày để xuất một phần.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}}]},{"id":"numeric_functions","title":"Hàm số học","items":[{"type":"function","name":"abs","bundle":"numeric","description":"Trả về giá trị tuyệt đối của một số.","examples":"\n##### Ví dụ\n\nTrả về 2\n\n```sql\nABS(-2)\n```\n\n","completion":{"label":"ABS","detail":"ABS(number) -> Number","insertText":"ABS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về giá trị tuyệt đối của một số.\n\n**Tham số**\n\n- **number**: Một số để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"acos","bundle":"numeric","description":"Trả về cosin hình cung của một số.","examples":"\n##### Ví dụ\n\nTrả về 1.26610367\n\n```sql\nACOS(0.3)\n```\n\n","completion":{"label":"ACOS","detail":"ACOS(number) -> Number","insertText":"ACOS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về cosin hình cung của một số.\n\n**Tham số**\n\n- **number**: Một số từ -1 đến 1 để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"asin","bundle":"numeric","description":"Trả về sin hình cung của một số.","examples":"\n##### Ví dụ\n\nTrả về 0.30469265\n\n```sql\nASIN(0.3)\n```\n\n","completion":{"label":"ASIN","detail":"ASIN(number) -> Number","insertText":"ASIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về sin hình cung của một số.\n\n**Tham số**\n\n- **number**: Một số từ -1 đến 1 để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"atan","bundle":"numeric","description":"Trả về tang hình cung của một số.","examples":"\n##### Ví dụ\n\nTrả về 0.78539816\n\n```sql\nATAN(1)\n```\n\n","completion":{"label":"ATAN","detail":"ATAN(number) -> Number","insertText":"ATAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về tang hình cung của một số.\n\n**Tham số**\n\n- **number**: Một số để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cast","bundle":"numeric","description":"Chuyển đổi giá trị từ một loại dữ liệu thành loại dữ liệu khác. Thông số Loại dữ liệu sẽ xác định giá trị được chuyển đổi thành loại nào. FLOAT chuyển đổi giá trị thành dạng số thực với độ chính xác kép, INTEGER chuyển đổi giá trị thành số nguyên, v.v.","examples":"\n##### Ví dụ\n\nTrả về 2\n\n```sql\nCAST(2.34 AS INTEGER)\n```\n\nTrả về '1:00 PM'\n\n```sql\nCAST('13:00' AS TIME)\n```\n\nTrả về '50'\n\n```sql\nCAST(50 AS VARCHAR(20))\n```\n\n","completion":{"label":"CAST","detail":"CAST(value, dataType) -> Number,Datetime,String","insertText":"CAST(${1:value_} AS ${2:dataType_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Chuyển đổi giá trị từ một loại dữ liệu thành loại dữ liệu khác. Thông số Loại dữ liệu sẽ xác định giá trị được chuyển đổi thành loại nào. FLOAT chuyển đổi giá trị thành dạng số thực với độ chính xác kép, INTEGER chuyển đổi giá trị thành số nguyên, v.v.\n\n**Thông số**\n\n- **value**: Giá trị sẽ chuyển đổi sang loại dữ liệu khác.\n- **dataType**: Loại dữ liệu để chuyển đổi giá trị thành. Giá trị có thể có: `DATE`, `FLOAT`, `INTEGER`, `REAL`, `SMALLINT`, `TIME`, `TIMESTAMP`, `VARCHAR`.\n\n**Giá trị trả về**: Number,Datetime,String"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"ceiling","bundle":"numeric","description":"Trả về số nguyên nhỏ nhất lớn hơn hoặc bằng số.","examples":"\n##### Ví dụ\n\nTrả về 235\n\n```sql\nCEILING(234.042)\n```\n\n","completion":{"label":"CEILING","detail":"CEILING(number) -> Number","insertText":"CEILING(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về số nguyên nhỏ nhất lớn hơn hoặc bằng số.\n\n**Tham số**\n\n- **number**: Số để làm tròn lên.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"cos","bundle":"numeric","description":"Trả về cosin lượng giác của số, được giả định là một góc tính theo radian.","examples":"\n##### Ví dụ\n\nTrả về -0.41614684\n\n```sql\nCOS(2)\n```\n\n","completion":{"label":"COS","detail":"COS(number) -> Number","insertText":"COS(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về cosin lượng giác của số, được giả định là một góc tính theo radian.\n\n**Tham số**\n\n- **number**: Một góc tính theo radian để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"floor","bundle":"numeric","description":"Trả về số nguyên lớn nhất nhỏ hơn hoặc bằng số.","examples":"\n##### Ví dụ\n\nTrả về 12\n\n```sql\nFLOOR(12.9942)\n```\n\n","completion":{"label":"FLOOR","detail":"FLOOR(number) -> Number","insertText":"FLOOR(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về số nguyên lớn nhất nhỏ hơn hoặc bằng số.\n\n**Tham số**\n\n- **number**: Số để làm tròn xuống.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log","bundle":"numeric","description":"Trả về lôgarít tự nhiên (cơ số e) của số.","examples":"\n##### Ví dụ\n\nTrả về 2.302585\n\n```sql\nLOG(10)\n```\n\n","completion":{"label":"LOG","detail":"LOG(number) -> Number","insertText":"LOG(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về lôgarít tự nhiên (cơ số e) của số.\n\n**Tham số**\n\n- **number**: Một số lớn hơn 0 để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"log10","bundle":"numeric","description":"Trả về lôgarít cơ số 10 của số.","examples":"\n##### Ví dụ\n\nTrả về 0.301030\n\n```sql\nLOG10(2)\n```\n\n","completion":{"label":"LOG10","detail":"LOG10(number) -> Number","insertText":"LOG10(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về lôgarít cơ số 10 của số.\n\n**Tham số**\n\n- **number**: Một số để thực hiện phép tính lớn hơn 0.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"mod","bundle":"numeric","description":"Trả về kết quả còn lại sau khi chia số bị chia cho số chia. Cả số bị chia và số chia phải là số nguyên.","examples":"\n##### Ví dụ\n\nTrả về 2\n\n```sql\nMOD(18, 4)\n```\n\n","completion":{"label":"MOD","detail":"MOD(x, y) -> Number","insertText":"MOD(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về kết quả còn lại sau khi chia số bị chia cho số chia. Cả số bị chia và số chia phải là số nguyên.\n\n**Thông số**\n\n- **x**: Số thể hiện số bị chia.\n- **y**: Số thể hiện số chia.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"nullif","bundle":"numeric","description":"Trả về giá trị `NULL` nếu expression1 bằng với expression2, nếu không, trả về expression1. Giá trị cho expression1 và expression2 phải cùng loại. NULLIF thường được sử dụng để tránh lỗi chia một số cho 0 bằng cách đặt expression2 thành 0.","examples":"\n##### Ví dụ\n\nTrả về giá trị `null`\n\n```sql\nNULLIF('Monday', 'Monday')\n```\n\nTrả về 32\n\n```sql\nNULLIF(32, 0)\n```\n\nTrả về giá trị `null` nếu POP18 bằng 0, nếu không, trả về giá trị của TOTALPOP / POP18.\n\n```sql\nTOTALPOP / NULLIF(POP18, 0)\n```\n\n","completion":{"label":"NULLIF","detail":"NULLIF(expression1, expression2) -> Number,String,Datetime","insertText":"NULLIF(${1:expression1_}, ${2:expression2_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về giá trị `NULL` nếu expression1 bằng với expression2, nếu không, trả về expression1. Giá trị cho expression1 và expression2 phải cùng loại. NULLIF thường được sử dụng để tránh lỗi chia một số cho 0 bằng cách đặt expression2 thành 0.\n\n**Thông số**\n\n- **expression1**: Giá trị để thực hiện phép tính.\n- **expression2**: Giá trị để thực hiện phép tính.\n\n**Giá trị trả về**: Number,String,Datetime"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"power","bundle":"numeric","description":"Trả về giá trị của số được tăng lên lũy thừa được chỉ định.","examples":"\n##### Ví dụ\n\nTrả về 8\n\n```sql\nPOWER(2, 3)\n```\n\n","completion":{"label":"POWER","detail":"POWER(x, y) -> Number","insertText":"POWER(${1:x_}, ${2:y_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về giá trị của số được tăng lên lũy thừa được chỉ định.\n\n**Thông số**\n\n- **x**: Số để thực hiện phép tính.\n- **y**: Số mũ cho biết số lần nhân số với chính nó.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"round","bundle":"numeric","description":"Làm tròn số thành độ dài được chỉ định.","examples":"\n##### Ví dụ\n\nTrả về 3.98\n\n```sql\nROUND(3.98024, 2)\n```\n\nTrả về 200\n\n```sql\nROUND(192.1, -2)\n```\n\n","completion":{"label":"ROUND","detail":"ROUND(number, length) -> Number","insertText":"ROUND(${1:number_}, ${2:length_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Làm tròn số thành độ dài được chỉ định.\n\n**Thông số**\n\n- **number**: Số để làm tròn.\n- **length**: Số ở vị trí thập phân để làm tròn số. Độ dài dương làm tròn số đến vị trí thập phân được chỉ định. Độ dài âm sẽ làm tròn số đến điểm thập phân ở bên trái.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}},{"type":"function","name":"sign","bundle":"numeric","description":"Trả về dấu của một số đã cho. Số âm sẽ trả về -1. Số dương sẽ trả về 1.","examples":"\n##### Ví dụ\n\nTrả về -1\n\n```sql\nSIGN(-132)\n```\n\nTrả về 0\n\n```sql\nSIGN(0)\n```\n\nTrả về 1\n\n```sql\nSIGN(42)\n```\n\n","completion":{"label":"SIGN","detail":"SIGN(number) -> Number","insertText":"SIGN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về dấu của một số đã cho. Số âm sẽ trả về -1. Số dương sẽ trả về 1.\n\n**Tham số**\n\n- **number**: Một số để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"sin","bundle":"numeric","description":"Trả về sin lượng giác của số, được giả định là một góc tính theo radian.","examples":"\n##### Ví dụ\n\nTrả về 0.84147098\n\n```sql\nSIN(1)\n```\n\n","completion":{"label":"SIN","detail":"SIN(number) -> Number","insertText":"SIN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về sin lượng giác của số, được giả định là một góc tính theo radian.\n\n**Tham số**\n\n- **number**: Một góc tính theo radian để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"tan","bundle":"numeric","description":"Trả về tang của một số, được giả định là một góc tính theo radian.","examples":"\n##### Ví dụ\n\nTrả về 2.57215162\n\n```sql\nTAN(1.2)\n```\n\n","completion":{"label":"TAN","detail":"TAN(number) -> Number","insertText":"TAN(${1:number_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về tang của một số, được giả định là một góc tính theo radian.\n\n**Tham số**\n\n- **number**: Một góc tính theo radian để thực hiện phép tính.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":1,"max":1}},{"type":"function","name":"truncate","bundle":"numeric","description":"Trả về số rút gọn.","examples":"\n##### Ví dụ\n\nTrả về 91.3\n\n```sql\nTRUNCATE(91.367, 1)\n```\n\nTrả về 124\n\n```sql\nTRUNCATE(124.45, 0)\n```\n\nTrả về 1900\n\n```sql\nTRUNCATE(1982.83, -2)\n```\n\n","completion":{"label":"TRUNCATE","detail":"TRUNCATE(number, decimals) -> Number","insertText":"TRUNCATE(${1:number_}, ${2:decimals_})$0","insertTextMode":2,"insertTextFormat":2,"kind":3,"documentation":{"kind":"markdown","value":"Trả về số rút gọn.\n\n**Thông số**\n\n- **number**: Một số để rút gọn.\n- **decimals**: Giá trị dương rút gọn số đến vị trí thập phân được chỉ định. Giá trị âm rút gọn đến điểm thập phân ở bên trái.\n\n**Giá trị trả về**: Number"}},"parametersInfo":{"min":2,"max":2}}]}]