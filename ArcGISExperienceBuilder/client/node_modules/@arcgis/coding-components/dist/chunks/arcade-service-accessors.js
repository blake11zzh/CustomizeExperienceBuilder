import { isURL as t, hasSameOrigin as i } from "@arcgis/components-utils";
import c from "@arcgis/core/request.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
function a() {
  return !!window.MonacoEnvironment?.getWorkerUrl;
}
const s = /* @__PURE__ */ new Map();
function m(r) {
  a() || (window.MonacoEnvironment = {
    getWorker: async (w, o) => {
      let e = s.get(o) ?? `${r}/code-editor/editor.worker.js`;
      switch (o) {
        case "json":
          e = `${r}/code-editor/json.worker.js`;
          break;
        case "css":
          e = `${r}/code-editor/css.worker.js`;
          break;
        case "html":
          e = `${r}/code-editor/html.worker.js`;
          break;
        case "typescript":
        case "javascript":
          e = `${r}/code-editor/ts.worker.js`;
          break;
        case "arcade":
          e = `${r}/code-editor/arcade.worker.js`;
          break;
        case "arcgis-sql-expression":
          e = `${r}/code-editor/sql-expr.worker.js`;
          break;
      }
      if (!t(e) || i(e, globalThis.location.href, !0))
        return new Worker(e, { name: o });
      const n = await c(e, {
        responseType: "text"
      });
      return new Worker(
        URL.createObjectURL(
          new Blob([n.data], {
            type: "text/javascript"
          })
        )
      );
    }
  });
}
async function u() {
  return (await d()).getArcadeDiagnosticService();
}
async function d() {
  return await import("./arcade-mode.js");
}
export {
  u as a,
  d as g,
  m as s
};
