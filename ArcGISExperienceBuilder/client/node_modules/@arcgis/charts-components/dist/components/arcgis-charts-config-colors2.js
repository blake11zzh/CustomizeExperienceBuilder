/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn } from './index2.js';
import { n as sanitizeColor } from './chart-ui-utils.js';

const colorStorageId = "arcgis-charts-config-storage-colors";

const arcgisChartsConfigColorsCss = ":host{--calcite-color-border-1:transparent}.color-header{margin-bottom:0.5rem}";
const ArcgisChartsConfigColorsStyle0 = arcgisChartsConfigColorsCss;

const ArcgisChartsConfigColors = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigColors extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.colorSelect = createEvent(this, "colorSelect", 7);
        /**
         * @category Event handler
         */
        this.onColorSelect = (e) => {
            const { value } = e.target;
            if (value !== null) {
                const { r, g, b } = value;
                // TODO: change this once alpha value is implemented
                const newColor = [r, g, b, 255];
                if (this.isNewColor(newColor)) {
                    this.colorSelect.emit(newColor);
                }
            }
        };
        this.rgba = undefined;
        this.heading = undefined;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    render() {
        let colorValue;
        // Assigning a color if rgba is defined
        if (this.rgba !== undefined) {
            const [r, g, b] = this.rgba;
            colorValue = { r, g, b };
        }
        return (h(Host, { key: '50e084e8085aaf68608b677ab61bd32a27920b97' }, h("calcite-label", { key: 'f81afbfdc55b0a02d80482009e89e04d4c7d5eb1' }, this.heading ?? this.strings.color), h("calcite-color-picker", { key: 'dcd78249842645ec5c707c93009716940a39bc0d', value: sanitizeColor(colorValue), onCalciteColorPickerInput: this.onColorSelect, messageOverrides: {
                g: this.strings.g,
                green: this.strings.green,
                h: this.strings.h,
                hex: this.strings.hex,
                hsv: this.strings.hsv,
                hue: this.strings.hue,
                r: this.strings.r,
                red: this.strings.red,
                rgb: this.strings.rgb,
                s: this.strings.s,
                saturation: this.strings.saturation,
                saveColor: this.strings.saveColor,
                saved: this.strings.saved,
                v: this.strings.v,
                value: this.strings.value,
            }, allowEmpty: true, storageId: colorStorageId, format: "rgb" })));
    }
    /**
     * Helper function to determine if the color changed
     * @Category Private
     */
    isNewColor(newColor) {
        let isNewColor = false;
        if (this.rgba === undefined) {
            isNewColor = true;
        }
        // an undefined color shouldn't trigger a color update
        else if (newColor === undefined) {
            isNewColor = false;
        }
        else {
            isNewColor = newColor[0] !== this.rgba[0] || newColor[1] !== this.rgba[1] || newColor[2] !== this.rgba[2];
        }
        return isNewColor;
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get style() { return ArcgisChartsConfigColorsStyle0; }
}, [1, "arcgis-charts-config-colors", {
        "rgba": [16],
        "heading": [1]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-colors"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-colors":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigColors);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigColors as A, defineCustomElement as d };
