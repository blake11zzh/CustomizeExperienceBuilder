/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as bc, S as Sc, I as Ic, T as Tc, t as ty } from './index2.js';
import { C as ChartAuthoringPages } from './interfaces.js';
import { d as defineCustomElement$c } from './arcgis-charts-config-axes2.js';
import { d as defineCustomElement$b } from './arcgis-charts-config-axis2.js';
import { d as defineCustomElement$a } from './arcgis-charts-config-category-format2.js';
import { d as defineCustomElement$9 } from './arcgis-charts-config-field-select2.js';
import { d as defineCustomElement$8 } from './arcgis-charts-config-format2.js';
import { d as defineCustomElement$7 } from './arcgis-charts-config-general2.js';
import { d as defineCustomElement$6 } from './arcgis-charts-config-guide2.js';
import { d as defineCustomElement$5 } from './arcgis-charts-config-guides2.js';
import { d as defineCustomElement$4 } from './arcgis-charts-config-invalid-input-message2.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-line-chart-data2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-line-chart-series2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-number-format2.js';
import { i as isEqual } from './isEqual.js';

const arcgisChartsConfigLineChartCss = ":host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}";
const ArcgisChartsConfigLineChartStyle0 = arcgisChartsConfigLineChartCss;

const ArcGISChartsConfigLineChart = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigLineChart extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsNoSeriesUpdate = createEvent(this, "arcgisChartsConfigNoSeriesUpdate", 7);
        /**
         * @category Private
         */
        this.popoverElement = null;
        /**
         * @category Event handler
         */
        this.popoverOpen = (e) => {
            const { open = false, element = null } = { ...e.detail };
            if (open === true && this.popoverElement !== element) {
                if (this.popoverElement !== null) {
                    this.popoverElement.open = false;
                }
                this.popoverElement = element;
            }
            else if (open === false && this.popoverElement === element) {
                this.popoverElement = null;
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = async (e) => {
            const config = e?.detail.config ?? this.model.getConfig();
            if (this.layer === undefined) {
                await this.updateFetchLayerFieldsInfo(config);
            }
        };
        this.model = undefined;
        this.timeZone = undefined;
        this.popoverPlacement = "leading";
        this.seriesColor = undefined;
        this.calculatedDataMinMaxBounds = undefined;
        this.calculatedMinMaxBounds = undefined;
        this.page = undefined;
        this.layer = undefined;
        this.usePopupTemplateFieldsInfo = undefined;
        this.layerFieldsInfo = undefined;
        this.activeColorMatch = false;
    }
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    async layerChange(newValue, oldValue) {
        if (newValue && !isEqual(oldValue, newValue)) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    async usePopupTemplateFieldsInfoChange(newValue, oldValue) {
        if (newValue && newValue !== oldValue) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * Assigns new colors to the series
     * @param seriesColor
     * @category Watch handler
     */
    seriesColorChange(seriesColor) {
        this.activeColorMatch = seriesColor?.get(0)?.markerSymbol === undefined;
        if (this.model.getColorMatch()) {
            seriesColor?.forEach((symbol, index) => {
                if (seriesColor?.get(0) !== undefined) {
                    // update line properties of the series
                    if (symbol.lineSymbol?.color !== undefined &&
                        !isEqual(this.model.getSeriesColor(index), symbol.lineSymbol.color)) {
                        this.model.setSeriesColor(symbol.lineSymbol.color, index);
                    }
                    if (symbol.lineSymbol?.style !== undefined &&
                        !isEqual(this.model.getSeriesLineStyle(index), symbol.lineSymbol.style)) {
                        this.model.setSeriesLineStyle(symbol.lineSymbol.style, index);
                    }
                    if (symbol.lineSymbol?.width !== undefined &&
                        !isEqual(this.model.getSeriesLineWidth(index), symbol.lineSymbol.width)) {
                        this.model.setSeriesLineWidth(symbol.lineSymbol.width, index);
                    }
                    // update marker properties of the series
                    if (symbol.markerSymbol?.color !== undefined &&
                        !isEqual(this.model.getSeriesMarkerColor(index), symbol.markerSymbol?.color)) {
                        this.model.setSeriesMarkerColor(symbol.markerSymbol?.color, index);
                    }
                    if (symbol.markerSymbol?.style !== undefined &&
                        !isEqual(this.model.getSeriesMarkerStyle(index), symbol.markerSymbol?.style)) {
                        this.model.setSeriesMarkerStyle(symbol.markerSymbol?.style, index);
                    }
                    if (symbol.markerSymbol?.size !== undefined &&
                        this.model.getSeriesMarkerSize(index) !== symbol.markerSymbol?.size) {
                        this.model.setSeriesMarkerSize(symbol.markerSymbol?.size, index);
                    }
                }
            });
        }
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        if (this.layer !== undefined) {
            await this.layerChange(this.layer, undefined);
        }
        if (this.seriesColor !== undefined) {
            this.seriesColorChange(this.seriesColor);
        }
        if (this.usePopupTemplateFieldsInfo !== undefined) {
            await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, undefined);
        }
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    async componentWillRender() {
        // Ensure layerFieldsInfo is defined
        if (this.layerFieldsInfo === undefined) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * Render the panels for each of the pages.
     * @category Lifecycle
     */
    render() {
        const xField = this.layerFieldsInfo.find((field) => field.name === this.model.getXAxisField());
        const enableXAxisGuide = xField !== undefined && (Ic(xField) || Tc(xField));
        let panel;
        switch (this.page) {
            case ChartAuthoringPages.Data:
                panel = (h(Host, { key: '51b64dbaa60ab8ae714dc9e19c8bdeff8c21f0c7' }, h("arcgis-charts-config-line-chart-data", { key: 'e0277e2fd26a9947e89358b82d16ff9bb8ca2fb9', model: this.model, resetTimeInterval: this.model.resetTimeInterval, layerFieldsInfo: this.layerFieldsInfo })));
                break;
            case ChartAuthoringPages.Series:
                panel = (h(Host, { key: '31225c635de03841696cd5325af31b5004b6e12f' }, h("arcgis-charts-config-line-chart-series", { key: 'c83b93cae1c76b39ad5f75340dfd49197c2182bc', model: this.model, activeColorMatch: this.activeColorMatch, popoverPlacement: this.popoverPlacement, onArcgisChartsConfigLineChartSeriesPopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.Axes:
                panel = (h(Host, { key: 'a6a5c13dc824e21906908c804050fb32b31459db' }, h("arcgis-charts-config-axes", { key: '541221d19b9110370bebf5b687ae424d9b4f745a', model: this.model, showMinXBoundOption: false, showMaxXBoundOption: false, showMinYBoundOption: true, showMaxYBoundOption: true, showEnableXLogOption: true, showEnableYLogOption: true, calculatedMinMaxBounds: this.calculatedMinMaxBounds, calculatedDataMinMaxBounds: this.calculatedDataMinMaxBounds })));
                break;
            case ChartAuthoringPages.Guides:
                panel = (h(Host, { key: '680a733ccccd3e737006945956dac628de6c420c' }, h("arcgis-charts-config-guides", { key: 'c5b3cdb0579591ad16ec3f5167764ce288aa94ce', model: this.model, timeZone: this.timeZone, calculatedMinMaxBounds: this.calculatedMinMaxBounds, enableXAxisGuide: enableXAxisGuide, enableYAxisGuide: true, onArcgisChartsConfigGuidePopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.Format:
                panel = (h(Host, { key: '36bb851fdad38b852cb493e6c8cf9a1b3a9bbac8' }, h("arcgis-charts-config-format", { key: 'fd55952c7522184413fdd2c12d4e130b5711f015', model: this.model, onArcgisChartsConfigFormatPopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.General:
                panel = (h(Host, { key: 'c643c17d7caab0962c3308781c2a19e58edc6c71' }, h("arcgis-charts-config-general", { key: '6951361c4648022d150557c0adadf15c3ea52f87', model: this.model })));
                break;
            default:
                panel = h(Host, { key: '9f14d9926c84426fa4fb903312515060a582b04f' });
                break;
        }
        return panel;
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Private
     */
    async updateFetchLayerFieldsInfo(config) {
        // get feature layer from component prop if exists, otherwise get from current config iLayer
        const currentConfig = config ?? this.model.getConfig();
        let layer = this.layer;
        // if the layer doesn't exist we build one from the config data source
        if (!layer) {
            const iLayer = ty(currentConfig) ? currentConfig.iLayer : undefined;
            if (iLayer) {
                layer = await bc(iLayer);
            }
        }
        if (layer) {
            this.layerFieldsInfo = await Sc(layer, this.usePopupTemplateFieldsInfo);
        }
    }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"],
        "seriesColor": ["seriesColorChange"]
    }; }
    static get style() { return ArcgisChartsConfigLineChartStyle0; }
}, [1, "arcgis-charts-config-line-chart", {
        "model": [16],
        "timeZone": [513, "time-zone"],
        "popoverPlacement": [513, "popover-placement"],
        "seriesColor": [16],
        "calculatedDataMinMaxBounds": [16],
        "calculatedMinMaxBounds": [16],
        "page": [513],
        "layer": [16],
        "usePopupTemplateFieldsInfo": [4, "use-popup-template-fields-info"],
        "layerFieldsInfo": [32],
        "activeColorMatch": [32]
    }, undefined, {
        "model": ["modelChange"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"],
        "seriesColor": ["seriesColorChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-line-chart", "arcgis-charts-config-axes", "arcgis-charts-config-axis", "arcgis-charts-config-category-format", "arcgis-charts-config-field-select", "arcgis-charts-config-format", "arcgis-charts-config-general", "arcgis-charts-config-guide", "arcgis-charts-config-guides", "arcgis-charts-config-invalid-input-message", "arcgis-charts-config-line-chart-data", "arcgis-charts-config-line-chart-series", "arcgis-charts-config-number-format"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-line-chart":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigLineChart);
            }
            break;
        case "arcgis-charts-config-axes":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "arcgis-charts-config-axis":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "arcgis-charts-config-category-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "arcgis-charts-config-field-select":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "arcgis-charts-config-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "arcgis-charts-config-general":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "arcgis-charts-config-guide":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "arcgis-charts-config-guides":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "arcgis-charts-config-invalid-input-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "arcgis-charts-config-line-chart-data":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-line-chart-series":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-number-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigLineChart as A, defineCustomElement as d };
