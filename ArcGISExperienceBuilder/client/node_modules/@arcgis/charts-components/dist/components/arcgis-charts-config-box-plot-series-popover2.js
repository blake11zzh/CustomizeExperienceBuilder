/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, y as eu, E as Hn } from './index2.js';
import { U as UIDefaults } from './chart-ui-utils.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-colors2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-line-style2.js';
import { i as isEqual } from './isEqual.js';
import { a as RESTSymbolType } from './interfaces.js';

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
    panelChildrenContainer: "panel-children-container",
};

const arcgisChartsConfigBoxPlotSeriesPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.host{overflow-y:auto;width:-moz-min-content;width:min-content}.panel-children-container{display:flex;padding:0 1rem;margin-top:1rem}.panel-children-container calcite-label{flex:1 1 0px;display:flex;width:0px}";
const ArcgisChartsConfigBoxPlotSeriesPopoverStyle0 = arcgisChartsConfigBoxPlotSeriesPopoverCss;

const ArcgisChartsConfigBoxPlotSeriesPopover = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigBoxPlotSeriesPopover extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigSeriesPopoverNameChange = createEvent(this, "arcgisChartsConfigSeriesPopoverNameChange", 7);
        this.arcgisChartsConfigSeriesPopoverColorChange = createEvent(this, "arcgisChartsConfigSeriesPopoverColorChange", 7);
        this.arcgisChartsConfigSeriesPopoverLineStyleChange = createEvent(this, "arcgisChartsConfigSeriesPopoverLineStyleChange", 7);
        this.arcgisChartsConfigSeriesPopoverLineWidthChange = createEvent(this, "arcgisChartsConfigSeriesPopoverLineWidthChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            const name = event.target.value;
            if (this.selectedName !== name) {
                this.selectedName = name;
                this.arcgisChartsConfigSeriesPopoverNameChange.emit({ name });
            }
        };
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.colorChange = (e) => {
            const color = e instanceof CustomEvent ? e.detail : e;
            const [r, g, b] = color;
            const a = Hn * 255;
            this.selectedColor = [r, g, b, a];
            this.arcgisChartsConfigSeriesPopoverColorChange.emit({ color: [r, g, b, a] });
        };
        /**
         * @category Event handler
         */
        this.lineSymbolChange = (e) => {
            const { lineStyle } = e.target;
            const { color, style, width } = lineStyle;
            // Update the selected color if it has changed
            if (color !== undefined && !isEqual(color, this.selectedColor)) {
                const [r, g, b] = color;
                const a = Hn * 255;
                this.selectedColor = [r, g, b, a];
                this.arcgisChartsConfigSeriesPopoverColorChange.emit({ color: [r, g, b, a] });
            }
            // Update the selected line style if it has changed
            if (style !== undefined && style !== this.selectedLineStyle) {
                this.selectedLineStyle = style;
                this.arcgisChartsConfigSeriesPopoverLineStyleChange.emit({ style });
            }
            // Update the selected line width if it has changed
            if (width !== undefined && width !== this.selectedLineWidth) {
                this.selectedLineWidth = width;
                this.arcgisChartsConfigSeriesPopoverLineWidthChange.emit({ width });
            }
        };
        this.referenceElement = undefined;
        this.selectedName = undefined;
        this.selectedColor = undefined;
        this.selectedLineStyle = undefined;
        this.selectedLineWidth = undefined;
        this.isLineSymbol = false;
        this.placement = undefined;
        this.open = true;
        this.labelCanBeConfigured = true;
    }
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange() {
        this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.openChange();
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, UIDefaults.PopoverTimer);
    }
    componentDidRender() {
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const rgba = this.selectedColor;
        return (h(Host, { key: '3e9bd455f4a358286ec10d025ab7f2999308f669', class: HTMLClasses.jsAppFlyout }, h("calcite-popover", { key: '9232c0f008a4b1752f7b6c41716148535d2b74b6', referenceElement: this.referenceElement, placement: this.placement, open: this.open, onCalcitePopoverClose: this.closePopover, ref: (e) => {
                this.popoverElement = e;
            }, label: "" }, h("calcite-panel", { key: '35402c619da7128053460bfd04ccff11f5f86aba', heading: this.strings.seriesElement, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, this.labelCanBeConfigured ? (h("div", { class: HTMLClasses.panelChildrenContainer }, h("calcite-label", null, this.strings.label, h("calcite-input", { type: "text", value: this.selectedName, onCalciteInputInput: this.seriesNameChange })))) : null, h("div", { key: 'c0db4454355f01ea1ee15fa42d864a15c4d64191', class: HTMLClasses.panelChildrenContainer }, this.isLineSymbol ? (h("arcgis-charts-config-line-style", { open: this.open, enableClose: true, usePanel: false, lineStyle: {
                type: RESTSymbolType.SLS,
                style: this.selectedLineStyle,
                width: this.selectedLineWidth,
                color: rgba,
            }, onArcgisChartsConfigLineStyleClose: this.closePopover, onArcgisChartsConfigLineStyleChange: this.lineSymbolChange })) : (h("arcgis-charts-config-colors", { heading: this.strings.symbolColor, rgba: rgba, onColorSelect: this.colorChange })))))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "open": ["openChange"]
    }; }
    static get style() { return ArcgisChartsConfigBoxPlotSeriesPopoverStyle0; }
}, [1, "arcgis-charts-config-box-plot-series-popover", {
        "referenceElement": [16],
        "selectedName": [1537, "selected-name"],
        "selectedColor": [1040],
        "selectedLineStyle": [513, "selected-line-style"],
        "selectedLineWidth": [514, "selected-line-width"],
        "isLineSymbol": [516, "is-line-symbol"],
        "placement": [513],
        "open": [1540],
        "labelCanBeConfigured": [516, "label-can-be-configured"],
        "reposition": [64]
    }, undefined, {
        "open": ["openChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-box-plot-series-popover", "arcgis-charts-config-colors", "arcgis-charts-config-line-style"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-box-plot-series-popover":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigBoxPlotSeriesPopover);
            }
            break;
        case "arcgis-charts-config-colors":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-line-style":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigBoxPlotSeriesPopover as A, defineCustomElement as d };
