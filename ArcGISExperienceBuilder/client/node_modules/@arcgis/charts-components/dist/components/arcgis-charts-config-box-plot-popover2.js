/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { u as jn, O as On, M as Mn, y as eu, A as Tl, C as Cc, I as Ic } from './index2.js';
import { Z as Zf } from './index3.js';
import { e as emitNumericFieldsChange, U as UIDefaults, c as createActionTooltip, d as destroyActionTooltip, i as itemMatchesSelectedContent } from './chart-ui-utils.js';
import { c as BoxPlotDataPopoverKinds, b as RESTFieldType } from './interfaces.js';
import { i as isEqual } from './isEqual.js';

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
    name: "bar-chart-data-popover",
    numericFieldPickList: "bar-chart-data-numeric-fields-pick-list",
    header: "header",
    fab: "fab",
    pickListItemLabel: "pick-list-item-label",
    sortMean: "sort-mean",
    sortMedian: "sort-median",
    sortOrderPickList: "sort-order-pick-list",
    panel: "panel",
};

const arcgisChartsConfigBoxPlotPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.name{display:flex;flex-direction:column;margin:0.5rem;padding:0.5rem;background:white;min-width:250px}.header{margin:0;font-weight:bolder}.fab{display:flex;justify-content:stretch}.pick-list-item-label{font-size:small}.sort-icon-color{color:black}.sort-mean,.sort-median{transform:rotate(90deg)}.sort-order-pick-list{overflow-y:hidden}.panel{max-height:60vh}";
const ArcgisChartsConfigBoxPlotPopoverStyle0 = arcgisChartsConfigBoxPlotPopoverCss;

const ArcgisChartsConfigBoxPlotPopover = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigBoxPlotPopover extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigBoxPlotDataPopoverChange = createEvent(this, "arcgisChartsConfigBoxPlotDataPopoverChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Private
         */
        this.placement = "leading";
        /**
         * @category Private
         */
        this.offsetDistance = -200;
        /**
         * @category Private
         */
        this.pickListHasChanged = false;
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            if (this.contentKind === BoxPlotDataPopoverKinds.numericFields && this.pickListHasChanged) {
                const numericFieldsChangeProps = {
                    pickListElement: this.picklist,
                    eventEmitter: this.arcgisChartsConfigBoxPlotDataPopoverChange,
                    contentKind: this.contentKind,
                };
                emitNumericFieldsChange(numericFieldsChangeProps);
            }
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit(this.pickListHasChanged);
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onDataContentTypeChange = async (e) => {
            this.pickListHasChanged = true;
            const selectedItems = e.target.selectedItems;
            this.arcgisChartsConfigBoxPlotDataPopoverChange.emit({
                contentKind: this.contentKind,
                value: selectedItems.map((item) => item.value),
            });
            this.open = false;
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onNumericFieldsChange = (e) => {
            if (e.target !== null) {
                this.selectedContent = e.target.selectedItems.map((item) => item.value);
            }
        };
        /**
         * @category Event handler
         */
        this.onNumericFieldSelectionDone = async () => {
            if (this.pickListHasChanged) {
                this.closePopover();
            }
        };
        /**
         * Creates a tooltip for the hovered action.
         * @category Event handler
         */
        this.createTooltip = (e) => {
            if (e.target?.label === this.strings.customSort && this.isCustomSortDisabled) {
                const itemElement = e.target;
                const { formatLocale } = jn();
                const basicNumberFormatter = new Intl.NumberFormat(formatLocale);
                const formattedTotalLimit = basicNumberFormatter.format(UIDefaults.customSortLimit);
                const tooltipText = On(this.strings.customSortLimit, {
                    totalLimit: formattedTotalLimit,
                });
                this.tooltip = createActionTooltip(itemElement);
                this.tooltip.innerHTML = tooltipText;
                // append tooltip to the document body instead of action element
                // to avoid tooltip being cut off by calcite panel header element
                document.body.appendChild(this.tooltip);
            }
        };
        /**
         * Destroys tooltip for the action that was being hovered.
         * @category Event handler
         */
        this.destroyTooltip = () => {
            destroyActionTooltip(this.tooltip);
        };
        this.headingTitle = undefined;
        this.referenceElement = undefined;
        this.open = undefined;
        this.contentKind = undefined;
        this.layerFieldsInfo = undefined;
        this.isCustomSortDisabled = false;
        this.selectedContent = undefined;
    }
    /**
     * Watches for change to selected content to record if there was a pick list change.
     * @param newSelectedContent
     * @param oldSelectedContent
     * @category Watch handler
     */
    selectedContentChange(newSelectedContent, oldSelectedContent) {
        this.pickListHasChanged = !isEqual(newSelectedContent, oldSelectedContent);
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifestyle
     */
    componentDidRender() {
        setTimeout(async () => {
            if (typeof this.picklist?.setFocus === "function") {
                await this.picklist?.setFocus();
            }
        }, UIDefaults.PopoverTimer);
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, UIDefaults.PopoverTimer);
    }
    /**
     * @param field
     * @category Render UX
     */
    buildPickListItem(field) {
        return (h("calcite-list-item", { key: field.name, label: Tl(this.layerFieldsInfo, field.name), value: field.name, selected: itemMatchesSelectedContent(field.name, this.selectedContent) }));
    }
    /**
     * @param itemKind
     * @category Render UX
     */
    buildPickListItems(itemKind) {
        const fieldCount = this.layerFieldsInfo?.length ?? 0;
        const pickListItems = [];
        switch (itemKind) {
            case BoxPlotDataPopoverKinds.numericFields: {
                for (let i = 0; i < fieldCount; i += 1) {
                    const field = this.layerFieldsInfo[i];
                    if (Ic(field)) {
                        pickListItems.push(this.buildPickListItem(field));
                    }
                }
                break;
            }
            case BoxPlotDataPopoverKinds.category: {
                pickListItems.push(h("calcite-list-item", { label: "\u00A0", key: "\u00A0", value: "\u00A0", selected: itemMatchesSelectedContent("", this.selectedContent) }));
                for (let i = 0; i < fieldCount; i += 1) {
                    const field = this.layerFieldsInfo[i];
                    if (Cc(field) || field.type === RESTFieldType.String) {
                        pickListItems.push(this.buildPickListItem(field));
                    }
                }
                break;
            }
            case BoxPlotDataPopoverKinds.splitByField: {
                pickListItems.push(h("calcite-list-item", { label: "\u00A0", key: "\u00A0", value: "\u00A0", selected: itemMatchesSelectedContent("", this.selectedContent) }));
                for (let i = 0; i < fieldCount; i += 1) {
                    const field = this.layerFieldsInfo[i];
                    if (Cc(field) || field.type === RESTFieldType.String) {
                        pickListItems.push(this.buildPickListItem(field));
                    }
                }
                break;
            }
        }
        return pickListItems;
    }
    /**
     * @category Render UX
     */
    renderCategory() {
        const items = this.buildPickListItems(BoxPlotDataPopoverKinds.category);
        return (h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: true, onCalciteListChange: this.onDataContentTypeChange, ref: (e) => {
                this.picklist = e;
            } }, items));
    }
    /**
     * @category Render UX
     */
    renderNumericFields() {
        const items = this.buildPickListItems(BoxPlotDataPopoverKinds.numericFields);
        return (h("calcite-list", { label: "", class: HTMLClasses.numericFieldPickList, selectionMode: "multiple", filterEnabled: true, onCalciteListChange: this.onNumericFieldsChange, ref: (e) => {
                this.picklist = e;
            } }, items));
    }
    /**
     * @category Render UX
     */
    renderSplitByField() {
        const items = this.buildPickListItems(BoxPlotDataPopoverKinds.splitByField);
        return (h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: true, onCalciteListChange: this.onDataContentTypeChange, ref: (e) => {
                this.picklist = e;
            } }, items));
    }
    /**
     * @category Render UX
     * Unlike the other field-based render items, the sort orders
     * are static. So, a function separate from buildPickListItems()
     * needs to be used.
     */
    renderSortOrder() {
        const items = this.buildSortOrder();
        return (h("calcite-list", { label: "", class: HTMLClasses.sortOrderPickList, selectionMode: "single", selectionAppearance: "border", filterEnabled: false, onCalciteListChange: this.onDataContentTypeChange }, items));
    }
    /**
     * @category Render UX
     */
    buildSortOrder() {
        const items = Object.keys(Zf);
        let icon;
        return items.map((sortOrder) => {
            // y-axis icons need to be rotated 90 deg
            let rotateClass = "";
            switch (sortOrder) {
                case Zf.xAxisAsc: {
                    icon = "a-z-down";
                    break;
                }
                case Zf.xAxisDesc: {
                    icon = "a-z-up";
                    break;
                }
                case Zf.meanAsc:
                    {
                        // when rotated, will show as ascending
                        icon = "sort-descending";
                        rotateClass = HTMLClasses.sortMean;
                    }
                    break;
                case Zf.meanDesc: {
                    // when rotated, will show as descending
                    icon = "sort-ascending";
                    rotateClass = HTMLClasses.sortMean;
                    break;
                }
                case Zf.medianAsc: {
                    // when rotated, will show as ascending
                    icon = "sort-descending";
                    rotateClass = HTMLClasses.sortMedian;
                    break;
                }
                case Zf.medianDesc: {
                    // when rotated, will show as descending
                    icon = "sort-ascending";
                    rotateClass = HTMLClasses.sortMedian;
                    break;
                }
                case Zf.customSort: {
                    icon = "arrow-up-down";
                    break;
                }
            }
            return (h("calcite-list-item", { disabled: this.isCustomSortDisabled && sortOrder === Zf.customSort, key: sortOrder, label: this.strings[sortOrder], selected: this.selectedContent === sortOrder, value: Zf[sortOrder], onMouseOver: this.createTooltip, onMouseOut: this.destroyTooltip }, h("calcite-icon", { class: `sort-icon-color ${rotateClass}`, slot: "content-start", icon: icon })));
        });
    }
    /**
     * @category Render UX
     */
    renderPopoverInfo() {
        let content;
        switch (this.contentKind) {
            case BoxPlotDataPopoverKinds.category:
                content = this.renderCategory();
                break;
            case BoxPlotDataPopoverKinds.numericFields:
                content = this.renderNumericFields();
                break;
            case BoxPlotDataPopoverKinds.splitByField:
                content = this.renderSplitByField();
                break;
            case BoxPlotDataPopoverKinds.sortOrder:
                content = this.renderSortOrder();
                break;
        }
        return content;
    }
    /**
     * @category Lifecycle
     */
    render() {
        let footerButton;
        if (this.contentKind === BoxPlotDataPopoverKinds.numericFields) {
            footerButton = (h("div", { key: '2ba8d441c029b5188c8e3da44dff415e5e6757e1', slot: "footer" }, h("calcite-fab", { key: '44fa1bbb636eb121709a7174cb224131ba6f07f8', class: HTMLClasses.fab, appearance: "outline-fill", kind: "neutral", icon: "", label: this.strings.selectionDone, scale: "s", "text-enabled": true, text: this.strings.selectionDone, onClick: this.onNumericFieldSelectionDone })));
        }
        return (h(Host, { key: 'd017ed79b794d79baabaa4066f7df1f38c01ec32', class: HTMLClasses.jsAppFlyout }, h("calcite-popover", { key: '04332f7cca5187dc61d4c095944eee56b7e9c0d8', class: HTMLClasses.name, referenceElement: this.referenceElement, placement: this.placement, offsetDistance: this.offsetDistance, open: this.open, onCalcitePopoverClose: this.closePopover, label: "", ref: (e) => {
                this.popoverElement = e;
            } }, h("calcite-panel", { key: 'b8f212fc5ea8a98aa0e1074574dd587b9f897755', class: HTMLClasses.panel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, h("div", { key: '13d238aaf6bfa9dcbbbc302ddeece3d0905a4a57', slot: "header-content", class: HTMLClasses.header }, this.headingTitle ?? ""), this.renderPopoverInfo(), footerButton))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "selectedContent": ["selectedContentChange"]
    }; }
    static get style() { return ArcgisChartsConfigBoxPlotPopoverStyle0; }
}, [1, "arcgis-charts-config-box-plot-popover", {
        "headingTitle": [513, "heading-title"],
        "referenceElement": [16],
        "open": [1540],
        "contentKind": [1, "content-kind"],
        "layerFieldsInfo": [16],
        "isCustomSortDisabled": [4, "is-custom-sort-disabled"],
        "selectedContent": [1, "selected-content"],
        "reposition": [64]
    }, undefined, {
        "selectedContent": ["selectedContentChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-box-plot-popover"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-box-plot-popover":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigBoxPlotPopover);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigBoxPlotPopover as A, defineCustomElement as d };
