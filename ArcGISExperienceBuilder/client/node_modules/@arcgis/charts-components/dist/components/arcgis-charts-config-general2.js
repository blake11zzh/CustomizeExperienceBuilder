/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn } from './index2.js';
import { M as Mg, L as Lg, D as Dg } from './index3.js';
import { m as modifyCalciteInputStatus, b as UIInputStatus } from './chart-ui-utils.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-invalid-input-message2.js';
import { i as isEmpty } from './isEmpty.js';
import { g as WebChartLegendPositions } from './chart-object-literals.js';

const HTMLClasses = {
    textInput: "text-input",
    disableResize: "disable-resize",
    label: "label",
    labelContainer: "label-container",
    select: "select",
};

const arcgisChartsConfigGeneralCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;margin-top:var(--arcgis-charts-top-section-margin)}.text-input{margin-bottom:var(--arcgis-charts-inter-section-margin)}.select{margin-bottom:var(--arcgis-charts-inter-section-margin)}.label{display:flex;justify-content:space-between}.label-container{display:flex;flex-direction:column;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}";
const ArcgisChartsConfigGeneralStyle0 = arcgisChartsConfigGeneralCss;

const ArcGISChartsConfigGeneral = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigGeneral extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /**
         * @category Event handler
         */
        this.setChartTitle = (e) => {
            const { value: chartTitle } = e.target;
            this.isChartTitleInvalid = isEmpty(chartTitle.trim());
            modifyCalciteInputStatus({
                inputElement: this.characterLimitInputElement,
                status: this.isChartTitleInvalid ? UIInputStatus.INVALID : UIInputStatus.IDLE,
            });
            if (!this.isChartTitleInvalid) {
                this.model.setTitleText(chartTitle);
            }
        };
        /**
         * @category Event handler
         */
        this.setChartLegendTitle = (e) => {
            const { value } = e.target;
            if (value !== undefined && Mg(this.model)) {
                this.model.setLegendTitleText(value);
            }
        };
        /**
         * @category Event handler
         */
        this.setChartXAxisTitle = (e) => {
            const { value } = e.target;
            if (value !== undefined && Lg(this.model)) {
                this.model.setXAxisTitleText(value);
            }
        };
        /**
         * @category Event handler
         */
        this.setChartYAxisTitle = (e) => {
            const { value } = e.target;
            if (value !== undefined && Dg(this.model)) {
                this.model.setYAxisTitleText(value);
            }
        };
        /**
         * @category Event handler
         */
        this.setChartDescription = (e) => {
            const { value } = e.target;
            if (value !== undefined) {
                this.model.setDescriptionText(value);
            }
        };
        /**
         * @category Event handler
         */
        this.enableChartTitle = (e) => {
            const value = e.target.checked;
            this.model.setChartTitleVisibility(value);
        };
        /**
         * @category Event handler
         */
        this.enableXAxisTitle = (e) => {
            const value = e.target.checked;
            if (Lg(this.model)) {
                this.model.setXAxisTitleVisibility(value);
            }
        };
        /**
         * @category Event handler
         */
        this.enableYAxisTitle = (e) => {
            const value = e.target.checked;
            if (Dg(this.model)) {
                this.model.setYAxisTitleVisibility(value);
            }
        };
        /**
         * @category Event handler
         */
        this.enableLegendTitle = (e) => {
            const value = e.target.checked;
            if (Mg(this.model)) {
                this.model.setLegendTitleVisibility(value);
            }
        };
        /**
         * @category Event handler
         */
        this.enableDescription = (e) => {
            const value = e.target.checked;
            this.model.setDescriptionVisibility(value);
        };
        /**
         * @category Event handler
         */
        this.legendPositionChange = (e) => {
            const selectedItem = e.target?.selectedItems[0];
            const alignment = selectedItem?.value;
            if (Mg(this.model)) {
                this.model.setLegendPosition(alignment);
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        this.model = undefined;
        this.open = false;
        this.isChartTitleInvalid = false;
        this.updatesOccurred = 0;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * Renders the options for a dropdown list of legend positions
     * @category Render UX
     */
    renderLegendPositions() {
        const options = Mg(this.model)
            ? [
                h("calcite-combobox-item", { value: WebChartLegendPositions.Right, textLabel: this.strings.legendRightPosition, selected: this.model.getLegendPosition() === WebChartLegendPositions.Right, icon: "right-edge" }),
                h("calcite-combobox-item", { value: WebChartLegendPositions.Left, textLabel: this.strings.legendLeftPosition, selected: this.model.getLegendPosition() === WebChartLegendPositions.Left, icon: "left-edge" }),
                h("calcite-combobox-item", { value: WebChartLegendPositions.Top, textLabel: this.strings.legendTopPosition, selected: this.model.getLegendPosition() === WebChartLegendPositions.Top, icon: "upload-to" }),
                h("calcite-combobox-item", { value: WebChartLegendPositions.Bottom, textLabel: this.strings.legendBottomPosition, selected: this.model.getLegendPosition() === WebChartLegendPositions.Bottom, icon: "download-to" }),
            ]
            : [];
        return options;
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: '8620e8fa7bb1ac7d7ec1a3bc8c4a43af2367c4b3' }, h("div", { key: '1f3972cabb8e1fdfe97e8f579b56219e61f5c063', class: HTMLClasses.labelContainer }, h("calcite-label", { key: '76e3786bac4b09177f3a86f3a114d8991707ff12', layout: "inline-space-between", class: HTMLClasses.label }, this.strings.chartTitle, h("calcite-switch", { key: '82e83d84250f8ebbf8e7053ed4354eb170a9110d', checked: this.model.getChartTitleVisibility(), onCalciteSwitchChange: this.enableChartTitle })), h("calcite-input", { key: '0185f7c4a559287ffb0d25547d788a5fce2021e3', class: HTMLClasses.textInput, type: "text", disabled: !this.model.getChartTitleVisibility(), value: this.model.getTitleText(), onCalciteInputInput: this.setChartTitle, ref: (e) => {
                this.characterLimitInputElement = e;
            } }), h("arcgis-charts-config-invalid-input-message", { key: '9b6b9b5ccc83d9f02231ef2ed526dc62a03e1c00', invalidInputMessage: this.strings.emptyChartTitle, isInvalid: this.isChartTitleInvalid })), Lg(this.model)
            ? [
                h("div", { class: HTMLClasses.labelContainer }, h("calcite-label", { layout: "inline-space-between", class: HTMLClasses.label }, this.strings.xAxisTitle, h("calcite-switch", { checked: this.model.getXAxisTitleVisibility(), onCalciteSwitchChange: this.enableXAxisTitle })), h("calcite-input", { class: HTMLClasses.textInput, type: "text", disabled: !this.model.getXAxisTitleVisibility(), value: this.model.getXAxisTitleText(), onCalciteInputInput: this.setChartXAxisTitle })),
                Dg(this.model) ? (h("div", { class: HTMLClasses.labelContainer }, h("calcite-label", { layout: "inline-space-between", class: HTMLClasses.label }, this.strings.yAxisTitle, h("calcite-switch", { checked: this.model.getYAxisTitleVisibility(), onCalciteSwitchChange: this.enableYAxisTitle })), h("calcite-input", { class: HTMLClasses.textInput, tabindex: "1", type: "text", disabled: !this.model.getYAxisTitleVisibility(), value: this.model.getYAxisTitleText(), onCalciteInputInput: this.setChartYAxisTitle }))) : null,
            ]
            : null, Mg(this.model) ? (h("div", { class: HTMLClasses.labelContainer }, h("calcite-label", { layout: "inline-space-between", class: HTMLClasses.label }, this.strings.legendTitle, h("calcite-switch", { checked: this.model.getLegendTitleVisibility(), onCalciteSwitchChange: this.enableLegendTitle })), h("calcite-input", { class: HTMLClasses.textInput, type: "text", disabled: !this.model.getLegendTitleVisibility(), value: this.model.getLegendTitleText(), onCalciteInputInput: this.setChartLegendTitle }))) : null, h("div", { key: '104bf24dd4fff16d40d71356104518687f7e53f2', class: HTMLClasses.labelContainer }, h("calcite-label", { key: '88742246b76c54dc2d31b01f8b80500c95a162a9', layout: "inline-space-between", class: HTMLClasses.label }, this.strings.legendPosition), h("calcite-combobox", { key: '7491128f64be6ce5a624098da71c43f744f909eb', clearDisabled: true, label: "", class: HTMLClasses.select, onCalciteComboboxChange: this.legendPositionChange, "selection-mode": "single" }, this.renderLegendPositions())), h("div", { key: '808bd77c5bc9dfa32b8b9e4d7a09740791c1931c', class: HTMLClasses.labelContainer }, h("calcite-label", { key: 'c288b1b80312b866c765dea7e0b54beb4dea2fdc', layout: "inline-space-between", class: HTMLClasses.label }, this.strings.description, h("calcite-switch", { key: '5c709f597c9e05b6b02d72296b7cbfb6c23e3bf1', checked: this.model.getDescriptionVisibility(), onCalciteSwitchChange: this.enableDescription })), h("calcite-text-area", { key: '8ebf5b74430ec33c07c739330d1549d05d03a58c', disabled: !this.model.getDescriptionVisibility(), value: this.model.getDescriptionText(), onCalciteTextAreaInput: this.setChartDescription }))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"]
    }; }
    static get style() { return ArcgisChartsConfigGeneralStyle0; }
}, [1, "arcgis-charts-config-general", {
        "model": [16],
        "open": [516],
        "isChartTitleInvalid": [32],
        "updatesOccurred": [32]
    }, undefined, {
        "model": ["modelChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-general", "arcgis-charts-config-invalid-input-message"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-general":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigGeneral);
            }
            break;
        case "arcgis-charts-config-invalid-input-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigGeneral as A, defineCustomElement as d };
