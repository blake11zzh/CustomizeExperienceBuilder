/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, y as eu, I as Ic, A as Tl } from './index2.js';
import { U as UIDefaults, g as getPopoverOffsetDistance, i as itemMatchesSelectedContent } from './chart-ui-utils.js';
import { e as ScatterPlotDataPopoverKinds, a as RESTSymbolType } from './interfaces.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-color-style2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-colors2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-line-style2.js';

const HTMLClasses = {
    symbolPropertyPopover: "symbol-property-popover",
    text: "text",
    jsAppFlyout: "js-app-flyout",
    scatterPlotPopover: "scatter-plot-popover",
    fillColor: "fill-color",
    header: "header",
    pickListItemLabel: "pick-list-item-label",
    pickListPanel: "pick-list-panel",
};

const arcgisChartsConfigScatterPlotPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{width:100%}.pick-list-panel{max-height:60vh}";
const ArcgisChartsConfigScatterPlotPopoverStyle0 = arcgisChartsConfigScatterPlotPopoverCss;

const ArcgisChartsConfigScatterPlotPopover = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigScatterPlotPopover extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigScatterPlotLineStyleChange = createEvent(this, "arcgisChartsConfigScatterPlotLineStyleChange", 7);
        this.arcgisChartsConfigScatterPlotFillColorChange = createEvent(this, "arcgisChartsConfigScatterPlotFillColorChange", 7);
        this.arcgisChartsConfigScatterPlotXYFieldChange = createEvent(this, "arcgisChartsConfigScatterPlotXYFieldChange", 7);
        this.arcgisChartsConfigScatterPlotSizeVariableFieldChange = createEvent(this, "arcgisChartsConfigScatterPlotSizeVariableFieldChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.seriesPopoverClose = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.updateSymbolProperties = (e) => {
            this.selectedContent = e.target.lineStyle;
            this.arcgisChartsConfigScatterPlotLineStyleChange.emit(e.detail);
        };
        /**
         * @category Event handler
         */
        this.updateColorProperties = (e) => {
            this.selectedContent = e.detail;
            this.arcgisChartsConfigScatterPlotFillColorChange.emit(this.selectedContent);
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onFieldSelectionChange = (e) => {
            const selectedItems = e.target.selectedItems;
            if (this.contentKind === ScatterPlotDataPopoverKinds.sizeVariable) {
                this.arcgisChartsConfigScatterPlotSizeVariableFieldChange.emit(selectedItems.map((item) => item.value)[0]);
            }
            else {
                this.arcgisChartsConfigScatterPlotXYFieldChange.emit(selectedItems.map((item) => item.value)[0]);
            }
            this.open = false;
        };
        this.headingTitle = undefined;
        this.contentKind = undefined;
        this.selectedContent = undefined;
        this.referenceElement = undefined;
        this.placement = undefined;
        this.open = undefined;
        this.layerFieldsInfo = undefined;
    }
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange() {
        this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.openChange();
    }
    /**
     * @category Lifestyle
     */
    componentDidRender() {
        setTimeout(async () => {
            await this.picklist?.setFocus();
        }, UIDefaults.PopoverTimer);
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, UIDefaults.PopoverTimer);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const colorElement = this.selectedContent;
        const symbolElement = this.selectedContent;
        return (h(Host, { key: '01fd08c9dd14d05594bfb9e610e470fe34a0a477', class: HTMLClasses.jsAppFlyout }, h("calcite-popover", { key: 'b8f47e9cb21ee292140e95fd8e3283ce9c76e88a', class: HTMLClasses.scatterPlotPopover, referenceElement: this.referenceElement, placement: this.placement, offsetDistance: getPopoverOffsetDistance(this.placement), onCalcitePopoverClose: this.closePopover, open: this.open, ref: (e) => {
                this.popoverElement = e;
            }, label: "" }, Array.isArray(colorElement) ? (h("arcgis-charts-config-color-style", { header: this.strings.fillColor, class: HTMLClasses.fillColor, enableClose: true, open: this.open, selectedColor: colorElement, onArcgisChartsConfigColorStyleClose: this.seriesPopoverClose, onArcgisChartsConfigColorStyleChange: this.updateColorProperties })) : null, symbolElement?.type === RESTSymbolType.SLS ? (h("arcgis-charts-config-line-style", { header: this.strings.lineStyle, open: this.open, enableClose: true, lineStyle: symbolElement, onArcgisChartsConfigLineStyleClose: this.seriesPopoverClose, onArcgisChartsConfigLineStyleChange: this.updateSymbolProperties })) : null, !Array.isArray(colorElement) && symbolElement?.type !== RESTSymbolType.SLS
            ? this.renderVariablePickList()
            : null)));
    }
    /**
     * @param axis
     * @category Render UX
     */
    renderVariablePickList() {
        const fieldCount = this.layerFieldsInfo?.length ?? 0;
        const pickListItems = [];
        if (this.contentKind === ScatterPlotDataPopoverKinds.sizeVariable) {
            pickListItems.push(h("calcite-list-item", { label: "\u00A0", key: "\u00A0", value: "\u00A0", selected: itemMatchesSelectedContent("", this.selectedContent) }));
        }
        for (let i = 0; i < fieldCount; i += 1) {
            const field = this.layerFieldsInfo?.[i] ?? undefined;
            if (field !== undefined && Ic(field)) {
                const label = Tl(this.layerFieldsInfo, field.name);
                pickListItems.push(h("calcite-list-item", { label: label, key: field.name, value: field.name, selected: itemMatchesSelectedContent(field.name, this.selectedContent) }));
            }
        }
        return (h("calcite-panel", { class: HTMLClasses.pickListPanel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, h("div", { slot: "header-content", class: HTMLClasses.header }, this.headingTitle ?? ""), h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: true, onCalciteListChange: this.onFieldSelectionChange, ref: (e) => {
                this.picklist = e;
            } }, pickListItems)));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "open": ["openChange"]
    }; }
    static get style() { return ArcgisChartsConfigScatterPlotPopoverStyle0; }
}, [1, "arcgis-charts-config-scatter-plot-popover", {
        "headingTitle": [513, "heading-title"],
        "contentKind": [513, "content-kind"],
        "selectedContent": [513, "selected-content"],
        "referenceElement": [16],
        "placement": [513],
        "open": [1540],
        "layerFieldsInfo": [16],
        "reposition": [64]
    }, undefined, {
        "open": ["openChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-scatter-plot-popover", "arcgis-charts-config-color-style", "arcgis-charts-config-colors", "arcgis-charts-config-line-style"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-scatter-plot-popover":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigScatterPlotPopover);
            }
            break;
        case "arcgis-charts-config-color-style":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-colors":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-line-style":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigScatterPlotPopover as A, defineCustomElement as d };
