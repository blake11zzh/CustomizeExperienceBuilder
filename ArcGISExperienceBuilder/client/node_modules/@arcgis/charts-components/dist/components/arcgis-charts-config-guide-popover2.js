/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, y as eu } from './index2.js';
import { g as guideOpacity } from './default.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-color-style2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-colors2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-line-style2.js';
import { a as RESTSymbolType } from './interfaces.js';

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
};

const arcgisChartsConfigGuidePopoverCss = "";
const ArcgisChartsConfigGuidePopoverStyle0 = arcgisChartsConfigGuidePopoverCss;

const ArcgisChartsConfigGuidePopover = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigGuidePopover extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigGuidePopoverColorChange = createEvent(this, "arcgisChartsConfigGuidePopoverColorChange", 7);
        this.arcgisChartsConfigGuidePopoverSymbolChange = createEvent(this, "arcgisChartsConfigGuidePopoverSymbolChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Private
         */
        this.guidePopoverClose = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.updateColorProperties = (e) => {
            const color = e.detail;
            if (color !== undefined) {
                color[3] = guideOpacity;
            }
            this.selectedElement = color;
            this.arcgisChartsConfigGuidePopoverColorChange.emit(this.selectedElement);
        };
        /**
         * @category Event handler
         */
        this.updateSymbolProperties = (e) => {
            const { lineStyle } = e.target;
            if (lineStyle?.color !== undefined) {
                lineStyle.color[3] = guideOpacity;
            }
            this.selectedElement = lineStyle;
            this.arcgisChartsConfigGuidePopoverSymbolChange.emit(e.detail);
        };
        this.selectedElement = undefined;
        this.referenceElement = undefined;
        this.placement = "leading";
        this.open = undefined;
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const colorElement = this.selectedElement;
        const symbolElement = this.selectedElement;
        return (h(Host, { key: '19c486cfcd1a91888b0b4397e1ac20aac9c18574', class: HTMLClasses.jsAppFlyout }, h("calcite-popover", { key: 'd027ad51e11a4d86730aa2ef01d8a87e6abfc497', referenceElement: this.referenceElement, placement: this.placement, ref: (e) => {
                this.popoverElement = e;
            }, open: this.open, offsetDistance: 20, offsetSkidding: 60, label: "", pointerDisabled: true, onCalcitePopoverClose: this.guidePopoverClose }, Array.isArray(colorElement) && (h("arcgis-charts-config-color-style", { key: 'a337551fd346cd62b7641be1eb20cd1aebe65228', header: this.strings.fillStyle, enableClose: true, open: this.open, selectedColor: colorElement, onArcgisChartsConfigColorStyleClose: this.guidePopoverClose, onArcgisChartsConfigColorStyleChange: this.updateColorProperties })), symbolElement?.type === RESTSymbolType.SLS && (h("arcgis-charts-config-line-style", { key: '7023011a68a8d186f904613a1c0cfcbf8fa8edd7', header: this.strings.lineStyle, open: this.open, enableClose: true, lineStyle: symbolElement, onArcgisChartsConfigLineStyleClose: this.guidePopoverClose, onArcgisChartsConfigLineStyleChange: this.updateSymbolProperties })))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get style() { return ArcgisChartsConfigGuidePopoverStyle0; }
}, [1, "arcgis-charts-config-guide-popover", {
        "selectedElement": [16],
        "referenceElement": [16],
        "placement": [513],
        "open": [1540],
        "reposition": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-guide-popover", "arcgis-charts-config-color-style", "arcgis-charts-config-colors", "arcgis-charts-config-line-style"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-guide-popover":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigGuidePopover);
            }
            break;
        case "arcgis-charts-config-color-style":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-colors":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-line-style":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigGuidePopover as A, defineCustomElement as d };
