/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host, getAssetPath } from '@stencil/core/internal/client';
import { V as Vy, U as Uy, z as zy, G as Gy, M as Mn } from './index2.js';
import { S as Slot } from './interfaces.js';
import { d as destroyTooltip, c as createTooltip, g as getDefaultChartActions } from './action-bar-utils.js';
import { f as fetchCommonStrings } from './t9n-strings.js';

const HTMLClasses = {
    actionBar: "action-bar",
};

function isChartElement(element) {
    return element?.tagName.toLowerCase() === "arcgis-chart";
}

const chartsActionBarCss = ".action-bar{display:flex;flex-direction:column;height:100%;border-right:1px solid var(--calcite-color-border-2);overflow-x:hidden}";
const ArcgisChartsActionBarStyle0 = chartsActionBarCss;

const ArcGISChartsActionBar = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsActionBar extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisDefaultActionSelect = createEvent(this, "arcgisDefaultActionSelect", 7);
        this.arcgisActionBarToggle = createEvent(this, "arcgisActionBarToggle", 7);
        /**
         * Element reference for expand action in calciteActionBar
         * @type {HTMLCalciteActionElement | null}
         * @category Private
         * @default null
         */
        this.expandAction = null;
        /**
         * Handler for default action click event
         * @category Event handler
         * @param {MouseEvent} e Event payload from click
         */
        this.onDefaultActionClick = (e) => {
            const action = e.target;
            const payload = {
                actionId: action.id,
                actionActive: false,
            };
            switch (action.id) {
                case Vy.EditChart:
                    // Edit chart toggle active state
                    this.editChartToggle =
                        this.editChartToggle === Uy.Active ? Uy.Inactive : Uy.Active;
                    payload.actionActive = this.editChartToggle === Uy.Active;
                    break;
                case Vy.Legend:
                    // Legend toggle active state
                    this.legendToggle = this.legendToggle === Uy.Active ? Uy.Inactive : Uy.Active;
                    payload.actionActive = this.legendToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.legendVisibility = payload.actionActive;
                    }
                    break;
                case Vy.RotateChart:
                    // Rotate Chart toggle active state
                    this.rotateChartToggle =
                        this.rotateChartToggle === Uy.Active ? Uy.Inactive : Uy.Active;
                    payload.actionActive = this.rotateChartToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.rotation = payload.actionActive;
                    }
                    break;
                case Vy.FilterBySelection:
                    // Filter by Selection toggle active state
                    this.filterBySelectionToggle =
                        this.filterBySelectionToggle === Uy.Active ? Uy.Inactive : Uy.Active;
                    payload.actionActive = this.filterBySelectionToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.filterBySelection = payload.actionActive;
                    }
                    break;
                case Vy.FilterByExtent:
                    // Filter by Extent toggle active state
                    this.filterByExtentToggle =
                        this.filterByExtentToggle === Uy.Active ? Uy.Inactive : Uy.Active;
                    payload.actionActive = this.filterByExtentToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.filterByExtent = payload.actionActive;
                    }
                    break;
                case Vy.Selection:
                    // Activate Selection action and deactivate Zoom action
                    this.selectionToggle = Uy.Active;
                    this.zoomToggle = Uy.Inactive;
                    payload.actionActive = this.selectionToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.actionMode = this.actionBarSelectionMode;
                    }
                    break;
                case Vy.Zoom:
                    // Activate Zoom action and deactivate Selection action
                    this.zoomToggle = Uy.Active;
                    this.selectionToggle = Uy.Inactive;
                    payload.actionActive = this.zoomToggle === Uy.Active;
                    if (this.chartElement !== undefined) {
                        this.chartElement.actionMode = zy.Zoom;
                    }
                    break;
                case Vy.ClearSelection:
                    payload.actionActive = this.clearSelectionToggle === Uy.Active;
                    this.chartElement?.clearSelection();
                    break;
                case Vy.FullExtent:
                    payload.actionActive = this.fullExtentToggle === Uy.Active;
                    this.chartElement?.resetZoom();
                    break;
                case Vy.SwitchSelection:
                    payload.actionActive = this.switchSelectionToggle === Uy.Active;
                    this.chartElement?.switchSelection();
                    break;
            }
            this.arcgisDefaultActionSelect.emit(payload);
        };
        /**
         * Handler for calciteActionBarToggle event
         * @category Event handler
         */
        this.handleCalciteActionBarToggle = () => {
            this.expanded = this.calciteActionBar.expanded;
            this.setCustomActionsExpanded();
            this.arcgisActionBarToggle.emit(this.expanded);
        };
        /**
         * Handler for mouseOver event that creates a tooltip for the hovered action
         * @category Event handler
         * @param {MouseEvent} e Event payload from mouse over
         */
        this.handleMouseOver = (e) => {
            // Only show tooltip if action bar in not expanded
            if (!this.calciteActionBar.expanded) {
                const element = e.target;
                if (this.actionTooltip !== undefined) {
                    this.actionTooltip = destroyTooltip(this.actionTooltip);
                }
                // Find action from target element or its child
                let action;
                if (element?.tagName === "CALCITE-ACTION") {
                    action = element;
                }
                else if (element?.tagName === "DIV") {
                    action = element.firstChild;
                }
                if (action !== undefined) {
                    this.actionTooltip = createTooltip(action.text, action);
                    this.actionTooltip.open = true;
                }
            }
            else {
                this.actionTooltip = destroyTooltip(this.actionTooltip);
            }
        };
        /**
         * Handler for mouseOut event that destroys current action tooltip
         * @category Event handler
         */
        this.handleMouseOut = () => {
            if (this.actionTooltip !== null) {
                this.actionTooltip = destroyTooltip(this.actionTooltip);
            }
        };
        /**
         * Handler for `slotchange` event to set custom action event handlers dynamically
         * @category Event handler
         * @param {Event} e Event payload from slot change
         */
        this.handleSlotChange = (e) => {
            const slot = e.target;
            const customActions = slot.assignedElements();
            for (const action of customActions) {
                action.onmouseover = this.handleMouseOver;
            }
        };
        this.chartType = undefined;
        this.chartElement = undefined;
        this.forceDisableActions = false;
        this.editChartToggle = Uy.Inactive;
        this.editChartState = Gy.Disabled;
        this.editChartTitle = undefined;
        this.legendToggle = Uy.Inactive;
        this.legendState = Gy.Enabled;
        this.legendTitle = undefined;
        this.rotateChartToggle = Uy.Inactive;
        this.rotateChartState = Gy.Enabled;
        this.rotateChartTitle = undefined;
        this.filterBySelectionToggle = Uy.Inactive;
        this.filterBySelectionState = Gy.Enabled;
        this.filterBySelectionTitle = undefined;
        this.filterByExtentToggle = Uy.Inactive;
        this.filterByExtentState = Gy.Enabled;
        this.filterByExtentTitle = undefined;
        this.actionBarSelectionMode = zy.MultiSelectionWithCtrlKey;
        this.selectionToggle = Uy.Inactive;
        this.selectionState = Gy.Enabled;
        this.selectionTitle = undefined;
        this.zoomToggle = Uy.Inactive;
        this.zoomState = Gy.Enabled;
        this.zoomTitle = undefined;
        this.fullExtentToggle = Uy.Inactive;
        this.fullExtentState = Gy.Enabled;
        this.fullExtentTitle = undefined;
        this.clearSelectionToggle = Uy.Inactive;
        this.clearSelectionState = Gy.Enabled;
        this.clearSelectionTitle = undefined;
        this.switchSelectionToggle = Uy.Inactive;
        this.switchSelectionState = Gy.Enabled;
        this.switchSelectionTitle = undefined;
        this.expanded = false;
        this.hiddenActions = [Vy.EditChart];
        this.actionTooltip = null;
    }
    /**
     * Renders default actions
     * @category Private
     */
    // eslint-disable-next-line complexity
    renderDefaultActions() {
        const shownChartActions = getDefaultChartActions(this.chartType).filter((action) => !this.hiddenActions?.includes(action));
        const editChart = shownChartActions.includes(Vy.EditChart);
        const legend = shownChartActions.includes(Vy.Legend);
        const rotateChart = shownChartActions.includes(Vy.RotateChart);
        const filterBySelection = shownChartActions.includes(Vy.FilterBySelection);
        const filterByExtent = shownChartActions.includes(Vy.FilterByExtent) && !this.chartElement?.layer?.isTable;
        const zoom = shownChartActions.includes(Vy.Zoom);
        const selection = shownChartActions.includes(Vy.Selection);
        const clearSelection = shownChartActions.includes(Vy.ClearSelection);
        const fullExtent = shownChartActions.includes(Vy.FullExtent);
        const switchSelection = shownChartActions.includes(Vy.SwitchSelection);
        return [
            legend || rotateChart ? (h("calcite-action-group", null, editChart ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.EditChart, icon: "gear", text: this.commonStrings?.actions.editChart, active: this.editChartToggle === Uy.Active, disabled: this.editChartState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, legend ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.Legend, text: this.legendTitle ?? this.strings?.legend, active: this.legendToggle === Uy.Active, disabled: this.legendState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }, h("calcite-icon", { icon: "legend", scale: "s", flipRtl: true })))) : null, rotateChart ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.RotateChart, icon: "rotate", text: this.rotateChartTitle ?? this.strings?.rotateChart, active: this.rotateChartToggle === Uy.Active, disabled: this.rotateChartState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null)) : null,
            filterBySelection || filterByExtent ? (h("calcite-action-group", null, filterBySelection ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.FilterBySelection, icon: "selection-filter", text: this.filterBySelectionTitle ?? this.strings?.filterBySelection, active: this.filterBySelectionToggle === Uy.Active, disabled: this.filterBySelectionState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, filterByExtent ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.FilterByExtent, icon: "extent-filter", text: this.filterByExtentTitle ?? this.strings?.filterByExtent, active: this.filterByExtentToggle === Uy.Active, disabled: this.filterByExtentState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null)) : null,
            selection || zoom || fullExtent || clearSelection || switchSelection ? (h("calcite-action-group", null, zoom ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.Zoom, icon: "magnifying-glass", text: this.zoomTitle ?? this.strings?.zoom, active: this.zoomToggle === Uy.Active, disabled: this.zoomState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, selection ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.Selection, icon: "cursor-selection", text: this.selectionTitle ?? this.strings?.selection, active: this.selectionToggle === Uy.Active, disabled: this.selectionState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, clearSelection ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.ClearSelection, icon: "erase", text: this.clearSelectionTitle ?? this.strings?.clearSelection, active: this.clearSelectionToggle === Uy.Active, disabled: this.clearSelectionState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, fullExtent ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.FullExtent, icon: "zoom-out-fixed", text: this.fullExtentTitle ?? this.strings?.fullExtent, active: this.fullExtentToggle === Uy.Active, disabled: this.fullExtentState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null, switchSelection ? (h("div", { onMouseOver: this.handleMouseOver }, h("calcite-action", { id: Vy.SwitchSelection, icon: "arrow-right-left", text: this.switchSelectionTitle ?? this.strings?.switchSelection, active: this.switchSelectionToggle === Uy.Active, disabled: this.switchSelectionState === Gy.Disabled || this.forceDisableActions, onClick: this.onDefaultActionClick }))) : null)) : null,
        ];
    }
    /**
     * Sets whether text is expanded on all custom actions
     * @category Private
     */
    setCustomActionsExpanded() {
        this.el.querySelectorAll("calcite-action").forEach((action) => {
            const calciteAction = action;
            calciteAction.textEnabled = this.expanded;
        });
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: '7866dc987a9a9c0418078e3768b7dcf73ec3ad30' }, h("calcite-action-bar", { key: '178e184337330b8b55f4bd2c9db4e44c2f451f4b', class: HTMLClasses.actionBar, onCalciteActionBarToggle: this.handleCalciteActionBarToggle, onMouseOut: this.handleMouseOut, expanded: this.expanded, ref: (ref) => {
                this.calciteActionBar = ref;
            }, messageOverrides: { expand: this.strings.expand, collapse: this.strings.collapse }, "overflow-actions-disabled": true }, h("slot", { key: 'a4bcab94d4c7065083a9007749d163eb93920bac', name: Slot.customActionTop, onSlotchange: this.handleSlotChange }), this.renderDefaultActions(), h("slot", { key: '18170b43997487ca9e6c295b2556be1e442afd4f', name: Slot.customActionBelow, onSlotchange: this.handleSlotChange }))));
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        this.commonStrings = await fetchCommonStrings(this.el);
        ({ strings: this.strings } = await Mn(this.el, getAssetPath(`.`), true));
        // Set chart element reference to its associated chart component.
        this.chartElement = isChartElement(this.el.parentElement) ? this.el.parentElement : undefined;
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        this.handleExpandTooltip();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.actionTooltip?.remove();
    }
    /**
     * handle creation and deletion of the expand tooltip
     * @category Private
     */
    handleExpandTooltip() {
        if (this.expandAction === null) {
            this.expandAction = this.calciteActionBar.shadowRoot?.querySelector("calcite-action") ?? null;
            if (this.expandAction !== null) {
                this.expandAction.addEventListener("mouseenter", () => {
                    // add expand tooltip only iff
                    // a. calcite action bar is collapsed (not expanded)
                    // b. document body have calcite tooltip as its last child
                    //
                    if (!this.calciteActionBar?.expanded &&
                        this.expandAction !== null &&
                        !document.body.contains(this.actionTooltip)) {
                        this.actionTooltip = createTooltip(this.strings.expand, this.expandAction);
                        this.actionTooltip.open = true;
                    }
                });
                this.expandAction.addEventListener("mouseleave", () => {
                    if (!this.calciteActionBar?.expanded && this.actionTooltip !== null) {
                        this.actionTooltip = destroyTooltip(this.actionTooltip);
                    }
                });
                this.expandAction.addEventListener("click", () => {
                    // destroy tooltip when the user clicks on expand action
                    if (this.calciteActionBar?.expanded && this.actionTooltip !== null) {
                        this.actionTooltip = destroyTooltip(this.actionTooltip);
                    }
                });
            }
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
    static get style() { return ArcgisChartsActionBarStyle0; }
}, [1, "arcgis-charts-action-bar", {
        "chartType": [513, "chart-type"],
        "chartElement": [1040],
        "forceDisableActions": [516, "force-disable-actions"],
        "editChartToggle": [513, "edit-chart-toggle"],
        "editChartState": [513, "edit-chart-state"],
        "editChartTitle": [513, "edit-chart-title"],
        "legendToggle": [1537, "legend-toggle"],
        "legendState": [513, "legend-state"],
        "legendTitle": [513, "legend-title"],
        "rotateChartToggle": [1537, "rotate-chart-toggle"],
        "rotateChartState": [513, "rotate-chart-state"],
        "rotateChartTitle": [513, "rotate-chart-title"],
        "filterBySelectionToggle": [1537, "filter-by-selection-toggle"],
        "filterBySelectionState": [1537, "filter-by-selection-state"],
        "filterBySelectionTitle": [513, "filter-by-selection-title"],
        "filterByExtentToggle": [1537, "filter-by-extent-toggle"],
        "filterByExtentState": [513, "filter-by-extent-state"],
        "filterByExtentTitle": [513, "filter-by-extent-title"],
        "actionBarSelectionMode": [513, "action-bar-selection-mode"],
        "selectionToggle": [1537, "selection-toggle"],
        "selectionState": [513, "selection-state"],
        "selectionTitle": [513, "selection-title"],
        "zoomToggle": [1537, "zoom-toggle"],
        "zoomState": [513, "zoom-state"],
        "zoomTitle": [513, "zoom-title"],
        "fullExtentToggle": [513, "full-extent-toggle"],
        "fullExtentState": [513, "full-extent-state"],
        "fullExtentTitle": [513, "full-extent-title"],
        "clearSelectionToggle": [513, "clear-selection-toggle"],
        "clearSelectionState": [1537, "clear-selection-state"],
        "clearSelectionTitle": [513, "clear-selection-title"],
        "switchSelectionToggle": [513, "switch-selection-toggle"],
        "switchSelectionState": [513, "switch-selection-state"],
        "switchSelectionTitle": [513, "switch-selection-title"],
        "expanded": [1540],
        "hiddenActions": [16],
        "actionTooltip": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-action-bar"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-action-bar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsActionBar);
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsActionBar as A, defineCustomElement as d };
