/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, y as eu, E as Hn } from './index2.js';
import { f as isCalciteInputValidNumber, m as modifyCalciteInputStatus, U as UIDefaults, s as sanitizeNumber, b as UIInputStatus } from './chart-ui-utils.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-colors2.js';
import { d as RESTSimpleLineSymbolStyle } from './interfaces.js';

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
    sizeSection: "size-section",
    dropdownText: "dropdown-text",
    panelChildrenContainer: "panel-children-container",
};

const arcgisChartsConfigLineChartSeriesPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host calcite-panel .size-section{padding:0 1rem 1rem 1rem;display:flex}:host calcite-panel .size-section calcite-label{flex:1 1 0px;width:0;padding:0}:host calcite-panel .size-section calcite-label .dropdown-text{max-width:75px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}.panel-children-container{display:flex;padding:0 1rem;margin-top:1rem}.panel-children-container calcite-label{flex:1 1 0px;display:flex;width:0px}";
const ArcgisChartsConfigLineChartSeriesPopoverStyle0 = arcgisChartsConfigLineChartSeriesPopoverCss;

const ArcgisChartsConfigLineChartSeriesPopover = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigLineChartSeriesPopover extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigSeriesPopoverNameChange = createEvent(this, "arcgisChartsConfigSeriesPopoverNameChange", 7);
        this.arcgisChartsConfigSeriesPopoverColorChange = createEvent(this, "arcgisChartsConfigSeriesPopoverColorChange", 7);
        this.arcgisChartsConfigSeriesPopoverLineStyleChange = createEvent(this, "arcgisChartsConfigSeriesPopoverLineStyleChange", 7);
        this.arcgisChartsConfigSeriesPopoverLineWidthChange = createEvent(this, "arcgisChartsConfigSeriesPopoverLineWidthChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            const name = event.target.value;
            if (this.selectedName !== name) {
                this.selectedName = name;
                this.arcgisChartsConfigSeriesPopoverNameChange.emit({ name });
            }
        };
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.colorChange = (e) => {
            const color = e instanceof CustomEvent ? e.detail : e;
            const [r, g, b] = color;
            const a = Hn * 255;
            this.selectedColor = [r, g, b, a];
            this.arcgisChartsConfigSeriesPopoverColorChange.emit({ color: [r, g, b, a] });
        };
        /**
         * @category Event handler
         */
        this.lineStyleChange = () => {
            const lineStyle = this.lineStyleDropdownElement.selectedItems[0].accessKey;
            this.selectedLineStyle = lineStyle;
            this.arcgisChartsConfigSeriesPopoverLineStyleChange.emit({ lineStyle });
        };
        /**
         * @category Event handler
         */
        this.lineWidthChange = () => {
            const lineWidth = Number.parseInt(this.lineWidthInputElement.value ?? "");
            if (this.lineWidthInputElement.value !== undefined &&
                isCalciteInputValidNumber(lineWidth, this.lineWidthInputElement.min, this.lineWidthInputElement.max)) {
                this.selectedLineWidth = lineWidth;
                this.arcgisChartsConfigSeriesPopoverLineWidthChange.emit({ lineWidth });
                modifyCalciteInputStatus({
                    inputElement: this.lineWidthInputElement,
                    status: UIInputStatus.IDLE,
                });
            }
            else {
                modifyCalciteInputStatus({
                    inputElement: this.lineWidthInputElement,
                    status: UIInputStatus.INVALID,
                });
            }
        };
        /**
         * @category Private
         */
        this.getSelectedLineStyleInfo = () => {
            let icon;
            let style;
            switch (this.selectedLineStyle) {
                case RESTSimpleLineSymbolStyle.Dot:
                    icon = "line-dotted";
                    style = this.strings.dot;
                    break;
                case RESTSimpleLineSymbolStyle.Dash:
                    icon = "line-dashed";
                    style = this.strings.dash;
                    break;
                case RESTSimpleLineSymbolStyle.Solid:
                default:
                    icon = "line-solid";
                    style = this.strings.solid;
                    break;
            }
            return { icon, style };
        };
        this.referenceElement = undefined;
        this.selectedName = undefined;
        this.selectedColor = undefined;
        this.selectedLineStyle = undefined;
        this.selectedLineWidth = undefined;
        this.placement = undefined;
        this.open = true;
    }
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange() {
        this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.openChange();
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, UIDefaults.PopoverTimer);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const rgba = this.selectedColor;
        return (h(Host, { key: '587fe2dd26130aef94407d70b13db71a5e2a2ced', class: HTMLClasses.jsAppFlyout }, h("calcite-popover", { key: '9f17845eb8d071afe0c4c8fe07d7ea1a0a406e24', referenceElement: this.referenceElement, placement: this.placement, onCalcitePopoverClose: this.closePopover, open: this.open, ref: (e) => {
                this.popoverElement = e;
            }, label: "" }, h("calcite-panel", { key: '0d7a8d4ec17fd60fa09dc0dfbf372e6e3cc8491f', heading: this.strings.seriesElement, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, h("div", { key: 'b2d30255c6fc1ff9a15ee9f8bf8e06bbc2f40306', class: HTMLClasses.panelChildrenContainer }, h("calcite-label", { key: '2d895f56b0041e08ad0e4f55b46d5e33fd7aa11b' }, this.strings.label, h("calcite-input", { key: 'dde6de34af42f3c71d89c28e6f6eaa2ab4f17334', type: "text", value: this.selectedName, onCalciteInputInput: this.seriesNameChange }))), h("div", { key: '6b1c1d09585b2d4dd2e2c3188bad774c93a69e78', class: HTMLClasses.sizeSection }, h("calcite-label", { key: '5e7c3e2952f958475a0f86ffcb0613d158d2ddd3' }, this.strings.style, h("calcite-dropdown", { key: 'bad815be3b78fb4041fa3836e6ef55ed66830b7e', onCalciteDropdownSelect: this.lineStyleChange, ref: (e) => {
                this.lineStyleDropdownElement = e;
            } }, h("calcite-button", { key: '21d3dec2f30ea4dbd5f566e5ae490e6a6bf5c79f', iconEnd: this.getSelectedLineStyleInfo().icon, slot: "trigger", kind: "neutral", appearance: "outline-fill" }, h("label", { key: '588837c87aa7e68ed15362162c24c5783c8b5ee2', class: HTMLClasses.dropdownText }, this.getSelectedLineStyleInfo().style)), h("calcite-dropdown-group", { key: 'b53a9a71f27cf4948e63430e4635eadab736ec50' }, h("calcite-dropdown-item", { key: '57b51ebebe50b28da5ec184b0ed9c68135119217', iconEnd: "line-solid", selected: this.selectedLineStyle === RESTSimpleLineSymbolStyle.Solid, accessKey: RESTSimpleLineSymbolStyle.Solid }, this.strings.solid), h("calcite-dropdown-item", { key: 'a4e88609e9ac6758cfd44c7ab25de1ff095be7ee', iconEnd: "line-dotted", selected: this.selectedLineStyle === RESTSimpleLineSymbolStyle.Dot, accessKey: RESTSimpleLineSymbolStyle.Dot }, this.strings.dot), h("calcite-dropdown-item", { key: 'ca72e3e3605e292ff580683c311b5f763e7fc1a1', iconEnd: "line-dashed", selected: this.selectedLineStyle === RESTSimpleLineSymbolStyle.Dash, accessKey: RESTSimpleLineSymbolStyle.Dash }, this.strings.dash)))), h("calcite-label", { key: '96387b143014f68cee3450ae09548cdd59b85a5b' }, this.strings.width, h("calcite-input", { key: '42792b09b36279f3c400af25225ae962d8e168dc', type: "number", min: 1, step: "any", value: sanitizeNumber(this.selectedLineWidth), onCalciteInputInput: this.lineWidthChange, ref: (e) => {
                this.lineWidthInputElement = e;
            } }))), h("div", { key: '91a38d29958b95bf621ec76bca1ab703a70e3c1b', class: HTMLClasses.panelChildrenContainer }, h("arcgis-charts-config-colors", { key: 'f2fe04e1b290eb84162f1dba5e03814d8f5ff137', heading: this.strings.lineColor, rgba: rgba, onColorSelect: this.colorChange }))))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "open": ["openChange"]
    }; }
    static get style() { return ArcgisChartsConfigLineChartSeriesPopoverStyle0; }
}, [1, "arcgis-charts-config-line-chart-series-popover", {
        "referenceElement": [16],
        "selectedName": [1537, "selected-name"],
        "selectedColor": [1040],
        "selectedLineStyle": [513, "selected-line-style"],
        "selectedLineWidth": [514, "selected-line-width"],
        "placement": [513],
        "open": [1540],
        "reposition": [64]
    }, undefined, {
        "open": ["openChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-line-chart-series-popover", "arcgis-charts-config-colors"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-line-chart-series-popover":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigLineChartSeriesPopover);
            }
            break;
        case "arcgis-charts-config-colors":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigLineChartSeriesPopover as A, defineCustomElement as d };
