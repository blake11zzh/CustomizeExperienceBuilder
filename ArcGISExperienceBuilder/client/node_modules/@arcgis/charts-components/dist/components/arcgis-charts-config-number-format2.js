/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn } from './index2.js';
import { f as isCalciteInputValidNumber, m as modifyCalciteInputStatus, s as sanitizeNumber, b as UIInputStatus } from './chart-ui-utils.js';

const HTMLClasses = {
    container: "container",
    label: "label",
    numberInput: "number-input",
    rtl: "arcgis-charts-rtl",
};

const arcgisChartsConfigNumberFormatCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.container{width:var(--arcgis-charts-config-calcite-block-width, var(--arcgis-charts-config-calcite-block-default-width));height:var(--arcgis-charts-config-calcite-block-height, var(--arcgis-charts-config-calcite-block-default-height));margin-top:0.5rem}.container>.number-input{margin-bottom:0.5rem;display:flex}.container>.number-input>div{width:100%}:host{display:flex;flex-direction:row}.label{display:flex;margin-bottom:0.5rem;justify-content:space-between}";
const ArcgisChartsConfigNumberFormatStyle0 = arcgisChartsConfigNumberFormatCss;

const ArcgisChartsConfigNumberFormat = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigNumberFormat extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigNumberFormatChange = createEvent(this, "arcgisChartsConfigNumberFormatChange", 7);
        /**
         * @category Event handler
         */
        this.onDecimalPlacesChange = () => {
            const { value } = this.decimalPlacesInputElement;
            const numericValue = Math.floor(Number(value));
            // check if the character limit value is a valid positive integer
            const isValidCharacterLimit = numericValue === Number(value) && numericValue >= 0;
            if (value !== undefined &&
                isValidCharacterLimit &&
                isCalciteInputValidNumber(value, this.decimalPlacesInputElement.min, this.decimalPlacesInputElement.max)) {
                const maximumFractionDigits = Number.parseInt(value);
                const newNumberFormat = {
                    minimumFractionDigits: this.numberFormat.minimumFractionDigits,
                    maximumFractionDigits,
                };
                if (newNumberFormat.maximumFractionDigits !== undefined &&
                    newNumberFormat.minimumFractionDigits !== undefined &&
                    newNumberFormat.minimumFractionDigits > newNumberFormat.maximumFractionDigits) {
                    newNumberFormat.minimumFractionDigits = newNumberFormat.maximumFractionDigits;
                }
                const updatedNumberFormat = this.getUpdatedNumberFormat(newNumberFormat);
                this.arcgisChartsConfigNumberFormatChange.emit(updatedNumberFormat);
                modifyCalciteInputStatus({
                    inputElement: this.decimalPlacesInputElement,
                    status: UIInputStatus.IDLE,
                });
            }
            else {
                modifyCalciteInputStatus({
                    inputElement: this.decimalPlacesInputElement,
                    status: UIInputStatus.INVALID,
                });
            }
        };
        /**
         * @category Event handler
         */
        this.onShowThousandsSeparatorChange = (e) => {
            const useGrouping = e.target.checked;
            const updatedNumberFormat = this.getUpdatedNumberFormat({
                useGrouping,
            });
            this.arcgisChartsConfigNumberFormatChange.emit(updatedNumberFormat);
        };
        this.numberFormat = undefined;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await Mn(this.hostElement, getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: '01a68dc41515f1ab1ef989c9609c6107950f5c61', class: { [HTMLClasses.rtl]: this.direction === "rtl" } }, h("div", { key: '5529f7f0fcaba32ac905a810289acdc6f1978952', class: HTMLClasses.container }, h("calcite-label", { key: '3b0e8772506ca611fede807fcb532f50e45e6a38', class: HTMLClasses.label }, this.strings.decimalPlaces, h("calcite-input", { key: 'ed1c257a0f7b1e68ae5b685b1e6df01da0b3344a', type: "number", class: HTMLClasses.numberInput, min: 0, max: 20, step: 1, value: sanitizeNumber(this.numberFormat.maximumFractionDigits, 2), onCalciteInputInput: this.onDecimalPlacesChange, ref: (e) => {
                this.decimalPlacesInputElement = e;
            } })), h("calcite-label", { key: 'b1a20806ba33b7d49cca3041baa74013c1165677', layout: "inline-space-between", class: HTMLClasses.label }, this.strings.showThousandSeparators, h("calcite-switch", { key: '431583cb00f7e409f75844ea2d2202bd2d1e1cbc', name: "useGrouping", checked: this.numberFormat.useGrouping ?? true, onCalciteSwitchChange: this.onShowThousandsSeparatorChange })))));
    }
    /**
     * @param prop
     * @category Private
     */
    getUpdatedNumberFormat(prop) {
        return {
            ...this.numberFormat,
            ...prop,
        };
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get style() { return ArcgisChartsConfigNumberFormatStyle0; }
}, [1, "arcgis-charts-config-number-format", {
        "numberFormat": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-number-format"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-number-format":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigNumberFormat);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigNumberFormat as A, defineCustomElement as d };
