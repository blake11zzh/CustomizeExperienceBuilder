/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, a0 as wc, A as Tl, Z as Zy, r as Qy, a2 as Jy } from './index2.js';
import { t as th } from './index3.js';
import { P as PieChartDataPopoverKinds, R as RESTStatisticType } from './interfaces.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-field-select2.js';
import { a as defaultPieFromFieldsName } from './config-defaults.js';

const HTMLClasses = {
    label: "label",
    text: "text",
    fieldList: "field-list",
    fab: "fab",
    disabledLabel: "disabled-label",
    rtl: "arcgis-charts-rtl",
};

const arcgisChartsConfigPieChartDataCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}:host(.arcgis-chart-rtl) .text{margin-left:0rem;margin-right:var(--arcgis-charts-config-margin-minor)}";
const ArcgisChartsConfigPieChartDataStyle0 = arcgisChartsConfigPieChartDataCss;

const ArcGISChartsConfigPieChartData = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigPieChartData extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigPieChartDataNumericFieldValidate = createEvent(this, "arcgisChartsConfigPieChartDataNumericFieldValidate", 7);
        this.arcgisChartsConfigDataChangeError = createEvent(this, "arcgisChartsConfigDataChangeError", 7);
        /**
         * @category Private
         */
        this.pieChartPopover = null;
        /**
         * @category Event handler
         *
         * called when the sort order is clicked
         */
        this.onSortOrderSelect = () => {
            this.contentKind = PieChartDataPopoverKinds.sortOrder;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the category is clicked
         */
        this.onCategorySelect = () => {
            this.contentKind = PieChartDataPopoverKinds.category;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the add numeric fields button is clicked
         */
        this.onAddNumericFields = () => {
            this.contentKind = PieChartDataPopoverKinds.numericFields;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * Called when individual numeric field item is removed.
         */
        this.onRemoveNumericField = async (removedItemEvent) => {
            const removedField = removedItemEvent.target.value;
            await this.model.setNumericFields(this.model.getNumericFields().filter((field) => field !== removedField));
        };
        /**
         * @category Event handler
         *
         * called in response to the arcgisChartsConfigPieChartDataPopoverChange event
         */
        this.onPieChartDataChange = async (e) => {
            try {
                if (e.detail !== null && e.detail?.value !== undefined) {
                    const { contentKind } = e.detail;
                    const newValue = [...e.detail.value];
                    switch (contentKind) {
                        case PieChartDataPopoverKinds.aggregation:
                            await this.model.setAggregationType(newValue[0] !== RESTStatisticType.NoAggregation ? newValue[0] : "");
                            break;
                        case PieChartDataPopoverKinds.category: {
                            const newCategory = newValue[0]?.trim() || "";
                            this.updateMode(newCategory);
                            // if we have more than one numeric field, we need to trim it down to just the first one since category with multiple numeric fields is not supported
                            const numericFields = this.model.getNumericFields();
                            if (numericFields.length > 1 && newCategory !== defaultPieFromFieldsName) {
                                await this.model.setNumericFields([numericFields[0]]);
                            }
                            await this.model.setCategory(newCategory);
                            this.model.setColorMatch(true);
                            break;
                        }
                        case PieChartDataPopoverKinds.numericFields:
                            // if we have more than one numeric field, we need to clear the category since category with multiple numeric fields is not supported
                            if (newValue.length > 1) {
                                this.updateMode(defaultPieFromFieldsName);
                                await this.model.setCategory(defaultPieFromFieldsName);
                            }
                            await this.model.setNumericFields(newValue);
                            break;
                        case PieChartDataPopoverKinds.sortOrder:
                            this.model.setSortOrder(newValue[0]);
                            break;
                    }
                }
            }
            catch (error) {
                this.arcgisChartsConfigDataChangeError.emit({ error, model: this.model });
                throw error;
            }
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * @category Event handler
         */
        this.onShowDataLabelsChange = (e) => {
            this.model.setDataLabelsVisibility(e.target.checked);
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * @category Private
         */
        this.popoverClose = (e) => {
            if (this.pieChartPopover === e?.target) {
                this.removePieChartDataPopover();
            }
        };
        this.model = undefined;
        this.layerFieldsInfo = undefined;
        this.open = true;
        this.updatesOccurred = 0;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removePieChartDataPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Render UX
     */
    renderSorting() {
        return (h("arcgis-charts-config-field-select", { label: this.strings[this.model.getSortOrder()], ref: (e) => {
                this.sortOrderElement = e;
            }, onClick: this.onSortOrderSelect }));
    }
    /**
     * @category Render UX
     */
    renderCategory() {
        const categoryString = this.getCorrectedCategoryValue();
        return (h("arcgis-charts-config-field-select", { label: categoryString, ref: (e) => {
                this.categoryElement = e;
            }, onClick: this.onCategorySelect }));
    }
    /**
     * @category Render UX
     */
    renderNumericFields(fields) {
        const objectIdField = wc(this.layerFieldsInfo);
        const fieldList = [];
        for (let i = 0; i < fields.length; i += 1) {
            if (fields[i] !== objectIdField) {
                fieldList.push(this.buildNumericFieldItem(fields[i]));
            }
        }
        return (h("calcite-list", { label: "", class: HTMLClasses.fieldList, ref: (e) => {
                this.numericFieldsElement = e;
            } }, fieldList));
    }
    /**
     * @category Render UX
     * @param field
     */
    buildNumericFieldItem(field) {
        return (h("calcite-list-item", { label: Tl(this.layerFieldsInfo, field), value: field, key: field, closable: true, onCalciteListItemClose: this.onRemoveNumericField }));
    }
    /**
     * @category Lifecycle
     */
    render() {
        const categoryUI = this.renderCategory();
        const sortingUI = this.renderSorting();
        const numericFieldsUI = this.renderNumericFields([...this.model.getNumericFields()]);
        return (h(Host, { key: '71c159378eacd2102b08dedb9f490be7a0d61a16', class: { [HTMLClasses.rtl]: this.direction === "rtl" } }, h("calcite-label", { key: 'a4257387596421399c45874db20d7b4113afe2f9', class: HTMLClasses.label }, this.strings.category, categoryUI), [
            h("calcite-label", { key: 'fe2ce6294d26d51237ca0e37b25e6260bd4f2b30', class: HTMLClasses.label }, this.strings.numericFields, numericFieldsUI),
            h("div", { key: '0ff966420080f20ec8234ba8667cd95839fffb9f', class: HTMLClasses.fab }, h("calcite-fab", { key: '3471ebb056b44ee0dece3f44dc68a095f6c347d0', appearance: "outline-fill", kind: "neutral", scale: "m", label: this.strings.selectNumericFields, "text-enabled": true, text: this.strings.selectNumericFields, icon: "plus", onClick: this.onAddNumericFields })),
        ], h("calcite-label", { key: 'e954a0fb8a21d2f5ba855524bbbab292113f6763', class: HTMLClasses.label, layout: "inline-space-between" }, this.strings.showDataLabels, h("calcite-switch", { key: '211743ae23fe12a013d4d05b111b262678f5fe61', checked: this.model.getDataLabelsVisibility(), onCalciteSwitchChange: this.onShowDataLabelsChange })), h("calcite-label", { key: 'e53374c316407695d6dd52883eec9f86c6d4cf5d', class: HTMLClasses.label }, this.strings.sortOrder, sortingUI)));
    }
    /**
     * @category Private
     */
    updateMode(category) {
        const categoryMode = category !== defaultPieFromFieldsName && category.trim() !== "";
        this.model.setMode(categoryMode ? th.Category : th.Fields);
    }
    /**
     * @category Private
     */
    setupPopover() {
        // remove already existing chart popover
        // TODO: this is a hotfix for https://devtopia.esri.com/webgis/arcgis-charts/issues/5366
        // have to find a better way to do this
        this.removePieChartDataPopover();
        // pieChartPopover config
        const popoverConfig = {
            layerFieldsInfo: [...this.layerFieldsInfo],
            onPieChartDataChange: this.onPieChartDataChange,
            popoverClose: this.popoverClose,
        };
        // create a new pieChartPopover
        this.pieChartPopover = Zy(Qy.PieChartDataPopover, popoverConfig);
        if (this.pieChartPopover !== null) {
            switch (this.contentKind) {
                case PieChartDataPopoverKinds.category:
                    this.pieChartPopover.referenceElement = this.categoryElement;
                    this.pieChartPopover.headingTitle = this.strings.categoryHeader;
                    this.pieChartPopover.selectedContent = this.model.getCategory();
                    break;
                case PieChartDataPopoverKinds.numericFields:
                    this.pieChartPopover.referenceElement = this.numericFieldsElement;
                    this.pieChartPopover.headingTitle = this.strings.numericFieldsMultipleHeader;
                    this.pieChartPopover.selectedContent = this.model.getNumericFields();
                    break;
                case PieChartDataPopoverKinds.sortOrder:
                    this.pieChartPopover.referenceElement = this.sortOrderElement;
                    this.pieChartPopover.headingTitle = this.strings.sortOrderHeader;
                    this.pieChartPopover.selectedContent = this.model.getSortOrder();
                    break;
            }
            this.pieChartPopover.contentKind = this.contentKind;
            this.pieChartPopover.open = true;
            this.addPopover();
        }
    }
    /**
     * @category Private
     */
    addPopover() {
        if (!document.body.contains(this.pieChartPopover) && this.pieChartPopover !== null) {
            document.body.appendChild(this.pieChartPopover);
        }
    }
    /**
     * Get the category value based on the current model's category field.
     *
     * **NOTE**: If the category field is the default value(`arcgis_charts_pie_from_fields_name`),
     * return an empty string.
     * @category Private
     * @returns {string} The category value.
     */
    getCorrectedCategoryValue() {
        return this.model.getCategory() === defaultPieFromFieldsName || this.model.getCategory().trim() === ""
            ? ""
            : Tl(this.layerFieldsInfo, this.model.getCategory());
    }
    /**
     * Remove pie chart data popover
     * @category Private
     */
    removePieChartDataPopover() {
        if (this.pieChartPopover !== null) {
            this.pieChartPopover.open = false;
            this.pieChartPopover = Jy(this.pieChartPopover);
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"]
    }; }
    static get style() { return ArcgisChartsConfigPieChartDataStyle0; }
}, [1, "arcgis-charts-config-pie-chart-data", {
        "model": [16],
        "layerFieldsInfo": [16],
        "open": [516],
        "updatesOccurred": [32]
    }, undefined, {
        "model": ["modelChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-pie-chart-data", "arcgis-charts-config-field-select"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-pie-chart-data":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigPieChartData);
            }
            break;
        case "arcgis-charts-config-field-select":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigPieChartData as A, defineCustomElement as d };
