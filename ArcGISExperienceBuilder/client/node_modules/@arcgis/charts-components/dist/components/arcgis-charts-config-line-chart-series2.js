/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { a2 as Jy, M as Mn, Z as Zy, r as Qy, m as ml } from './index2.js';
import { k as getLineStyleType } from './chart-ui-utils.js';

const arcgisChartsConfigLineChartSeriesCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}";
const ArcgisChartsConfigLineChartSeriesStyle0 = arcgisChartsConfigLineChartSeriesCss;

const ArcGISChartsConfigLineChartSeries = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigLineChartSeries extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigLineChartSeriesPopoverChange = createEvent(this, "arcgisChartsConfigLineChartSeriesPopoverChange", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.seriesPopover = null;
        /**
         * @category Private
         */
        this.resetSeriesOriginal = async () => {
            this.configSeriesOpen = false;
            this.selectedSeriesIndex = undefined;
            // reset series styling
            await this.model.resetSeriesStyling();
        };
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            if (event.detail !== null || event.detail !== undefined) {
                const name = event.detail?.name;
                this.model.setSeriesName(name, this.selectedSeriesIndex ?? -1);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesColorChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { color } = e.detail;
                // update line and marker color of the selected series
                this.model.setColorMatch(false);
                if (color !== undefined) {
                    this.model.setSeriesColor(color, this.selectedSeriesIndex ?? -1);
                    this.model.setSeriesMarkerColor(color, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineStyleChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { lineStyle } = e.detail;
                if (lineStyle !== undefined) {
                    this.model.setSeriesLineStyle(lineStyle, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineWidthChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { lineWidth } = e.detail;
                if (lineWidth !== undefined) {
                    this.model.setSeriesLineWidth(lineWidth, this.selectedSeriesIndex ?? -1);
                    this.model.setSeriesMarkerSize(lineWidth * 2, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                this.model.moveSeries(oldIndex, newIndex);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverClose = () => {
            this.selectedSeriesIndex = undefined;
            this.configSeriesOpen = false;
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverChange = (open) => {
            this.arcgisChartsConfigLineChartSeriesPopoverChange.emit({
                open,
                element: this.seriesPopover,
            });
        };
        /**
         * @category Event handler
         */
        this.openSeriesPopOver = (event) => {
            // The target can be either the list item or the icon
            const target = event.target;
            const listItem = target.localName === "calcite-list-item"
                ? target
                : target.parentNode;
            const negateConfigSeriesOpen = !this.configSeriesOpen;
            const seriesIndex = this.model.getSeriesIndex(listItem.value);
            this.configSeriesOpen = this.selectedSeriesIndex === seriesIndex ? negateConfigSeriesOpen : true;
            if (this.configSeriesOpen) {
                this.selectedSeriesIndex = seriesIndex;
            }
            else {
                this.selectedSeriesIndex = undefined;
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * Emit event on open popover.
         * @param e
         * @category Private
         */
        this.openChange = (e) => {
            this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
        };
        this.model = undefined;
        this.configSeriesOpen = false;
        this.activeColorMatch = false;
        this.popoverPlacement = "leading";
        this.selectedSeriesIndex = undefined;
        this.updatesOccurred = 0;
        this.isResetAvailable = false;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Watch handler
     */
    selectedSeriesIndexChange() {
        if (this.selectedSeriesIndex !== undefined && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                // sync back to seriesPopover
                this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex);
                this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex);
                this.seriesPopover.selectedLineStyle = this.model.getSeriesLineStyle(this.selectedSeriesIndex);
                this.seriesPopover.selectedLineWidth = this.model.getSeriesLineWidth(this.selectedSeriesIndex);
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Private
     */
    removeSeriesPopover() {
        if (this.seriesPopover !== undefined && this.seriesPopover !== null) {
            this.seriesPopover.open = false;
            this.seriesPopover = Jy(this.seriesPopover);
        }
        this.seriesPopoverChange(false);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeSeriesPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Render UX
     */
    buildSeriesListItems() {
        const seriesLength = this.model.getSeriesLength();
        const seriesListItems = [];
        for (let index = 0; index < seriesLength; index += 1) {
            const id = this.model.getSeriesId(index);
            const color = this.model.getSeriesColor(index);
            const name = this.model.getSeriesName(index);
            const chartSubType = this.model.getChartSubType();
            const description = chartSubType === ml.BarAndLineFromFields ? this.strings.series : id;
            const style = this.model.getSeriesLineStyle(index);
            const lineStyleType = getLineStyleType(style);
            // If `undefined` is provided for the series, we default the color icon to a grey minus circle
            let iconColor = "#CCCCCC";
            let icon = "minus-circle";
            if ((seriesLength > 1 || !this.activeColorMatch) && color !== undefined) {
                icon = `line-${lineStyleType}`;
                const [r, g, b, a] = [...color];
                iconColor = `rgba(${r},${g},${b},${a / 255})`;
            }
            seriesListItems.push(h("calcite-list-item", { key: id, label: name ?? id ?? "", description: description, value: id, selected: this.selectedSeriesIndex === index, onClick: this.openSeriesPopOver }, h("calcite-icon", { slot: "content-end", icon: icon, style: { color: iconColor } })));
        }
        return seriesListItems;
    }
    /**
     * @category Render UX
     */
    buildSeriesList() {
        return (h("calcite-list", { label: "", dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildSeriesListItems()));
    }
    async componentWillRender() {
        this.isResetAvailable = await this.model.resetAvailable();
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: '10ea150c44b98f9f5a5f8431b8461eafcc26182b' }, h("calcite-panel", { key: '964f2b000510d2938b33a54dbe6441270b0e74c0', heading: this.strings.series }, h("calcite-button", { key: '25c4f310b15036faea7bc08f9ff830fdba49c08d', slot: "header-actions-end", onClick: this.resetSeriesOriginal, disabled: !this.isResetAvailable, appearance: "transparent", scale: "s", iconEnd: "reset" }, this.strings.reset), this.buildSeriesList())));
    }
    /**
     * @category Private
     */
    setupSeriesPopover() {
        if (this.seriesPopover === null && this.hostElement !== undefined) {
            // seriesPopover config
            const popoverConfig = {
                referenceElement: this.hostElement,
                placement: this.popoverPlacement,
                seriesNameChange: this.seriesNameChange,
                seriesColorChange: this.seriesColorChange,
                seriesLineStyleChange: this.seriesLineStyleChange,
                seriesLineWidthChange: this.seriesLineWidthChange,
                openChange: this.openChange,
                popoverClose: this.seriesPopoverClose,
            };
            // create a new seriesPopover
            this.seriesPopover = Zy(Qy.LineChartSeriesPopover, popoverConfig);
        }
    }
    /**
     * @category Private
     */
    addSeriesPopover() {
        if (this.seriesPopover != null && !document.body.contains(this.seriesPopover)) {
            document.body.appendChild(this.seriesPopover);
        }
        this.seriesPopoverChange(true);
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"]
    }; }
    static get style() { return ArcgisChartsConfigLineChartSeriesStyle0; }
}, [1, "arcgis-charts-config-line-chart-series", {
        "model": [16],
        "configSeriesOpen": [1028, "config-series-open"],
        "activeColorMatch": [4, "active-color-match"],
        "popoverPlacement": [1, "popover-placement"],
        "selectedSeriesIndex": [32],
        "updatesOccurred": [32],
        "isResetAvailable": [32]
    }, undefined, {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-line-chart-series"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-line-chart-series":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigLineChartSeries);
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigLineChartSeries as A, defineCustomElement as d };
