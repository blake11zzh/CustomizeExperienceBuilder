/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { s as bc, S as Sc, t as ty } from './index2.js';
import { C as ChartAuthoringPages } from './interfaces.js';
import { d as defineCustomElement$b } from './arcgis-charts-config-axes2.js';
import { d as defineCustomElement$a } from './arcgis-charts-config-axis2.js';
import { d as defineCustomElement$9 } from './arcgis-charts-config-category-format2.js';
import { d as defineCustomElement$8 } from './arcgis-charts-config-field-select2.js';
import { d as defineCustomElement$7 } from './arcgis-charts-config-format2.js';
import { d as defineCustomElement$6 } from './arcgis-charts-config-general2.js';
import { d as defineCustomElement$5 } from './arcgis-charts-config-guide2.js';
import { d as defineCustomElement$4 } from './arcgis-charts-config-guides2.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-histogram-data2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-invalid-input-message2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-number-format2.js';
import { i as isEqual } from './isEqual.js';

const arcgisChartsConfigHistogramCss = ":host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}";
const ArcgisChartsConfigHistogramStyle0 = arcgisChartsConfigHistogramCss;

const ArcGISChartsConfigHistogram = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigHistogram extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        /**
         * @category Private
         */
        this.popoverElement = null;
        /**
         * @category Event handler
         */
        this.popoverOpen = (e) => {
            const { open = false, element = null } = { ...e.detail };
            if (open === true && this.popoverElement !== element) {
                if (this.popoverElement !== null) {
                    this.popoverElement.open = false;
                }
                this.popoverElement = element;
            }
            else if (open === false && this.popoverElement === element) {
                this.popoverElement = null;
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = async (e) => {
            const config = e?.detail.config ?? this.model.getConfig();
            if (this.layer === undefined) {
                await this.updateFetchLayerFieldsInfo(config);
            }
        };
        this.model = undefined;
        this.chartData = undefined;
        this.seriesColor = undefined;
        this.calculatedMinMaxBounds = undefined;
        this.page = undefined;
        this.layer = undefined;
        this.usePopupTemplateFieldsInfo = undefined;
        this.layerFieldsInfo = undefined;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    async layerChange(newValue, oldValue) {
        if (newValue !== undefined && !isEqual(oldValue, newValue)) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    async usePopupTemplateFieldsInfoChange(newValue, oldValue) {
        if (newValue !== undefined && newValue !== oldValue) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * Assigns new color to the bins
     * @param seriesColor
     * @category Watch handler
     */
    seriesColorChange(seriesColor) {
        if (this.model.getColorMatch()) {
            seriesColor?.forEach((fillSymbol) => {
                if (seriesColor?.get(0) !== undefined && !isEqual(this.model.getBinColor(), fillSymbol)) {
                    this.model.setBinColor(fillSymbol);
                }
            });
        }
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        if (this.layer !== undefined) {
            await this.layerChange(this.layer, undefined);
        }
        if (this.seriesColor !== undefined) {
            this.seriesColorChange(this.seriesColor);
        }
        if (this.usePopupTemplateFieldsInfo !== undefined) {
            await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, undefined);
        }
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    async componentWillRender() {
        // Ensure layerFieldsInfo is defined
        if (this.layerFieldsInfo === undefined) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * @category Lifecycle
     */
    render() {
        let panel;
        switch (this.page) {
            case ChartAuthoringPages.Data:
                panel = (h(Host, { key: 'bf69c59cb6d5c70ec671bd91d4d5ee30bc995972' }, h("arcgis-charts-config-histogram-data", { key: 'de1c5cd480f8e5c5c861940506d50465064e4302', model: this.model, meanValue: this.chartData?.mean, medianValue: this.chartData?.median, standardDevValue: this.chartData?.stddev, minValue: this.chartData?.min, maxValue: this.chartData?.max, sumValue: this.chartData?.sum, nullsValue: this.chartData?.nulls, countValue: this.chartData?.count, layerFieldsInfo: this.layerFieldsInfo, onArcgisChartsConfigHistogramDataPopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.Axes:
                panel = (h(Host, { key: '8a8d6b4604619c7d7215c0132323fb4c8c843d37' }, h("arcgis-charts-config-axes", { key: '100bed9d5efb0dcce256d5044dd98e7ee3e207ce', model: this.model, showMinXBoundOption: false, showMaxXBoundOption: false, showMinYBoundOption: false, showMaxYBoundOption: true, showEnableXLogOption: false, showEnableYLogOption: false, calculatedMinMaxBounds: this.calculatedMinMaxBounds })));
                break;
            case ChartAuthoringPages.Guides:
                panel = (h(Host, { key: '1af8a4323dc02b7db307fe3fdb9637f8e182b453' }, h("arcgis-charts-config-guides", { key: '05c7fc0770f54c11476b6f6634f064c4c37317f4', model: this.model, enableXAxisGuide: false, enableYAxisGuide: true, onArcgisChartsConfigGuidePopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.Format:
                panel = (h(Host, { key: '30a6349b1a11a0fa2dc3f2c5422072d8996d82d3' }, h("arcgis-charts-config-format", { key: '889e13afbe77303039368100851e4ef885e71908', model: this.model, onArcgisChartsConfigFormatPopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.General:
                panel = (h(Host, { key: 'f8bed9bcf296e8513ca33836156fcd378f4a91ea' }, h("arcgis-charts-config-general", { key: '250f049e5cd371c348fc4de7e85b4e438f7ea076', model: this.model })));
                break;
            default:
                panel = h(Host, { key: '9a20d6de0844e3fc0f13f5e3495c64f80082ddfa' });
                break;
        }
        return panel;
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Private
     */
    async updateFetchLayerFieldsInfo(config) {
        // get feature layer from component prop if exists, otherwise get from current config iLayer
        const currentConfig = config ?? this.model.getConfig();
        let layer = this.layer;
        // if the layer doesn't exist we build one from the config data source
        if (!layer) {
            const iLayer = ty(currentConfig) ? currentConfig.iLayer : undefined;
            if (iLayer) {
                layer = await bc(iLayer);
            }
        }
        if (layer) {
            this.layerFieldsInfo = await Sc(layer, this.usePopupTemplateFieldsInfo);
        }
    }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"],
        "seriesColor": ["seriesColorChange"]
    }; }
    static get style() { return ArcgisChartsConfigHistogramStyle0; }
}, [1, "arcgis-charts-config-histogram", {
        "model": [16],
        "chartData": [16],
        "seriesColor": [16],
        "calculatedMinMaxBounds": [16],
        "page": [513],
        "layer": [16],
        "usePopupTemplateFieldsInfo": [4, "use-popup-template-fields-info"],
        "layerFieldsInfo": [32]
    }, undefined, {
        "model": ["modelChange"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"],
        "seriesColor": ["seriesColorChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-histogram", "arcgis-charts-config-axes", "arcgis-charts-config-axis", "arcgis-charts-config-category-format", "arcgis-charts-config-field-select", "arcgis-charts-config-format", "arcgis-charts-config-general", "arcgis-charts-config-guide", "arcgis-charts-config-guides", "arcgis-charts-config-histogram-data", "arcgis-charts-config-invalid-input-message", "arcgis-charts-config-number-format"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-histogram":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigHistogram);
            }
            break;
        case "arcgis-charts-config-axes":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "arcgis-charts-config-axis":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "arcgis-charts-config-category-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "arcgis-charts-config-field-select":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "arcgis-charts-config-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "arcgis-charts-config-general":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "arcgis-charts-config-guide":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "arcgis-charts-config-guides":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "arcgis-charts-config-histogram-data":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-invalid-input-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-number-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigHistogram as A, defineCustomElement as d };
