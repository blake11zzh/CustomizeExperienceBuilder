/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as bc, S as Sc, t as ty } from './index2.js';
import { C as ChartAuthoringPages } from './interfaces.js';
import { d as defineCustomElement$b } from './arcgis-charts-config-axes2.js';
import { d as defineCustomElement$a } from './arcgis-charts-config-axis2.js';
import { d as defineCustomElement$9 } from './arcgis-charts-config-category-format2.js';
import { d as defineCustomElement$8 } from './arcgis-charts-config-field-select2.js';
import { d as defineCustomElement$7 } from './arcgis-charts-config-format2.js';
import { d as defineCustomElement$6 } from './arcgis-charts-config-general2.js';
import { d as defineCustomElement$5 } from './arcgis-charts-config-guide2.js';
import { d as defineCustomElement$4 } from './arcgis-charts-config-guides2.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-invalid-input-message2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-number-format2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-scatter-plot-data2.js';
import { i as isEqual } from './isEqual.js';

const arcgisChartsConfigScatterPlotCss = ":host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}";
const ArcgisChartsConfigScatterPlotStyle0 = arcgisChartsConfigScatterPlotCss;

const ArcgisChartsConfigScatterPlot = /*@__PURE__*/ proxyCustomElement(class ArcgisChartsConfigScatterPlot extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigWebChartChange = createEvent(this, "arcgisChartsConfigWebChartChange", 7);
        /**
         * @category Private
         */
        this.popoverElement = null;
        /**
         * @category Event handler
         */
        this.popoverOpen = (e) => {
            const { open = false, element = null } = { ...e.detail };
            if (open === true && this.popoverElement !== element) {
                if (this.popoverElement !== null) {
                    this.popoverElement.open = false;
                }
                this.popoverElement = element;
            }
            else if (open === false && this.popoverElement === element) {
                this.popoverElement = null;
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = async (e) => {
            const config = e?.detail.config ?? this.model.getConfig();
            if (this.layer === undefined) {
                await this.updateFetchLayerFieldsInfo(config);
            }
        };
        this.model = undefined;
        this.popoverPlacement = "leading";
        this.r2 = undefined;
        this.calculatedDataMinMaxBounds = undefined;
        this.calculatedMinMaxBounds = undefined;
        this.page = undefined;
        this.layer = undefined;
        this.usePopupTemplateFieldsInfo = undefined;
        this.layerFieldsInfo = undefined;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * Secures the value assigned to the r2 property
     * @param newR2Value the new r2 value assigned to the component
     * @category Watch handler
     */
    r2Change(newR2Value) {
        // Necessary check because a NaN value for instance will trigger an infinite rendering loop (see issues #2502 & #4079)
        // TODO: find the reason of the infinite loop would help avoiding this check
        if (!Number.isFinite(newR2Value)) {
            this.r2 = undefined;
        }
    }
    async layerChange(newValue, oldValue) {
        if (newValue !== undefined && !isEqual(oldValue, newValue)) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    async usePopupTemplateFieldsInfoChange(newValue, oldValue) {
        if (newValue !== undefined && newValue !== oldValue) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        if (this.layer !== undefined) {
            await this.layerChange(this.layer, undefined);
        }
        if (this.usePopupTemplateFieldsInfo !== undefined) {
            await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, undefined);
        }
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    async componentWillRender() {
        // Ensure layerFieldsInfo is defined
        if (this.layerFieldsInfo === undefined) {
            await this.updateFetchLayerFieldsInfo();
        }
    }
    /**
     * @category Lifecycle
     */
    render() {
        let panel;
        switch (this.page) {
            case ChartAuthoringPages.Data:
                panel = (h(Host, { key: '1177ff84c3303f2319e3adc276b86965240c51be' }, h("arcgis-charts-config-scatter-plot-data", { key: 'f3930d0e68a6b109cd788738d773c5b8c7f26b14', model: this.model, r2: this.r2, layerFieldsInfo: this.layerFieldsInfo, onArcgisChartsConfigScatterPlotPopoverChange: this.popoverOpen, isTableLayer: this.layer?.isTable })));
                break;
            case ChartAuthoringPages.Axes:
                panel = (h(Host, { key: '95bf7e6445609c9ba51d15fa85295110ae042c76' }, h("arcgis-charts-config-axes", { key: '25d4127c3acd23d77af5b2bf60963e562caa91ac', model: this.model, showMinXBoundOption: true, showMaxXBoundOption: true, showMinYBoundOption: true, showMaxYBoundOption: true, showEnableXLogOption: true, showEnableYLogOption: true, calculatedMinMaxBounds: this.calculatedMinMaxBounds, calculatedDataMinMaxBounds: this.calculatedDataMinMaxBounds })));
                break;
            case ChartAuthoringPages.Guides:
                panel = (h(Host, { key: 'c4810613204181fe41197369bbbc75fd5e4d35c7' }, h("arcgis-charts-config-guides", { key: '9952083d7346d9d7048f247ffd2e233a8fd12e7d', model: this.model, enableXAxisGuide: true, enableYAxisGuide: true, onArcgisChartsConfigGuidePopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.Format:
                panel = (h(Host, { key: 'ca736657d6f9ea7a26cfc5fea667510d6e1a48e8' }, h("arcgis-charts-config-format", { key: '4c64f78d799821bf06ffc7790270a9435bcc2aab', model: this.model, onArcgisChartsConfigFormatPopoverChange: this.popoverOpen })));
                break;
            case ChartAuthoringPages.General:
                panel = (h(Host, { key: 'a735be8e6da14cf696d812dedc8a9509774fabd7' }, h("arcgis-charts-config-general", { key: '025f6c334fb4f9b55231ca326332eed8e2c7223f', model: this.model })));
                break;
            default:
                panel = h(Host, { key: '011da87670ca4f4eb958825f05072b66725ab430' });
                break;
        }
        return panel;
    }
    /**
     * @category Private
     */
    async updateFetchLayerFieldsInfo(config) {
        // get feature layer from component prop if exists, otherwise get from current config iLayer
        const currentConfig = config ?? this.model.getConfig();
        let layer = this.layer;
        // if the layer doesn't exist we build one from the config data source
        if (!layer) {
            const iLayer = ty(currentConfig) ? currentConfig.iLayer : undefined;
            if (iLayer) {
                layer = await bc(iLayer);
            }
        }
        if (layer) {
            this.layerFieldsInfo = await Sc(layer, this.usePopupTemplateFieldsInfo);
        }
    }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"],
        "r2": ["r2Change"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"]
    }; }
    static get style() { return ArcgisChartsConfigScatterPlotStyle0; }
}, [1, "arcgis-charts-config-scatter-plot", {
        "model": [16],
        "popoverPlacement": [513, "popover-placement"],
        "r2": [514, "r-2"],
        "calculatedDataMinMaxBounds": [16],
        "calculatedMinMaxBounds": [16],
        "page": [513],
        "layer": [16],
        "usePopupTemplateFieldsInfo": [4, "use-popup-template-fields-info"],
        "layerFieldsInfo": [32]
    }, undefined, {
        "model": ["modelChange"],
        "r2": ["r2Change"],
        "layer": ["layerChange"],
        "usePopupTemplateFieldsInfo": ["usePopupTemplateFieldsInfoChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-scatter-plot", "arcgis-charts-config-axes", "arcgis-charts-config-axis", "arcgis-charts-config-category-format", "arcgis-charts-config-field-select", "arcgis-charts-config-format", "arcgis-charts-config-general", "arcgis-charts-config-guide", "arcgis-charts-config-guides", "arcgis-charts-config-invalid-input-message", "arcgis-charts-config-number-format", "arcgis-charts-config-scatter-plot-data"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-scatter-plot":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisChartsConfigScatterPlot);
            }
            break;
        case "arcgis-charts-config-axes":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "arcgis-charts-config-axis":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "arcgis-charts-config-category-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "arcgis-charts-config-field-select":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "arcgis-charts-config-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "arcgis-charts-config-general":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "arcgis-charts-config-guide":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "arcgis-charts-config-guides":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "arcgis-charts-config-invalid-input-message":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-number-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-scatter-plot-data":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisChartsConfigScatterPlot as A, defineCustomElement as d };
