/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn, ag as tu, O as On, Z as Zy, r as Qy, a2 as Jy } from './index2.js';

const HTMLClasses = {
    addChartContainer: "add-chart-container",
    viewChartComponent: "view-chart-component",
    header: "header",
    dropdownPopup: "dropdown-popup",
};

const arcgisChartsConfigViewChartsCss = ".view-chart-component{width:var(--arcgis-charts-config-panel-width);height:var(--arcgis-charts-config-panel-height)}.add-chart-container{display:flex;justify-content:center;padding:2rem 0;background-color:var(--calcite-color-background)}.header{margin:0}.dropdown-popup{position:relative}";
const ArcgisChartsConfigViewChartsStyle0 = arcgisChartsConfigViewChartsCss;

const ArcGISChartsConfigViewCharts = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigViewCharts extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigViewChartSelect = createEvent(this, "arcgisChartsConfigViewChartSelect", 7);
        this.arcgisChartsConfigViewChartDelete = createEvent(this, "arcgisChartsConfigViewChartDelete", 7);
        this.arcgisChartsConfigViewChartEdit = createEvent(this, "arcgisChartsConfigViewChartEdit", 7);
        this.arcgisChartsConfigViewChartAddChart = createEvent(this, "arcgisChartsConfigViewChartAddChart", 7);
        /**
         * rename popover
         * @category Private
         */
        this.chartRenamePopover = null;
        /**
         * @category Event handler
         */
        this.onAddChartClick = (e) => {
            this.arcgisChartsConfigViewChartAddChart.emit({
                referenceElement: e.target,
                layerId: this.layer?.id.toString(),
            });
        };
        /**
         * @category Event handler
         */
        this.onChartSelect = (event) => {
            const eventCurrentTarget = event.currentTarget;
            let selectedChartId;
            if (eventCurrentTarget?.localName === "calcite-list-item") {
                selectedChartId = eventCurrentTarget.value;
            }
            else if (eventCurrentTarget?.localName === "calcite-icon") {
                const parentNode = eventCurrentTarget.parentNode;
                selectedChartId = parentNode.value;
            }
            this.arcgisChartsConfigViewChartSelect.emit({ chartId: selectedChartId });
        };
        /**
         * @category Event handler
         */
        this.chartEditSelect = () => {
            if (!this.disableEditing) {
                this.arcgisChartsConfigViewChartEdit.emit({
                    chartId: this.selectedActionChartId,
                });
                this.chartActionClosed(this.selectedActionChartId);
            }
        };
        /**
         * @category Event handler
         */
        this.chartRenameSelect = (e) => {
            if (!this.disableEditing) {
                const dropdownItemRename = e.target;
                const chartListItem = dropdownItemRename.closest("calcite-list-item");
                const selectedModel = this.modelList?.find((model) => model.getChartId() === this.selectedActionChartId);
                if (chartListItem !== null) {
                    this.renameReferenceElement = chartListItem;
                }
                // Chart has to be selected before it can be renamed
                this.arcgisChartsConfigViewChartSelect.emit({
                    chartId: this.selectedActionChartId,
                });
                this.chartTitle = selectedModel?.getTitleText() ?? "";
                this.renameOpen = true;
                // popover config
                this.setupRenamePopover();
            }
        };
        /**
         * @category Event handler
         */
        this.chartDeleteSelect = () => {
            if (!this.disableEditing) {
                this.arcgisChartsConfigViewChartDelete.emit({
                    chartId: this.selectedActionChartId,
                });
                this.selectedActionChartId = "";
            }
        };
        /**
         * @category Event handler
         */
        this.chartActionClosed = (chartId) => {
            if (chartId === this.selectedActionChartId && !this.renameOpen) {
                this.selectedActionChartId = "";
            }
        };
        /**
         * @category Event handler
         */
        this.chartActionOpened = (chartId) => {
            this.selectedActionChartId = chartId;
        };
        /**
         * @category Event handler
         */
        this.popoverClose = () => {
            const selectedModel = this.modelList?.find((model) => model.getChartId() === this.selectedChartId);
            this.chartTitle = selectedModel?.getTitleText() ?? "";
            this.selectedActionChartId = "";
            this.renameOpen = false;
            this.removeChartRenamePopover();
        };
        /**
         * @category Event handler
         */
        this.onChartRename = (e) => {
            if (!this.disableEditing) {
                this.chartTitle = e.detail.name;
                const model = this.modelList?.find((model) => model.getChartId() === this.selectedActionChartId);
                model?.setTitleText(this.chartTitle);
                this.selectedActionChartId = "";
                this.renameOpen = false;
                this.removeChartRenamePopover();
            }
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        this.selectedChartId = undefined;
        this.layer = undefined;
        this.modelList = undefined;
        this.noGroup = false;
        this.disableEditing = false;
        this.chartTitle = undefined;
        this.renameOpen = undefined;
        this.selectedActionChartId = undefined;
        this.updatesOccurred = 0;
    }
    /**
     * Called every time modelList is updated
     * @category Watch handler
     */
    async modelListChange(newModelList, oldModelList) {
        // remove event listeners from old models
        oldModelList.forEach((model) => {
            model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        });
        // add event listeners to new models
        newModelList.forEach((model) => {
            model.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        });
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeChartRenamePopover();
    }
    /**
     * @category Lifecycle
     */
    render() {
        return h(Host, { key: 'ffcb1017f90767e00a29624a19765210cd13b802', class: HTMLClasses.viewChartComponent }, this.buildChartList());
    }
    /**
     * @category Render UX
     */
    buildChartList() {
        const chartListItems = this.modelList?.map((model, index) => {
            const id = model.getChartId();
            const title = model.getTitleText();
            const icon = tu(model.getConfig());
            return (h("calcite-list-item", { label: title ?? id ?? On(this.strings.chartTitle, { index: index.toString() }), selected: this.selectedChartId === (id?.toString() ?? index.toString()), value: id ?? index.toString(), onClick: this.onChartSelect }, h("calcite-icon", { slot: "content-start", icon: icon }), !this.disableEditing ? (h("calcite-dropdown", { slot: "actions-end", overlayPositioning: "fixed", placement: "bottom-end", onCalciteDropdownClose: () => this.chartActionClosed(id ?? ""), onCalciteDropdownOpen: () => this.chartActionOpened(id ?? ""), class: HTMLClasses.dropdownPopup }, h("calcite-action", { scale: "l", text: this.strings.chartActions, color: "dark", slot: "trigger", active: id === this.selectedActionChartId }, h("calcite-icon", { icon: "ellipsis" })), h("calcite-dropdown-group", { selectionMode: "none" }, h("calcite-dropdown-item", { accessKey: "edit", onCalciteDropdownItemSelect: this.chartEditSelect }, this.strings.edit), h("calcite-dropdown-item", { accessKey: "rename", onCalciteDropdownItemSelect: this.chartRenameSelect }, this.strings.rename), h("calcite-dropdown-item", { accessKey: "delete", onCalciteDropdownItemSelect: this.chartDeleteSelect }, this.strings.delete)))) : null));
        }) ?? null;
        return this.layer ? (h("calcite-list", { label: "", selectionMode: "single-persist", selectionAppearance: "border" }, this.noGroup ? (chartListItems) : (h("calcite-list-item-group", { key: this.layer.id, heading: this.layer.title ?? this.layer.id.toString() }, chartListItems)), !this.disableEditing ? (h("div", { class: HTMLClasses.addChartContainer }, h("calcite-fab", { slot: "fab", appearance: "outline-fill", kind: "neutral", hidden: false, textEnabled: true, text: this.strings.addChart, label: this.strings.addChart, onClick: this.onAddChartClick, scale: "s" }))) : null)) : null;
    }
    // setup rename popover
    setupRenamePopover() {
        if (this.chartRenamePopover === null) {
            // chartRenamePopover config
            const popoverConfig = {
                name: this.chartTitle,
                popoverReferenceElement: this.renameReferenceElement,
                onChartRename: this.onChartRename,
                popoverClose: this.popoverClose,
            };
            // create a new chartRenamePopover
            this.chartRenamePopover = Zy(Qy.ChartRenamePopover, popoverConfig);
            document.body.appendChild(this.chartRenamePopover);
        }
        if (this.chartRenamePopover !== null) {
            this.chartRenamePopover.open = this.renameOpen;
            this.chartRenamePopover.name = this.chartTitle;
            this.chartRenamePopover.popoverReferenceElement = this.renameReferenceElement;
        }
    }
    /**
     * Remove chart rename popover
     * @category Private
     */
    removeChartRenamePopover() {
        if (this.chartRenamePopover !== null) {
            this.chartRenamePopover.open = false;
            this.chartRenamePopover = Jy(this.chartRenamePopover);
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "modelList": ["modelListChange"]
    }; }
    static get style() { return ArcgisChartsConfigViewChartsStyle0; }
}, [1, "arcgis-charts-config-view-charts", {
        "selectedChartId": [513, "selected-chart-id"],
        "layer": [16],
        "modelList": [16],
        "noGroup": [516, "no-group"],
        "disableEditing": [516, "disable-editing"],
        "chartTitle": [32],
        "renameOpen": [32],
        "selectedActionChartId": [32],
        "updatesOccurred": [32]
    }, undefined, {
        "modelList": ["modelListChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-view-charts"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-view-charts":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigViewCharts);
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigViewCharts as A, defineCustomElement as d };
