/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { f as fl, V as Vy, G as Gy, N as El, U as Uy, z as zy, $ as $l } from './index2.js';
import { W as WebChartTypes } from './chart-object-literals.js';

const BarChartActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.RotateChart,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Zoom,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.FullExtent,
    Vy.SwitchSelection,
];
const LineChartActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.RotateChart,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Zoom,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.FullExtent,
    Vy.SwitchSelection,
];
const PieChartActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.SwitchSelection,
];
const HistogramActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Zoom,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.FullExtent,
    Vy.SwitchSelection,
];
const ScatterPlotActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Zoom,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.FullExtent,
    Vy.SwitchSelection,
];
const BoxPlotActions = [
    Vy.EditChart,
    Vy.Legend,
    Vy.RotateChart,
    Vy.FilterBySelection,
    Vy.FilterByExtent,
    Vy.Zoom,
    Vy.Selection,
    Vy.ClearSelection,
    Vy.FullExtent,
    Vy.SwitchSelection,
];
const GaugeActions = [Vy.EditChart, Vy.FilterByExtent];
/**
 * Returns the default actions for a given chart type
 * @param {ChartTypes} chartType The chart type for which to get the default actions
 * @returns {DefaultChartActions[]} The default actions for the given chart type
 */
function getDefaultChartActions(chartType) {
    switch (chartType) {
        case WebChartTypes.BarSeries:
            return BarChartActions;
        case WebChartTypes.LineSeries:
            return LineChartActions;
        case WebChartTypes.PieSeries:
            return PieChartActions;
        case WebChartTypes.HistogramSeries:
            return HistogramActions;
        case WebChartTypes.ScatterSeries:
            return ScatterPlotActions;
        case WebChartTypes.BoxPlotSeries:
            return BoxPlotActions;
        case WebChartTypes.GaugeSeries:
            return GaugeActions;
        default:
            return [];
    }
}
/**
 * Creates a new tooltip object and adds it to the DOM
 * @param innerHTML HTML to be displayed inside tooltip
 * @param referenceElement Element for which the tooltip will be shown
 * @returns The tooltip object that was created
 */
function createTooltip(innerHTML, referenceElement) {
    const tooltip = document.createElement("calcite-tooltip");
    tooltip.innerHTML = innerHTML;
    tooltip.style.setProperty("opacity", "1");
    if (referenceElement !== undefined) {
        tooltip.referenceElement = referenceElement;
    }
    document.body.appendChild(tooltip);
    return tooltip;
}
/**
 * Destroys tooltip by removing it from the DOM
 * @param tooltip The tooltip to be destroyed
 * @returns Null return for caller to easily reset tooltip object to null
 */
function destroyTooltip(tooltip) {
    tooltip?.remove();
    return null;
}
/**
 * Event handler for action bar slot change.
 * @param e
 * @param layer
 */
const onActionBarSlotChange = (e, chartComponent, config) => {
    // when the slot element changes, we add the event listener to the new slot element
    const actionBarSlot = e.target;
    const actionBar = actionBarSlot
        .assignedNodes()
        .find((node) => "legendToggle" in node);
    const chartType = fl(config?.series);
    if (actionBar) {
        actionBar.chartType = chartType;
        updateActionBarStates(actionBar, chartComponent, config);
    }
};
/**
 * Updates the action bar states based on the properties of the chart component and the config object.
 * @param actionBar
 * @param chartComponent
 * @param config
 */
function updateActionBarStates(actionBar, chartComponent, config) {
    const selectionIsEmpty = $l(chartComponent.selectionData);
    // This logic makes it so that an undefined legend is treated as not visible, but a defined legend with an undefined visible property is treated as visible to honor the ac-js default behavior.
    const configLegendVisible = config?.legend ? (config.legend.visible ?? true) : false;
    // Update the chart type on the action bar to determine which actions are shown
    actionBar.chartType = fl(config?.series);
    // Edit chart action is shown if the chart component has configuration enabled
    if (chartComponent.enableConfiguration) {
        const currentHiddenActions = actionBar.hiddenActions ?? [];
        actionBar.hiddenActions = currentHiddenActions.filter((action) => action !== Vy.EditChart);
    }
    // Edit chart action is enabled if the chart component has configuration enabled
    actionBar.editChartState = chartComponent.enableConfiguration ? Gy.Enabled : Gy.Disabled;
    // Legend action is enabled if the chart has a config which can show a legend
    const legendEnabled = config && El(config.series);
    actionBar.legendState = legendEnabled ? Gy.Enabled : Gy.Disabled;
    // Legend toggle is active if the chart component has legend visibility set to true or if the config legend is visible
    actionBar.legendToggle =
        legendEnabled && (chartComponent.legendVisibility ?? configLegendVisible)
            ? Uy.Active
            : Uy.Inactive;
    // Rotate chart toggle is active if the chart component rotation is true or if the config rotation is true
    actionBar.rotateChartToggle =
        (chartComponent.rotation ?? config?.rotated) === true ? Uy.Active : Uy.Inactive;
    // Filter by selection action is enabled if either:
    // - The chart component is filtering by selection (because the user needs to be able to turn it off)
    // - Selection data is not empty and the chart component is not filtering by extent
    actionBar.filterBySelectionState =
        chartComponent.filterBySelection === true || (!selectionIsEmpty && chartComponent.filterByExtent !== true)
            ? Gy.Enabled
            : Gy.Disabled;
    // Filter by selection toggle is active if the chart component is filtering by selection
    actionBar.filterBySelectionToggle =
        chartComponent.filterBySelection === true ? Uy.Active : Uy.Inactive;
    // Filter by extent action is enabled if either:
    // - The chart component is filtering by extent (because the user needs to be able to turn it off)
    // - The chart component is not filtering by selection
    actionBar.filterByExtentState =
        chartComponent.filterByExtent === true || chartComponent.filterBySelection !== true
            ? Gy.Enabled
            : Gy.Disabled;
    // Filter by extent toggle is active if the chart component is filtering by extent
    actionBar.filterByExtentToggle = chartComponent.filterByExtent === true ? Uy.Active : Uy.Inactive;
    // Zoom action is enabled if the chart component is not filtering by selection
    actionBar.zoomState = !chartComponent.filterBySelection ? Gy.Enabled : Gy.Disabled;
    // Zoom toggle is active if the chart component is in zoom mode
    actionBar.zoomToggle = chartComponent.actionMode === zy.Zoom ? Uy.Active : Uy.Inactive;
    // Selection action is enabled if the chart component is not filtering by selection
    actionBar.selectionState = !chartComponent.filterBySelection ? Gy.Enabled : Gy.Disabled;
    // Selection toggle is active if the chart component is in selection mode (undefined defaults to selection mode also)
    actionBar.selectionToggle =
        (chartComponent.actionMode ?? actionBar.actionBarSelectionMode) === actionBar.actionBarSelectionMode
            ? Uy.Active
            : Uy.Inactive;
    // Clear selection action is enabled if selection data is not empty
    actionBar.clearSelectionState = !selectionIsEmpty ? Gy.Enabled : Gy.Disabled;
    // Full extent action is enabled if the chart component is not filtering by selection
    actionBar.fullExtentState = !chartComponent.filterBySelection ? Gy.Enabled : Gy.Disabled;
    // Switch selection action is enabled if the chart component is not filtering by selection
    actionBar.switchSelectionState = !chartComponent.filterBySelection ? Gy.Enabled : Gy.Disabled;
}

export { createTooltip as c, destroyTooltip as d, getDefaultChartActions as g, onActionBarSlotChange as o, updateActionBarStates as u };
