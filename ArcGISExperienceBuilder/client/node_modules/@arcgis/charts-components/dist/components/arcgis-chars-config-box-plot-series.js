/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, createEvent, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { a2 as Jy, M as Mn, Z as Zy, r as Qy, m as ml } from './index2.js';
import { c as createActionTooltip, d as destroyActionTooltip } from './chart-ui-utils.js';
import { f as WebChartBoxPlotMultipleSeriesKinds } from './chart-object-literals.js';
import { i as isNil } from './isNil.js';

const HTMLClasses = {
    topSection: "top-section",
    sectionLabel: "section-label",
    list: "list",
    infoIcon: "info-icon",
};

const arcgisChartsConfigBoxPlotSeriesCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.top-section{margin-top:var(--arcgis-charts-config-margin-minor)}.section-label{display:flex;margin-bottom:var(--arcgis-charts-config-margin-major);margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.info-icon{margin:auto 1rem;pointer-events:auto}";
const ArcgisChartsConfigBoxPlotSeriesStyle0 = arcgisChartsConfigBoxPlotSeriesCss;

const ArcGISChartsConfigBoxPlotSeries = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigBoxPlotSeries extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.arcgisChartsConfigBoxPlotSeriesPopoverChange = createEvent(this, "arcgisChartsConfigBoxPlotSeriesPopoverChange", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.resetSeriesOriginal = () => {
            this.configSeriesOpen = false;
            this.selectedSeriesIndex = undefined;
            // reset series styling
            this.model.resetSeriesStyling();
        };
        /**
         * @category Event handler
         */
        this.onMultipleSeriesSelect = async (event) => {
            if (!this.shouldDisableMeanLinesOption()) {
                const target = event.target;
                const value = target.value ??
                    target.parentElement.value ??
                    "";
                await this.model.setShowMeanLines(value === WebChartBoxPlotMultipleSeriesKinds.MeanLines);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            if (event.detail !== null || event.detail !== undefined) {
                const name = event.detail?.name;
                this.model.setSeriesName(name, this.selectedSeriesIndex ?? -1);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesColorChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { color } = e.detail;
                if (color !== undefined) {
                    if (this.meanLinesBoxColorIsSelected) {
                        this.model.setMeanLinesBoxColor(color);
                    }
                    else {
                        this.model.setColorMatch(false);
                        this.model.setSeriesColor(color, this.selectedSeriesIndex ?? -1);
                    }
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineStyleChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { style } = e.detail;
                if (style !== undefined) {
                    this.model.setSeriesLineStyle(style, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineWidthChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { width } = e.detail;
                if (width !== undefined) {
                    this.model.setSeriesLineWidth(width, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            const boxPlotSeriesIndex = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown();
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                let adjustedOldIndex = oldIndex;
                let adjustedNewIndex = newIndex;
                // If the mean line series is enabled, we need to adjust the indices to account for the box plot series
                if (boxPlotSeriesIndex !== -1) {
                    adjustedOldIndex = oldIndex >= boxPlotSeriesIndex ? oldIndex + 1 : oldIndex;
                    adjustedNewIndex = newIndex >= boxPlotSeriesIndex ? newIndex + 1 : newIndex;
                }
                this.model.moveSeries(adjustedOldIndex, adjustedNewIndex);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverClose = () => {
            this.selectedSeriesIndex = undefined;
            this.meanLinesBoxColorIsSelected = false;
            this.configSeriesOpen = false;
            this.seriesPopover = Jy(this.seriesPopover);
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverChange = (open) => {
            this.arcgisChartsConfigBoxPlotSeriesPopoverChange.emit({
                open,
                element: this.seriesPopover,
            });
        };
        /**
         * @category Event handler
         */
        this.openSeriesPopOver = (event) => {
            // The target can be either the list item or the icon
            const target = event.target;
            const listItem = target.localName === "calcite-list-item"
                ? target
                : target.parentNode;
            const negateConfigSeriesOpen = !this.configSeriesOpen;
            const seriesIndex = this.model.getSeriesIndex(listItem.value);
            if (seriesIndex !== undefined && seriesIndex !== -1) {
                this.configSeriesOpen = this.selectedSeriesIndex === seriesIndex ? negateConfigSeriesOpen : true;
                if (this.configSeriesOpen) {
                    this.selectedSeriesIndex = seriesIndex;
                }
                else {
                    this.selectedSeriesIndex = undefined;
                }
                this.meanLinesBoxColorIsSelected = false;
            }
            else if (listItem.value === "box-plot-color") {
                const negateMeanLinesBoxColorSelected = !this.meanLinesBoxColorIsSelected;
                this.configSeriesOpen = negateMeanLinesBoxColorSelected;
                this.meanLinesBoxColorIsSelected = negateMeanLinesBoxColorSelected;
                this.selectedSeriesIndex = undefined;
            }
        };
        /**
         * Creates a tooltip for the hovered action.
         * @category Event handler
         */
        this.createTooltip = (e, text) => {
            const iconElement = e.target;
            this.tooltip = createActionTooltip(iconElement);
            this.tooltip.innerHTML = text;
            // append tooltip to the document body instead of action element
            // to avoid tooltip being cut off by calcite panel header element
            document.body.appendChild(this.tooltip);
        };
        /**
         * Destroys tooltip for the action that was being hovered.
         * @category Event handler
         */
        this.destroyTooltip = () => {
            destroyActionTooltip(this.tooltip);
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * Emit event on open popover.
         * @param e
         * @category Private
         */
        this.openChange = (e) => {
            this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
        };
        this.model = undefined;
        this.configSeriesOpen = false;
        this.activeColorMatch = false;
        this.popoverPlacement = "leading";
        this.selectedSeriesIndex = undefined;
        this.meanLinesBoxColorIsSelected = false;
        this.updatesOccurred = 0;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Watch handler
     */
    selectedSeriesIndexChange() {
        if (this.selectedSeriesIndex !== undefined && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                // sync back to seriesPopover
                this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex);
                this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex);
                this.seriesPopover.isLineSymbol = this.model.getShowMeanLines() === true;
                this.seriesPopover.selectedLineStyle = this.model.getSeriesLineStyle(this.selectedSeriesIndex);
                this.seriesPopover.selectedLineWidth = this.model.getSeriesLineWidth(this.selectedSeriesIndex);
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Watch handler
     */
    meanLinesBoxColorIsSelectedChange() {
        if (this.meanLinesBoxColorIsSelected && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                this.seriesPopover.selectedColor = this.model.getMeanLinesBoxColor();
                this.seriesPopover.isLineSymbol = false;
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Private
     */
    removeSeriesPopover() {
        if (this.seriesPopover !== null && this.seriesPopover !== undefined) {
            this.seriesPopover.open = false;
            this.seriesPopover = Jy(this.seriesPopover);
        }
        this.seriesPopoverChange(false);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeSeriesPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Render UX
     */
    buildSeriesListItems() {
        const seriesLength = this.model.getSeriesLength();
        const seriesListItems = [];
        const boxPlotSeriesIndex = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown();
        for (let index = 0; index < seriesLength; index += 1) {
            // skip displaying the box plot series in the series list when mean lines are shown
            if (boxPlotSeriesIndex === index) {
                continue;
            }
            const id = this.model.getSeriesId(index);
            const color = this.model.getSeriesColor(index);
            const name = this.model.getSeriesName(index);
            const chartSubType = this.model.getChartSubType();
            const description = chartSubType === ml.BoxPlotMonoField || chartSubType === ml.BoxPlotMultiFields
                ? this.strings.series
                : id;
            // If `undefined` is provided for the series, we default the color icon to a grey minus square
            let iconColor = "#CCCCCC";
            let icon = "minus-square";
            if ((seriesLength > 1 || !this.activeColorMatch) && color !== undefined) {
                icon = this.model.getShowMeanLines() === true ? "line-solid" : "square-f";
                const [r, g, b, a] = [...color];
                iconColor = `rgba(${r},${g},${b},${a / 255})`;
            }
            seriesListItems.push(h("calcite-list-item", { key: id, label: name ?? id ?? "", description: description, value: id, selected: this.selectedSeriesIndex === index, onClick: this.openSeriesPopOver }, h("calcite-icon", { slot: "content-end", icon: icon, style: { color: iconColor } })));
        }
        return seriesListItems;
    }
    /**
     * @category Render UX
     */
    buildSeriesList() {
        return (h("calcite-list", { label: "", class: HTMLClasses.list, dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildSeriesListItems()));
    }
    /**
     * @category Render UX
     */
    renderMeanLinesBoxColorItem() {
        // If `undefined` is provided for the series, we default the color icon to a grey minus square
        let iconColor = "#CCCCCC";
        let icon = "minus-square";
        const color = this.model.getMeanLinesBoxColor();
        if (color !== undefined) {
            icon = "square-f";
            const [r, g, b, a] = [...color];
            iconColor = `rgba(${r},${g},${b},${a / 255})`;
        }
        return (h("calcite-list", { label: "", class: HTMLClasses.list }, h("calcite-list-item", { key: "box-plot-color", value: "box-plot-color", label: this.strings.boxPlotColor, selected: this.meanLinesBoxColorIsSelected, onClick: this.openSeriesPopOver }, h("calcite-icon", { slot: "content-end", icon: icon, style: { color: iconColor } }))));
    }
    /**
     * @category Render UX
     */
    renderMultipleSeriesOption() {
        const meanLinesDisabled = this.shouldDisableMeanLinesOption();
        return !meanLinesDisabled
            ? [
                h("div", { class: `${HTMLClasses.sectionLabel} ${HTMLClasses.topSection}` }, this.strings.displayMultipleSeries),
                h("calcite-list", { label: "", class: HTMLClasses.list, selectionMode: "single-persist", selectionAppearance: "border", onClick: this.onMultipleSeriesSelect }, h("calcite-list-item", { label: this.strings.sideBySide, value: WebChartBoxPlotMultipleSeriesKinds.Side, selected: this.model.getShowMeanLines() !== true }, h("calcite-icon", { slot: "content-start", scale: "l", icon: "graph-box-side-by-side" }), h("calcite-icon", { class: HTMLClasses.infoIcon, slot: "actions-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: (e) => this.createTooltip(e, this.strings.sideBySideTooltip), onMouseOut: this.destroyTooltip })), h("calcite-list-item", { label: this.strings.meanLines, value: WebChartBoxPlotMultipleSeriesKinds.MeanLines, disabled: meanLinesDisabled, selected: this.model.getShowMeanLines() === true }, h("calcite-icon", { slot: "content-start", scale: "l", icon: "graph-box-mean-lines" }), h("calcite-icon", { class: HTMLClasses.infoIcon, slot: "actions-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: (e) => this.createTooltip(e, this.strings.meanLinesTooltip), onMouseOut: this.destroyTooltip }))),
                this.model.getShowMeanLines() === true ? this.renderMeanLinesBoxColorItem() : null,
            ]
            : [];
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: 'd0ae5b1967c07286e9715eec73bc545c1bc2f5d8' }, this.renderMultipleSeriesOption(), h("div", { key: '03827b8daedfa818a995b05dfe1c83adec045994', class: HTMLClasses.sectionLabel }, this.strings.series, h("calcite-button", { key: '52a49fd526283240fb3fe8174f3356e7f87bd2fa', onClick: this.resetSeriesOriginal, disabled: !this.model.resetAvailable(), appearance: "transparent", iconEnd: "reset" }, this.strings.reset)), this.buildSeriesList()));
    }
    /**
     * @category Private
     */
    setupSeriesPopover() {
        if (isNil(this.seriesPopover) && this.hostElement !== undefined) {
            // seriesPopover config
            const popoverConfig = {
                seriesNameChange: this.seriesNameChange,
                seriesColorChange: this.seriesColorChange,
                seriesLineStyleChange: this.seriesLineStyleChange,
                seriesLineWidthChange: this.seriesLineWidthChange,
                openChange: this.openChange,
                hostElement: this.hostElement,
                placement: this.popoverPlacement,
                labelCanBeConfigured: !this.meanLinesBoxColorIsSelected,
                popoverClose: this.seriesPopoverClose,
            };
            // create a new seriesPopover
            this.seriesPopover = Zy(Qy.BoxPlotSeriesPopover, popoverConfig);
        }
    }
    /**
     * @category Private
     */
    addSeriesPopover() {
        if (this.seriesPopover !== null && !document.body.contains(this.seriesPopover)) {
            document.body.appendChild(this.seriesPopover);
        }
        this.seriesPopoverChange(true);
    }
    /**
     * @category Private
     */
    shouldDisableMeanLinesOption() {
        return this.model.getSplitByField() === "" || this.model.getSplitByField() === undefined;
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get watchers() { return {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"],
        "meanLinesBoxColorIsSelected": ["meanLinesBoxColorIsSelectedChange"]
    }; }
    static get style() { return ArcgisChartsConfigBoxPlotSeriesStyle0; }
}, [1, "arcgis-charts-config-box-plot-series", {
        "model": [16],
        "configSeriesOpen": [1028, "config-series-open"],
        "activeColorMatch": [4, "active-color-match"],
        "popoverPlacement": [1, "popover-placement"],
        "selectedSeriesIndex": [32],
        "meanLinesBoxColorIsSelected": [32],
        "updatesOccurred": [32]
    }, undefined, {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"],
        "meanLinesBoxColorIsSelected": ["meanLinesBoxColorIsSelectedChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-box-plot-series"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-box-plot-series":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigBoxPlotSeries);
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigBoxPlotSeries as A, defineCustomElement as d };
