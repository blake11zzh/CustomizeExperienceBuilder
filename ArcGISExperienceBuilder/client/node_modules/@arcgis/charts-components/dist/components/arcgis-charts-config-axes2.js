/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { proxyCustomElement, HTMLElement, getAssetPath, h, Host } from '@stencil/core/internal/client';
import { M as Mn } from './index2.js';
import { d as defineCustomElement$3 } from './arcgis-charts-config-axis2.js';
import { d as defineCustomElement$2 } from './arcgis-charts-config-category-format2.js';
import { d as defineCustomElement$1 } from './arcgis-charts-config-number-format2.js';

const arcgisChartsConfigAxesCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width)}";
const ArcgisChartsConfigAxesStyle0 = arcgisChartsConfigAxesCss;

const ArcGISChartsConfigAxes = /*@__PURE__*/ proxyCustomElement(class ArcGISChartsConfigAxes extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.model = undefined;
        this.calculatedDataMinMaxBounds = undefined;
        this.open = false;
        this.showMinXBoundOption = true;
        this.showMaxXBoundOption = true;
        this.showMinYBoundOption = true;
        this.showMaxYBoundOption = true;
        this.showEnableXLogOption = true;
        this.showEnableYLogOption = true;
        this.calculatedMinMaxBounds = undefined;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category private
     */
    getMinFromCalculatedDataBounds(xAxis) {
        const dataMin = this.calculatedDataMinMaxBounds?.find((bound) => bound.isXAxis === xAxis)
            ?.minimum ?? Number.NaN;
        return dataMin;
    }
    /**
     * @category private
     */
    getMaxFromCalculatedDataBounds(xAxis) {
        const dataMax = this.calculatedDataMinMaxBounds?.find((bound) => bound.isXAxis === xAxis)
            ?.maximum ?? Number.NaN;
        return dataMax;
    }
    /**
     * @category Lifecycle
     */
    render() {
        const calculatedXBounds = this.calculatedMinMaxBounds?.find((payload) => payload.isXAxis);
        const calculatedYBounds = this.calculatedMinMaxBounds?.find((payload) => !payload.isXAxis);
        return (h(Host, { key: '001e1c475d054c28f319928ef29f7cd73aabaa31' }, h("arcgis-charts-config-axis", { key: 'fbd8b1f0ee87d8a03fd976865933f3813fcd9d9b', model: this.model, isXAxis: true, axisTitle: this.strings.xAxis, showMinBoundOption: this.showMinXBoundOption, showMaxBoundOption: this.showMaxXBoundOption, showEnableLogOption: this.showEnableXLogOption, dataMinValue: this.getMinFromCalculatedDataBounds(true), dataMaxValue: this.getMaxFromCalculatedDataBounds(true), initialMaxBound: calculatedXBounds?.maximum, initialMinBound: calculatedXBounds?.minimum }), h("arcgis-charts-config-axis", { key: '0711b7f0b85d58b3796ab3a51640b855681c9a78', model: this.model, isXAxis: false, axisTitle: this.strings.yAxis, showMinBoundOption: this.showMinYBoundOption, showMaxBoundOption: this.showMaxYBoundOption, showEnableLogOption: this.showEnableYLogOption, dataMinValue: this.getMinFromCalculatedDataBounds(false), dataMaxValue: this.getMaxFromCalculatedDataBounds(false), initialMaxBound: calculatedYBounds?.maximum, initialMinBound: calculatedYBounds?.minimum })));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return this; }
    static get style() { return ArcgisChartsConfigAxesStyle0; }
}, [1, "arcgis-charts-config-axes", {
        "model": [16],
        "calculatedDataMinMaxBounds": [16],
        "open": [516],
        "showMinXBoundOption": [4, "show-min-x-bound-option"],
        "showMaxXBoundOption": [4, "show-max-x-bound-option"],
        "showMinYBoundOption": [4, "show-min-y-bound-option"],
        "showMaxYBoundOption": [4, "show-max-y-bound-option"],
        "showEnableXLogOption": [4, "show-enable-x-log-option"],
        "showEnableYLogOption": [4, "show-enable-y-log-option"],
        "calculatedMinMaxBounds": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-charts-config-axes", "arcgis-charts-config-axis", "arcgis-charts-config-category-format", "arcgis-charts-config-number-format"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-charts-config-axes":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcGISChartsConfigAxes);
            }
            break;
        case "arcgis-charts-config-axis":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "arcgis-charts-config-category-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "arcgis-charts-config-number-format":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcGISChartsConfigAxes as A, defineCustomElement as d };
