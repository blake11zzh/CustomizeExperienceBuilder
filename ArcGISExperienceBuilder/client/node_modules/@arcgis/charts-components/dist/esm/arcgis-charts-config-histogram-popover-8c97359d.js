/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { r as registerInstance, c as createEvent, g as getAssetPath, h, H as Host, a as getElement } from './index-accb48c0.js';
import { u as RESTSymbolType, M as Mn, A as eu, I as Ic, C as Tl, L as Hn } from './rest-js-object-literals-a5a8eefc.js';
import { U as UIDefaults, g as getPopoverOffsetDistance } from './chart-ui-utils-0ccca40a.js';
import { H as HistogramDataPopoverKinds } from './interfaces-f2a30723.js';
import { b as WebChartDataTransformations } from './chart-object-literals-d22e2547.js';

const HTMLClasses = {
    symbolPropertyPopover: "symbol-property-popover",
    colorPicker: "color-picker",
    jsAppFlyout: "js-app-flyout",
    header: "header",
    pickListItemLabel: "pick-list-item-label",
    fieldSelectPanel: "field-select-panel",
    transformationPanel: "transformation-panel",
    rtl: "arcgis-chart-rtl",
};

const arcgisChartsConfigHistogramPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.right{display:block;text-align:right}.inline{display:inline-flex;flex-wrap:wrap}.symbol-property-popover{min-width:300px}.symbol-property-popover .inline{align-items:center;margin-bottom:1rem;padding:0 1rem}.symbol-property-popover .inline calcite-action{margin-left:0.2rem}.symbol-property-popover .inline input,.symbol-property-popover .inline select{width:4rem;margin-left:0.5rem;height:24px}.symbol-property-popover .inline select{width:6rem}.symbol-property-popover .color calcite-icon{margin-left:0.5rem}.symbol-property-popover .color .color-picker{padding:1rem}.header{margin:0;font-weight:bolder}.pick-list-item-label{font-size:small}.field-select-panel{max-height:60vh}.transformation-panel{width:calc(var(--calcite-panel-width-multiplier) * 12vw);max-width:calc(var(--calcite-panel-width-multiplier) * 300px);min-width:calc(var(--calcite-panel-width-multiplier) * 150px);min-width:calc(var(--calcite-panel-width-multiplier) * 170px)}:host(.arcgis-charts-rtl) .symbol-property-popover .inline calcite-action{margin-left:0rem;margin-right:0.2rem}:host(.arcgis-charts-rtl) .symbol-property-popover .inline input,:host(.arcgis-charts-rtl) .symbol-property-popover .inline select{margin-left:0rem;margin-right:0.5rem}:host(.arcgis-charts-rtl) .symbol-property-popover .color calcite-icon{margin-left:0rem;margin-right:0.5rem}";
const ArcgisChartsConfigHistogramPopoverStyle0 = arcgisChartsConfigHistogramPopoverCss;

const ArcgisChartsConfigHistogramPopover = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisChartsConfigHistogramPopoverSymbolChange = createEvent(this, "arcgisChartsConfigHistogramPopoverSymbolChange", 7);
        this.arcgisChartsConfigHistogramPopoverChange = createEvent(this, "arcgisChartsConfigHistogramPopoverChange", 7);
        this.arcgisChartsConfigPopoverClose = createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            if (this.open || this.popoverElement?.open === false) {
                this.open = false;
                this.arcgisChartsConfigPopoverClose.emit();
            }
        };
        /**
         * @category Event handler
         */
        this.overlaySymbolChange = (e) => {
            this.arcgisChartsConfigHistogramPopoverSymbolChange.emit(e.detail);
        };
        /**
         * @category Event handler
         */
        this.fillColorChange = (e) => {
            const color = e.detail;
            const [r, g, b] = color;
            const a = Hn * 255;
            this.arcgisChartsConfigHistogramPopoverSymbolChange.emit({
                type: RESTSymbolType.SFS,
                color: [r, g, b, a],
            });
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onPickListChange = (e) => {
            if (e.target !== null) {
                this.arcgisChartsConfigHistogramPopoverChange.emit({
                    contentKind: this.contentKind,
                    value: e.target.selectedItems[0].value,
                });
                this.open = false;
            }
        };
        this.layerFieldsInfo = undefined;
        this.headingTitle = undefined;
        this.selectedNumericField = undefined;
        this.selectedTransformationType = undefined;
        this.selectedOverlaySymbol = undefined;
        this.selectedBinColor = undefined;
        this.referenceElement = undefined;
        this.contentKind = undefined;
        this.placement = undefined;
        this.open = undefined;
    }
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange() {
        this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await Mn(this.hostElement, getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.openChange();
    }
    /**
     * @category Lifestyle
     */
    componentDidRender() {
        setTimeout(async () => {
            await this.picklist?.setFocus();
        }, UIDefaults.PopoverTimer);
        eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, UIDefaults.PopoverTimer);
    }
    /**
     * @category Render UX
     */
    renderFillColor() {
        return (h("arcgis-charts-config-color-style", { class: HTMLClasses.colorPicker, header: this.headingTitle ?? this.strings.fillColor, enableClose: true, open: this.open, selectedColor: this.selectedBinColor?.color, onArcgisChartsConfigColorStyleChange: this.fillColorChange, onArcgisChartsConfigColorStyleClose: this.closePopover }));
    }
    /**
     * @category Render UX
     */
    renderOverlayStyle() {
        return (h("arcgis-charts-config-line-style", { class: HTMLClasses.colorPicker, open: this.open, enableClose: true, header: this.headingTitle ?? this.strings.lineStyle, lineStyle: this.selectedOverlaySymbol, onArcgisChartsConfigLineStyleClose: this.closePopover, onArcgisChartsConfigLineStyleChange: this.overlaySymbolChange }));
    }
    /**
     * @category Render UX
     */
    renderFieldSelect() {
        const items = this.buildPickListItems(HistogramDataPopoverKinds.numericFields);
        return (h("calcite-panel", { class: HTMLClasses.fieldSelectPanel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, h("div", { slot: "header-content", class: HTMLClasses.header }, this.strings.numericalFieldHeader), h("calcite-list", { label: "", selectionMode: "single", selectionAppearance: "border", class: HTMLClasses.pickListItemLabel, filterEnabled: true, onCalciteListChange: this.onPickListChange, ref: (e) => {
                this.picklist = e;
            } }, items)));
    }
    /**
     * @category Render UX
     */
    renderTransformationSelect() {
        const items = this.buildPickListItems(HistogramDataPopoverKinds.transformation);
        return (h("calcite-panel", { class: HTMLClasses.transformationPanel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, h("div", { slot: "header-content", class: HTMLClasses.header }, this.strings.transformationHeader), h("calcite-list", { label: "", selectionMode: "single", selectionAppearance: "border", class: HTMLClasses.pickListItemLabel, filterEnabled: false, onCalciteListChange: this.onPickListChange }, items)));
    }
    /**
     * @param itemKind
     * @category Private
     */
    buildPickListItems(itemKind) {
        const pickListItems = [];
        if (itemKind === HistogramDataPopoverKinds.numericFields) {
            for (let i = 0; i < this.layerFieldsInfo?.length; i += 1) {
                const field = this.layerFieldsInfo[i];
                if (Ic(field)) {
                    pickListItems.push(h("calcite-list-item", { key: field.name, label: Tl(this.layerFieldsInfo, field.name), value: field.name, selected: this.selectedNumericField === field.name }));
                }
            }
        }
        else {
            const transformationPickListItems = [
                h("calcite-list-item", { label: this.strings.none, key: WebChartDataTransformations.None, value: WebChartDataTransformations.None, selected: this.selectedTransformationType === WebChartDataTransformations.None }),
                h("calcite-list-item", { label: this.strings.log, key: WebChartDataTransformations.Log, value: WebChartDataTransformations.Log, selected: this.selectedTransformationType === WebChartDataTransformations.Log }),
                h("calcite-list-item", { label: this.strings.sqRt, key: WebChartDataTransformations.Sqrt, value: WebChartDataTransformations.Sqrt, selected: this.selectedTransformationType === WebChartDataTransformations.Sqrt }),
            ];
            pickListItems.push(...transformationPickListItems);
        }
        return pickListItems;
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: '82938fb4fd825c30c06d053a9ae2a82f1746a53a', class: { [HTMLClasses.rtl]: this.direction === "rtl", [HTMLClasses.jsAppFlyout]: true } }, h("calcite-popover", { key: '17948d475aeacf7b2c09995f41a465a425e69939', class: this.getPopoverClass(), referenceElement: this.referenceElement, placement: this.placement, onCalcitePopoverClose: this.closePopover, open: this.open, offsetDistance: getPopoverOffsetDistance(this.placement), ref: (e) => {
                this.popoverElement = e;
            }, label: "" }, this.renderContentType())));
    }
    /**
     * @category Private
     */
    getPopoverClass() {
        return this.contentKind === HistogramDataPopoverKinds.fillSymbol ||
            this.contentKind === HistogramDataPopoverKinds.lineSymbol
            ? HTMLClasses.symbolPropertyPopover
            : "";
    }
    /**
     * @category Private
     */
    renderContentType() {
        switch (this.contentKind) {
            case HistogramDataPopoverKinds.fillSymbol:
                return this.renderFillColor();
            case HistogramDataPopoverKinds.lineSymbol:
                return this.renderOverlayStyle();
            case HistogramDataPopoverKinds.numericFields:
                return this.renderFieldSelect();
            case HistogramDataPopoverKinds.transformation:
                return this.renderTransformationSelect();
            default:
                return undefined;
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return getElement(this); }
    static get watchers() { return {
        "open": ["openChange"]
    }; }
};
ArcgisChartsConfigHistogramPopover.style = ArcgisChartsConfigHistogramPopoverStyle0;

export { ArcgisChartsConfigHistogramPopover as A };
