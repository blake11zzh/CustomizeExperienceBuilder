/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { r as registerInstance, c as createEvent, g as getAssetPath, h, H as Host, a as getElement } from './index-accb48c0.js';
import { Z as Zf } from './index-5e57070e.js';
import { a5 as Jy, ac as eo, M as Mn, ab as Cl, C as Tl, Z as Zy, r as Qy, m as ml } from './rest-js-object-literals-a5a8eefc.js';
import { a as BoxPlotDataPopoverKinds, c as ButtonDirections } from './interfaces-f2a30723.js';
import { d as deleteMinMaxAxisKey, s as state } from './store-b7e98551.js';
import { U as UIDefaults, c as createActionTooltip, d as destroyActionTooltip } from './chart-ui-utils-0ccca40a.js';
import { i as isEqual } from './isEqual-963b8247.js';
import { W as WebChartTypes, f as WebChartBoxPlotMultipleSeriesKinds } from './chart-object-literals-d22e2547.js';
import { i as isNil } from './isNil-5d78975f.js';
import './_Uint8Array-86192c3c.js';
import './_Map-474d2383.js';
import './isObject-5bd27635.js';
import './_getAllKeys-fdafe2a8.js';
import './_getTag-78bbf0d8.js';

const HTMLClasses$1 = {
    label: "label",
    text: "text",
    fieldList: "field-list",
    fab: "fab",
    disabledLabel: "disabled-label",
    dimText: "dim-text",
    rtl: "arcgis-charts-rtl",
    list: "list",
    customSortButtons: "custom-sort-buttons",
};

const arcgisChartsConfigBoxPlotDataCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}:host(.arcgis-chart-rtl) .text{margin-left:0rem;margin-right:var(--arcgis-charts-config-margin-minor)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.custom-sort-buttons{display:flex;justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}";
const ArcgisChartsConfigBoxPlotDataStyle0 = arcgisChartsConfigBoxPlotDataCss;

const ArcGISChartsConfigBoxPlotData = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisChartsConfigDataChangeError = createEvent(this, "arcgisChartsConfigDataChangeError", 7);
        /**
         * @category Private
         */
        this.boxPlotPopover = null;
        /**
         * @category Private
         * List of original custom sort labels
         * Used to reset the custom sort labels
         */
        this.originalCustomSortLabels = [];
        /**
         * @category Private
         *
         * Flag to disable the custom sort list.
         */
        this.isCustomSortDisabled = false;
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                this.model.moveCustomSortValuesInOrderByList(oldIndex, newIndex);
                this.customSortLabels = this.model.getOrderByList();
            }
        };
        /**
         * @category Event handler
         */
        this.onCustomSortItemSelected = (e) => {
            const { id } = e.target;
            // unselect the custom sort item in the custom sort' values list if it is already selected
            this.selectedCustomSortItemId = this.selectedCustomSortItemId === id ? "" : id;
        };
        /**
         * @category Event handler
         */
        this.onCustomSortItemMoved = (e) => {
            const { id } = e.target;
            let toIndex = this.customSortLabels.length;
            const fromIndex = this.customSortLabels.indexOf(this.selectedCustomSortItemId);
            // calculate the index to move the selected item to
            if (id === ButtonDirections.Up) {
                toIndex = fromIndex - 1;
            }
            else if (id === ButtonDirections.Down) {
                toIndex = fromIndex + 1;
            }
            // move the selected item to the calculated index only within the valid list bound
            if (fromIndex >= 0 && toIndex >= 0 && toIndex < this.customSortLabels.length) {
                this.model.moveCustomSortValuesInOrderByList(fromIndex, toIndex);
                this.customSortLabels = this.model.getOrderByList();
            }
        };
        /**
         * @category Event handler
         *
         * called when the category is clicked
         */
        this.onCategorySelect = () => {
            if (!this.categoryElement.disabled) {
                this.contentKind = BoxPlotDataPopoverKinds.category;
                this.setupPopover();
            }
        };
        /**
         * @category Event handler
         *
         * Called when individual numeric field item is removed.
         */
        this.onRemoveNumericField = async (removedItemEvent) => {
            const removedField = removedItemEvent.target.value;
            await this.model.setNumericFields(this.model.getNumericFields().filter((field) => field !== removedField));
            // update custom sort's value list if the numeric fields are changed
            await this.updateCustomSortProps();
            this.model.setOrderByList(this.customSortLabels);
        };
        /**
         * @category Private
         *
         * Update custom sort properties
         */
        this.updateCustomSortProps = async () => {
            const customSortValues = await this.model.getCustomSortValues();
            this.customSortLabels = customSortValues;
            this.originalCustomSortLabels = [...customSortValues];
            // enable/disable the custom sort list based on the number of custom sort labels
            const isCustomSortDisabled = customSortValues.length > UIDefaults.customSortLimit;
            if (isCustomSortDisabled) {
                this.sortOrderElement.label = this.strings.xAxisAsc;
                this.model.setSortOrder(Zf.xAxisAsc);
            }
            this.isCustomSortDisabled = isCustomSortDisabled;
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * @category Event handler
         */
        this.onStandardizeValuesChange = async (e) => {
            await this.model.setStandardizeValues(e.target.checked);
        };
        /**
         * @category Event handler
         */
        this.onShowOutliersChange = async (e) => {
            await this.model.setShowOutliers(e.target.checked);
        };
        /**
         * @category Event handler
         *
         * called when the category is clicked
         */
        this.onSplitBySelect = () => {
            if (!this.splitByFieldElement.disabled) {
                this.contentKind = BoxPlotDataPopoverKinds.splitByField;
                this.setupPopover();
            }
        };
        /**
         * @category Event handler
         *
         * called when the sort order is clicked
         */
        this.onSortOrderSelect = () => {
            this.contentKind = BoxPlotDataPopoverKinds.sortOrder;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the add numeric fields button is clicked
         */
        this.onAddNumericFields = () => {
            this.contentKind = BoxPlotDataPopoverKinds.numericFields;
            this.setupPopover();
        };
        /**
         * Close box plot popover
         * @category Private
         */
        this.popoverClose = (e) => {
            if (this.boxPlotPopover === e?.target) {
                this.boxPlotPopover = Jy(this.boxPlotPopover);
            }
        };
        /**
         * @category Event handler
         *
         * called in response to the arcgisChartsConfigBoxPlotDataPopoverChange event
         */
        this.onBoxPlotDataChange = async (e) => {
            try {
                if (e.detail !== null && e.detail?.value !== undefined) {
                    const { contentKind } = e.detail;
                    const newValue = [...e.detail.value];
                    // reset axes bounds for this chart in stencil store
                    deleteMinMaxAxisKey(state);
                    switch (contentKind) {
                        case BoxPlotDataPopoverKinds.category: {
                            const newCategory = newValue[0]?.trim() || eo;
                            await this.model.setCategory(newCategory);
                            // update custom sort's value list if the category field is changed
                            await this.updateCustomSortProps();
                            this.model.setOrderByList(this.customSortLabels);
                            break;
                        }
                        case BoxPlotDataPopoverKinds.numericFields: {
                            await this.model.setNumericFields(newValue);
                            // check whether selectedValues has multiple numeric fields
                            const isMultipleFields = newValue.length > 1;
                            // we only apply z-score for the box plot with multiple numeric fields
                            await this.model.setStandardizeValues(isMultipleFields);
                            // update custom sort's value list if the numeric fields are changed
                            await this.updateCustomSortProps();
                            this.model.setOrderByList(this.customSortLabels);
                            break;
                        }
                        case BoxPlotDataPopoverKinds.splitByField: {
                            const newSplitByField = newValue[0]?.trim() || "";
                            await this.model.setSplitByField(newSplitByField);
                            break;
                        }
                        case BoxPlotDataPopoverKinds.sortOrder:
                            {
                                const newSortOrder = newValue[0];
                                if (newSortOrder === Zf.customSort) {
                                    await this.updateCustomSortProps();
                                    this.model.setSortOrder(newSortOrder, this.customSortLabels);
                                }
                                else {
                                    this.model.setSortOrder(newSortOrder);
                                }
                            }
                            break;
                    }
                }
            }
            catch (error) {
                this.arcgisChartsConfigDataChangeError.emit({ error, model: this.model });
                throw error;
            }
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * @category Private
         */
        this.resetToOriginalCustomSortLabels = () => {
            this.selectedCustomSortItemId = "";
            this.model.setOrderByList([...this.originalCustomSortLabels]);
        };
        this.model = undefined;
        this.layerFieldsInfo = undefined;
        this.selectedCustomSortItemId = undefined;
        this.updatesOccurred = 0;
        this.customSortLabels = [];
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.boxPlotPopover = Jy(this.boxPlotPopover);
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
        this.currentDataFilter = this.model.getDataFilter();
        this.updateCustomSortProps();
    }
    /**
     * @category Lifecycle
     */
    componentWillRender() {
        const savedDataFilter = this.model.getDataFilter();
        if (!isEqual(savedDataFilter, this.currentDataFilter)) {
            this.updateCustomSortProps();
            this.currentDataFilter = this.model.getDataFilter();
        }
        else {
            this.customSortLabels = this.model.getOrderByList();
        }
        // split-by should be disabled if there are no numeric fields or if there are more than one numeric field and a category is selected
        this.disableSplitBy =
            this.model.getNumericFields().length === 0 ||
                (this.model.getNumericFields().length > 1 && this.model.getCategory() !== eo);
    }
    /**
     * @category Render UX
     */
    buildCustomSortListItems() {
        const customSortListItems = [];
        for (let index = 0; index < this.customSortLabels.length; index += 1) {
            const label = this.customSortLabels[index];
            const description = Cl(this.layerFieldsInfo, label);
            customSortListItems.push(h("calcite-list-item", { id: label, key: label, label: label ?? "", description: description, value: label, selected: this.selectedCustomSortItemId === label, onCalciteListItemSelect: this.onCustomSortItemSelected }, h("calcite-icon", { slot: "content-end" })));
        }
        return customSortListItems;
    }
    /**
     * @category Render UX
     */
    buildCustomSortList() {
        return (h("calcite-list", { label: "", class: HTMLClasses$1.list, dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildCustomSortListItems()));
    }
    renderCustomSortUI() {
        const sortOrder = this.model.getSortOrder();
        const valueType = this.model.getXAxisValueFormat()?.type;
        const index = this.customSortLabels.indexOf(this.selectedCustomSortItemId);
        const customSortListUI = valueType ===
            WebChartTypes.CategoryAxisFormat /*render the custom sort for the only fields with value format set to CategoryAxisFormat */ &&
            sortOrder === Zf.customSort &&
            !this.isCustomSortDisabled ? (h("calcite-label", { class: HTMLClasses$1.label }, h("div", { class: HTMLClasses$1.customSortButtons }, h("div", null, h("calcite-button", { appearance: "transparent", disabled: index === 0 || index === -1 || this.selectedCustomSortItemId.trim() === "", iconStart: "arrow-bold-up", id: ButtonDirections.Up, kind: "neutral", scale: "s", onClick: this.onCustomSortItemMoved }), h("calcite-button", { appearance: "transparent", disabled: index === -1 ||
                index === this.customSortLabels.length - 1 ||
                this.selectedCustomSortItemId.trim() === "", iconStart: "arrow-bold-down", id: ButtonDirections.Down, kind: "neutral", scale: "s", onClick: this.onCustomSortItemMoved })), h("calcite-button", { onClick: this.resetToOriginalCustomSortLabels, disabled: isEqual(this.customSortLabels, this.originalCustomSortLabels), appearance: "transparent", iconEnd: "reset" }, this.strings.reset)), this.model.getCategory() === eo ? this.strings.values : this.strings.category, this.buildCustomSortList())) : null;
        return customSortListUI;
    }
    /**
     * @category Render UX
     */
    renderNumericFields(fields) {
        const fieldList = [];
        for (let i = 0; i < fields.length; i += 1) {
            fieldList.push(this.buildNumericFieldItem(fields[i]));
        }
        return (h("calcite-list", { label: "", class: HTMLClasses$1.fieldList, ref: (e) => {
                this.numericFieldsElement = e;
            } }, fieldList));
    }
    /**
     * Note: using a calcite-action rather than the `closable={true}` property given
     * it was removing too many fields from the list when clicking on the "x" icon
     * @param field
     */
    buildNumericFieldItem(field) {
        return (h("calcite-list-item", { label: Tl(this.layerFieldsInfo, field), value: field, key: field, closable: true, onCalciteListItemClose: this.onRemoveNumericField }));
    }
    /**
     * @category Render UX
     */
    renderCategory() {
        const categoryString = this.getCorrectedCategoryValue();
        // category should be disabled if there are no numeric fields or if there are more than one numeric field and a split-by is selected
        const disabled = this.model.getNumericFields().length === 0 ||
            (this.model.getNumericFields().length > 1 && this.model.getSplitByField() !== "");
        return (h("arcgis-charts-config-field-select", { label: categoryString, disabled: disabled, ref: (e) => {
                this.categoryElement = e;
            }, onClick: this.onCategorySelect }));
    }
    /**
     * @category Render UX
     */
    renderSplitBy() {
        const splitByString = this.getCorrectedSplitByValue();
        return (h("arcgis-charts-config-field-select", { label: splitByString, disabled: this.disableSplitBy, ref: (e) => {
                this.splitByFieldElement = e;
            }, onClick: this.onSplitBySelect }));
    }
    /**
     * @category Render UX
     */
    renderSorting() {
        return (h("arcgis-charts-config-field-select", { label: this.strings[this.model.getSortOrder()], ref: (e) => {
                this.sortOrderElement = e;
            }, onClick: this.onSortOrderSelect }));
    }
    /**
     * @category Lifecycle
     */
    render() {
        const categoryUI = this.renderCategory();
        const numericFieldsUI = this.renderNumericFields([...this.model.getNumericFields()]);
        const splitByUI = this.renderSplitBy();
        const sortingUI = this.renderSorting();
        const customSortUI = this.renderCustomSortUI();
        return (h(Host, { key: 'cc75b64ad20cb075936afa26f80935ad5cdfe906', class: { [HTMLClasses$1.rtl]: this.direction === "rtl" } }, h("calcite-label", { key: '0dbf49c20d1777e0450ea64baff966cfdf51008d', class: HTMLClasses$1.label }, this.strings.numericFields, numericFieldsUI), h("div", { key: '3071277d5b95dee21a3e40d45bfb6c81afa6e0ae', class: HTMLClasses$1.fab }, h("calcite-fab", { key: '135d17641f4dd93b1f09b27de71885f93e26698a', appearance: "outline-fill", kind: "neutral", scale: "m", label: this.strings.selectNumericFields, "text-enabled": true, text: this.strings.selectNumericFields, icon: "plus", onClick: this.onAddNumericFields })), h("calcite-label", { key: '7baa4b742ffc4b357e208a87151d2d3e3e0f09a3', class: HTMLClasses$1.label }, h("div", { key: 'c7025c74ff2ac688fa57902a44dfcc966e40edb9' }, this.strings.category, " ", h("span", { key: '5c03d992841481729fb2396a751de07ac3bb4c8e', class: HTMLClasses$1.dimText }, "(", this.strings.optional, ")")), categoryUI), h("calcite-label", { key: '68ae7c61ce920aafa3e13c45c08bfd6dbda5b064', class: HTMLClasses$1.label }, h("div", { key: '7482d8325464608aa062e55293972bfd3e44b1cc', class: this.disableSplitBy ? HTMLClasses$1.dimText : "" }, this.strings.splitBy, " ", h("span", { key: 'b3cd9c2ccc08fc424cc939a5e0bab2fc5e689169', class: HTMLClasses$1.dimText }, "(", this.strings.optional, ")")), splitByUI), h("div", { key: '5f98ab70bb32bd3e81cd016eeb5a081c38ccc39d' }, this.model.getNumericFields().length > 1 ? (h("calcite-label", { class: HTMLClasses$1.label, layout: "inline-space-between" }, this.strings.standardizeValues, h("calcite-switch", { checked: this.model.getStandardizeValues(), onCalciteSwitchChange: this.onStandardizeValuesChange }))) : null), h("calcite-label", { key: '43e30d282adeae27b50a3a16d60454c26e582fbe', class: HTMLClasses$1.label, layout: "inline-space-between" }, this.strings.showOutliers, h("calcite-switch", { key: 'ece331d79f8ecfe2525dca40cfbe878584e97b50', checked: this.model.getShowOutliers(), onCalciteSwitchChange: this.onShowOutliersChange })), h("calcite-label", { key: '262ba118dd084bdf8b91d9927ec7d5ddb85de3da', class: HTMLClasses$1.label }, this.strings.sortOrder, sortingUI), customSortUI));
    }
    /**
     * @category Private
     */
    setupPopover() {
        // remove already existing chart popover
        // TODO: this is a hotfix for https://devtopia.esri.com/webgis/arcgis-charts/issues/5366
        // have to find a better way to do this
        this.boxPlotPopover = Jy(this.boxPlotPopover);
        // boxPlotPopover config
        const popoverConfig = {
            layerFieldsInfo: this.layerFieldsInfo,
            onBoxPlotDataChange: this.onBoxPlotDataChange,
            popoverClose: this.popoverClose,
        };
        // create a new boxPlotPopover
        this.boxPlotPopover = Zy(Qy.BoxPlotDataPopover, popoverConfig);
        if (this.boxPlotPopover !== null) {
            // switch content of box plot popover based on the provided content
            switch (this.contentKind) {
                case BoxPlotDataPopoverKinds.category:
                    this.boxPlotPopover.referenceElement = this.categoryElement;
                    this.boxPlotPopover.headingTitle = this.strings.categoryHeader;
                    this.boxPlotPopover.selectedContent =
                        this.model.getCategory() === eo ? "" : this.model.getCategory();
                    break;
                case BoxPlotDataPopoverKinds.numericFields:
                    this.boxPlotPopover.referenceElement = this.numericFieldsElement;
                    this.boxPlotPopover.headingTitle = this.strings.numericFieldsHeader;
                    this.boxPlotPopover.selectedContent = this.model.getNumericFields();
                    break;
                case BoxPlotDataPopoverKinds.splitByField:
                    this.boxPlotPopover.referenceElement = this.splitByFieldElement;
                    this.boxPlotPopover.headingTitle = this.strings.splitByFieldHeader;
                    this.boxPlotPopover.selectedContent = this.model.getSplitByField();
                    break;
                case BoxPlotDataPopoverKinds.sortOrder:
                    this.boxPlotPopover.referenceElement = this.sortOrderElement;
                    this.boxPlotPopover.headingTitle = this.strings.selectSortOrder;
                    this.boxPlotPopover.selectedContent = this.model.getSortOrder();
                    this.boxPlotPopover.isCustomSortDisabled = this.isCustomSortDisabled;
                    break;
            }
            this.boxPlotPopover.contentKind = this.contentKind;
            this.boxPlotPopover.open = true;
            this.addPopover();
        }
    }
    /**
     * @category Private
     */
    addPopover() {
        if (!document.body.contains(this.boxPlotPopover) && this.boxPlotPopover !== null) {
            document.body.appendChild(this.boxPlotPopover);
        }
    }
    /**
     * Get the split by value based on the current model's split by field.
     *
     * **NOTE**: If the split by field is empty or there are more than one numeric fields, return an empty string.
     * @category Private
     * @returns {string} - The corrected split by value.
     */
    getCorrectedSplitByValue() {
        return this.model.getSplitByField()?.trim() === ""
            ? ""
            : Tl(this.layerFieldsInfo, this.model.getSplitByField());
    }
    /**
     * Get the category value based on the current model's category field.
     *
     * **NOTE**: If the category field is the default value (`arcgis_charts_box_plot_category`), return an empty string.
     * @category Private
     * @returns {string} - The corrected category value.
     */
    getCorrectedCategoryValue() {
        return this.model.getCategory() === eo
            ? ""
            : Tl(this.layerFieldsInfo, this.model.getCategory());
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return getElement(this); }
    static get watchers() { return {
        "model": ["modelChange"]
    }; }
};
ArcGISChartsConfigBoxPlotData.style = ArcgisChartsConfigBoxPlotDataStyle0;

const HTMLClasses = {
    topSection: "top-section",
    sectionLabel: "section-label",
    list: "list",
    infoIcon: "info-icon",
};

const arcgisChartsConfigBoxPlotSeriesCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.top-section{margin-top:var(--arcgis-charts-config-margin-minor)}.section-label{display:flex;margin-bottom:var(--arcgis-charts-config-margin-major);margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.info-icon{margin:auto 1rem;pointer-events:auto}";
const ArcgisChartsConfigBoxPlotSeriesStyle0 = arcgisChartsConfigBoxPlotSeriesCss;

const ArcGISChartsConfigBoxPlotSeries = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisChartsConfigBoxPlotSeriesPopoverChange = createEvent(this, "arcgisChartsConfigBoxPlotSeriesPopoverChange", 7);
        this.arcgisChartsConfigPopoverOpenChange = createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.resetSeriesOriginal = () => {
            this.configSeriesOpen = false;
            this.selectedSeriesIndex = undefined;
            // reset series styling
            this.model.resetSeriesStyling();
        };
        /**
         * @category Event handler
         */
        this.onMultipleSeriesSelect = async (event) => {
            if (!this.shouldDisableMeanLinesOption()) {
                const target = event.target;
                const value = target.value ??
                    target.parentElement.value ??
                    "";
                await this.model.setShowMeanLines(value === WebChartBoxPlotMultipleSeriesKinds.MeanLines);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            if (event.detail !== null || event.detail !== undefined) {
                const name = event.detail?.name;
                this.model.setSeriesName(name, this.selectedSeriesIndex ?? -1);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesColorChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { color } = e.detail;
                if (color !== undefined) {
                    if (this.meanLinesBoxColorIsSelected) {
                        this.model.setMeanLinesBoxColor(color);
                    }
                    else {
                        this.model.setColorMatch(false);
                        this.model.setSeriesColor(color, this.selectedSeriesIndex ?? -1);
                    }
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineStyleChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { style } = e.detail;
                if (style !== undefined) {
                    this.model.setSeriesLineStyle(style, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.seriesLineWidthChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { width } = e.detail;
                if (width !== undefined) {
                    this.model.setSeriesLineWidth(width, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            const boxPlotSeriesIndex = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown();
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                let adjustedOldIndex = oldIndex;
                let adjustedNewIndex = newIndex;
                // If the mean line series is enabled, we need to adjust the indices to account for the box plot series
                if (boxPlotSeriesIndex !== -1) {
                    adjustedOldIndex = oldIndex >= boxPlotSeriesIndex ? oldIndex + 1 : oldIndex;
                    adjustedNewIndex = newIndex >= boxPlotSeriesIndex ? newIndex + 1 : newIndex;
                }
                this.model.moveSeries(adjustedOldIndex, adjustedNewIndex);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverClose = () => {
            this.selectedSeriesIndex = undefined;
            this.meanLinesBoxColorIsSelected = false;
            this.configSeriesOpen = false;
            this.seriesPopover = Jy(this.seriesPopover);
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverChange = (open) => {
            this.arcgisChartsConfigBoxPlotSeriesPopoverChange.emit({
                open,
                element: this.seriesPopover,
            });
        };
        /**
         * @category Event handler
         */
        this.openSeriesPopOver = (event) => {
            // The target can be either the list item or the icon
            const target = event.target;
            const listItem = target.localName === "calcite-list-item"
                ? target
                : target.parentNode;
            const negateConfigSeriesOpen = !this.configSeriesOpen;
            const seriesIndex = this.model.getSeriesIndex(listItem.value);
            if (seriesIndex !== undefined && seriesIndex !== -1) {
                this.configSeriesOpen = this.selectedSeriesIndex === seriesIndex ? negateConfigSeriesOpen : true;
                if (this.configSeriesOpen) {
                    this.selectedSeriesIndex = seriesIndex;
                }
                else {
                    this.selectedSeriesIndex = undefined;
                }
                this.meanLinesBoxColorIsSelected = false;
            }
            else if (listItem.value === "box-plot-color") {
                const negateMeanLinesBoxColorSelected = !this.meanLinesBoxColorIsSelected;
                this.configSeriesOpen = negateMeanLinesBoxColorSelected;
                this.meanLinesBoxColorIsSelected = negateMeanLinesBoxColorSelected;
                this.selectedSeriesIndex = undefined;
            }
        };
        /**
         * Creates a tooltip for the hovered action.
         * @category Event handler
         */
        this.createTooltip = (e, text) => {
            const iconElement = e.target;
            this.tooltip = createActionTooltip(iconElement);
            this.tooltip.innerHTML = text;
            // append tooltip to the document body instead of action element
            // to avoid tooltip being cut off by calcite panel header element
            document.body.appendChild(this.tooltip);
        };
        /**
         * Destroys tooltip for the action that was being hovered.
         * @category Event handler
         */
        this.destroyTooltip = () => {
            destroyActionTooltip(this.tooltip);
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * Emit event on open popover.
         * @param e
         * @category Private
         */
        this.openChange = (e) => {
            this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
        };
        this.model = undefined;
        this.configSeriesOpen = false;
        this.activeColorMatch = false;
        this.popoverPlacement = "leading";
        this.selectedSeriesIndex = undefined;
        this.meanLinesBoxColorIsSelected = false;
        this.updatesOccurred = 0;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Watch handler
     */
    selectedSeriesIndexChange() {
        if (this.selectedSeriesIndex !== undefined && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                // sync back to seriesPopover
                this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex);
                this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex);
                this.seriesPopover.isLineSymbol = this.model.getShowMeanLines() === true;
                this.seriesPopover.selectedLineStyle = this.model.getSeriesLineStyle(this.selectedSeriesIndex);
                this.seriesPopover.selectedLineWidth = this.model.getSeriesLineWidth(this.selectedSeriesIndex);
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Watch handler
     */
    meanLinesBoxColorIsSelectedChange() {
        if (this.meanLinesBoxColorIsSelected && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                this.seriesPopover.selectedColor = this.model.getMeanLinesBoxColor();
                this.seriesPopover.isLineSymbol = false;
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Private
     */
    removeSeriesPopover() {
        if (this.seriesPopover !== null && this.seriesPopover !== undefined) {
            this.seriesPopover.open = false;
            this.seriesPopover = Jy(this.seriesPopover);
        }
        this.seriesPopoverChange(false);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeSeriesPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Render UX
     */
    buildSeriesListItems() {
        const seriesLength = this.model.getSeriesLength();
        const seriesListItems = [];
        const boxPlotSeriesIndex = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown();
        for (let index = 0; index < seriesLength; index += 1) {
            // skip displaying the box plot series in the series list when mean lines are shown
            if (boxPlotSeriesIndex === index) {
                continue;
            }
            const id = this.model.getSeriesId(index);
            const color = this.model.getSeriesColor(index);
            const name = this.model.getSeriesName(index);
            const chartSubType = this.model.getChartSubType();
            const description = chartSubType === ml.BoxPlotMonoField || chartSubType === ml.BoxPlotMultiFields
                ? this.strings.series
                : id;
            // If `undefined` is provided for the series, we default the color icon to a grey minus square
            let iconColor = "#CCCCCC";
            let icon = "minus-square";
            if ((seriesLength > 1 || !this.activeColorMatch) && color !== undefined) {
                icon = this.model.getShowMeanLines() === true ? "line-solid" : "square-f";
                const [r, g, b, a] = [...color];
                iconColor = `rgba(${r},${g},${b},${a / 255})`;
            }
            seriesListItems.push(h("calcite-list-item", { key: id, label: name ?? id ?? "", description: description, value: id, selected: this.selectedSeriesIndex === index, onClick: this.openSeriesPopOver }, h("calcite-icon", { slot: "content-end", icon: icon, style: { color: iconColor } })));
        }
        return seriesListItems;
    }
    /**
     * @category Render UX
     */
    buildSeriesList() {
        return (h("calcite-list", { label: "", class: HTMLClasses.list, dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildSeriesListItems()));
    }
    /**
     * @category Render UX
     */
    renderMeanLinesBoxColorItem() {
        // If `undefined` is provided for the series, we default the color icon to a grey minus square
        let iconColor = "#CCCCCC";
        let icon = "minus-square";
        const color = this.model.getMeanLinesBoxColor();
        if (color !== undefined) {
            icon = "square-f";
            const [r, g, b, a] = [...color];
            iconColor = `rgba(${r},${g},${b},${a / 255})`;
        }
        return (h("calcite-list", { label: "", class: HTMLClasses.list }, h("calcite-list-item", { key: "box-plot-color", value: "box-plot-color", label: this.strings.boxPlotColor, selected: this.meanLinesBoxColorIsSelected, onClick: this.openSeriesPopOver }, h("calcite-icon", { slot: "content-end", icon: icon, style: { color: iconColor } }))));
    }
    /**
     * @category Render UX
     */
    renderMultipleSeriesOption() {
        const meanLinesDisabled = this.shouldDisableMeanLinesOption();
        return !meanLinesDisabled
            ? [
                h("div", { class: `${HTMLClasses.sectionLabel} ${HTMLClasses.topSection}` }, this.strings.displayMultipleSeries),
                h("calcite-list", { label: "", class: HTMLClasses.list, selectionMode: "single-persist", selectionAppearance: "border", onClick: this.onMultipleSeriesSelect }, h("calcite-list-item", { label: this.strings.sideBySide, value: WebChartBoxPlotMultipleSeriesKinds.Side, selected: this.model.getShowMeanLines() !== true }, h("calcite-icon", { slot: "content-start", scale: "l", icon: "graph-box-side-by-side" }), h("calcite-icon", { class: HTMLClasses.infoIcon, slot: "actions-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: (e) => this.createTooltip(e, this.strings.sideBySideTooltip), onMouseOut: this.destroyTooltip })), h("calcite-list-item", { label: this.strings.meanLines, value: WebChartBoxPlotMultipleSeriesKinds.MeanLines, disabled: meanLinesDisabled, selected: this.model.getShowMeanLines() === true }, h("calcite-icon", { slot: "content-start", scale: "l", icon: "graph-box-mean-lines" }), h("calcite-icon", { class: HTMLClasses.infoIcon, slot: "actions-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: (e) => this.createTooltip(e, this.strings.meanLinesTooltip), onMouseOut: this.destroyTooltip }))),
                this.model.getShowMeanLines() === true ? this.renderMeanLinesBoxColorItem() : null,
            ]
            : [];
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: 'd0ae5b1967c07286e9715eec73bc545c1bc2f5d8' }, this.renderMultipleSeriesOption(), h("div", { key: '03827b8daedfa818a995b05dfe1c83adec045994', class: HTMLClasses.sectionLabel }, this.strings.series, h("calcite-button", { key: '52a49fd526283240fb3fe8174f3356e7f87bd2fa', onClick: this.resetSeriesOriginal, disabled: !this.model.resetAvailable(), appearance: "transparent", iconEnd: "reset" }, this.strings.reset)), this.buildSeriesList()));
    }
    /**
     * @category Private
     */
    setupSeriesPopover() {
        if (isNil(this.seriesPopover) && this.hostElement !== undefined) {
            // seriesPopover config
            const popoverConfig = {
                seriesNameChange: this.seriesNameChange,
                seriesColorChange: this.seriesColorChange,
                seriesLineStyleChange: this.seriesLineStyleChange,
                seriesLineWidthChange: this.seriesLineWidthChange,
                openChange: this.openChange,
                hostElement: this.hostElement,
                placement: this.popoverPlacement,
                labelCanBeConfigured: !this.meanLinesBoxColorIsSelected,
                popoverClose: this.seriesPopoverClose,
            };
            // create a new seriesPopover
            this.seriesPopover = Zy(Qy.BoxPlotSeriesPopover, popoverConfig);
        }
    }
    /**
     * @category Private
     */
    addSeriesPopover() {
        if (this.seriesPopover !== null && !document.body.contains(this.seriesPopover)) {
            document.body.appendChild(this.seriesPopover);
        }
        this.seriesPopoverChange(true);
    }
    /**
     * @category Private
     */
    shouldDisableMeanLinesOption() {
        return this.model.getSplitByField() === "" || this.model.getSplitByField() === undefined;
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return getElement(this); }
    static get watchers() { return {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"],
        "meanLinesBoxColorIsSelected": ["meanLinesBoxColorIsSelectedChange"]
    }; }
};
ArcGISChartsConfigBoxPlotSeries.style = ArcgisChartsConfigBoxPlotSeriesStyle0;

export { ArcGISChartsConfigBoxPlotData as arcgis_charts_config_box_plot_data, ArcGISChartsConfigBoxPlotSeries as arcgis_charts_config_box_plot_series };
