/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
class AxisModelWrapper {
    /**
     * `AxisModelWrapper` constructor.
     * @param model The wrapped chart model.
     * @param isXAxis Whether the wrapper is for X-axis or Y-axis.
     */
    constructor(model, isXAxis) {
        this.model = model;
        this.isXAxis = isXAxis;
    }
    getMaxBound() {
        return (this.isXAxis ? this.model.getMaxXBound() : this.model.getMaxYBound()) ?? Number.NaN;
    }
    async setMaxBound(newMaxBound) {
        if (this.isXAxis) {
            await this.model.setMaxXBound(newMaxBound);
        }
        else {
            await this.model.setMaxYBound(newMaxBound);
        }
    }
    getMinBound() {
        return (this.isXAxis ? this.model.getMinXBound() : this.model.getMinYBound()) ?? Number.NaN;
    }
    async setMinBound(newMinBound) {
        if (this.isXAxis) {
            await this.model.setMinXBound(newMinBound);
        }
        else {
            await this.model.setMinYBound(newMinBound);
        }
    }
    getValueFormat() {
        return this.isXAxis ? this.model.getXAxisValueFormat() : this.model.getYAxisValueFormat();
    }
    async setValueFormat(newValueFormat) {
        if (this.isXAxis) {
            await this.model.setXAxisValueFormat(newValueFormat);
        }
        else {
            await this.model.setYAxisValueFormat(newValueFormat);
        }
    }
    getLogarithmic() {
        return (this.isXAxis ? this.model.getXLogarithmic() : this.model.getYLogarithmic()) ?? false;
    }
    async setLogarithmic(newLogarithmicState) {
        if (this.isXAxis) {
            await this.model.setXLogarithmic(newLogarithmicState);
        }
        else {
            await this.model.setYLogarithmic(newLogarithmicState);
        }
    }
}

export { AxisModelWrapper as A };
