/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
import { r as registerInstance, c as createEvent, g as getAssetPath, h, H as Host, a as getElement } from './index-accb48c0.js';
import { M as Mn, u as RESTSymbolType, $ as RESTSimpleLineSymbolStyle } from './rest-js-object-literals-a5a8eefc.js';
import { f as isCalciteInputValidNumber, m as modifyCalciteInputStatus, s as sanitizeNumber, b as UIInputStatus } from './chart-ui-utils-0ccca40a.js';
import './index-5e57070e.js';
import './interfaces-f2a30723.js';

const HTMLClasses$1 = {
    colorStyleContainer: "color-style-container",
};

const arcgisChartsConfigColorStyleCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{overflow-y:auto;width:-moz-min-content;width:min-content}:host calcite-panel .color-style-container{display:flex;padding:0 1rem;margin-top:1rem}:host calcite-panel .color-style-container calcite-label{flex:1 1 0px;display:flex;width:0px}.color-styling-panel>.panel-body{padding:var(--arcgis-charts-panel-padding);margin-top:var(--arcgis-charts-inter-section-margin)}";
const ArcgisChartsConfigColorStyleStyle0 = arcgisChartsConfigColorStyleCss;

const ArcgisChartsConfigColorStyle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisChartsConfigColorStyleChange = createEvent(this, "arcgisChartsConfigColorStyleChange", 7);
        this.arcgisChartsConfigColorStyleClose = createEvent(this, "arcgisChartsConfigColorStyleClose", 7);
        /**
         * @category Event handler
         */
        this.closePanel = (e) => {
            const panel = e.target;
            if (panel.closed && this.enableClose) {
                this.open = false;
                this.arcgisChartsConfigColorStyleClose.emit();
            }
        };
        /**
         * @category Event handler
         */
        this.colorChange = (e) => {
            this.selectedColor = e.detail;
            this.arcgisChartsConfigColorStyleChange.emit(this.selectedColor);
        };
        this.header = undefined;
        this.selectedColor = undefined;
        this.open = undefined;
        this.enableClose = false;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (h(Host, { key: 'b50e22358bbb59a9ff3a2a891bb1ad7d3936f5f6' }, h("calcite-panel", { key: 'f4d233ed1ae74b6dfbfc01d0ae6a6306a3f603a5', heading: this.header ?? this.strings.header, closed: this.open === false, closable: this.enableClose, onCalcitePanelClose: this.closePanel }, h("div", { key: 'b7318596eff23fe15c1f778a83624ebe19783be9', class: HTMLClasses$1.colorStyleContainer }, h("arcgis-charts-config-colors", { key: 'e72288a17ccc4f2a8d7a5fcae244671f9be13c78', onColorSelect: this.colorChange, rgba: this.selectedColor })))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return getElement(this); }
};
ArcgisChartsConfigColorStyle.style = ArcgisChartsConfigColorStyleStyle0;

const HTMLClasses = {
    sizeSection: "size-section",
    dropdownText: "dropdown-text",
    colorPickerContainer: "color-picker-container",
};

const arcgisChartsConfigLineStyleCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{overflow-y:auto}:host arcgis-charts-config-colors{padding:var(--arcgis-charts-panel-padding);padding-bottom:1rem}:host .size-section{padding:1rem;display:flex}:host .size-section calcite-label{flex:1 1 0px;width:0}:host .size-section calcite-label .dropdown-text{max-width:75px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}:host .color-picker-container{display:flex}:host .color-picker-container calcite-label{flex:1 1 0px;width:0}:host .color-picker-container calcite-label .dropdown-text{max-width:75px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}";
const ArcgisChartsConfigLineStyleStyle0 = arcgisChartsConfigLineStyleCss;

const ArcgisChartsConfigLineStyle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisChartsConfigLineStyleChange = createEvent(this, "arcgisChartsConfigLineStyleChange", 7);
        this.arcgisChartsConfigLineStyleClose = createEvent(this, "arcgisChartsConfigLineStyleClose", 7);
        /**
         * @category Event handler
         */
        this.closePanel = (e) => {
            const panel = e.target;
            if (panel.closed && this.enableClose === true) {
                this.open = false;
                this.arcgisChartsConfigLineStyleClose.emit();
            }
        };
        /**
         * @category Event handler
         */
        this.colorChange = (e) => {
            this.lineStyle.color = e.detail;
            this.emitLineStyleEvent();
        };
        /**
         * @category Event handler
         */
        this.lineStyleChange = () => {
            const styleValue = this.lineStyleDropdownElement.selectedItems[0].accessKey;
            if (this.lineStyle.style !== styleValue) {
                this.lineStyle.style = styleValue;
                this.lineStyle = { ...this.lineStyle };
                this.emitLineStyleEvent();
            }
        };
        /**
         * @category Event handler
         */
        this.selectedLineStyle = () => {
            let icon;
            let style;
            switch (this.lineStyle?.style) {
                case RESTSimpleLineSymbolStyle.Dot:
                    icon = "line-dotted";
                    style = this.strings.dot;
                    break;
                case RESTSimpleLineSymbolStyle.Dash:
                    icon = "line-dashed";
                    style = this.strings.dash;
                    break;
                case RESTSimpleLineSymbolStyle.Solid:
                default:
                    icon = "line-solid";
                    style = this.strings.solid;
                    break;
            }
            return { icon, style };
        };
        /**
         * @category Event handler
         */
        this.widthChange = () => {
            const { value } = this.lineWidthInputElement;
            if (value !== undefined &&
                isCalciteInputValidNumber(value, this.lineWidthInputElement.min, this.lineWidthInputElement.max)) {
                this.lineStyle.width = Number.parseInt(value);
                this.emitLineStyleEvent();
                modifyCalciteInputStatus({
                    inputElement: this.lineWidthInputElement,
                    status: UIInputStatus.IDLE,
                });
            }
            else {
                modifyCalciteInputStatus({
                    inputElement: this.lineWidthInputElement,
                    status: UIInputStatus.INVALID,
                });
            }
        };
        this.lineStyle = {
            type: RESTSymbolType.SLS,
        };
        this.header = undefined;
        this.open = undefined;
        this.enableClose = undefined;
        this.usePanel = undefined;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await Mn(this.hostElement, getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    render() {
        const configurationUI = [
            h("div", { key: 'ffb9d029bda4518ad7a2c741edb975a73499de1c', class: HTMLClasses.sizeSection }, h("calcite-label", { key: '04bc8db5062d2dafc459d93dc5ddb175c68416a7' }, this.strings.style, h("calcite-dropdown", { key: 'd13018c9b957fffede243ae116677705054753a0', onCalciteDropdownSelect: this.lineStyleChange, ref: (e) => {
                    this.lineStyleDropdownElement = e;
                } }, h("calcite-button", { key: 'c160e194fd50461546345202513faf2a3922b200', iconEnd: this.selectedLineStyle().icon, slot: "trigger", kind: "neutral", appearance: "outline-fill", scale: "m" }, h("label", { key: 'b4babfa586ce7855a7d798d8a47f589d7ff7ab86', class: HTMLClasses.dropdownText }, this.selectedLineStyle().style)), h("calcite-dropdown-group", { key: '91e5d973bc12bbf73e7771fda1587906b7d56e5d' }, h("calcite-dropdown-item", { key: '3708b73623caee3cfdaf43880f41d5d7a85db3d9', iconEnd: "line-solid", selected: this.lineStyle?.style === RESTSimpleLineSymbolStyle.Solid, accessKey: RESTSimpleLineSymbolStyle.Solid }, this.strings.solid), h("calcite-dropdown-item", { key: 'cd867a08bd4ea706db70045413358926b8b1112d', iconEnd: "line-dotted", selected: this.lineStyle?.style === RESTSimpleLineSymbolStyle.Dot, accessKey: RESTSimpleLineSymbolStyle.Dot }, this.strings.dot), h("calcite-dropdown-item", { key: '36f7be35cd98e53497dbe151645411b64975c81c', iconEnd: "line-dashed", selected: this.lineStyle?.style === RESTSimpleLineSymbolStyle.Dash, accessKey: RESTSimpleLineSymbolStyle.Dash }, this.strings.dash)))), h("calcite-label", { key: '50bc1c39c575f4c7ee8146f99d0164309fa96869' }, this.strings.width, h("calcite-input", { key: '483565e6e137fe70378967b09a0ccfd6df30c542', type: "number", min: 1, step: "any", value: sanitizeNumber(this.lineStyle?.width), onCalciteInputInput: this.widthChange, ref: (e) => {
                    this.lineWidthInputElement = e;
                } }))),
            h("div", { key: '63993ae9c847300d1cbb35ef201015a6430fa997', class: HTMLClasses.colorPickerContainer }, h("arcgis-charts-config-colors", { key: 'a5fda2ff9bb39963a2d174dcd289eb497376b160', rgba: this.lineStyle?.color ?? undefined, onColorSelect: this.colorChange })),
        ];
        return (h(Host, { key: '85f53f8745e8088bcca329ded0ecee25ddad1504' }, this.usePanel !== false ? (h("calcite-panel", { heading: this.header ?? this.strings.header, closed: this.open === false, closable: this.enableClose, onCalcitePanelClose: this.closePanel }, configurationUI)) : (configurationUI)));
    }
    /**
     * @category Private
     */
    emitLineStyleEvent() {
        if (Number.isNaN(Number.parseInt(this.lineStyle?.color?.[0]?.toString() ?? ""))) {
            this.lineStyle.color = undefined;
        }
        this.arcgisChartsConfigLineStyleChange.emit(this.lineStyle);
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return getElement(this); }
};
ArcgisChartsConfigLineStyle.style = ArcgisChartsConfigLineStyleStyle0;

export { ArcgisChartsConfigColorStyle as arcgis_charts_config_color_style, ArcgisChartsConfigLineStyle as arcgis_charts_config_line_style };
