/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const chartUiUtils = require('./chart-ui-utils-ba499862.js');
const interfaces = require('./interfaces-28e1772a.js');

const HTMLClasses = {
    symbolPropertyPopover: "symbol-property-popover",
    text: "text",
    jsAppFlyout: "js-app-flyout",
    scatterPlotPopover: "scatter-plot-popover",
    fillColor: "fill-color",
    header: "header",
    pickListItemLabel: "pick-list-item-label",
    pickListPanel: "pick-list-panel",
};

const arcgisChartsConfigScatterPlotPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{width:100%}.pick-list-panel{max-height:60vh}";
const ArcgisChartsConfigScatterPlotPopoverStyle0 = arcgisChartsConfigScatterPlotPopoverCss;

const ArcgisChartsConfigScatterPlotPopover = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigScatterPlotLineStyleChange = index.createEvent(this, "arcgisChartsConfigScatterPlotLineStyleChange", 7);
        this.arcgisChartsConfigScatterPlotFillColorChange = index.createEvent(this, "arcgisChartsConfigScatterPlotFillColorChange", 7);
        this.arcgisChartsConfigScatterPlotXYFieldChange = index.createEvent(this, "arcgisChartsConfigScatterPlotXYFieldChange", 7);
        this.arcgisChartsConfigScatterPlotSizeVariableFieldChange = index.createEvent(this, "arcgisChartsConfigScatterPlotSizeVariableFieldChange", 7);
        this.arcgisChartsConfigPopoverClose = index.createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        this.arcgisChartsConfigPopoverOpenChange = index.createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.seriesPopoverClose = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.updateSymbolProperties = (e) => {
            this.selectedContent = e.target.lineStyle;
            this.arcgisChartsConfigScatterPlotLineStyleChange.emit(e.detail);
        };
        /**
         * @category Event handler
         */
        this.updateColorProperties = (e) => {
            this.selectedContent = e.detail;
            this.arcgisChartsConfigScatterPlotFillColorChange.emit(this.selectedContent);
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onFieldSelectionChange = (e) => {
            const selectedItems = e.target.selectedItems;
            if (this.contentKind === interfaces.ScatterPlotDataPopoverKinds.sizeVariable) {
                this.arcgisChartsConfigScatterPlotSizeVariableFieldChange.emit(selectedItems.map((item) => item.value)[0]);
            }
            else {
                this.arcgisChartsConfigScatterPlotXYFieldChange.emit(selectedItems.map((item) => item.value)[0]);
            }
            this.open = false;
        };
        this.headingTitle = undefined;
        this.contentKind = undefined;
        this.selectedContent = undefined;
        this.referenceElement = undefined;
        this.placement = undefined;
        this.open = undefined;
        this.layerFieldsInfo = undefined;
    }
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange() {
        this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        this.openChange();
    }
    /**
     * @category Lifestyle
     */
    componentDidRender() {
        setTimeout(async () => {
            await this.picklist?.setFocus();
        }, chartUiUtils.UIDefaults.PopoverTimer);
        restJsObjectLiterals.eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.popoverElement?.reposition();
        }, chartUiUtils.UIDefaults.PopoverTimer);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const colorElement = this.selectedContent;
        const symbolElement = this.selectedContent;
        return (index.h(index.Host, { key: '01fd08c9dd14d05594bfb9e610e470fe34a0a477', class: HTMLClasses.jsAppFlyout }, index.h("calcite-popover", { key: 'b8f47e9cb21ee292140e95fd8e3283ce9c76e88a', class: HTMLClasses.scatterPlotPopover, referenceElement: this.referenceElement, placement: this.placement, offsetDistance: chartUiUtils.getPopoverOffsetDistance(this.placement), onCalcitePopoverClose: this.closePopover, open: this.open, ref: (e) => {
                this.popoverElement = e;
            }, label: "" }, Array.isArray(colorElement) ? (index.h("arcgis-charts-config-color-style", { header: this.strings.fillColor, class: HTMLClasses.fillColor, enableClose: true, open: this.open, selectedColor: colorElement, onArcgisChartsConfigColorStyleClose: this.seriesPopoverClose, onArcgisChartsConfigColorStyleChange: this.updateColorProperties })) : null, symbolElement?.type === restJsObjectLiterals.RESTSymbolType.SLS ? (index.h("arcgis-charts-config-line-style", { header: this.strings.lineStyle, open: this.open, enableClose: true, lineStyle: symbolElement, onArcgisChartsConfigLineStyleClose: this.seriesPopoverClose, onArcgisChartsConfigLineStyleChange: this.updateSymbolProperties })) : null, !Array.isArray(colorElement) && symbolElement?.type !== restJsObjectLiterals.RESTSymbolType.SLS
            ? this.renderVariablePickList()
            : null)));
    }
    /**
     * @param axis
     * @category Render UX
     */
    renderVariablePickList() {
        const fieldCount = this.layerFieldsInfo?.length ?? 0;
        const pickListItems = [];
        if (this.contentKind === interfaces.ScatterPlotDataPopoverKinds.sizeVariable) {
            pickListItems.push(index.h("calcite-list-item", { label: "\u00A0", key: "\u00A0", value: "\u00A0", selected: chartUiUtils.itemMatchesSelectedContent("", this.selectedContent) }));
        }
        for (let i = 0; i < fieldCount; i += 1) {
            const field = this.layerFieldsInfo?.[i] ?? undefined;
            if (field !== undefined && restJsObjectLiterals.Ic(field)) {
                const label = restJsObjectLiterals.Tl(this.layerFieldsInfo, field.name);
                pickListItems.push(index.h("calcite-list-item", { label: label, key: field.name, value: field.name, selected: chartUiUtils.itemMatchesSelectedContent(field.name, this.selectedContent) }));
            }
        }
        return (index.h("calcite-panel", { class: HTMLClasses.pickListPanel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, index.h("div", { slot: "header-content", class: HTMLClasses.header }, this.headingTitle ?? ""), index.h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: true, onCalciteListChange: this.onFieldSelectionChange, ref: (e) => {
                this.picklist = e;
            } }, pickListItems)));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
    static get watchers() { return {
        "open": ["openChange"]
    }; }
};
ArcgisChartsConfigScatterPlotPopover.style = ArcgisChartsConfigScatterPlotPopoverStyle0;

exports.ArcgisChartsConfigScatterPlotPopover = ArcgisChartsConfigScatterPlotPopover;
