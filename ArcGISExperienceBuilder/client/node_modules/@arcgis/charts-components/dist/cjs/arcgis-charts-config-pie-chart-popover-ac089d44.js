/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const index$1 = require('./index-e5a6a075.js');
const interfaces = require('./interfaces-28e1772a.js');
const chartUiUtils = require('./chart-ui-utils-ba499862.js');
const isEqual = require('./isEqual-7c4e90f5.js');

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
    name: "pie-chart-data-popover",
    numericFieldPickList: "pie-chart-data-numeric-fields-pick-list",
    header: "header",
    fab: "fab",
    pickListItemLabel: "pick-list-item-label",
    flipClass: "sort-counter-clockwise",
    panel: "panel",
};

const arcgisChartsConfigPieChartPopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.name{display:flex;flex-direction:column;margin:0.5rem;padding:0.5rem;background:white;min-width:250px}.header{margin:0;font-weight:bolder}.fab{display:flex;justify-content:stretch}.pick-list-item-label{font-size:small}.sort-icon-color{color:black}.sort-counter-clockwise{transform:scaleX(-1)}.panel{max-height:60vh}";
const ArcgisChartsConfigPieChartPopoverStyle0 = arcgisChartsConfigPieChartPopoverCss;

const ArcgisChartsConfigPieChartPopover = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigPieChartDataPopoverChange = index.createEvent(this, "arcgisChartsConfigPieChartDataPopoverChange", 7);
        this.arcgisChartsConfigPopoverClose = index.createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Private
         */
        this.placement = "leading";
        /**
         * @category Private
         */
        this.offsetDistance = -200;
        /**
         * @category Private
         */
        this.pickListHasChanged = false;
        /**
         * @category Event handler
         */
        this.closePopover = () => {
            if (this.contentKind === interfaces.PieChartDataPopoverKinds.numericFields && this.pickListHasChanged) {
                const numericFieldsChangeProps = {
                    pickListElement: this.picklist,
                    eventEmitter: this.arcgisChartsConfigPieChartDataPopoverChange,
                    contentKind: this.contentKind,
                };
                chartUiUtils.emitNumericFieldsChange(numericFieldsChangeProps);
            }
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit(this.pickListHasChanged);
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onDataContentTypeChange = (e) => {
            this.pickListHasChanged = true;
            const selectedItems = e.target.selectedItems;
            this.arcgisChartsConfigPieChartDataPopoverChange.emit({
                contentKind: this.contentKind,
                value: selectedItems.map((item) => item.value),
            });
            this.open = false;
        };
        /**
         * @category Event handler
         * @param e
         */
        this.onNumericFieldsChange = (e) => {
            if (e.target !== null) {
                this.selectedContent = e.target.selectedItems.map((item) => item.value);
            }
        };
        /**
         * @category Event handler
         */
        this.onNumericFieldSelectionDone = () => {
            if (this.pickListHasChanged) {
                this.closePopover();
            }
        };
        this.headingTitle = undefined;
        this.referenceElement = undefined;
        this.open = undefined;
        this.contentKind = undefined;
        this.layerFieldsInfo = undefined;
        this.selectedContent = undefined;
    }
    /**
     * Watches for change to selected content to record if there was a pick list change.
     * @param newSelectedContent
     * @param oldSelectedContent
     * @category Watch handler
     */
    selectedContentChange(newSelectedContent, oldSelectedContent) {
        this.pickListHasChanged = !isEqual.isEqual(newSelectedContent, oldSelectedContent);
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    async componentWillRender() {
        const listPromises = chartUiUtils.pieAggregationList.map(async (item) => await restJsObjectLiterals.ta(item));
        this.aggregationLabels = await Promise.all(listPromises);
    }
    /**
     * @category Lifestyle
     */
    componentDidRender() {
        setTimeout(async () => {
            await this.picklist?.setFocus();
        }, chartUiUtils.UIDefaults.PopoverTimer);
        restJsObjectLiterals.eu(this.popoverElement, this.open);
    }
    /**
     * @category Render UX
     */
    renderAggregationType() {
        const items = this.buildAggregationPickListItems();
        return (index.h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: false, onCalciteListChange: this.onDataContentTypeChange }, items));
    }
    /**
     * @category Render UX
     */
    buildAggregationPickListItems() {
        return chartUiUtils.pieAggregationList.map((item, index$1) => (index.h("calcite-list-item", { label: this.aggregationLabels[index$1], key: item, value: item, selected: chartUiUtils.itemMatchesSelectedContent(item, this.selectedContent) })));
    }
    /**
     * @category Render UX
     */
    renderCategory() {
        const items = this.buildPickListItems(interfaces.PieChartDataPopoverKinds.category);
        return (index.h("calcite-list", { label: "", class: HTMLClasses.pickListItemLabel, selectionMode: "single", selectionAppearance: "border", filterEnabled: true, onCalciteListChange: this.onDataContentTypeChange, ref: (e) => {
                this.picklist = e;
            } }, items));
    }
    /**
     * @category Render UX
     */
    renderNumericFields() {
        const items = this.buildPickListItems(interfaces.PieChartDataPopoverKinds.numericFields);
        return (index.h("calcite-list", { label: "", class: HTMLClasses.numericFieldPickList, selectionMode: "multiple", filterEnabled: true, onCalciteListChange: this.onNumericFieldsChange, ref: (e) => {
                this.picklist = e;
            } }, items));
    }
    /**
     * @category Render UX
     * Unlike the other field-based render items, the sort orders
     * are static. So, a function separate from buildPickListItems()
     * needs to be used.
     */
    renderSortOrder() {
        const items = this.buildSortOrder();
        return (index.h("calcite-list", { label: "", selectionMode: "single", selectionAppearance: "border", filterEnabled: false, onCalciteListChange: this.onDataContentTypeChange }, items));
    }
    /**
     * @category Render UX
     */
    buildSortOrder() {
        const items = Object.keys(index$1.eh);
        // remove `customSort` from the list
        items.splice(items.indexOf(index$1.eh.customSort), 1);
        return items.map((sortOrder) => {
            let icon1 = "string";
            const icon2 = "rotate";
            let iconClass2 = "";
            switch (sortOrder) {
                case index$1.eh.labelAsc:
                    icon1 = "string";
                    break;
                case index$1.eh.labelDesc:
                    icon1 = "string";
                    // for counter-clockwise (Desc) icon needs to be flipped
                    iconClass2 = HTMLClasses.flipClass;
                    break;
                case index$1.eh.valueAsc:
                    icon1 = "number";
                    break;
                case index$1.eh.valueDesc:
                    icon1 = "number";
                    // for counter-clockwise (Desc) icon needs to be flipped
                    iconClass2 = HTMLClasses.flipClass;
                    break;
                // Do nothing for customSort for now
                case index$1.eh.customSort:
            }
            return (index.h("calcite-list-item", { selected: this.selectedContent === sortOrder, key: sortOrder, label: this.strings[sortOrder], value: index$1.eh[sortOrder] }, index.h("calcite-icon", { slot: "content-end", icon: icon1 }), index.h("calcite-icon", { class: iconClass2, slot: "content-end", icon: icon2 })));
        });
    }
    /**
     * @param field
     * @category Render UX
     */
    buildPickListItem(field) {
        return (index.h("calcite-list-item", { key: field.name, label: restJsObjectLiterals.Tl(this.layerFieldsInfo, field.name), value: field.name, selected: chartUiUtils.itemMatchesSelectedContent(field.name, this.selectedContent) }));
    }
    /**
     * @param itemKind
     * @category Render UX
     */
    buildPickListItems(itemKind) {
        const fieldCount = this.layerFieldsInfo?.length ?? 0;
        const pickListItems = [];
        switch (itemKind) {
            case interfaces.PieChartDataPopoverKinds.numericFields: {
                for (let i = 0; i < fieldCount; i += 1) {
                    const field = this.layerFieldsInfo[i];
                    if (restJsObjectLiterals.Ic(field)) {
                        pickListItems.push(this.buildPickListItem(field));
                    }
                }
                break;
            }
            case interfaces.PieChartDataPopoverKinds.category: {
                pickListItems.push(index.h("calcite-list-item", { label: "\u00A0", key: "\u00A0", value: "\u00A0", selected: chartUiUtils.itemMatchesSelectedContent("", this.selectedContent) }));
                for (let i = 0; i < fieldCount; i += 1) {
                    const field = this.layerFieldsInfo[i];
                    if (restJsObjectLiterals.Cc(field) || field.type === restJsObjectLiterals.RESTFieldType.String) {
                        pickListItems.push(this.buildPickListItem(field));
                    }
                }
                break;
            }
        }
        return pickListItems;
    }
    /**
     * @category Render UX
     */
    renderPopoverInfo() {
        let content;
        switch (this.contentKind) {
            case interfaces.PieChartDataPopoverKinds.aggregation:
                content = this.renderAggregationType();
                break;
            case interfaces.PieChartDataPopoverKinds.category:
                content = this.renderCategory();
                break;
            case interfaces.PieChartDataPopoverKinds.numericFields:
                content = this.renderNumericFields();
                break;
            case interfaces.PieChartDataPopoverKinds.sortOrder:
                content = this.renderSortOrder();
                break;
        }
        return content;
    }
    /**
     * @category Lifecycle
     */
    render() {
        let footerButton;
        if (this.contentKind === interfaces.PieChartDataPopoverKinds.numericFields) {
            footerButton = (index.h("div", { key: 'c724640b31c36da7a8d04c49ff9f02335743cef4', slot: "footer" }, index.h("calcite-fab", { key: '4bc04304adcf2bcf158cd73cb0fe18c45826476a', class: HTMLClasses.fab, appearance: "outline-fill", kind: "neutral", icon: "", label: this.strings.selectionDone, scale: "s", "text-enabled": true, text: this.strings.selectionDone, onClick: this.onNumericFieldSelectionDone })));
        }
        return (index.h(index.Host, { key: '6803285fafc88cdc9f5e3a6d56adda5340286ac0', class: HTMLClasses.jsAppFlyout }, index.h("calcite-popover", { key: 'c42b35f11af5343ec04913c6a68cc9acffc2e5e6', class: HTMLClasses.name, referenceElement: this.referenceElement, placement: this.placement, onCalcitePopoverClose: this.closePopover, offsetDistance: this.offsetDistance, open: this.open, label: "", ref: (e) => {
                this.popoverElement = e;
            } }, index.h("calcite-panel", { key: '6c1f43eb0cd5bfece088b12da0c4e33f88c14f3c', class: HTMLClasses.panel, closable: true, closed: !this.open, onCalcitePanelClose: this.closePopover }, index.h("div", { key: '44ffa52698271f705ef9f3588789499f77e5e534', slot: "header-content", class: HTMLClasses.header }, this.headingTitle ?? ""), this.renderPopoverInfo(), footerButton))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
    static get watchers() { return {
        "selectedContent": ["selectedContentChange"]
    }; }
};
ArcgisChartsConfigPieChartPopover.style = ArcgisChartsConfigPieChartPopoverStyle0;

exports.ArcgisChartsConfigPieChartPopover = ArcgisChartsConfigPieChartPopover;
