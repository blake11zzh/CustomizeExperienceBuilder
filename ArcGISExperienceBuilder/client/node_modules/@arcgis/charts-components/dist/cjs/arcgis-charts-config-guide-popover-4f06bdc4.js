/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const _default = require('./default-92107337.js');

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
};

const arcgisChartsConfigGuidePopoverCss = "";
const ArcgisChartsConfigGuidePopoverStyle0 = arcgisChartsConfigGuidePopoverCss;

const ArcgisChartsConfigGuidePopover = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigGuidePopoverColorChange = index.createEvent(this, "arcgisChartsConfigGuidePopoverColorChange", 7);
        this.arcgisChartsConfigGuidePopoverSymbolChange = index.createEvent(this, "arcgisChartsConfigGuidePopoverSymbolChange", 7);
        this.arcgisChartsConfigPopoverClose = index.createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Private
         */
        this.guidePopoverClose = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.updateColorProperties = (e) => {
            const color = e.detail;
            if (color !== undefined) {
                color[3] = _default.guideOpacity;
            }
            this.selectedElement = color;
            this.arcgisChartsConfigGuidePopoverColorChange.emit(this.selectedElement);
        };
        /**
         * @category Event handler
         */
        this.updateSymbolProperties = (e) => {
            const { lineStyle } = e.target;
            if (lineStyle?.color !== undefined) {
                lineStyle.color[3] = _default.guideOpacity;
            }
            this.selectedElement = lineStyle;
            this.arcgisChartsConfigGuidePopoverSymbolChange.emit(e.detail);
        };
        this.selectedElement = undefined;
        this.referenceElement = undefined;
        this.placement = "leading";
        this.open = undefined;
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        restJsObjectLiterals.eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const colorElement = this.selectedElement;
        const symbolElement = this.selectedElement;
        return (index.h(index.Host, { key: '19c486cfcd1a91888b0b4397e1ac20aac9c18574', class: HTMLClasses.jsAppFlyout }, index.h("calcite-popover", { key: 'd027ad51e11a4d86730aa2ef01d8a87e6abfc497', referenceElement: this.referenceElement, placement: this.placement, ref: (e) => {
                this.popoverElement = e;
            }, open: this.open, offsetDistance: 20, offsetSkidding: 60, label: "", pointerDisabled: true, onCalcitePopoverClose: this.guidePopoverClose }, Array.isArray(colorElement) && (index.h("arcgis-charts-config-color-style", { key: 'a337551fd346cd62b7641be1eb20cd1aebe65228', header: this.strings.fillStyle, enableClose: true, open: this.open, selectedColor: colorElement, onArcgisChartsConfigColorStyleClose: this.guidePopoverClose, onArcgisChartsConfigColorStyleChange: this.updateColorProperties })), symbolElement?.type === restJsObjectLiterals.RESTSymbolType.SLS && (index.h("arcgis-charts-config-line-style", { key: '7023011a68a8d186f904613a1c0cfcbf8fa8edd7', header: this.strings.lineStyle, open: this.open, enableClose: true, lineStyle: symbolElement, onArcgisChartsConfigLineStyleClose: this.guidePopoverClose, onArcgisChartsConfigLineStyleChange: this.updateSymbolProperties })))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
};
ArcgisChartsConfigGuidePopover.style = ArcgisChartsConfigGuidePopoverStyle0;

exports.ArcgisChartsConfigGuidePopover = ArcgisChartsConfigGuidePopover;
