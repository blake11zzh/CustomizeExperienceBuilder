/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');

const HTMLClasses = {
    jsAppFlyout: "js-app-flyout",
};

const arcgisChartsConfigFormatPopoverCss = "";
const ArcgisChartsConfigFormatPopoverStyle0 = arcgisChartsConfigFormatPopoverCss;

const ArcgisChartsConfigFormatPopover = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigFormatPopoverSymbolChange = index.createEvent(this, "arcgisChartsConfigFormatPopoverSymbolChange", 7);
        this.arcgisChartsConfigFormatPopoverTextChange = index.createEvent(this, "arcgisChartsConfigFormatPopoverTextChange", 7);
        this.arcgisChartsConfigFormatPopoverColorChange = index.createEvent(this, "arcgisChartsConfigFormatPopoverColorChange", 7);
        this.arcgisChartsConfigPopoverClose = index.createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Private
         */
        this.closePopover = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
        };
        /**
         * @category Event handler
         */
        this.updateSymbolProperties = (e) => {
            this.selectedElement = e.target.lineStyle;
            this.arcgisChartsConfigFormatPopoverSymbolChange.emit(e.detail);
        };
        /**
         * @category Event handler
         */
        this.updateTextProperties = (e) => {
            this.selectedElement = e.target.fontStyle;
            this.arcgisChartsConfigFormatPopoverTextChange.emit(e.detail);
        };
        /**
         * @category Event handler
         */
        this.updateColorProperties = (e) => {
            this.selectedElement = e.detail;
            this.arcgisChartsConfigFormatPopoverColorChange.emit(this.selectedElement);
        };
        this.selectedElement = undefined;
        this.referenceElement = undefined;
        this.placement = "leading";
        this.open = undefined;
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.popoverElement?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        restJsObjectLiterals.eu(this.popoverElement, this.open);
    }
    /**
     * @category Lifecycle
     */
    render() {
        const colorElement = this.selectedElement;
        const symbolElement = this.selectedElement;
        return (index.h(index.Host, { key: '3a48568d1634f1cfa44e6b9e83612543164526f2', class: HTMLClasses.jsAppFlyout }, index.h("calcite-popover", { key: '90af72c59e152de293f078b7d84cf5deff94102e', referenceElement: this.referenceElement, ref: (e) => {
                this.popoverElement = e;
            }, placement: this.placement, open: this.open, label: "", onCalcitePopoverClose: this.closePopover, pointerDisabled: true }, Array.isArray(colorElement) ? (index.h("arcgis-charts-config-color-style", { header: this.strings.backgroundElement, enableClose: true, open: this.open, selectedColor: colorElement, onArcgisChartsConfigColorStyleClose: this.closePopover, onArcgisChartsConfigColorStyleChange: this.updateColorProperties })) : null, symbolElement?.type === restJsObjectLiterals.RESTSymbolType.SLS ? (index.h("arcgis-charts-config-line-style", { header: this.strings.lineStyle, open: this.open, enableClose: true, lineStyle: symbolElement, onArcgisChartsConfigLineStyleClose: this.closePopover, onArcgisChartsConfigLineStyleChange: this.updateSymbolProperties })) : null, symbolElement?.type === restJsObjectLiterals.RESTSymbolType.TS ? (index.h("arcgis-charts-config-font-style", { header: this.strings.textStyle, open: this.open, enableClose: true, fontStyle: symbolElement, onArcgisChartsConfigFontStyleClose: this.closePopover, onArcgisChartsConfigFontStyleChange: this.updateTextProperties })) : null)));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
};
ArcgisChartsConfigFormatPopover.style = ArcgisChartsConfigFormatPopoverStyle0;

exports.ArcgisChartsConfigFormatPopover = ArcgisChartsConfigFormatPopover;
