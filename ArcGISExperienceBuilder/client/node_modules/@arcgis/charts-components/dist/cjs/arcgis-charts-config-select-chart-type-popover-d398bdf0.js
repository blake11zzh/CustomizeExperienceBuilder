/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const chartUiUtils = require('./chart-ui-utils-ba499862.js');
const chartObjectLiterals = require('./chart-object-literals-a706ca0f.js');

const HTMLClasses = {
    selectChartComponent: "select-chart-component",
    header: "header",
    rtl: "arcgis-charts-rtl",
    jsAppFlyout: "js-app-flyout",
    panel: "panel",
};

const arcgisChartsConfigSelectChartTypePopoverCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.select-chart-component{width:var(--arcgis-charts-config-panel-width);height:var(--arcgis-charts-config-panel-height)}calcite-block{width:var(--arcgis-charts-config-calcite-block-default-width);height:var(--arcgis-charts-config-calcite-block-default-height);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.label{display:flex;margin-left:1rem;margin-bottom:0.5rem;justify-content:space-between}.header{margin:0}.panel{max-height:60vh}:host(.arcgis-charts-rtl) .label{margin-left:0rem;margin-right:1rem}";
const ArcgisChartsConfigSelectChartTypePopoverStyle0 = arcgisChartsConfigSelectChartTypePopoverCss;

const ArcGISChartsConfigSelectChartTypePopover = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigSelectChartTypeChange = index.createEvent(this, "arcgisChartsConfigSelectChartTypeChange", 7);
        this.arcgisChartsConfigPopoverClose = index.createEvent(this, "arcgisChartsConfigPopoverClose", 7);
        /**
         * @category Event handler
         */
        this.onChartTypeClick = (event) => {
            if (event.target?.localName === "calcite-list-item") {
                this.selectedChartType = event.target?.value;
            }
            else {
                this.selectedChartType = event.target?.parentNode
                    ?.value;
            }
            this.arcgisChartsConfigSelectChartTypeChange.emit();
        };
        /**
         * @category Event handler
         */
        this.popoverOpen = () => {
            setTimeout(async () => await this.selectChartTypePopover?.setFocus(), 250);
        };
        /**
         * @category Event handler
         */
        this.popoverClose = () => {
            this.open = false;
            this.arcgisChartsConfigPopoverClose.emit();
            setTimeout(async () => await this.popoverReferenceElement?.setFocus(), 250);
        };
        this.headerTitle = undefined;
        this.layerId = undefined;
        this.open = true;
        this.popoverReferenceElement = undefined;
        this.popoverPlacement = undefined;
        this.selectedChartType = undefined;
    }
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    async reposition() {
        await this.selectChartTypePopover?.reposition();
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
    }
    /**
     * @category Lifecycle
     */
    componentDidUpdate() {
        setTimeout(() => {
            this.selectChartTypePopover.reposition();
        }, chartUiUtils.UIDefaults.PopoverTimer);
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        restJsObjectLiterals.eu(this.selectChartTypePopover, this.open);
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (index.h(index.Host, { key: 'eb952c4c27cb5faee116701e6fe02c166efcb6a0', class: {
                [HTMLClasses.rtl]: this.direction === "rtl",
                [HTMLClasses.selectChartComponent]: true,
                [HTMLClasses.jsAppFlyout]: true,
            } }, index.h("calcite-popover", { key: '39f791fc23e63736e3cc352524503a9b09c3f83f', referenceElement: this.popoverReferenceElement, placement: this.popoverPlacement, flipPlacements: ["top", "bottom"], onCalcitePopoverOpen: this.popoverOpen, onCalcitePopoverClose: this.popoverClose, open: this.open, ref: (e) => {
                this.selectChartTypePopover = e;
            }, label: "" }, index.h("calcite-panel", { key: 'c163639f7f282a4b300b78d20aa7d86875d4e436', class: HTMLClasses.panel, heading: this.headerTitle ?? this.strings.chooseChartType, closable: true, onCalcitePanelClose: this.popoverClose, closed: !this.open }, this.buildChartTypesList()))));
    }
    /**
     * @category Render UX
     */
    buildChartTypesList() {
        return (index.h("calcite-list", { label: "", onClick: this.onChartTypeClick }, index.h("calcite-list-item", { label: this.strings.barChart, value: chartObjectLiterals.WebChartTypes.BarSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.BarSeries }, index.h("calcite-icon", { slot: "content-start", icon: "graph-bar" })), index.h("calcite-list-item", { label: this.strings.lineChart, value: chartObjectLiterals.WebChartTypes.LineSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.LineSeries }, index.h("calcite-icon", { slot: "content-start", icon: "graph-time-series" })), index.h("calcite-list-item", { label: this.strings.pieChart, value: chartObjectLiterals.WebChartTypes.PieSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.PieSeries }, index.h("calcite-icon", { slot: "content-start", icon: "pie-chart" })), index.h("calcite-list-item", { label: this.strings.histogram, value: chartObjectLiterals.WebChartTypes.HistogramSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.HistogramSeries }, index.h("calcite-icon", { slot: "content-start", icon: "graph-histogram" })), index.h("calcite-list-item", { label: this.strings.scatterPlot, value: chartObjectLiterals.WebChartTypes.ScatterSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.ScatterSeries }, index.h("calcite-icon", { slot: "content-start", icon: "graph-scatter-plot" })), index.h("calcite-list-item", { label: this.strings.boxPlot, value: chartObjectLiterals.WebChartTypes.BoxPlotSeries, selected: this.selectedChartType === chartObjectLiterals.WebChartTypes.BoxPlotSeries }, index.h("calcite-icon", { slot: "content-start", icon: "box-chart" }))));
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
};
ArcGISChartsConfigSelectChartTypePopover.style = ArcgisChartsConfigSelectChartTypePopoverStyle0;

exports.ArcGISChartsConfigSelectChartTypePopover = ArcGISChartsConfigSelectChartTypePopover;
