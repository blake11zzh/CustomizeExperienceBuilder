/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const chartUiUtils = require('./chart-ui-utils-ba499862.js');
const _baseMerge = require('./_baseMerge-846a06cb.js');
require('./index-e5a6a075.js');
require('./interfaces-28e1772a.js');
require('./_initCloneObject-76ab9e25.js');
require('./_Map-d0ba2c83.js');
require('./isObject-b063d8a9.js');
require('./_Uint8Array-9bd4a4da.js');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = _baseMerge.createAssigner(function(object, source, srcIndex) {
  _baseMerge.baseMerge(object, source, srcIndex);
});

const merge$1 = merge;

const fonts = {
    arial: "Arial",
    arialBlack: "Arial Black",
    bookman: "Bookman",
    candara: "Candara",
    courier: "Courier",
    courierNew: "Courier New",
    garamond: "Garamond",
    georgia: "Georgia",
    impact: "Impact",
    palatino: "Palatino",
    roboto: "Roboto",
    times: "Times",
    timesNewRoman: "Times New Roman",
    verdana: "Verdana",
};

const HTMLClasses = {
    fontStyleContainer: "font-style-container",
    font: "font",
    numberInput: "number-input",
    inputLabel: "input-label",
};

const arcgisChartsConfigFontStyleCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{overflow-y:auto}:host calcite-panel .font-style-container{display:flex;padding:0 1rem}:host calcite-panel .font-style-container .input-label{--calcite-label-margin-bottom:var(--arcgis-charts-intra-section-margin) !important}:host calcite-panel .font-style-container .number-input{margin-bottom:0.5rem;display:flex}:host calcite-panel .font-style-container .number-input>div{width:100%}:host calcite-panel .font-style-container calcite-action,:host calcite-panel .font-style-container calcite-label{flex:1 1 0px;display:flex;width:0px}:host calcite-panel .font-style-container calcite-label{flex-grow:2}:host calcite-panel calcite-label.font{display:block;margin-top:1rem}";
const ArcgisChartsConfigFontStyleStyle0 = arcgisChartsConfigFontStyleCss;

const ArcgisChartsConfigFontStyle = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigFontStyleChange = index.createEvent(this, "arcgisChartsConfigFontStyleChange", 7);
        this.arcgisChartsConfigFontStyleClose = index.createEvent(this, "arcgisChartsConfigFontStyleClose", 7);
        /**
         * @category Event handler
         */
        this.closePanel = (e) => {
            const panel = e.target;
            if (panel.closed && this.enableClose === true) {
                this.open = false;
                this.arcgisChartsConfigFontStyleClose.emit();
            }
        };
        /**
         * @category Event handler
         */
        this.fontChange = (e) => {
            const select = e.target;
            const family = select.selectedOption.value;
            if (family !== undefined) {
                const font = {
                    family,
                };
                if (this.isNewFontProperty("family", font)) {
                    this.fontStyle = merge$1(this.fontStyle, { font });
                    this.emitFontStyleEvent({ font });
                }
            }
        };
        /**
         * @category Event handler
         */
        this.fontSizeChange = () => {
            const { value } = this.fontSizeInputElement;
            if (value !== undefined &&
                chartUiUtils.isCalciteInputValidNumber(value, this.fontSizeInputElement.min, this.fontSizeInputElement.max)) {
                const font = {
                    size: Number.parseInt(value),
                };
                if (this.isNewFontProperty("size", font)) {
                    this.fontStyle = merge$1(this.fontStyle, { font });
                    this.emitFontStyleEvent({ font });
                }
                chartUiUtils.modifyCalciteInputStatus({
                    inputElement: this.fontSizeInputElement,
                    status: chartUiUtils.UIInputStatus.IDLE,
                });
            }
            else {
                chartUiUtils.modifyCalciteInputStatus({
                    inputElement: this.fontSizeInputElement,
                    status: chartUiUtils.UIInputStatus.INVALID,
                });
            }
        };
        /**
         * @category Event handler
         */
        this.boldSelect = () => {
            let weight = restJsObjectLiterals.RESTFontWeight.Bold;
            if (this.fontStyle?.font?.weight === weight) {
                weight = restJsObjectLiterals.RESTFontWeight.Normal;
            }
            const font = { weight };
            this.fontStyle = merge$1(this.fontStyle, { font });
            this.fontStyle = { ...this.fontStyle };
            this.emitFontStyleEvent({ font });
        };
        /**
         * @category Event handler
         */
        this.italicSelect = () => {
            let style = restJsObjectLiterals.RESTFontStyle.Italic;
            if (this.fontStyle?.font?.style === style) {
                style = restJsObjectLiterals.RESTFontStyle.Normal;
            }
            const font = { style };
            this.fontStyle = merge$1(this.fontStyle, { font });
            this.fontStyle = { ...this.fontStyle };
            this.emitFontStyleEvent({ font });
        };
        /**
         * @category Event handler
         */
        this.underlineSelect = () => {
            let decoration = restJsObjectLiterals.RESTFontDecoration.Underline;
            if (this.fontStyle?.font?.decoration === decoration) {
                decoration = restJsObjectLiterals.RESTFontDecoration.None;
            }
            const font = { decoration };
            this.fontStyle = merge$1(this.fontStyle, { font });
            this.fontStyle = { ...this.fontStyle };
            this.emitFontStyleEvent({ font });
        };
        /**
         * @category Event handler
         */
        this.colorChange = (e) => {
            const color = e.detail;
            this.fontStyle = merge$1(this.fontStyle, { color });
            this.emitFontStyleEvent({ color });
        };
        this.fontStyle = {
            type: restJsObjectLiterals.RESTSymbolType.TS,
        };
        this.header = undefined;
        this.open = undefined;
        this.enableClose = undefined;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
        // T.B.D issue with lang getting set correctly when this component used as a child
    }
    /**
     * @category Render UX
     */
    renderFonts() {
        const options = Object.values(fonts).map((fontFamily) => (index.h("calcite-option", { value: fontFamily, selected: fontFamily === this.fontStyle?.font?.family ||
                (fontFamily === restJsObjectLiterals.lo().font?.family?.split(",")[0] &&
                    this.fontStyle?.font?.family === undefined) }, fontFamily)));
        if (this.fontStyle?.font?.family === "") {
            options.push(index.h("calcite-option", { value: "", selected: true }));
        }
        return options;
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (index.h(index.Host, { key: '75b86eba607feb5c2b8964ebadc61b95b8d57330' }, index.h("calcite-panel", { key: 'caf344345708f84117d3f021f1e01fd12969b0a0', heading: this.header ?? this.strings.header, closed: this.open === false, closable: this.enableClose ?? false, onCalcitePanelClose: this.closePanel }, index.h("div", { key: '8d93dfd3eef37c65157dced9d95253dfc1ae2c27', class: HTMLClasses.fontStyleContainer }, index.h("calcite-label", { key: '419ff08e220b2bf866c1301d8e02433549a458b2', class: HTMLClasses.font }, this.strings.font, index.h("calcite-select", { key: '646c3a32f6da72f32be86d34ffd53994195d8037', label: this.strings.font, onCalciteSelectChange: this.fontChange }, this.renderFonts()))), index.h("div", { key: 'b1e6ac791d0ec40907a0c9e225ce77211c1487c4', class: HTMLClasses.fontStyleContainer }, index.h("calcite-label", { key: 'c04c5854230473b95c2e7b580f28731c007bad36', class: HTMLClasses.inputLabel }, this.strings.size, index.h("calcite-input", { key: 'fe399e75b8911b3deb2b9ca5cff73e48d154f43e', class: HTMLClasses.numberInput, type: "number", min: 6, max: 40, step: 1, value: chartUiUtils.sanitizeNumber(this.fontStyle?.font?.size), onCalciteInputInput: this.fontSizeChange, ref: (e) => {
                this.fontSizeInputElement = e;
            } })), index.h("calcite-action", { key: 'e22c777f3dc9e497deeb64b681c1bb35b5734aed', appearance: "transparent", text: this.strings.bold, onClick: this.boldSelect, scale: "l", active: this.fontStyle?.font?.weight === restJsObjectLiterals.RESTFontWeight.Bold }, index.h("calcite-icon", { key: 'c30885871f977d0ebcee9c3ca64c38cebbf61783', scale: "s", icon: "bold" })), index.h("calcite-action", { key: '50807f25ab321141d217d48bd97500f911648acc', appearance: "transparent", text: this.strings.italic, onClick: this.italicSelect, scale: "l", active: this.fontStyle?.font?.style === restJsObjectLiterals.RESTFontStyle.Italic }, index.h("calcite-icon", { key: '237ad61bb8a0a55d1315d8ecf305179f9072a55d', scale: "s", icon: "italicize" })), index.h("calcite-action", { key: '6e02aaa147466da441d5087b3b720b5ee3fd3cea', appearance: "transparent", text: this.strings.underline, onClick: this.underlineSelect, scale: "l", active: this.fontStyle?.font?.decoration === restJsObjectLiterals.RESTFontDecoration.Underline }, index.h("calcite-icon", { key: 'd9a77e6d19a113dbe6db8bb2ebda3d174bb3a6af', scale: "s", icon: "underline" }))), index.h("div", { key: '90a97c69e7098bda8a8648656eff715da3244418', class: HTMLClasses.fontStyleContainer }, index.h("arcgis-charts-config-colors", { key: 'ae70a57b7970b2b61dd7d5e9496cf28a6ea2d6c5', rgba: this.fontStyle?.color ?? undefined, onColorSelect: this.colorChange })))));
    }
    /**
     * @param payload
     * @category Private
     */
    emitFontStyleEvent(payload) {
        this.arcgisChartsConfigFontStyleChange.emit(payload);
    }
    /**
     * @param property The property of fontStyle.font to compare to
     * @param font The new font
     * @category Private
     */
    isNewFontProperty(property, font) {
        return this.fontStyle?.font?.[property] !== font[property];
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
};
ArcgisChartsConfigFontStyle.style = ArcgisChartsConfigFontStyleStyle0;

exports.arcgis_charts_config_font_style = ArcgisChartsConfigFontStyle;
