/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

const _Map = require('./_Map-d0ba2c83.js');
const isObject = require('./isObject-b063d8a9.js');

/* Built-in method references that are verified to be native. */
var WeakMap = _Map.getNative(isObject.root, 'WeakMap');

const WeakMap$1 = WeakMap;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = _Map.overArg(Object.keys, Object);

const nativeKeys$1 = nativeKeys;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!_Map.isPrototype(object)) {
    return nativeKeys$1(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/* Built-in method references that are verified to be native. */
var DataView = _Map.getNative(isObject.root, 'DataView');

const DataView$1 = DataView;

/* Built-in method references that are verified to be native. */
var Promise$1 = _Map.getNative(isObject.root, 'Promise');

const Promise$2 = Promise$1;

/* Built-in method references that are verified to be native. */
var Set = _Map.getNative(isObject.root, 'Set');

const Set$1 = Set;

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = _Map.toSource(DataView$1),
    mapCtorString = _Map.toSource(_Map.Map),
    promiseCtorString = _Map.toSource(Promise$2),
    setCtorString = _Map.toSource(Set$1),
    weakMapCtorString = _Map.toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = isObject.baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag) ||
    (_Map.Map && getTag(new _Map.Map) != mapTag) ||
    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
    (Set$1 && getTag(new Set$1) != setTag) ||
    (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag)) {
  getTag = function(value) {
    var result = isObject.baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? _Map.toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

const getTag$1 = getTag;

exports.baseKeys = baseKeys;
exports.getTag = getTag$1;
