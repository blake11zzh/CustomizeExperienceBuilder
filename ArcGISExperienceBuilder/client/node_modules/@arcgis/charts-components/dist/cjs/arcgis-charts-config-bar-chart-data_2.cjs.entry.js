/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.32.1
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2e64cfc1.js');
const restJsObjectLiterals = require('./rest-js-object-literals-acb59afb.js');
const index$1 = require('./index-e5a6a075.js');
const interfaces = require('./interfaces-28e1772a.js');
const store = require('./store-fbc7ac07.js');
const chartUiUtils = require('./chart-ui-utils-ba499862.js');
const isEqual = require('./isEqual-7c4e90f5.js');
const chartObjectLiterals = require('./chart-object-literals-a706ca0f.js');
const isNil = require('./isNil-a7f84422.js');
require('./_Uint8Array-9bd4a4da.js');
require('./_Map-d0ba2c83.js');
require('./isObject-b063d8a9.js');
require('./_getAllKeys-facd90a6.js');
require('./_getTag-66a55d52.js');

const HTMLClasses$1 = {
    label: "label",
    text: "text",
    fieldList: "field-list",
    fab: "fab",
    disabledLabel: "disabled-label",
    rtl: "arcgis-charts-rtl",
    list: "list",
    customSortButtons: "custom-sort-buttons",
    dimText: "dim-text",
};

const arcgisChartsConfigBarChartDataCss = ".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}:host(.arcgis-chart-rtl) .text{margin-left:0rem;margin-right:var(--arcgis-charts-config-margin-minor)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.custom-sort-buttons{display:flex;justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}";
const ArcgisChartsConfigBarChartDataStyle0 = arcgisChartsConfigBarChartDataCss;

const ArcGISChartsConfigBarChartData = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigBarChartDataNumericFieldValidate = index.createEvent(this, "arcgisChartsConfigBarChartDataNumericFieldValidate", 7);
        this.arcgisChartsConfigDataChangeError = index.createEvent(this, "arcgisChartsConfigDataChangeError", 7);
        /**
         * @category Private
         */
        this.barChartPopover = null;
        /**
         * @category Private
         * List of original custom sort labels
         * Used to reset the custom sort labels
         */
        this.originalCustomSortLabels = [];
        /**
         * @category Private
         * List of custom sort labels
         */
        this.customSortLabels = [];
        /**
         * @category Private
         *
         * Flag to disable the custom sort list.
         */
        this.isCustomSortDisabled = false;
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                this.model.moveCustomSortValuesInOrderByList(oldIndex, newIndex);
                this.customSortLabels = this.model.getOrderByList();
            }
        };
        /**
         * @category Event handler
         */
        this.onCustomSortItemSelected = (e) => {
            const { id } = e.target;
            // unselect the custom sort item in the custom sort list if it is already selected
            this.selectedCustomSortItemId = this.selectedCustomSortItemId === id ? "" : id;
        };
        /**
         * @category Event handler
         */
        this.onCustomSortItemMoved = (e) => {
            const { id } = e.target;
            let toIndex = this.customSortLabels.length;
            const fromIndex = this.customSortLabels.indexOf(this.selectedCustomSortItemId);
            // calculate the index to move the selected custom sort item to
            if (id === interfaces.ButtonDirections.Up) {
                toIndex = fromIndex - 1;
            }
            else if (id === interfaces.ButtonDirections.Down) {
                toIndex = fromIndex + 1;
            }
            // move the selected item to the calculated index only within the valid list bound
            if (fromIndex >= 0 && toIndex >= 0 && toIndex < this.customSortLabels.length) {
                this.model.moveCustomSortValuesInOrderByList(fromIndex, toIndex);
                this.customSortLabels = this.model.getOrderByList();
            }
        };
        /**
         * @category Event handler
         *
         * called when the aggregation type is clicked
         */
        this.onAggregationSelect = () => {
            this.contentKind = interfaces.BarChartDataPopoverKinds.aggregation;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the sort order is clicked
         */
        this.onSortOrderSelect = () => {
            this.contentKind = interfaces.BarChartDataPopoverKinds.sortOrder;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the category is clicked
         */
        this.onCategorySelect = () => {
            this.contentKind = interfaces.BarChartDataPopoverKinds.category;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * called when the split-by is clicked
         */
        this.onSplitBySelect = () => {
            if (!this.splitByFieldElement.disabled) {
                this.contentKind = interfaces.BarChartDataPopoverKinds.splitByField;
                this.setupPopover();
            }
        };
        /**
         * @category Event handler
         *
         * called when the add numeric fields button is clicked
         */
        this.onAddNumericFields = () => {
            this.contentKind = interfaces.BarChartDataPopoverKinds.numericFields;
            this.setupPopover();
        };
        /**
         * @category Event handler
         *
         * Called when individual numeric field item is removed.
         */
        this.onRemoveNumericField = async (removedItemEvent) => {
            const removedField = removedItemEvent.target.value;
            await this.model.setNumericFields(this.model.getNumericFields().filter((field) => field !== removedField));
            // update custom sort's value list if the numeric fields are changed and sort order is custom sort
            if (this.model.getSortOrder() === index$1.Jf.customSort) {
                await this.updateCustomSortProps();
                this.model.setOrderByList(this.customSortLabels);
            }
        };
        /**
         * @category Event handler
         *
         * called in response to the arcgisChartsConfigBarChartDataPopoverChange event
         */
        this.onBarChartDataChange = async (e) => {
            try {
                if (e.detail !== null && e.detail?.value !== undefined) {
                    const { contentKind } = e.detail;
                    const newValue = [...e.detail.value];
                    // reset axes bounds for this chart in stencil store
                    store.deleteMinMaxAxisKey(store.state);
                    switch (contentKind) {
                        case interfaces.BarChartDataPopoverKinds.aggregation:
                            await this.model.setAggregationType(newValue[0] !== restJsObjectLiterals.RESTStatisticType.NoAggregation ? newValue[0] : restJsObjectLiterals.RESTStatisticType.NoAggregation);
                            break;
                        case interfaces.BarChartDataPopoverKinds.category: {
                            const newCategory = newValue[0]?.trim() || "";
                            await this.model.setXAxisField(newCategory);
                            // update custom sort's value list if the category field is changed
                            await this.updateCustomSortProps();
                            this.model.setOrderByList(this.customSortLabels);
                            break;
                        }
                        case interfaces.BarChartDataPopoverKinds.numericFields:
                            await this.model.setNumericFields(newValue);
                            if (this.model.getNumericFields().length > 0 &&
                                this.model.getAggregationType() === restJsObjectLiterals.RESTStatisticType.Count &&
                                this.model.getNumericFields()[0] !== restJsObjectLiterals.wc(this.layerFieldsInfo)) {
                                await this.model.setAggregationType(restJsObjectLiterals.RESTStatisticType.Sum);
                            }
                            // update custom sort's value list if the numeric fields are changed and sort order is custom sort
                            if (this.model.getSortOrder() === index$1.Jf.customSort) {
                                await this.updateCustomSortProps();
                                this.model.setOrderByList(this.customSortLabels);
                            }
                            break;
                        case interfaces.BarChartDataPopoverKinds.splitByField: {
                            const newSplitByField = newValue[0]?.trim() || "";
                            await this.model.setSplitByField(newSplitByField);
                            this.model.setColorMatch(true);
                            break;
                        }
                        case interfaces.BarChartDataPopoverKinds.sortOrder: {
                            const newSortOrder = newValue[0];
                            if (newSortOrder === index$1.Jf.customSort) {
                                await this.updateCustomSortProps();
                                this.model.setSortOrder(newSortOrder, this.customSortLabels);
                            }
                            else {
                                this.model.setSortOrder(newSortOrder);
                            }
                            break;
                        }
                    }
                }
            }
            catch (error) {
                this.arcgisChartsConfigDataChangeError.emit({ error, model: this.model });
                throw error;
            }
            this.removeBarChartDataPopover();
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * @category Event handler
         */
        this.onShowDataLabelsChange = (e) => {
            this.model.setDataLabelsVisibility(e.target.checked);
        };
        /**
         * @category Private
         *
         * Update custom sort properties
         */
        this.updateCustomSortProps = async () => {
            const customSortValues = await this.model.getCustomSortValues();
            this.customSortLabels = customSortValues;
            this.originalCustomSortLabels = [...customSortValues];
            // enable/disable the custom sort list based on the number of custom sort labels
            const isCustomSortDisabled = customSortValues.length > chartUiUtils.UIDefaults.customSortLimit;
            if (isCustomSortDisabled) {
                this.sortOrderElement.label = this.strings.xAxisAsc;
                this.model.setSortOrder(index$1.Jf.xAxisAsc);
            }
            this.isCustomSortDisabled = isCustomSortDisabled;
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * Close bar chart popover
         * @category Private
         */
        this.popoverClose = (e) => {
            if (this.barChartPopover === e?.target) {
                this.removeBarChartDataPopover();
            }
        };
        /**
         * @category Private
         */
        this.resetToOriginalCustomSortLabels = () => {
            this.selectedCustomSortItemId = "";
            this.model.setOrderByList([...this.originalCustomSortLabels]);
        };
        this.model = undefined;
        this.layerFieldsInfo = undefined;
        this.open = true;
        this.selectedCustomSortItemId = undefined;
        this.updatesOccurred = 0;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeBarChartDataPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, direction: this.direction } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
        this.currentDataFilter = this.model.getDataFilter();
        this.updateCustomSortProps();
    }
    /**
     * @category Lifecycle
     */
    async componentWillRender() {
        this.aggregationLabel = await restJsObjectLiterals.ta(this.model.getAggregationType());
        const savedDataFilter = this.model.getDataFilter();
        if (!isEqual.isEqual(savedDataFilter, this.currentDataFilter)) {
            this.updateCustomSortProps();
            this.currentDataFilter = this.model.getDataFilter();
        }
        else {
            this.customSortLabels = this.model.getOrderByList();
        }
        this.disableSplitBy =
            this.model.getNumericFields().length > 1 ||
                this.model.getXAxisField() === "" ||
                this.model.getXAxisField() === chartUiUtils.defaultBarLineFromFieldsName;
    }
    /**
     * @category Render UX
     * @param field
     */
    buildNumericFieldItem(field) {
        return (index.h("calcite-list-item", { label: restJsObjectLiterals.Tl(this.layerFieldsInfo, field), value: field, key: field, closable: true, onCalciteListItemClose: this.onRemoveNumericField }));
    }
    /**
     * @category Render UX
     */
    buildCustomSortListItems() {
        const categoryListItems = [];
        for (let index$1 = 0; index$1 < this.customSortLabels.length; index$1 += 1) {
            const label = this.customSortLabels[index$1];
            const description = restJsObjectLiterals.Cl(this.layerFieldsInfo, label);
            categoryListItems.push(index.h("calcite-list-item", { id: label, key: label, label: label, description: description, value: label, selected: this.selectedCustomSortItemId === label, onCalciteListItemSelect: this.onCustomSortItemSelected }, index.h("calcite-icon", { slot: "content-end" })));
        }
        return categoryListItems;
    }
    /**
     * @category Render UX
     */
    buildCustomSortList() {
        return (index.h("calcite-list", { label: "", class: HTMLClasses$1.list, dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildCustomSortListItems()));
    }
    /**
     * @category Render UX
     */
    renderSorting() {
        return (index.h("arcgis-charts-config-field-select", { disabled: this.model.getXAxisValueFormat()?.type === chartObjectLiterals.WebChartTypes.DateAxisFormat, label: this.model.getXAxisValueFormat()?.type === chartObjectLiterals.WebChartTypes.DateAxisFormat
                ? this.strings.xAxisAsc
                : this.strings[this.model.getSortOrder()], ref: (e) => {
                this.sortOrderElement = e;
            }, onClick: this.onSortOrderSelect }));
    }
    /**
     * @category Render UX
     */
    renderAggregation() {
        return (index.h("arcgis-charts-config-field-select", { label: this.model.getAggregationType() === restJsObjectLiterals.RESTStatisticType.NoAggregation
                ? this.strings.noAggregation
                : this.aggregationLabel, ref: (e) => {
                this.aggregationElement = e;
            }, onClick: this.onAggregationSelect }));
    }
    /**
     * @category Render UX
     */
    renderCategory() {
        const categoryString = this.getCorrectedCategoryValue();
        return (index.h("arcgis-charts-config-field-select", { label: categoryString, ref: (e) => {
                this.categoryElement = e;
            }, onClick: this.onCategorySelect }));
    }
    /**
     * @category Render UX
     */
    renderSplitBy() {
        const splitByString = this.getCorrectedSplitByValue();
        return (index.h("arcgis-charts-config-field-select", { label: splitByString, disabled: this.disableSplitBy, ref: (e) => {
                this.splitByFieldElement = e;
            }, onClick: this.onSplitBySelect }));
    }
    /**
     * @category Render UX
     */
    renderNumericFields(fields) {
        const objectIdField = restJsObjectLiterals.wc(this.layerFieldsInfo);
        const fieldList = [];
        for (let i = 0; i < fields.length; i += 1) {
            if (fields[i] !== objectIdField) {
                fieldList.push(this.buildNumericFieldItem(fields[i]));
            }
        }
        return (index.h("calcite-list", { label: "", class: HTMLClasses$1.fieldList, ref: (e) => {
                this.numericFieldsElement = e;
            } }, fieldList));
    }
    /**
     * @category Render UX
     */
    renderCustomSortUI() {
        const sortOrder = this.model.getSortOrder();
        const valueType = this.model.getXAxisValueFormat()?.type;
        const index$2 = this.customSortLabels.indexOf(this.selectedCustomSortItemId);
        const customSortListUI = valueType ===
            chartObjectLiterals.WebChartTypes.CategoryAxisFormat /*render the custom sort for the field with value format set to CategoryAxisFormat */ &&
            sortOrder === index$1.Jf.customSort &&
            !this.isCustomSortDisabled ? (index.h("calcite-label", { class: HTMLClasses$1.label }, index.h("div", { class: HTMLClasses$1.customSortButtons }, index.h("div", null, index.h("calcite-button", { appearance: "transparent", disabled: index$2 === 0 || index$2 === -1 || this.selectedCustomSortItemId.trim() === "", iconStart: "arrow-bold-up", id: interfaces.ButtonDirections.Up, kind: "neutral", scale: "s", onClick: this.onCustomSortItemMoved }), index.h("calcite-button", { appearance: "transparent", disabled: index$2 === -1 ||
                index$2 === this.customSortLabels.length - 1 ||
                this.selectedCustomSortItemId.trim() === "", iconStart: "arrow-bold-down", id: interfaces.ButtonDirections.Down, kind: "neutral", scale: "s", onClick: this.onCustomSortItemMoved })), index.h("calcite-button", { onClick: this.resetToOriginalCustomSortLabels, disabled: isEqual.isEqual(this.customSortLabels, this.originalCustomSortLabels), appearance: "transparent", iconEnd: "reset" }, this.strings.reset)), restJsObjectLiterals.ts(this.model?.getConfig().series ?? []) === restJsObjectLiterals.ml.BarAndLineFromFields
            ? this.strings.values
            : this.strings.category, this.buildCustomSortList())) : null;
        return customSortListUI;
    }
    /**
     * @category Lifecycle
     */
    render() {
        const aggregationUI = this.renderAggregation();
        const categoryUI = this.renderCategory();
        const splitByUI = this.renderSplitBy();
        const sortingUI = this.renderSorting();
        const numericFieldsUI = this.renderNumericFields([...this.model.getNumericFields()]);
        const customSortUI = this.renderCustomSortUI();
        return (index.h(index.Host, { key: 'd520b608238fe23846bb5b787944a6cebed1e97a', class: { [HTMLClasses$1.rtl]: this.direction === "rtl" } }, index.h("calcite-label", { key: '9d87db83f1a18be036e0ec77960db5e02bdb521c', class: HTMLClasses$1.label }, this.strings.category, categoryUI), index.h("calcite-label", { key: '1d48bd128c8c1df87d363021fabfb389f3a20ee6', class: HTMLClasses$1.label }, this.strings.aggregation, aggregationUI), index.h("calcite-label", { key: 'cd6d29c45d415f6bdc2ebe8c19540bb2536c42a5', class: HTMLClasses$1.label }, this.strings.numericFields, numericFieldsUI), index.h("div", { key: '576fd1a43d78a937bcb1698ef3d5d1f393c119e8', class: HTMLClasses$1.fab }, index.h("calcite-fab", { key: '31389b002023db711664d1259908efa14ebac2ef', appearance: "outline-fill", kind: "neutral", scale: "m", label: this.strings.selectNumericFields, "text-enabled": true, text: this.strings.selectNumericFields, icon: "plus", onClick: this.onAddNumericFields })), index.h("calcite-label", { key: '56536812fd8ba83ab3560588c6e4fb5584fee414', class: HTMLClasses$1.label }, index.h("span", { key: '22802f0cb6286e8e4ff80feb6b90ed6604622670', class: this.disableSplitBy ? HTMLClasses$1.dimText : "" }, this.strings.splitBy), splitByUI), index.h("calcite-label", { key: 'be78b831308f8c819475749a0cb4bb6fcb17e2b0', class: HTMLClasses$1.label, layout: "inline-space-between" }, this.strings.showDataLabels, index.h("calcite-switch", { key: '3cbc95d9741ea3a1e18920e0c031cc792150e701', checked: this.model.getDataLabelsVisibility(), onCalciteSwitchChange: this.onShowDataLabelsChange })), index.h("calcite-label", { key: '5b6e3f2996f9946b7e92aa2707c872b57884c7c3', class: this.model.getXAxisValueFormat()?.type === chartObjectLiterals.WebChartTypes.DateAxisFormat
                ? HTMLClasses$1.disabledLabel
                : HTMLClasses$1.label }, this.strings.sortOrder, sortingUI), customSortUI));
    }
    /**
     * Get the split by value based on the current model's split by field.
     *
     * **NOTE**: If the split by field is empty or there are more than one numeric fields, return an empty string.
     * @category Private
     * @returns {string} - The corrected split by value.
     */
    getCorrectedSplitByValue() {
        return this.model.getSplitByField() === "" || this.model.getNumericFields().length > 1
            ? ""
            : restJsObjectLiterals.Tl(this.layerFieldsInfo, this.model.getSplitByField());
    }
    /**
     * Get the category value based on the current model's category field.
     *
     * **NOTE**: If the category field is empty or set to the default value (`arcgis_charts_bar_line_from_fields_name`),
     * return an empty string.
     * @category Private
     * @returns {string} - The corrected category value.
     */
    getCorrectedCategoryValue() {
        return this.model.getXAxisField() === chartUiUtils.defaultBarLineFromFieldsName || this.model.getXAxisField().trim() === ""
            ? ""
            : restJsObjectLiterals.Tl(this.layerFieldsInfo, this.model.getXAxisField());
    }
    /**
     * @category Private
     */
    setupPopover() {
        // remove already existing chart popover
        // TODO: this is a hotfix for https://devtopia.esri.com/webgis/arcgis-charts/issues/5366
        // have to find a better way to do this
        this.removeBarChartDataPopover();
        // barChartPopover config
        const popoverConfig = {
            layerFieldsInfo: this.layerFieldsInfo,
            onBarChartDataChange: this.onBarChartDataChange,
            popoverClose: this.popoverClose,
        };
        // create a new barChartPopover
        this.barChartPopover = restJsObjectLiterals.Zy(restJsObjectLiterals.Qy.BarChartDataPopover, popoverConfig);
        if (this.barChartPopover !== null) {
            // switch content of bar chart popover based on the provided content
            switch (this.contentKind) {
                case interfaces.BarChartDataPopoverKinds.aggregation:
                    this.barChartPopover.referenceElement = this.aggregationElement;
                    this.barChartPopover.headingTitle = this.strings.aggregationHeader;
                    this.barChartPopover.isNoAggregationDisabled =
                        restJsObjectLiterals.ts(this.model?.getConfig().series ?? []) === restJsObjectLiterals.ml.BarAndLineFromFields;
                    this.barChartPopover.selectedContent = this.model.getAggregationType();
                    break;
                case interfaces.BarChartDataPopoverKinds.category:
                    this.barChartPopover.referenceElement = this.categoryElement;
                    this.barChartPopover.headingTitle = this.strings.categoryHeader;
                    this.barChartPopover.selectedContent = this.model.getXAxisField();
                    break;
                case interfaces.BarChartDataPopoverKinds.numericFields:
                    this.barChartPopover.referenceElement = this.numericFieldsElement;
                    this.barChartPopover.headingTitle = this.strings.numericFieldsHeader;
                    this.barChartPopover.selectedContent = this.model.getNumericFields();
                    break;
                case interfaces.BarChartDataPopoverKinds.splitByField:
                    this.barChartPopover.referenceElement = this.splitByFieldElement;
                    this.barChartPopover.headingTitle = this.strings.splitByFieldHeader;
                    this.barChartPopover.selectedContent = this.model.getSplitByField();
                    break;
                case interfaces.BarChartDataPopoverKinds.sortOrder:
                    this.barChartPopover.referenceElement = this.sortOrderElement;
                    this.barChartPopover.headingTitle = this.strings.sortOrderHeader;
                    this.barChartPopover.selectedContent = this.model.getSortOrder();
                    this.barChartPopover.isCustomSortDisabled = this.isCustomSortDisabled;
                    break;
            }
            this.barChartPopover.contentKind = this.contentKind;
            this.barChartPopover.open = true;
            this.addPopover();
        }
    }
    /**
     * @category Private
     */
    addPopover() {
        if (!document.body.contains(this.barChartPopover) && this.barChartPopover !== null) {
            document.body.appendChild(this.barChartPopover);
        }
    }
    /**
     * Remove bar chart data popover
     * @category Private
     */
    removeBarChartDataPopover() {
        if (this.barChartPopover !== null) {
            this.barChartPopover.open = false;
            this.barChartPopover = restJsObjectLiterals.Jy(this.barChartPopover);
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
    static get watchers() { return {
        "model": ["modelChange"]
    }; }
};
ArcGISChartsConfigBarChartData.style = ArcgisChartsConfigBarChartDataStyle0;

const HTMLIDs = {
    stackedType: "stacked-type",
};
const HTMLClasses = {
    topSection: "top-section",
    sectionLabel: "section-label",
    list: "list",
    disabledInfo: "disabled-info",
    disabledStackingOption: "disabled-stacking-option",
};

const arcgisChartsConfigBarChartSeriesCss = ":host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.top-section{margin-top:var(--arcgis-charts-config-margin-minor)}.section-label{display:flex;margin-bottom:var(--arcgis-charts-config-margin-major);margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.disabled-info{margin:auto 1rem;pointer-events:auto}.disabled-stacking-option{pointer-events:none;opacity:var(--calcite-opacity-disabled)}";
const ArcgisChartsConfigBarChartSeriesStyle0 = arcgisChartsConfigBarChartSeriesCss;

const ArcGISChartsConfigBarChartSeries = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisChartsConfigBarChartSeriesPopoverChange = index.createEvent(this, "arcgisChartsConfigBarChartSeriesPopoverChange", 7);
        this.arcgisChartsConfigPopoverOpenChange = index.createEvent(this, "arcgisChartsConfigPopoverOpenChange", 7);
        /**
         * @category Private
         */
        this.resetSeriesOriginal = async () => {
            this.configSeriesOpen = false;
            this.selectedSeriesIndex = undefined;
            // reset series styling
            await this.model.resetSeriesStyling();
        };
        /**
         * @category Event handler
         */
        this.onMultipleBarSelect = async (event) => {
            if (!this.shouldDisableStacking()) {
                const target = event.target;
                await this.model.setStackedType(target.value ??
                    target.parentElement.value ??
                    "");
            }
        };
        /**
         * @category Event handler
         */
        this.seriesNameChange = (event) => {
            if (event.detail !== null || event.detail !== undefined) {
                const name = event.detail?.name;
                this.model.setSeriesName(name, this.selectedSeriesIndex ?? -1);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesColorChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { color } = e.detail;
                this.model.setColorMatch(false);
                if (color !== undefined) {
                    this.model.setSeriesColor(color, this.selectedSeriesIndex ?? -1);
                }
            }
        };
        /**
         * @category Event handler
         */
        this.onCalciteListOrderChange = (e) => {
            if (e.detail !== null && e.detail !== undefined) {
                const { newIndex, oldIndex } = e.detail;
                this.model.moveSeries(oldIndex, newIndex);
            }
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverClose = () => {
            this.selectedSeriesIndex = undefined;
            this.configSeriesOpen = false;
            this.seriesPopover = restJsObjectLiterals.Jy(this.seriesPopover);
        };
        /**
         * @category Event handler
         */
        this.seriesPopoverChange = (open) => {
            this.arcgisChartsConfigBarChartSeriesPopoverChange.emit({
                open,
                element: this.seriesPopover,
            });
        };
        /**
         * @category Event handler
         */
        this.openSeriesPopOver = (event) => {
            // The target can be either the list item or the icon
            const target = event.target;
            const listItem = target.localName === "calcite-list-item"
                ? target
                : target.parentNode;
            const negateConfigSeriesOpen = !this.configSeriesOpen;
            const seriesIndex = this.model.getSeriesIndex(listItem.value);
            this.configSeriesOpen = this.selectedSeriesIndex === seriesIndex ? negateConfigSeriesOpen : true;
            if (this.configSeriesOpen) {
                this.selectedSeriesIndex = seriesIndex;
            }
            else {
                this.selectedSeriesIndex = undefined;
            }
        };
        /**
         * Creates a tooltip for the hovered action.
         * @category Event handler
         */
        this.createTooltip = (e) => {
            const iconElement = e.target;
            const text = this.model.getAggregationType() === restJsObjectLiterals.RESTStatisticType.NoAggregation
                ? this.strings.noAggStackingDisabled
                : this.strings.singleStackingDisabled;
            this.tooltip = chartUiUtils.createActionTooltip(iconElement);
            this.tooltip.innerHTML = text;
            // append tooltip to the document body instead of action element
            // to avoid tooltip being cut off by calcite panel header element
            document.body.appendChild(this.tooltip);
        };
        /**
         * Destroys tooltip for the action that was being hovered.
         * @category Event handler
         */
        this.destroyTooltip = () => {
            chartUiUtils.destroyActionTooltip(this.tooltip);
        };
        /**
         * Event handler when model config changes.
         * @category Event handler
         */
        this.onModelConfigChange = () => {
            const prevUpdates = this.updatesOccurred;
            this.updatesOccurred = prevUpdates + 1;
        };
        /**
         * Emit event on open popover.
         * @param e
         * @category Private
         */
        this.openChange = (e) => {
            this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
        };
        this.model = undefined;
        this.configSeriesOpen = false;
        this.activeColorMatch = false;
        this.popoverPlacement = "leading";
        this.selectedSeriesIndex = undefined;
        this.updatesOccurred = 0;
        this.isResetAvailable = false;
    }
    /**
     * @category Watch handler
     */
    modelChange(newModel, oldModel) {
        // config change handler for chart model
        oldModel?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
        newModel?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Watch handler
     */
    selectedSeriesIndexChange() {
        if (this.selectedSeriesIndex !== undefined && this.configSeriesOpen) {
            this.setupSeriesPopover();
            if (this.seriesPopover !== null) {
                // sync back to seriesPopover
                this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex);
                this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex);
                if (!this.seriesPopover.open) {
                    this.seriesPopover.open = true;
                }
            }
            this.addSeriesPopover();
        }
        else {
            this.removeSeriesPopover();
        }
    }
    /**
     * @category Private
     */
    removeSeriesPopover() {
        if (this.seriesPopover !== null && this.seriesPopover !== undefined) {
            this.seriesPopover.open = false;
            this.seriesPopover = restJsObjectLiterals.Jy(this.seriesPopover);
        }
        this.seriesPopoverChange(false);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await restJsObjectLiterals.Mn(this.hostElement, index.getAssetPath(`.`)));
        this.modelChange(this.model);
        this.onModelConfigChange();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.removeSeriesPopover();
        this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }
    /**
     * @category Render UX
     */
    buildSeriesListItems() {
        const seriesLength = this.model.getSeriesLength();
        const seriesListItems = [];
        for (let index$1 = 0; index$1 < seriesLength; index$1 += 1) {
            const id = this.model.getSeriesId(index$1);
            const color = this.model.getSeriesColor(index$1);
            const name = this.model.getSeriesName(index$1);
            const chartSubType = this.model.getChartSubType();
            const description = chartSubType === restJsObjectLiterals.ml.BarAndLineFromFields ? this.strings.series : id;
            // If `undefined` is provided for the series, we default the color icon to a grey minus square
            let iconColor = "#CCCCCC";
            let icon = "minus-square";
            if ((seriesLength > 1 || !this.activeColorMatch) && color !== undefined) {
                icon = "square-f";
                const [r, g, b, a] = [...color];
                iconColor = `rgba(${r},${g},${b},${a / 255})`;
            }
            seriesListItems.push(index.h("calcite-list-item", { key: id, label: name ?? id ?? "", description: description, value: id, selected: this.selectedSeriesIndex === index$1, onClick: this.openSeriesPopOver }, index.h("calcite-icon", { icon: icon, style: { color: iconColor }, slot: "content-end" })));
        }
        return seriesListItems;
    }
    /**
     * @category Render UX
     */
    buildSeriesList() {
        return (index.h("calcite-list", { label: "", class: HTMLClasses.list, dragEnabled: true, selectionMode: "single", selectionAppearance: "border", onCalciteListOrderChange: this.onCalciteListOrderChange }, this.buildSeriesListItems()));
    }
    /**
     * @category Render UX
     */
    buildMultipleBarTypeList() {
        //  TODO: add the selected blue icon
        // icon = { this.stackedType === WebChartStackedKinds.Side ? ICON_TYPES.circle : null }
        // calcite-components build issue
        const stackingDisabled = this.shouldDisableStacking();
        if (stackingDisabled && this.model.getStackedType() !== chartObjectLiterals.WebChartStackedKinds.Side) {
            // no need to await here since `buildMultipleBarTypeList` is called by the render method, meaning it will be refreshed after the stacked type is set
            this.model.setStackedType(chartObjectLiterals.WebChartStackedKinds.Side);
        }
        return (index.h("calcite-list", { label: "", id: HTMLIDs.stackedType, class: HTMLClasses.list, selectionMode: "single-persist", selectionAppearance: "border", onClick: this.onMultipleBarSelect }, index.h("calcite-list-item", { label: this.strings.sideBySide, value: chartObjectLiterals.WebChartStackedKinds.Side, selected: this.model.getStackedType() === undefined || this.model.getStackedType() === chartObjectLiterals.WebChartStackedKinds.Side }, index.h("calcite-icon", { scale: "l", icon: "graph-bar-side-by-side", slot: "content-start" })), index.h("calcite-list-item", { class: stackingDisabled ? HTMLClasses.disabledStackingOption : "", label: this.strings.stacked, value: chartObjectLiterals.WebChartStackedKinds.Stacked, selected: this.model.getStackedType() === chartObjectLiterals.WebChartStackedKinds.Stacked }, index.h("calcite-icon", { scale: "l", icon: "graph-bar-stacked", slot: "content-start" }), stackingDisabled && (index.h("calcite-icon", { class: HTMLClasses.disabledInfo, slot: "content-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: this.createTooltip, onMouseOut: this.destroyTooltip }))), index.h("calcite-list-item", { class: stackingDisabled ? HTMLClasses.disabledStackingOption : "", label: this.strings.stacked100, value: chartObjectLiterals.WebChartStackedKinds.Stacked100, selected: this.model.getStackedType() === chartObjectLiterals.WebChartStackedKinds.Stacked100 }, index.h("calcite-icon", { scale: "l", icon: "graph-bar-100-stacked", slot: "content-start" }), stackingDisabled && (index.h("calcite-icon", { class: HTMLClasses.disabledInfo, slot: "content-end", icon: "information", scale: "s", flipRtl: true, onMouseOver: this.createTooltip, onMouseOut: this.destroyTooltip })))));
    }
    async componentWillRender() {
        this.isResetAvailable = await this.model.resetAvailable();
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (index.h(index.Host, { key: 'c68c32d6706117802cdbf7064c6e7b98c6c8ee8e' }, index.h("div", { key: 'f0a0ea37114fe1e323aec655c569a21185028bbf', class: `${HTMLClasses.sectionLabel} ${HTMLClasses.topSection}` }, this.strings.displayMultiSeries), this.buildMultipleBarTypeList(), index.h("div", { key: 'f741d9f2a19e6bf86514f19eaddc02f863ff850d', class: HTMLClasses.sectionLabel }, this.strings.series, index.h("calcite-button", { key: 'f24295686f4299463b4607465e1403c1f996e5cd', onClick: this.resetSeriesOriginal, disabled: !this.isResetAvailable, appearance: "transparent", iconEnd: "reset" }, this.strings.reset)), this.buildSeriesList()));
    }
    /**
     * @category Private
     */
    setupSeriesPopover() {
        if (isNil.isNil(this.seriesPopover) && this.hostElement !== undefined) {
            // seriesPopover config
            const popoverConfig = {
                seriesNameChange: this.seriesNameChange,
                seriesColorChange: this.seriesColorChange,
                openChange: this.openChange,
                hostElement: this.hostElement,
                placement: this.popoverPlacement,
                popoverClose: this.seriesPopoverClose,
            };
            // create a new seriesPopover
            this.seriesPopover = restJsObjectLiterals.Zy(restJsObjectLiterals.Qy.BarChartSeriesPopover, popoverConfig);
        }
    }
    /**
     * @category Private
     */
    addSeriesPopover() {
        if (this.seriesPopover !== null && !document.body.contains(this.seriesPopover)) {
            document.body.appendChild(this.seriesPopover);
        }
        this.seriesPopoverChange(true);
    }
    /**
     * @category Private
     */
    shouldDisableStacking() {
        return this.model.getSeriesLength() <= 1 || this.model.getAggregationType() === restJsObjectLiterals.RESTStatisticType.NoAggregation;
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return index.getElement(this); }
    static get watchers() { return {
        "model": ["modelChange"],
        "selectedSeriesIndex": ["selectedSeriesIndexChange"]
    }; }
};
ArcGISChartsConfigBarChartSeries.style = ArcgisChartsConfigBarChartSeriesStyle0;

exports.arcgis_charts_config_bar_chart_data = ArcGISChartsConfigBarChartData;
exports.arcgis_charts_config_bar_chart_series = ArcGISChartsConfigBarChartSeries;
