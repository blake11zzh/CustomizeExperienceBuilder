/**
 * Type definition for axes bound data
 * Holds the default and current min and max bound values for an axis
 */
export type AxesBoundData = {
    defaultMinBound: number | null | undefined;
    currMinBound: number | null | undefined;
    defaultMaxBound: number | null | undefined;
    currMaxBound: number | null | undefined;
};
/**
 * Type definition for axes bound data map
 * Holds the axes bound data for each axis
 */
type AxesBoundDataMap = Record<string, AxesBoundData>;
/**
 * Type definition for chart axes bound data map
 * Holds the axes bound data map for each chart
 */
type ChartAxesBoundDataMap = Record<string, AxesBoundDataMap | undefined>;
type ScatterPlotDataMap = Record<string, {
    sizePolicyField?: string;
}>;
type AppState = {
    /**
     * Stores selected chart id
     */
    selectedChartId: string;
    /**
     * Stores axes bound values for each chart in the Map
     */
    chartAxesBoundDataMap: ChartAxesBoundDataMap;
    /**
     * Stores cached scatter plot data representing specific UI states that are not saved at the model level
     */
    scatterPlotData: ScatterPlotDataMap;
};
declare const state: AppState;
/**
 * Generates the min max axis key for the selected chart based on the axis type and logarithmic scale.
 * The key is used to fetch/store the min max axis related values in the stencil store for the selected chart
 * @param {string} props.chartId - The selected chart id
 * @param {boolean} props.isXAxis - The axis type (`true` for x-axis, `false` for y-axis)
 * @param {boolean} props.isLogarithmic - The axis scale (`true` for logarithmic)
 */
export declare const generateAxisMinMaxKey: (props: {
    chartId: string;
    isXAxis: boolean;
    isLogarithmic: boolean;
}) => string;
/**
 * Deletes the min max axis key from the stencil store for the selected chart
 * @param {AppState} appState - The current app state in the stencil store
 */
export declare const deleteMinMaxAxisKey: (appState: AppState) => void;
export default state;
