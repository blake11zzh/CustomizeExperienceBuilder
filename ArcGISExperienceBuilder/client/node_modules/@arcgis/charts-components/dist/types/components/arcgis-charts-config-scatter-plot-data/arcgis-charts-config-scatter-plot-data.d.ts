import type { EventEmitter } from "../../stencil-public-runtime";
import type { IField } from "@arcgis/charts-spec";
import type { ScatterPlotModel } from "@arcgis/charts-model";
import type { DataChangeErrorPayload, PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcgisChartsConfigScatterPlotData {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigScatterPlotDataElement;
    /**
     * Scatter Plot Model.
     * @category Public
     */
    model: ScatterPlotModel;
    /**
     * @category Private
     */
    private strings;
    /**
     * r2 value for the scatter plot chart.
     * @category Public
     */
    r2?: number;
    /**
     * Fields Information of the Feature layer
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * Whether the Feature Layer is a table
     * @category Public
     */
    isTableLayer?: boolean;
    /**
     * Event when there is change in scatter plot data popover.
     * @category Public
     */
    arcgisChartsConfigScatterPlotPopoverChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * Event emitted upon catching an error in an async function.
     * @event
     */
    arcgisChartsConfigDataChangeError: EventEmitter<DataChangeErrorPayload>;
    /**
     * When true, the content of the component will be displayed.
     */
    open: boolean;
    /**
     * @category Private
     */
    private selectedElement;
    /**
     * @category Private
     */
    private selectedSizeType;
    /**
     * @category Private
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Private
     */
    private scatterPlotPopover;
    /**
     * @category Private
     */
    private selectColorElement;
    /**
     * @category Private
     */
    private selectTrendLineElement;
    /**
     * @category Private
     */
    private xAxisElement;
    /**
     * @category Private
     */
    private yAxisElement;
    /**
     * @category Private
     */
    private sizeVariableElement;
    /**
     * @category Private
     */
    private contentKind;
    /**
     * @category Private
     */
    private direction;
    /**
     * Default r2 label to show
     * @category Private
     */
    private defaultR2Label;
    /**
     * Holds reference to color mode element
     * @category Private
     */
    private colorModeElement;
    /**
     * Holds reference to pie chart modes element
     * @category Private
     */
    private symbolSizeModeElement;
    /**
     * Holds reference to the min size input element
     * @category Private
     */
    private minSizeInputElement;
    /**
     * Holds reference to the max size input element
     * @category Private
     */
    private maxSizeInputElement;
    /**
     * @category Private
     */
    private items;
    /**
     * @category Watch handler
     */
    modelChange(newModel: ScatterPlotModel, oldModel?: ScatterPlotModel): void;
    openPopover(): void;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Render UX
     */
    private renderXVariable;
    /**
     * @category Render UX
     */
    private renderYVariable;
    /**
     * @category Render UX
     */
    private renderStatistics;
    /**
     * @category Render UX
     */
    private renderFixedSymbol;
    /**
     * @category Lifecycle
     */
    componentDidLoad(): Promise<void>;
    /**
     * @category Render UX
     */
    private renderSizeVariable;
    /**
     * @category Render UX
     */
    private renderMinSizeInput;
    /**
     * @category Render UX
     */
    private renderMaxSizeInput;
    /**
     * @category Render UX
     */
    private renderProportionalSymbol;
    /**
     * @category Render UX
     */
    private renderSymbolSizeType;
    /**
     * @category Render UX
     */
    private renderSymbol;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Event handler
     */
    private setShowTrendLine;
    /**
     * @category Event handler
     */
    private setTrendLineSymbol;
    /**
     * @category Event handler
     */
    private symbolSizeChange;
    /**
     * @category Event handler
     */
    private symbolSizeRangeSliderInput;
    /**
     * @category Event handler
     */
    private changeColorTypeToggle;
    /**
     * @category Event handler
     */
    private changeSymbolSizeTypeToggle;
    /**
     * @category Event handler
     */
    private setFixedSymbolRGBAColor;
    /**
     *
     * @category Event handler
     */
    private changeElementStyle;
    /**
     * @category Event handler
     *
     * called when the X-axis variable is clicked
     */
    private onXVariableSelectChange;
    /**
     * @category Event handler
     *
     * called when the Y-axis variable is clicked
     */
    private onYVariableSelectChange;
    /**
     * @category Event handler
     *
     * called when the size variable is clicked
     */
    private onSizeVariableSelectChange;
    /**
     * @category Event handler
     *
     * @param e
     */
    private setXYField;
    /**
     * @category Event handler
     *
     * @param e
     */
    private setSizeVariableField;
    /**
     * @category Event handler
     */
    private closeScatterPlotPopover;
    /**
     * Emit event on open popover.
     * @param e
     * @category Event handler
     */
    private openChange;
    /**
     * @category Private
     */
    private setupScatterPlotPopover;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
    /**
     * @category Private
     */
    private removeScatterPlotPopover;
    /**
     * @category Private
     */
    private addScatterPlotPopover;
    /**
     * @category Private
     */
    private getCurrentSymbolSizeType;
}
