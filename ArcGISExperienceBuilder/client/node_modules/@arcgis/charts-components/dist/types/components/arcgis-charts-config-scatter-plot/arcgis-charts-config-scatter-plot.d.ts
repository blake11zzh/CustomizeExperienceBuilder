import type { EventEmitter } from "../../stencil-public-runtime";
import type { ScatterPlotModel } from "@arcgis/charts-model";
import type { CalculatedMinMaxBoundsPayload } from "@arcgis/charts-spec";
import type FeatureLayer from "@arcgis/core/layers/FeatureLayer";
import { ChartAuthoringPages } from "../../interfaces";
/** @internal */
export declare class ArcgisChartsConfigScatterPlot {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigScatterPlotElement;
    /**
     * Scatter Plot Model.
     * @category Public
     */
    model: ScatterPlotModel;
    /**
     * Popover placement use it from the viewer to place the popover.
     * @category Public
     */
    popoverPlacement: HTMLCalcitePopoverElement["placement"];
    /**
     * r2 value for the scatter plot chart.
     * @category Public
     */
    r2?: number;
    /**
     * Data min and max values for x and y fields
     * @category Public
     */
    calculatedDataMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Min/Max bounds computed by the chart
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Specific page to be opened
     * @category Public
     */
    page?: ChartAuthoringPages;
    /**
     * layer instance on which the charts are created or edited.
     * @category Public
     */
    layer?: FeatureLayer;
    /**
     * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
     * @category Public
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * @category Private
     */
    private layerFieldsInfo;
    /**
     * Arcgis config change event emitted when there is change in the config.
     * @event
     */
    arcgisChartsConfigWebChartChange: EventEmitter;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Watch handler
     */
    modelChange(newModel: ScatterPlotModel, oldModel?: ScatterPlotModel): void;
    /**
     * Secures the value assigned to the r2 property
     * @param newR2Value the new r2 value assigned to the component
     * @category Watch handler
     */
    r2Change(newR2Value: number): void;
    layerChange(newValue: FeatureLayer | undefined, oldValue: FeatureLayer | undefined): Promise<void>;
    usePopupTemplateFieldsInfoChange(newValue: boolean | undefined, oldValue: boolean | undefined): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentWillRender(): Promise<void>;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Event handler
     */
    private popoverOpen;
    /**
     * @category Private
     */
    private updateFetchLayerFieldsInfo;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
