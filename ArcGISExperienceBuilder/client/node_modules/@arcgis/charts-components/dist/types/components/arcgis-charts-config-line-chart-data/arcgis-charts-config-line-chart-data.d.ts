import type { EventEmitter } from "../../stencil-public-runtime";
import type { IField } from "@arcgis/charts-spec";
import type { LineChartModel } from "@arcgis/charts-model";
import type { DataChangeErrorPayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcGISChartsConfigLineChartData {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigLineChartDataElement;
    /**
     * @category Private
     */
    private strings;
    /**
     *  Line Chart Model.
     *  @category Public
     */
    model: LineChartModel;
    /**
     * call back when the time interval is reset.
     * @category Public
     */
    resetTimeInterval?: () => void;
    /**
     * Fields Information of the Feature layer
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * When true, the content of the component will be displayed.
     */
    open: boolean;
    /**
     * A changed event to be emitted when required numeric field(s) is not met.
     * @event
     */
    arcgisChartsConfigLineChartDataNumericFieldValidate: EventEmitter;
    /**
     * Event emitted when an error is caught on data change.
     * @event
     */
    arcgisChartsConfigDataChangeError: EventEmitter<DataChangeErrorPayload>;
    /**
     * Event emitted when time interval is customized.
     * @event
     */
    arcgisChartsConfigCustomizedTimeInterval: EventEmitter;
    /**
     * Event emitted when time interval is reset to default.
     * @event
     */
    arcgisChartsConfigResetTimeInterval: EventEmitter;
    /**
     * @category Private
     * number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Private
     */
    private lineChartPopover;
    /**
     * @category Private
     */
    private aggregationElement;
    /**
     * @category Private
     */
    private xAxisFieldElement;
    /**
     * @category Private
     */
    private numericFieldsElement;
    /**
     * @category Private
     */
    private splitByFieldElement;
    /**
     * @category Private
     */
    private intervalAlignmentElement;
    /**
     * @category Private
     */
    private intervalElement;
    /**
     * @category Private
     */
    private contentKind;
    /**
     * @category Private
     */
    private aggregationLabel;
    /**
     * @category Private
     */
    private timeAggregationLabel;
    /**
     * @category Private
     */
    private direction;
    /**
     * @category Private
     *
     * Flag to disable the split by field.
     */
    private disableSplitBy;
    /**
     * @category Watch handler
     */
    modelChange(newModel: LineChartModel, oldModel?: LineChartModel): void;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentWillRender(): Promise<void>;
    /**
     * @category Render UX
     */
    private renderAggregation;
    /**
     * @category Render UX
     */
    private renderXAxisField;
    /**
     * @category Render UX
     */
    private renderSplitBy;
    /**
     * @category Render UX
     */
    private renderNumericFields;
    /**
     * @category Render UX
     */
    private renderInterval;
    /**
     * @category Render UX
     */
    private renderIntervalAlignment;
    /**
     * @category Render UX
     */
    private renderEmptyBins;
    /**
     * @category Render UX
     * @param field
     */
    private buildNumericFieldItem;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Private
     */
    private resetTimeIntervalOriginal;
    /**
     * @category Event handler
     *
     * called when the aggregation type is clicked
     */
    private onAggregationSelect;
    /**
     * @category Event handler
     *
     * called when the xAxisField is clicked
     */
    private onXAxisFieldSelect;
    /**
     * @category Event handler
     *
     * called when the splitBy is clicked
     */
    private onSplitBySelect;
    /**
     * @category Event handler
     *
     * called when the add numeric fields button is clicked
     */
    private onAddNumericFields;
    /**
     * @category Event handler
     *
     * Called when individual numeric field item is removed.
     */
    private onRemoveNumericField;
    /**
     * @category Event handler
     *
     * called when the intervalAlignment is clicked
     */
    private onIntervalAlignmentSelect;
    /**
     * @category Event handler
     *
     * called when the interval is clicked
     */
    private onIntervalSelect;
    /**
     * @category Event handler
     *
     * called in response to the arcgisChartsConfigLineChartDataPopoverChange event
     */
    private onLineChartDataChange;
    /**
     * Get the split by value based on the current model's split by field.
     *
     * **NOTE**: If the split by field is empty or there are more than one numeric fields, return an empty string.
     * @category Private
     * @returns {string} - The corrected split by value.
     */
    private getCorrectedSplitByValue;
    /**
     * Get the x-axis field value based on the current model's x-axis field.
     *
     * **NOTE**: If the x-axis field is empty or set to the default value (`arcgis_charts_bar_line_from_fields_name`),
     * return an empty string.
     * @category Private
     * @returns {string} - The corrected x-axis field value.
     */
    private getCorrectedXAxisValue;
    /**
     * @category Event handler
     */
    private onShowDataLabelsChange;
    /**
     * @category Event handler
     */
    private onTrimIncompleteIntervalChange;
    /**
     * @category Event handler
     */
    private onNullPolicyChange;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
    /**
     * @category Private
     */
    private shouldShowTimeBinning;
    /**
     * @category Private
     */
    private setupPopover;
    /**
     * @category Private
     */
    private addPopover;
    /**
     * @category Private
     */
    private popoverClose;
    /**
     * Remove line chart data popover
     * @category Private
     */
    private removeLineChartDataPopover;
}
