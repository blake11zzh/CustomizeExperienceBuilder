import type { EventEmitter } from "../../stencil-public-runtime";
import { type ChartModel } from "@arcgis/charts-model";
import type { SeriesSymbolsMap } from "@arcgis/charts-shared-utils";
import type { CalculatedMinMaxBoundsPayload, SupportedLayer, WebChartGenericDataItem, WebChartHistogramDataItem } from "@arcgis/charts-spec";
import type Sublayer from "@arcgis/core/layers/support/Sublayer";
import type MapView from "@arcgis/core/views/MapView";
import type { ModelListChangePayload, PanelNumberChangePayload, PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcGISChartsConfigCreateFlow {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigCreateFlowElement;
    /**
     * List of chart models.
     * @type {ChartModel[]}
     * @category Public
     * @default []
     */
    modelList: ChartModel[];
    /**
     * List of layers containing the charts to be displayed.
     * @type {(Sublayer | SupportedLayer)[]}
     * @category Public
     * @default []
     */
    layerList: (Sublayer | SupportedLayer)[];
    /**
     * Chart ID for the selected chart.
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    selectedChartId?: string;
    /**
     * Layer ID for the "active" layer. Only charts from this layer will be displayed.
     *
     * (Optional) If not provided, all charts from all layers will be displayed.
     *
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    activeLayerId?: string;
    /**
     * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
     * @type {boolean}
     * @category Public
     * @default false
     */
    disableEditing: boolean;
    /**
     * When `true`, modifications to a chart will be synced back to its associated layer from the `layerList`. **Note: This means the layer object will be mutated automatically.**
     * @type {boolean}
     * @category Public
     * @default false
     */
    syncChartsToLayers: boolean;
    /**
     * Custom time zone for the chart.
     * @type {MapView["timeZone"] | undefined}
     * @category Public
     * @default undefined
     */
    timeZone?: MapView["timeZone"];
    /**
     * header title string to be shown for the component.
     * @category Public
     */
    headerTitle?: string;
    /**
     * Open the view chart panel.
     * @category Public
     */
    open?: boolean;
    /**
     * Processed chart data
     * Used only by histogram
     * @category Public
     */
    chartData?: WebChartGenericDataItem | WebChartHistogramDataItem;
    /**
     * R2 value from trendline
     * Used only by scatter plot
     * @category Public
     */
    r2?: number;
    /**
     * Data min and max values for x and y fields
     * @category Public
     */
    calculatedDataMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Min/Max bounds computed by the chart
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * list of series color
     * @category Public
     */
    seriesColor?: SeriesSymbolsMap;
    /**
     *  Popover placement use it from the viewer to place the popover.
     *  @category Public
     */
    popoverPlacement?: HTMLCalcitePopoverElement["placement"];
    /**
     * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
     * @category Public
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * panel number to keep track of the flow movement.
     * @category Public
     */
    panelNumber: number;
    /**
     * Whether the model is currently loading.
     * Used to mark that we are waiting for a new model to finish being created before we try to use it for anything.
     * @category Public
     */
    modelLoading: boolean;
    /**
     * Whether the filter by selection is currently enabled.
     * @category Public
     */
    filterBySelection?: boolean;
    /**
     * Arcgis config change event emitted when a new chart should be created.
     * @event
     */
    arcgisChartsConfigNewChart: EventEmitter;
    /**
     * Arcgis config change event emitted when the selected config changes.
     * @event
     */
    arcgisChartsConfigSelectedChartChange: EventEmitter;
    /**
     * Arcgis config change event emitted when the model list changes.
     * @event
     */
    arcgisChartsConfigModelListChange: EventEmitter<ModelListChangePayload>;
    /**
     * Arcgis config close event emitted on close of the view chart close.
     * @event
     */
    arcgisChartsConfigChartViewChartClose: EventEmitter;
    /**
     * Event emitted when the popover open changed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * Event emitted when the panel number changed.
     * @category Public
     */
    arcgisChartsConfigPanelNumberChange: EventEmitter<PanelNumberChangePayload>;
    /**
     * Selected page to open during editing experience
     * @category Private
     */
    private selectedPanel?;
    /**
     * Text of the selected chart type.
     * @category Private
     */
    private currentChartTypeText;
    /**
     * @category Private
     *
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * Reference element to hold popover.
     * @category Private
     */
    private selectChartTypePopover;
    /**
     * Reference element to hold the charts list flow item.
     * @category Private
     */
    private chartsListFlowItem;
    /**
     * Tooltip element for tab actions.
     * @category Private
     */
    private tooltip;
    /**
     * Supported chart types
     * @category Private
     */
    private supportedChartTypes;
    /**
     * Called every time layerList is updated
     * @category Watch handler
     */
    layerListChange(): Promise<void>;
    /**
     * Called every time modelList is updated
     * @category Watch handler
     */
    modelListChange(newModelList: ChartModel[], oldModelList: ChartModel[]): Promise<void>;
    /**
     * Called every time selectedChartId is updated
     * @category Watch handler
     */
    selectedChartIdChange(newSelectedChartId: string | undefined): Promise<void>;
    /**
     * Called every time panel number is updated
     * @category Watch handler
     */
    panelNumberChange(newValue: number): void;
    /**
     * Sets the focus to the calcite flow item.
     * @category Public
     */
    setFocus(): Promise<void>;
    /**
     * @category Private
     */
    private strings;
    /**
     * @category Private
     */
    private direction;
    /**
     * @category Lifecycle
     */
    connectedCallback(): void;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Render UX
     */
    private renderViewCharts;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * Adds event listeners for chart components. These listeners will generally check if the event is for the selected chart, and only update the state if so.
     * @category Private
     */
    private addChartEventListeners;
    /**
     * Removes event listeners for chart components.
     * @category Private
     */
    private removeChartEventListeners;
    /**
     * Assigns some specific data if the data is processed by a chart component matching the selected chart.
     * @category Event handler
     */
    private chartDataProcessComplete;
    /**
     * @param chartData The chart's data
     * @category private
     */
    private getDataExtent;
    /**
     * Update the axes bounds in the app state for the selected chart when the chart component calculates new min/max bounds.
     * @category Private
     */
    private updateAxesBoundsInAppState;
    /**
     * Assigns new min/max bounds in to match those calculated by the chart component.
     * @category Event handler
     */
    private chartAxesMinMaxChange;
    /**
     * Assigns new series color in order to align with the colors generated by the chart component.
     * @category Event handler
     */
    private chartSeriesColorChange;
    /**
     * Updates relevant model props to sync changes from chart component.
     * @category Event handler
     */
    private chartNoRenderPropChange;
    /**
     * Applies the visibility change to config. Also resets the min/max bounds to null when legend item visibility changes to allow new bounds to be set for the visible items.
     * @category Event handler
     */
    private chartLegendItemVisibilityChange;
    /**
     * When selected chart type changed in create mode.
     * @category Event handler
     */
    private onSelectChartTypeChange;
    /**
     * Renders list of charts authoring tabs and their content.
     * @category Private
     */
    private renderTabs;
    /**
     * Get the popover placement based on chart list length.
     * @category private
     */
    private getPlacement;
    /**
     * Event handler when a panel back clicked. reduces the drill by one.
     * @category Event handler
     */
    private onBackFlow;
    /**
     * Renders the chart UI editing component.
     * @category Private
     */
    private renderChartUIComponent;
    /**
     * Event handler on add chart.
     * @category Event handler
     */
    private onAddChartClick;
    /**
     * Setup attributes and events on the popover
     * @category Private
     */
    private setupSelectChartTypePopover;
    /**
     * Ddd the popover to the dom
     * @category Private
     */
    private addSelectChartTypePopover;
    /**
     * Gets a model from the list based on the id.
     * @param id Id of the model to get.
     */
    private getModel;
    /**
     * Close and remove the popover
     * @category Private
     */
    private removeSelectChartTypePopover;
    /**
     * Clear partial models from the model list
     * @category Private
     */
    private clearPartialModels;
    /**
     * Event handler closing add chart.
     * @category Event handler
     */
    private onAddChartClose;
    /**
     * Event handler chart delete.
     * @category Event handler
     */
    private onViewChartDelete;
    /**
     * Event handler chart to be selected.
     * @category Event handler
     */
    private onViewChartsSelect;
    /**
     * event handled when chart config edited.
     * @category Event handler
     */
    private onViewChartsEdit;
    /**
     * Event handler view charts to be closed.
     * @category Event handler
     */
    private onViewChartClose;
    /**
     * Creates a tooltip for the hovered action.
     * @category Event handler
     */
    private createTooltip;
    /**
     * Destroys tooltip for the action that was being hovered.
     * @category Event handler
     */
    private destroyTooltip;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
