import type { WebChartHistogramDataItem, CalculatedMinMaxBoundsPayload } from "@arcgis/charts-spec";
import type { SeriesSymbolsMap } from "@arcgis/charts-shared-utils";
import type FeatureLayer from "@arcgis/core/layers/FeatureLayer";
import type { HistogramModel } from "@arcgis/charts-model";
import { ChartAuthoringPages } from "../../interfaces";
/** @internal */
export declare class ArcGISChartsConfigHistogram {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigHistogramElement;
    /**
     * Histogram Model.
     * @category Public
     */
    model: HistogramModel;
    /**
     * The data used by the chart
     * @category Public
     */
    chartData?: WebChartHistogramDataItem;
    /**
     * list of series color
     * @category Public
     */
    seriesColor?: SeriesSymbolsMap;
    /**
     * Min/Max bounds computed by the chart
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Specific page to be opened
     * @category Public
     */
    page?: ChartAuthoringPages;
    /**
     * layer instance on which the charts are created or edited.
     * @category Public
     */
    layer?: FeatureLayer;
    /**
     * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
     * @category Public
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * @category Private
     */
    private layerFieldsInfo;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Watch handler
     */
    modelChange(newModel: HistogramModel, oldModel?: HistogramModel): void;
    layerChange(newValue: FeatureLayer | undefined, oldValue: FeatureLayer | undefined): Promise<void>;
    usePopupTemplateFieldsInfoChange(newValue: boolean | undefined, oldValue: boolean | undefined): Promise<void>;
    /**
     * Assigns new color to the bins
     * @param seriesColor
     * @category Watch handler
     */
    seriesColorChange(seriesColor: SeriesSymbolsMap | undefined): void;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentWillRender(): Promise<void>;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Private
     */
    private updateFetchLayerFieldsInfo;
    /**
     * @category Event handler
     */
    private popoverOpen;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
