import type { EventEmitter } from "../../stencil-public-runtime";
import type { IField, ISimpleLineSymbol, ISimpleFillSymbol } from "@arcgis/charts-spec";
import { WebChartDataTransformations } from "@arcgis/charts-spec";
import { HistogramDataPopoverKinds } from "../../interfaces";
import type { PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcgisChartsConfigHistogramPopover {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigHistogramPopoverElement;
    /**
     * @category Private
     */
    private strings;
    /**
     * @category Private
     */
    private picklist;
    /**
     * Fields Information of the Feature layer
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * Heading for the popover component
     * @category Public
     */
    headingTitle?: string;
    /**
     * Selected field.
     * @category Public
     */
    selectedNumericField?: string;
    /**
     * Selected transformation type.
     * @category Public
     */
    selectedTransformationType?: WebChartDataTransformations;
    /**
     * Selected statistic overlay symbol.
     * @category Public
     */
    selectedOverlaySymbol?: ISimpleLineSymbol;
    /**
     * Selected statistic overlay symbol.
     * @category Public
     */
    selectedBinColor?: ISimpleFillSymbol;
    /**
     * Reference element to show the popover.
     * @category Public
     */
    referenceElement: HTMLElement;
    /**
     * content type to determine popover to use
     * @category Public
     */
    contentKind: HistogramDataPopoverKinds;
    /**
     * Place the popover in the given placement.
     * @category Public
     */
    placement: HTMLCalcitePopoverElement["placement"];
    /**
     * boolean to open or close the popover.
     * @category Public
     */
    open: boolean;
    /**
     * Event emitted when there is a change in symbol property.
     * @event
     */
    arcgisChartsConfigHistogramPopoverSymbolChange: EventEmitter<ISimpleFillSymbol | ISimpleLineSymbol>;
    /**
     * Event emitted when there is a change in symbol property.
     * @event
     */
    arcgisChartsConfigHistogramPopoverChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @event
     */
    arcgisChartsConfigPopoverClose: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange(): void;
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    reposition(): Promise<void>;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Private
     */
    private direction;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentDidLoad(): void;
    /**
     * @category Lifestyle
     */
    componentDidRender(): void;
    /**
     * @category Lifecycle
     */
    componentDidUpdate(): void;
    /**
     * @category Render UX
     */
    private renderFillColor;
    /**
     * @category Render UX
     */
    private renderOverlayStyle;
    /**
     * @category Render UX
     */
    private renderFieldSelect;
    /**
     * @category Render UX
     */
    private renderTransformationSelect;
    /**
     * @param itemKind
     * @category Private
     */
    private buildPickListItems;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Private
     */
    private getPopoverClass;
    /**
     * @category Private
     */
    private renderContentType;
    /**
     * @category Event handler
     */
    private closePopover;
    /**
     * @category Event handler
     */
    private overlaySymbolChange;
    /**
     * @category Event handler
     */
    private fillColorChange;
    /**
     * @category Event handler
     * @param e
     */
    private onPickListChange;
}
