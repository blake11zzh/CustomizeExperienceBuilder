import type { EventEmitter } from "../../stencil-public-runtime";
import type { Color } from "@arcgis/charts-spec";
import type { PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcgisChartsConfigPieChartSlicesPopover {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigPieChartSlicesPopoverElement;
    /**
     * @category Private
     */
    private strings;
    /**
     * property to which the popover needs to be attached.
     * @category Public
     */
    referenceElement: HTMLElement;
    /**
     * selected name to show in popover
     * @category Public
     */
    selectedName?: string;
    /**
     * selected color to show in popover
     * @category Public
     */
    selectedColor?: Color;
    /**
     * Reference element to show the popover.
     * @category Public
     */
    placement: HTMLCalcitePopoverElement["placement"];
    /**
     * open or close the popover.
     * @category Public
     */
    open: boolean;
    /**
     * Event when there is a change in slice name.
     * @category Public
     */
    arcgisChartsConfigSlicesPopoverNameChange: EventEmitter;
    /**
     * Event when there is a change in slice color.
     * @category Public
     */
    arcgisChartsConfigSlicesPopoverColorChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverClose: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * Watch on open popover.
     * @category Private
     */
    openChange(): void;
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    reposition(): Promise<void>;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentDidLoad(): void;
    /**
     * @category Lifecycle
     */
    componentDidUpdate(): void;
    /**
     * @category Lifecycle
     */
    componentDidRender(): void;
    /**
     * @category Lifecycle
     */
    render(): HTMLCalcitePopoverElement;
    /**
     * @category Event handler
     */
    private sliceNameChange;
    /**
     * @category Event handler
     */
    private closePopover;
    /**
     * @category Event handler
     */
    private colorChange;
}
