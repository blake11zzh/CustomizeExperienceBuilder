import type { ChartModel } from "@arcgis/charts-model";
import type { SupportedCharts } from "@arcgis/charts-shared-utils";
import type { SupportedLayer } from "@arcgis/charts-spec";
import type Sublayer from "@arcgis/core/layers/support/Sublayer.js";
export declare const HTMLClasses: {
    readonly addChartContainer: "add-chart-container";
    readonly addChart: "add-chart";
    readonly chartEditPanel: "chart-edit-panel";
    readonly tabBar: "tab-bar";
    readonly tab: "tab";
    readonly rtl: "arcgis-charts-rtl";
};
export declare function replaceDuplicateIds(modelList: ChartModel[] | undefined, selectedChartId?: string): string | undefined;
/**
 * Filters the model list by the layer id and supported chart types.
 * @param modelList
 * @param layerId
 * @param supportedChartTypes
 */
export declare function filterModelListByLayerId(modelList: ChartModel[] | undefined, layerId: string, supportedChartTypes: SupportedCharts[]): ChartModel[];
/**
 * Gets a combination of the unique layers (by `layer.id`) found in the `modelList` and `layerList`.
 * @param modelList
 * @param selectedLayerId
 */
export declare function getCombinedLayerList(props: {
    modelList: ChartModel[] | undefined;
    layerList: (Sublayer | SupportedLayer)[];
    activeLayerId?: string;
    disableEditing?: boolean;
}): (Sublayer | SupportedLayer)[];
/**
 * Update each layer's charts list based on the model list.
 * @param layers The whose `charts` arrays will be updated.
 * @param modelList The list of chart models to update the layers based on.
 */
export declare function updateAllChartsOnLayers(layers: (Sublayer | SupportedLayer | undefined)[], modelList: ChartModel[]): void;
/**
 * Update the chart on the layer's `charts` array.
 * @param layer The layer whose `charts` array will be updated.
 * @param model The chart model to update the layer based on.
 */
export declare function updateChartOnLayer(layer: Sublayer | SupportedLayer | undefined, model: ChartModel): void;
/**
 * Add a new chart to the layer's `charts` array.
 * @param layer The layer to add the chart to.
 * @param model The chart model to add to the layer.
 */
export declare function addChartToLayer(layer: Sublayer | SupportedLayer | undefined, model: ChartModel): void;
/**
 * Delete a chart from the layer's `charts` array.
 * @param layer The layer to delete the chart from.
 * @param chartId The id of the chart to delete.
 */
export declare function deleteChartFromLayer(layer: Sublayer | SupportedLayer | undefined, chartId: string): void;
