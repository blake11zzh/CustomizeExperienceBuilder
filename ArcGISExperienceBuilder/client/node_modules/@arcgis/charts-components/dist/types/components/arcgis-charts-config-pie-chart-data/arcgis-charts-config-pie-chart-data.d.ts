import type { EventEmitter } from "../../stencil-public-runtime";
import type { IField } from "@arcgis/charts-spec";
import { type PieChartModel } from "@arcgis/charts-model";
import type { DataChangeErrorPayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcGISChartsConfigPieChartData {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigPieChartDataElement;
    /**
     * @category Private
     */
    private strings;
    /**
     * Pie Chart Model.
     * @category Public
     */
    model: PieChartModel;
    /**
     * Fields Information of the Feature layer
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * When true, the content of the component will be displayed.
     */
    open: boolean;
    /**
     * A changed event to be emitted when required numeric field(s) is not met.
     * @event
     */
    arcgisChartsConfigPieChartDataNumericFieldValidate: EventEmitter;
    /**
     * Event emitted when an error is caught on data change.
     * @event
     */
    arcgisChartsConfigDataChangeError: EventEmitter<DataChangeErrorPayload>;
    /**
     * @category Private
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Private
     */
    private pieChartPopover;
    /**
     * @category Private
     */
    private sortOrderElement;
    /**
     * @category Private
     */
    private categoryElement;
    /**
     * @category Private
     */
    private numericFieldsElement;
    /**
     * @category Private
     */
    private contentKind;
    /**
     * @category Private
     */
    private direction;
    /**
     * @category Watch handler
     */
    modelChange(newModel: PieChartModel, oldModel?: PieChartModel): void;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Render UX
     */
    private renderSorting;
    /**
     * @category Render UX
     */
    private renderCategory;
    /**
     * @category Render UX
     */
    private renderNumericFields;
    /**
     * @category Render UX
     * @param field
     */
    private buildNumericFieldItem;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Event handler
     *
     * called when the sort order is clicked
     */
    private onSortOrderSelect;
    /**
     * @category Event handler
     *
     * called when the category is clicked
     */
    private onCategorySelect;
    /**
     * @category Event handler
     *
     * called when the add numeric fields button is clicked
     */
    private onAddNumericFields;
    /**
     * @category Event handler
     *
     * Called when individual numeric field item is removed.
     */
    private onRemoveNumericField;
    /**
     * @category Event handler
     *
     * called in response to the arcgisChartsConfigPieChartDataPopoverChange event
     */
    private onPieChartDataChange;
    /**
     * @category Event handler
     */
    private onShowDataLabelsChange;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
    /**
     * @category Private
     */
    private updateMode;
    /**
     * @category Private
     */
    private setupPopover;
    /**
     * @category Private
     */
    private addPopover;
    /**
     * @category Private
     */
    private popoverClose;
    /**
     * Get the category value based on the current model's category field.
     *
     * **NOTE**: If the category field is the default value(`arcgis_charts_pie_from_fields_name`),
     * return an empty string.
     * @category Private
     * @returns {string} The category value.
     */
    private getCorrectedCategoryValue;
    /**
     * Remove pie chart data popover
     * @category Private
     */
    private removePieChartDataPopover;
}
