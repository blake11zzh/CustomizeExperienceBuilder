import type { EventEmitter } from "../../stencil-public-runtime";
import type { ChartModel } from "@arcgis/charts-model";
import type { PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcgisChartsConfigFormat {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigFormatElement;
    /**
     * Chart Model.
     * @category Public
     */
    model: ChartModel;
    /**
     * @category Private
     */
    private strings;
    /**
     * Event when there is change in format popover.
     * @category Public
     */
    arcgisChartsConfigFormatPopoverChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * @category Private
     */
    private selectedSymbols;
    /**
     * @category Private
     */
    private selectedTexts;
    /**
     * @category Private
     */
    private selectedBackground;
    /**
     * @category Private
     */
    private selectedElement?;
    /**
     * @category Private
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Watch handler
     */
    modelChange(newModel: ChartModel, oldModel?: ChartModel): void;
    /**
     * @category Private
     */
    private formatPopover;
    /**
     * Last text property that was
     * @category Private
     */
    private lastSelectedText;
    /**
     * List of text selectable text elements
     * @category Private
     */
    private selectableElements;
    /**
     * List to store text property keys used for current chart.
     * @category Private
     */
    private textProperties;
    /**
     * List to store symbol property keys used for current chart.
     * @category Private
     */
    private symbolProperties;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * render and store format UI elements
     * @returns textElements and symbolElements
     */
    private renderFormatElements;
    /**
     * @category Render UX
     */
    private renderTextElement;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * Corrects selected text elements in DOM to match selected texts list
     * @category Event handler
     */
    private correctTextElementSelection;
    /**
     * @category Event handler
     */
    private symbolPropertyChange;
    /**
     * @category Event handler
     */
    private textPropertyChange;
    /**
     * @category Event handler
     */
    private backgroundChange;
    /**
     * @category Event handler
     */
    private updateSymbolProps;
    /**
     * @category Event handler
     */
    private updateBackground;
    /**
     * @category Event handler
     */
    private updateTextProps;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
    /**
     * @category Private
     */
    private formatPopoverChange;
    /**
     * @category Private
     */
    private formatPopoverClose;
    /**
     * @category Private
     */
    private mergeFormatValues;
    /**
     * @param keys
     * @param elementValue
     * @category Private
     */
    private updateSelectedElement;
    /**
     * @param value
     * @category Private
     */
    private initSelectedTexts;
    /**
     * @param value
     * @category Private
     */
    private initSelectedSymbols;
    /**
     * Emit event on open popover.
     * @param e
     * @category Private
     */
    private openChange;
    /**
     * @category Private
     */
    private setupFormatPopover;
    /**
     * @category Private
     */
    private removeFormatPopover;
    /**
     * @category Private
     */
    private addFormatPopover;
    /**
     * @category Private
     */
    private getFormatValue;
    /**
     * @category Private
     */
    private setFormatValue;
}
