import type { EventEmitter } from "../../stencil-public-runtime";
import type { ModelWithGuides } from "@arcgis/charts-model";
import type MapView from "@arcgis/core/views/MapView";
import type { CalculatedMinMaxBoundsPayload } from "@arcgis/charts-spec";
/** @internal */
export declare class ArcgisChartsConfigGuides {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigGuidesElement;
    /**
     * Chart Model.
     * @category Public
     */
    model: ModelWithGuides;
    /**
     * Custom time zone for the chart.
     * @type {MapView["timeZone"] | undefined}
     * @category Public
     * @default undefined
     */
    timeZone?: MapView["timeZone"];
    /**
     * Min/Max bounds computed by the chart
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Enable X-Axis guide
     * @category Public
     */
    enableXAxisGuide: boolean;
    /**
     * Enable Y-Axis Guide
     * @category Public
     */
    enableYAxisGuide: boolean;
    /**
     * When true, the content of the component will be displayed.
     */
    open: boolean;
    /**
     * Event when there is change in guide popover.
     * @category Public
     */
    arcgisChartsConfigGuidePopoverChange: EventEmitter;
    /**
     * @category Private
     */
    private showAddButton;
    /**
     * Latest guide to be open.
     * @category Private
     */
    private latestGuidePosition;
    /**
     * @category Private
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Watch handler
     */
    modelChange(newModel: ModelWithGuides, oldModel?: ModelWithGuides): void;
    /**
     * @category Private
     */
    private strings;
    /**
     * @category Private
     */
    private addGuideButton;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * Gets the total number of guides.
     * @category Private
     */
    private getAllGuidesLength;
    /**
     * @param guide
     * @category Render UX
     */
    private renderGuide;
    /**
     * @category Render UX
     */
    private renderGuides;
    /**
     * @param callBack
     * @category Render UX
     */
    private renderAddGuideButton;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Lifecycle
     */
    componentDidRender(): void;
    /**
     * @category Private
     */
    private addXGuide;
    /**
     * @category Private
     */
    private addYGuide;
    /**
     * @param guideNameTemplate
     * @param count
     * @category Private
     */
    private getUniqueName;
    /**
     * @category Private
     */
    private closeAddPopOver;
    /**
     * @category Private
     */
    private togglePopOver;
    /**
     * @category Event handler
     */
    private setChangedGuide;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
