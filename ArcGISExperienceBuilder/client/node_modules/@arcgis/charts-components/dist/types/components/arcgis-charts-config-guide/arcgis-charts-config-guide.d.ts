import type MapView from "@arcgis/core/views/MapView";
import type { EventEmitter } from "../../stencil-public-runtime";
import type { CalculatedMinMaxBoundsPayload } from "@arcgis/charts-spec";
import type { ModelWithGuides } from "@arcgis/charts-model";
import { GuideOrientation } from "@arcgis/charts-model";
import type { GuideChangePayload } from "./resource";
import type { PopoverOpenChangePayload } from "../../utils/event-payloads";
/** @internal */
export declare class ArcgisChartsConfigGuide {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigGuideElement;
    /**
     * Chart Model.
     * @category Public
     */
    model: ModelWithGuides;
    /**
     * Custom time zone for the chart.
     * @type {MapView["timeZone"] | undefined}
     * @category Public
     * @default undefined
     */
    timeZone?: MapView["timeZone"];
    /**
     * Min/Max bounds computed by the chart
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Index to identify the guide.
     * @category Public
     */
    index: number;
    /**
     * Orientation of the guide.
     * @category Public
     */
    orientation: GuideOrientation;
    /**
     * List position of the latest guide to be opened.
     * @category Private
     */
    latestGuidePosition: number;
    /**
     * @category Private
     */
    private guidePopover;
    /**
     * @category Private
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * @category Watch handler
     */
    modelChange(newModel: ModelWithGuides, oldModel?: ModelWithGuides): void;
    /**
     * Guide change event emitted with the new guide.
     * @category Public
     */
    arcgisChartsConfigGuideChange: EventEmitter<GuideChangePayload>;
    /**
     * Event when there is change in guide popover.
     * @category Public
     */
    arcgisChartsConfigGuidePopoverChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @category Public
     */
    arcgisChartsConfigPopoverOpenChange: EventEmitter<PopoverOpenChangePayload>;
    /**
     * @category Private
     */
    private strings;
    /**
     * @category Private
     */
    private tooltip;
    /**
     * @category Private
     */
    private startCalciteInput;
    /**
     * @category Private
     */
    private endCalciteInput;
    /**
     * @category Private
     */
    private startDateCalciteInput;
    /**
     * @category Private
     */
    private endDateCalciteInput;
    /**
     * @category Private
     */
    private startTimeCalciteInput;
    /**
     * @category Private
     */
    private endTimeCalciteInput;
    /**
     * @category Private
     */
    private colorElement;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Render UX
     */
    private renderColorElement;
    get isXAxisDateField(): boolean;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Lifecycle
     */
    componentDidLoad(): void;
    /**
     * @category Event handler
     */
    private onColorElementSelect;
    /**
     * @category Event handler
     */
    private setGuideStart;
    /**
     * @category Event handler
     */
    private setGuideEnd;
    /**
     * @category Event handler
     */
    private setGuideDateTimeRange;
    /**
     * @category Event handler
     */
    private colorChange;
    /**
     * @category Event handler
     */
    private symbolChange;
    /**
     * @category Event handler
     */
    private setGuideName;
    /**
     * @category Event handler
     */
    private setGuideLabel;
    /**
     * @category Event handler
     */
    private setGuideRendered;
    /**
     * @category Event handler
     */
    private lineStyleChange;
    /**
     * @category Private
     */
    private guidePopoverChange;
    /**
     * @category Private
     */
    private setupGuidePopover;
    /**
     * @category Private
     */
    private removeGuidePopover;
    /**
     * @category Private
     */
    private addGuidePopover;
    /**
     * @param fillColor
     * @category Private
     */
    private setColor;
    /**
     * Gets the date string from the bound value in ISO format.
     * @category Private
     */
    private getDateStringFromBound;
    /**
     * Gets the time string from the bound value in ISO format.
     * @category Private
     */
    private getTimeStringFromBound;
    /**
     * Creates a tooltip for the hovered action.
     * @category Event handler
     */
    private createTooltip;
    /**
     * Toggles guide visibility from action click.
     * @category Event handler
     */
    private toggleGuide;
    /**
     * Destroys tooltip for the action that was being hovered.
     * @category Event handler
     */
    private destroyTooltip;
    /**
     * Deletes guide from action click.
     * @category Event handler
     */
    private deleteGuide;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
