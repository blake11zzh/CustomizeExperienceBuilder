import type { EventEmitter } from "../../stencil-public-runtime";
import type { SupportedLayer } from "@arcgis/charts-spec";
import type { ChartModel } from "@arcgis/charts-model";
import type Sublayer from "@arcgis/core/layers/support/Sublayer";
/** @internal */
export declare class ArcGISChartsConfigViewCharts {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigViewChartsElement;
    /**
     * @category Private
     */
    private strings;
    /**
     *
     * The selectedChartId uniquely identifies the current selected chart in a layer or array of charts.
     * @category Public
     */
    selectedChartId: string;
    /**
     * The layer object associated with the charts.
     * @category Public
     */
    layer: Sublayer | SupportedLayer | undefined;
    /**
     * Array of chart models passed to this component to view the different charts
     * @category Public
     */
    modelList?: ChartModel[];
    /**
     * Prevents the list from being placed in a group. Mainly to avoid showing the layer title header.
     * @category Public
     */
    noGroup: boolean;
    /**
     * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
     * @category Public
     */
    disableEditing: boolean;
    /**
     * Event emitted when the chart to view changes.
     * @event
     */
    arcgisChartsConfigViewChartSelect: EventEmitter;
    /**
     * Event emitted when the chart is deleted.
     * @event
     */
    arcgisChartsConfigViewChartDelete: EventEmitter;
    /**
     * Event emitted when the chart to be edited.
     * @event
     */
    arcgisChartsConfigViewChartEdit: EventEmitter;
    /**
     * Event emitted when the add chart button is clicked.
     * @event
     */
    arcgisChartsConfigViewChartAddChart: EventEmitter<{
        referenceElement: HTMLCalciteFabElement;
        layerId: string | undefined;
    }>;
    /**
     * Title of the chart.
     * @category Private
     */
    private chartTitle;
    /**
     * Rename popover is opened.
     * @category Private
     */
    private renameOpen;
    /**
     *
     * The selectedChartId for all dropdown action.
     * @category Private
     */
    private selectedActionChartId;
    /**
     * @category Private
     *
     * Number of updates that have occurred.
     */
    private updatesOccurred;
    /**
     * Called every time modelList is updated
     * @category Watch handler
     */
    modelListChange(newModelList: ChartModel[], oldModelList: ChartModel[]): Promise<void>;
    /**
     * reference to attach rename popover.
     * @category Private
     */
    private renameReferenceElement;
    /**
     * rename popover
     * @category Private
     */
    private chartRenamePopover;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * @category Lifecycle
     */
    render(): HTMLElement;
    /**
     * @category Event handler
     */
    private onAddChartClick;
    /**
     * @category Render UX
     */
    private buildChartList;
    /**
     * @category Event handler
     */
    private onChartSelect;
    /**
     * @category Event handler
     */
    private chartEditSelect;
    /**
     * @category Event handler
     */
    private chartRenameSelect;
    /**
     * @category Event handler
     */
    private chartDeleteSelect;
    /**
     * @category Event handler
     */
    private chartActionClosed;
    /**
     * @category Event handler
     */
    private chartActionOpened;
    /**
     * @category Event handler
     */
    private popoverClose;
    /**
     * @category Event handler
     */
    private onChartRename;
    private setupRenamePopover;
    /**
     * Remove chart rename popover
     * @category Private
     */
    private removeChartRenamePopover;
    /**
     * Event handler when model config changes.
     * @category Event handler
     */
    private onModelConfigChange;
}
