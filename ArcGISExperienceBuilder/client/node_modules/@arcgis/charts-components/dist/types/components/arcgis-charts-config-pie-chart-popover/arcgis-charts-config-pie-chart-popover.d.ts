import type { EventEmitter } from "../../stencil-public-runtime";
import type { IField } from "@arcgis/charts-spec";
import { PieChartDataPopoverKinds } from "../../interfaces";
/** @internal */
export declare class ArcgisChartsConfigPieChartPopover {
    /**
     * @category Public
     */
    hostElement: HTMLArcgisChartsConfigPieChartPopoverElement;
    /**
     * @category Private
     */
    private strings;
    /**
     * Heading for the popover component
     * @category Public
     */
    headingTitle?: string;
    /**
     * Reference element to show the popover.
     * @category Public
     */
    referenceElement: HTMLElement;
    /**
     * boolean to open or close the popover.
     * @category Public
     */
    open: boolean;
    /**
     * boolean to open or close the popover.
     * @category Public
     */
    contentKind: PieChartDataPopoverKinds;
    /**
     * Fields Information of the Feature layer
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * Currently selected content (field names, for example)
     * to pass on to the popover.
     * @category Public
     */
    selectedContent: string[] | string | undefined;
    /**
     * Event emitted when there is a change in aggregation type.
     * @event
     */
    arcgisChartsConfigPieChartDataPopoverChange: EventEmitter;
    /**
     * Event emitted when the popover is closed.
     * @event
     */
    arcgisChartsConfigPopoverClose: EventEmitter;
    /**
     * Watches for change to selected content to record if there was a pick list change.
     * @param newSelectedContent
     * @param oldSelectedContent
     * @category Watch handler
     */
    selectedContentChange(newSelectedContent: string[] | string | undefined, oldSelectedContent: string[] | string | undefined): void;
    /**
     * Calls `reposition()` method on popover element.
     * @category Public
     */
    reposition(): Promise<void>;
    /**
     * @category Private
     */
    private picklist;
    /**
     * @category Private
     */
    private popoverElement;
    /**
     * @category Private
     */
    private placement;
    /**
     * @category Private
     */
    private offsetDistance;
    /**
     * @category Private
     */
    private pickListHasChanged;
    /**
     * @category Private
     */
    private aggregationLabels;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentWillRender(): Promise<void>;
    /**
     * @category Lifestyle
     */
    componentDidRender(): void;
    /**
     * @category Render UX
     */
    private renderAggregationType;
    /**
     * @category Render UX
     */
    private buildAggregationPickListItems;
    /**
     * @category Render UX
     */
    private renderCategory;
    /**
     * @category Render UX
     */
    private renderNumericFields;
    /**
     * @category Render UX
     * Unlike the other field-based render items, the sort orders
     * are static. So, a function separate from buildPickListItems()
     * needs to be used.
     */
    private renderSortOrder;
    /**
     * @category Render UX
     */
    private buildSortOrder;
    /**
     * @param field
     * @category Render UX
     */
    private buildPickListItem;
    /**
     * @param itemKind
     * @category Render UX
     */
    private buildPickListItems;
    /**
     * @category Render UX
     */
    private renderPopoverInfo;
    /**
     * @category Lifecycle
     */
    render(): HTMLCalcitePopoverElement;
    /**
     * @category Event handler
     */
    private closePopover;
    /**
     * @category Event handler
     * @param e
     */
    private onDataContentTypeChange;
    /**
     * @category Event handler
     * @param e
     */
    private onNumericFieldsChange;
    /**
     * @category Event handler
     */
    private onNumericFieldSelectionDone;
}
