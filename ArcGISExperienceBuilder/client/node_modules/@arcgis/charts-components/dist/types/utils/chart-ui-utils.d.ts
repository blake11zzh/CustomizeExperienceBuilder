import { RESTSimpleLineSymbolStyle } from "@arcgis/charts-spec";
import { FormatKeys } from "@arcgis/charts-model";
import type { RGB } from "@esri/calcite-components/dist/components/calcite-color-picker/interfaces";
import type { NumericFieldsChangeProps } from "../interfaces";
export declare const UIDefaults: {
    readonly DebounceTimer: 400;
    readonly SliderTimer: 100;
    readonly PopoverTimer: 60;
    readonly customSortLimit: 100;
};
export declare const DefaultStatNumberFormat: {
    readonly style: "decimal";
    readonly minimumFractionDigits: 0;
    readonly maximumFractionDigits: 3;
};
export declare const aggregationList: ("count" | "min" | "max" | "sum" | "avg" | "percentile_cont" | "no_aggregation")[];
export declare const pieAggregationList: ("count" | "sum")[];
export declare function getFormatIcon(formatKey: FormatKeys | undefined): string | undefined;
/**
 * Validates a value entered in a numeric calcite-input.
 * Controls that the value is not undefined, not empty (invalid) and in between the [min, max] range if provided
 * @param value
 * @param min
 * @param max
 */
export declare function isCalciteInputValidNumber(value: number | string, min?: number | string, max?: number | string): boolean;
/**
 * Secures a provided number by returning either the same number, or a default value, or undefined.
 * The actual value is typed as "string" because the calcite-input inputs returns a string value
 * no matter the type of input used (text, number, textarea...).
 *   - If the value is valid (not NaN, finite), the value is returned
 *   - If not and if a valid default value is provided, the default value is returned
 *   - If not, an empty string is returned
 * @param value
 * @param defaultValue
 */
export declare function sanitizeNumber(value?: number | string | null, defaultValue?: number): string | undefined;
/**
 * Modifies a calcite-input status
 * @param props
 */
export declare function modifyCalciteInputStatus(props: {
    inputElement: HTMLCalciteInputElement;
    status: string;
}): void;
export declare const UIInputStatus: Record<string, "idle" | "invalid" | "valid">;
/**
 * Formats a number according to the locale and optionally rounds it
 * @param value
 * @param precision
 */
export declare function formatNumberToLocale(value?: number, formatOptions?: Intl.NumberFormatOptions): string;
/**
 * Indicates whether the item matches the provided string,
 * or one of the strings in the array of strings.
 * @param item
 * @param selectedContent
 */
export declare function itemMatchesSelectedContent(item: string, selectedContent?: string[] | string): boolean;
/**
 * Returns the offset distance based on the provided placement option of a popover;
 * For now, the popover will display either on top of the target element using the 'trailing' placement option,
 * or to the left of the target element using the 'leading' placement option.
 * @param placement
 */
export declare function getPopoverOffsetDistance(placement: HTMLCalcitePopoverElement["placement"]): number;
/**
 * Helper function to sanitize a color with NaNs
 *  - Returns null if color is undefined or contains NaN values
 *  - Returns the color otherwise
 * @param color RGB | undefined
 */
export declare function sanitizeColor(color: RGB | undefined): RGB | null;
/**
 * Handler for "keydown" event on numberic input element. Prevents input of "e" character.
 * @param e Input element "keydown" event
 */
export declare const blockNumericE: (e: KeyboardEvent) => void;
/**
 * Creates a tooltip for the hovered action.
 * @param actionElement
 */
export declare const createActionTooltip: (actionElement: HTMLCalciteActionElement | HTMLCalciteIconElement | HTMLCalciteListElement) => HTMLCalciteTooltipElement;
/**
 * Destroys tooltip for the action that was being hovered.
 * @param tooltip
 */
export declare const destroyActionTooltip: (tooltip: HTMLCalciteTooltipElement) => void;
/**
 * emit numeric field change event
 * @param props.pickListElement
 * @param props.eventEmitter
 * @param props.contentKind
 * @category Public
 */
export declare const emitNumericFieldsChange: (props: NumericFieldsChangeProps) => void;
/**
 * Returns the line style type based on the provided line style.
 * @param lineStyle
 */
export declare function getLineStyleType(lineStyle: RESTSimpleLineSymbolStyle | undefined): string;
