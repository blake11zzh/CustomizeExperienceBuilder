/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { MissingSplitBySeriesProps, WebChartComponentVersion } from "./utils/interfaces";
import { BarChartModel, BoxPlotModel, ChartModel, GuideOrientation, HistogramModel, LineChartModel, ModelWithGuides, ModelWithXYAxes, PieChartModel, ScatterPlotModel } from "@arcgis/charts-model";
import { CalculatedMinMaxBoundsPayload, CategoryFormatOptions, Color, IField, ISimpleFillSymbol, ISimpleLineSymbol, RESTSimpleLineSymbolStyle, SimpleLineSymbolStyle, SupportedLayer, WebChartDataFilters, WebChartDataTransformations, WebChartDataTypes, WebChartGenericDataItem, WebChartHistogramDataItem, WebChartLegendPositions, WebChartTextSymbol, WebChartTypes, WebMapWebChart } from "@arcgis/charts-spec";
import { ActionModes, ActionState, ActionToggle, ChartElementLimit, ChartTypes, CursorRange, DataWarningObject, DefaultChartActions, ErrorPolicy, LayerFieldsChangePolicy, LayerFilterChangePolicy, LayerRendererChangePolicy, PieSlicesSymbols, SelectionData, SelectionTheme, SeriesSymbolsMap, ValidationStatus } from "@arcgis/charts-shared-utils";
import { AxisLabelFormatCallback, ChartOptions, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, MessageOptions, NotifyOptions, PieChartLegendValueLabelFormatCallback, PreRenderCallback } from "@arcgis/charts-js";
import { AxesMinMaxChangePayload, DataChangeErrorPayload as DataChangeErrorPayload1, DataProcessCompletePayload, DefaultActionSelectPayload, LegendItemVisibilityChangePayload, ModelListChangePayload, NoRenderPropChangePayload, PanelNumberChangePayload, PopoverOpenChangePayload, SelectionCompletePayload, SeriesColorChangePayload } from "./utils/event-payloads";
import { BarChartDataPopoverKinds, BoxPlotDataPopoverKinds, ChartAuthoringPages, HistogramDataPopoverKinds, IntervalPopoverProps, LineChartDataPopoverKinds, PieChartDataPopoverKinds, ScatterPlotDataPopoverKinds } from "./interfaces";
import { unknown as DataChangeErrorPayload } from "./components";
import { FontStyleChangePayload } from "./components/arcgis-charts-config-font-style/resource";
import { GuideChangePayload } from "./components/arcgis-charts-config-guide/resource";
export { MissingSplitBySeriesProps, WebChartComponentVersion } from "./utils/interfaces";
export { BarChartModel, BoxPlotModel, ChartModel, GuideOrientation, HistogramModel, LineChartModel, ModelWithGuides, ModelWithXYAxes, PieChartModel, ScatterPlotModel } from "@arcgis/charts-model";
export { CalculatedMinMaxBoundsPayload, CategoryFormatOptions, Color, IField, ISimpleFillSymbol, ISimpleLineSymbol, RESTSimpleLineSymbolStyle, SimpleLineSymbolStyle, SupportedLayer, WebChartDataFilters, WebChartDataTransformations, WebChartDataTypes, WebChartGenericDataItem, WebChartHistogramDataItem, WebChartLegendPositions, WebChartTextSymbol, WebChartTypes, WebMapWebChart } from "@arcgis/charts-spec";
export { ActionModes, ActionState, ActionToggle, ChartElementLimit, ChartTypes, CursorRange, DataWarningObject, DefaultChartActions, ErrorPolicy, LayerFieldsChangePolicy, LayerFilterChangePolicy, LayerRendererChangePolicy, PieSlicesSymbols, SelectionData, SelectionTheme, SeriesSymbolsMap, ValidationStatus } from "@arcgis/charts-shared-utils";
export { AxisLabelFormatCallback, ChartOptions, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, MessageOptions, NotifyOptions, PieChartLegendValueLabelFormatCallback, PreRenderCallback } from "@arcgis/charts-js";
export { AxesMinMaxChangePayload, DataChangeErrorPayload as DataChangeErrorPayload1, DataProcessCompletePayload, DefaultActionSelectPayload, LegendItemVisibilityChangePayload, ModelListChangePayload, NoRenderPropChangePayload, PanelNumberChangePayload, PopoverOpenChangePayload, SelectionCompletePayload, SeriesColorChangePayload } from "./utils/event-payloads";
export { BarChartDataPopoverKinds, BoxPlotDataPopoverKinds, ChartAuthoringPages, HistogramDataPopoverKinds, IntervalPopoverProps, LineChartDataPopoverKinds, PieChartDataPopoverKinds, ScatterPlotDataPopoverKinds } from "./interfaces";
export { unknown as DataChangeErrorPayload } from "./components";
export { FontStyleChangePayload } from "./components/arcgis-charts-config-font-style/resource";
export { GuideChangePayload } from "./components/arcgis-charts-config-guide/resource";
export namespace Components {
    interface ArcgisChart {
        /**
          * Not applicable to gauge. Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * Auto-disposes the chart when a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @remarks Not applicable to gauge.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config from information extracted from the data for instance.
          * @remarks Applicable to gauge and pie chart only.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * Clears all selection on the chart.
          * @remarks Not applicable to gauge.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * Whether to use the stable version of the component or the beta's.
          * @type {WebChartComponentVersion}
          * @category Public
          * @default "stable"
         */
        "componentVersion": WebChartComponentVersion;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode
          * @remarks Not applicable to gauge. Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to gauge.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ChartOptions["dataLabelFormatter"];
        /**
          * Disables all interactions on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * Disables the toggling of series via the legend items.
          * @remarks Only applicable to multi-series charts.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * Whether to use features uniquely designed for a chart currently being configured by a user via the UI.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "enableConfiguration": boolean;
        /**
          * Enables the responsive features.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * Export the current chart to an image
          * @param props.format image format to export the chart to. Supports 'png' | 'jpg'
          * @param props.quality quality of the image should be 0 - 1. If outside of the range, it will default to 1
          * @param props.maxWidth max width in px
          * @param props.minWidth min width in px
          * @param props.maxHeight max height in px
          * @param props.minHeight min height in px
          * @returns
         */
        "exportImage": (props: { format: "jpg" | "png"; quality?: number; maxWidth?: number; minWidth?: number; maxHeight?: number; minHeight?: number; }) => Promise<File>;
        /**
          * The index of the feature to be rendered. Only used when the gauge is a feature-based gauge.
          * @remarks Applicable to gauge only.
          * @type {number | undefined}
          * @category Public
          * @default undefined
         */
        "featureIndex"?: number;
        /**
          * When `true`, all chart elements are filtered based on view extent.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterByExtent"?: boolean;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the gauge inner label. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Applicable to gauge only.
          * @type {GaugeInnerLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "gaugeInnerLabelFormatter"?: GaugeInnerLabelFormatCallback;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the empty series are completely hidden from the chart and the legend. For example a series can be empty after applying a data filter, filter by attribute or geometry (as when using the filter by extent).
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * Hides the license watermark.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenseWatermark"?: boolean;
        /**
          * Hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @remarks Applicable to line chart only.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the layer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Allows the chart to update automatically when the layer's fields change. Applies when the field list (`fields`) in the feature layer is updated.
          * @type {LayerFieldsChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFieldsChangePolicy": LayerFieldsChangePolicy;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * Allows the chart to update automatically when the layer's renderer changes. Applies when the color match feature is enabled.
          * @remarks Even though that property is set to Ignore the chart will use the layer's renderer information when the data is updated.
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @remarks Not applicable to gauge.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * A callback function used to format the legend value labels. If the returned string contains HTML tags they will be interpreted as such. If provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.
          * @remarks Applicable to pie chart only.
          * @type {PieChartLegendValueLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "legendValueLabelFormatter"?: PieChartLegendValueLabelFormatCallback;
        /**
          * When `true`, the legend is visible on the chart.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Instance of an ArcGIS Chart Model. Provides an API to interact with the chart's configuration.  **Note:** This property has a union type of `ChartModel | WebMapWebChart` meaning a raw chart config object can be passed to it instead, however it is recommended to use a `ChartModel` instance whenever possible.
          * @type {ChartModel | WebMapWebChart | undefined}
          * @default undefined
         */
        "model": ChartModel | WebMapWebChart | undefined;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @category Public
          * @param message The message to display in the notification panel.
          * @param heading The heading to display in the notification panel.
          * @param options The options to apply to the notification panel.
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * Builds the charts one by one rather than all at the same time.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * When `true`, the chart's dataItems associated with empty (no value) categories (from only a `Count` aggregation) will be pouplated with 0s, via the `completeDataForEmptyCategoriesWithZeros` method.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "replaceNoValueCategoryWithZero"?: boolean;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @remarks Applicable to XY charts only.
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * Applicable to bar chart, line chart, combo bar-line and box plot. When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * Applies runtime data filters to the chart's.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * A callback function used to format the secondary y-axis labels. If the returned string contains HTML tags they will be interpreted as such. The property will be effective only if 3 axes are defined (dual axis chart).
          * @remarks Not applicable to pie chart nor gauge.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "secondaryYAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @remarks Not applicable to gauge.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @remarks Not applicable to gauge.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @remarks Only applicable to charts using the temporal binning feature (bar and line chart).
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @remarks Not applicable to gauge.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * Whether to synchronize the selection between chart components from the same layer.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "syncSelection": boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to gauge.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ChartOptions["tooltipFormatter"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to `true` the missing series will be added to cover the split-by values not referenced by the config. The default information from the property `updateSplitBySeries.seriesTemplate` will be applied to the new series.
          * @remarks Only applicable to bar chart, line chart and box plot, when they use a split-by field.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * Enables the animations on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * Allows the use of the fields alias from the layer.popupTemplate when rendering the field names on the chart (e.g. tooltips, axes, legend).
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access the LayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the ArcGIS charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart nor gauge.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsActionBar {
        /**
          * Action bar selection mode. Defines which selection mode the slotted action bar should use.
          * @category Public
          * @type {Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey">}
          * @default "multiSelectionWithCtrlKey"
         */
        "actionBarSelectionMode"?: Extract<
    ActionModes,
    "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"
  >;
        /**
          * Chart element reference with which the action bar is associated.
          * @category Public
          * @type {HTMLArcgisChartElement}
          * @default undefined
         */
        "chartElement"?: HTMLArcgisChartElement;
        /**
          * Chart type used to determine which default actions to display.
          * @category Public
          * @type {SupportedCharts | undefined}
          * @default undefined
         */
        "chartType"?: ChartTypes | undefined;
        /**
          * When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "clearSelectionState": ActionState;
        /**
          * Custom title for the clear selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "clearSelectionTitle"?: string | undefined;
        /**
          * When active, the clear selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "clearSelectionToggle": ActionToggle;
        /**
          * When disabled, interaction with the edit chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "disabled"
         */
        "editChartState": ActionState;
        /**
          * Custom title for the edit chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "editChartTitle"?: string | undefined;
        /**
          * When active, the edit chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "editChartToggle": ActionToggle;
        /**
          * When `true`, the action bar is expanded.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "expanded": boolean;
        /**
          * When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterByExtentState": ActionState;
        /**
          * Custom title for the filter by extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterByExtentTitle"?: string | undefined;
        /**
          * When active, the filter by extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "filterByExtentToggle": ActionToggle;
        /**
          * When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterBySelectionState": ActionState;
        /**
          * Custom title for the filter by selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterBySelectionTitle"?: string | undefined;
        /**
          * When active, the filter by selection action is highlighted.
          * @category Public type {ActionToggle}
          * @default "inactive"
         */
        "filterBySelectionToggle": ActionToggle;
        /**
          * When `true`, overrides the individual settings for each action to instead force disable them all.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "forceDisableActions": boolean;
        /**
          * When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "fullExtentState": ActionState;
        /**
          * Custom title for the full extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "fullExtentTitle"?: string | undefined;
        /**
          * When active, the full extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "fullExtentToggle": ActionToggle;
        /**
          * Holds a list of actions to hide from the action bar.  **Note:** The edit chart action is hidden by default. To show it, remove its value from this array.
          * @category Public
          * @type {DefaultChartActions[]}
          * @default ["editChart"]
         */
        "hiddenActions": DefaultChartActions[];
        /**
          * When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "legendState": ActionState;
        /**
          * Custom title for the legend action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "legendTitle"?: string | undefined;
        /**
          * When active, the legend action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "legendToggle": ActionToggle;
        /**
          * When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "rotateChartState": ActionState;
        /**
          * Custom title for the rotate chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "rotateChartTitle"?: string | undefined;
        /**
          * When active, the rotate chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "rotateChartToggle": ActionToggle;
        /**
          * When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "selectionState": ActionState;
        /**
          * Custom title for the selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "selectionTitle"?: string | undefined;
        /**
          * When active, the selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "selectionToggle": ActionToggle;
        /**
          * When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "switchSelectionState": ActionState;
        /**
          * Custom title for the switch selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "switchSelectionTitle"?: string | undefined;
        /**
          * When active, the switch selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "switchSelectionToggle": ActionToggle;
        /**
          * When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "zoomState": ActionState;
        /**
          * Custom title for the zoom action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "zoomTitle"?: string | undefined;
        /**
          * When active, the zoom action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "zoomToggle": ActionToggle;
    }
    interface ArcgisChartsConfigAxes {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Chart Model.
          * @category Public
         */
        "model": ModelWithXYAxes;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
        /**
          * Whether to show the switch option to enable X-axis logarithmic scale.
          * @category Public
         */
        "showEnableXLogOption": boolean;
        /**
          * Whether to show the switch option to enable Y-axis logarithmic scale.
          * @category Public
         */
        "showEnableYLogOption": boolean;
        /**
          * Whether to show the input option to set X-axis maximum bound.
          * @category Public
         */
        "showMaxXBoundOption": boolean;
        /**
          * Whether to show the input option to set Y-axis maximum bound.
          * @category Public
         */
        "showMaxYBoundOption": boolean;
        /**
          * Whether to show the input option to set X-axis minimum bound.
          * @category Public
         */
        "showMinXBoundOption": boolean;
        /**
          * Whether to show the input option to set Y-axis minimum bound.
          * @category Public
         */
        "showMinYBoundOption": boolean;
    }
    interface ArcgisChartsConfigAxis {
        /**
          * Title of the axis.
          * @category Public
         */
        "axisTitle": string;
        /**
          * Data max value for the field used by the axis.
          * @category Public
         */
        "dataMaxValue"?: number;
        /**
          * Data min value for the field used by the axis. Used to know when to enable the logarithmic switch.
          * @category Public
         */
        "dataMinValue"?: number;
        /**
          * Initial value for the max bound.
          * @category Public
         */
        "initialMaxBound"?: number;
        /**
          * Initial value for the min bound.
          * @category Public
         */
        "initialMinBound"?: number;
        /**
          * Whether this axis component is for the X-axis or the Y-axis.
          * @category Public
         */
        "isXAxis": boolean;
        /**
          * Maximum limit for maxBounds input
          * @category Public
         */
        "maxBoundMaxLimit": number;
        /**
          * Minimum limit for maxBounds input
          * @category Public
         */
        "maxBoundMinLimit": number;
        /**
          * Maximum limit for minBounds input
          * @category Public
         */
        "minBoundMaxLimit": number;
        /**
          * Minimum limit for minBounds input
          * @category Public
         */
        "minBoundMinLimit": number;
        /**
          * Chart Model.
          * @category Public
         */
        "model": ModelWithXYAxes;
        /**
          * Show enable logarithmic option for the axis.
          * @category Public
         */
        "showEnableLogOption": boolean;
        /**
          * Show maximum bounds option for the axis.
          * @category Public
         */
        "showMaxBoundOption": boolean;
        /**
          * Show minimum bounds option for the axis.
          * @category Public
         */
        "showMinBoundOption": boolean;
    }
    interface ArcgisChartsConfigBarChart {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model": BarChartModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigBarChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model": BarChartModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
    }
    interface ArcgisChartsConfigBarChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind": BarChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Flag to disable custom sort option.
          * @category Public
          * @default false
         */
        "isCustomSortDisabled": boolean;
        /**
          * Flag to disable aggregation type of `No Aggregation`. `No Aggregation` is disabled for the bar chart created with only numeric fields.
          * @category Public
          * @default false
         */
        "isNoAggregationDisabled": boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent": string[] | string | undefined;
    }
    interface ArcgisChartsConfigBarChartSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch": boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen": boolean;
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model": BarChartModel;
        /**
          * Place the popover in this placement.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigBarChartSeriesPopover {
        /**
          * open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigBoxPlot {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * featureLayer on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Box Plot Model.
          * @category Public
         */
        "model": BoxPlotModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigBoxPlotData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * Box Plot Model.
          * @category Public
         */
        "model": BoxPlotModel;
    }
    interface ArcgisChartsConfigBoxPlotPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind": BoxPlotDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Flag to disable custom sort option.
          * @category Public
          * @default false
         */
        "isCustomSortDisabled": boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent": string[] | string | undefined;
    }
    interface ArcgisChartsConfigBoxPlotSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch": boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen": boolean;
        /**
          * Box Chart Model.
          * @category Public
         */
        "model": BoxPlotModel;
        /**
          * Place the popover in this placement.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigBoxPlotSeriesPopover {
        /**
          * Whether the symbol is a line symbol or not.
          * @category Public
         */
        "isLineSymbol"?: boolean;
        /**
          * Whether the label can be configured or not.
          * @category Public
         */
        "labelCanBeConfigured": boolean;
        /**
          * open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * Selected line style to show in popover.  **Only applicable when mean lines are shown.**
          * @category Public
         */
        "selectedLineStyle"?: SimpleLineSymbolStyle;
        /**
          * Selected line width to show in popover.  **Only applicable when mean lines are shown.**
          * @category Public
         */
        "selectedLineWidth"?: number;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigCategoryFormat {
        /**
          * categoryFormat is the format of the Category Axis.
          * @category Public
         */
        "categoryFormat": CategoryFormatOptions;
    }
    interface ArcgisChartsConfigChartRenamePopover {
        /**
          * Chart name to be edited.
          * @category Public
         */
        "name": string;
        /**
          * Chart rename popover to be open.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to render popover.
          * @category Public
         */
        "popoverReferenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
    }
    interface ArcgisChartsConfigColorStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose": boolean;
        /**
          * header for the line style
          * @category Public
         */
        "header"?: string;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Color to show in the color style component.
          * @category Public
         */
        "selectedColor"?: Color;
    }
    interface ArcgisChartsConfigColors {
        /**
          * Header for color block.
          * @category Public
         */
        "heading"?: string;
        /**
          * rgba (Esri type) used when the color picker is opened.
          * @category Public
         */
        "rgba": Color;
    }
    interface ArcgisChartsConfigCreateFlow {
        /**
          * Layer ID for the "active" layer. Only charts from this layer will be displayed.  (Optional) If not provided, all charts from all layers will be displayed.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "activeLayerId"?: string;
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Processed chart data Used only by histogram
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem | WebChartHistogramDataItem;
        /**
          * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "disableEditing": boolean;
        /**
          * Whether the filter by selection is currently enabled.
          * @category Public
         */
        "filterBySelection"?: boolean;
        /**
          * header title string to be shown for the component.
          * @category Public
         */
        "headerTitle"?: string;
        /**
          * List of layers containing the charts to be displayed.
          * @type {(Sublayer | SupportedLayer)[]}
          * @category Public
          * @default []
         */
        "layerList": (Sublayer | SupportedLayer)[];
        /**
          * List of chart models.
          * @type {ChartModel[]}
          * @category Public
          * @default []
         */
        "modelList": ChartModel[];
        /**
          * Whether the model is currently loading. Used to mark that we are waiting for a new model to finish being created before we try to use it for anything.
          * @category Public
         */
        "modelLoading": boolean;
        /**
          * Open the view chart panel.
          * @category Public
         */
        "open"?: boolean;
        /**
          * panel number to keep track of the flow movement.
          * @category Public
         */
        "panelNumber": number;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * R2 value from trendline Used only by scatter plot
          * @category Public
         */
        "r2"?: number;
        /**
          * Chart ID for the selected chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "selectedChartId"?: string;
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * Sets the focus to the calcite flow item.
          * @category Public
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, modifications to a chart will be synced back to its associated layer from the `layerList`. **Note: This means the layer object will be mutated automatically.**
          * @type {boolean}
          * @category Public
          * @default false
         */
        "syncChartsToLayers": boolean;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigFieldSelect {
        /**
          * disables the component
          * @category Public
         */
        "disabled": boolean;
        /**
          * input is invalid
          * @category Public
         */
        "invalid": boolean;
        /**
          * The display value for the selection
          * @category Public
         */
        "label": string;
    }
    interface ArcgisChartsConfigFontStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose"?: boolean;
        /**
          * style for the font and text properties.
          * @category Public
         */
        "fontStyle": WebChartTextSymbol;
        /**
          * header for the font style
          * @category Public
         */
        "header"?: string;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
    }
    interface ArcgisChartsConfigFormat {
        /**
          * Chart Model.
          * @category Public
         */
        "model": ChartModel;
    }
    interface ArcgisChartsConfigFormatPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Selected text properties to show for font style.
          * @category Public
         */
        "selectedElement"?: Color | ISimpleLineSymbol | WebChartTextSymbol;
    }
    interface ArcgisChartsConfigGeneral {
        /**
          * Chart Model.
          * @category Public
         */
        "model": ChartModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
    }
    interface ArcgisChartsConfigGuide {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Index to identify the guide.
          * @category Public
         */
        "index": number;
        /**
          * List position of the latest guide to be opened.
          * @category Private
         */
        "latestGuidePosition": number;
        /**
          * Chart Model.
          * @category Public
         */
        "model": ModelWithGuides;
        /**
          * Orientation of the guide.
          * @category Public
         */
        "orientation": GuideOrientation;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
    }
    interface ArcgisChartsConfigGuidePopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Selected properties to show for style.
          * @category Public
         */
        "selectedElement"?: Color | ISimpleLineSymbol;
    }
    interface ArcgisChartsConfigGuides {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Enable X-Axis guide
          * @category Public
         */
        "enableXAxisGuide": boolean;
        /**
          * Enable Y-Axis Guide
          * @category Public
         */
        "enableYAxisGuide": boolean;
        /**
          * Chart Model.
          * @category Public
         */
        "model": ModelWithGuides;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
    }
    interface ArcgisChartsConfigHistogram {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartHistogramDataItem;
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Histogram Model.
          * @category Public
         */
        "model": HistogramModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigHistogramData {
        /**
          * countValue represents the number for non-null values used to calculate the histogram.
          * @category Public
         */
        "countValue": number;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * maxValue represents the maximum value statistic of the histogram.
          * @category Public
         */
        "maxValue": number;
        /**
          * meanValue represents the mean statistic of the histogram.
          * @category Public
         */
        "meanValue": number;
        /**
          * medianValue represents the median statistic of the histogram.
          * @category Public
         */
        "medianValue": number;
        /**
          * minValue represents the minimum value statistic of the histogram.
          * @category Public
         */
        "minValue": number;
        /**
          * Histogram Model.
          * @category Public
         */
        "model": HistogramModel;
        /**
          * nullsValue represents the number for null values statistic of the histogram.
          * @category Public
         */
        "nullsValue": number;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
        /**
          * standardDevValue represents the standard deviation statistic of the histogram.
          * @category Public
         */
        "standardDevValue": number;
        /**
          * sumValue represents the sum value statistic of the histogram.
          * @category Public
         */
        "sumValue": number;
    }
    interface ArcgisChartsConfigHistogramPopover {
        /**
          * content type to determine popover to use
          * @category Public
         */
        "contentKind": HistogramDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Place the popover in the given placement.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Selected statistic overlay symbol.
          * @category Public
         */
        "selectedBinColor"?: ISimpleFillSymbol;
        /**
          * Selected field.
          * @category Public
         */
        "selectedNumericField"?: string;
        /**
          * Selected statistic overlay symbol.
          * @category Public
         */
        "selectedOverlaySymbol"?: ISimpleLineSymbol;
        /**
          * Selected transformation type.
          * @category Public
         */
        "selectedTransformationType"?: WebChartDataTransformations;
    }
    interface ArcgisChartsConfigInvalidInputMessage {
        /**
          * invalid input message
          * @category Public
         */
        "invalidInputMessage": string;
        /**
          * determines whether input is valid or invalid
          * @category Public
         */
        "isInvalid": boolean;
    }
    interface ArcgisChartsConfigLineChart {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Line Chart Model.
          * @category Public
         */
        "model": LineChartModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigLineChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * Line Chart Model.
          * @category Public
         */
        "model": LineChartModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
        /**
          * call back when the time interval is reset.
          * @category Public
         */
        "resetTimeInterval"?: () => void;
    }
    interface ArcgisChartsConfigLineChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind": LineChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent": IntervalPopoverProps | string[] | string | undefined;
    }
    interface ArcgisChartsConfigLineChartSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch": boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen": boolean;
        /**
          * Line Chart Model.
          * @category Public
         */
        "model": LineChartModel;
        /**
          * place the popover in this placement.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigLineChartSeriesPopover {
        /**
          * open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected line style to show in popover
          * @category Public
         */
        "selectedLineStyle"?: RESTSimpleLineSymbolStyle;
        /**
          * selected line width to show in popover
          * @category Public
         */
        "selectedLineWidth"?: number;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigLineStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose"?: boolean;
        /**
          * header for the line style
          * @category Public
         */
        "header"?: string;
        /**
          * style for the line symbol.
          * @category Public
         */
        "lineStyle": ISimpleLineSymbol;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * boolean to enable wrapping the content in a panel.
          * @category Public
         */
        "usePanel"?: boolean;
    }
    interface ArcgisChartsConfigNumberFormat {
        /**
          * numberFormat property is of type [Intl Numberformat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).
          * @category Public
         */
        "numberFormat": Intl.NumberFormatOptions;
    }
    interface ArcgisChartsConfigPieChart {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem;
        /**
          * Whether the filter by selection is currently enabled.
          * @category Public
         */
        "filterBySelection"?: boolean;
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model": PieChartModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: Map<number, PieSlicesSymbols>;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigPieChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model": PieChartModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
    }
    interface ArcgisChartsConfigPieChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind": PieChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent": string[] | string | undefined;
    }
    interface ArcgisChartsConfigPieChartSlices {
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem;
        /**
          * To open the config of the selected slice.
          * @category Public
         */
        "configSliceOpen": boolean;
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model": PieChartModel;
        /**
          * place the popover in this placement.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigPieChartSlicesPopover {
        /**
          * open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigScatterPlot {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Scatter Plot Model.
          * @category Public
         */
        "model": ScatterPlotModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * r2 value for the scatter plot chart.
          * @category Public
         */
        "r2"?: number;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigScatterPlotData {
        /**
          * Whether the Feature Layer is a table
          * @category Public
         */
        "isTableLayer"?: boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo": IField[];
        /**
          * Scatter Plot Model.
          * @category Public
         */
        "model": ScatterPlotModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open": boolean;
        /**
          * r2 value for the scatter plot chart.
          * @category Public
         */
        "r2"?: number;
    }
    interface ArcgisChartsConfigScatterPlotPopover {
        /**
          * Content kind for the popover.
          * @category Public
         */
        "contentKind": ScatterPlotDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open": boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement": HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement": HTMLElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * Selected text properties to show for font style.
          * @category Public
         */
        "selectedContent"?: Color | ISimpleLineSymbol | string;
    }
    interface ArcgisChartsConfigSelectChartTypePopover {
        /**
          * header title string to be shown for the component.
          * @category Public
         */
        "headerTitle"?: string;
        /**
          * Id of the layer associated with the chart to be added.
          * @category Public
         */
        "layerId": string | undefined;
        /**
          * Open the closed panel.
          * @category Public
         */
        "open": boolean;
        /**
          * Reference element to position the popover off of
          * @category Public
         */
        "popoverPlacement": HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to position the popover off of
          * @category Public
         */
        "popoverReferenceElement": HTMLCalciteFabElement;
        /**
          * Calls `reposition()` method on popover element.
          * @category Public
         */
        "reposition": () => Promise<void>;
        /**
          * The chart type selected
          * @category Public
         */
        "selectedChartType"?: Extract<WebChartTypes, "barSeries" | "boxPlotSeries" | "histogramSeries" | "lineSeries" | "pieSeries" | "scatterSeries">;
    }
    interface ArcgisChartsConfigViewCharts {
        /**
          * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
          * @category Public
         */
        "disableEditing": boolean;
        /**
          * The layer object associated with the charts.
          * @category Public
         */
        "layer": Sublayer | SupportedLayer | undefined;
        /**
          * Array of chart models passed to this component to view the different charts
          * @category Public
         */
        "modelList"?: ChartModel[];
        /**
          * Prevents the list from being placed in a group. Mainly to avoid showing the layer title header.
          * @category Public
         */
        "noGroup": boolean;
        /**
          * The selectedChartId uniquely identifies the current selected chart in a layer or array of charts.
          * @category Public
         */
        "selectedChartId": string;
    }
}
export interface ArcgisChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartElement;
}
export interface ArcgisChartsActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsActionBarElement;
}
export interface ArcgisChartsConfigBarChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBarChartElement;
}
export interface ArcgisChartsConfigBarChartDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBarChartDataElement;
}
export interface ArcgisChartsConfigBarChartPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBarChartPopoverElement;
}
export interface ArcgisChartsConfigBarChartSeriesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBarChartSeriesElement;
}
export interface ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBarChartSeriesPopoverElement;
}
export interface ArcgisChartsConfigBoxPlotDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBoxPlotDataElement;
}
export interface ArcgisChartsConfigBoxPlotPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBoxPlotPopoverElement;
}
export interface ArcgisChartsConfigBoxPlotSeriesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBoxPlotSeriesElement;
}
export interface ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement;
}
export interface ArcgisChartsConfigCategoryFormatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigCategoryFormatElement;
}
export interface ArcgisChartsConfigChartRenamePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigChartRenamePopoverElement;
}
export interface ArcgisChartsConfigColorStyleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigColorStyleElement;
}
export interface ArcgisChartsConfigColorsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigColorsElement;
}
export interface ArcgisChartsConfigCreateFlowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigCreateFlowElement;
}
export interface ArcgisChartsConfigFontStyleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigFontStyleElement;
}
export interface ArcgisChartsConfigFormatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigFormatElement;
}
export interface ArcgisChartsConfigFormatPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigFormatPopoverElement;
}
export interface ArcgisChartsConfigGuideCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigGuideElement;
}
export interface ArcgisChartsConfigGuidePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigGuidePopoverElement;
}
export interface ArcgisChartsConfigGuidesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigGuidesElement;
}
export interface ArcgisChartsConfigHistogramDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigHistogramDataElement;
}
export interface ArcgisChartsConfigHistogramPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigHistogramPopoverElement;
}
export interface ArcgisChartsConfigLineChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineChartElement;
}
export interface ArcgisChartsConfigLineChartDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineChartDataElement;
}
export interface ArcgisChartsConfigLineChartPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineChartPopoverElement;
}
export interface ArcgisChartsConfigLineChartSeriesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineChartSeriesElement;
}
export interface ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineChartSeriesPopoverElement;
}
export interface ArcgisChartsConfigLineStyleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigLineStyleElement;
}
export interface ArcgisChartsConfigNumberFormatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigNumberFormatElement;
}
export interface ArcgisChartsConfigPieChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigPieChartElement;
}
export interface ArcgisChartsConfigPieChartDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigPieChartDataElement;
}
export interface ArcgisChartsConfigPieChartPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigPieChartPopoverElement;
}
export interface ArcgisChartsConfigPieChartSlicesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigPieChartSlicesElement;
}
export interface ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigPieChartSlicesPopoverElement;
}
export interface ArcgisChartsConfigScatterPlotCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigScatterPlotElement;
}
export interface ArcgisChartsConfigScatterPlotDataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigScatterPlotDataElement;
}
export interface ArcgisChartsConfigScatterPlotPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigScatterPlotPopoverElement;
}
export interface ArcgisChartsConfigSelectChartTypePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigSelectChartTypePopoverElement;
}
export interface ArcgisChartsConfigViewChartsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsConfigViewChartsElement;
}
declare global {
    interface HTMLArcgisChartElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": DataProcessCompletePayload;
        "arcgisDataFetchComplete": WebChartDataTypes;
        "arcgisLegendItemVisibilityChange": LegendItemVisibilityChangePayload;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesColorChangePayload;
        "arcgisAxesMinMaxChange": AxesMinMaxChangePayload;
        "arcgisSelectionComplete": SelectionCompletePayload;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
        "arcgisConfigChange": { newConfig: WebMapWebChart | undefined; oldConfig: WebMapWebChart | undefined; functionCalled: string | undefined };
    }
    interface HTMLArcgisChartElement extends Components.ArcgisChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartElement, ev: ArcgisChartCustomEvent<HTMLArcgisChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartElement, ev: ArcgisChartCustomEvent<HTMLArcgisChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartElement: {
        prototype: HTMLArcgisChartElement;
        new (): HTMLArcgisChartElement;
    };
    interface HTMLArcgisChartsActionBarElementEventMap {
        "arcgisDefaultActionSelect": DefaultActionSelectPayload;
        "arcgisActionBarToggle": boolean;
    }
    interface HTMLArcgisChartsActionBarElement extends Components.ArcgisChartsActionBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsActionBarElement: {
        prototype: HTMLArcgisChartsActionBarElement;
        new (): HTMLArcgisChartsActionBarElement;
    };
    interface HTMLArcgisChartsConfigAxesElement extends Components.ArcgisChartsConfigAxes, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigAxesElement: {
        prototype: HTMLArcgisChartsConfigAxesElement;
        new (): HTMLArcgisChartsConfigAxesElement;
    };
    interface HTMLArcgisChartsConfigAxisElement extends Components.ArcgisChartsConfigAxis, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigAxisElement: {
        prototype: HTMLArcgisChartsConfigAxisElement;
        new (): HTMLArcgisChartsConfigAxisElement;
    };
    interface HTMLArcgisChartsConfigBarChartElementEventMap {
        "arcgisChartsConfigNoSeriesUpdate": any;
    }
    interface HTMLArcgisChartsConfigBarChartElement extends Components.ArcgisChartsConfigBarChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBarChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartElement, ev: ArcgisChartsConfigBarChartCustomEvent<HTMLArcgisChartsConfigBarChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBarChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartElement, ev: ArcgisChartsConfigBarChartCustomEvent<HTMLArcgisChartsConfigBarChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBarChartElement: {
        prototype: HTMLArcgisChartsConfigBarChartElement;
        new (): HTMLArcgisChartsConfigBarChartElement;
    };
    interface HTMLArcgisChartsConfigBarChartDataElementEventMap {
        "arcgisChartsConfigBarChartDataNumericFieldValidate": any;
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload;
    }
    interface HTMLArcgisChartsConfigBarChartDataElement extends Components.ArcgisChartsConfigBarChartData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBarChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartDataElement, ev: ArcgisChartsConfigBarChartDataCustomEvent<HTMLArcgisChartsConfigBarChartDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBarChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartDataElement, ev: ArcgisChartsConfigBarChartDataCustomEvent<HTMLArcgisChartsConfigBarChartDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBarChartDataElement: {
        prototype: HTMLArcgisChartsConfigBarChartDataElement;
        new (): HTMLArcgisChartsConfigBarChartDataElement;
    };
    interface HTMLArcgisChartsConfigBarChartPopoverElementEventMap {
        "arcgisChartsConfigBarChartDataPopoverChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigBarChartPopoverElement extends Components.ArcgisChartsConfigBarChartPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBarChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartPopoverElement, ev: ArcgisChartsConfigBarChartPopoverCustomEvent<HTMLArcgisChartsConfigBarChartPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBarChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartPopoverElement, ev: ArcgisChartsConfigBarChartPopoverCustomEvent<HTMLArcgisChartsConfigBarChartPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBarChartPopoverElement: {
        prototype: HTMLArcgisChartsConfigBarChartPopoverElement;
        new (): HTMLArcgisChartsConfigBarChartPopoverElement;
    };
    interface HTMLArcgisChartsConfigBarChartSeriesElementEventMap {
        "arcgisChartsConfigBarChartSeriesPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigBarChartSeriesElement extends Components.ArcgisChartsConfigBarChartSeries, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBarChartSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartSeriesElement, ev: ArcgisChartsConfigBarChartSeriesCustomEvent<HTMLArcgisChartsConfigBarChartSeriesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBarChartSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartSeriesElement, ev: ArcgisChartsConfigBarChartSeriesCustomEvent<HTMLArcgisChartsConfigBarChartSeriesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBarChartSeriesElement: {
        prototype: HTMLArcgisChartsConfigBarChartSeriesElement;
        new (): HTMLArcgisChartsConfigBarChartSeriesElement;
    };
    interface HTMLArcgisChartsConfigBarChartSeriesPopoverElementEventMap {
        "arcgisChartsConfigSeriesPopoverNameChange": any;
        "arcgisChartsConfigSeriesPopoverColorChange": any;
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigBarChartSeriesPopoverElement extends Components.ArcgisChartsConfigBarChartSeriesPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBarChartSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartSeriesPopoverElement, ev: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<HTMLArcgisChartsConfigBarChartSeriesPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBarChartSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBarChartSeriesPopoverElement, ev: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<HTMLArcgisChartsConfigBarChartSeriesPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBarChartSeriesPopoverElement: {
        prototype: HTMLArcgisChartsConfigBarChartSeriesPopoverElement;
        new (): HTMLArcgisChartsConfigBarChartSeriesPopoverElement;
    };
    interface HTMLArcgisChartsConfigBoxPlotElement extends Components.ArcgisChartsConfigBoxPlot, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigBoxPlotElement: {
        prototype: HTMLArcgisChartsConfigBoxPlotElement;
        new (): HTMLArcgisChartsConfigBoxPlotElement;
    };
    interface HTMLArcgisChartsConfigBoxPlotDataElementEventMap {
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload1;
    }
    interface HTMLArcgisChartsConfigBoxPlotDataElement extends Components.ArcgisChartsConfigBoxPlotData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotDataElement, ev: ArcgisChartsConfigBoxPlotDataCustomEvent<HTMLArcgisChartsConfigBoxPlotDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotDataElement, ev: ArcgisChartsConfigBoxPlotDataCustomEvent<HTMLArcgisChartsConfigBoxPlotDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBoxPlotDataElement: {
        prototype: HTMLArcgisChartsConfigBoxPlotDataElement;
        new (): HTMLArcgisChartsConfigBoxPlotDataElement;
    };
    interface HTMLArcgisChartsConfigBoxPlotPopoverElementEventMap {
        "arcgisChartsConfigBoxPlotDataPopoverChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigBoxPlotPopoverElement extends Components.ArcgisChartsConfigBoxPlotPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotPopoverElement, ev: ArcgisChartsConfigBoxPlotPopoverCustomEvent<HTMLArcgisChartsConfigBoxPlotPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotPopoverElement, ev: ArcgisChartsConfigBoxPlotPopoverCustomEvent<HTMLArcgisChartsConfigBoxPlotPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBoxPlotPopoverElement: {
        prototype: HTMLArcgisChartsConfigBoxPlotPopoverElement;
        new (): HTMLArcgisChartsConfigBoxPlotPopoverElement;
    };
    interface HTMLArcgisChartsConfigBoxPlotSeriesElementEventMap {
        "arcgisChartsConfigBoxPlotSeriesPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigBoxPlotSeriesElement extends Components.ArcgisChartsConfigBoxPlotSeries, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotSeriesElement, ev: ArcgisChartsConfigBoxPlotSeriesCustomEvent<HTMLArcgisChartsConfigBoxPlotSeriesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotSeriesElement, ev: ArcgisChartsConfigBoxPlotSeriesCustomEvent<HTMLArcgisChartsConfigBoxPlotSeriesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBoxPlotSeriesElement: {
        prototype: HTMLArcgisChartsConfigBoxPlotSeriesElement;
        new (): HTMLArcgisChartsConfigBoxPlotSeriesElement;
    };
    interface HTMLArcgisChartsConfigBoxPlotSeriesPopoverElementEventMap {
        "arcgisChartsConfigSeriesPopoverNameChange": { name: string };
        "arcgisChartsConfigSeriesPopoverColorChange": { color: Color };
        "arcgisChartsConfigSeriesPopoverLineStyleChange": {
    style: SimpleLineSymbolStyle;
  };
        "arcgisChartsConfigSeriesPopoverLineWidthChange": { width: number };
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement extends Components.ArcgisChartsConfigBoxPlotSeriesPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement, ev: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<HTMLArcgisChartsConfigBoxPlotSeriesPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigBoxPlotSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement, ev: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<HTMLArcgisChartsConfigBoxPlotSeriesPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement: {
        prototype: HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement;
        new (): HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement;
    };
    interface HTMLArcgisChartsConfigCategoryFormatElementEventMap {
        "arcgisChartsConfigCategoryFormatChange": any;
    }
    interface HTMLArcgisChartsConfigCategoryFormatElement extends Components.ArcgisChartsConfigCategoryFormat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigCategoryFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigCategoryFormatElement, ev: ArcgisChartsConfigCategoryFormatCustomEvent<HTMLArcgisChartsConfigCategoryFormatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigCategoryFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigCategoryFormatElement, ev: ArcgisChartsConfigCategoryFormatCustomEvent<HTMLArcgisChartsConfigCategoryFormatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigCategoryFormatElement: {
        prototype: HTMLArcgisChartsConfigCategoryFormatElement;
        new (): HTMLArcgisChartsConfigCategoryFormatElement;
    };
    interface HTMLArcgisChartsConfigChartRenamePopoverElementEventMap {
        "arcgisChartsConfigChartRenamePopoverChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigChartRenamePopoverElement extends Components.ArcgisChartsConfigChartRenamePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigChartRenamePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigChartRenamePopoverElement, ev: ArcgisChartsConfigChartRenamePopoverCustomEvent<HTMLArcgisChartsConfigChartRenamePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigChartRenamePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigChartRenamePopoverElement, ev: ArcgisChartsConfigChartRenamePopoverCustomEvent<HTMLArcgisChartsConfigChartRenamePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigChartRenamePopoverElement: {
        prototype: HTMLArcgisChartsConfigChartRenamePopoverElement;
        new (): HTMLArcgisChartsConfigChartRenamePopoverElement;
    };
    interface HTMLArcgisChartsConfigColorStyleElementEventMap {
        "arcgisChartsConfigColorStyleChange": Color;
        "arcgisChartsConfigColorStyleClose": any;
    }
    interface HTMLArcgisChartsConfigColorStyleElement extends Components.ArcgisChartsConfigColorStyle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigColorStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigColorStyleElement, ev: ArcgisChartsConfigColorStyleCustomEvent<HTMLArcgisChartsConfigColorStyleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigColorStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigColorStyleElement, ev: ArcgisChartsConfigColorStyleCustomEvent<HTMLArcgisChartsConfigColorStyleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigColorStyleElement: {
        prototype: HTMLArcgisChartsConfigColorStyleElement;
        new (): HTMLArcgisChartsConfigColorStyleElement;
    };
    interface HTMLArcgisChartsConfigColorsElementEventMap {
        "colorSelect": Color;
    }
    interface HTMLArcgisChartsConfigColorsElement extends Components.ArcgisChartsConfigColors, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigColorsElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigColorsElement, ev: ArcgisChartsConfigColorsCustomEvent<HTMLArcgisChartsConfigColorsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigColorsElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigColorsElement, ev: ArcgisChartsConfigColorsCustomEvent<HTMLArcgisChartsConfigColorsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigColorsElement: {
        prototype: HTMLArcgisChartsConfigColorsElement;
        new (): HTMLArcgisChartsConfigColorsElement;
    };
    interface HTMLArcgisChartsConfigCreateFlowElementEventMap {
        "arcgisChartsConfigNewChart": any;
        "arcgisChartsConfigSelectedChartChange": any;
        "arcgisChartsConfigModelListChange": ModelListChangePayload;
        "arcgisChartsConfigChartViewChartClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
        "arcgisChartsConfigPanelNumberChange": PanelNumberChangePayload;
    }
    interface HTMLArcgisChartsConfigCreateFlowElement extends Components.ArcgisChartsConfigCreateFlow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigCreateFlowElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigCreateFlowElement, ev: ArcgisChartsConfigCreateFlowCustomEvent<HTMLArcgisChartsConfigCreateFlowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigCreateFlowElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigCreateFlowElement, ev: ArcgisChartsConfigCreateFlowCustomEvent<HTMLArcgisChartsConfigCreateFlowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigCreateFlowElement: {
        prototype: HTMLArcgisChartsConfigCreateFlowElement;
        new (): HTMLArcgisChartsConfigCreateFlowElement;
    };
    interface HTMLArcgisChartsConfigFieldSelectElement extends Components.ArcgisChartsConfigFieldSelect, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigFieldSelectElement: {
        prototype: HTMLArcgisChartsConfigFieldSelectElement;
        new (): HTMLArcgisChartsConfigFieldSelectElement;
    };
    interface HTMLArcgisChartsConfigFontStyleElementEventMap {
        "arcgisChartsConfigFontStyleChange": FontStyleChangePayload;
        "arcgisChartsConfigFontStyleClose": void;
    }
    interface HTMLArcgisChartsConfigFontStyleElement extends Components.ArcgisChartsConfigFontStyle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigFontStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFontStyleElement, ev: ArcgisChartsConfigFontStyleCustomEvent<HTMLArcgisChartsConfigFontStyleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigFontStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFontStyleElement, ev: ArcgisChartsConfigFontStyleCustomEvent<HTMLArcgisChartsConfigFontStyleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigFontStyleElement: {
        prototype: HTMLArcgisChartsConfigFontStyleElement;
        new (): HTMLArcgisChartsConfigFontStyleElement;
    };
    interface HTMLArcgisChartsConfigFormatElementEventMap {
        "arcgisChartsConfigFormatPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigFormatElement extends Components.ArcgisChartsConfigFormat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFormatElement, ev: ArcgisChartsConfigFormatCustomEvent<HTMLArcgisChartsConfigFormatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFormatElement, ev: ArcgisChartsConfigFormatCustomEvent<HTMLArcgisChartsConfigFormatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigFormatElement: {
        prototype: HTMLArcgisChartsConfigFormatElement;
        new (): HTMLArcgisChartsConfigFormatElement;
    };
    interface HTMLArcgisChartsConfigFormatPopoverElementEventMap {
        "arcgisChartsConfigFormatPopoverSymbolChange": any;
        "arcgisChartsConfigFormatPopoverTextChange": FontStyleChangePayload;
        "arcgisChartsConfigFormatPopoverColorChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigFormatPopoverElement extends Components.ArcgisChartsConfigFormatPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigFormatPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFormatPopoverElement, ev: ArcgisChartsConfigFormatPopoverCustomEvent<HTMLArcgisChartsConfigFormatPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigFormatPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigFormatPopoverElement, ev: ArcgisChartsConfigFormatPopoverCustomEvent<HTMLArcgisChartsConfigFormatPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigFormatPopoverElement: {
        prototype: HTMLArcgisChartsConfigFormatPopoverElement;
        new (): HTMLArcgisChartsConfigFormatPopoverElement;
    };
    interface HTMLArcgisChartsConfigGeneralElement extends Components.ArcgisChartsConfigGeneral, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigGeneralElement: {
        prototype: HTMLArcgisChartsConfigGeneralElement;
        new (): HTMLArcgisChartsConfigGeneralElement;
    };
    interface HTMLArcgisChartsConfigGuideElementEventMap {
        "arcgisChartsConfigGuideChange": GuideChangePayload;
        "arcgisChartsConfigGuidePopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigGuideElement extends Components.ArcgisChartsConfigGuide, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigGuideElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuideElement, ev: ArcgisChartsConfigGuideCustomEvent<HTMLArcgisChartsConfigGuideElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigGuideElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuideElement, ev: ArcgisChartsConfigGuideCustomEvent<HTMLArcgisChartsConfigGuideElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigGuideElement: {
        prototype: HTMLArcgisChartsConfigGuideElement;
        new (): HTMLArcgisChartsConfigGuideElement;
    };
    interface HTMLArcgisChartsConfigGuidePopoverElementEventMap {
        "arcgisChartsConfigGuidePopoverColorChange": any;
        "arcgisChartsConfigGuidePopoverSymbolChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigGuidePopoverElement extends Components.ArcgisChartsConfigGuidePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigGuidePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuidePopoverElement, ev: ArcgisChartsConfigGuidePopoverCustomEvent<HTMLArcgisChartsConfigGuidePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigGuidePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuidePopoverElement, ev: ArcgisChartsConfigGuidePopoverCustomEvent<HTMLArcgisChartsConfigGuidePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigGuidePopoverElement: {
        prototype: HTMLArcgisChartsConfigGuidePopoverElement;
        new (): HTMLArcgisChartsConfigGuidePopoverElement;
    };
    interface HTMLArcgisChartsConfigGuidesElementEventMap {
        "arcgisChartsConfigGuidePopoverChange": any;
    }
    interface HTMLArcgisChartsConfigGuidesElement extends Components.ArcgisChartsConfigGuides, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigGuidesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuidesElement, ev: ArcgisChartsConfigGuidesCustomEvent<HTMLArcgisChartsConfigGuidesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigGuidesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigGuidesElement, ev: ArcgisChartsConfigGuidesCustomEvent<HTMLArcgisChartsConfigGuidesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigGuidesElement: {
        prototype: HTMLArcgisChartsConfigGuidesElement;
        new (): HTMLArcgisChartsConfigGuidesElement;
    };
    interface HTMLArcgisChartsConfigHistogramElement extends Components.ArcgisChartsConfigHistogram, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigHistogramElement: {
        prototype: HTMLArcgisChartsConfigHistogramElement;
        new (): HTMLArcgisChartsConfigHistogramElement;
    };
    interface HTMLArcgisChartsConfigHistogramDataElementEventMap {
        "arcgisChartsConfigHistogramDataPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload1;
    }
    interface HTMLArcgisChartsConfigHistogramDataElement extends Components.ArcgisChartsConfigHistogramData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigHistogramDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigHistogramDataElement, ev: ArcgisChartsConfigHistogramDataCustomEvent<HTMLArcgisChartsConfigHistogramDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigHistogramDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigHistogramDataElement, ev: ArcgisChartsConfigHistogramDataCustomEvent<HTMLArcgisChartsConfigHistogramDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigHistogramDataElement: {
        prototype: HTMLArcgisChartsConfigHistogramDataElement;
        new (): HTMLArcgisChartsConfigHistogramDataElement;
    };
    interface HTMLArcgisChartsConfigHistogramPopoverElementEventMap {
        "arcgisChartsConfigHistogramPopoverSymbolChange": ISimpleFillSymbol | ISimpleLineSymbol;
        "arcgisChartsConfigHistogramPopoverChange": any;
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigHistogramPopoverElement extends Components.ArcgisChartsConfigHistogramPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigHistogramPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigHistogramPopoverElement, ev: ArcgisChartsConfigHistogramPopoverCustomEvent<HTMLArcgisChartsConfigHistogramPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigHistogramPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigHistogramPopoverElement, ev: ArcgisChartsConfigHistogramPopoverCustomEvent<HTMLArcgisChartsConfigHistogramPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigHistogramPopoverElement: {
        prototype: HTMLArcgisChartsConfigHistogramPopoverElement;
        new (): HTMLArcgisChartsConfigHistogramPopoverElement;
    };
    interface HTMLArcgisChartsConfigInvalidInputMessageElement extends Components.ArcgisChartsConfigInvalidInputMessage, HTMLStencilElement {
    }
    var HTMLArcgisChartsConfigInvalidInputMessageElement: {
        prototype: HTMLArcgisChartsConfigInvalidInputMessageElement;
        new (): HTMLArcgisChartsConfigInvalidInputMessageElement;
    };
    interface HTMLArcgisChartsConfigLineChartElementEventMap {
        "arcgisChartsConfigNoSeriesUpdate": any;
    }
    interface HTMLArcgisChartsConfigLineChartElement extends Components.ArcgisChartsConfigLineChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartElement, ev: ArcgisChartsConfigLineChartCustomEvent<HTMLArcgisChartsConfigLineChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartElement, ev: ArcgisChartsConfigLineChartCustomEvent<HTMLArcgisChartsConfigLineChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineChartElement: {
        prototype: HTMLArcgisChartsConfigLineChartElement;
        new (): HTMLArcgisChartsConfigLineChartElement;
    };
    interface HTMLArcgisChartsConfigLineChartDataElementEventMap {
        "arcgisChartsConfigLineChartDataNumericFieldValidate": any;
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload1;
        "arcgisChartsConfigCustomizedTimeInterval": any;
        "arcgisChartsConfigResetTimeInterval": any;
    }
    interface HTMLArcgisChartsConfigLineChartDataElement extends Components.ArcgisChartsConfigLineChartData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartDataElement, ev: ArcgisChartsConfigLineChartDataCustomEvent<HTMLArcgisChartsConfigLineChartDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartDataElement, ev: ArcgisChartsConfigLineChartDataCustomEvent<HTMLArcgisChartsConfigLineChartDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineChartDataElement: {
        prototype: HTMLArcgisChartsConfigLineChartDataElement;
        new (): HTMLArcgisChartsConfigLineChartDataElement;
    };
    interface HTMLArcgisChartsConfigLineChartPopoverElementEventMap {
        "arcgisChartsConfigLineChartDataPopoverChange": any;
        "arcgisChartsConfigLineChartPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigLineChartPopoverElement extends Components.ArcgisChartsConfigLineChartPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartPopoverElement, ev: ArcgisChartsConfigLineChartPopoverCustomEvent<HTMLArcgisChartsConfigLineChartPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartPopoverElement, ev: ArcgisChartsConfigLineChartPopoverCustomEvent<HTMLArcgisChartsConfigLineChartPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineChartPopoverElement: {
        prototype: HTMLArcgisChartsConfigLineChartPopoverElement;
        new (): HTMLArcgisChartsConfigLineChartPopoverElement;
    };
    interface HTMLArcgisChartsConfigLineChartSeriesElementEventMap {
        "arcgisChartsConfigLineChartSeriesPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigLineChartSeriesElement extends Components.ArcgisChartsConfigLineChartSeries, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineChartSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartSeriesElement, ev: ArcgisChartsConfigLineChartSeriesCustomEvent<HTMLArcgisChartsConfigLineChartSeriesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineChartSeriesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartSeriesElement, ev: ArcgisChartsConfigLineChartSeriesCustomEvent<HTMLArcgisChartsConfigLineChartSeriesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineChartSeriesElement: {
        prototype: HTMLArcgisChartsConfigLineChartSeriesElement;
        new (): HTMLArcgisChartsConfigLineChartSeriesElement;
    };
    interface HTMLArcgisChartsConfigLineChartSeriesPopoverElementEventMap {
        "arcgisChartsConfigSeriesPopoverNameChange": any;
        "arcgisChartsConfigSeriesPopoverColorChange": any;
        "arcgisChartsConfigSeriesPopoverLineStyleChange": any;
        "arcgisChartsConfigSeriesPopoverLineWidthChange": any;
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigLineChartSeriesPopoverElement extends Components.ArcgisChartsConfigLineChartSeriesPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineChartSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartSeriesPopoverElement, ev: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<HTMLArcgisChartsConfigLineChartSeriesPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineChartSeriesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineChartSeriesPopoverElement, ev: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<HTMLArcgisChartsConfigLineChartSeriesPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineChartSeriesPopoverElement: {
        prototype: HTMLArcgisChartsConfigLineChartSeriesPopoverElement;
        new (): HTMLArcgisChartsConfigLineChartSeriesPopoverElement;
    };
    interface HTMLArcgisChartsConfigLineStyleElementEventMap {
        "arcgisChartsConfigLineStyleChange": ISimpleLineSymbol;
        "arcgisChartsConfigLineStyleClose": void;
    }
    interface HTMLArcgisChartsConfigLineStyleElement extends Components.ArcgisChartsConfigLineStyle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigLineStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineStyleElement, ev: ArcgisChartsConfigLineStyleCustomEvent<HTMLArcgisChartsConfigLineStyleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigLineStyleElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigLineStyleElement, ev: ArcgisChartsConfigLineStyleCustomEvent<HTMLArcgisChartsConfigLineStyleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigLineStyleElement: {
        prototype: HTMLArcgisChartsConfigLineStyleElement;
        new (): HTMLArcgisChartsConfigLineStyleElement;
    };
    interface HTMLArcgisChartsConfigNumberFormatElementEventMap {
        "arcgisChartsConfigNumberFormatChange": Intl.NumberFormatOptions;
    }
    interface HTMLArcgisChartsConfigNumberFormatElement extends Components.ArcgisChartsConfigNumberFormat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigNumberFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigNumberFormatElement, ev: ArcgisChartsConfigNumberFormatCustomEvent<HTMLArcgisChartsConfigNumberFormatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigNumberFormatElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigNumberFormatElement, ev: ArcgisChartsConfigNumberFormatCustomEvent<HTMLArcgisChartsConfigNumberFormatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigNumberFormatElement: {
        prototype: HTMLArcgisChartsConfigNumberFormatElement;
        new (): HTMLArcgisChartsConfigNumberFormatElement;
    };
    interface HTMLArcgisChartsConfigPieChartElementEventMap {
        "arcgisChartsConfigNoSeriesUpdate": any;
        "arcgisChartsConfigWebChartChange": any;
    }
    interface HTMLArcgisChartsConfigPieChartElement extends Components.ArcgisChartsConfigPieChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigPieChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartElement, ev: ArcgisChartsConfigPieChartCustomEvent<HTMLArcgisChartsConfigPieChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigPieChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartElement, ev: ArcgisChartsConfigPieChartCustomEvent<HTMLArcgisChartsConfigPieChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigPieChartElement: {
        prototype: HTMLArcgisChartsConfigPieChartElement;
        new (): HTMLArcgisChartsConfigPieChartElement;
    };
    interface HTMLArcgisChartsConfigPieChartDataElementEventMap {
        "arcgisChartsConfigPieChartDataNumericFieldValidate": any;
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload1;
    }
    interface HTMLArcgisChartsConfigPieChartDataElement extends Components.ArcgisChartsConfigPieChartData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigPieChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartDataElement, ev: ArcgisChartsConfigPieChartDataCustomEvent<HTMLArcgisChartsConfigPieChartDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigPieChartDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartDataElement, ev: ArcgisChartsConfigPieChartDataCustomEvent<HTMLArcgisChartsConfigPieChartDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigPieChartDataElement: {
        prototype: HTMLArcgisChartsConfigPieChartDataElement;
        new (): HTMLArcgisChartsConfigPieChartDataElement;
    };
    interface HTMLArcgisChartsConfigPieChartPopoverElementEventMap {
        "arcgisChartsConfigPieChartDataPopoverChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigPieChartPopoverElement extends Components.ArcgisChartsConfigPieChartPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigPieChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartPopoverElement, ev: ArcgisChartsConfigPieChartPopoverCustomEvent<HTMLArcgisChartsConfigPieChartPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigPieChartPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartPopoverElement, ev: ArcgisChartsConfigPieChartPopoverCustomEvent<HTMLArcgisChartsConfigPieChartPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigPieChartPopoverElement: {
        prototype: HTMLArcgisChartsConfigPieChartPopoverElement;
        new (): HTMLArcgisChartsConfigPieChartPopoverElement;
    };
    interface HTMLArcgisChartsConfigPieChartSlicesElementEventMap {
        "arcgisChartsConfigPieChartSlicesPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigPieChartSlicesElement extends Components.ArcgisChartsConfigPieChartSlices, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigPieChartSlicesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartSlicesElement, ev: ArcgisChartsConfigPieChartSlicesCustomEvent<HTMLArcgisChartsConfigPieChartSlicesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigPieChartSlicesElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartSlicesElement, ev: ArcgisChartsConfigPieChartSlicesCustomEvent<HTMLArcgisChartsConfigPieChartSlicesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigPieChartSlicesElement: {
        prototype: HTMLArcgisChartsConfigPieChartSlicesElement;
        new (): HTMLArcgisChartsConfigPieChartSlicesElement;
    };
    interface HTMLArcgisChartsConfigPieChartSlicesPopoverElementEventMap {
        "arcgisChartsConfigSlicesPopoverNameChange": any;
        "arcgisChartsConfigSlicesPopoverColorChange": any;
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigPieChartSlicesPopoverElement extends Components.ArcgisChartsConfigPieChartSlicesPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigPieChartSlicesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartSlicesPopoverElement, ev: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<HTMLArcgisChartsConfigPieChartSlicesPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigPieChartSlicesPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigPieChartSlicesPopoverElement, ev: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<HTMLArcgisChartsConfigPieChartSlicesPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigPieChartSlicesPopoverElement: {
        prototype: HTMLArcgisChartsConfigPieChartSlicesPopoverElement;
        new (): HTMLArcgisChartsConfigPieChartSlicesPopoverElement;
    };
    interface HTMLArcgisChartsConfigScatterPlotElementEventMap {
        "arcgisChartsConfigWebChartChange": any;
    }
    interface HTMLArcgisChartsConfigScatterPlotElement extends Components.ArcgisChartsConfigScatterPlot, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotElement, ev: ArcgisChartsConfigScatterPlotCustomEvent<HTMLArcgisChartsConfigScatterPlotElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotElement, ev: ArcgisChartsConfigScatterPlotCustomEvent<HTMLArcgisChartsConfigScatterPlotElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigScatterPlotElement: {
        prototype: HTMLArcgisChartsConfigScatterPlotElement;
        new (): HTMLArcgisChartsConfigScatterPlotElement;
    };
    interface HTMLArcgisChartsConfigScatterPlotDataElementEventMap {
        "arcgisChartsConfigScatterPlotPopoverChange": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
        "arcgisChartsConfigDataChangeError": DataChangeErrorPayload1;
    }
    interface HTMLArcgisChartsConfigScatterPlotDataElement extends Components.ArcgisChartsConfigScatterPlotData, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotDataElement, ev: ArcgisChartsConfigScatterPlotDataCustomEvent<HTMLArcgisChartsConfigScatterPlotDataElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotDataElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotDataElement, ev: ArcgisChartsConfigScatterPlotDataCustomEvent<HTMLArcgisChartsConfigScatterPlotDataElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigScatterPlotDataElement: {
        prototype: HTMLArcgisChartsConfigScatterPlotDataElement;
        new (): HTMLArcgisChartsConfigScatterPlotDataElement;
    };
    interface HTMLArcgisChartsConfigScatterPlotPopoverElementEventMap {
        "arcgisChartsConfigScatterPlotLineStyleChange": any;
        "arcgisChartsConfigScatterPlotFillColorChange": any;
        "arcgisChartsConfigScatterPlotXYFieldChange": any;
        "arcgisChartsConfigScatterPlotSizeVariableFieldChange": any;
        "arcgisChartsConfigPopoverClose": any;
        "arcgisChartsConfigPopoverOpenChange": PopoverOpenChangePayload;
    }
    interface HTMLArcgisChartsConfigScatterPlotPopoverElement extends Components.ArcgisChartsConfigScatterPlotPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotPopoverElement, ev: ArcgisChartsConfigScatterPlotPopoverCustomEvent<HTMLArcgisChartsConfigScatterPlotPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigScatterPlotPopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigScatterPlotPopoverElement, ev: ArcgisChartsConfigScatterPlotPopoverCustomEvent<HTMLArcgisChartsConfigScatterPlotPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigScatterPlotPopoverElement: {
        prototype: HTMLArcgisChartsConfigScatterPlotPopoverElement;
        new (): HTMLArcgisChartsConfigScatterPlotPopoverElement;
    };
    interface HTMLArcgisChartsConfigSelectChartTypePopoverElementEventMap {
        "arcgisChartsConfigSelectChartTypeChange": any;
        "arcgisChartsConfigPopoverClose": any;
    }
    interface HTMLArcgisChartsConfigSelectChartTypePopoverElement extends Components.ArcgisChartsConfigSelectChartTypePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigSelectChartTypePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigSelectChartTypePopoverElement, ev: ArcgisChartsConfigSelectChartTypePopoverCustomEvent<HTMLArcgisChartsConfigSelectChartTypePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigSelectChartTypePopoverElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigSelectChartTypePopoverElement, ev: ArcgisChartsConfigSelectChartTypePopoverCustomEvent<HTMLArcgisChartsConfigSelectChartTypePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigSelectChartTypePopoverElement: {
        prototype: HTMLArcgisChartsConfigSelectChartTypePopoverElement;
        new (): HTMLArcgisChartsConfigSelectChartTypePopoverElement;
    };
    interface HTMLArcgisChartsConfigViewChartsElementEventMap {
        "arcgisChartsConfigViewChartSelect": any;
        "arcgisChartsConfigViewChartDelete": any;
        "arcgisChartsConfigViewChartEdit": any;
        "arcgisChartsConfigViewChartAddChart": { referenceElement: HTMLCalciteFabElement, layerId: string | undefined };
    }
    interface HTMLArcgisChartsConfigViewChartsElement extends Components.ArcgisChartsConfigViewCharts, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsConfigViewChartsElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigViewChartsElement, ev: ArcgisChartsConfigViewChartsCustomEvent<HTMLArcgisChartsConfigViewChartsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsConfigViewChartsElementEventMap>(type: K, listener: (this: HTMLArcgisChartsConfigViewChartsElement, ev: ArcgisChartsConfigViewChartsCustomEvent<HTMLArcgisChartsConfigViewChartsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsConfigViewChartsElement: {
        prototype: HTMLArcgisChartsConfigViewChartsElement;
        new (): HTMLArcgisChartsConfigViewChartsElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-chart": HTMLArcgisChartElement;
        "arcgis-charts-action-bar": HTMLArcgisChartsActionBarElement;
        "arcgis-charts-config-axes": HTMLArcgisChartsConfigAxesElement;
        "arcgis-charts-config-axis": HTMLArcgisChartsConfigAxisElement;
        "arcgis-charts-config-bar-chart": HTMLArcgisChartsConfigBarChartElement;
        "arcgis-charts-config-bar-chart-data": HTMLArcgisChartsConfigBarChartDataElement;
        "arcgis-charts-config-bar-chart-popover": HTMLArcgisChartsConfigBarChartPopoverElement;
        "arcgis-charts-config-bar-chart-series": HTMLArcgisChartsConfigBarChartSeriesElement;
        "arcgis-charts-config-bar-chart-series-popover": HTMLArcgisChartsConfigBarChartSeriesPopoverElement;
        "arcgis-charts-config-box-plot": HTMLArcgisChartsConfigBoxPlotElement;
        "arcgis-charts-config-box-plot-data": HTMLArcgisChartsConfigBoxPlotDataElement;
        "arcgis-charts-config-box-plot-popover": HTMLArcgisChartsConfigBoxPlotPopoverElement;
        "arcgis-charts-config-box-plot-series": HTMLArcgisChartsConfigBoxPlotSeriesElement;
        "arcgis-charts-config-box-plot-series-popover": HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement;
        "arcgis-charts-config-category-format": HTMLArcgisChartsConfigCategoryFormatElement;
        "arcgis-charts-config-chart-rename-popover": HTMLArcgisChartsConfigChartRenamePopoverElement;
        "arcgis-charts-config-color-style": HTMLArcgisChartsConfigColorStyleElement;
        "arcgis-charts-config-colors": HTMLArcgisChartsConfigColorsElement;
        "arcgis-charts-config-create-flow": HTMLArcgisChartsConfigCreateFlowElement;
        "arcgis-charts-config-field-select": HTMLArcgisChartsConfigFieldSelectElement;
        "arcgis-charts-config-font-style": HTMLArcgisChartsConfigFontStyleElement;
        "arcgis-charts-config-format": HTMLArcgisChartsConfigFormatElement;
        "arcgis-charts-config-format-popover": HTMLArcgisChartsConfigFormatPopoverElement;
        "arcgis-charts-config-general": HTMLArcgisChartsConfigGeneralElement;
        "arcgis-charts-config-guide": HTMLArcgisChartsConfigGuideElement;
        "arcgis-charts-config-guide-popover": HTMLArcgisChartsConfigGuidePopoverElement;
        "arcgis-charts-config-guides": HTMLArcgisChartsConfigGuidesElement;
        "arcgis-charts-config-histogram": HTMLArcgisChartsConfigHistogramElement;
        "arcgis-charts-config-histogram-data": HTMLArcgisChartsConfigHistogramDataElement;
        "arcgis-charts-config-histogram-popover": HTMLArcgisChartsConfigHistogramPopoverElement;
        "arcgis-charts-config-invalid-input-message": HTMLArcgisChartsConfigInvalidInputMessageElement;
        "arcgis-charts-config-line-chart": HTMLArcgisChartsConfigLineChartElement;
        "arcgis-charts-config-line-chart-data": HTMLArcgisChartsConfigLineChartDataElement;
        "arcgis-charts-config-line-chart-popover": HTMLArcgisChartsConfigLineChartPopoverElement;
        "arcgis-charts-config-line-chart-series": HTMLArcgisChartsConfigLineChartSeriesElement;
        "arcgis-charts-config-line-chart-series-popover": HTMLArcgisChartsConfigLineChartSeriesPopoverElement;
        "arcgis-charts-config-line-style": HTMLArcgisChartsConfigLineStyleElement;
        "arcgis-charts-config-number-format": HTMLArcgisChartsConfigNumberFormatElement;
        "arcgis-charts-config-pie-chart": HTMLArcgisChartsConfigPieChartElement;
        "arcgis-charts-config-pie-chart-data": HTMLArcgisChartsConfigPieChartDataElement;
        "arcgis-charts-config-pie-chart-popover": HTMLArcgisChartsConfigPieChartPopoverElement;
        "arcgis-charts-config-pie-chart-slices": HTMLArcgisChartsConfigPieChartSlicesElement;
        "arcgis-charts-config-pie-chart-slices-popover": HTMLArcgisChartsConfigPieChartSlicesPopoverElement;
        "arcgis-charts-config-scatter-plot": HTMLArcgisChartsConfigScatterPlotElement;
        "arcgis-charts-config-scatter-plot-data": HTMLArcgisChartsConfigScatterPlotDataElement;
        "arcgis-charts-config-scatter-plot-popover": HTMLArcgisChartsConfigScatterPlotPopoverElement;
        "arcgis-charts-config-select-chart-type-popover": HTMLArcgisChartsConfigSelectChartTypePopoverElement;
        "arcgis-charts-config-view-charts": HTMLArcgisChartsConfigViewChartsElement;
    }
}
declare namespace LocalJSX {
    interface ArcgisChart {
        /**
          * Not applicable to gauge. Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * Auto-disposes the chart when a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @remarks Not applicable to gauge.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config from information extracted from the data for instance.
          * @remarks Applicable to gauge and pie chart only.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * Whether to use the stable version of the component or the beta's.
          * @type {WebChartComponentVersion}
          * @category Public
          * @default "stable"
         */
        "componentVersion"?: WebChartComponentVersion;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode
          * @remarks Not applicable to gauge. Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to gauge.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ChartOptions["dataLabelFormatter"];
        /**
          * Disables all interactions on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * Disables the toggling of series via the legend items.
          * @remarks Only applicable to multi-series charts.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * Whether to use features uniquely designed for a chart currently being configured by a user via the UI.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "enableConfiguration"?: boolean;
        /**
          * Enables the responsive features.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * The index of the feature to be rendered. Only used when the gauge is a feature-based gauge.
          * @remarks Applicable to gauge only.
          * @type {number | undefined}
          * @category Public
          * @default undefined
         */
        "featureIndex"?: number;
        /**
          * When `true`, all chart elements are filtered based on view extent.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterByExtent"?: boolean;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the gauge inner label. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Applicable to gauge only.
          * @type {GaugeInnerLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "gaugeInnerLabelFormatter"?: GaugeInnerLabelFormatCallback;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the empty series are completely hidden from the chart and the legend. For example a series can be empty after applying a data filter, filter by attribute or geometry (as when using the filter by extent).
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * Hides the license watermark.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenseWatermark"?: boolean;
        /**
          * Hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @remarks Applicable to line chart only.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the layer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Allows the chart to update automatically when the layer's fields change. Applies when the field list (`fields`) in the feature layer is updated.
          * @type {LayerFieldsChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFieldsChangePolicy"?: LayerFieldsChangePolicy;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * Allows the chart to update automatically when the layer's renderer changes. Applies when the color match feature is enabled.
          * @remarks Even though that property is set to Ignore the chart will use the layer's renderer information when the data is updated.
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @remarks Not applicable to gauge.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * A callback function used to format the legend value labels. If the returned string contains HTML tags they will be interpreted as such. If provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.
          * @remarks Applicable to pie chart only.
          * @type {PieChartLegendValueLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "legendValueLabelFormatter"?: PieChartLegendValueLabelFormatCallback;
        /**
          * When `true`, the legend is visible on the chart.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Instance of an ArcGIS Chart Model. Provides an API to interact with the chart's configuration.  **Note:** This property has a union type of `ChartModel | WebMapWebChart` meaning a raw chart config object can be passed to it instead, however it is recommended to use a `ChartModel` instance whenever possible.
          * @type {ChartModel | WebMapWebChart | undefined}
          * @default undefined
         */
        "model"?: ChartModel | WebMapWebChart | undefined;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<AxesMinMaxChangePayload>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartCustomEvent<AxesMinMaxChangePayload>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered when the chart config is changed
          * @type {EventEmitter<WebMapWebChart>}
          * @event
         */
        "onArcgisConfigChange"?: (event: ArcgisChartCustomEvent<{ newConfig: WebMapWebChart | undefined; oldConfig: WebMapWebChart | undefined; functionCalled: string | undefined }>) => void;
        /**
          * Event triggered once the chart data has been fetched but not yet fully processed. For instance it can be useful for a pie chart to see all the slices before they get grouped into an 'other' slice during the post-processing step.
          * @type {EventEmitter<WebChartDataTypes>}
          * @event
         */
        "onArcgisDataFetchComplete"?: (event: ArcgisChartCustomEvent<WebChartDataTypes>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<DataProcessCompletePayload>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartCustomEvent<DataProcessCompletePayload>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibilityChangePayload>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartCustomEvent<LegendItemVisibilityChangePayload>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
          * @event
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is applied to the chart
          * @type {EventEmitter<SelectionCompletePayload>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartCustomEvent<SelectionCompletePayload>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesColorChangePayload>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartCustomEvent<SeriesColorChangePayload>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * Builds the charts one by one rather than all at the same time.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the chart's dataItems associated with empty (no value) categories (from only a `Count` aggregation) will be pouplated with 0s, via the `completeDataForEmptyCategoriesWithZeros` method.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "replaceNoValueCategoryWithZero"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @remarks Not applicable to gauge.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * Applicable to bar chart, line chart, combo bar-line and box plot. When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * Applies runtime data filters to the chart's.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * A callback function used to format the secondary y-axis labels. If the returned string contains HTML tags they will be interpreted as such. The property will be effective only if 3 axes are defined (dual axis chart).
          * @remarks Not applicable to pie chart nor gauge.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "secondaryYAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @remarks Not applicable to gauge.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @remarks Not applicable to gauge.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @remarks Only applicable to charts using the temporal binning feature (bar and line chart).
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Whether to synchronize the selection between chart components from the same layer.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "syncSelection"?: boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to gauge.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ChartOptions["tooltipFormatter"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to `true` the missing series will be added to cover the split-by values not referenced by the config. The default information from the property `updateSplitBySeries.seriesTemplate` will be applied to the new series.
          * @remarks Only applicable to bar chart, line chart and box plot, when they use a split-by field.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * Enables the animations on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * Allows the use of the fields alias from the layer.popupTemplate when rendering the field names on the chart (e.g. tooltips, axes, legend).
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access the LayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the ArcGIS charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @remarks Not applicable to pie chart nor gauge.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsActionBar {
        /**
          * Action bar selection mode. Defines which selection mode the slotted action bar should use.
          * @category Public
          * @type {Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey">}
          * @default "multiSelectionWithCtrlKey"
         */
        "actionBarSelectionMode"?: Extract<
    ActionModes,
    "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"
  >;
        /**
          * Chart element reference with which the action bar is associated.
          * @category Public
          * @type {HTMLArcgisChartElement}
          * @default undefined
         */
        "chartElement"?: HTMLArcgisChartElement;
        /**
          * Chart type used to determine which default actions to display.
          * @category Public
          * @type {SupportedCharts | undefined}
          * @default undefined
         */
        "chartType"?: ChartTypes | undefined;
        /**
          * When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "clearSelectionState"?: ActionState;
        /**
          * Custom title for the clear selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "clearSelectionTitle"?: string | undefined;
        /**
          * When active, the clear selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "clearSelectionToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the edit chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "disabled"
         */
        "editChartState"?: ActionState;
        /**
          * Custom title for the edit chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "editChartTitle"?: string | undefined;
        /**
          * When active, the edit chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "editChartToggle"?: ActionToggle;
        /**
          * When `true`, the action bar is expanded.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "expanded"?: boolean;
        /**
          * When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterByExtentState"?: ActionState;
        /**
          * Custom title for the filter by extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterByExtentTitle"?: string | undefined;
        /**
          * When active, the filter by extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "filterByExtentToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterBySelectionState"?: ActionState;
        /**
          * Custom title for the filter by selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterBySelectionTitle"?: string | undefined;
        /**
          * When active, the filter by selection action is highlighted.
          * @category Public type {ActionToggle}
          * @default "inactive"
         */
        "filterBySelectionToggle"?: ActionToggle;
        /**
          * When `true`, overrides the individual settings for each action to instead force disable them all.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "forceDisableActions"?: boolean;
        /**
          * When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "fullExtentState"?: ActionState;
        /**
          * Custom title for the full extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "fullExtentTitle"?: string | undefined;
        /**
          * When active, the full extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "fullExtentToggle"?: ActionToggle;
        /**
          * Holds a list of actions to hide from the action bar.  **Note:** The edit chart action is hidden by default. To show it, remove its value from this array.
          * @category Public
          * @type {DefaultChartActions[]}
          * @default ["editChart"]
         */
        "hiddenActions"?: DefaultChartActions[];
        /**
          * When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "legendState"?: ActionState;
        /**
          * Custom title for the legend action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "legendTitle"?: string | undefined;
        /**
          * When active, the legend action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "legendToggle"?: ActionToggle;
        /**
          * Event triggered once action bar expand is toggled
          * @type {EventEmitter<boolean>}
          * @event
         */
        "onArcgisActionBarToggle"?: (event: ArcgisChartsActionBarCustomEvent<boolean>) => void;
        /**
          * Event triggered once a default action is selected
          * @type {EventEmitter<DefaultActionSelectPayload>}
          * @event
         */
        "onArcgisDefaultActionSelect"?: (event: ArcgisChartsActionBarCustomEvent<DefaultActionSelectPayload>) => void;
        /**
          * When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "rotateChartState"?: ActionState;
        /**
          * Custom title for the rotate chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "rotateChartTitle"?: string | undefined;
        /**
          * When active, the rotate chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "rotateChartToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "selectionState"?: ActionState;
        /**
          * Custom title for the selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "selectionTitle"?: string | undefined;
        /**
          * When active, the selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "selectionToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "switchSelectionState"?: ActionState;
        /**
          * Custom title for the switch selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "switchSelectionTitle"?: string | undefined;
        /**
          * When active, the switch selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "switchSelectionToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "zoomState"?: ActionState;
        /**
          * Custom title for the zoom action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "zoomTitle"?: string | undefined;
        /**
          * When active, the zoom action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "zoomToggle"?: ActionToggle;
    }
    interface ArcgisChartsConfigAxes {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ModelWithXYAxes;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
        /**
          * Whether to show the switch option to enable X-axis logarithmic scale.
          * @category Public
         */
        "showEnableXLogOption"?: boolean;
        /**
          * Whether to show the switch option to enable Y-axis logarithmic scale.
          * @category Public
         */
        "showEnableYLogOption"?: boolean;
        /**
          * Whether to show the input option to set X-axis maximum bound.
          * @category Public
         */
        "showMaxXBoundOption"?: boolean;
        /**
          * Whether to show the input option to set Y-axis maximum bound.
          * @category Public
         */
        "showMaxYBoundOption"?: boolean;
        /**
          * Whether to show the input option to set X-axis minimum bound.
          * @category Public
         */
        "showMinXBoundOption"?: boolean;
        /**
          * Whether to show the input option to set Y-axis minimum bound.
          * @category Public
         */
        "showMinYBoundOption"?: boolean;
    }
    interface ArcgisChartsConfigAxis {
        /**
          * Title of the axis.
          * @category Public
         */
        "axisTitle"?: string;
        /**
          * Data max value for the field used by the axis.
          * @category Public
         */
        "dataMaxValue"?: number;
        /**
          * Data min value for the field used by the axis. Used to know when to enable the logarithmic switch.
          * @category Public
         */
        "dataMinValue"?: number;
        /**
          * Initial value for the max bound.
          * @category Public
         */
        "initialMaxBound"?: number;
        /**
          * Initial value for the min bound.
          * @category Public
         */
        "initialMinBound"?: number;
        /**
          * Whether this axis component is for the X-axis or the Y-axis.
          * @category Public
         */
        "isXAxis"?: boolean;
        /**
          * Maximum limit for maxBounds input
          * @category Public
         */
        "maxBoundMaxLimit"?: number;
        /**
          * Minimum limit for maxBounds input
          * @category Public
         */
        "maxBoundMinLimit"?: number;
        /**
          * Maximum limit for minBounds input
          * @category Public
         */
        "minBoundMaxLimit"?: number;
        /**
          * Minimum limit for minBounds input
          * @category Public
         */
        "minBoundMinLimit"?: number;
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ModelWithXYAxes;
        /**
          * Show enable logarithmic option for the axis.
          * @category Public
         */
        "showEnableLogOption"?: boolean;
        /**
          * Show maximum bounds option for the axis.
          * @category Public
         */
        "showMaxBoundOption"?: boolean;
        /**
          * Show minimum bounds option for the axis.
          * @category Public
         */
        "showMinBoundOption"?: boolean;
    }
    interface ArcgisChartsConfigBarChart {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model"?: BarChartModel;
        /**
          * Event indicating no series update should take place.
          * @event
         */
        "onArcgisChartsConfigNoSeriesUpdate"?: (event: ArcgisChartsConfigBarChartCustomEvent<any>) => void;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigBarChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model"?: BarChartModel;
        /**
          * A changed event to be emitted when required numeric field(s) is not met.
          * @event
         */
        "onArcgisChartsConfigBarChartDataNumericFieldValidate"?: (event: ArcgisChartsConfigBarChartDataCustomEvent<any>) => void;
        /**
          * Event emitted when an error is caught on data change.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigBarChartDataCustomEvent<DataChangeErrorPayload>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
    }
    interface ArcgisChartsConfigBarChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind"?: BarChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Flag to disable custom sort option.
          * @category Public
          * @default false
         */
        "isCustomSortDisabled"?: boolean;
        /**
          * Flag to disable aggregation type of `No Aggregation`. `No Aggregation` is disabled for the bar chart created with only numeric fields.
          * @category Public
          * @default false
         */
        "isNoAggregationDisabled"?: boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when there is a change in aggregation type.
          * @event
         */
        "onArcgisChartsConfigBarChartDataPopoverChange"?: (event: ArcgisChartsConfigBarChartPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @event
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigBarChartPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent"?: string[] | string | undefined;
    }
    interface ArcgisChartsConfigBarChartSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch"?: boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen"?: boolean;
        /**
          * Bar Chart Model.
          * @category Public
         */
        "model"?: BarChartModel;
        /**
          * Event when there is change in series popover.
          * @category Public
         */
        "onArcgisChartsConfigBarChartSeriesPopoverChange"?: (event: ArcgisChartsConfigBarChartSeriesCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigBarChartSeriesCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Place the popover in this placement.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigBarChartSeriesPopover {
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event when there is a change in series color.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverColorChange"?: (event: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event when there is a change in series name.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverNameChange"?: (event: ArcgisChartsConfigBarChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigBoxPlot {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * featureLayer on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Box Plot Model.
          * @category Public
         */
        "model"?: BoxPlotModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigBoxPlotData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Box Plot Model.
          * @category Public
         */
        "model"?: BoxPlotModel;
        /**
          * Event emitted when an error is caught on data change.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigBoxPlotDataCustomEvent<DataChangeErrorPayload1>) => void;
    }
    interface ArcgisChartsConfigBoxPlotPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind"?: BoxPlotDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Flag to disable custom sort option.
          * @category Public
          * @default false
         */
        "isCustomSortDisabled"?: boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when there is a change in data type.
          * @event
         */
        "onArcgisChartsConfigBoxPlotDataPopoverChange"?: (event: ArcgisChartsConfigBoxPlotPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @event
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigBoxPlotPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent"?: string[] | string | undefined;
    }
    interface ArcgisChartsConfigBoxPlotSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch"?: boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen"?: boolean;
        /**
          * Box Chart Model.
          * @category Public
         */
        "model"?: BoxPlotModel;
        /**
          * Event when there is change in series popover.
          * @category Public
         */
        "onArcgisChartsConfigBoxPlotSeriesPopoverChange"?: (event: ArcgisChartsConfigBoxPlotSeriesCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigBoxPlotSeriesCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Place the popover in this placement.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigBoxPlotSeriesPopover {
        /**
          * Whether the symbol is a line symbol or not.
          * @category Public
         */
        "isLineSymbol"?: boolean;
        /**
          * Whether the label can be configured or not.
          * @category Public
         */
        "labelCanBeConfigured"?: boolean;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event when there is a change in series color.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverColorChange"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<{ color: Color }>) => void;
        /**
          * Event when there is a change in series line style.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverLineStyleChange"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<{
    style: SimpleLineSymbolStyle;
  }>) => void;
        /**
          * Event when there is a change in series line width.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverLineWidthChange"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<{ width: number }>) => void;
        /**
          * Event when there is a change in series name.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverNameChange"?: (event: ArcgisChartsConfigBoxPlotSeriesPopoverCustomEvent<{ name: string }>) => void;
        /**
          * open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * Selected line style to show in popover.  **Only applicable when mean lines are shown.**
          * @category Public
         */
        "selectedLineStyle"?: SimpleLineSymbolStyle;
        /**
          * Selected line width to show in popover.  **Only applicable when mean lines are shown.**
          * @category Public
         */
        "selectedLineWidth"?: number;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigCategoryFormat {
        /**
          * categoryFormat is the format of the Category Axis.
          * @category Public
         */
        "categoryFormat"?: CategoryFormatOptions;
        /**
          * Axis change event emitted when a prop value changes.
          * @event
         */
        "onArcgisChartsConfigCategoryFormatChange"?: (event: ArcgisChartsConfigCategoryFormatCustomEvent<any>) => void;
    }
    interface ArcgisChartsConfigChartRenamePopover {
        /**
          * Chart name to be edited.
          * @category Public
         */
        "name"?: string;
        /**
          * Event emitted when the chart name is renamed.
          * @event
         */
        "onArcgisChartsConfigChartRenamePopoverChange"?: (event: ArcgisChartsConfigChartRenamePopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the chart rename is closed.
          * @event
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigChartRenamePopoverCustomEvent<any>) => void;
        /**
          * Chart rename popover to be open.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to render popover.
          * @category Public
         */
        "popoverReferenceElement"?: HTMLElement;
    }
    interface ArcgisChartsConfigColorStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose"?: boolean;
        /**
          * header for the line style
          * @category Public
         */
        "header"?: string;
        /**
          * Event when there is a change in color style.
          * @event
         */
        "onArcgisChartsConfigColorStyleChange"?: (event: ArcgisChartsConfigColorStyleCustomEvent<Color>) => void;
        /**
          * Event when color style is closed.
          * @event
         */
        "onArcgisChartsConfigColorStyleClose"?: (event: ArcgisChartsConfigColorStyleCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Color to show in the color style component.
          * @category Public
         */
        "selectedColor"?: Color;
    }
    interface ArcgisChartsConfigColors {
        /**
          * Header for color block.
          * @category Public
         */
        "heading"?: string;
        /**
          * color selected event emitted with the color hex value.
          * @category Public
         */
        "onColorSelect"?: (event: ArcgisChartsConfigColorsCustomEvent<Color>) => void;
        /**
          * rgba (Esri type) used when the color picker is opened.
          * @category Public
         */
        "rgba"?: Color;
    }
    interface ArcgisChartsConfigCreateFlow {
        /**
          * Layer ID for the "active" layer. Only charts from this layer will be displayed.  (Optional) If not provided, all charts from all layers will be displayed.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "activeLayerId"?: string;
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Processed chart data Used only by histogram
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem | WebChartHistogramDataItem;
        /**
          * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
          * @type {boolean}
          * @category Public
          * @default false
         */
        "disableEditing"?: boolean;
        /**
          * Whether the filter by selection is currently enabled.
          * @category Public
         */
        "filterBySelection"?: boolean;
        /**
          * header title string to be shown for the component.
          * @category Public
         */
        "headerTitle"?: string;
        /**
          * List of layers containing the charts to be displayed.
          * @type {(Sublayer | SupportedLayer)[]}
          * @category Public
          * @default []
         */
        "layerList"?: (Sublayer | SupportedLayer)[];
        /**
          * List of chart models.
          * @type {ChartModel[]}
          * @category Public
          * @default []
         */
        "modelList"?: ChartModel[];
        /**
          * Whether the model is currently loading. Used to mark that we are waiting for a new model to finish being created before we try to use it for anything.
          * @category Public
         */
        "modelLoading"?: boolean;
        /**
          * Arcgis config close event emitted on close of the view chart close.
          * @event
         */
        "onArcgisChartsConfigChartViewChartClose"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<any>) => void;
        /**
          * Arcgis config change event emitted when the model list changes.
          * @event
         */
        "onArcgisChartsConfigModelListChange"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<ModelListChangePayload>) => void;
        /**
          * Arcgis config change event emitted when a new chart should be created.
          * @event
         */
        "onArcgisChartsConfigNewChart"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<any>) => void;
        /**
          * Event emitted when the panel number changed.
          * @category Public
         */
        "onArcgisChartsConfigPanelNumberChange"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<PanelNumberChangePayload>) => void;
        /**
          * Event emitted when the popover open changed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Arcgis config change event emitted when the selected config changes.
          * @event
         */
        "onArcgisChartsConfigSelectedChartChange"?: (event: ArcgisChartsConfigCreateFlowCustomEvent<any>) => void;
        /**
          * Open the view chart panel.
          * @category Public
         */
        "open"?: boolean;
        /**
          * panel number to keep track of the flow movement.
          * @category Public
         */
        "panelNumber"?: number;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * R2 value from trendline Used only by scatter plot
          * @category Public
         */
        "r2"?: number;
        /**
          * Chart ID for the selected chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "selectedChartId"?: string;
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * When `true`, modifications to a chart will be synced back to its associated layer from the `layerList`. **Note: This means the layer object will be mutated automatically.**
          * @type {boolean}
          * @category Public
          * @default false
         */
        "syncChartsToLayers"?: boolean;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigFieldSelect {
        /**
          * disables the component
          * @category Public
         */
        "disabled"?: boolean;
        /**
          * input is invalid
          * @category Public
         */
        "invalid"?: boolean;
        /**
          * The display value for the selection
          * @category Public
         */
        "label"?: string;
    }
    interface ArcgisChartsConfigFontStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose"?: boolean;
        /**
          * style for the font and text properties.
          * @category Public
         */
        "fontStyle"?: WebChartTextSymbol;
        /**
          * header for the font style
          * @category Public
         */
        "header"?: string;
        /**
          * Event when there is a change in font style.
          * @category Public
         */
        "onArcgisChartsConfigFontStyleChange"?: (event: ArcgisChartsConfigFontStyleCustomEvent<FontStyleChangePayload>) => void;
        /**
          * Event when there is a change in font style.
          * @event
         */
        "onArcgisChartsConfigFontStyleClose"?: (event: ArcgisChartsConfigFontStyleCustomEvent<void>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
    }
    interface ArcgisChartsConfigFormat {
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ChartModel;
        /**
          * Event when there is change in format popover.
          * @category Public
         */
        "onArcgisChartsConfigFormatPopoverChange"?: (event: ArcgisChartsConfigFormatCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigFormatCustomEvent<PopoverOpenChangePayload>) => void;
    }
    interface ArcgisChartsConfigFormatPopover {
        /**
          * Event emitted when there is a change in text property.
          * @category Public
         */
        "onArcgisChartsConfigFormatPopoverColorChange"?: (event: ArcgisChartsConfigFormatPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in symbol property.
          * @category Public
         */
        "onArcgisChartsConfigFormatPopoverSymbolChange"?: (event: ArcgisChartsConfigFormatPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in text property.
          * @category Public
         */
        "onArcgisChartsConfigFormatPopoverTextChange"?: (event: ArcgisChartsConfigFormatPopoverCustomEvent<FontStyleChangePayload>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigFormatPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Selected text properties to show for font style.
          * @category Public
         */
        "selectedElement"?: Color | ISimpleLineSymbol | WebChartTextSymbol;
    }
    interface ArcgisChartsConfigGeneral {
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ChartModel;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
    }
    interface ArcgisChartsConfigGuide {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Index to identify the guide.
          * @category Public
         */
        "index"?: number;
        /**
          * List position of the latest guide to be opened.
          * @category Private
         */
        "latestGuidePosition"?: number;
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ModelWithGuides;
        /**
          * Guide change event emitted with the new guide.
          * @category Public
         */
        "onArcgisChartsConfigGuideChange"?: (event: ArcgisChartsConfigGuideCustomEvent<GuideChangePayload>) => void;
        /**
          * Event when there is change in guide popover.
          * @category Public
         */
        "onArcgisChartsConfigGuidePopoverChange"?: (event: ArcgisChartsConfigGuideCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigGuideCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Orientation of the guide.
          * @category Public
         */
        "orientation"?: GuideOrientation;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
    }
    interface ArcgisChartsConfigGuidePopover {
        /**
          * Event emitted when there is a change in color property.
          * @category Public
         */
        "onArcgisChartsConfigGuidePopoverColorChange"?: (event: ArcgisChartsConfigGuidePopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in symbol property.
          * @category Public
         */
        "onArcgisChartsConfigGuidePopoverSymbolChange"?: (event: ArcgisChartsConfigGuidePopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigGuidePopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Selected properties to show for style.
          * @category Public
         */
        "selectedElement"?: Color | ISimpleLineSymbol;
    }
    interface ArcgisChartsConfigGuides {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Enable X-Axis guide
          * @category Public
         */
        "enableXAxisGuide"?: boolean;
        /**
          * Enable Y-Axis Guide
          * @category Public
         */
        "enableYAxisGuide"?: boolean;
        /**
          * Chart Model.
          * @category Public
         */
        "model"?: ModelWithGuides;
        /**
          * Event when there is change in guide popover.
          * @category Public
         */
        "onArcgisChartsConfigGuidePopoverChange"?: (event: ArcgisChartsConfigGuidesCustomEvent<any>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
    }
    interface ArcgisChartsConfigHistogram {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartHistogramDataItem;
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Histogram Model.
          * @category Public
         */
        "model"?: HistogramModel;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigHistogramData {
        /**
          * countValue represents the number for non-null values used to calculate the histogram.
          * @category Public
         */
        "countValue"?: number;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * maxValue represents the maximum value statistic of the histogram.
          * @category Public
         */
        "maxValue"?: number;
        /**
          * meanValue represents the mean statistic of the histogram.
          * @category Public
         */
        "meanValue"?: number;
        /**
          * medianValue represents the median statistic of the histogram.
          * @category Public
         */
        "medianValue"?: number;
        /**
          * minValue represents the minimum value statistic of the histogram.
          * @category Public
         */
        "minValue"?: number;
        /**
          * Histogram Model.
          * @category Public
         */
        "model"?: HistogramModel;
        /**
          * nullsValue represents the number for null values statistic of the histogram.
          * @category Public
         */
        "nullsValue"?: number;
        /**
          * Event emitted upon catching an error in an async function.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigHistogramDataCustomEvent<DataChangeErrorPayload1>) => void;
        /**
          * Event when there is change in histogram data popover.
          * @category Public
         */
        "onArcgisChartsConfigHistogramDataPopoverChange"?: (event: ArcgisChartsConfigHistogramDataCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigHistogramDataCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
        /**
          * standardDevValue represents the standard deviation statistic of the histogram.
          * @category Public
         */
        "standardDevValue"?: number;
        /**
          * sumValue represents the sum value statistic of the histogram.
          * @category Public
         */
        "sumValue"?: number;
    }
    interface ArcgisChartsConfigHistogramPopover {
        /**
          * content type to determine popover to use
          * @category Public
         */
        "contentKind"?: HistogramDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when there is a change in symbol property.
          * @event
         */
        "onArcgisChartsConfigHistogramPopoverChange"?: (event: ArcgisChartsConfigHistogramPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in symbol property.
          * @event
         */
        "onArcgisChartsConfigHistogramPopoverSymbolChange"?: (event: ArcgisChartsConfigHistogramPopoverCustomEvent<ISimpleFillSymbol | ISimpleLineSymbol>) => void;
        /**
          * Event emitted when the popover is closed.
          * @event
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigHistogramPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigHistogramPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Place the popover in the given placement.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Selected statistic overlay symbol.
          * @category Public
         */
        "selectedBinColor"?: ISimpleFillSymbol;
        /**
          * Selected field.
          * @category Public
         */
        "selectedNumericField"?: string;
        /**
          * Selected statistic overlay symbol.
          * @category Public
         */
        "selectedOverlaySymbol"?: ISimpleLineSymbol;
        /**
          * Selected transformation type.
          * @category Public
         */
        "selectedTransformationType"?: WebChartDataTransformations;
    }
    interface ArcgisChartsConfigInvalidInputMessage {
        /**
          * invalid input message
          * @category Public
         */
        "invalidInputMessage"?: string;
        /**
          * determines whether input is valid or invalid
          * @category Public
         */
        "isInvalid"?: boolean;
    }
    interface ArcgisChartsConfigLineChart {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Line Chart Model.
          * @category Public
         */
        "model"?: LineChartModel;
        /**
          * Event indicating no series update should take place.
          * @event
         */
        "onArcgisChartsConfigNoSeriesUpdate"?: (event: ArcgisChartsConfigLineChartCustomEvent<any>) => void;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: SeriesSymbolsMap;
        /**
          * Custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigLineChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Line Chart Model.
          * @category Public
         */
        "model"?: LineChartModel;
        /**
          * Event emitted when time interval is customized.
          * @event
         */
        "onArcgisChartsConfigCustomizedTimeInterval"?: (event: ArcgisChartsConfigLineChartDataCustomEvent<any>) => void;
        /**
          * Event emitted when an error is caught on data change.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigLineChartDataCustomEvent<DataChangeErrorPayload1>) => void;
        /**
          * A changed event to be emitted when required numeric field(s) is not met.
          * @event
         */
        "onArcgisChartsConfigLineChartDataNumericFieldValidate"?: (event: ArcgisChartsConfigLineChartDataCustomEvent<any>) => void;
        /**
          * Event emitted when time interval is reset to default.
          * @event
         */
        "onArcgisChartsConfigResetTimeInterval"?: (event: ArcgisChartsConfigLineChartDataCustomEvent<any>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
        /**
          * call back when the time interval is reset.
          * @category Public
         */
        "resetTimeInterval"?: () => void;
    }
    interface ArcgisChartsConfigLineChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind"?: LineChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when there is a change in aggregation type.
          * @event
         */
        "onArcgisChartsConfigLineChartDataPopoverChange"?: (event: ArcgisChartsConfigLineChartPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @event
         */
        "onArcgisChartsConfigLineChartPopoverClose"?: (event: ArcgisChartsConfigLineChartPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent"?: IntervalPopoverProps | string[] | string | undefined;
    }
    interface ArcgisChartsConfigLineChartSeries {
        /**
          * Whether the chart is actively using color match at the moment.
          * @category Private
         */
        "activeColorMatch"?: boolean;
        /**
          * To open the config of the selected series.
          * @category Public
         */
        "configSeriesOpen"?: boolean;
        /**
          * Line Chart Model.
          * @category Public
         */
        "model"?: LineChartModel;
        /**
          * Event when there is change in series popover.
          * @category Public
         */
        "onArcgisChartsConfigLineChartSeriesPopoverChange"?: (event: ArcgisChartsConfigLineChartSeriesCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigLineChartSeriesCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * place the popover in this placement.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigLineChartSeriesPopover {
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event when there is a change in series color.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverColorChange"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event when there is a change in series line style.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverLineStyleChange"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event when there is a change in series line width.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverLineWidthChange"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * Event when there is a change in series name.
          * @category Public
         */
        "onArcgisChartsConfigSeriesPopoverNameChange"?: (event: ArcgisChartsConfigLineChartSeriesPopoverCustomEvent<any>) => void;
        /**
          * open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected line style to show in popover
          * @category Public
         */
        "selectedLineStyle"?: RESTSimpleLineSymbolStyle;
        /**
          * selected line width to show in popover
          * @category Public
         */
        "selectedLineWidth"?: number;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigLineStyle {
        /**
          * boolean to enable the close the panel.
          * @category Public
         */
        "enableClose"?: boolean;
        /**
          * header for the line style
          * @category Public
         */
        "header"?: string;
        /**
          * style for the line symbol.
          * @category Public
         */
        "lineStyle"?: ISimpleLineSymbol;
        /**
          * Event when there is a change in line style.
          * @event
         */
        "onArcgisChartsConfigLineStyleChange"?: (event: ArcgisChartsConfigLineStyleCustomEvent<ISimpleLineSymbol>) => void;
        /**
          * Event when line style is closed.
          * @event
         */
        "onArcgisChartsConfigLineStyleClose"?: (event: ArcgisChartsConfigLineStyleCustomEvent<void>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * boolean to enable wrapping the content in a panel.
          * @category Public
         */
        "usePanel"?: boolean;
    }
    interface ArcgisChartsConfigNumberFormat {
        /**
          * numberFormat property is of type [Intl Numberformat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).
          * @category Public
         */
        "numberFormat"?: Intl.NumberFormatOptions;
        /**
          * Axis change event emitted when a prop value changes.
          * @event
         */
        "onArcgisChartsConfigNumberFormatChange"?: (event: ArcgisChartsConfigNumberFormatCustomEvent<Intl.NumberFormatOptions>) => void;
    }
    interface ArcgisChartsConfigPieChart {
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem;
        /**
          * Whether the filter by selection is currently enabled.
          * @category Public
         */
        "filterBySelection"?: boolean;
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model"?: PieChartModel;
        /**
          * Event indicating no series update should take place.
          * @event
         */
        "onArcgisChartsConfigNoSeriesUpdate"?: (event: ArcgisChartsConfigPieChartCustomEvent<any>) => void;
        /**
          * ArcGIS config change event emitted when there is change in the config.
          * @event
         */
        "onArcgisChartsConfigWebChartChange"?: (event: ArcgisChartsConfigPieChartCustomEvent<any>) => void;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * list of series color
          * @category Public
         */
        "seriesColor"?: Map<number, PieSlicesSymbols>;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigPieChartData {
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model"?: PieChartModel;
        /**
          * Event emitted when an error is caught on data change.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigPieChartDataCustomEvent<DataChangeErrorPayload1>) => void;
        /**
          * A changed event to be emitted when required numeric field(s) is not met.
          * @event
         */
        "onArcgisChartsConfigPieChartDataNumericFieldValidate"?: (event: ArcgisChartsConfigPieChartDataCustomEvent<any>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
    }
    interface ArcgisChartsConfigPieChartPopover {
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "contentKind"?: PieChartDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when there is a change in aggregation type.
          * @event
         */
        "onArcgisChartsConfigPieChartDataPopoverChange"?: (event: ArcgisChartsConfigPieChartPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @event
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigPieChartPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Currently selected content (field names, for example) to pass on to the popover.
          * @category Public
         */
        "selectedContent"?: string[] | string | undefined;
    }
    interface ArcgisChartsConfigPieChartSlices {
        /**
          * The data used by the chart
          * @category Public
         */
        "chartData"?: WebChartGenericDataItem;
        /**
          * To open the config of the selected slice.
          * @category Public
         */
        "configSliceOpen"?: boolean;
        /**
          * Pie Chart Model.
          * @category Public
         */
        "model"?: PieChartModel;
        /**
          * Event when there is change in slices popover.
          * @category Public
         */
        "onArcgisChartsConfigPieChartSlicesPopoverChange"?: (event: ArcgisChartsConfigPieChartSlicesCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigPieChartSlicesCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * place the popover in this placement.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
    }
    interface ArcgisChartsConfigPieChartSlicesPopover {
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event when there is a change in slice color.
          * @category Public
         */
        "onArcgisChartsConfigSlicesPopoverColorChange"?: (event: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<any>) => void;
        /**
          * Event when there is a change in slice name.
          * @category Public
         */
        "onArcgisChartsConfigSlicesPopoverNameChange"?: (event: ArcgisChartsConfigPieChartSlicesPopoverCustomEvent<any>) => void;
        /**
          * open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * property to which the popover needs to be attached.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * selected color to show in popover
          * @category Public
         */
        "selectedColor"?: Color;
        /**
          * selected name to show in popover
          * @category Public
         */
        "selectedName"?: string;
    }
    interface ArcgisChartsConfigScatterPlot {
        /**
          * Data min and max values for x and y fields
          * @category Public
         */
        "calculatedDataMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * Min/Max bounds computed by the chart
          * @category Public
         */
        "calculatedMinMaxBounds"?: CalculatedMinMaxBoundsPayload[];
        /**
          * layer instance on which the charts are created or edited.
          * @category Public
         */
        "layer"?: FeatureLayer;
        /**
          * Scatter Plot Model.
          * @category Public
         */
        "model"?: ScatterPlotModel;
        /**
          * Arcgis config change event emitted when there is change in the config.
          * @event
         */
        "onArcgisChartsConfigWebChartChange"?: (event: ArcgisChartsConfigScatterPlotCustomEvent<any>) => void;
        /**
          * Specific page to be opened
          * @category Public
         */
        "page"?: ChartAuthoringPages;
        /**
          * Popover placement use it from the viewer to place the popover.
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * r2 value for the scatter plot chart.
          * @category Public
         */
        "r2"?: number;
        /**
          * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
          * @category Public
         */
        "usePopupTemplateFieldsInfo"?: boolean;
    }
    interface ArcgisChartsConfigScatterPlotData {
        /**
          * Whether the Feature Layer is a table
          * @category Public
         */
        "isTableLayer"?: boolean;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Scatter Plot Model.
          * @category Public
         */
        "model"?: ScatterPlotModel;
        /**
          * Event emitted upon catching an error in an async function.
          * @event
         */
        "onArcgisChartsConfigDataChangeError"?: (event: ArcgisChartsConfigScatterPlotDataCustomEvent<DataChangeErrorPayload1>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigScatterPlotDataCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event when there is change in scatter plot data popover.
          * @category Public
         */
        "onArcgisChartsConfigScatterPlotPopoverChange"?: (event: ArcgisChartsConfigScatterPlotDataCustomEvent<any>) => void;
        /**
          * When true, the content of the component will be displayed.
         */
        "open"?: boolean;
        /**
          * r2 value for the scatter plot chart.
          * @category Public
         */
        "r2"?: number;
    }
    interface ArcgisChartsConfigScatterPlotPopover {
        /**
          * Content kind for the popover.
          * @category Public
         */
        "contentKind"?: ScatterPlotDataPopoverKinds;
        /**
          * Heading for the popover component
          * @category Public
         */
        "headingTitle"?: string;
        /**
          * Fields Information of the Feature layer
          * @category Public
         */
        "layerFieldsInfo"?: IField[];
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the popover is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverOpenChange"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<PopoverOpenChangePayload>) => void;
        /**
          * Event emitted when there is a change in text property.
          * @category Public
         */
        "onArcgisChartsConfigScatterPlotFillColorChange"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in symbol property.
          * @category Public
         */
        "onArcgisChartsConfigScatterPlotLineStyleChange"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in size variable field type.
          * @event
         */
        "onArcgisChartsConfigScatterPlotSizeVariableFieldChange"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<any>) => void;
        /**
          * Event emitted when there is a change in X-axis or Y-axis field type.
          * @event
         */
        "onArcgisChartsConfigScatterPlotXYFieldChange"?: (event: ArcgisChartsConfigScatterPlotPopoverCustomEvent<any>) => void;
        /**
          * boolean to open or close the popover.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Place the popover in the give placement.
          * @category Public
         */
        "placement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to show the popover.
          * @category Public
         */
        "referenceElement"?: HTMLElement;
        /**
          * Selected text properties to show for font style.
          * @category Public
         */
        "selectedContent"?: Color | ISimpleLineSymbol | string;
    }
    interface ArcgisChartsConfigSelectChartTypePopover {
        /**
          * header title string to be shown for the component.
          * @category Public
         */
        "headerTitle"?: string;
        /**
          * Id of the layer associated with the chart to be added.
          * @category Public
         */
        "layerId"?: string | undefined;
        /**
          * Event emitted when the chart type is closed.
          * @category Public
         */
        "onArcgisChartsConfigPopoverClose"?: (event: ArcgisChartsConfigSelectChartTypePopoverCustomEvent<any>) => void;
        /**
          * Event emitted when the chart type is selected.
          * @category Public
         */
        "onArcgisChartsConfigSelectChartTypeChange"?: (event: ArcgisChartsConfigSelectChartTypePopoverCustomEvent<any>) => void;
        /**
          * Open the closed panel.
          * @category Public
         */
        "open"?: boolean;
        /**
          * Reference element to position the popover off of
          * @category Public
         */
        "popoverPlacement"?: HTMLCalcitePopoverElement["placement"];
        /**
          * Reference element to position the popover off of
          * @category Public
         */
        "popoverReferenceElement"?: HTMLCalciteFabElement;
        /**
          * The chart type selected
          * @category Public
         */
        "selectedChartType"?: Extract<WebChartTypes, "barSeries" | "boxPlotSeries" | "histogramSeries" | "lineSeries" | "pieSeries" | "scatterSeries">;
    }
    interface ArcgisChartsConfigViewCharts {
        /**
          * Disable the three-dot menu for editing, renaming, and deleting charts. Useful if the list is only intended for viewing.
          * @category Public
         */
        "disableEditing"?: boolean;
        /**
          * The layer object associated with the charts.
          * @category Public
         */
        "layer"?: Sublayer | SupportedLayer | undefined;
        /**
          * Array of chart models passed to this component to view the different charts
          * @category Public
         */
        "modelList"?: ChartModel[];
        /**
          * Prevents the list from being placed in a group. Mainly to avoid showing the layer title header.
          * @category Public
         */
        "noGroup"?: boolean;
        /**
          * Event emitted when the add chart button is clicked.
          * @event
         */
        "onArcgisChartsConfigViewChartAddChart"?: (event: ArcgisChartsConfigViewChartsCustomEvent<{ referenceElement: HTMLCalciteFabElement, layerId: string | undefined }>) => void;
        /**
          * Event emitted when the chart is deleted.
          * @event
         */
        "onArcgisChartsConfigViewChartDelete"?: (event: ArcgisChartsConfigViewChartsCustomEvent<any>) => void;
        /**
          * Event emitted when the chart to be edited.
          * @event
         */
        "onArcgisChartsConfigViewChartEdit"?: (event: ArcgisChartsConfigViewChartsCustomEvent<any>) => void;
        /**
          * Event emitted when the chart to view changes.
          * @event
         */
        "onArcgisChartsConfigViewChartSelect"?: (event: ArcgisChartsConfigViewChartsCustomEvent<any>) => void;
        /**
          * The selectedChartId uniquely identifies the current selected chart in a layer or array of charts.
          * @category Public
         */
        "selectedChartId"?: string;
    }
    interface IntrinsicElements {
        "arcgis-chart": ArcgisChart;
        "arcgis-charts-action-bar": ArcgisChartsActionBar;
        "arcgis-charts-config-axes": ArcgisChartsConfigAxes;
        "arcgis-charts-config-axis": ArcgisChartsConfigAxis;
        "arcgis-charts-config-bar-chart": ArcgisChartsConfigBarChart;
        "arcgis-charts-config-bar-chart-data": ArcgisChartsConfigBarChartData;
        "arcgis-charts-config-bar-chart-popover": ArcgisChartsConfigBarChartPopover;
        "arcgis-charts-config-bar-chart-series": ArcgisChartsConfigBarChartSeries;
        "arcgis-charts-config-bar-chart-series-popover": ArcgisChartsConfigBarChartSeriesPopover;
        "arcgis-charts-config-box-plot": ArcgisChartsConfigBoxPlot;
        "arcgis-charts-config-box-plot-data": ArcgisChartsConfigBoxPlotData;
        "arcgis-charts-config-box-plot-popover": ArcgisChartsConfigBoxPlotPopover;
        "arcgis-charts-config-box-plot-series": ArcgisChartsConfigBoxPlotSeries;
        "arcgis-charts-config-box-plot-series-popover": ArcgisChartsConfigBoxPlotSeriesPopover;
        "arcgis-charts-config-category-format": ArcgisChartsConfigCategoryFormat;
        "arcgis-charts-config-chart-rename-popover": ArcgisChartsConfigChartRenamePopover;
        "arcgis-charts-config-color-style": ArcgisChartsConfigColorStyle;
        "arcgis-charts-config-colors": ArcgisChartsConfigColors;
        "arcgis-charts-config-create-flow": ArcgisChartsConfigCreateFlow;
        "arcgis-charts-config-field-select": ArcgisChartsConfigFieldSelect;
        "arcgis-charts-config-font-style": ArcgisChartsConfigFontStyle;
        "arcgis-charts-config-format": ArcgisChartsConfigFormat;
        "arcgis-charts-config-format-popover": ArcgisChartsConfigFormatPopover;
        "arcgis-charts-config-general": ArcgisChartsConfigGeneral;
        "arcgis-charts-config-guide": ArcgisChartsConfigGuide;
        "arcgis-charts-config-guide-popover": ArcgisChartsConfigGuidePopover;
        "arcgis-charts-config-guides": ArcgisChartsConfigGuides;
        "arcgis-charts-config-histogram": ArcgisChartsConfigHistogram;
        "arcgis-charts-config-histogram-data": ArcgisChartsConfigHistogramData;
        "arcgis-charts-config-histogram-popover": ArcgisChartsConfigHistogramPopover;
        "arcgis-charts-config-invalid-input-message": ArcgisChartsConfigInvalidInputMessage;
        "arcgis-charts-config-line-chart": ArcgisChartsConfigLineChart;
        "arcgis-charts-config-line-chart-data": ArcgisChartsConfigLineChartData;
        "arcgis-charts-config-line-chart-popover": ArcgisChartsConfigLineChartPopover;
        "arcgis-charts-config-line-chart-series": ArcgisChartsConfigLineChartSeries;
        "arcgis-charts-config-line-chart-series-popover": ArcgisChartsConfigLineChartSeriesPopover;
        "arcgis-charts-config-line-style": ArcgisChartsConfigLineStyle;
        "arcgis-charts-config-number-format": ArcgisChartsConfigNumberFormat;
        "arcgis-charts-config-pie-chart": ArcgisChartsConfigPieChart;
        "arcgis-charts-config-pie-chart-data": ArcgisChartsConfigPieChartData;
        "arcgis-charts-config-pie-chart-popover": ArcgisChartsConfigPieChartPopover;
        "arcgis-charts-config-pie-chart-slices": ArcgisChartsConfigPieChartSlices;
        "arcgis-charts-config-pie-chart-slices-popover": ArcgisChartsConfigPieChartSlicesPopover;
        "arcgis-charts-config-scatter-plot": ArcgisChartsConfigScatterPlot;
        "arcgis-charts-config-scatter-plot-data": ArcgisChartsConfigScatterPlotData;
        "arcgis-charts-config-scatter-plot-popover": ArcgisChartsConfigScatterPlotPopover;
        "arcgis-charts-config-select-chart-type-popover": ArcgisChartsConfigSelectChartTypePopover;
        "arcgis-charts-config-view-charts": ArcgisChartsConfigViewCharts;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arcgis-chart": LocalJSX.ArcgisChart & JSXBase.HTMLAttributes<HTMLArcgisChartElement>;
            "arcgis-charts-action-bar": LocalJSX.ArcgisChartsActionBar & JSXBase.HTMLAttributes<HTMLArcgisChartsActionBarElement>;
            "arcgis-charts-config-axes": LocalJSX.ArcgisChartsConfigAxes & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigAxesElement>;
            "arcgis-charts-config-axis": LocalJSX.ArcgisChartsConfigAxis & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigAxisElement>;
            "arcgis-charts-config-bar-chart": LocalJSX.ArcgisChartsConfigBarChart & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBarChartElement>;
            "arcgis-charts-config-bar-chart-data": LocalJSX.ArcgisChartsConfigBarChartData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBarChartDataElement>;
            "arcgis-charts-config-bar-chart-popover": LocalJSX.ArcgisChartsConfigBarChartPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBarChartPopoverElement>;
            "arcgis-charts-config-bar-chart-series": LocalJSX.ArcgisChartsConfigBarChartSeries & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBarChartSeriesElement>;
            "arcgis-charts-config-bar-chart-series-popover": LocalJSX.ArcgisChartsConfigBarChartSeriesPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBarChartSeriesPopoverElement>;
            "arcgis-charts-config-box-plot": LocalJSX.ArcgisChartsConfigBoxPlot & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBoxPlotElement>;
            "arcgis-charts-config-box-plot-data": LocalJSX.ArcgisChartsConfigBoxPlotData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBoxPlotDataElement>;
            "arcgis-charts-config-box-plot-popover": LocalJSX.ArcgisChartsConfigBoxPlotPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBoxPlotPopoverElement>;
            "arcgis-charts-config-box-plot-series": LocalJSX.ArcgisChartsConfigBoxPlotSeries & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBoxPlotSeriesElement>;
            "arcgis-charts-config-box-plot-series-popover": LocalJSX.ArcgisChartsConfigBoxPlotSeriesPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement>;
            "arcgis-charts-config-category-format": LocalJSX.ArcgisChartsConfigCategoryFormat & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigCategoryFormatElement>;
            "arcgis-charts-config-chart-rename-popover": LocalJSX.ArcgisChartsConfigChartRenamePopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigChartRenamePopoverElement>;
            "arcgis-charts-config-color-style": LocalJSX.ArcgisChartsConfigColorStyle & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigColorStyleElement>;
            "arcgis-charts-config-colors": LocalJSX.ArcgisChartsConfigColors & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigColorsElement>;
            "arcgis-charts-config-create-flow": LocalJSX.ArcgisChartsConfigCreateFlow & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigCreateFlowElement>;
            "arcgis-charts-config-field-select": LocalJSX.ArcgisChartsConfigFieldSelect & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigFieldSelectElement>;
            "arcgis-charts-config-font-style": LocalJSX.ArcgisChartsConfigFontStyle & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigFontStyleElement>;
            "arcgis-charts-config-format": LocalJSX.ArcgisChartsConfigFormat & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigFormatElement>;
            "arcgis-charts-config-format-popover": LocalJSX.ArcgisChartsConfigFormatPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigFormatPopoverElement>;
            "arcgis-charts-config-general": LocalJSX.ArcgisChartsConfigGeneral & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigGeneralElement>;
            "arcgis-charts-config-guide": LocalJSX.ArcgisChartsConfigGuide & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigGuideElement>;
            "arcgis-charts-config-guide-popover": LocalJSX.ArcgisChartsConfigGuidePopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigGuidePopoverElement>;
            "arcgis-charts-config-guides": LocalJSX.ArcgisChartsConfigGuides & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigGuidesElement>;
            "arcgis-charts-config-histogram": LocalJSX.ArcgisChartsConfigHistogram & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigHistogramElement>;
            "arcgis-charts-config-histogram-data": LocalJSX.ArcgisChartsConfigHistogramData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigHistogramDataElement>;
            "arcgis-charts-config-histogram-popover": LocalJSX.ArcgisChartsConfigHistogramPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigHistogramPopoverElement>;
            "arcgis-charts-config-invalid-input-message": LocalJSX.ArcgisChartsConfigInvalidInputMessage & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigInvalidInputMessageElement>;
            "arcgis-charts-config-line-chart": LocalJSX.ArcgisChartsConfigLineChart & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineChartElement>;
            "arcgis-charts-config-line-chart-data": LocalJSX.ArcgisChartsConfigLineChartData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineChartDataElement>;
            "arcgis-charts-config-line-chart-popover": LocalJSX.ArcgisChartsConfigLineChartPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineChartPopoverElement>;
            "arcgis-charts-config-line-chart-series": LocalJSX.ArcgisChartsConfigLineChartSeries & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineChartSeriesElement>;
            "arcgis-charts-config-line-chart-series-popover": LocalJSX.ArcgisChartsConfigLineChartSeriesPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineChartSeriesPopoverElement>;
            "arcgis-charts-config-line-style": LocalJSX.ArcgisChartsConfigLineStyle & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigLineStyleElement>;
            "arcgis-charts-config-number-format": LocalJSX.ArcgisChartsConfigNumberFormat & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigNumberFormatElement>;
            "arcgis-charts-config-pie-chart": LocalJSX.ArcgisChartsConfigPieChart & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigPieChartElement>;
            "arcgis-charts-config-pie-chart-data": LocalJSX.ArcgisChartsConfigPieChartData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigPieChartDataElement>;
            "arcgis-charts-config-pie-chart-popover": LocalJSX.ArcgisChartsConfigPieChartPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigPieChartPopoverElement>;
            "arcgis-charts-config-pie-chart-slices": LocalJSX.ArcgisChartsConfigPieChartSlices & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigPieChartSlicesElement>;
            "arcgis-charts-config-pie-chart-slices-popover": LocalJSX.ArcgisChartsConfigPieChartSlicesPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigPieChartSlicesPopoverElement>;
            "arcgis-charts-config-scatter-plot": LocalJSX.ArcgisChartsConfigScatterPlot & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigScatterPlotElement>;
            "arcgis-charts-config-scatter-plot-data": LocalJSX.ArcgisChartsConfigScatterPlotData & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigScatterPlotDataElement>;
            "arcgis-charts-config-scatter-plot-popover": LocalJSX.ArcgisChartsConfigScatterPlotPopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigScatterPlotPopoverElement>;
            "arcgis-charts-config-select-chart-type-popover": LocalJSX.ArcgisChartsConfigSelectChartTypePopover & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigSelectChartTypePopoverElement>;
            "arcgis-charts-config-view-charts": LocalJSX.ArcgisChartsConfigViewCharts & JSXBase.HTMLAttributes<HTMLArcgisChartsConfigViewChartsElement>;
        }
    }
}
