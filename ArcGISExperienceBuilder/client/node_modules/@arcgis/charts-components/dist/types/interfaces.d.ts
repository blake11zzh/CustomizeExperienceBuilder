import type { Color, WebChartTimeIntervalUnits } from "@arcgis/charts-spec";
import type { EventEmitter } from "./stencil-public-runtime";
export declare const Slot: {
    readonly actionBar: "action-bar";
    readonly customActionTop: "custom-action-top";
    readonly customActionBelow: "custom-action-below";
    readonly expandTooltip: "expand-tooltip";
};
export interface ColorListItemProps {
    textLabel?: string;
    textDescription?: number;
    color?: Color;
    key: string;
    value: string;
    selected?: boolean;
    ref?: (e: HTMLCalciteListItemElement) => void;
    colorAction: () => void;
}
export interface IntervalPopoverProps {
    timeIntervalSize: number;
    timeIntervalUnits: WebChartTimeIntervalUnits;
}
export declare const HistogramOverlays: {
    readonly Mean: "mean";
    readonly Median: "median";
    readonly StandardDev: "standardDev";
    readonly NormalDist: "normalDist";
};
export type HistogramOverlays = (typeof HistogramOverlays)[keyof typeof HistogramOverlays];
export declare const HistogramStatistics: {
    readonly Mean: "mean";
    readonly Median: "median";
    readonly StandardDev: "standardDev";
    readonly Count: "count";
    readonly CountExcludingNulls: "countExcludingNulls";
    readonly Min: "min";
    readonly Max: "max";
    readonly Sum: "sum";
    readonly Nulls: "nulls";
};
export type HistogramStatistics = (typeof HistogramStatistics)[keyof typeof HistogramStatistics];
export declare const ChartAuthoringPages: {
    readonly Data: "data";
    readonly Series: "series";
    readonly Slices: "slices";
    readonly Axes: "axes";
    readonly Guides: "guides";
    readonly Format: "format";
    readonly General: "general";
};
export type ChartAuthoringPages = (typeof ChartAuthoringPages)[keyof typeof ChartAuthoringPages];
export declare const FormatIcons: {
    readonly Title: "title";
    readonly Text: "text";
    readonly Label: "label";
    readonly Palette: "palette";
};
export type FormatIcons = (typeof FormatIcons)[keyof typeof FormatIcons];
export declare const LineChartDataPopoverKinds: {
    readonly xAxisField: "xAxisField";
    readonly aggregation: "aggregation";
    readonly numericFields: "numericField";
    readonly splitByField: "splitByField";
    readonly interval: "interval";
    readonly intervalAlignment: "intervalAlignment";
};
export type LineChartDataPopoverKinds = (typeof LineChartDataPopoverKinds)[keyof typeof LineChartDataPopoverKinds];
export declare const BarChartDataPopoverKinds: {
    readonly category: "category";
    readonly aggregation: "aggregation";
    readonly numericFields: "numericField";
    readonly splitByField: "splitByField";
    readonly sortOrder: "sortOrder";
};
export type BarChartDataPopoverKinds = (typeof BarChartDataPopoverKinds)[keyof typeof BarChartDataPopoverKinds];
export declare const PieChartDataPopoverKinds: {
    readonly category: "category";
    readonly aggregation: "aggregation";
    readonly numericFields: "numericFields";
    readonly sortOrder: "sortOrder";
};
export type PieChartDataPopoverKinds = (typeof PieChartDataPopoverKinds)[keyof typeof PieChartDataPopoverKinds];
export declare const HistogramDataPopoverKinds: {
    readonly numericFields: "numericField";
    readonly transformation: "transformation";
    readonly fillSymbol: "fillSymbol";
    readonly lineSymbol: "lineSymbol";
};
export type HistogramDataPopoverKinds = (typeof HistogramDataPopoverKinds)[keyof typeof HistogramDataPopoverKinds];
export declare const ScatterPlotDataPopoverKinds: {
    readonly xAxisField: "xAxis";
    readonly yAxisField: "yAxis";
    readonly sizeVariable: "sizeVariable";
    readonly symbol: "symbol";
    readonly trendLine: "trendLine";
    readonly none: "none";
};
export type ScatterPlotDataPopoverKinds = (typeof ScatterPlotDataPopoverKinds)[keyof typeof ScatterPlotDataPopoverKinds];
export interface NumericFieldsChangeProps {
    pickListElement: HTMLCalciteListElement | undefined;
    eventEmitter: EventEmitter;
    contentKind: BarChartDataPopoverKinds | LineChartDataPopoverKinds | PieChartDataPopoverKinds;
}
export declare const BoxPlotDataPopoverKinds: {
    readonly category: "category";
    readonly numericFields: "numericField";
    readonly splitByField: "splitByField";
    readonly sortOrder: "sortOrder";
};
export type BoxPlotDataPopoverKinds = (typeof BoxPlotDataPopoverKinds)[keyof typeof BoxPlotDataPopoverKinds];
export declare const ScatterPlotSymbolSizeTypes: {
    readonly Fixed: "fixed";
    readonly Proportional: "proportional";
};
export type ScatterPlotSymbolSizeTypes = (typeof ScatterPlotSymbolSizeTypes)[keyof typeof ScatterPlotSymbolSizeTypes];
export declare const ButtonDirections: {
    readonly Up: "up";
    readonly Down: "down";
};
export type ButtonDirections = (typeof ButtonDirections)[keyof typeof ButtonDirections];
