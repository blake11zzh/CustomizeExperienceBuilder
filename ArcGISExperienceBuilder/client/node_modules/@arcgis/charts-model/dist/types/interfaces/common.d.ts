import type { IField, SupportedLayer } from "@arcgis/charts-spec";
import type { BarChartModel } from "../bar-chart-model/bar-chart-model";
import type { BoxPlotModel } from "../box-plot-model/box-plot-model";
import type { HistogramModel } from "../histogram-model/histogram-model";
import type { LineChartModel } from "../line-chart-model/line-chart-model";
import type { PieChartModel } from "../pie-chart-model/pie-chart-model";
import type { ScatterPlotModel } from "../scatter-plot-model/scatter-plot-model";
import type { GaugeModel } from "../gauge-model/gauge-model";
export declare const SerialChartDataSortingKinds: {
    readonly xAxisAsc: "xAxisAsc";
    readonly xAxisDesc: "xAxisDesc";
    readonly yAxisAsc: "yAxisAsc";
    readonly yAxisDesc: "yAxisDesc";
    readonly customSort: "customSort";
};
export type SerialChartDataSortingKinds = (typeof SerialChartDataSortingKinds)[keyof typeof SerialChartDataSortingKinds];
export declare const BoxPlotDataSortingKinds: {
    readonly xAxisAsc: "xAxisAsc";
    readonly xAxisDesc: "xAxisDesc";
    readonly meanAsc: "meanAsc";
    readonly meanDesc: "meanDesc";
    readonly medianAsc: "medianAsc";
    readonly medianDesc: "medianDesc";
    readonly customSort: "customSort";
};
export type BoxPlotDataSortingKinds = (typeof BoxPlotDataSortingKinds)[keyof typeof BoxPlotDataSortingKinds];
export declare const PieChartDataSortingKinds: {
    readonly labelAsc: "labelAsc";
    readonly labelDesc: "labelDesc";
    readonly valueAsc: "valueAsc";
    readonly valueDesc: "valueDesc";
    readonly customSort: "customSort";
};
export type PieChartDataSortingKinds = (typeof PieChartDataSortingKinds)[keyof typeof PieChartDataSortingKinds];
export declare const PieChartDataModes: {
    readonly Category: "category";
    readonly Fields: "fields";
};
export type PieChartDataModes = (typeof PieChartDataModes)[keyof typeof PieChartDataModes];
export declare const PieChartSlicesDisplay: {
    readonly Value: "value";
    readonly Percentage: "percentage";
    readonly Both: "both";
};
export type PieChartSlicesDisplay = (typeof PieChartSlicesDisplay)[keyof typeof PieChartSlicesDisplay];
export declare const FormatKeys: {
    readonly TextElements: "textElements";
    readonly XAxisTitle: "xAxisTitle";
    readonly YAxisTitle: "yAxisTitle";
    readonly AxisLabels: "axisLabels";
    readonly GuideLabels: "guideLabels";
    readonly Title: "title";
    readonly LegendText: "legendText";
    readonly LegendTitle: "legendTitle";
    readonly Description: "description";
    readonly DataLabels: "dataLabels";
    readonly Background: "background";
    readonly LeaderLines: "leaderLines";
    readonly AxisLines: "axisLines";
    readonly GridLines: "gridLines";
};
export type FormatKeys = (typeof FormatKeys)[keyof typeof FormatKeys];
export declare const LineFormatKeys: {
    readonly AxisLines: "axisLines";
    readonly GridLines: "gridLines";
    readonly LeaderLines: "leaderLines";
};
export type LineFormatKeys = (typeof LineFormatKeys)[keyof typeof LineFormatKeys];
export declare const TextFormatKeys: {
    readonly Title: "title";
    readonly XAxisTitle: "xAxisTitle";
    readonly YAxisTitle: "yAxisTitle";
    readonly AxisLabels: "axisLabels";
    readonly GuideLabels: "guideLabels";
    readonly LegendText: "legendText";
    readonly LegendTitle: "legendTitle";
    readonly Description: "description";
    readonly DataLabels: "dataLabels";
};
export type TextFormatKeys = (typeof TextFormatKeys)[keyof typeof TextFormatKeys];
export declare const ColorFormatKeys: {
    readonly Background: "background";
};
export type ColorFormatKeys = (typeof ColorFormatKeys)[keyof typeof ColorFormatKeys];
/**
 * Axis orientation of the guide.
 */
export declare const GuideOrientation: {
    readonly X: "x";
    readonly Y: "y";
};
export type GuideOrientation = (typeof GuideOrientation)[keyof typeof GuideOrientation];
export interface SplitByFieldInfos {
    categoriesArray: (number | string)[];
    fieldName: string;
    splitByFieldType: string | undefined;
    numericalField: string;
}
export interface PieSeriesDisplayOptions {
    displayNumericValueOnDataLabel: boolean;
    displayPercentageOnDataLabel: boolean;
    displayNumericValue: boolean;
    displayPercentage: boolean;
}
export interface LayerInfo {
    /**
     * Layer used for this bar chart.
     */
    layer: SupportedLayer;
    /**
     * Fields information for the layer.
     */
    layerFieldsInfo: IField[];
    /**
     * Object ID field name for the layer.
     */
    objectIdField: string;
}
export type ModelOfType<T> = T extends "boxPlotSeries" ? BoxPlotModel : T extends "lineSeries" ? LineChartModel : T extends "pieSeries" ? PieChartModel : T extends "scatterSeries" ? ScatterPlotModel : T extends "histogramSeries" ? HistogramModel : T extends "gaugeSeries" ? GaugeModel : BarChartModel;
