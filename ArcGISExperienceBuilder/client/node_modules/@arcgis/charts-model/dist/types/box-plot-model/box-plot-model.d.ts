import type { WebChartBoxPlotSeries, Color, RESTSimpleLineSymbolStyle, WebChart, WebChartDataFilters } from "@arcgis/charts-spec";
import type { ChartConfig, XYChartTypes } from "@arcgis/charts-shared-utils";
import type { ModelParams } from "../interfaces/chart-interfaces";
import type { LayerInfo } from "../interfaces/common";
import { BoxPlotDataSortingKinds } from "../interfaces/common";
import { ChartModel } from "../chart-model/chart-model";
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithYGuides, ModelWithLegend, ModelWithRotation, ModelWithXYAxes } from "../mixins";
export declare class BoxPlotModel extends ChartModel {
    /**
     * Current configuration used for the box plot chart.
     */
    protected _config: ChartConfig<WebChartBoxPlotSeries, WebChart>;
    protected _chartType: XYChartTypes;
    protected layerInfo: LayerInfo;
    /**
     * Common strings used in the model.
     * @category Private
     */
    private commonStrings;
    /**
     * The previous mean lines box color. We save this so that we can recover the color previously set if the user toggles mean lines off and then back on.
     * @category Private
     */
    private previousMeanLinesBoxColor;
    setup(params: ModelParams<ChartConfig<WebChartBoxPlotSeries>>): Promise<void>;
    /**
     * Gets the category field for the box plot.
     * @returns {string}
     */
    getCategory(): string;
    /**
     * Sets the category field for the box plot.
     * @param {string} newCategory The new category field.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setCategory(newCategory: string): Promise<void>;
    /**
     * Gets the list of the category values for the chart.
     * @returns {string[]}
     */
    getCustomSortValues(): Promise<string[]>;
    /**
     * Gets the numeric fields array for the box plot.
     * @returns {string[]}
     */
    getNumericFields(): string[];
    /**
     * Sets the numeric field or numeric fields array for the box plot.
     * @param {string[] | string} newNumericFields The new numeric field or numeric fields array.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericFields(newNumericFields: string[] | string): Promise<void>;
    /**
     * Gets the split-by field for the box plot.
     * @returns {string}
     */
    getSplitByField(): string;
    /**
     * Sets the split-by field for the box plot.
     * @param {string} newSplitByField The new split-by field.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setSplitByField(newSplitByField: string): Promise<void>;
    /**
     * Gets whether outliers are shown.
     * @returns {boolean}
     */
    getShowOutliers(): boolean;
    /**
     * Sets whether outliers are shown.
     * @param {boolean} newShowOutliersState The new show outliers state.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setShowOutliers(newShowOutliersState: boolean): Promise<void>;
    /**
     * Gets whether values are standardized as z-scores.
     * @returns {boolean}
     */
    getStandardizeValues(): boolean;
    /**
     * Sets whether values are standardized as z-scores.
     * @param {boolean} newStandardizeValuesState The new standardize values state.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setStandardizeValues(newStandardizeValuesState: boolean): Promise<void>;
    /**
     * Gets the sort order of the box plot data.
     * @returns {"xAxisAsc" | "xAxisDesc"| "meanAsc" | "meanDesc" | "medianAsc" | "medianDesc" | "customSort"}
     */
    getSortOrder(): BoxPlotDataSortingKinds;
    /**
     * Sets the sort order of the box plot data.
     * @param {"xAxisAsc" | "xAxisDesc"| "meanAsc" | "meanDesc" | "medianAsc" | "medianDesc" | "customSort"} newSortOrder The new sort order.
     */
    setSortOrder(newSortOrder: BoxPlotDataSortingKinds, orderByList?: string[]): void;
    /**
     * Gets the list of category's values for custom sort
     * @returns {string[]}
     */
    getOrderByList(): string[];
    /**
     * Sets the list of category's values for custom sort
     * @param {string[]} newOrderByList The new list of category's values
     */
    setOrderByList(newOrderByList: string[]): void;
    /**
     * Updates the series based on the layer filter.
     * @async **This method is `async` and must be awaited for the changes to take effect.*
     */
    updateSeriesFromLayerFilter(): Promise<void>;
    /**
     * Gets the data filter for the bar chart.
     * @returns {WebChartDataFilters | undefined}
     */
    getDataFilter(): WebChartDataFilters | undefined;
    /**
     * Sets the data filter for the bar chart.
     * @param {WebChartDataFilters | undefined} newDataFilter The new data filter.
     */
    setDataFilter(newDataFilter: WebChartDataFilters | undefined): Promise<void>;
    /**
     * Gets whether mean lines are shown.
     * @returns {boolean | undefined}
     */
    getShowMeanLines(): boolean | undefined;
    /**
     * Sets whether mean lines are shown.
     * @param {boolean | undefined} newShowMeanLines The new show mean lines state.
     */
    setShowMeanLines(newShowMeanLines: boolean | undefined): Promise<void>;
    /**
     * Gets the color of the boxes when showing mean lines. Only applicable when mean lines are shown.
     * @returns {Color | undefined}
     */
    getMeanLinesBoxColor(): Color | undefined;
    /**
     * Sets the color of the boxes when showing mean lines. Only applicable when mean lines are shown.
     * @param {Color | undefined} newColor The new color.
     */
    setMeanLinesBoxColor(newColor: Color | undefined): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
    /**
     * Gets the name of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {string | undefined}
     */
    getSeriesName(seriesIndex: number): string | undefined;
    /**
     * Sets name of the series based on the series index.
     * @param {string} newName The new name for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesName(newName: string, seriesIndex: number): void;
    /**
     * Gets the color of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {Color | undefined}
     */
    getSeriesColor(seriesIndex: number): Color | undefined;
    /**
     * Sets the color of the series based on the series index.
     * @param {Color | undefined} newColor The new color for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesColor(newColor: Color | undefined, seriesIndex: number): void;
    /**
     * Gets the line style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     *
     * **Only applicable when mean lines are shown.**
     *
     * @param {number} seriesIndex The index of the series.
     * @returns {RESTSimpleLineSymbolStyle | undefined}
     */
    getSeriesLineStyle(seriesIndex: number): RESTSimpleLineSymbolStyle | undefined;
    /**
     * Sets the line style of the series based on the series index.
     *
     * **Only applicable when mean lines are shown.**
     *
     * @param {RESTSimpleLineSymbolStyle | undefined} newStyle The new style for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesLineStyle(newStyle: RESTSimpleLineSymbolStyle | undefined, seriesIndex: number): void;
    /**
     * Gets the line width of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     *
     * **Only applicable when mean lines are shown.**
     *
     * @param {number} seriesIndex The index of the series.
     * @returns {number | undefined}
     */
    getSeriesLineWidth(seriesIndex: number): number | undefined;
    /**
     * Sets the line width of the series based on the series index.
     *
     * **Only applicable when mean lines are shown.**
     *
     * @param {number | undefined} newWidth The new width for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesLineWidth(newWidth: number | undefined, seriesIndex: number): void;
    /**
     * Gets the order of the series array by returning an array of series ids.
     * @returns {string[]}
     */
    getOrderOfSeries(): string[];
    /**
     * Sets the order of the series array by providing an array of series ids.
     * @param {string[]} newOrder The new order of the series array.
     */
    setOrderOfSeries(newOrder: string[]): void;
    /**
     * Moves a series from one index in the series array to another.
     * @param {number} fromIndex Index to move the series from.
     * @param {number} toIndex Index to move the series to.
     */
    moveSeries(fromIndex: number, toIndex: number): void;
    /**
     * Get the index of the box plot series in the series array in config object when show mean is true.
     *
     * **NOTE**: There is only one box plot series when show mean is true. The function returns '-1' if show mean is false.
     * @param config - config object
     */
    getBoxPlotSeriesIndexWhenMeanLinesShown(): number;
    /**
     * Move the custom sort values in-place for the order by list in the config.
     *
     * NOTE: This method should be only used when the sort order is set to `BoxPlotDataSortingKinds.customSort`.
     * @param {number} fromIndex The index to move the custom sort item from.
     * @param {number} toIndex The index to move the category item to.
     */
    moveCustomSortValuesInOrderByList(fromIndex: number, toIndex: number): void;
    /**
     * Resets the series styling to the default styling.
     */
    resetSeriesStyling(): void;
    /**
     * Returns whether the series styling is able to be reset.
     * @returns {boolean}
     */
    resetAvailable(): boolean;
}
export interface BoxPlotModel extends ModelWithXYAxes, ModelWithLegend, ModelWithColorMatch, ModelWithRotation, ModelWithDataLabels, ModelWithYGuides {
}
