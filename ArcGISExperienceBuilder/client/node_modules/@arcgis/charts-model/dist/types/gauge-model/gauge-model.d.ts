import type { WebGaugeChart, WebChartTextSymbol, WebChartGaugeSeries, RESTStatisticType, ISimpleFillSymbol, ValueConversion, GaugeChartSubTypes } from "@arcgis/charts-spec";
import type { ChartTypes, ChartConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../interfaces/common";
import { ChartModel } from "../chart-model/chart-model";
import { ModelWithBasicXAxis, ModelWithXGuides } from "../mixins";
import type { ModelParams } from "../interfaces/chart-interfaces";
export declare class GaugeModel extends ChartModel {
    /**
     * Current configuration used for the histogram.
     */
    protected _config: ChartConfig<WebChartGaugeSeries, WebGaugeChart>;
    protected layerInfo: LayerInfo;
    protected _chartType: ChartTypes;
    setup(params: ModelParams<ChartConfig<WebChartGaugeSeries>>): Promise<void>;
    /**
     * Gets the data field used for the gauge.
     * @returns {string}
     */
    getField(): string;
    /**
     * Sets the data field used for the gauge.
     * @param {string} newField The new field to set.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setField(newField: string): Promise<void>;
    /**
     * Gets the aggregation type used for the gauge.
     * @returns {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate"}
     */
    getAggregationType(): Exclude<RESTStatisticType, "no_aggregation">;
    /**
     * Sets the aggregation type used for the gauge.
     * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate"} newAggregationType The new aggregation type to set. Must be one of the values allowed by `RESTStatisticType`, excluding `"no_aggregation"`.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setAggregationType(newAggregationType: Exclude<RESTStatisticType, "no_aggregation">): Promise<void>;
    /**
     * Gets the inner radius of the gauge.
     * @returns {number}
     */
    getInnerRadius(): number;
    /**
     * Sets the inner radius of the gauge.
     * @param {number} newInnerRadius The new inner radius to set.
     */
    setInnerRadius(newInnerRadius: number): void;
    /**
     * Gets the start angle of the gauge.
     * @returns {number}
     */
    getStartAngle(): number;
    /**
     * Sets the start angle of the gauge.
     * @param {number} newStartAngle The new start angle to set.
     */
    setStartAngle(newStartAngle: number): void;
    /**
     * Gets the end angle of the gauge.
     * @returns {number}
     */
    getEndAngle(): number;
    /**
     * Sets the end angle of the gauge.
     * @param {number} newEndAngle The new end angle to set.
     */
    setEndAngle(newEndAngle: number): void;
    /**
     * Get the conversion to apply to the gauge value
     *
     * @returns {ValueConversion | undefined}
     */
    getValueConversion(): ValueConversion | undefined;
    /**
     * Set the conversion to apply to the gauge value
     * @param {ValueConversion} valueConversion - the conversion to apply
     */
    setValueConversion(valueConversion: ValueConversion): void;
    /**
     * Get the index of the feature to be rendered.
     *
     * NOTE: This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
     *
     * @returns {number | undefined}
     */
    getFeatureIndex(): number | undefined;
    /**
     * Set the index of the feature to be rendered.
     *
     * NOTE: This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
     * For feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)
     *
     * @param {number} featureIndex - the index of the feature to be rendered
     */
    setFeatureIndex(featureIndex: number): Promise<void>;
    /**
     * Remove the existing feature index from the config object
     */
    removeFeatureIndex(): void;
    /**
     * Get the type of Gauge chart, like FeatureGauge and StatisticGauge.
     *
     * NOTE: When this property is not specified, it will be defaulted to GaugeChartSubTypes.StatisticGauge.
     * @default GaugeChartSubTypes.StatisticGauge
     *
     * @returns {GaugeChartSubTypes}
     */
    getGaugeSubType(): GaugeChartSubTypes;
    /**
     * Gets the visibility of the gauge's needle.
     * @returns {boolean}
     */
    getNeedleVisibility(): boolean;
    /**
     * Sets the visibility of the gauge's needle.
     * @param {boolean} newNeedleVisibility The new visibility to set.
     */
    setNeedleVisibility(newNeedleVisibility: boolean): void;
    /**
     * Gets the symbol of the gauge's needle.
     * @returns {ISimpleFillSymbol | undefined}
     */
    getNeedleSymbol(): ISimpleFillSymbol | undefined;
    /**
     * Sets the symbol of the gauge's needle.
     * @param {ISimpleFillSymbol | undefined} newNeedleSymbol The new needle symbol to set.
     */
    setNeedleSymbol(newNeedleSymbol: ISimpleFillSymbol | undefined): void;
    /**
     * Gets the start width of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleStartWidth(): number | null | undefined;
    /**
     * Sets the start width of the gauge's needle.
     * @param {number | null | undefined} newNeedleStartWidth The new start width to set.
     */
    setNeedleStartWidth(newNeedleStartWidth: number | null | undefined): void;
    /**
     * Gets the end width of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleEndWidth(): number | null | undefined;
    /**
     * Sets the end width of the gauge's needle.
     * @param {number | null | undefined} newNeedleEndWidth The new end width to set.
     */
    setNeedleEndWidth(newNeedleEndWidth: number | null | undefined): void;
    /**
     * Gets the inner radius of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleInnerRadius(): number | null | undefined;
    /**
     * Sets the inner radius of the gauge's needle.
     * @param {number | null | undefined} newNeedleInnerRadius The new inner radius to set.
     */
    setNeedleInnerRadius(newNeedleInnerRadius: number): void;
    /**
     * Gets whether to display the pin for the gauge's needle.
     * @returns {boolean}
     */
    getNeedleDisplayPin(): boolean;
    /**
     * Sets whether to display the pin for the gauge's needle.
     * @param {boolean} newNeedleDisplayPin The new display pin state.
     */
    setNeedleDisplayPin(newNeedleDisplayPin: boolean): void;
    /**
     * Gets whether the inner label is visible.
     * @returns {boolean}
     */
    getInnerLabelVisible(): boolean;
    /**
     * Sets whether the inner label is visible.
     * @param {boolean} newNeedleLabelVisibility The new visibility state.
     */
    setInnerLabelVisibility(newNeedleLabelVisibility: boolean): void;
    /**
     * Gets the inner label content symbol.
     * @returns {WebChartTextSymbol | undefined}
     */
    getInnerLabelContent(): WebChartTextSymbol | undefined;
    /**
     * Sets the inner label content symbol.
     * @param {WebChartTextSymbol | undefined} newInnerLabelContent The new content symbol to set.
     */
    setInnerLabelContent(newInnerLabelContent: WebChartTextSymbol | undefined): void;
    /**
     * Gets whether the axis ticks are visible.
     * @returns {boolean}
     */
    getAxisTickVisibility(): boolean;
    /**
     * Sets whether the axis ticks are visible.
     * @param {boolean} newAxisTickVisibility The new visibility state.
     */
    setAxisTickVisibility(newAxisTickVisibility: boolean): void;
    /**
     * Gets the labels increment for the gauge.
     * @returns {number | undefined}
     */
    getLabelsIncrement(): number | undefined;
    /**
     * Sets the labels increment for the gauge.
     * @param {number | undefined} newLabelsIncrement The new increment to set.
     */
    setLabelsIncrement(newLabelsIncrement: number | undefined): void;
    /**
     * Gets whether to only show the first and last labels.
     * @returns {boolean}
     */
    getOnlyShowFirstAndLastLabels(): boolean;
    /**
     * Sets whether to only show the first and last labels.
     * @param {boolean} newOnlyShowFirstAndLastLabels The new state.
     */
    setOnlyShowFirstAndLastLabels(newOnlyShowFirstAndLastLabels: boolean): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface GaugeModel extends ModelWithBasicXAxis, ModelWithXGuides {
}
