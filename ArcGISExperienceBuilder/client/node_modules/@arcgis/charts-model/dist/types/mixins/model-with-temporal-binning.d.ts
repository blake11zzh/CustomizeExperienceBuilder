import type { WebChartTimeIntervalUnits, WebChartTimeAggregationTypes, WebChartNullPolicyTypes } from "@arcgis/charts-spec";
import { ChartModel } from "../chart-model/chart-model";
export declare abstract class ModelWithTemporalBinning extends ChartModel {
    /**
     * Sets the time interval size for a temporal bar/line chart.
     * @returns {number | undefined}
     */
    getTimeIntervalSize(): number | undefined;
    /**
     * Sets the time interval size for a temporal bar/line chart.
     * @param {number | undefined} newTimeIntervalSize The new time interval size.
     */
    setTimeIntervalSize(newTimeIntervalSize: number | undefined): void;
    /**
     * Gets the time interval units for a temporal bar/line chart.
     * @returns {WebChartTimeIntervalUnits | undefined}
     */
    getTimeIntervalUnits(): WebChartTimeIntervalUnits | undefined;
    /**
     * Sets the time interval units for a temporal bar/line chart.
     * @param {WebChartTimeIntervalUnits | undefined} newTimeIntervalUnits The new time interval units.
     */
    setTimeIntervalUnits(newTimeIntervalUnits: WebChartTimeIntervalUnits | undefined): void;
    /**
     * Gets the time aggregation type for a temporal bar/line chart.
     * @returns {WebChartTimeAggregationTypes | undefined}
     */
    getTimeAggregationType(): WebChartTimeAggregationTypes | undefined;
    /**
     * Sets the time aggregation type for a temporal bar/line chart.
     * @param {WebChartTimeAggregationTypes | undefined} newTimeAggregationType The new time aggregation type.
     */
    setTimeAggregationType(newTimeAggregationType: WebChartTimeAggregationTypes | undefined): void;
    /**
     * Gets whether to trim incomplete time intervals for a temporal bar/line chart.
     * @returns {boolean | undefined}
     */
    getTrimIncompleteTimeInterval(): boolean | undefined;
    /**
     * Sets whether to trim incomplete time intervals for a temporal bar/line chart.
     * @param {boolean | undefined} newTrimIncompleteTimeInterval The new state.
     */
    setTrimIncompleteTimeInterval(newTrimIncompleteTimeInterval: boolean | undefined): void;
    /**
     * Gets the policy which tells the chart how to handle null values.
     *
     * `null`: Break the bar where null values are present.
     *
     * `zero`: Treats null values as zero.
     *
     * `interpolate`: Bar series: same effect as `null` - Line series: connects the lines across null values.
     *
     * @return {WebChartNullPolicyTypes | undefined}
     */
    getNullPolicy(): WebChartNullPolicyTypes | undefined;
    /**
     * Sets the policy which tells the chart how to handle null values.
     *
     * `null`: Break the bar where null values are present.
     *
     * `zero`: Treats null values as zero.
     *
     * `interpolate`: Bar series: same effect as `null` - Line series: connects the lines across null values.
     *
     * @param {WebChartNullPolicyTypes | undefined} newNullPolicy The new null policy.
     */
    setNullPolicy(newNullPolicy: WebChartNullPolicyTypes | undefined): void;
    /**
     * Resets the time interval to default for a temporal line chart.
     */
    resetTimeInterval(): void;
}
