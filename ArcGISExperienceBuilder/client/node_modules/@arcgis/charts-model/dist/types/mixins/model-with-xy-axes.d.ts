import type { XYChartTypes } from "@arcgis/charts-shared-utils";
import type { CategoryFormatOptions, DateTimeFormatOptions, NumberFormatOptions, WebChartAxisScrollBar, WebChartTextSymbol, ISimpleLineSymbol } from "@arcgis/charts-spec";
import { ModelWithBasicXAxis } from "./model-with-basic-x-axis";
export declare abstract class ModelWithXYAxes extends ModelWithBasicXAxis {
    protected _chartType: XYChartTypes;
    /**
     * Gets the Y-axis title text.
     * @returns {string}
     */
    getYAxisTitleText(): string;
    /**
     * Sets the Y-axis title text.
     * @param {string} newYAxisTitleText The new Y-axis title text.
     */
    setYAxisTitleText(newYAxisTitleText: string): void;
    /**
     * Gets the visibility of the Y-axis title.
     *
     * `true`: The Y-axis title is visible.
     *
     * `false`: The Y-axis title is hidden.
     *
     * @returns {boolean}
     */
    getYAxisTitleVisibility(): boolean;
    /**
     * Sets the visibility of the Y-axis title.
     *
     * `true`: Show the Y-axis title.
     *
     * `false`: Hide the Y-axis title.
     *
     * @param {boolean} newYAxisTitleVisibility The new visibility state of the Y-axis title.
     */
    setYAxisTitleVisibility(newYAxisTitleVisibility: boolean): void;
    /**
     * Gets the maximum bound for the y-axis.
     * @returns {number | null}
     */
    getMaxYBound(): number | null;
    /**
     * Sets the maximum bound for the y-axis.
     * @param {number | null} newMaxYBound The new maximum bound for the y-axis. If `null`, the maximum bound is automatically calculated.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMaxYBound(newMaxYBound: number | null): Promise<void>;
    /**
     * Gets the minimum bound for the y-axis.
     * @returns {number | null}
     */
    getMinYBound(): number | null;
    /**
     * Sets the minimum bound for the y-axis.
     * @param {number | null} newMinYBound The new minimum bound for the y-axis. If `null`, the minimum bound is automatically calculated.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMinYBound(newMinYBound: number | null): Promise<void>;
    /**
     * Gets the value format options for the x-axis.
     * @returns {CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined}
     */
    getXAxisValueFormat(): CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined;
    /**
     * Sets the value format options for the x-axis.
     * @param {CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined} newXAxisValueFormat The new value format options for the x-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXAxisValueFormat(newXAxisValueFormat: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined): Promise<void>;
    /**
     * Gets the value format options for the y-axis.
     * @returns {NumberFormatOptions | undefined}
     */
    getYAxisValueFormat(): NumberFormatOptions | undefined;
    /**
     * Sets the value format options for the y-axis.
     * @param {NumberFormatOptions | undefined} newYAxisValueFormat The new value format options for the y-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYAxisValueFormat(newYAxisValueFormat: NumberFormatOptions | undefined): Promise<void>;
    /**
     * Gets whether logarithmic scale is enabled for the x-axis.
     *
     * `true`: Logarithmic scale is enabled for the x-axis.
     *
     * `false`: Logarithmic scale is disabled for the x-axis.
     *
     * @returns {boolean}
     */
    getXLogarithmic(): boolean;
    /**
     * Sets whether logarithmic scale is enabled for the x-axis.
     *
     * `true`: Enable logarithmic scale for the x-axis.
     *
     * `false`: Disable logarithmic scale for the x-axis.
     *
     * @param {boolean} newXLogarithmicState The new state of the logarithmic scale for the x-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXLogarithmic(newXLogarithmicState: boolean): Promise<void>;
    /**
     * Gets whether logarithmic scale is enabled for the y-axis.
     *
     * `true`: Logarithmic scale is enabled for the y-axis.
     *
     * `false`: Logarithmic scale is disabled for the y-axis.
     *
     * @returns {boolean}
     */
    getYLogarithmic(): boolean;
    /**
     * Sets whether logarithmic scale is enabled for the y-axis.
     *
     * `true`: Enable logarithmic scale for the y-axis.
     *
     * `false`: Disable logarithmic scale for the y-axis.
     *
     * @param {boolean} newYLogarithmicState The new state of the logarithmic scale for the y-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYLogarithmic(newYLogarithmicState: boolean): Promise<void>;
    /**
     * Gets the x-axis scrollbar configuration.
     * @returns {WebChartAxisScrollBar | undefined}
     */
    getXAxisScrollbar(): WebChartAxisScrollBar | undefined;
    /**
     * Sets the x-axis scrollbar configuration.
     * @param {WebChartAxisScrollBar} scrollbar The new x-axis scrollbar configuration.
     */
    setXAxisScrollbar(scrollbar: WebChartAxisScrollBar): void;
    /**
     * Gets the y-axis scrollbar configuration.
     * @returns {WebChartAxisScrollBar | undefined}
     */
    getYAxisScrollbar(): WebChartAxisScrollBar | undefined;
    /**
     * Sets the y-axis scrollbar configuration.
     * @param {WebChartAxisScrollBar} scrollbar The new y-axis scrollbar configuration.
     */
    setYAxisScrollbar(scrollbar: WebChartAxisScrollBar): void;
    /**
     * Gets the y-axis title text symbol. Contains styling information such as font, color, and symbol style.
     * @returns {WebChartTextSymbol | undefined}
     */
    getYAxisTitleSymbol(): WebChartTextSymbol | undefined;
    /**
     * Sets the y-axis title text symbol. Contains styling information such as font, color, and symbol style.
     * @param {WebChartTextSymbol | undefined} newYAxisTitleSymbol The new y-axis title text symbol.
     */
    setYAxisTitleSymbol(newYAxisTitleSymbol: WebChartTextSymbol | undefined): void;
    /**
     * Gets the grid lines symbol. Contains styling information such as line width, line style, and line color.
     * @returns {ISimpleLineSymbol | undefined}
     */
    getGridLinesSymbol(): ISimpleLineSymbol | undefined;
    /**
     * Sets the grid lines symbol. Contains styling information such as line width, line style, and line color.
     * @param {ISimpleLineSymbol | undefined} newGridLinesSymbol The new grid lines symbol.
     */
    setGridLinesSymbol(newGridLinesSymbol: ISimpleLineSymbol | undefined): void;
}
