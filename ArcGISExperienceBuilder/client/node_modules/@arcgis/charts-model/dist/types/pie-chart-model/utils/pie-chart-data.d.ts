import type { WebChartPieChartSeries } from "@arcgis/charts-spec";
import { RESTStatisticType } from "@arcgis/charts-spec";
import type { ChartConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../../interfaces/common";
import { PieChartDataSortingKinds, PieChartDataModes } from "../../interfaces/common";
/**
 * Gets the category field.
 */
export declare const getCategory: (config: ChartConfig<WebChartPieChartSeries>) => string;
/**
 * Gets the sort order kind.
 */
export declare const getSortOrderKind: (config: ChartConfig<WebChartPieChartSeries>, mode: PieChartDataModes) => PieChartDataSortingKinds;
/**
 * Gets the numeric fields.
 */
export declare const getNumericFields: (config: ChartConfig<WebChartPieChartSeries>) => string[];
/**
 * Gets the aggregation type.
 */
export declare const getAggregationType: (config: ChartConfig<WebChartPieChartSeries>, mode: PieChartDataModes) => RESTStatisticType;
/**
 * Sets the sort order by updating the config accordingly.
 */
export declare const setSortOrderKind: (props: {
    newSortOrderKind: PieChartDataSortingKinds;
    config: ChartConfig<WebChartPieChartSeries>;
    orderByList?: string[];
}) => void;
/**
 * Sets the category field by updating the config accordingly.
 */
export declare const setCategory: (props: {
    newCategory: string;
    config: ChartConfig<WebChartPieChartSeries>;
    layerInfo: LayerInfo | undefined;
    mode: PieChartDataModes;
}) => Promise<void>;
/**
 * Sets the aggregation type by updating the config accordingly.
 */
export declare const setAggregationType: (props: {
    newAggregationType: RESTStatisticType;
    config: ChartConfig<WebChartPieChartSeries>;
    layerInfo: LayerInfo;
    mode: PieChartDataModes;
}) => Promise<void>;
/**
 * Sets the numeric fields by updating the config accordingly.
 */
export declare const setNumericFields: (props: {
    newNumericFields: string[] | string;
    config: ChartConfig<WebChartPieChartSeries>;
    layerInfo: LayerInfo | undefined;
    mode: PieChartDataModes;
}) => Promise<void>;
/**
 * Get the order by list from the config. The order by list is only used when the sort order kind is custom sort.
 * @param  {ChartConfig<WebChartBarChartSeries>} config - The chart config.
 * @param  {PieChartDataModes} mode - The chart mode.
 *
 * @returns string[] - The order by list.
 */
export declare const getOrderByList: (config: ChartConfig<WebChartPieChartSeries>, mode: PieChartDataModes) => string[];
/**
 * Set the order by list in the config. The order by list is only used when the sort order kind is custom sort.
 * @param  {string[]} props.values - The order by list.
 * @param  {ChartConfig<WebChartBarChartSeries>} props.config - The chart config.
 * @param  {PieChartDataModes} props.mode - The chart mode.
 */
export declare const setOrderByList: (props: {
    values: string[];
    config: ChartConfig<WebChartPieChartSeries>;
    mode: PieChartDataModes;
}) => void;
