import type { WebChart, WebChartPieChartSlice, WebChartPieChartGroupSlice, WebChartPieChartSeries, Color, ISimpleLineSymbol, RESTStatisticType } from "@arcgis/charts-spec";
import type { ChartTypes, ChartConfig } from "@arcgis/charts-shared-utils";
import type { PieChartSlicesDisplay, LayerInfo, PieChartDataSortingKinds } from "../interfaces/common";
import { PieChartDataModes } from "../interfaces/common";
import { ChartModel } from "../chart-model/chart-model";
import { ModelWithLegend, ModelWithColorMatch, ModelWithDataLabels } from "../mixins";
import type { ModelParams } from "../interfaces/chart-interfaces";
export declare class PieChartModel extends ChartModel {
    /**
     * Current configuration used for the pie chart
     */
    protected _config: ChartConfig<WebChartPieChartSeries, WebChart>;
    protected _chartType: ChartTypes;
    /**
     * Protected property to hold the pie chart data mode (Category or Fields)
     *
     * `category` - The chart will use values from the category field to determine each slice.
     *
     * `fields` - The chart will use aggregated values from the numeric fields to determine each slice.
     *
     * @category Protected
     */
    protected _mode: PieChartDataModes;
    protected layerInfo: LayerInfo;
    /**
     * Array of hidden grouped slice ids
     * @category Private
     */
    private _groupedSliceIds;
    setup(params: ModelParams<ChartConfig<WebChartPieChartSeries>>): Promise<void>;
    /**
     * Gets the category field for the pie chart.
     * @returns {string}
     */
    getCategory(): string;
    /**
     * Sets the category field for the pie chart.
     * @param {string} newCategory The new category field.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setCategory(newCategory: string): Promise<void>;
    /**
     * Gets the numeric fields for the pie chart.
     * @returns {string[]}
     */
    getNumericFields(): string[];
    /**
     * Sets the numeric field or numeric fields array for the pie chart.
     * @param {string[]} newNumericFields The new numeric field or numeric fields array.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericFields(newNumericFields: string[] | string): Promise<void>;
    /**
     * Gets the aggregation type for the pie chart.
     * @returns {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"}
     */
    getAggregationType(): RESTStatisticType;
    /**
     * Sets the aggregation type for the pie chart.
     * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"} newAggregationType The new aggregation type. Must be one of the values allowed by `RESTStatisticType`.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setAggregationType(newAggregationType: RESTStatisticType): Promise<void>;
    /**
     * Gets the sort order for the pie chart.
     * @returns {PieChartDataSortingKinds}
     */
    getSortOrder(): PieChartDataSortingKinds;
    /**
     * Sets the sort order for the pie chart.
     * @param {PieChartDataSortingKinds} newSortOrder The new sort order.
     */
    setSortOrder(newSortOrder: PieChartDataSortingKinds, orderByList?: string[]): void;
    getOrderByList(): string[];
    /**
     * Sets the list of category's values for custom sort
     * @param {string[]} newOrderByList The new list of category's values
     */
    setOrderByList(newOrderByList: string[]): void;
    /**
     * Gets the pie chart data mode (Category or Fields).
     *
     * `category` - The chart is using values from the category field to determine each slice.
     *
     * `fields` - The chart is using aggregated values from the numeric fields to determine each slice.
     *
     * @returns {PieChartDataModes}
     */
    getMode(): PieChartDataModes;
    /**
     * Sets the pie chart data mode (Category or Fields).
     *
     * `category` - The chart should use values from the category field to determine each slice.
     *
     * `fields` - The chart should use aggregated values from the numeric fields to determine each slice.
     *
     * @param {PieChartDataModes} newMode The new mode.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMode(newMode: PieChartDataModes): void;
    /**
     * Gets the list of the category values for the chart.
     * @returns {string[]}
     */
    getCustomSortValues(): Promise<string[]>;
    /**
     * Move the custom sort values in-place for the order by list in the config.
     *
     * NOTE: This method should be only used when the sort order is set to `customSort`.
     * @param {number} fromIndex The index to move the custom sort item from.
     * @param {number} toIndex The index to move the category item to.
     */
    moveCustomSortValuesInOrderByList(fromIndex: number, toIndex: number): void;
    /**
     * Gets the symbol style for the leader lines connecting the slices to the labels.
     * @returns {ISimpleLineSymbol | undefined}
     */
    getLeaderLinesSymbol(): ISimpleLineSymbol | undefined;
    /**
     * Sets the symbol style for the leader lines connecting the slices to the labels.
     * @param {ISimpleLineSymbol | undefined} newLeaderLines The new leader lines symbol.
     */
    setLeaderLinesSymbol(newLeaderLines: ISimpleLineSymbol | undefined): void;
    /**
     * Gets the array of slices for the pie chart.
     * @returns {WebChartPieChartSlice[] | undefined}
     */
    getSlices(): WebChartPieChartSlice[] | undefined;
    /**
     * Sets the array of slices for the pie chart.
     * @param {WebChartPieChartSlice[] | undefined} newSlices The new slices array.
     */
    setSlices(newSlices: WebChartPieChartSlice[] | undefined): void;
    /**
     * Gets the array of grouped slice ids for the pie chart.
     * @returns {string[]}
     */
    getGroupedSliceIds(): string[];
    /**
     * Sets the array of grouped slice ids for the pie chart.
     * @param {string[]} newGroupedSliceIds The new grouped slice ids array.
     */
    setGroupedSliceIds(newGroupedSliceIds: string[]): void;
    /**
     * Gets the slice grouping configuration for the pie chart.
     * @returns {WebChartPieChartGroupSlice | undefined}
     */
    getSliceGrouping(): WebChartPieChartGroupSlice | undefined;
    /**
     * Sets the slice grouping configuration for the pie chart.
     * @param {WebChartPieChartGroupSlice | undefined} newSliceGrouping The new slice grouping configuration.
     */
    setSliceGrouping(newSliceGrouping: WebChartPieChartGroupSlice | undefined): void;
    /**
     * Gets the inner radius size for the pie chart.
     * @returns {number}
     */
    getInnerRadiusSize(): number;
    /**
     * Sets the inner radius size for the pie chart.
     * @param {number} newInnerRadiusSize The new inner radius size.
     */
    setInnerRadiusSize(newInnerRadiusSize: number): void;
    /**
     * Gets the threshold below which slices will be grouped.
     * @returns {number}
     */
    getGroupingThreshold(): number;
    /**
     * Sets the threshold below which slices will be grouped.
     * @param {number} newGroupingThreshold The new grouping threshold.
     */
    setGroupingThreshold(newGroupingThreshold: number): void;
    /**
     * Gets the character limit for the slice labels.
     * @returns {number | null}
     */
    getLabelCharacterLimit(): number | null;
    /**
     * Sets the character limit for the slice labels.
     * @param {number | null} newLabelCharacterLimit The new label character limit.
     */
    setLabelCharacterLimit(newLabelCharacterLimit: number | null): void;
    /**
     * Gets the number of decimal places to display in the slice values.
     * @returns {number}
     */
    getDecimalPlaces(): number;
    /**
     * Sets the number of decimal places to display in the slice values.
     * @param {number} newDecimalPlaces The new decimal places.
     */
    setDecimalPlaces(newDecimalPlaces: number): void;
    /**
     * Gets the display type for the pie chart slices. Specifies whether to display the slices as a percentage, value, or both.
     * @returns {PieChartSlicesDisplay}
     */
    getDisplayType(): PieChartSlicesDisplay;
    /**
     * Sets the display type for the pie chart slices. Specifies whether to display the slices as a percentage, value, or both.
     * @param {PieChartSlicesDisplay} newDisplayType The new display type.
     */
    setDisplayType(newDisplayType: PieChartSlicesDisplay): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
    /**
     * Gets the original name of the slice based on the slice index.
     * @returns {Date | number | string | null | undefined}
     */
    getOriginalSliceName(sliceIndex: number): Date | number | string | null | undefined;
    /**
     * Gets the name of the slice based on the slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {string | undefined}
     */
    getSliceName(sliceIndex: number): string | undefined;
    /**
     * Sets name of the slice based on the slice index.
     * @param {string} newName The new name for the slice.
     * @param {number} sliceIndex The index of the slice.
     */
    setSliceName(newName: string, sliceIndex: number): void;
    /**
     * Gets the color of the slice based on the slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {Color | undefined}
     */
    getSliceColor(sliceIndex: number): Color | undefined;
    /**
     * Sets the color of the slice based on the slice index.
     * @param {Color | undefined} newColor The new color for the slice.
     * @param {number} sliceIndex The index of the slice.
     */
    setSliceColor(newColor: Color | undefined, sliceIndex: number): void;
    /**
     * Gets the order of the slice array by returning an array of slice ids
     * @returns {string[] | undefined}
     */
    getOrderOfSlices(): string[] | undefined;
    /**
     * Sets the order of the slices array by providing an array of slice ids.
     * @param {string[]} newOrder The new order of the slices.
     */
    setOrderOfSlices(newOrder: string[]): void;
    /**
     * Moves a series from one index in the series array to another.
     * @param {number} fromIndex Index to move the series from.
     * @param {number} toIndex Index to move the series to.
     */
    moveSeries(fromIndex: number, toIndex: number): void;
    /**
     * Gets the slice id for a given slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {string | undefined}
     */
    getSliceId(sliceIndex: number): string | undefined;
    /**
     * Gets the slice index for a given slice id. If the `sliceId` is not found, this function will return `undefined`.
     * @param {string} sliceId The id of the slice.
     * @returns {number | undefined}
     */
    getSliceIndex(sliceId: string): number | undefined;
    /**
     * Gets the length of the slices array.
     * @returns {number}
     */
    getSlicesLength(): number;
    /**
     * Resets the slices styling to the default styling.
     */
    resetSlices(): void;
    /**
     * Returns whether the series styling is able to be reset.
     * @returns {boolean}
     */
    resetAvailable(): boolean;
}
export interface PieChartModel extends ModelWithLegend, ModelWithColorMatch, ModelWithDataLabels {
}
