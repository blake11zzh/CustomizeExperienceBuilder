import { type SerialChartTypes } from "@arcgis/charts-shared-utils";
import { ChartModel } from "../chart-model/chart-model";
import type { Color, RESTStatisticType, WebChartDataFilters, WebChartStackedKinds } from "@arcgis/charts-spec";
import { SerialChartDataSortingKinds } from "../interfaces/common";
export declare abstract class SerialChartModel extends ChartModel {
    /**
     * Current chart type.
     * @category Protected
     */
    protected _chartType: SerialChartTypes;
    /**
     * Gets the x-axis field for the chart.
     * @returns {string}
     */
    getXAxisField(): string;
    /**
     * Sets the x-axis field for the chart.
     * @param {string} newXAxisField The new x-axis field.
     */
    setXAxisField(newXAxisField: string): Promise<void>;
    /**
     * Gets the aggregation type for the bar chart.
     * @returns {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"}
     */
    getAggregationType(): RESTStatisticType;
    /**
     * Sets the aggregation type for the chart.
     * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"} newAggregationType The new aggregation type. Must be one of the values allowed by `RESTStatisticType`.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setAggregationType(newAggregationType: RESTStatisticType): Promise<void>;
    /**
     * Gets the split-by field for the chart.
     * @returns {string}
     */
    getSplitByField(): string;
    /**
     * Sets the split-by field for the chart.
     * @param {string} newSplitByField The new split-by field.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setSplitByField(newSplitByField: string): Promise<void>;
    /**
     * Gets the numeric fields array for the chart.
     * @returns {string[]}
     */
    getNumericFields(): string[];
    /**
     * Sets the numeric field or numeric fields array for the chart.
     * @param {string | string[]} newNumericFields The new numeric field string or numeric fields array.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericFields(newNumericFields: string[] | string): Promise<void>;
    /**
     * Gets the data filter for the bar chart.
     * @returns {WebChartDataFilters | undefined}
     */
    getDataFilter(): WebChartDataFilters | undefined;
    /**
     * Sets the data filter for the bar chart.
     * @param {WebChartDataFilters | undefined} newDataFilter The new data filter.
     */
    setDataFilter(newDataFilter: WebChartDataFilters | undefined): Promise<void>;
    /**
     * Gets the list of the category values for the chart.
     * @returns {string[]}
     */
    getCustomSortValues(): Promise<string[]>;
    /**
     * Gets the sort order for the bar chart.
     * @returns {"xAxisAsc" | "xAxisDesc" | "yAxisAsc" | "yAxisDesc" | "customSort"}
     */
    getSortOrder(): SerialChartDataSortingKinds;
    /**
     * Sets the sort order for the bar chart.
     * @param {"xAxisAsc" | "xAxisDesc" | "yAxisAsc" | "yAxisDesc"}  newSortOrder The new sort order.
     * @param {string[]} orderByList The list of category's values to order by.
     */
    setSortOrder(newSortOrder: SerialChartDataSortingKinds, orderByList?: string[]): void;
    /**
     * Gets the list of custom sort values for custom sort
     * @returns {string[]}
     */
    getOrderByList(): string[];
    /**
     * Sets the list of custom sort values for custom sort
     * @param {string[]} newOrderByList The new list of custom sort values
     */
    setOrderByList(newOrderByList: string[]): void;
    /**
     * Updates the series based on the layer filter.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    updateSeriesFromLayerFilter(): Promise<void>;
    /**
     * Get the name of the series based on the series index.
     * If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {string | undefined}
     */
    getSeriesName(seriesIndex: number): string | undefined;
    /**
     * Set name of the series based on the series index.
     * @param {string} newName The new name for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesName(newName: string, seriesIndex: number): void;
    /**
     * Gets the color of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {Color | undefined}
     */
    getSeriesColor(seriesIndex: number): Color | undefined;
    /**
     * Set the color of the series based on the series index.
     * @param {Color | undefined} newColor The new color for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesColor(newColor: Color | undefined, seriesIndex: number): void;
    /**
     * Get the order of the series array by returning an array of series ids.
     * @returns {string[]}
     */
    getOrderOfSeries(): string[];
    /**
     * Set the order of the series array by providing an array of series ids.
     * @param {string[]} newOrder The new order of the series array.
     */
    setOrderOfSeries(newOrder: string[]): void;
    /**
     * Get how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or
     * when multiple attributes/fields corresponding to the same set of classes are to be visualized.
     *
     * Currently this property is only used for bar and line series.
     *
     * @default sideBySide
     *
     * @returns {WebChartStackedKinds | undefined}
     */
    getStackedType(): WebChartStackedKinds | undefined;
    /**
     * Set how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or
     * when multiple attributes/fields corresponding to the same set of classes are to be visualized.
     *
     * Currently this property is only used for bar and line series.
     *
     * @param {WebChartStackedKinds | undefined} newStackedType The new stacked type.
     *
     * @default sideBySide
     */
    setStackedType(newStackedType: WebChartStackedKinds | undefined): Promise<void>;
    /**
     * Moves a series from one index in the series array to another.
     * @param {number} fromIndex Index to move the series from.
     * @param {number} toIndex Index to move the series to.
     */
    moveSeries(fromIndex: number, toIndex: number): void;
    /**
     * Move the custom sort values in-place for the order by list in the config.
     *
     * NOTE: This method should be only used when the sort order is set to `SerialChartDataSortingKinds.customSort`.
     * @param {number} fromIndex The index to move the custom sort value from.
     * @param {number} toIndex The index to move the custom sort value to.
     */
    moveCustomSortValuesInOrderByList(fromIndex: number, toIndex: number): void;
    /**
     * reset the config to the default config
     */
    protected resetConfig(): Promise<void>;
}
