import type { WebChartDataFilters } from "@arcgis/charts-spec";
import { RESTStatisticType } from "@arcgis/charts-spec";
import type { ChartConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../../interfaces/common";
import { SerialChartDataSortingKinds } from "../../interfaces/common";
import type { SerialChartSeries } from "../../interfaces/chart-interfaces";
/**
 * Generate default series value
 * @param {number | undefined } props.seriesIndex - The series index.
 * @param {ChartConfig<SerialChartSeries>} props.config - The chart config.
 * @param {LayerInfo | undefined} props.layerInfo - The layer info.
 *
 * @returns {WebChartBarChartSeries | WebChartLineChartSeries}
 */
export declare function getDefaultSeriesValue(props: {
    seriesIndex?: number;
    config: ChartConfig<SerialChartSeries>;
    layerInfo?: LayerInfo | undefined;
}): Promise<SerialChartSeries>;
/**
 * Gets the proper chart title given the current config.
 * @param {ChartConfig<SerialChartSeries>} config - The chart config.
 * @param {LayerInfo} layerInfo - The layer info.
 * @returns {string}
 */
export declare function getChartTitle(config: ChartConfig<SerialChartSeries>, layerInfo: LayerInfo): Promise<string>;
/**
 * Gets the aggregation type.
 * @param {ChartConfig} config
 * @returns {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | undefined}
 */
export declare const getAggregationType: (config: ChartConfig) => RESTStatisticType;
/**
 * Set the aggregation type by updating the config accordingly.
 * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"} newAggregationType - The new aggregation type.
 * @param {ChartConfig<SerialChartSeries>} config - The chart config.
 * @param {LayerInfo} layerInfo - The layer info.
 */
export declare const setAggregationType: (newAggregationType: RESTStatisticType, config: ChartConfig<SerialChartSeries>, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets the split-by field.
 * @param {ChartConfig} config
 * @returns {string}
 */
export declare const getSplitByField: (config: ChartConfig) => string;
/**
 * Set the split-by field by updating the config accordingly.
 * @param {string} newSplitByField - The new split-by field.
 * @param {ChartConfig<SerialChartSeries>} config - The chart config.
 * @param {LayerInfo} layerInfo - The layer info.
 */
export declare const setSplitByField: (newSplitByField: string, config: ChartConfig<SerialChartSeries>, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets the numeric fields.
 * @param {ChartConfig<SerialChartSeries>} config
 */
export declare const getNumericFields: (config: ChartConfig<SerialChartSeries>) => string[];
/**
 * Sets the category field by updating the config accordingly.
 * @param {string[]} newNumericFields - The new numeric fields.
 * @param {ChartConfig<SerialChartSeries>} config - The chart config.
 * @param {LayerInfo} layerInfo - The layer info.
 */
export declare const setNumericFields: (newNumericFields: string[], config: ChartConfig<SerialChartSeries>, layerInfo: LayerInfo) => Promise<void>;
/**
 * Set the x-axis field by updating the config accordingly.
 * @param {string} newXAxisField - The new x-axis field.
 * @param {ChartConfig} config - The chart config.
 * @param {LayerInfo} layerInfo - The layer info.
 */
export declare const setXAxisField: (newXAxisField: string, config: ChartConfig<SerialChartSeries>, layerInfo: LayerInfo | undefined) => Promise<void>;
/**
 * Gets the sort order kind.
 */
export declare const getSortOrderKind: (config: ChartConfig) => SerialChartDataSortingKinds;
/**
 * Build a series array based on a list of numeric fields and aggregation type,
 * when the chart has no category field.
 * @param {string[]} props.numericFields - The numeric fields to include in the series.
 * @param {RESTStatisticType} props.aggregationType - The type of aggregation to use.
 * @param {ChartConfig<SerialChartSeries>} props.config - The chart configuration.
 * @param {LayerInfo} props.layerInfo - Information about the data layer.
 */
export declare function buildSeriesFromFields(props: {
    numericFields: string[];
    aggregationType: RESTStatisticType;
    config: ChartConfig<SerialChartSeries>;
    layerInfo: LayerInfo;
}): Promise<SerialChartSeries[]>;
/**
 * Build a series array based on a list of numeric fields and aggregation type.
 * @param {string[]} props.numericFields - The numeric fields to include in the series.
 * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"} props.aggregationType - The type of aggregation to use.
 * @param {ChartConfig<SerialChartSeries>} props.config - The chart configuration.
 * @param {LayerInfo} props.layerInfo - Information about the data layer.
 */
export declare function buildSeriesUsingNumericFields(props: {
    numericFields: string[];
    aggregationType: RESTStatisticType;
    config: ChartConfig<SerialChartSeries>;
    layerInfo: LayerInfo;
}): Promise<SerialChartSeries[]>;
/**
 * Build a series array based on a split-by field and aggregation type.
 * @param {string} props.splitByField - The split-by field.
 * @param {string[]} props.numericFields - The numeric fields to include in the series.
 * @param {"count" | "sum" | "min" | "max" | "avg" | "stddev" | "var" | "percentile_cont" | "percentile_disc" | "envelope-aggregate" | "centroid-aggregate" | "convex-hull-aggregate" | "no_aggregation"} props.aggregationType - The type of aggregation to use.
 * @param {ChartConfig<SerialChartSeries>} props.config - The chart configuration.
 */
export declare function buildSeriesUsingSplitByField(props: {
    splitByField: string;
    numericFields: string[];
    aggregationType: RESTStatisticType;
    config: ChartConfig<SerialChartSeries>;
    layerInfo: LayerInfo;
}): Promise<SerialChartSeries[]>;
/**
 * Builds a new series array based on the provided properties.
 * @param props.splitByField - The field to split the data by.
 * @param props.numericFields - The numeric fields to include in the series.
 * @param props.aggregationType - The type of aggregation to use.
 * @param props.config - The chart configuration.
 * @param props.layerInfo - Information about the data layer.
 */
export declare const buildNewSeries: (props: {
    splitByField: string;
    numericFields: string[];
    aggregationType: RESTStatisticType;
    config: ChartConfig<SerialChartSeries>;
    layerInfo: LayerInfo;
}) => Promise<void>;
/**
 * Get the default series name.
 * @param {ChartConfig} config - The chart config.
 * @param {number} seriesIndex - The series index.
 * @param {LayerInfo} layerInfo - The layer info.
 */
export declare const getDefaultSeriesName: (config: ChartConfig<SerialChartSeries>, seriesIndex: number, layerInfo: LayerInfo) => Promise<string>;
/**
 * Set the order by list in the config. The order by list is only used when the sort order kind is custom sort.
 * @param  {string[]} values - The order by list.
 * @param  {ChartConfig<WebChartBarChartSeries} config - The chart config.
 */
export declare const setOrderByList: (values: string[], config: ChartConfig) => void;
/**
 * Get the data filter from the config.
 * @param  {ChartConfig} config - The chart config.
 * @returns WebChartDataFilters | undefined - The data filter.
 */
export declare const getDataFilter: (config: ChartConfig) => WebChartDataFilters | undefined;
/**
 * Set the data filter in the config.
 * @param  {WebChartDataFilters | undefined} dataFilter - The data filter.
 * @param  {ChartConfig} config - The chart config.
 */
export declare const setDataFilter: (dataFilter: WebChartDataFilters | undefined, config: ChartConfig) => void;
/**
 * Get the custom sort values from the config.
 * @param  {ChartConfig<WebChartBarChartSeries} config - The chart config.
 * @param  {LayerInfo} layerInfo - The layer info.
 *
 * @returns string[] - The custom sort values.
 */
export declare const getCustomSortValues: (config: ChartConfig, layerInfo: LayerInfo | undefined) => Promise<string[]>;
