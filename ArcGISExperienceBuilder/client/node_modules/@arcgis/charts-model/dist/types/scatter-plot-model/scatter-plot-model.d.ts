import type { ISimpleLineSymbol, ISimpleMarkerSymbol, WebChartScatterPlotSeries, WebChart, SizePolicy, ScatterPlotOverlays } from "@arcgis/charts-spec";
import type { ChartConfig, XYChartTypes } from "@arcgis/charts-shared-utils";
import type { ModelParams } from "../interfaces/chart-interfaces";
import type { LayerInfo } from "../interfaces/common";
import { ChartModel } from "../chart-model/chart-model";
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithXGuides, ModelWithYGuides, ModelWithLegend, ModelWithXYAxes } from "../mixins";
export declare class ScatterPlotModel extends ChartModel {
    /**
     * Current configuration used for the scatterplot.
     */
    protected _config: ChartConfig<WebChartScatterPlotSeries, WebChart>;
    protected _chartType: XYChartTypes;
    protected layerInfo: LayerInfo;
    setup(params: ModelParams<ChartConfig<WebChartScatterPlotSeries>>): Promise<void>;
    /**
     * Gets the x-axis field.
     * @returns {string}
     */
    getXAxisField(): string;
    /**
     * Sets the x-axis field.
     * @param {string} newXAxisField
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXAxisField(newXAxisField: string): Promise<void>;
    /**
     * Gets the y-axis field.
     * @returns {string}
     */
    getYAxisField(): string;
    /**
     * Sets the y-axis field.
     * @param {string} newYAxisField
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYAxisField(newYAxisField: string): Promise<void>;
    /**
     * Gets whether the linear trend line is shown.
     * @returns {boolean}
     */
    getShowLinearTrend(): boolean;
    /**
     * Sets whether the linear trend line is shown.
     * @param {boolean} newShowLinearTrendState
     */
    setShowLinearTrend(newShowLinearTrendState: boolean): void;
    /**
     * Gets the line symbol for the linear trend line.
     * @returns {ISimpleLineSymbol}
     */
    getLinearTrendSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol for the linear trend line.
     * @param {ISimpleLineSymbol} newLinearTrendSymbol
     */
    setLinearTrendSymbol(newLinearTrendSymbol: ISimpleLineSymbol): void;
    /**
     * Gets the marker symbol used for the scatter plot points when using a fixed symbol (i.e. no size policy is set).
     * @returns {ISimpleMarkerSymbol}
     */
    getFixedMarkerSymbol(): ISimpleMarkerSymbol;
    /**
     * Sets the marker symbol used for the scatter plot points when using a fixed symbol (i.e. no size policy is set).
     * @param {ISimpleMarkerSymbol} newFixedMarkerSymbol
     */
    setFixedMarkerSymbol(newFixedMarkerSymbol: ISimpleMarkerSymbol): void;
    /**
     * Gets the size policy for the scatter plot points. This is used to scale the size of the marker symbol based on a given field.
     * @returns {SizePolicy | undefined}
     */
    getSizePolicy(): SizePolicy | undefined;
    /**
     * Sets the size policy for the scatter plot points. This is used to scale the size of the marker symbol based on a given field.
     * @param {SizePolicy | undefined} newSizePolicy
     */
    setSizePolicy(newSizePolicy: SizePolicy | undefined): void;
    /**
     * Get the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
     */
    getSeriesOverlays(): ScatterPlotOverlays | undefined;
    /**
     * Set the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
     * @param {ScatterPlotOverlays} newSeriesOverlays - the new overlays
     */
    setSeriesOverlays(newSeriesOverlays: ScatterPlotOverlays): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface ScatterPlotModel extends ModelWithXYAxes, ModelWithLegend, ModelWithColorMatch, ModelWithDataLabels, ModelWithXGuides, ModelWithYGuides {
}
