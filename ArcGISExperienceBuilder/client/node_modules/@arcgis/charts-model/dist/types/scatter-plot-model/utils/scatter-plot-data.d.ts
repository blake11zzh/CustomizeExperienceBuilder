import type { SizePolicy, ISimpleMarkerSymbol, ISimpleLineSymbol, ScatterPlotOverlays } from "@arcgis/charts-spec";
import type { ScatterPlotConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../../interfaces/common";
/**
 * get the x-axis field from the config
 * @param config - the scatter plot config
 */
export declare const getXAxisField: (config: ScatterPlotConfig) => string;
/**
 * get the y-axis field from the config
 * @param config - the scatter plot config
 */
export declare const getYAxisField: (config: ScatterPlotConfig) => string;
/**
 * set the x-axis field name in the config
 * @param newXAxisField - the x-axis field name
 * @param config - the scatter plot config
 * @param layerInfo - the layer info
 */
export declare const setXAxisField: (newXAxisField: string, config: ScatterPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * set the y-axis field in the config
 * @param newYAxisField - the y-axis field name
 * @param config - the scatter plot config
 * @param layerInfo - the layer info
 */
export declare const setYAxisField: (newYAxisField: string, config: ScatterPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * get fixed marker symbol from the config
 * @param config - the scatter plot config
 */
export declare const getFixedMarkerSymbol: (config: ScatterPlotConfig) => ISimpleMarkerSymbol;
/**
 * set the fixed marker symbol in the config
 * @param newFixedMarkerSymbol - the fixed marker symbol
 * @param config - the scatter plot config
 */
export declare const setFixedMarkerSymbol: (newFixedMarkerSymbol: ISimpleMarkerSymbol, config: ScatterPlotConfig) => void;
/**
 * get the show linear trend option from the config
 * @param config - the scatter plot config
 */
export declare const getShowLinearTrend: (config: ScatterPlotConfig) => boolean;
/**
 * get linear trend symbol from the config
 * @param config - the scatter plot config
 */
export declare const getLinearTrendSymbol: (config: ScatterPlotConfig) => ISimpleLineSymbol;
/**
 * set the linear trend option in the config
 * @param newLinearTrendSymbol - the linear trend symbol
 * @param config - the scatter plot config
 */
export declare const setLinearTrendSymbol: (newLinearTrendSymbol: ISimpleLineSymbol, config: ScatterPlotConfig) => void;
/**
 * Set the visibility of the linear trend line in the scatter plot config
 * @param newVisibility - the new visibility of the linear trend line
 * @param config - the scatter plot config
 */
export declare const setLinearTrendLineVisibility: (newVisibility: boolean, config: ScatterPlotConfig) => void;
/**
 * set show linear trend in the config
 * @param newShowLinearTrend - determines whether to show linear trend line or not
 * @param config - the scatter plot config
 */
export declare const setShowLinearTrend: (newShowLinearTrend: boolean, config: ScatterPlotConfig) => void;
/**
 * get the size policy from the config
 * @param config - the scatter plot config
 */
export declare const getSizePolicy: (config: ScatterPlotConfig) => SizePolicy | undefined;
/**
 * set the size policy in the config
 * @param newSizePolicy - the new size policy
 * @param config - the scatter plot config
 */
export declare const setSizePolicy: (newSizePolicy: SizePolicy | undefined, config: ScatterPlotConfig) => void;
/**
 * Get the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
 * @param {ScatterPlotConfig} config - the scatter plot config
 */
export declare const getSeriesOverlays: (config: ScatterPlotConfig) => ScatterPlotOverlays | undefined;
/**
 * Set the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
 * @param {ScatterPlotOverlays} newOverlays - the new overlays
 * @param {ScatterPlotConfig} config - the scatter plot config
 */
export declare const setSeriesOverlays: (newOverlays: ScatterPlotOverlays, config: ScatterPlotConfig) => void;
