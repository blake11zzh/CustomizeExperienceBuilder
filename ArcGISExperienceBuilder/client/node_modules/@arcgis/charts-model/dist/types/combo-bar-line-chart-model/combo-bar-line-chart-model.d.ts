import type { WebChart, WebChartBarChartSeries, WebChartLineChartSeries, RESTSimpleLineSymbolStyle, Color, RESTSimpleMarkerSymbolStyle } from "@arcgis/charts-spec";
import type { ChartConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../interfaces/common";
import type { ModelParams } from "../interfaces/chart-interfaces";
import { SerialChartModel } from "../serial-chart-model/serial-chart-model";
import { ModelWithXYAxes, ModelWithLegend, ModelWithColorMatch, ModelWithRotation, ModelWithDataLabels, ModelWithYGuides, ModelWithXGuides, ModelWithTemporalBinning } from "../mixins";
export declare class ComboBarLineChartModel extends SerialChartModel {
    /**
     * Current configuration used for the bar chart.
     */
    protected _config: ChartConfig<WebChartBarChartSeries | WebChartLineChartSeries, WebChart>;
    /**
     * Default series for the line chart. Used in resetting the series styling.
     * @category Protected
     */
    protected defaultSeries: WebChartLineChartSeries | undefined;
    protected _chartType: "comboLineAndBarSeries";
    protected layerInfo: LayerInfo;
    getConfig(): typeof this._config;
    setup(params: ModelParams<ChartConfig<WebChartBarChartSeries | WebChartLineChartSeries>>): Promise<void>;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
    /**
     * Initializes the default series for the combo bar-line chart. Used in resetting the series styling.
     * @category Private
     */
    protected initDefaultSeries(): Promise<void>;
    /**
     * Gets the line style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {RESTSimpleLineSymbolStyle | undefined}
     */
    getSeriesLineStyle(seriesIndex: number): RESTSimpleLineSymbolStyle | undefined;
    /**
     * Sets the line style of the series based on the series index.
     * @param {RESTSimpleLineSymbolStyle | undefined} newStyle The new style for the series.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setSeriesLineStyle(newStyle: RESTSimpleLineSymbolStyle | undefined, seriesIndex: number): void;
    /**
     * Gets the line width of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {number | undefined}
     */
    getSeriesLineWidth(seriesIndex: number): number | undefined;
    /**
     * Sets the line width of the series based on the series index.
     * @param {number | undefined} newWidth The new width for the series.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setSeriesLineWidth(newWidth: number | undefined, seriesIndex: number): void;
    /**
     * Gets the marker color of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {Color | undefined}
     */
    getSeriesMarkerColor(seriesIndex: number): Color | undefined;
    /**
     * Sets the marker color of the series based on the series index.
     * @param {Color | undefined} newColor The new color for the series.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setSeriesMarkerColor(newColor: Color | undefined, seriesIndex: number): void;
    /**
     * Gets the marker style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {RESTSimpleMarkerSymbolStyle | undefined}
     */
    getSeriesMarkerStyle(seriesIndex: number): RESTSimpleMarkerSymbolStyle | undefined;
    /**
     * Sets the marker style of the series based on the series index.
     * @param {RESTSimpleMarkerSymbolStyle | undefined} newStyle The new style for the series.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setSeriesMarkerStyle(newStyle: RESTSimpleMarkerSymbolStyle | undefined, seriesIndex: number): void;
    /**
     * Gets the marker size of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {number | undefined}
     */
    getSeriesMarkerSize(seriesIndex: number): number | undefined;
    /**
     * Sets the marker size of the series based on the series index.
     * @param {number | undefined} newSize The new size for the series.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setSeriesMarkerSize(newSize: number | undefined, seriesIndex: number): void;
    /**
     * Specify whether line segments of the series should be smoothed.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default false
     * @returns {boolean}
     */
    isLineSmoothed(seriesIndex: number): boolean;
    /**
     * Specify whether line segments of the series should be smoothed.
     * @param {boolean} props.smoothed - `true` if line segment of the series should be smoothed, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     * @default false
     */
    setLineSmoothed(smoothed: boolean, seriesIndex: number): void;
    /**
     * Specify whether the line series should show area.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default false
     * @returns {boolean}
     */
    isAreaVisible(seriesIndex: number): boolean;
    /**
     * Specify whether the line series should show area.
     * @param {boolean} props.visible - `true` if the line series should show area, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setAreaVisible(visible: boolean, seriesIndex: number): void;
    /**
     * Indicate whether to show or hide the markers/bullets of the line series.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default true
     * @returns {boolean}
     */
    isMarkerVisible(seriesIndex: number): boolean;
    /**
     * Indicate whether to show or hide the markers/bullets of the line series.
     * @param {boolean} props.visible - `true` if the markers/bullets of the line series should be shown, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setMarkerVisible(visible: boolean, seriesIndex: number): void;
    /**
     * Specify the color of the filled area for line chart.
     * @param {number} seriesIndex - The index of the series.
     *
     * NOTE: areaColor will be applied only if `showArea` is true, and is defaulted to the line color if not provided.
     *
     * @returns {Color | undefined}
     */
    getAreaColor(seriesIndex: number): Color | undefined;
    /**
     * Specify the color of the filled area for line chart.
     * @param {Color | undefined} props.color - The color of the filled area for line chart.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setAreaColor(color: Color | undefined, seriesIndex: number): void;
    /**
     * Specify how negative values are treated in stacked series.
     * @param {number} seriesIndex - The index of the series.
     *
     * NOTE: If true, negative values will be stacked on the base line.
     * If false, negative values will be stacked in relation to their previous values in the stack.
     *
     * @default true
     * @returns {boolean}
     */
    isNegativeValuesStackedToBaseline(seriesIndex: number): boolean;
    /**
     * Specify how negative values are treated in stacked series.
     * @param {boolean} props.stackedToBaseline - `true` if negative values should be stacked on the base line, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * NOTE: If true, negative values will be stacked on the base line.
     * If false, negative values will be stacked in relation to their previous values in the stack.
     *
     * **NOTE:** This method will only work if the series is a line chart series.
     */
    setNegativeValuesStackedToBaseline(stackNegativeValuesToBaseline: boolean, seriesIndex: number): void;
    /**
     * Gets whether to hide oversized stacked labels of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {boolean | undefined}
     */
    getSeriesHideOversizedStackedLabels(seriesIndex: number): boolean | undefined;
    /**
     * Sets whether to hide oversized stacked labels of the series based on the series index.
     * @param {boolean} newValue The new value for hiding oversized stacked labels.
     * @param {number} seriesIndex The index of the series.
     *
     * **NOTE:** This method will only work if the series is a bar chart series.
     */
    setSeriesHideOversizedStackedLabels(newValue: boolean | undefined, seriesIndex: number): void;
}
export interface ComboBarLineChartModel extends ModelWithXYAxes, ModelWithLegend, ModelWithColorMatch, ModelWithRotation, ModelWithDataLabels, ModelWithXGuides, ModelWithYGuides, ModelWithTemporalBinning {
}
