import type { WebMapWebChart } from "@arcgis/charts-spec";
import type { ChartModel } from "../chart-model/chart-model";
import type { ModelWithXYAxes, ModelWithRotation, ModelWithXGuides, ModelWithYGuides, ModelWithLegend, ModelWithBasicXAxis, ModelWithGuides, ModelWithDataLabels, ModelWithTemporalBinning } from "../mixins";
import type { BarChartModel } from "../bar-chart-model/bar-chart-model";
import type { PieChartModel } from "../pie-chart-model/pie-chart-model";
import type { LineChartModel } from "../line-chart-model/line-chart-model";
import type { BoxPlotModel } from "../box-plot-model/box-plot-model";
import type { ChartTypes } from "@arcgis/charts-shared-utils";
import type { ModelOfType } from "../interfaces/common";
/**
 * Determines if the provided model or config is a `ChartModel`.
 * @param model The model to check.
 */
export declare function isChartModel(model: ChartModel | WebMapWebChart | undefined): model is ChartModel;
/**
 * Determines if the provided `model` is of type `BarChartModel`.
 * @param model The model to check.
 */
export declare function isBarChartModel(model: ChartModel | undefined): model is BarChartModel;
/**
 * Determines if the provided `model` is of type `LineChartModel`.
 * @param model The model to check.
 */
export declare function isLineChartModel(model: ChartModel | undefined): model is LineChartModel;
/**
 * Determines if the provided `model` is of type `PieChartModel`.
 * @param model The model to check.
 */
export declare function isPieChartModel(model: ChartModel | undefined): model is PieChartModel;
/**
 * Determines if the provided `model` is of type `BoxPlotModel`.
 * @param model The model to check.
 */
export declare function isBoxPlotModel(model: ChartModel | undefined): model is BoxPlotModel;
/**
 * Determines if the provided `model` is of type `ScatterPlotModel`.
 * @param model The model to check.
 *
 */
export declare function isScatterPlotModel(model: ChartModel | undefined): boolean;
/**
 * Type guard for ModelWithBasicXAxis
 * @param model
 */
export declare function isModelWithBasicXAxis(model: ChartModel | undefined): model is ModelWithBasicXAxis;
/**
 * Type guard for ModelWithXYAxes
 * @param model
 */
export declare function isModelWithXYAxes(model: ChartModel | undefined): model is ModelWithXYAxes;
/**
 * Type guard for ModelWithRotation
 * @param model
 */
export declare function isModelWithRotation(model: ChartModel | undefined): model is ModelWithRotation;
/**
 * Determines if the provided `model` is of type `ModelWithDataLabels`.
 * @param model The model to check.
 */
export declare function isModelWithDataLabels(model: ChartModel | undefined): model is ModelWithDataLabels;
/**
 * Determines if the provided `model` is of type `ModelWithGuides`.
 * @param model The model to check.
 */
export declare function isModelWithGuides(model: ChartModel | undefined): model is ModelWithGuides;
/**
 * Determines if the provided `model` is of type `ModelWithXGuides`.
 * @param model The model to check.
 */
export declare function isModelWithXGuides(model: ChartModel | undefined): model is ModelWithXGuides;
/**
 * Determines if the provided `model` is of type `ModelWithYGuides`.
 * @param model The model to check.
 */
export declare function isModelWithYGuides(model: ChartModel | undefined): model is ModelWithYGuides;
/**
 * Determines if the provided `model` is of type `ModelWithLegend`.
 * @param model The model to check.
 */
export declare function isModelWithLegend(model: ChartModel | undefined): model is ModelWithLegend;
/**
 * Determines if the provided `model` is of type `ModelWithTemporalBinning`.
 * @param model The model to check.
 */
export declare function isModelWithTemporalBinning(model: ChartModel | undefined): model is ModelWithTemporalBinning;
/**
 * Determines if the provided model's type matches the `type` argument.
 * @param model The model to check.
 */
export declare function isModelOfType<T extends ChartTypes | undefined>(model: ChartModel | undefined, type: T): model is ModelOfType<T>;
