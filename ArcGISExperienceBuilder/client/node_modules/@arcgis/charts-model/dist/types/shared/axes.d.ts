import type { CategoryFormatOptions, DateTimeFormatOptions, NumberFormatOptions, WebChartAxis, WebMapWebChart, WebChart } from "@arcgis/charts-spec";
import { RESTStatisticType } from "@arcgis/charts-spec";
import type { ChartConfig } from "@arcgis/charts-shared-utils";
import type { LayerInfo } from "../interfaces/common";
/**
 * Updates the axis config with the provided title text. Provides a default title object if one does not exist.
 * @param axisConfig - the axis configuration
 * @param title - the title text
 * @param axisIndex - the index of the axis
 */
export declare function updateAxisTitle(config: WebChart | WebMapWebChart, axisIndex: number, title: string): void;
/**
 * Gets the proper Y-axis title label based on the chart configuration.
 */
export declare function getYAxisTitleLabel(props: {
    config: WebChart | WebMapWebChart | undefined;
    layerInfo: LayerInfo;
    numericFields: string[];
    aggregationType: RESTStatisticType;
}): Promise<string>;
/**
 * Get the axes of the chart
 * @param config - the config object
 */
export declare const getAxes: (config: WebChart | WebMapWebChart) => WebChartAxis[] | undefined;
export declare const getAxis: (config: WebChart | WebMapWebChart, axisIndex: number) => Promise<WebChartAxis>;
export declare const setAxis: (config: WebChart | WebMapWebChart, axis: WebChartAxis, axisIndex: number) => void;
/**
 * Get the maximum or minimum bound of the axis
 * @param config - the config object
 * @param axisIndex - the index of the axis
 * @param isMax - whether it is the max bound or not
 */
export declare const getAxisBound: (config: WebChart | WebMapWebChart, axisIndex: number, isMax: boolean) => number;
/**
 * Set the axis bound
 * @param config - the config object
 * @param value - the value to set
 * @param axisIndex - the index of the axis
 * @param isMax - whether it is the max bound
 */
export declare const setAxisBound: (config: WebChart | WebMapWebChart, value: number | null, axisIndex: number, isMax: boolean) => Promise<void>;
/**
 * Get the maximum bound for the y-axis
 * @param config - the config object
 */
export declare const getMaxYBound: (config: ChartConfig) => number;
/**
 * Set the maximum Y bound
 * @param config - the config object
 * @param newMaxYBound - the value to set
 */
export declare const setMaxYBound: (config: ChartConfig, newMaxYBound: number | null) => Promise<void>;
/**
 * Get the minimum bound for the y-axis
 * @param config - the config object
 */
export declare const getMinYBound: (config: ChartConfig) => number;
/**
 * Set the minimum Y bound
 * @param config - the config object
 * @param newMinYBound - the value to set
 */
export declare const setMinYBound: (config: ChartConfig, newMinYBound: number | null) => Promise<void>;
/**
 * Get the maximum bound for the x-axis
 * @param config - the config object
 */
export declare const getMaxXBound: (config: ChartConfig) => number;
/**
 * Set the maximum X bound
 * @param config - the config object
 * @param newMaxXBound - the value to set
 */
export declare const setMaxXBound: (config: ChartConfig, newMaxXBound: number | null) => Promise<void>;
/**
 * Get the minimum bound for the x-axis
 * @param config - the config object
 */
export declare const getMinXBound: (config: ChartConfig) => number;
/**
 * Set the minimum X bound
 * @param config - the config object
 * @param newMinXBound - the value to set
 */
export declare const setMinXBound: (config: ChartConfig, newMinXBound: number | null) => Promise<void>;
/**
 * Get the valueFormat of the x-axis
 * @param config
 * @returns
 */
export declare const getXAxisValueFormat: (config: ChartConfig) => CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined;
export declare const setXAxisValueFormat: (config: ChartConfig, valueFormat?: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions) => Promise<void>;
/**
 * Get the valueFormat of the y-axis
 * @param config - the config object
 */
export declare const getYAxisValueFormat: (config: ChartConfig) => NumberFormatOptions | undefined;
export declare const setYAxisValueFormat: (config: ChartConfig, valueFormat?: NumberFormatOptions) => Promise<void>;
/**
 * Set the integer only values in the axis
 * @param config - the config object
 * @param axisIndex - the index of the axis
 * @param integerOnlyValues - the value to set
 */
export declare const setIntegerOnlyValuesInAxis: (config: WebChart | WebMapWebChart, axisIndex: number, integerOnlyValues: boolean) => void;
