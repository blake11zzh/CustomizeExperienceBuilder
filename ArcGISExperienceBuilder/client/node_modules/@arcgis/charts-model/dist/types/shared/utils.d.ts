import type { WebChart, WebChartAxis, WebChartGaugeAxis, WebMapWebChart, IField, SupportedLayer } from "@arcgis/charts-spec";
import type { LayerInfo, SplitByFieldInfos } from "../interfaces/common";
/**
 * Returns the necessary information for building series based on a split-by field
 * @param props.config The chart config
 * @param props.layer The layer instance
 * @param props.layerFieldsInfo Fields Information of the layer
 * @param props.splitByField Split-By field
 * @param props.aggregationFields Numerical fields
 * @param props.aggregationType Aggregation type
 * @param props.fetchNullValues Whether to fetch null values
 */
export declare function getSplitByFieldInfos(props: {
    config?: WebChart | WebMapWebChart;
    layer?: SupportedLayer;
    layerFieldsInfo: IField[];
    xAxisField?: string;
    splitByField: string;
    aggregationFields: string[];
    aggregationType?: string;
    fetchNullValues?: boolean;
}): Promise<SplitByFieldInfos>;
export declare function isWebGaugeChartAxis(params: WebChartAxis[] | [WebChartGaugeAxis] | undefined): params is [WebChartGaugeAxis];
export declare function isValidSplitByField(layerFieldsInfo: IField[], splitByField: string): boolean;
export declare function isValidNumericFields(layerFieldsInfo: IField[], numericFields: string[]): boolean;
/**
 * This function applies mixins to a class. [source](https://www.typescriptlang.org/docs/handbook/mixins.html)
 * @param derivedCtor
 * @param constructors
 */
export declare function applyMixins(derivedCtor: any, constructors: any[]): void;
/**
 * Get the list of category's values or labels from the layer
 * @param {LayerInfo} props.layerInfo The layer information
 * @param {WebChart | WebMapWebChart} props.config The chart configuration
 * @param {string} props.category The category
 *
 * @returns {Promise<string[]>}
 */
export declare function getCategoryLabels(props: {
    layerInfo: LayerInfo;
    config: WebChart | WebMapWebChart;
    category: string;
}): Promise<string[]>;
/**
 * Sorts arrayA based on the indexes of the elements in arrayB
 * @param {(number | string)[]} arrayA - The array to be sorted
 * @param {(number | string)[]} arrayB - The array to be used for sorting
 */
export declare function sortArrayAUsingArrayB<T extends number | string>(arrayA: T[], arrayB: T[]): T[];
