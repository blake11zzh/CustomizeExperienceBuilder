import type { ChartConfig, XYChartTypes } from "@arcgis/charts-shared-utils";
import type { WebChart, WebChartDataTransformations, ISimpleFillSymbol, ISimpleLineSymbol, WebChartHistogramSeries, HistogramOverlays } from "@arcgis/charts-spec";
import type { LayerInfo } from "../interfaces/common";
import type { ModelParams } from "../interfaces/chart-interfaces";
import { ChartModel } from "../chart-model/chart-model";
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithYGuides, ModelWithLegend, ModelWithXYAxes } from "../mixins";
export declare class HistogramModel extends ChartModel {
    /**
     * Current configuration used for the histogram.
     */
    protected _config: ChartConfig<WebChartHistogramSeries, WebChart>;
    protected _chartType: XYChartTypes;
    protected layerInfo: LayerInfo;
    setup(params: ModelParams<ChartConfig<WebChartHistogramSeries>>): Promise<void>;
    /**
     * Gets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
     * @returns {string}
     */
    getNumericField(): string;
    /**
     * Sets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
     * @param {string} newNumericField
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericField(newNumericField: string): Promise<void>;
    /**
     * Gets the number of bins used to create the histogram.
     * @returns {number}
     */
    getBinCount(): number;
    /**
     * Sets the number of bins used to create the histogram.
     * @param {number} newBinCount
     */
    setBinCount(newBinCount: number): void;
    /**
     * Gets the fill color used for the bins in the histogram.
     * @returns {ISimpleFillSymbol}
     */
    getBinColor(): ISimpleFillSymbol;
    /**
     * Sets the fill color used for the bins in the histogram.
     * @param {ISimpleFillSymbol} newBinColor
     */
    setBinColor(newBinColor: ISimpleFillSymbol): void;
    /**
     * Gets the data transformation type used in the histogram.
     * @returns {WebChartDataTransformations}
     */
    getDataTransformationType(): WebChartDataTransformations;
    /**
     * Sets the data transformation type used in the histogram.
     * @param {WebChartDataTransformations} newDataTransformationType
     */
    setDataTransformationType(newDataTransformationType: WebChartDataTransformations): void;
    /**
     * Gets the line color used for the mean overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getMeanColor(): ISimpleLineSymbol;
    /**
     * Sets the line color used for the mean overlay in the histogram.
     * @param {ISimpleLineSymbol} newMeanColor
     */
    setMeanColor(newMeanColor: ISimpleLineSymbol): void;
    /**
     * Gets the line color used for the median overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getMedianColor(): ISimpleLineSymbol;
    /**
     * Sets the line color used for the median overlay in the histogram.
     * @param {ISimpleLineSymbol} newMedianColor
     */
    setMedianColor(newMedianColor: ISimpleLineSymbol): void;
    /**
     * Gets the line color used for the normal distribution overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getNormalDistColor(): ISimpleLineSymbol;
    /**
     * Sets the line color used for the normal distribution overlay in the histogram.
     * @param {ISimpleLineSymbol} newNormalDistColor
     */
    setNormalDistColor(newNormalDistColor: ISimpleLineSymbol): void;
    /**
     * Gets the line color used for the standard deviation overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getStandardDevColor(): ISimpleLineSymbol;
    /**
     * Sets the line color used for the standard deviation overlay in the histogram.
     * @param {ISimpleLineSymbol} newStandardDevColor
     */
    setStandardDevColor(newStandardDevColor: ISimpleLineSymbol): void;
    /**
     * Gets whether the normal distribution overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowNormalDistOverlay(): boolean;
    /**
     * Sets whether the normal distribution overlay is shown in the histogram.
     * @param {boolean} newShowNormalDistOverlay
     */
    setShowNormalDistOverlay(newShowNormalDistOverlay: boolean): void;
    /**
     * Gets whether the mean overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowMeanOverlay(): boolean;
    /**
     * Sets whether the mean overlay is shown in the histogram.
     * @param {boolean} newShowMeanOverlay
     */
    setShowMeanOverlay(newShowMeanOverlay: boolean): void;
    /**
     * Gets whether the median overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowMedianOverlay(): boolean;
    /**
     * Sets whether the median overlay is shown in the histogram.
     * @param {boolean} newShowMedianOverlay
     */
    setShowMedianOverlay(newShowMedianOverlay: boolean): void;
    /**
     * Gets whether the standard deviation overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowStandardDevOverlay(): boolean;
    /**
     * Sets whether the standard deviation overlay is shown in the histogram.
     * @param {boolean} newShowStandardDevOverlay
     */
    setShowStandardDevOverlay(newShowStandardDevOverlay: boolean): void;
    /**
     * Get the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
     */
    getSeriesOverlay(): HistogramOverlays | undefined;
    /**
     * Set the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
     * @param newOverlays - the new overlays
     */
    setSeriesOverlays(newSeriesOverlay: HistogramOverlays): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface HistogramModel extends ModelWithXYAxes, ModelWithLegend, ModelWithColorMatch, ModelWithDataLabels, ModelWithYGuides {
}
