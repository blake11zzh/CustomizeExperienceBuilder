import { CompletionItem } from 'vscode-languageserver-types';

/**
 * Supported function bundles
 */
type SqlBundleType = "core";

/**
 * Union of bundle types that can be used in any sdk schema
 */
type BundleType = ArcadeBundleType | SqlBundleType;

/**
 * Supported function bundles
 */
type ArcadeBundleType = "core" | "data-access" | "database" | "geometry" | "knowledge-graph" | "portal-access" | "track";

/**
 * Describes a profile
 */
interface BaseSdkPredefinedProfile<ProfileId extends string, Bundle extends string> {
    /**
     * Profile name for UI
     */
    name: string;
    /**
     * Profile id for docs
     */
    id: ProfileId;
    /**
     * Function bundles enabled for this profile
     */
    bundles: Bundle[];
    /**
     * Variable describing name, type, and providing description
     */
    variables: SdkVariable[];
}
/**
 * Supported profile variable types
 */
type SdkVariableType = "array" | "boolean" | "date" | "dateOnly" | "dictionary" | "feature" | "featureSet" | "featureSetCollection" | "geometry" | "knowledgeGraph" | "number" | "text" | "time" | "voxel";
/**
 * Describes variables
 */
interface SdkVariableBase {
    /**
     * Name of the variable.
     */
    name: string;
    /**
     * Type of the variable.
     */
    type: SdkVariableType;
    /**
     * Description of the variable.
     */
    description?: string;
}
/**
 * A variable that represents a simple type (boolean, number, feature, etc.)
 */
interface SdkValueVariable extends SdkVariableBase {
    type: Exclude<SdkVariableType, "dictionary">;
}
/**
 * A dictionary variable
 */
interface SdkDictionaryVariable extends SdkVariableBase {
    type: "dictionary";
    properties: SdkVariable[];
}
/**
 * Profile variable
 */
type SdkVariable = SdkDictionaryVariable | SdkValueVariable;

/**
 * The list of supported profiles
 */
type ArcadeProfileId = "aggregate-field" | "alias" | "attribute-rule-calculation" | "attribute-rule-constraint" | "attribute-rule-validation" | "dashboard-data" | "dashboard-indicator-formatting" | "dashboard-list-formatting" | "dashboard-table-formatting" | "data-pipelines" | "dictionary-renderer" | "feature-display-title" | "feature-z" | "field-calculation" | "field-mapping" | "form-calculation" | "form-constraint" | "geoanalytics" | "geotrigger-notification" | "labeling" | "layout" | "location-update-constraint" | "measure-visualization" | "minimalist" | "model-builder" | "popup-element-feature-reduction" | "popup-element-voxel" | "popup-element" | "popup-feature-reduction" | "popup-voxel" | "popup" | "quick-capture" | "tasks" | "velocity" | "visualization";
/**
 * The predefined profiles for the Arcade language
 */
type ArcadeSdkPredefinedProfile = BaseSdkPredefinedProfile<ArcadeProfileId, ArcadeBundleType>;

/**
 * The list of supported profiles
 */
type SqlProfileId = "field-calculation";
/**
 * The predefined profiles for the SQL language
 */
type SqlSdkPredefinedProfile = BaseSdkPredefinedProfile<SqlProfileId, SqlBundleType>;

type SdkPredefinedProfile = ArcadeSdkPredefinedProfile | SqlSdkPredefinedProfile;
/**
 * A union of all language profile ids
 */
type ProfileId = ArcadeProfileId | SqlProfileId;

/**
 * Represents an api category and its items
 */
interface SdkCategory {
    /**
     * The unique ID for the category
     */
    id: string;
    /**
     * The title for the category
     */
    title: string;
    /**
     * The collection of api items for the category
     */
    items: SdkItem[];
}
interface SdkItemBase {
    /**
     * The name of the function or constant.
     */
    name: string;
    /**
     * The version string when the api item was introduced. If undefined then it was from the origin.
     */
    sinceVersion?: string;
    /**
     * The api bundle this item belongs to.
     */
    bundle: BundleType;
    /**
     * Markdown description of the item.
     */
    description: string;
    /**
     * Markdown containing examples.
     */
    examples: string;
    /**
     * Link for additional information about the item.
     */
    link: string;
    /**
     * Completion item directly leveraged by the editor.
     */
    completion: CompletionItem;
    /**
     * Indicates if the documentation for this item should be disabled.
     */
    disableDocumentation?: boolean;
}
/**
 * Represents a constant in the arcade api.
 */
interface SdkConstant extends SdkItemBase {
    type: "constant";
}
/**
 * Represents a function in the arcade api
 */
interface SdkFunction extends SdkItemBase {
    type: "function";
    /**
     * Information leveraged by the editor to validate function call.
     * Indicates the minimum number of expected parameters and the maximum number of parameters expected.
     */
    parametersInfo: {
        min: number;
        max: number;
    };
}
/**
 * Represents an item in the arcade api.
 */
type SdkItem = SdkConstant | SdkFunction | SdkFunction[];

/**
 * Represent items stored in the library
 */
type ApiItem = SdkConstant | SdkFunction;
/**
 * Represent a category of api items in the api library
 */
interface ApiCategory extends SdkCategory {
    items: ApiItem[];
}

/**
 * The editor can be extended with custom snippets
 */
interface ApiSnippet {
    /**
     * The label for the snippet. The editor will use it to offer the snippet based on the text typed in the editor.
     * It's recommended to keep it short and as close as possible to what the user may be looking for.
     * For example: 'polyline'
     */
    label: string;
    /**
     * A slightly longer description of what the snippet offers.
     */
    detail: string;
    /**
     * A string that should be inserted into the script when selecting
     * this snippet.
     *
     * The `insertText` is subject to interpretation by the editor.
     * Use this rules: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax
     */
    insertText: string;
}
/**
 * Language service api options
 */
interface ApiContext {
    /**
     * The profile (variables, additional api items, bundles, etc.)
     */
    profile?: ApiProfile;
    /**
     * The locale for the Api
     */
    locale?: string;
    /**
     * Allows to augment the language snippets with a collection of snippets
     */
    snippets?: ApiSnippet[];
}
/**
 * Language service profile
 */
interface ApiProfile {
    /**
     * The wellknown profile id if applicable
     */
    id?: ProfileId;
    /**
     * The set of profile variables
     */
    variables: ApiVariable[];
    /**
     * The api version to use
     */
    apiVersion?: string;
    /**
     * The api bundles to use
     */
    bundles?: BundleType[];
    /**
     * A collection of api item names to hide.
     */
    hiddenApiItems?: string[];
}
/**
 * The type for value variable.
 */
type ApiValueVariableType = Exclude<SdkVariableType, "dictionary">;
interface ApiVariableBase {
    /**
     * Name of the variable
     */
    name: string;
    /**
     * Optional short description for the variable
     */
    description?: string;
    /**
     * Completion item for the variable, leveraged bu the editor
     */
    completion?: CompletionItem;
}
/**
 * Describes a dictionary type (feature, dictionary)
 */
interface ApiDictionaryVariable extends ApiVariableBase {
    type: "dictionary";
    /**
     * Dictionary properties
     */
    properties?: ApiVariable[];
}
/**
 * Describes a simple variable type (number, featureSet, etc.)
 */
interface ApiValueVariable extends ApiVariableBase {
    type: ApiValueVariableType;
}
/**
 * The profile variable type
 */
type ApiVariable = ApiDictionaryVariable | ApiValueVariable;

interface ApiVersion {
    major: number;
    minor?: number;
}
type ApiConstantNamespace = {
    type: "namespace";
    key: string;
    members: SdkConstant[];
    completion: CompletionItem;
};
type ApiConstantDefinition = SdkConstant | ApiConstantNamespace;
type ApiFunctionDefinition = {
    type: "functionDefinition";
    key: string;
    overloads: SdkFunction[];
};
/**
 * Describes the API properties
 */
interface ApiDatabase {
    categories: ApiCategory[];
    functionDefinitions: Map<string, ApiFunctionDefinition>;
    constantDefinitions: Map<string, ApiConstantDefinition>;
}
declare function filterApiLibraryForContext(apiLibraryPromise: Promise<SdkCategory[]>, context: ApiContext): Promise<ApiDatabase>;
/**
 * Helper function to test if a variable is a value variable
 */
declare function isValueVariable(variable: ApiVariable | null | undefined): variable is ApiValueVariable;
/**
 * Helper function to test if a variable is a dictionary variable
 */
declare function isDictionaryVariable(variable: ApiVariable | null | undefined): variable is ApiDictionaryVariable;

/**
 * Language service settings
 */
interface LanguageServiceSettings {
    getApiLibrary: (locale: string) => Promise<ApiCategory[]>;
}
declare class ApiService<TApiContext extends ApiContext = ApiContext> {
    private _settings;
    private localeToApiLibraryPromiseMap;
    constructor(_settings: LanguageServiceSettings);
    /**
     * Returns the API definitions for the given settings: definitions, constant definitions, and function definitions
     */
    getApiDatabase(context: TApiContext): Promise<ApiDatabase>;
    /**
     * Returns the API definitions
     */
    getApiLibrary(context: TApiContext): Promise<ApiCategory[]>;
}

export { type ApiCategory, type SdkConstant as ApiConstant, type ApiConstantDefinition, type ApiConstantNamespace, type ApiContext, type ApiDatabase, type ApiDictionaryVariable, type SdkFunction as ApiFunction, type ApiFunctionDefinition, type ApiItem, type ApiProfile, ApiService, type ApiSnippet, type ApiValueVariable, type ApiValueVariableType, type ApiVariable, type SdkVariableType as ApiVariableType, type ApiVersion, type ArcadeSdkPredefinedProfile, type BundleType, type LanguageServiceSettings, type ProfileId, type SdkPredefinedProfile, type SqlSdkPredefinedProfile, filterApiLibraryForContext, isDictionaryVariable, isValueVariable };
